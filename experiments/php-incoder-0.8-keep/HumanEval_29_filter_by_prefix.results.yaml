name: HumanEval_29_filter_by_prefix
language: php
results:
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $prefixed = [];\n    foreach ($strings as $string) {\n     \
    \   if (strlen($string) > strlen($prefix)) {\n            continue;\n        }\n\
    \        if (substr($string, 0, strlen($prefix)) == $prefix) {\n            $prefixed[]\
    \ = $string;\n        }\n    }\n    return $prefixed;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrgtcudz.php:26\n\
    Stack trace:\n#0 /tmp/tmpsrgtcudz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsrgtcudz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$strings) return [];\n  $result = [];\n  foreach ($strings\
    \ as $s) {\n    if (strpos($s, $prefix) === 0) $result[] = $s;\n  }\n  return\
    \ $result;\n}\n$filtered_messages = filter_by_prefix($ungrouped_messages, '#');\n\
    $filtered_messages = array_merge($filtered_messages, filter_by_prefix($ungrouped_messages,\
    \ '##'));\n$filtered_messages = array_unique($filtered_messages);\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\nIt works,\
    \ but it's ugly and hard to read/understand. I'd recommend using PHP 7.4's new\
    \ features for these kind of functions:\n<code>\n/**\n * Filter an input list\
    \ of strings only for ones that start with a given prefix.\n *\n * array $strings\
    \ all of the strings to filter\n * string $prefix the prefix to match\n * array\n\
    \ */\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp3e1q9dm8.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return 0 === strpos($string, $prefix);\n  });\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThat's not a proper answer. The code sample clearly shows that\
    \ the OP wants an **array** of strings, not the filtered strings. In your example\
    \ you are printing the filtered strings.\n<|/ c |>\n<| c |>\nWhat do you mean\
    \ by \"proper answer\"? The OP wants to print a list of strings that begin with\
    \ a given prefix. As I said in the question, the code above does exactly that.\
    \ Do you think it would work if you simply replace \"echo\" by \"print_r\" and\
    \ remove the `[]` around the returned array variable?\n<|/ c |>\n<| c |>\nNo.\
    \ In the question you state: \"*The code sample clearly shows that the OP wants\
    \ an array of strings, not the filtered strings.*\"\n<|/ c |>\n<| c |>\nMy answer\
    \ works, if you remove the `[]` in the return, and also replace the echo by print_r.\n\
    <|/ c |>\n<| c |>\nYes, my answer returns a filtered list of strings, and your\
    \ answer returns a list of strings.\n<|/ c |>\n<| a tags=php,arrays,string,filter\
    \ dscore=2 |>\nUse array_filter()\n<code>\n$strings = array(\"aa\", \"bb\", \"\
    cc\", \"dd\");\n$prefix = \"a\";\nprint_r(array_filter($strings, function($val)\
    \ use ($prefix) {\n    return strpos($val, $prefix) === 0;\n}));\n</code>\n<|/\
    \ a |>\n<| a tags=php,arrays,string,filter |>\nThe PHP array_filter function is\
    \ what you are looking for. Here is the documentation:\nhttp://php.net/manual/en/function.array-filter.php\n\
    <|/ a dscore=1 |>\n<| c |>\nYep. And here you find some examples how to implement\
    \ it: http://stackoverflow.com/questions/14226092/php-array-filter-with-multiple-conditions-and-multiple-arrays\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmplvkkbgn4.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n  foreach ($strings as $s) {\n    if (strlen($prefix)\
    \ && substr($s, 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $s;\n \
    \   }\n  }\n  return $filtered;\n}\n$foo = filter_by_prefix($list, 'bar');\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpqgn4tuah.php\
    \ on line 9\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter($strings, function($item) use ($prefix)\
    \ {\n        return strpos($item, $prefix) === 0;\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkb76cnye.php:19\n\
    Stack trace:\n#0 /tmp/tmpkb76cnye.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpkb76cnye.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($str) use ($prefix) {\n\
    \    return strncmp($prefix, $str, strlen($prefix)) == 0;\n  });\n}\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0a7nqnfi.php:18\n\
    Stack trace:\n#0 /tmp/tmp0a7nqnfi.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp0a7nqnfi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($v) use ($prefix) {\n \
    \   return strpos($v, $prefix) === 0;\n  });\n}\n</code>\nAnd use them like:\n\
    <code>\n$allStrings = [\n  'a',\n  'ab',\n  'abc',\n  'abcd',\n  'abcdxyz',\n\
    \  'abc',\n  'xyz',\n];\n\n$inputStrings = [];\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsvfgqsqq.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (!is_array($strings)) throw new InvalidArgumentException();\n\
    \    if (!is_string($prefix)) throw new InvalidArgumentException();\n    $results\
    \ = [];\n    foreach ($strings as $string) {\n        if (0 === strpos($string,\
    \ $prefix)) $results[] = $string;\n    }\n    return $results;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$strings) {\n    return array();\n  }\n  $result = array();\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > 0 && substr($string,\
    \ 0, strlen($prefix)) === $prefix) {\n      $result[] = $string;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strncmp($string, $prefix, strlen($prefix)) == 0;\n  });\n}\n```\n\
    \"\"\"),\n      'filter_by_regex': ParamInfo(\n        Params.ParamType(\n   \
    \         doc=\"\"\"\nFilter a list of strings based on whether they match a given\
    \ regular\nexpression pattern.\n\"\"\"),\n        Params.ParamType(\n        \
    \    doc=\"\"\"\nThe regular expression pattern to match.\n\"\"\"),\n        Params.ParamType(\n\
    \            doc=\"\"\"\nA list to filter. If any of the strings in the list match\
    \ the pattern,\nthe filter function will return true. Otherwise, it will keep\
    \ the\noriginal list intact.\n\"\"\"),\n        Params.ParamType(\n          \
    \  doc=\"\"\"\nA function to be applied to each string in the list.\n\"\"\"),\n\
    \      ),\n      'find_in_objects': ParamInfo(\n        Params.ParamType(\n  \
    \          doc=\"\"\"\nSearch a list for values in a list of objects.\n\"\"\"\
    ),\n        Params.ParamType(\n            doc=\"\"\"\nThe list of objects to\
    \ search.\n\"\"\"),\n        Params.ParamType(\n            doc=\"\"\"\nThe key\
    \ of the property on each object in the list that needs to be matched.\n\"\"\"\
    ),\n        Params.ParamType(\n            doc=\"\"\"\nThe value to match against\
    \ the property on each object in the list.\n\"\"\"),\n        Params.ParamType(\n\
    \            doc=\"\"\"\nA function to be applied to each object in the list.\n\
    \"\"\"),\n      ),\n      'group_by_array': ParamInfo(\n        Params.ParamType(\n\
    \            doc=\"\"\"\nA list to group by into lists of unique values.\n\"\"\
    \"),\n        Params.ParamType(\n            doc=\"\"\"\nThe name of the key on\
    \ each element in the list.\n\"\"\"),\n        Params.ParamType(\n           \
    \ doc=\"\"\"\nA function to aggregate values from the list into groups and return\
    \ an\narray of the groups.\n\"\"\"),\n      ),\n      'group_by_array_key_val':\
    \ ParamInfo(\n        Params.ParamType(\n            doc=\"\"\"\nA list to group\
    \ by into lists of unique values. Each element in the list\nmust itself be a list\
    \ of key-value pairs.\n\"\"\"),\n        Params.ParamType(\n            doc=\"\
    \"\"\nThe name of the key on each element in the list.\n\"\"\"),\n        Params.ParamType(\n\
    \            doc=\"\"\"\nThe function to aggregate the values from the list into\
    \ groups.\n\"\"\"),\n      ),\n      'group_by_dict': ParamInfo(\n        Params.ParamType(\n\
    \            doc=\"\"\"\nA dict to group by into a list of unique values.\n\"\"\
    \"),\n        Params.ParamType(\n\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpw5ia37mi.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    array_map(function($s) { return preg_match(\"\
    /^{$prefix}/\", $s) ? $s : null; }, $strings),\n    function ($s) use ($prefix)\
    \ { return ($prefix ? preg_match(\"/^{$prefix}/\", $s) : null === $s); }\n  );\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2z097hx.php:20\n\
    Stack trace:\n#0 /tmp/tmpa2z097hx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa2z097hx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings) || empty($prefix)) {\n    return $strings;\n\
    \  }\n  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter($strings, function ($string) use ($prefix)\
    \ {\n        return strpos($string, $prefix) === 0;\n    });\n}\n</code>\n<|/\
    \ a tags=php |>\n<| a |>\nUse array_filter:\n<code>\n$result = array_filter($array,\
    \ function($var) use ($prefix) {\n    return strpos($var, $prefix) === 0;\n});\n\
    </code>\n<|/ a dscore=3 tags=php |>\n<| a tags=php dscore=2 |>\nAnother way is\
    \ to use array_reduce\n<code>\n$strings = ['abc', 'aac', 'asdf'];\n$prefix = 'a';\n\
    \n$result = array_reduce($strings, function($array, $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n        $array[] = $string;\n    }\n    return $array;\n\
    }, []);\n\nprint_r($result);\n</code>\nThe output is:\n<code>\nArray\n(\n    [0]\
    \ => abc\n    [1] => aac\n)\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgqprcje4.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($item) use ($prefix) {\
    \ return strncmp($prefix, $item, 0, strlen($prefix)); });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strncmp() expects exactly 3 parameters, 4 given in /tmp/tmptdw99558.php\
    \ on line 8\n\nWarning: strncmp() expects exactly 3 parameters, 4 given in /tmp/tmptdw99558.php\
    \ on line 8\n\nWarning: strncmp() expects exactly 3 parameters, 4 given in /tmp/tmptdw99558.php\
    \ on line 8\n\nWarning: strncmp() expects exactly 3 parameters, 4 given in /tmp/tmptdw99558.php\
    \ on line 8\n\nWarning: strncmp() expects exactly 3 parameters, 4 given in /tmp/tmptdw99558.php\
    \ on line 8\n\nWarning: strncmp() expects exactly 3 parameters, 4 given in /tmp/tmptdw99558.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdw99558.php:16\n\
    Stack trace:\n#0 /tmp/tmptdw99558.php(19): test()\n#1 {main}\n  thrown in /tmp/tmptdw99558.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter($strings, function($str) use($prefix) {\n\
    \        return strpos($str, $prefix) === 0;\n    });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddne_102.php:18\n\
    Stack trace:\n#0 /tmp/tmpddne_102.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpddne_102.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($string) use ($prefix)\
    \ { return strncmp($string, $prefix, strlen($prefix)) == 0; });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnv0b0r_.php:16\n\
    Stack trace:\n#0 /tmp/tmpwnv0b0r_.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpwnv0b0r_.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $matches = array();\n  foreach($strings as $string) {\n    if\
    \ (substr($string, 0, strlen($prefix)) == $prefix) {\n      $matches[] = $string;\n\
    \    }\n  }\n  return $matches;\n}\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  // Filter through the given array of strings only keeping those\
    \ whose first value starts with the given prefix.\n  return array_filter(\n  \
    \  $strings,\n    function($string) use ($prefix) {\n      return strpos($string,\
    \ $prefix) === 0;\n    }\n  );\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02bqrggx.php:23\n\
    Stack trace:\n#0 /tmp/tmp02bqrggx.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp02bqrggx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYour solution doesn't work if the list\
    \ contains strings starting with certain characters such as *c* or *r*. I tested\
    \ it on a php sandbox and the result was *abc* and *r* which is not expected.\n\
    <|/ c |>\n<| c |>\nI have added your fix to the answer. Thanks!\n<|/ c |>\n<|\
    \ a dscore=0 |>\nThis approach uses a Regular Expression and  a negative look-behind.\n\
    Code: (Demo)\n<code>\n$strings = [\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n\
    \    'mno',\n    'pqr',\n    'stu',\n    'vwx',\n    'yz',\n];\n\n$prefix = 'ab';\n\
    \n$pattern = '/(?<![a-z])' . preg_quote($prefix, '/') . '/i';\n\nvar_export(preg_filter($pattern,\
    \ '', $strings));\n</code>\nOutput:\n<code>\narray (\n  0 => 'abc',\n  1 => 'def',\n\
    \  2 => 'ghi',\n  3 => 'jkl',\n  4 => 'mno',\n  5 => 'pqr',\n  6 => 'stu',\n \
    \ 7 => 'vwx',\n  8 => 'yz',\n)\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis\
    \ approach seems to work perfectly for my case and I have also added an additional\
    \ case that I have added to the question. Can you please help me understand why\
    \ this approach works?\n<|/ c |>\n<| c |>\nYour `if` condition is evaluating to\
    \ true for the `'r'` string, so `array('abc','r')` is not being filtered.\n<|/\
    \ c |>\n<| a |>\nJust use a regexp to strip the unwanted letters from the array\
    \ and return the remaining ones:\n<code>\n<?php\n\n$original = ['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz'];\n$filtered = preg_filter('~ab~i',\
    \ '', $original);\nprint_r($filtered);\n</code>\nOutput:\n<code>\nArray\n(\n \
    \   [0] => abc\n    [1] => def\n    [2] => ghi\n    [3] => jkl\n    [4] => mno\n\
    \    [5\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpkvia4tbt.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $prefix_length = strlen($prefix);\n  $prefixed_strings = [];\n\
    \n  // Add each given prefix to the front.\n  foreach ($strings as $string) {\n\
    \    if (strncmp($string, $prefix, $prefix_length) == 0) {\n      $prefixed_strings[]\
    \ = $string;\n    }\n  }\n\n  // Remove any strings left with a different prefix\
    \ than the one we're looking for.\n  foreach ($prefixed_strings as $key => $string)\
    \ {\n    if (strncmp($prefix, $string, $prefix_length) != 0) {\n      unset($prefixed_strings[$key]);\n\
    \    }\n  }\n\n  return $prefixed_strings;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings)) {\n    return [];\n  }\n  return array_filter($strings,\
    \ function ($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    \  });\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lk0goe7.php:22\n\
    Stack trace:\n#0 /tmp/tmp9lk0goe7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9lk0goe7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($str) use ($prefix) {\n\
    \    return 0 === strpos($str, $prefix);\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ttqu0jp.php:19\n\
    Stack trace:\n#0 /tmp/tmp_ttqu0jp.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp_ttqu0jp.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[$string] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpedj9rc8b.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (is_null($strings)) return $strings;\n  return array_filter(\n\
    \    $strings,\n    function ($string) use ($prefix) {\n      return strlen($string)\
    \ >= strlen($prefix) && strpos($string, $prefix) === 0;\n    }\n  );\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9volfkoz.php:23\n\
    Stack trace:\n#0 /tmp/tmp9volfkoz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9volfkoz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (empty($strings)) {\n        return [];\n    }\n\n    $filtered\
    \ = [];\n\n    foreach ($strings as $string) {\n        if (strpos($string, $prefix)\
    \ === 0) {\n            $filtered[] = $string;\n        }\n    }\n\n    return\
    \ $filtered;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  // Filter $strings out where $strings[0] starts with $prefix.\n\
    \  if (empty($strings) || empty($prefix)) {\n    return $strings;\n  }\n\n  return\
    \ array_filter($strings, function($s) {\n    return strpos($s, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nYou could always use array_walk\n\
    <code>\n$strings = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\narray_walk($strings,\
    \ create_function('&$v', '$v = strpos($v, \"$prefix\");'));\nprint_r($strings);\n\
    </code>\nOutput\n<code>\nArray\n(\n    [0] => abc\n    [1] => array\n)\n</code>\n\
    <|/ a tags=php,filtering,arrays dscore=1 |>\n<| a dscore=0 tags=php,filtering,arrays\
    \ |>\nThis should work:\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpc72svlqa.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($s) use ($prefix) {\n \
    \   return strpos($s, $prefix) === 0;\n  });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9cikuef.php:18\n\
    Stack trace:\n#0 /tmp/tmpr9cikuef.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpr9cikuef.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!is_array($strings)) {\n    error_log(\"filter_by_prefix:\
    \ not an array.\");\n    return array();\n  }\n  $result = array();\n  foreach\
    \ ($strings as $string) {\n    if (substr($string, 0, strlen($prefix)) == $prefix)\
    \ {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n\n/**\n * Gets\
    \ a value from $_REQUEST.\n *\n * This does not use a default value, but will\
    \ emit an E_NOTICE if it is not set.\n */\nfunction candidate(...$args) {\n  \
    \  return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered_strings = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered_strings[] = $string;\n\
    \    }\n  }\n  return $filtered_strings;\n}\nfunction candidate(...$args) {\n\
    \    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[$string] = $string;\n    }\n  }\n\n  return\
    \ $filtered;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwzw914b.php:25\n\
    Stack trace:\n#0 /tmp/tmpmwzw914b.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmwzw914b.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n  foreach ($strings as $s) {\n    if (strpos($s,\
    \ $prefix) === 0) {\n      $filtered[] = $s;\n    }\n  }\n  return $filtered;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  // Ensure $prefix is lowercase and ends with a dot.\n  $prefix\
    \ = strtolower($prefix);\n  $prefix = rtrim($prefix, '.');\n  return array_filter($strings,\
    \ function ($val) use ($prefix) {\n    return strpos($val, $prefix) === 0;\n \
    \ });\n}\n</code>\nIf you're using PHP 5.5, you can use the splat operator:\n\
    <code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp644gkhvq.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n\n  foreach ($strings as $string) {\n    if (mb_substr($string,\
    \ 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $string;\n    }\n  }\n\
    \n  return $filtered;\n}\n\n/**\n * Recursively filter an array to remove any\
    \ entries that do not match a predicate.\n *\n * @param array  $array\n * @param\
    \ callable $func\n *\n * @return array The filtered array\n */\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_substr() in\
    \ /tmp/tmpfs89gmac.php:11\nStack trace:\n#0 /tmp/tmpfs89gmac.php(28): filter_by_prefix(Array,\
    \ 'xxx')\n#1 /tmp/tmpfs89gmac.php(33): candidate(Array, 'xxx')\n#2 /tmp/tmpfs89gmac.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpfs89gmac.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($string) use ($prefix)\
    \ {\n    return 0 === strpos($string, $prefix);\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsm4dck_.php:19\n\
    Stack trace:\n#0 /tmp/tmpbsm4dck_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpbsm4dck_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n  foreach ($strings as $string) {\n    if (0\
    \ === strncmp($prefix, $string, 0)) {\n      $filtered[] = $string;\n    }\n \
    \ }\n  return $filtered;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xho3oqm.php:23\n\
    Stack trace:\n#0 /tmp/tmp3xho3oqm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3xho3oqm.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  foreach ($strings as $key => $string) {\n    if (strncmp($prefix,\
    \ $string, 0) == 0) {\n      unset($strings[$key]);\n    }\n  }\n  return $strings;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsososxc0.php:22\n\
    Stack trace:\n#0 /tmp/tmpsososxc0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsososxc0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($s) {\n    return strncmp($s,\
    \ $prefix, strlen($prefix));\n  });\n}\n</code>\n<|/ a tags=php,arrays,filter,multidimensional-array\
    \ |>\n<| c |>\nThis would filter all strings that start with the given prefix.\
    \ The OP wants to keep only those that _do not start_ with the given prefix. That\
    \ is where `!strncmp()` comes in handy.\n<|/ c |>\n<| c |>\nOh yeah, I missed\
    \ that. Thanks for the comment, I will edit my answer accordingly.\n<|/ c |>\n\
    <| c |>\nWhy are you `return`ing false instead of `true`? Does that not make it\
    \ clearer? Seems more logical to me... [edit: or maybe not. :P]\n<|/ c |>\n<|\
    \ a tags=php,arrays,filter,multidimensional-array |>\nThis is a variation of Ben\
    \ Lee's answer but more efficient for very large arrays.\n<code>\n$filterByPrefix\
    \ = function ($a, $prefix) {\n    $result = [];\n\n    foreach ($a as $e) {\n\
    \        if ( strncmp($e, $prefix, strlen($prefix)) === 0) {\n            $result[]\
    \ = $e;\n        }\n    }\n\n    return $result;\n};\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nA bit simpler with strpos:\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj1efph_9.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  // Don't filter an empty list.\n  if (!$strings) {\n    return\
    \ $strings;\n  }\n  // Return an empty list if $prefix isn't a string.\n  if (!is_string($prefix))\
    \ {\n    return [];\n  }\n  // Return an empty list if $prefix is empty.\n  if\
    \ (!strlen($prefix)) {\n    return [];\n  }\n  // Return an empty list if $prefix\
    \ is all lowercase.\n  if (strtolower($prefix) == $prefix) {\n    return [];\n\
    \  }\n  // Return an empty list if $prefix starts with an underscore.\n  if (substr($prefix,\
    \ 0, 1) == '_') {\n    return [];\n  }\n  // Return an empty list if $prefix ends\
    \ with an underscore.\n  if (substr($prefix, -1) == '_') {\n    return [];\n \
    \ }\n  // Create an array with all the strings that $prefix starts with but don't\n\
    \  // start with $prefix.\n  $prefix_is_bad = false;\n  $prefix_is_good = true;\n\
    \  foreach ($strings as $string) {\n    if (substr($string, 0, strlen($prefix))\
    \ == $prefix) {\n      $prefix_is_bad = false;\n      break;\n    } else {\n \
    \     $prefix_is_good = false;\n    }\n  }\n  // Return an empty list if all strings\
    \ in $strings don't start with $prefix.\n  if (!$prefix_is_good) {\n    return\
    \ [];\n  }\n  // Create an array with all the strings that $prefix doesn't start\
    \ with but\n  // do end with $prefix.\n  $prefix_is_good = true;\n  $prefix_is_bad\
    \ = false;\n  foreach ($strings as $string) {\n    if (substr($string, 0, strlen($prefix))\
    \ == $prefix) {\n      $prefix_is_good = true;\n      break;\n    } else {\n \
    \     $prefix_is_bad = true;\n    }\n  }\n  // Return an empty list if all strings\
    \ in $strings end with $prefix.\n  if (!$prefix_is_bad) {\n    return [];\n  }\n\
    \  // Return $strings filtered to remove $prefix.\n  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=5 tags=arrays,search,php,string |>\n<| c |>\n\
    This answer is better than the others because it will also handle partial matches\
    \ correctly - e.g. `filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') will\
    \ return ['abc', 'array']`\n<|/ c |>\n<| c |>\nThis answer should be the selected\
    \ answer as it is more general and has less code than the others.\n<|/ c |>\n\
    <| c |>\nIn case the array is too large, this function will iterate it all twice\
    \ making the algorithm O(n^2)\n<|/ c |>\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpaixvdqaw.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (empty($strings)) {\n        return $strings;\n    }\n\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $prefix) ===\
    \ 0) {\n            yield $string;\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprk9cg8ye.php:24\n\
    Stack trace:\n#0 /tmp/tmprk9cg8ye.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprk9cg8ye.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!is_array($strings)) {\n    throw new InvalidArgumentException('Expecting\
    \ $strings to be an array.');\n  }\n  if (!is_string($prefix)) {\n    throw new\
    \ InvalidArgumentException('Expecting $prefix to be a string.');\n  }\n  return\
    \ array_filter($strings, function ($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdbu0gdc.php:24\n\
    Stack trace:\n#0 /tmp/tmpcdbu0gdc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcdbu0gdc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $matches = preg_grep('/^' . preg_quote($prefix, '/') . '/i', $strings);\n\
    \  return array_values(array_diff($strings, $matches));\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwdxe7pg.php:18\n\
    Stack trace:\n#0 /tmp/tmpzwdxe7pg.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpzwdxe7pg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter($strings, function($s) use ($prefix) {\n\
    \        return strncmp($s, $prefix, strlen($prefix)) == 0;\n    });\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ioxu7kj.php:19\n\
    Stack trace:\n#0 /tmp/tmp8ioxu7kj.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8ioxu7kj.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!is_array($strings)) return $strings;\n  $result = [];\n \
    \ foreach ($strings as $string) {\n    if (substr($string, 0, strlen($prefix))\
    \ == $prefix) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\nI haven't\
    \ tested it, but hopefully it works as expected. :)\n<|/ a |>\n<| c |>\nThis also\
    \ works for the given example, but in my scenario I have an indefinite number\
    \ of arrays to filter through, and each array has a different number of elements,\
    \ so this won't work for me. Thanks for the help though.\n<|/ c |>\n<| c |>\n\
    Then it might be a good idea to update your question to reflect that :-)\n<|/\
    \ c |>\n<| c |>\nSorry, I thought I made that clear, but apparently not. :)\n\
    <|/ c |>\n<| a dscore=0 |>\nHere's one way to get all of the strings that begin\
    \ with the prefix:\n<code>\n$input = [\n    'prefixed',\n    'prefix_',\n    'prefix_',\n\
    \    'prefix_prefix_',\n];\n\n$prefix = 'prefix';\n\n$filtered = array_filter($input,\
    \ function($a) use ($prefix) {\n    return strpos($a, $prefix) === 0;\n});\n\n\
    print_r($filtered);\n</code>\nThe output is:\n<code>\nArray\n(\n    [2] => prefix_\n\
    \    [3] => prefix_prefix_\n)\n</code>\nIf you just want to search a single array,\
    \ then you can use a closure:\n<code>\n$input = [\n    'prefixed',\n    'prefix_',\n\
    \    'prefix_',\n    'prefix_prefix_',\n];\n\n$prefix = 'prefix';\n\n$filtered\
    \ = array_filter($input, function($a) use ($prefix) {\n    return strpos($a, $prefix)\
    \ === 0;\n});\n\nprint_r($filtered);\n</code>\nThe output is:\n<code>\nArray\n\
    (\n    [2] => prefix_\n    [3] => prefix_prefix_\n)\n</code>\n<|/ a tags=arrays,php,filter\
    \ |>\n<| c |>\nThis would work great if I only had one array of arrays to filter.\
    \ My situation is I have an indefinite number of arrays to filter through, and\
    \ each array has a different number of elements, so this won't work for me. Thanks\
    \ for the help though.\n<|/ c |>\n<| c |>\nThis should work in any number of arrays:\
    \ https://3v4l.org/N4P6r\n<|/ c |>\n<| c |>\nThis still doesn't work as I stated\
    \ in my question. I need to be able to filter through the entire array, not just\
    \ a single array.\n<|/ c |>\n<| c |>\nYou're right it does, but I realized that\
    \ I didn't need to filter\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpcsft9veg.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $strings = (array) $strings;\n    $prefix = (string) $prefix;\n\
    \    $output = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $prefix) === 0) {\n            $output[] = $string;\n        }\n    }\n    return\
    \ $output;\n}\n</code>\n<|/ a dscore=0 tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\nThe other answers don't address the issue of duplicates in the $strings\
    \ array and also use an inefficient loop. This approach uses a map to map the\
    \ strings in the input array to the list of strings that start with the string\
    \ in the input array ($prefix):\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv5gnht_k.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $result = [];\n    foreach ($strings as $string) {\n       \
    \ if (strpos($string, $prefix) === 0) {\n            $result[] = $string;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($item) {\n    return strpos($item,\
    \ $prefix) === 0;\n  });\n}\n</code>\nTo add or remove string prefix you can either\
    \ use array_walk or array_filter and use str_replace to remove them from the input\
    \ list or use array_splice:\n<code>\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpgfxmao7o.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $prefix = (string) $prefix;\n  foreach ($strings as $string) {\n\
    \    if (!strncmp($string, $prefix, strlen($prefix))) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| a tags=php,string,arrays\
    \ dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpta9sz4qs.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($s) use ($prefix) {\n \
    \   return strpos($s, $prefix) === 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpel770z0f.php:19\n\
    Stack trace:\n#0 /tmp/tmpel770z0f.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpel770z0f.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!is_array($strings)) {\n    throw new InvalidArgumentException(\"\
    Expecting array of strings.\");\n  }\n\n  if (!is_string($prefix)) {\n    throw\
    \ new InvalidArgumentException(\"Expecting string.\");\n  }\n\n  if (!strlen($prefix))\
    \ {\n    throw new InvalidArgumentException(\"Expecting non-empty string.\");\n\
    \  }\n\n  return array_filter($strings, function($value) use ($prefix) {\n   \
    \ return strpos($value, $prefix) === 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprqa2qsxf.php:31\n\
    Stack trace:\n#0 /tmp/tmprqa2qsxf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprqa2qsxf.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $ret = [];\n  foreach ($strings as $s) {\n    if (strpos($s, $prefix)\
    \ === 0) {\n      $ret[] = $s;\n    }\n  }\n  return $ret;\n}\n</code>\n<|/ a\
    \ tags=list,php,arrays |>\n<| a dscore=1 tags=list,php,arrays |>\n<code>\n$data1\
    \ = 'a,b,c,d,e';\n$data2 = 'z,y,x,w';\n$data3 = 'a,b,c,d,e';\n\n$data1 = explode(\"\
    ,\", $data1);\n$data2 = explode(\",\", $data2);\n$data3 = explode(\",\", $data3);\n\
    \n$output = [];\nforeach($data1 as $key => $value){\n  if(in_array($value,$data2)){\n\
    \    $output[$value] = $data3[$key];\n  }\n}\n\necho \"<pre>\";\nprint_r($output);\n\
    echo \"</pre>\";\n</code>\nThis code will get what you are looking for. Hope it\
    \ helps.\n<|/ a |>\n<| a tags=list,php,arrays |>\nThis is an alternative for those\
    \ who want to get this done in a more readable way using array_filter():\n<code>\n\
    $listA = array_filter(\n  array_map(\n    function($value) {\n        return explode(\"\
    ,\", $value);\n    },\n    $listA\n  ),\n  function($value) {\n    return count($value)\
    \ > 1;\n  }\n);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$a = [\n\
    'a,b,c,d,e',\n'z,y,x,w',\n'a,b,c,d,e'\n];\n\n$b = array_unique(array_map(function($v){\n\
    \    return explode(',', $v);\n}, $a));\n\n$c = array_filter(array_map(function($v){\n\
    \    return count($v) > 1;\n}, $b), function($v){\n    return count($v) > 0;\n\
    });\n</code>\n<|/ a tags=list,php,arrays |>\n<| a tags=list,php,arrays |>\nI wrote\
    \ a function to do this, it also handles the case when there is a non-unique set\
    \ of items in any of the arrays and it also handles duplicate items from one array\
    \ to the other.\n<code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpvyozouix.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($value) {\n    return (substr($value,\
    \ 0, strlen($prefix)) === $prefix);\n  });\n}\nfunction candidate(...$args) {\n\
    \    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjh4i_ivv.php:18\n\
    Stack trace:\n#0 /tmp/tmpjh4i_ivv.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpjh4i_ivv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($string) use ($prefix)\
    \ {\n    return strncmp($prefix, $string, strlen($prefix)) == 0;\n  });\n}\n\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyymkce5n.php:19\n\
    Stack trace:\n#0 /tmp/tmpyymkce5n.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpyymkce5n.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $result = array();\n  foreach ($strings as $s) {\n    if (strncmp($prefix,\
    \ $s, strlen($prefix)) == 0) {\n      $result[] = $s;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings)) return [];\n\n  $result = [];\n  foreach\
    \ ($strings as $string) {\n    if (substr($string, 0, strlen($prefix)) == $prefix)\
    \ {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (is_array($strings)) {\n    foreach ($strings as $string) {\n\
    \      $key = array_search($prefix, $string);\n      if ($key !== FALSE) {\n \
    \       unset($strings[$key]);\n      }\n    }\n    return $strings;\n  }\n}\n\
    </code>\n<|/ a tags=arrays,php,sorting dscore=5 |>\n<| c |>\nGreat answer!  I\
    \ wanted to filter a list of arrays and only wanted the top five by their score,\
    \ so I modified this slightly to return an array of arrays with just the top five.\
    \  This was helpful in figuring out how to do this in Laravel Collections.  I\
    \ needed this because I wanted to filter an already sorted list by score.  Thanks\
    \ again!\n<|/ c |>\n<| c |>\nI used this in my Laravel Collection and it worked\
    \ like a charm.\n<|/ c |>\n<| c |>\nThis should be the top answer!\n<|/ c |>\n\
    <| c |>\nGreat and great answer. I just wonder why PHP's array functions are more\
    \ versatile than Perl's grep\n<|/ c |>\n<| c |>\nThis is really the best answer\
    \ here as it's only a single function call and it uses `array_filter`.  And it's\
    \ way faster than most other solutions.\n<|/ c |>\n<| a dscore=5 tags=arrays,php,sorting\
    \ |>\nI use this function\n<code>\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpe7ugzf7m.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    $strings,\n    function ($string) use\
    \ ($prefix) {\n      return strpos($string, $prefix) === 0;\n    }\n  );\n}\n\n\
    /**\n * Get a unique list from a multi-dimension array.\n *\n * @param array $array\
    \ Array of items to filter.\n * @param callable $callback A callback function\
    \ to invoke for each item.\n * @param string|null $key The name of the key of\
    \ each item. This is not used\n *   for sorting purposes, instead use $callback\
    \ for more flexibility.\n * @return array A unique list of items.\n */\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjvofb8c.php:31\n\
    Stack trace:\n#0 /tmp/tmpvjvofb8c.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvjvofb8c.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $filtered = array();\n    foreach ($strings as $str) {\n   \
    \     if (strncmp($prefix, $str, strlen($prefix)) == 0) {\n            $filtered[]\
    \ = $str;\n        }\n    }\n    return $filtered;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (!is_array($strings)) {\n        return $strings;\n    }\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $prefix) ===\
    \ 0) {\n            yield $string;\n        }\n    }\n}\n</code>\nExample usage:\n\
    <code>\n<?php\nforeach (filter_by_prefix([\n    'abc',\n    'bcd',\n    'cde',\n\
    \    'array',\n], 'array') as $string) {\n    echo 'Found ', $string, PHP_EOL;\n\
    }\n</code>\nOutput:\n<code>\nFound array\n</code>\n<|/ a dscore=3 tags=php |>\n\
    <| a tags=php dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpen8kdjj_.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $matches = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $matches[] = $string;\n    }\n  }\n\
    \  return $matches;\n}\n\n$strings = array(\n  'This is a normal string value',\n\
    \  'strings with spaces',\n  'strings with plus sign',\n  'string with quotes',\n\
    \  'string with commas',\n  'string with brackets',\n  'string with equals and\
    \ plus sign',\n  'string with quotes and plus sign',\n  'string with equal sign',\n\
    \  'string with spaces plus plus sign',\n  'string with plus plus sign',\n  'string\
    \ with + sign',\n  'string with + sign and quotes',\n  'string with + sign plus\
    \ plus sign',\n  'string with spaces + plus plus sign',\n  'string with + sign\
    \ plus plus sign',\n  'string with spaces + plus plus sign plus plus sign',\n\
    \  'string with + sign plus plus sign plus plus sign plus plus plus sign',\n \
    \ 'string with spaces + plus plus sign plus plus sign plus plus sign plus plus\
    \ sign plus plus plus sign',\n  'string with + sign plus plus sign plus plus sign\
    \ plus plus sign plus plus sign plus plus sign plus plus sign plus plus sign',\n\
    \  'string with spaces + plus plus sign plus plus sign plus plus sign plus plus\
    \ sign plus plus sign plus plus sign plus plus sign plus plus sign plus sign',\n\
    \  'string with + sign plus plus sign plus plus sign plus plus sign plus plus\
    \ sign plus plus sign plus plus sign plus plus sign plus plus sign plus plus sign\
    \ plus sign',\n  'string with spaces + plus plus sign plus plus sign plus plus\
    \ sign plus plus sign plus plus sign plus plus sign plus plus sign plus plus sign\
    \ plus plus sign plus sign',\n  'string with + sign plus plus sign plus plus sign\
    \ plus plus sign plus plus sign plus plus sign plus plus sign plus plus sign plus\
    \ plus sign plus plus sign',\n  'string with spaces + plus plus sign plus plus\
    \ sign plus plus sign plus plus sign plus plus sign plus plus sign plus plus sign\
    \ plus plus sign plus plus sign plus sign',\n  'string with + sign plus plus sign\
    \ plus plus sign plus plus sign plus plus sign plus plus sign plus plus sign plus\
    \ plus sign plus plus sign plus plus sign',\n  'string with spaces + plus plus\
    \ sign plus plus sign plus plus sign plus plus sign plus plus sign plus plus sign\
    \ plus plus sign plus plus sign plus plus sign',\n  'string with + sign plus plus\
    \ sign plus plus sign plus plus \nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpz5kn3zso.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    $strings,\n    function ($string) use\
    \ ($prefix) {\n      return strpos($string, $prefix) === 0;\n    }\n  );\n}\n\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dwrpawn.php:22\n\
    Stack trace:\n#0 /tmp/tmp_dwrpawn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_dwrpawn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    $strings,\n    function ($value) {\n\
    \      return strncmp($value, $prefix, strlen($prefix)) == 0;\n    }\n  );\n}\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0brdg1i.php:21\n\
    Stack trace:\n#0 /tmp/tmpn0brdg1i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn0brdg1i.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$strings) return array();\n  $result = array();\n  foreach\
    \ ($strings as $string) {\n    if (strncmp($prefix, $string, strlen($prefix))===0)\
    \ {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if ($prefix === '') return $strings;\n  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[$string]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 tags=arrays,string,php,multidimensional-array\
    \ |>\n<| a dscore=1 |>\nIf you can't use array_filter(), you could use array_reduce()\
    \ and strpos().\n<code>\n$strings = ['abc', 'bcd', 'cde', 'array', 'a'];\n\n$output\
    \ = array_reduce($strings, function($carry, $str) use ($strings) {\n    return\
    \ $carry ? $carry : array_filter($strings, function($str) use ($str) {\n     \
    \   return strpos($str, $str) === 0;\n    });\n}, []);\n\nprint_r($output);\n\
    </code>\n<|/ a tags=arrays,string,php,multidimensional-array |>\n<| a tags=arrays,string,php,multidimensional-array\
    \ |>\nYou can use array_filter in combination with strpos to achieve what you\
    \ need. For example:\n<code>\n$arr = array('abc', 'xyz', 'def', 'ghi');\n$filtered\
    \ = array_filter($arr, function($item) {\n  return strpos($item, 'abc') === 0;\n\
    });\n</code>\nThis example will return the $arr values when there is a value in\
    \ $arr that begins with \"abc\", and will remove those values from the $arr when\
    \ there is not a match. \nHere is a working example: https://3v4l.org/5Ks6Y\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is just perfect :) Thanks very much.\n<|/ c |>\n\
    <| c |>\nNo problem, happy to help!\n<|/ c |>\n<| a dscore=0 |>\nYou can use the\
    \ array_filter function.\n<code>\n$filtered = array_filter($input, function($string)\
    \ {\n  return $string === 'abc';\n});\n</code>\n<|/ a tags=arrays,string,php,multidimensional-array\
    \ |>\n<| c |>\nThis is not going to work if the array contains values that do\
    \ not begin with \"abc\".\n<|/ c |>\n<| a dscore=0 |>\nUse array_filter and strpos\
    \ to filter your array :\n<code>\n$arr=['abc','bcd','cde','array','a'];\n\n$filtered=array_filter($arr,\
    \ function($v){\n    return strpos($v, 'abc')===0;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a tag\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpy76jkgja.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings)) return [];\n  return array_filter($strings,\
    \ function ($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_spiqwt.php:20\n\
    Stack trace:\n#0 /tmp/tmp5_spiqwt.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5_spiqwt.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    $strings,\n    function ($item) use\
    \ ($prefix) {\n      return strlen($item) === strlen($prefix) && substr($item,\
    \ 0, strlen($prefix)) === $prefix;\n    }\n  );\n}\n</code>\n<|/ a tags=php dscore=4\
    \ |>\n<| c |>\nI like this one the best, I think it is the most efficient way\
    \ to filter the array by prefix. Thanks.\n<|/ c |>\n<| c |>\nWhoops, I totally\
    \ missed the requirement to only allow partial matches. I've edited my answer\
    \ to include a version that does that.\n<|/ c |>\n<| c |>\nI wonder if there is\
    \ a way to filter by multiple prefixes. For example, `filter_by_prefix(['abca',\
    \ 'abcz', 'xyz'], 'a')` should return `['abca', 'abcz']` instead of `['abca',\
    \ 'abcz', 'xyz']`\n<|/ c |>\n<| a tags=php |>\nFor those who prefer one-liners,\
    \ here are a few ways I can think of:\n\nUse a regex\n\n<code>\n<?php\n$tests\
    \ = ['abca', 'abcz', 'xyz', 'abca'];\n$prefix = 'ab';\n$re = '/^' . preg_quote($prefix,\
    \ '/') . '/';\n$results = preg_grep($re, $tests);\nvar_dump($results);\n</code>\n\
    \nUse array_filter\n\n<code>\n<?php\n$tests = ['abca', 'abcz', 'xyz', 'abca'];\n\
    $prefix = 'ab';\n$results = array_filter(\n    $tests,\n    function ($item) use\
    \ ($prefix) {\n        return strpos($item, $prefix) === 0;\n    }\n);\nvar_dump($results);\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf6fw76x6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($s) use ($prefix) {\n \
    \   return strncmp($prefix, $s, strlen($prefix)) == 0;\n  });\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI didn't say it was your fault but I feel like your answer is\
    \ missing some critical information and would benefit from some explanation. Especially\
    \ since I don't like downvotes either.\n<|/ c |>\n<| a tags=filter,php,arrays,multidimensional-array\
    \ |>\nYou want to filter out the array where the key starts with the value of\
    \ the input variable. You'll have to iterate over the array and check each key\
    \ with your input variable.\nFor instance with array_filter:\n<code>\n$result\
    \ = array_filter(\n    $yourArray,\n    function($item) {\n        return strpos($item,\
    \ 'b') === 0; //returns true/false depending on whether 'b' exists at the start\
    \ of $item\n    }\n);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis answer will give\
    \ wrong result if there is a substring in `$item` that matches with `'b'`, for\
    \ example: `$item = 'b'; $yourArray = array('apple','b');` the result will be\
    \ `'apple'` instead of `'b'`. See the first comment of this answer: https://stackoverflow.com/a/4305394/139611\n\
    <|/ c |>\n<| c |>\nIf this should be the correct answer (and I think it is since\
    \ it uses `===`) could you please elaborate why you think it would be wrong?\n\
    <|/ c |>\n<| c |>\nUsing `===` will give wrong result if `$item` has substring\
    \ that matches with `'b'` in `$yourArray`. For example, `$item = 'b'; $yourArray\
    \ = array('apple','b');` the result will be `'apple'` instead of `'b'`.\n<|/ c\
    \ |>\n<| c |>\nUsing `strpos` will also give wrong result if the substring starts\
    \ with `'b'`, for example: `$item = 'b'; $yourArray = array('apple','bb');` the\
    \ result will be `'apple'` instead of `'b'`.\n<|/ c |>\n<| c |>\nYes, I agree\
    \ with. In addition it also doesn't check if `$item` is `empty`, which can be\
    \ an issue, depending on what the OP wants to filter out (ie. `'bb'` and `''`\
    \ should be filtered out).\n<|/ c |>\n<| a tags=filter,php,arrays,multidimensional-array\
    \ |>\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp40cerzra.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!empty($prefix)) {\n    return array_filter($strings, function($string)\
    \ use ($prefix) { return strpos($string, $prefix) === 0; });\n  }\n  return $strings;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq9_xt29.php:20\n\
    Stack trace:\n#0 /tmp/tmpkq9_xt29.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpkq9_xt29.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($element) use ($prefix)\
    \ {\n    return strncmp($prefix, $element, $len) === 0;\n  });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpju5o7ozc.php:18\n\
    Stack trace:\n#0 /tmp/tmpju5o7ozc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpju5o7ozc.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($s) use ($prefix) { return\
    \ strncmp($prefix, $s, strlen($prefix)) == 0; });\n}\n</code>\n<|/ a dscore=4\
    \ tags=php,arrays,string |>\n<| a dscore=3 |>\n<code>\n$result = array();\nforeach($arr\
    \ as $val){\n    $result[$val] = $val;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nI like it, just want to add that `$result[$val]` doesn't create\
    \ array, so `array_push($result, $val)` would be the best choice here.\n<|/ c\
    \ |>\n<| a dscore=3 |>\nAnother option:\n<code>\n$array = array('one','two','three','four');\n\
    $array = array_filter(array_flip($array), 'strlen');\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nI like this answer for its readability but I don't think it's very\
    \ clear what it does.  Perhaps a bit of clarification is in order.\n<|/ c |>\n\
    <| c |>\n, It uses array_flip() to re-index an array by strings. Each value gets\
    \ flipped into a string value, and then the array_filter() call will take a string\
    \ value, and compare it to a zero-length string.  If the string is zero-length,\
    \ the string is removed from the original array, and added to the output array.\n\
    <|/ c |>\n<| c |>\nThank you.  I was wondering if you could elaborate on why it\
    \ works that way.  I understand array_flip() but why does it work with \"strlen\"\
    \ as the callback?  It doesn't seem like a built in php function.\n<|/ c |>\n\
    <| a tags=php,arrays,string dscore=2 |>\n<code>\n$array = array_unique($array);\n\
    </code>\n<|/ a |>\n<| c |>\nThat removes duplicate entries. A better solution\
    \ would be to check if the entry is empty before adding it into the array.\n<|/\
    \ c |>\n<| a tags=php,arrays,string dscore=2 |>\n<code>\n$array = array('one','two','three','four');\n\
    foreach($array as $val)\n    $array[$val] = $val;\n</code>\n<|/ a |>\n<| c |>\n\
    This answer is identical to the accepted answer, except for that it's in a different\
    \ place.\n<|/ c |>\n<| a |>\n<code>\n$array = array('one','two','three','four');\n\
    foreach($array as $val) {\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp86csyy26.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $prefix_length = strlen($prefix);\n  return array_filter(\n  \
    \  array_map(\n      function ($string) use ($prefix_length) { return substr($string,\
    \ 0, $prefix_length) === $prefix; },\n      $strings),\n    function ($string)\
    \ { return strlen($string) > 0; });\n}\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxudh23zi.php:21\n\
    Stack trace:\n#0 /tmp/tmpxudh23zi.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpxudh23zi.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings)) {\n    return $strings;\n  }\n  $result =\
    \ [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix) ===\
    \ 0) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $result = [];\n  foreach ($strings as $string) {\n    if (strncmp($prefix,\
    \ $string, 0)) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays,search,string |>\n<| c |>\nHi Jon, Thanks for\
    \ your answer but your answer is also correct but I need to do it with in_array\
    \ and array_search functions.\n<|/ c |>\n<| c |>\n: I added the code for you.\
    \ Hope it helps.\n<|/ c |>\n<| a tags=php,arrays,search,string dscore=0 |>\nUsing\
    \ in_array():\n<code>\nif(in_array($search_string,$strings_array))\n{\n    echo\
    \ \"The string exists within the array\";\n}\nelse\n{\n    echo \"The string exists\
    \ within the array\";\n}\n</code>\n<|/ a |>\n<| c |>\nHi Jon, Thanks for your\
    \ answer but your answer is also correct but I need to do it with in_array and\
    \ array_search functions.\n<|/ c |>\n<| c |>\n: What exactly do you want to do?\
    \ Do you want to find whether a particular string exists in an array?\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\n$search_string = 'hello';\n$strings_array = array('hello');\n\
    \nif(in_array($search_string,$strings_array))\n{\n  echo \"The string exists within\
    \ the array\";\n}\nelse\n{\n  echo \"The string exists within the array\";\n}\n\
    </code>\n<|/ a dscore=0 tags=php,arrays,search,string |>\n<| c |>\nHi Jon, Thanks\
    \ for your answer but your answer is also correct but I need to do it with in_array\
    \ and array_search functions.\n<|/ c |>\n<| a tags=php,arrays,search,string dscore=0\
    \ |>\n<code>\n$search_string = 'hello';\n$strings_array = array('hello');\n\n\
    if(in_array($search_string,$strings_array))\n{\n  echo \"The string exists within\
    \ the array\";\n}\nelse\n{\n  echo \"The string exists within the array\";\n}\n\
    </code>\n<|/ a |>\n<| c |>\nHi Jon, Thanks for your answer but your answer is\
    \ also correct but I need to do it with in_array and array_search functions.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$search_string = 'hello';\n$strings_array\
    \ = array('hello');\nif(in_array(\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmply8e1mml.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\nNow that we\
    \ have that we need to filter all those strings that are not empty. We can do\
    \ that with a few more filters:\n<code>\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp3jqe1vcn.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $prefix_length = strlen($prefix);\n  foreach ($strings as $s)\
    \ {\n    if (strpos($s, $prefix) === 0) {\n      unset($strings[$s]);\n    }\n\
    \  }\n  return $strings;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=2\
    \ tags=arrays,php |>\nAnother simple solution would be to loop through the array\
    \ and remove all items that don't match your prefix. This would work fine for\
    \ small arrays. \nA very fast solution for large arrays would be to use array_filter()\
    \ with a callback.\n<code>\n$filtered = array_filter(\n    $array,\n    function($value)\
    \ use ($prefix) {\n        return strpos($value, $prefix) === 0;\n    }\n);\n\
    </code>\n<|/ a |>\n<| a tags=arrays,php |>\nHere's my approach using array_filter().\
    \ It returns an array of all entries from $array that begin with a certain prefix\
    \ and removes them from $array.\n<code>\n$array = array('apple', 'banana', 'orange',\
    \ 'apple', 'grape');\n$prefix = 'apple';\n\n$result = array_filter(\n    $array,\n\
    \    function ($entry) use ($prefix) {\n        return strpos($entry, $prefix)\
    \ === 0;\n    }\n);\n</code>\nThis approach is probably faster than using array_filter(),\
    \ since array_filter() needs to iterate over all items in the array and for each\
    \ item it needs to check the prefix.\n<|/ a dscore=2 |>\n<| c |>\nNote that you\
    \ shouldn't declare variables that don't use them (as `$i` in your case).\n<|/\
    \ c |>\n<| c |>\nThanks, will do.\n<|/ c |>\n<| c |>\nIt may be faster to just\
    \ loop the array and unset the items you're not interested in.\n<|/ c |>\n<| a\
    \ |>\n<code>\n<?php\n$prefix = 'apple';\n$array = array('apple', 'banana', 'orange',\
    \ 'apple', 'grape');\n$result = array_filter(\n  $array,\n  function ($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n  }\n);\n\nvar_dump($result);\n\
    </code>\n<|/ a dscore=2 tags=arrays,php |>\n<| a dscore=1 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw888i9sk.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $matches = array_filter(\n    $strings,\n    function ($string)\
    \ use ($prefix) { return strncmp($string, $prefix, strlen($prefix)) == 0; }\n\
    \  );\n  return $matches;\n}\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjg3i54xg.php:20\n\
    Stack trace:\n#0 /tmp/tmpjg3i54xg.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpjg3i54xg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (count($strings) === 0 || $prefix === '') return $strings;\n\
    \  if (!is_array($strings)) $strings = [$strings];\n\n  // Get the prefix from\
    \ the first string in the list.\n  $prefix = strtolower(substr($strings[0], strlen($prefix)));\n\
    \n  // Filter the strings to only those that begin with the prefix.\n  $filtered_strings\
    \ = array_filter(\n    $strings,\n    function ($string) use ($prefix) {\n   \
    \   return strtolower(substr($string, 0, strlen($prefix))) === $prefix;\n    }\n\
    \  );\n\n  return $filtered_strings;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer! The only problem is that I can't use it because I am not\
    \ allowed to use an external library.\n<|/ c |>\n<| c |>\nOh sorry I missed that\
    \ part of the question. I'll remove my comment\n<|/ c |>\n<| c |>\nYour code returns\
    \ `Warning: array_map(): Argument #2 should be an array`.\n<|/ c |>\n<| c |>\n\
    Ah, you're right. I had to switch from `$strings = array_map('strtolower', $strings);`\
    \ to `array_map('strtolower', $strings);`\n<|/ c |>\n<| c |>\nI switched that\
    \ to my code now too, because that was the cause of my error.\n<|/ c |>\n<| a\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp3wdfj5_g.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $prefix_length = strlen($prefix);\n  return array_filter(\n  \
    \  $strings,\n    function ($item) use ($prefix_length) { return strlen($item)\
    \ === $prefix_length; },\n  );\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\nAs an\
    \ alternative to the regex approach, one could use a simple \"find an item in\
    \ a list that has a given prefix or suffix\" function, based on two prefix/suffix\
    \ dictionaries:\n<code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpcis5sh65.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n  foreach ($strings as $s) {\n    if (strpos($s,\
    \ $prefix) === 0) {\n      $filtered[] = $s;\n    }\n  }\n  return $filtered;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($s) use ($prefix) { return\
    \ strpos($s, $prefix) === 0; });\n}\n\n/**\n * Returns a list of all keys used\
    \ in a list.\n */\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3z6jhzhm.php:20\n\
    Stack trace:\n#0 /tmp/tmp3z6jhzhm.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3z6jhzhm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ == 0 || substr($string, 0, strlen($prefix)) == $prefix) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n\n  return $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Good answer, but why `count(array_filter(...))` instead of just `count($filtered)`?\n\
    <|/ c |>\n<| c |>\nYou're right - `count(array_filter(...))` would be better,\
    \ thanks for pointing out the error. Answer updated.\n<|/ c |>\n<| a tags=arrays,php,search\
    \ dscore=0 |>\n<code>\n$arr = array('ab','ac','ad');\n$search = 'ab';\n\n$arr\
    \ = array_filter($arr,function($arr) use($search) {\n  return strpos($arr,$search)\
    \ !== false;\n});\n</code>\n<|/ a |>\n<| c |>\nWhat is this supposed to accomplish?\
    \ How does it work? Why do you think this would work better? What makes it better?\
    \ Please elaborate on the answer!\n<|/ c |>\n<| c |>\nThe function should return\
    \ true if the string exists in the array\n<|/ c |>\n<| a dscore=0 |>\nHere's a\
    \ version that uses array_filter to achieve the result you want, but instead of\
    \ looping through the entire array, only loops through the elements you want.\n\
    <code>\n$array = array(\n    'ad', 'ab', 'ac', 'bd', 'cd', 'cd', 'cd', 'abc',\
    \ 'array', 'array'\n);\n$prefix = 'cd';\n$filtered = array_filter($array, function($v)\
    \ use($prefix) {\n    return strpos($v, $prefix) !== false;\n});\n\nvar_dump($filtered);\n\
    </code>\nThis gives you the output:\n<code>\narray(3) {\n  [0]=>\n  string(3)\
    \ \"cd\"\n  [1]=>\n  string(3) \"cd\"\n  [2]=>\n  string(3) \"cd\"\n}\n</code>\n\
    <|/ a tags=arrays,php,search |>\n<| a |>\nYou can use the array_filter function\
    \ to filter the array. \nHere is an example:\n<code>\n<?php\n\n$array = array('ab','ac','ad');\n\
    $search = 'ab';\n$filteredArray = array_filter($array, function($elem) use($search)\
    \ {\n    return strpos($elem, $search) !== false;\n});\n\nprint_r($filteredArray);\n\
    \nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp50kxq4y1.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strncmp($prefix, $string, strlen($prefix)) == 0;\n  });\n}\n\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2nmtlao.php:19\n\
    Stack trace:\n#0 /tmp/tmpq2nmtlao.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpq2nmtlao.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($el) use ($prefix) {\n\
    \    return strpos($el, $prefix) === 0;\n  });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvx7jsjv8.php:18\n\
    Stack trace:\n#0 /tmp/tmpvx7jsjv8.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpvx7jsjv8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($str) use ($prefix) {\n\
    \    return strpos($str, $prefix) === 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltyexgiu.php:19\n\
    Stack trace:\n#0 /tmp/tmpltyexgiu.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpltyexgiu.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings) || !is_array($strings)) {\n    return $strings;\n\
    \  }\n\n  $filtered = [];\n  foreach ($strings as $str) {\n    if (!empty($prefix)\
    \ && !strncmp($prefix, $str, strlen($prefix))) {\n      $filtered[] = $str;\n\
    \    }\n  }\n\n  return $filtered;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $result = array();\n    foreach ($strings as $string) {\n  \
    \      if (substr($string, 0, strlen($prefix)) == $prefix) {\n            $result[]\
    \ = $string;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (!is_array($strings)) {\n        return $strings;\n    }\n\
    \    $prefix = strtolower($prefix);\n    return array_filter($strings, function\
    \ ($string) use ($prefix) {\n        return strpos($string, $prefix) === 0;\n\
    \    });\n}\n\n/**\n * Format a date range into human-readable chunks.\n *\n *\
    \ @param  array $dates\n * @param  string $separator\n * @return array\n */\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4klr9vt.php:30\n\
    Stack trace:\n#0 /tmp/tmpq4klr9vt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpq4klr9vt.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (!is_array($strings)) {\n        return false;\n    }\n \
    \   if (empty($prefix)) {\n        return $strings;\n    }\n\n    $filtered_strings\
    \ = array();\n    $prefix_length = strlen($prefix);\n\n    foreach ($strings as\
    \ $string) {\n        $length = strlen($string);\n        if ($length >= $prefix_length\
    \ && substr($string, 0, $prefix_length) === $prefix) {\n            $filtered_strings[]\
    \ = $string;\n        }\n    }\n\n    return $filtered_strings;\n}\n\n/**\n *\
    \ Get a random item from an array or return false if the array is empty.\n *\n\
    \ * Example:\n * $item = random_element($array);\n *\n * array_rand() returns\
    \ false when the array is empty or when there is no\n * more memory or on failure.\n\
    \ */\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $result = [];\n  foreach ($strings as $string) {\n    if (strncmp($string,\
    \ $prefix, strlen($prefix)) == 0) {\n      $result[] = $string;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  // Split the prefix into a list of individual characters.\n  //\
    \ If there is no prefix, then just return the full list of strings.\n  // >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde'], 'a')\n  // ['abc', 'bcd', 'cde']\n \
    \ $split = explode('', $prefix);\n  if ($split === ['']) {\n    return $strings;\n\
    \  }\n\n  // Filter the input list of strings for strings that start with the\
    \ prefix.\n  // >>> filter_by_prefix(['abc', 'bcd', 'cde'], 'a')\n  // ['abc',\
    \ 'bcd', 'cde']\n  return array_filter($strings, function($value) use ($split)\
    \ {\n    return strncmp($value, implode('', $split), strlen($split));\n  });\n\
    }\n```\n*/\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpoz14cb70.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$prefix) {\n    return $strings;\n  }\n  $filtered_strings\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($value) use ($prefix)\
    \ {\n    return strpos($value, $prefix) === 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqq5d75_.php:19\n\
    Stack trace:\n#0 /tmp/tmphqq5d75_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmphqq5d75_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered_strings = array();\n  foreach ($strings as $string)\
    \ {\n    if (substr($string, 0, strlen($prefix)) == $prefix) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter($strings, function ($string) use ($prefix)\
    \ {\n        return strncmp($string, $prefix, strlen($prefix)) == 0;\n    });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nWhy do you\
    \ need to call it on every iteration?\n<|/ c |>\n<| c |>\nYes I do, I just put\
    \ it there as an example. Though it's redundant to call it every time, it's more\
    \ efficient to do it once.\n<|/ c |>\n<| a dscore=1 |>\nI used an algorithm similar\
    \ to your own and extended it to allow a $key parameter to filter by both $key\
    \ and $value, so you should be able to filter by both name and age at the same\
    \ time:\n<code>\n$names = array();\n$ages = array();\n\nforeach ($users as $user)\
    \ {\n  $names[] = $user['name'];\n  $ages[] = $user['age'];\n}\n\n$filteredNames\
    \ = filter_by_key($names, 'name');\n$filteredAges = filter_by_key($ages, 'age');\n\
    \nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3o7r2dxl.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings)) return $strings;\n  $result = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $result[] = $string;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$strings) {\n    return [];\n  }\n  if (!$prefix) {\n   \
    \ return $strings;\n  }\n  return array_filter($strings, function($string) use\
    \ ($prefix) {\n    return mb_strpos($string, $prefix) === 0;\n  });\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strpos() in\
    \ /tmp/tmp2x2jyjh2.php:15\nStack trace:\n#0 [internal function]: {closure}('xxx')\n\
    #1 /tmp/tmp2x2jyjh2.php(16): array_filter(Array, Object(Closure))\n#2 /tmp/tmp2x2jyjh2.php(20):\
    \ filter_by_prefix(Array, 'xxx')\n#3 /tmp/tmp2x2jyjh2.php(25): candidate(Array,\
    \ 'xxx')\n#4 /tmp/tmp2x2jyjh2.php(28): test()\n#5 {main}\n  thrown in /tmp/tmp2x2jyjh2.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $out = [];\n    foreach ($strings as $s) {\n        if (strpos($s,\
    \ $prefix) === 0) {\n            $out[] = $s;\n        }\n    }\n    return $out;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nHi Jay , \nI added the code above to my code\n\
    but i still get the error \n`Fatal error: Call to a member function filter_by_prefix()\
    \ on null`\n<|/ c |>\n<| c |>\nOops, I misread your question and thought you were\
    \ using Laravel. I've updated my answer to work with PHP.\n<|/ c |>\n<| c |>\n\
    i just realised that i put a wrong variable name in  `$products` i thought i checked\
    \ for the right variable name but i forgot so i just changed the variable name\
    \ thanks :)\n<|/ c |>\n<| c |>\nThanks Jay ! \nYour answer was very helpful :)\n\
    <|/ c |>\n<| c |>\nThe function should probably be named `filter_by_prefix()`\
    \ though to match the expected behavior.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4d32duox.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n  foreach ($strings as $s) {\n    if (strncmp($prefix,\
    \ $s, 0)) {\n      $filtered[] = $s;\n    }\n  }\n  return $filtered;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce7pqo7h.php:23\n\
    Stack trace:\n#0 /tmp/tmpce7pqo7h.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpce7pqo7h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $prefix_len = strlen($prefix);\n    $filtered_strings = [];\n\
    \    foreach ($strings as $s) {\n        if (substr($s, 0, $prefix_len) === $prefix)\
    \ {\n            $filtered_strings[] = $s;\n        }\n    }\n    return $filtered_strings;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (!$strings) return [];\n    if (!$prefix) return $strings;\n\
    \    if (strlen($prefix) > strlen($strings[0])) return [];\n    $strings = array_filter($strings,\
    \ function ($s) use ($prefix) {\n        return substr($s, 0, strlen($prefix))\
    \ == $prefix;\n    });\n    return $strings;\n}\n</code>\nNow you can easily check\
    \ whether a prefix exists with:\n<code>\nif (!empty($search)) {\n    $strings\
    \ = filter_by_prefix($strings, 'abc');\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    You can use the array_filter() and strpos() function like this:\n<code>\n<?php\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplcxoz82i.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  // If the prefix is longer than the list, just return it.\n  if\
    \ (strlen($prefix) > count($strings)) {\n    return $strings;\n  }\n\n  // If\
    \ it's a single character, just return the list of matching strings.\n  if (!preg_match('/^./',\
    \ $prefix)) {\n    return array_intersect_key($strings, array_flip(str_replace($prefix,\
    \ '*', $prefix)));\n  }\n\n  // Split the prefix into a list of characters and\
    \ compare it to each element in the list.\n  // If the prefix exists, remove any\
    \ entries from the list that don't match the prefix.\n  $prefix_chars = preg_split('//',\
    \ $prefix);\n  $prefix_chars = array_flip($prefix_chars);\n  $prefix_chars['*']\
    \ = '';\n  return array_intersect_key($strings, array_flip($prefix_chars));\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nYou don't need `strlen` when comparing\
    \ against a string. `===` is sufficient.\n<|/ c |>\n<| a dscore=0 |>\nI didn't\
    \ test this code but you might want to try, if you can't do it by yourself :\n\
    <code>\n$a = array(\"a\",\"b\",\"c\",\"d\");\n$b = array(\"a\",\"b\",\"c\",\"\
    d\");\n$c = array_merge($a, $b); // will add all items together\n$c = array_merge($b,\
    \ $a); // will add all items together\n$c = array_diff($a, $b); // will delete\
    \ all items that appear in $b\n$c = array_diff($b, $a); // will delete all items\
    \ that appear in $a\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\nI had to do this\
    \ recently, here's the code I ended up with:\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphsrje2qb.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $filtered_strings = [];\n    foreach ($strings as $string) {\n\
    \        if (strpos($string, $prefix) === 0) {\n            $filtered_strings[]\
    \ = $string;\n        }\n    }\n    return $filtered_strings;\n}\n</code>\nI made\
    \ a test function for the filter_prefix function:\n<code>\n<?php\n\n$test_prefixes\
    \ = [\n    'ab',\n    'xyz'\n];\n\n$test_strings = [\n    'abc',\n    'abcd',\n\
    \    'abcdabcd',\n    'abcxyz',\n    'abcxyzabcd',\n    'abcd',\n    'abc'\n];\n\
    \n$test_strings_filtered = filter_prefix($test_strings, 'abcd');\n\nforeach($test_strings_filtered\
    \ as $string) {\n    echo '-' . $string . '<br>';\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbx5i_tbb.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($str) use ($prefix) {\n\
    \    return strncmp($prefix, $str, strlen($prefix));\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12krapur.php:19\n\
    Stack trace:\n#0 /tmp/tmp12krapur.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp12krapur.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($s) use ($prefix) {\n\
    \    return substr($s, 0, strlen($prefix)) == $prefix;\n  });\n}\n</code>\n<|/\
    \ a tags=php,arrays,algorithm |>\n<| a dscore=1 |>\nHere is my solution which\
    \ works well for me:\n<code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp0kxufmd5.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $filtered = array();\n    foreach ($strings as $string) {\n\
    \        if (strncmp($prefix, $string, strlen($prefix)) == 0) {\n            $filtered[]\
    \ = $string;\n        }\n    }\n    return $filtered;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter($strings, function($s) use ($prefix) {\n\
    \        return strpos($s, $prefix) === 0;\n    });\n}\n</code>\n<|/ a tags=php,arrays\
    \ dscore=2 |>\n<| c |>\nThank you so much! This was the solution that I needed.\
    \ It also helps me to understand what is happening. Thanks!\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$array['0'] = 'Hello';\n$array['1'] = 'world';\n$array['2'] = 'Hello';\n\
    $array['3'] = 'world';\n$array['4'] = 'Hello';\n$array['5'] = 'world';\n$array['6']\
    \ = 'Hello';\n$array['7'] = 'world';\n$array['8'] = 'Hello';\n$array['9'] = 'world';\n\
    $array['10'] = 'Hello';\n$array['11'] = 'world';\n$array['12'] = 'Hello';\n$array['13']\
    \ = 'world';\n$array['14'] = 'Hello';\n$array['15'] = 'world';\n$array['16'] =\
    \ 'Hello';\n$array['17'] = 'world';\n$array['18'] = 'Hello';\n$array['19'] = 'world';\n\
    \n$newarray = array();\n\nforeach ($array as $key => $val) {\n    if ($key ==\
    \ 9 || $key == 18 || $key == 19) {\n        $newarray[] = $val;\n    }\n}\n\n\
    print_r($newarray);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThe OP already\
    \ has an array containing all array keys, just need to remove those specific keys.\n\
    <|/ c |>\n<| c |>\nYes, but that doesn't make sense. Why don't you filter out\
    \ the keys directly?\n<|/ c |>\n<| c |>\n- How do we know that the keys are *not*\
    \ important? As the OP doesn't state that they are. How would you handle multiple\
    \ occurrences of the same value? Or what about a key like `\"HelloHelloHello\"\
    `?\n<|/ c |>\n<| a tags=php,arrays |>\nAssuming you have the keys as $keys you\
    \ can just use array_filter to keep all values which starts with the desired $key\n\
    <code>\n$keys = array(0, 9, 18, 19);\n$filtered = array_filter($array, function($v)\
    \ use ($keys) {\n    return in_array(substr($v, 0, strlen($keys[0])), $keys);\n\
    });\n</code>\nIf you want to remove all occurrences of the same value use array_unique\n\
    <code>\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpv7io6heu.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$strings) return [];\n  $result = [];\n  foreach ($strings\
    \ as $string) {\n    if (0 === strpos($string, $prefix)) {\n      $result[] =\
    \ $string;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$strings) {\n    return $strings;\n  }\n  if (!$prefix) {\n\
    \    return $strings;\n  }\n  if (!is_array($strings)) {\n    $strings = (array)$strings;\n\
    \  }\n  foreach ($strings as $key => $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      unset($strings[$key]);\n    }\n  }\n  return $strings;\n}\n\n\
    /**\n * Merge two lists of strings.\n * First argument is an array to be merged.\n\
    \ * Second argument is an array of strings to be merged.\n * Returns an array\
    \ merged with the first array items merged with the second array items,\n * without\
    \ duplicates.\n */\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3qdg5i0.php:38\n\
    Stack trace:\n#0 /tmp/tmpm3qdg5i0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpm3qdg5i0.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $results = [];\n  foreach ($strings as $string) {\n    if (strncmp($string,\
    \ $prefix, strlen($prefix)) == 0) {\n      $results[] = $string;\n    }\n  }\n\
    \  return $results;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  // We will add an empty string for invalid prefixes and then filter\n\
    \  // for only ones that start with our prefix.\n  array_unshift($strings, '');\n\
    \  return array_filter($strings, function($string) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,regex dscore=4 |>\n<| c |>\n\
    The only thing to add is that the third parameter to `preg_replace()` must be\
    \ passed as `\"/$prefix/\"`.\n<|/ c |>\n<| c |>\nYep, that would probably make\
    \ more sense. Thanks.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$string = \"abcdefg\"\
    ;\n$string1 = \"abcdefg\";\n\nif (strpos($string, 'g') !== false)\n{\n    echo\
    \ str_replace(\"g\", \"\", $string);\n}\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp2utf8208.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    $strings,\n    function ($s) use ($prefix)\
    \ { return strpos($s, $prefix) === 0; }\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9vzoq71.php:20\n\
    Stack trace:\n#0 /tmp/tmpj9vzoq71.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpj9vzoq71.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $filtered = [];\n    foreach ($strings as $string) {\n     \
    \   if (strpos($string, $prefix) === 0) {\n            $filtered[$string] = $string;\n\
    \        }\n    }\n    return $filtered;\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjy1rcbnx.php:23\n\
    Stack trace:\n#0 /tmp/tmpjy1rcbnx.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjy1rcbnx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n  foreach ($strings as $str) {\n    if (substr($str,\
    \ 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $str;\n    }\n  }\n \
    \ return $filtered;\n}\n\n$prefix = null;\nif ($argc > 2) {\n  $prefix = $argv[2];\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nThis answer assumes you are using php 7\nUse array_filter() along\
    \ with strpos() to filter out all the items that do not start with your prefix:\n\
    <code>\n$array = [\"abc\", \"cd\", \"a\"];\n$prefix = \"a\";\n$filtered = array_filter(\n\
    \    $array,\n    function($item) use ($prefix) {\n        return strpos($item,\
    \ $prefix) === 0;\n    }\n);\n</code>\nIf your prefix has spaces or other non-alphanumeric\
    \ characters, you may need to use preg_match() instead. Or you may need to use\
    \ mb_strpos().\n<|/ a dscore=0 tags=arrays,php |>\n<| c |>\nThis is nice, however\
    \ it is slightly different to the code in the question as it filters based on\
    \ the substring instead of the prefix. In the OP's code `abc` is returned but\
    \ `cde` is not.\n<|/ c |>\n<| c |>\nYes I see now. Thanks again.\n<|/ c |>\n<|\
    \ a tags=arrays,php |>\nOne liner\n<code>\n$result = array_filter($array, function\
    \ ($value) { return strpos($value, 'a') === 0; });\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=arrays,php |>\n<code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp7mp0yhg4.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter(\n        $strings,\n        function ($string)\
    \ use ($prefix) {\n            return strpos($string, $prefix) === 0;\n      \
    \  }\n    );\n}\n</code>\nTo get all strings in a given array:\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcj7kjz2t.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($item) use ($prefix) {\n\
    \    return 0 === strpos($item, $prefix);\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppom1tyuz.php:19\n\
    Stack trace:\n#0 /tmp/tmppom1tyuz.php(22): test()\n#1 {main}\n  thrown in /tmp/tmppom1tyuz.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1n4qs0b.php:19\n\
    Stack trace:\n#0 /tmp/tmpr1n4qs0b.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpr1n4qs0b.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  global $filters;\n\n  $prefix = (string) $prefix;\n  foreach ($strings\
    \ as &$string) {\n    if (strlen($string) < strlen($prefix)) {\n      continue;\n\
    \    }\n\n    // Compare prefixes first. If none match, move on to compare the\
    \ strings.\n    if (!strncmp($string, $prefix, strlen($prefix))) {\n      continue;\n\
    \    }\n\n    $string = substr($string, strlen($prefix));\n\n    // Apply any\
    \ filters that have been registered.\n    if ($filters) {\n      foreach ($filters\
    \ as $filter) {\n        // Call the filter function, and return if the result\
    \ doesn't match anything.\n        if (call_user_func($filter, $string) === false)\
    \ {\n          unset($string);\n          continue 2;\n        }\n      }\n  \
    \  }\n\n    return $strings;\n  }\n\n  return [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgj42_wb.php:46\n\
    Stack trace:\n#0 /tmp/tmpsgj42_wb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpsgj42_wb.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlcaiuqg.php:19\n\
    Stack trace:\n#0 /tmp/tmprlcaiuqg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprlcaiuqg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (empty($strings)) {\n        return array();\n    }\n   \
    \ foreach ($strings as $string) {\n        if (strpos($string, $prefix) === 0)\
    \ {\n            $result[] = $string;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$strings) {\n    return [];\n  }\n  $filtered_strings = [];\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n\n/**\n * Formats a string of text to make it bold italic or underlined.\n\
    \ *\n * If the text is plain text, it is returned as it is.\n * If the text is\
    \ wrapped in a pre tag, the text is wrapped in the tag.\n * If the text is wrapped\
    \ in a b tag, the text is wrapped in the tag.\n * If the text is wrapped in an\
    \ i tag, the text is wrapped in the tag.\n * If the text is wrapped in an u tag,\
    \ the text is wrapped in the tag.\n * If the text is wrapped in an em tag, the\
    \ text is wrapped in the tag.\n * If the text is wrapped in a strong tag, the\
    \ text is wrapped in the tag.\n *\n * @param string $text The text to format.\n\
    \ * @param string $tag The tag used to wrap the text.\n * @return string The formatted\
    \ text.\n */\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return mb_strpos($string, $prefix) === 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strpos() in\
    \ /tmp/tmp3vpfec8g.php:9\nStack trace:\n#0 [internal function]: {closure}('xxx')\n\
    #1 /tmp/tmp3vpfec8g.php(10): array_filter(Array, Object(Closure))\n#2 /tmp/tmp3vpfec8g.php(14):\
    \ filter_by_prefix(Array, 'xxx')\n#3 /tmp/tmp3vpfec8g.php(19): candidate(Array,\
    \ 'xxx')\n#4 /tmp/tmp3vpfec8g.php(22): test()\n#5 {main}\n  thrown in /tmp/tmp3vpfec8g.php\
    \ on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n  foreach ($strings as $string) {\n    if\
    \ (strncmp($prefix, $string, strlen($prefix)) == 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings) || empty($prefix)) {\n    return array();\n\
    \  }\n\n  return array_filter(\n    $strings,\n    function ($string) use ($prefix)\
    \ {\n      return strncmp($string, $prefix, strlen($prefix)) == 0;\n    }\n  );\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg183o9ap.php:26\n\
    Stack trace:\n#0 /tmp/tmpg183o9ap.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg183o9ap.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $result = array();\n  foreach ($strings as $string) {\n    if\
    \ (strncmp($prefix, $string, strlen($prefix)) === 0) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (!$strings || !$prefix) {\n        return $strings;\n   \
    \ }\n\n    if (!is_array($strings)) {\n        $strings = (array)$strings;\n \
    \   }\n    if (!is_array($prefix)) {\n        $prefix = (array)$prefix;\n    }\n\
    \n    $strings = array_values(array_filter(\n        $strings,\n        function\
    \ ($string) use ($prefix) {\n            return (substr($string, 0, strlen($prefix))===$prefix);\n\
    \        }\n    ));\n\n    return $strings;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpsxh_c718.php\
    \ on line 22\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpsxh_c718.php on line 22\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmpsxh_c718.php on line 22\n\nWarning: strlen()\
    \ expects parameter 1 to be string, array given in /tmp/tmpsxh_c718.php on line\
    \ 22\n\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpsxh_c718.php\
    \ on line 22\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpsxh_c718.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpsxh_c718.php:35\nStack trace:\n#0 /tmp/tmpsxh_c718.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsxh_c718.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter(\n        $strings,\n        function ($string)\
    \ use ($prefix) {\n            return strpos($string, $prefix) === 0;\n      \
    \  }\n    );\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsb6j5jng.php:22\n\
    Stack trace:\n#0 /tmp/tmpsb6j5jng.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsb6j5jng.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return substr($string, 0, strlen($prefix)) == $prefix;\n  });\n}\n</code>\n\
    Using this approach means you now only have to implement your logic once, and\
    \ you can reuse it as many times as you need to.\n<|/ a tags=arrays,php |>\n<|\
    \ a dscore=2 |>\nYou could also use array_reduce()\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeqschf0x.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings)) {\n    return [];\n  }\n\n  return array_filter($strings,\
    \ function($item) use ($prefix) {\n    return strncmp($item, $prefix, strlen($prefix))\
    \ == 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nGood answer. +1 from me\n\
    <|/ c |>\n<| c |>\nWhy not to use array_filter with a closure? This is what it's\
    \ made for.\n<|/ c |>\n<| c |>\nI don't think you got me there, but a closure\
    \ will work as well, yes. I just find this solution more readable, and it may\
    \ be slightly faster since it doesn't have the function call overhead on every\
    \ call (but probably negligible or non-existent enough to not matter).\n<|/ c\
    \ |>\n<| c |>\nThe function call overhead is usually not a problem unless you\
    \ are doing this several times in a loop. `array_filter()` uses `array_reduce()`\
    \ under the hood and that overhead can be significant.\n<|/ c |>\n<| c |>\nTrue.\
    \ But in this case the function call is inside the loop, so it might make a difference...\n\
    <|/ c |>\n<| a |>\nYou can use array_filter with a closure to achieve the same:\n\
    <code>\n$output = array_filter($array1, function($item) use($array2) {\n    return\
    \ in_array($item, $array2);\n});\n</code>\nThis will filter the elements of $array1\
    \ which have values from $array2. Since you used in_array, the values in the array\
    \ need be in order. If this is not desired, you can also use array_intersect to\
    \ get the matching elements:\n<code>\n$output = array_intersect($array1, $array2);\n\
    </code>\n<|/ a dscore=2 tags=php,arrays,sorting |>\n<| a dscore=2 |>\nYou can\
    \ just use the array_intersect() function :\n<code>\n$result = array_intersect($array1,\
    \ $array2);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis will not\
    \ work if both arrays have the same values because `array_intersect` will return\
    \ an empty array.\n<|/ c |>\n<| c |>\nYes, I thought about that too, that why\
    \ I wrote that \"you can also use array_intersect to get the matching elements\"\
    . I added it to the answer, thanks for mentioning it.\n<|/ c |>\n<| a dscore=1\
    \ tags=php,arrays,sorting |>\n<code>\n<?php\n$arr1 = array(\"A\", \"B\", \"C\"\
    , \"D\", \"E\");\n$arr2 = \nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpm1axbq76.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $result = [];\n  foreach ($strings as $string) {\n    if (substr($string,\
    \ 0, strlen($prefix)) == $prefix) {\n      $result[] = $string;\n    }\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nWhat about\
    \ performance? This seems more efficient to me, but since I do not know enough\
    \ about PHP to know.\n<|/ c |>\n<| c |>\nThis has quadratic complexity\n<|/ c\
    \ |>\n<| a tags=php,arrays dscore=2 |>\n<code>\n$result = array_filter($data,\
    \ function($a) {\n    if (preg_match('/(?<!^)(?!$)(.*?)(?=\\1|$)/', $a)) {\n \
    \       return false;\n    }\n\n    return true;\n});\n</code>\nExplanation\n\
    (?!^) negative lookbehind, if the previous character is not\n(?<!^) negative lookbehind,\
    \ if the previous character is not not\n(?!$) negative lookahead, if the next\
    \ character is not not\n(?<=\\1|$) positive lookbehind, if the next character\
    \ is not not\n(?<=\\1) positive lookbehind, if the previous character is not not\n\
    (.*?) any characters (including linebreaks)\n(?=\\1|$) positive lookahead, if\
    \ the previous character is not not\n(?!$) negative lookahead, if the next character\
    \ is not not\n(?<=\\1|$) positive lookbehind, if the next character is not not\n\
    (?<=\\1) positive lookbehind, if the previous character is not not\n(?<!^) negative\
    \ lookbehind, if the previous character is not not\n(?<!$) negative lookbehind,\
    \ if the previous character is not not\n<|/ a |>\n<| c |>\nThis also has the quadratic\
    \ complexity (it also filters the strings at the beginning of the string `^`).\n\
    <|/ c |>\n<| c |>\nIt does not. Try with `array_filter($data, function($a) { var_dump($a);\
    \ return false; });` it still passes.\n<|/ c |>\n<| c |>\nI just tried your code.\
    \ It prints `string(1) \"a\" string(1) \"b\" string(1) \"c\"`\n<|/ c |>\n<| c\
    \ |>\nMy bad you were right. It only filters if not at the beginning, but anywhere\
    \ in the string. Your regex works, thanks for showing me that! I updated the answer\n\
    <|/ c |>\n<| a dscore=2 tags=php,arrays |>\nI took the liberty of rewriting most\
    \ of the answer\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp31_iewdq.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return (strpos($string, $prefix) === 0);\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5e0cvy_.php:19\n\
    Stack trace:\n#0 /tmp/tmpv5e0cvy_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpv5e0cvy_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $ret = [];\n    foreach ($strings as $s) {\n        if (strpos($s,\
    \ $prefix) === 0) {\n            $ret[] = $s;\n        }\n    }\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    $strings,\n    function ($string) use\
    \ ($prefix) {\n      return strncmp($prefix, $string, strlen($prefix)) == 0;\n\
    \    }\n  );\n}\n</code>\nThe code above is based on a PHP implementation of the\
    \ Knuth\u2013Morris\u2013Pratt algorithm.\n<|/ a tags=php dscore=4 |>\n<| c |>\n\
    For completeness, if you're looking for a PHP version that uses \"str\" instead\
    \ of \"substr\", it would be (using your example) `return strncmp($prefix, $string,\
    \ strlen($prefix)) == 0;`\n<|/ c |>\n<| c |>\nThe KMP algorithm is O(n*m), while\
    \ the accepted answer above is O(n+m), which is why I've up-voted the accepted\
    \ answer rather than my own.\n<|/ c |>\n<| c |>\nAgreed! The accepted answer has\
    \ an O(n+m) complexity, and this algorithm has an O(n) complexity (as opposed\
    \ to O(n*m)). Your algorithm is more efficient if you only need to find prefixes,\
    \ but for a full solution I like this one more.\n<|/ c |>\n<| c |>\nThis one is\
    \ better, because it works for case insensitive search. The accepted answer does\
    \ not work for case insensitive search.\n<|/ c |>\n<| c |>\nVery nice.  As a bonus,\
    \ this also gives the index of the prefix that matches if it exists.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmppjr6ea5g.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8i5l1gg.php:19\n\
    Stack trace:\n#0 /tmp/tmph8i5l1gg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmph8i5l1gg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $strings = array_filter($strings, function($str) use ($prefix)\
    \ { return 0 === strpos($str, $prefix); });\n  if (empty($strings)) {\n    return\
    \ [];\n  }\n  $strings = array_slice($strings, 1);\n  return $strings;\n}\n\n\
    /**\n * Return the current user\n *\n * @return User The current user instance\n\
    \ */\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hnv792z.php:27\n\
    Stack trace:\n#0 /tmp/tmp8hnv792z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8hnv792z.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if ($prefix === '') {\n        return $strings;\n    }\n   \
    \ $result = [];\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $prefix) === 0) {\n            $result[] = $string;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($str) use ($prefix) {\n\
    \    return strpos($str, $prefix) === 0;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks Matt! It works.. and also I learned something new today.\n<|/ c |>\n<|\
    \ a |>\n<code>\n<?php\n\n$strings = [\n    'abc',\n    'cde',\n    'efg',\n  \
    \  'hij',\n    'klm',\n    'nop',\n];\n\n$filtered = array_filter($strings, function($str)\
    \ use ($prefix) {\n    return strpos($str, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php dscore=1 |>\n<| a tags=php |>\nTry this code\n<code>\n$strings =\
    \ [\n    'abc',\n    'cde',\n    'efg',\n    'hij',\n    'klm',\n    'nop',\n\
    ];\n\n$prefix = 'a';\n$filtered = array_filter($strings, function($str) use ($prefix)\
    \ {\n    return strpos($str, $prefix) === 0;\n});\n\nvar_dump($filtered);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php |>\nIf you want to filter out words that start\
    \ with a, then use the below code\n<code>\n$filtered = array_filter($strings,\
    \ function($str){\nreturn strpos($str, 'a') === 0; \n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php |>\nTry this code\n<code>\n<?php\n\n$strings = [\n    'abc',\n\
    \    'cde',\n    'efg',\n    'hij',\n    'klm',\n    'nop',\n];\n\n$filtered =\
    \ array_filter($strings, function($str) {\n    return substr($str, 0, 1) === 'a';\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php dscore=0\
    \ |>\nIf you want to make your life easier, you can use array_filter()\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpa81v72up.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n  foreach ($strings as $s) {\n    if (0 === strpos($s,\
    \ $prefix)) {\n      $filtered[] = $s;\n    }\n  }\n  return $filtered;\n}\n\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings)) {\n    return [];\n  }\n\n  $result = [];\n\
    \  foreach ($strings as $s) {\n    if (strncmp($s, $prefix, strlen($prefix)) ==\
    \ 0) {\n      $result[] = $s;\n    }\n  }\n\n  return $result;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=arrays,php |>\nI used a foreach loop to filter the array with\
    \ the array_filter function. \n<code>\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpa2ojsk8c.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $matches = array();\n    $prefix = strtolower($prefix);\n  \
    \  foreach ($strings as $string) {\n        if (strpos($string, $prefix) === 0)\
    \ {\n            $matches[] = $string;\n        }\n    }\n    return $matches;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$strings) return [];\n  if (!$prefix) return $strings;\n\n\
    \  $result = [];\n  foreach ($strings as $s) {\n    if (substr($s, 0, strlen($prefix))\
    \ == $prefix) $result[] = $s;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n  foreach ($strings as $str) {\n    if (strpos($str,\
    \ $prefix) === 0) {\n      $filtered[] = $str;\n    }\n  }\n  return $filtered;\n\
    }\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\"\
    , \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!is_array($strings)) {\n    throw new \\InvalidArgumentException(sprintf('Expected\
    \ array of strings: %s', 'array' !== gettype($strings).' '.var_export($strings,\
    \ 1)));\n  }\n  $result = [];\n  foreach ($strings as $s) {\n    if (0 === strpos($s,\
    \ $prefix)) {\n      $result[] = $s;\n    }\n  }\n  return $result;\n}\n \n \n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (empty($strings)) {\n        return [];\n    }\n\n    if\
    \ (!is_string($prefix)) {\n        throw new InvalidArgumentException(\"Prefix\
    \ must be a string\");\n    }\n\n    $prefix_length = mb_strlen($prefix);\n  \
    \  $result = [];\n\n    foreach ($strings as $string) {\n        $length = mb_strlen($string);\n\
    \        if ($length > $prefix_length) {\n            $result[] = $string;\n \
    \       }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmp8atqlyky.php:16\nStack trace:\n#0 /tmp/tmp8atqlyky.php(30): filter_by_prefix(Array,\
    \ 'xxx')\n#1 /tmp/tmp8atqlyky.php(35): candidate(Array, 'xxx')\n#2 /tmp/tmp8atqlyky.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8atqlyky.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n  foreach ($strings as $str) {\n    if (strncmp($prefix,\
    \ $str, strlen($prefix)) === 0) {\n      $filtered[$str] = $str;\n    }\n  }\n\
    \  return $filtered;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=2 |>\n\
    <code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp49ng2z3o.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (! is_array($strings)) $strings = [$strings];\n    $results\
    \ = [];\n    foreach ($strings as $string) {\n        if (strncmp($prefix, $string,\
    \ strlen($prefix)) == 0) {\n            $results[] = $string;\n        }\n   \
    \ }\n    return $results;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = ['abc', 'def', 'xyz'];\n$newArray = array_filter($array,\
    \ function($item) {\n    return !strncmp($item, 'a', 1);\n});\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nCan you explain how this works?\n<|/ c |>\n<| c |>\nYou\
    \ can learn more about closures here: https://stackoverflow.com/a/6969790/499827\n\
    <|/ c |>\n<| a |>\nIf you're doing this multiple times for different prefixes,\
    \ you could do something like this:\n<code>\n$array = array('ab', 'bc', 'cd');\n\
    \n$prefixes = ['ab', 'cd'];\n\n$result = array();\nforeach ($prefixes as $prefix)\
    \ {\n    $result = array_merge($result, array_filter($array, function ($i) use\
    \ ($prefix) {\n        return substr($i, 0, strlen($prefix)) != $prefix;\n   \
    \ }));\n}\n</code>\n<|/ a dscore=3 tags=php,arrays |>\n<| c |>\nThanks for your\
    \ answer. I've added a little more to my question, maybe it explains my problem\
    \ a bit more? Basically it needs to be applied recursively to each level of array\
    \ elements until there are no more prefixes left and it needs to only filter array\
    \ elements that start with a given prefix?\n<|/ c |>\n<| c |>\nI've added another\
    \ answer. I'm not sure if this is what you want.\n<|/ c |>\n<| c |>\nThanks a\
    \ lot, this is pretty much what I need! :D\n<|/ c |>\n<| c |>\nThis answer doesn't\
    \ do exactly what the OP wants. It's not recursive, it's not recursive, it's not\
    \ recursive, it's not recursive.\n<|/ c |>\n<| c |>\n, you're right. Although\
    \ I think the OP could easily add another `array_filter()` call for the second\
    \ prefix, but he asked for \"a general way to do this\".\n<|/ c |>\n<| a |>\n\
    <code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp3v9t9pu6.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\"\
    , \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if ($prefix === '') return $strings;\n  $length = strlen($prefix);\n\
    \  return array_filter($strings, function ($value) use ($length) {\n    return\
    \ substr($value, 0, $length) === $prefix;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 tags=php,regex,arrays,filtering |>\nA simple array filter() would\
    \ be enough:\n<code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpbkprk7gg.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    $strings,\n    function($value) use\
    \ ($prefix) {\n      return 0 === strpos($value, $prefix);\n    }\n  );\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nthis works when I want\
    \ to remove an item from the array, but I'm looking to remove an array if it contains\
    \ one or more items that start with a prefix. Does that make sense?\n<|/ c |>\n\
    <| c |>\n, I've added a couple of examples with `array_filter()`\n<|/ c |>\n<|\
    \ a dscore=0 |>\nYou could use array_walk_recursive() and array_filter() to filter\
    \ the array before you start traversing the array.\n<code>\n$data = array(\n \
    \   \"foo\" => \"bar\",\n    \"foo2\" => \"bar2\",\n    \"foo3\" => array(\n \
    \       \"foo4\" => \"bar4\",\n        \"foo5\" => \"bar5\"\n    ),\n    \"foo6\"\
    \ => array(\n        \"foo7\" => \"bar7\",\n        \"foo8\" => \"bar8\"\n   \
    \ ),\n    \"foo9\" => array(\n        \"foo10\" => \"bar10\",\n        \"foo11\"\
    \ => \"bar11\"\n    )\n);\n\n$search = \"foo\";\n$filter = function($item) use\
    \ ($search) {\n    return substr($item, 0, strlen($search)) === $search;\n};\n\
    array_walk_recursive($data, $filter);\n\nvar_dump($data);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a |>\n<code>\n<?php\n    $array = array(\n        'a' => array('aa' =>\
    \ 'aaa', 'bb' => 'bbb'),\n        'c' => array('cc' => 'ccc', 'bb' => 'bbb'),\n\
    \        'b' => array('cc' => 'ccc', 'bb' => 'bbb'),\n    );\n\n    $prefix =\
    \ 'cc';\n    $prefixLength = strlen($prefix);\n\n    foreach($array as $key =>\
    \ $val) {\n        if(substr($key, 0, $prefixLength) == $prefix) {\n         \
    \   unset($array[$key]);\n        }\n    }\n\n    print_r($array);\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz3a1p8jc.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $out = [];\n    foreach ($strings as $s) {\n        if (strpos($s,\
    \ $prefix) === 0) {\n            $out[] = $s;\n        }\n    }\n    return $out;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $filtered = [];\n    foreach ($strings as $string) {\n     \
    \   if (strpos($string, $prefix) === 0) {\n            $filtered[] = $string;\n\
    \        }\n    }\n    return $filtered;\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a dscore=0 tags=arrays,php |>\n<code>\nfunction candidate(...$args) {\n   \
    \ return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpnpqfdq3e.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($s) use ($prefix) {\n\
    \    return strpos($s, $prefix) === 0;\n  });\n}\n</code>\nOf course this doesn't\
    \ handle cases like \"a\" being at the beginning of a string.\n<|/ a tags=regex,arrays,php,string\
    \ |>\n<| a tags=regex,arrays,php,string |>\nThe simplest way would be to use array_filter():\n\
    <code>\n$yourArray = array_filter($yourArray, function($item) {\n    return preg_match('/^a/',\
    \ $item);\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=regex,arrays,php,string\
    \ dscore=2 |>\nThe fastest way is using preg_grep() with PREG_GREP_INVERT flag:\n\
    <code>\n$filtered = preg_grep('/^a/', $a);\n</code>\nThis would return all the\
    \ elements where the regex matches, without looping over all elements in the array.\n\
    <|/ a |>\n<| c |>\nThis was my initial thought, but `preg_grep()` returns an array\
    \ of the matching values. OP doesn't say what to do with them\n<|/ c |>\n<| c\
    \ |>\nYeah, it returns an array of matching values. But this array can be easily\
    \ filtered by `array_filter()` or any other built-in PHP function.\n<|/ c |>\n\
    <| a |>\nYou can use array_filter:\n<code>\n$array = array(\n    'abc',\n    'def',\n\
    \    'ghi',\n);\n\n$filtered = array_filter($array, function($value) {\n    return\
    \ preg_match('/a/', $value);\n});\n</code>\n<|/ a dscore=1 tags=regex,arrays,php,string\
    \ |>\n<| c |>\nOP doesn't say what to do with the filtered values\n<|/ c |>\n\
    <| c |>\n: What do you mean by \"OP doesn't say\"? It's not specified in the question\n\
    <|/ c |>\n<| c |>\nThe array filter does that, just use the result of the filter\
    \ as an array and do whatever you want with it.\n<|/ c |>\n<| a |>\nThere are\
    \ many answers that already proposed array_filter or preg_grep, so I wanted to\
    \ add another way that uses vanilla PHP's array_reduce():\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa5s6sbfp.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($s) {\n    return (substr($s,\
    \ 0, strlen($prefix)) == $prefix);\n  });\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6h4xgnp0.php:19\n\
    Stack trace:\n#0 /tmp/tmp6h4xgnp0.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp6h4xgnp0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings) || empty($prefix)) {\n    return $strings;\n\
    \  }\n\n  // Sort so we can use binary search to find prefixes faster.\n  sort($strings);\n\
    \n  return array_filter($strings, function($item) use ($prefix) {\n    return\
    \ strncmp($item, $prefix, strlen($prefix)) == 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1q844l4.php:26\n\
    Stack trace:\n#0 /tmp/tmpx1q844l4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpx1q844l4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,string,php\
    \ |>\n<| c |>\nThe second example doesn't work when the string has multiple repeated\
    \ words. ex. ['hello', 'hello', 'world']\n<|/ c |>\n<| c |>\nYes, but that was\
    \ the intent of the question and the accepted answer does. If you need something\
    \ different, please update the question.\n<|/ c |>\n<| c |>\nThanks for the heads-up.\
    \  I edited my answer to take into account these cases too.\n<|/ c |>\n<| c |>\n\
    Thanks so much for this. Exactly what I was looking for and much more efficient!\
    \ I'm just wondering why I get the following error when running your second example:\
    \ \"Warning: preg_match() expects parameter 2 to be string, array given\". And\
    \ this does not happen when I try it myself in the sandbox. Not sure what I am\
    \ doing wrong.\n<|/ c |>\n<| a |>\nAnother solution to this:\n<code>\n<?php\n\n\
    $str1 = \"test1test2test3\";\n$str2 = \"test1test2test3test4\";\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxwq1lxb_.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  // Filter out strings that do not start with the given prefix.\n\
    \  return array_filter(\n    $strings,\n    function($string) {\n      return\
    \ strpos($string, $prefix) === 0;\n    }\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdkjsjox.php:23\n\
    Stack trace:\n#0 /tmp/tmpkdkjsjox.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkdkjsjox.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strncmp($string, $prefix, strlen($prefix)) == 0;\n  });\n}\n\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmwu8qz7.php:19\n\
    Stack trace:\n#0 /tmp/tmpnmwu8qz7.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpnmwu8qz7.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    array_map(\n      function ($value)\
    \ {\n        return strpos($value, $prefix) === 0;\n      },\n      $strings),\n\
    \      function ($value) {\n        return $value;\n      });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzj292qsq.php:24\n\
    Stack trace:\n#0 /tmp/tmpzj292qsq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzj292qsq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwwwa_pj.php:18\n\
    Stack trace:\n#0 /tmp/tmptwwwa_pj.php(21): test()\n#1 {main}\n  thrown in /tmp/tmptwwwa_pj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $result = array();\n  foreach ($strings as $s) {\n    if (strncmp($s,\
    \ $prefix, strlen($prefix)) == 0) {\n      $result[] = $s;\n    }\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = [];\n  foreach ($strings as $s) {\n    if (substr($s,\
    \ 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $s;\n    }\n  }\n  return\
    \ $filtered;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nA good example,\
    \ but this does not allow you to filter by multiple prefixes - only one.\n<|/\
    \ c |>\n<| a tags=php,arrays dscore=4 |>\n<code>\n$strings = array(\"apple\",\
    \ \"orange\", \"banana\", \"grape\", \"mango\");\n</code>\nThe most obvious and\
    \ efficient solution:\n<code>\n$filtered = array_filter($strings, create_function('$string',\
    \ 'return strpos($string, \"orange\") === 0;'));\n</code>\nOf course you may also\
    \ use array_filter() with a callback, as in the other answers. Or array_reduce()\
    \ with callback. But don't do both! Just use array_filter() and create such a\
    \ callback as above. It is more readable and efficient.\n<|/ a |>\n<| c |>\nIf\
    \ you're writing a function, you should use `create_function()`. The above is\
    \ just a bit too much indirection.\n<|/ c |>\n<| c |>\nWell, that's an indirection\
    \ :) But it is more efficient, since it only creates the anonymous function in\
    \ the first place.\n<|/ c |>\n<| c |>\nWhat does this do? What does it return?\
    \ And why not use `array_filter()` with a callback? This is more readable and\
    \ efficient.\n<|/ c |>\n<| c |>\nIt's not an indirection or a performance hit.\
    \ Using anonymous functions is exactly what `array_filter()` does. Using a callback\
    \ instead is just more obscure.\n<|/ c |>\n<| c |>\n: That's true, but your code\
    \ is less readable and more error-prone. I'd rather avoid using callback whenever\
    \ possible.\n<|/ c |>\n<| a tags=php,arrays |>\nI use the following function (I\
    \ believe it's more efficient as long as there are no duplicate strings in $strings).\n\
    <code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp0a6h0z8z.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $matches = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $matches[] = $string;\n    }\n  }\n\
    \  return $matches;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n  foreach ($strings as $string) {\n    if\
    \ (substr($string, 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for this\
    \ function! But is there any way to do it using the PHP `array_filter` function?\n\
    <|/ c |>\n<| c |>\nSure - I added a version for that as well\n<|/ c |>\n<| c |>\n\
    Thanks. Could you please explain what it does and why it is better than what I\
    \ had?\n<|/ c |>\n<| c |>\nI added an explanation. Hope that helps!\n<|/ c |>\n\
    <| c |>\nThanks again for your help! One small question: why do we `return` on\
    \ line 3? Isn't that redundant?\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$strings\
    \ = array('one', 'two', 'three');\n$array = array('one_one', 'one_two', 'one_three',\
    \ 'two_one', 'two_two', 'two_three');\n\n$filtered = array_filter($strings, function($s)\
    \ {\n    $matches = array();\n    foreach ($array as $a) {\n        if (strpos($s,\
    \ $a) === 0) {\n            $matches[] = $a;\n        }\n    }\n    return $matches;\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease add a\
    \ brief description of your code to the answer (code-only answers usually aren't\
    \ as useful as code-containing answers).\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    $filtered = array_filter($strings, function($var) {\n    $matches = array();\n\
    \    foreach ($array as $a) {\n        if (substr($var, 0, strlen($a)) == $a)\
    \ {\n            $matches[] = $a;\n        }\n    }\n    return $matches;\n});\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks, this also works! Could you\
    \ please explain what it does and why it is better than what I had?\n<|/ c |>\n\
    <| c |>\nThe accepted answer does the same thing but it loops through the array\
    \ twice. Yours is more efficient because it doesn't loop through the array twice.\
    \ Another thing is that I used a lambda function instead of a normal function.\n\
    <|/ c |>\n<| c |>\nThanks, I'm going to accept this answer because it is more\
    \ efficient and it \nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp0gdop9tb.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($s) use ($prefix) {\n \
    \   return substr($s, 0, strlen($prefix)) === $prefix;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1c_hizz.php:19\n\
    Stack trace:\n#0 /tmp/tmpb1c_hizz.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb1c_hizz.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($str) use ($prefix) {\n\
    \    return substr($str, 0, strlen($prefix)) == $prefix;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThanks for this code snippet, which might provide\
    \ some limited short-term help.  A proper explanation [would greatly improve](//meta.stackexchange.com/q/114762)\
    \ its long-term value by showing *why* this is a good solution to the problem,\
    \ and would make it more useful to future readers with other, similar questions.\
    \  Please [edit] your answer to add some explanation, including the assumptions\
    \ you've made.\n<|/ c |>\n<| c |>\nI'm afraid I don't understand this code. Can\
    \ you please explain this code? Thank you.\n<|/ c |>\n<| c |>\nThis is a basic\
    \ form of filtering.  In your case, you're looking to filter out any item which\
    \ doesn't start with a given string.  All this does is take a string and a string\
    \ and filter the array.  It works because of the use of substring which looks\
    \ for the first occurrence of a string within a string.  So, in this case, the\
    \ array would be filtered for any string that starts with $prefix.\n<|/ c |>\n\
    <| c |>\nOkay so if I use filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\
    \ the result would be ['abc', 'array']\n<|/ c |>\n<| c |>\nThanks. Your code clears\
    \ things up for me. Very much appreciate it.\n<|/ c |>\n<| a dscore=3 tags=arrays,php\
    \ |>\n<code>\narray_filter($array, function($value, $key) {\n    return substr($value,\
    \ 0, strlen('value'));\n});\n</code>\n<|/ a |>\n<| c |>\nWhat does the $key stand\
    \ for in this case?\n<|/ c |>\n<| c |>\nIt is the array index for that value.\n\
    <|/ c |>\n<| a dscore=3 tags=arrays,php |>\nThe most readable solution in my opinion\
    \ is:\n<code>\n$array = [\n    'id'          => 1,\n    'name'        => 'value',\n\
    \    'description' => 'description',\n    'size'        => 100,\n    'price' \
    \      => 100,\n];\n\n$filtered = array_filter(\n    $array,\n    function ($value)\
    \ use ($prefix, $filter) {\n        $prefix = ltrim($prefix, '');\n        return\
    \ (!empty($prefix) && strpos($value, $prefix) === 0);\n    }\n);\n\n$filtered\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpknl27q7y.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    $strings,\n    function ($string) use\
    \ ($prefix) {\n      return strncmp($string, $prefix, strlen($prefix)) == 0;\n\
    \    }\n  );\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5md7sxj.php:22\n\
    Stack trace:\n#0 /tmp/tmpk5md7sxj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpk5md7sxj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($val) use ($prefix) {\n\
    \    return strncmp($val, $prefix, strlen($prefix)) == 0;\n  });\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d1125kl.php:19\n\
    Stack trace:\n#0 /tmp/tmp_d1125kl.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp_d1125kl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered_strings = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered_strings[] = $string;\n\
    \    }\n  }\n  return $filtered_strings;\n}\nfunction candidate(...$args) {\n\
    \    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $filtered_strings = array();\n    foreach ($strings as $string)\
    \ {\n        if (0 === strpos($string, $prefix)) {\n            $filtered_strings[]\
    \ = $string;\n        }\n    }\n    return $filtered_strings;\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $strings = array_map(function ($string) {\n    return preg_quote($prefix,\
    \ '/');\n  }, $strings);\n  return array_filter(\n    $strings,\n    function\
    \ ($string) use ($prefix) {\n      return !preg_match('/' . $prefix . '^/m', $string);\n\
    \    }\n  );\n}\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7w8x57c.php:24\n\
    Stack trace:\n#0 /tmp/tmpb7w8x57c.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpb7w8x57c.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($item) {\n    return strncmp($item,\
    \ $prefix, strlen($prefix)) === 0;\n  });\n}\n</code>\n<|/ a dscore=3 tags=php,arrays,sorting\
    \ |>\n<| c |>\nThe PHP manual page doesn't include a complete explanation of what's\
    \ going on, but this answer gives the best explanation I've seen so far.\n<|/\
    \ c |>\n<| c |>\nThat is a good answer, but your function isn't correct.  It should\
    \ be `strncmp($item, $prefix, strlen($prefix))` (you are missing the `strlen()`\
    \ part).\n<|/ c |>\n<| c |>\nThanks for the tip, I fixed the code example and\
    \ included a link to the PHP Manual page that explains this behaviour.\n<|/ c\
    \ |>\n<| c |>\nThis is great for sorting alphabetically. Do you know if there\
    \ are any options to sort numerically?\n<|/ c |>\n<| a |>\nThis isn't a direct\
    \ answer to your question, but I thought I'd post this in case someone else needs\
    \ something similar.\nI wanted a way to order my array by key, and found a good\
    \ way to do it. It's not perfect but works well for me.\n<code>\n$array_to_sort\
    \ = array(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\");\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6sw85uav.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n\n  foreach ($strings as $s) {\n    if (strpos($s,\
    \ $prefix) === 0) {\n      $filtered[] = $s;\n    }\n  }\n\n  return $filtered;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThe `foreach` should go inside `filter_by_prefix`\
    \ function, not outside. Otherwise, it returns `$filtered` array with the original\
    \ keys.\n<|/ c |>\n<| c |>\nI see what you mean. I've changed it now.\n<|/ c |>\n\
    <| c |>\nI think my last edit should address this.\n<|/ c |>\n<| c |>\nYes, it\
    \ does. Your answer does as well but the `foreach` should be inside the function\
    \ and the return statement should go before `return` in the `if` conditional.\n\
    <|/ c |>\n<| a dscore=2 |>\nIf you really want to avoid iterating over the array\
    \ multiple times, you may as well use array_filter()\n<code>\n$filtered = array_filter($input,\
    \ function ($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n});\n\
    </code>\n<|/ a tags=filter,arrays,php,filter |>\n<| c |>\nIt's more complicated\
    \ than that.\n<|/ c |>\n<| c |>\nYes, but it's less efficient. I think it's a\
    \ better solution and easier to read than an ugly `foreach` loop.\n<|/ c |>\n\
    <| c |>\n, i guess i misread the question then, it's actually about `array_filter`\
    \ and not `array_map`\n<|/ c |>\n<| c |>\n, I've added a note to that effect,\
    \ thanks.\n<|/ c |>\n<| c |>\n, i agree that it is a better solution, but i think\
    \ you should point out that `array_filter()` is less efficient than a foreach\
    \ loop in the context of the question.\n<|/ c |>\n<| a |>\nMy answer to this question\
    \ has been edited since the original was posted, and I have added a comparison\
    \ of array_filter and a foreach loop:\n<code>\n$input = array('abc', 'abd','abe','abf','cde');\n\
    $prefix = array('a', 'ab', 'abd','cde');\n\nfunction candidate(...$args) {\n \
    \   return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp3s5uftlo.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter(\n    $strings,\n    function ($value) use\
    \ ($prefix) {\n      return (mb_substr($value, 0, mb_strlen($prefix))) === $prefix;\n\
    \    }\n  );\n}\n</code>\n<|/ a tags=arrays,php,filtering |>\n<| c |>\nThank you\
    \ for answering, but I need the function to return the array containing the elements\
    \ that match, so array_filter or array_intersect won't work for this purpose.\
    \ Maybe I didn't understand your answer well enough, but I appreciate your effort,\
    \ thanks again.\n<|/ c |>\n<| c |>\n: I added a working implementation that returns\
    \ a filtered array.\n<|/ c |>\n<| a tags=arrays,php,filtering |>\nIf you have\
    \ PHP 5.4+, you should use array_filter and array_intersect to create your array:\n\
    <code>\n$filtered = array_filter(\n    $yourArray,\n    function ($element) {\n\
    \        return mb_strpos($element, 'string') !== false;\n    }\n);\n\n$intersect\
    \ = array_intersect(\n    $filtered,\n    array_filter($yourArray, function ($element)\
    \ {\n        return mb_strpos($element, 'string') === false;\n    })\n);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,php,filtering |>\nA simple way to do this\
    \ would be to loop through each element of your array and check if it matches\
    \ the condition you are looking for.  If the condition is met, add it to a new\
    \ array.  Otherwise, don't add it.\n<code>\n$newArray = array();\n\nforeach ($yourArray\
    \ as $val)\n{\n    if (mb_strpos($val, 'string') === false)\n    {\n        $newArray[]\
    \ = $val;\n    }\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpq3o3c56_.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $result = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $result[] = $string;\n    }\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpys26om2d.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n  foreach ($strings as $str) {\n    if (substr($str,\
    \ 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $str;\n    }\n  }\n \
    \ return $filtered;\n}\n\n/**\n * Returns a unique list of all keys of a given\
    \ associative array.\n *\n * @param $associative\n *   The associative array to\
    \ extract keys from.\n *\n * @return\n *   An array containing all keys in $associative.\n\
    \ */\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strncmp($string, $prefix, strlen($prefix)) == 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,filtering,search dscore=5 |>\n<| c |>\nThe PHP code for\
    \ this function can be found here: http://stackoverflow.com/questions/2925396/php-function-to-filter-a-list-of-strings-for-only-those-that-start-with-a-given-p\n\
    <|/ c |>\n<| a tags=php,arrays,filtering,search dscore=4 |>\nYou can use this\
    \ function:\n<code>\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpfx_653_5.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings)) {\n    return $strings;\n  }\n  return array_filter(\n\
    \    $strings,\n    function($value) {\n      return strpos($value, $prefix) ===\
    \ 0;\n    }\n  );\n}\n</code>\nThis uses array_filter to filter only those strings\
    \ that contain the prefix with strpos (string position). You can then use a closure\
    \ as the callback function and pass it the prefix as it's first parameter.\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\nPHP has many ways to do this and many more\
    \ built-in ways, for example\n<code>\n$string = array('abc', 'bcd', 'cde', 'array');\n\
    </code>\nA simple foreach loop will give you an array\n<code>\n$newArray = array();\n\
    foreach($string as $key => $value) {\n    if($value[0] === 'a') {\n        $newArray[]\
    \ = $value;\n    }\n}\n</code>\nYou can get more fancy with regex or with explode\n\
    <code>\n$newArray = array();\nforeach($string as $key => $value) {\n    $explode\
    \ = explode(\" \", $value);\n    if($explode[0] === 'a') {\n        $newArray[]\
    \ = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| a |>\nYou\
    \ can also try this one:\n<code>\n<?php\n$string = 'a,b,c,d,e,f,g,h,i,j,k';\n\
    $string = explode(\" \",$string);\n$output = array();\nforeach($string as $key=>$value){\n\
    \  if($value == 'a'){\n     $output[] = $value;\n  }\n}\n\nprint_r($output);\n\
    </code>\n<|/ a tags=php,arrays,string dscore=0 |>\n<| a |>\n<code>\n$string =\
    \ 'a,b,c,d,e,f,g,h,i,j,k';\n$string_explode = explode(',', $string);\n$result=\
    \ array();\nforeach ($string_explode as $value){\n    if(strpos($value, 'a') !==\
    \ false)\n        $result[] = $value;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'a,b,c,d,e,f,g,h,i,j,k';\n\
    $result = array();\n\nforeach(explode(',',$string) as $k=>$v){\n    if(strpos($v,'a')!==false)\n\
    \        $result[] = $v;\n}\n</code>\n<|/\nfunction candidate(...$args) {\n  \
    \  return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpf9f97cgj.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!isset($strings[0])) {\n    return $strings;\n  }\n  $results\
    \ = array();\n  foreach ($strings as $string) {\n    if (strncmp($prefix, $string,\
    \ strlen($prefix))) {\n      continue;\n    }\n    $results[] = $string;\n  }\n\
    \  return $results;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (!is_array($strings)) return $strings;\n    $results = [];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($prefix))\
    \ continue;\n        $results[] = $string;\n    }\n    return $results;\n}\n\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_zj5iw1.php:23\n\
    Stack trace:\n#0 /tmp/tmpq_zj5iw1.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpq_zj5iw1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    if (is_array($strings) && sizeof($strings)) {\n        $return\
    \ = array();\n        foreach ($strings as $str) {\n            if (substr($str,\
    \ 0, strlen($prefix)) == $prefix) {\n                $return[] = $str;\n     \
    \       }\n        }\n        return $return;\n    }\n    return array();\n}\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (is_array($strings)) {\n    // If the list of strings is an\
    \ array, use the 'array_filter' function.\n    return array_filter($strings, function($string)\
    \ use ($prefix) {\n      return substr($string, 0, strlen($prefix)) === $prefix;\n\
    \    });\n  } else {\n    // Otherwise, assume the input is a string.\n    //\
    \ If the string starts with the prefix, return an empty array.\n    return array_filter($strings,\
    \ function($string) use ($prefix) {\n      return substr($string, 0, strlen($prefix))\
    \ === $prefix;\n    });\n  }\n}\n</code>\n<|/ a tags=arrays,php dscore=1 |>\n\
    <| c |>\nThis answer doesn't seem to address OP's problem of how they could filter\
    \ an array of objects by property values. How would you approach that?\n<|/ c\
    \ |>\n<| c |>\nI updated my answer to address your question. Also added a solution\
    \ using a custom `array_filter()` function.\n<|/ c |>\n<| c |>\nI like this approach\
    \ the most since it's easier to understand and follow. I wonder if this could\
    \ also be modified to accept multiple prefixes and/or multiple properties for\
    \ which values should be filtered as well. As I understand this requires one function\
    \ per property and prefix. I wonder if that could be made more dynamic to accommodate\
    \ those parameters.\n<|/ c |>\n<| a tags=arrays,php |>\nYou can use array_filter():\n\
    <code>\n<?php\n\n$array1 = ['item1', 'item2', 'item3', 'item4'];\n$array2 = ['item5',\
    \ 'item6'];\n\n$result = array_filter(\n    $array1,\n    function ($var) {\n\
    \        return strpos($var, 'item') === 0;\n    }\n);\n\nvar_dump($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/14073309)\n<|/ c |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| c |>\nI edited my answer - but I think it deserves to be the accepted\
    \ one as it's more straightforward and less verbose.\n<|/ c |>\n<| a |>\nYou can\
    \ use array_filter():\n<code>\n$array_of_objects = [\n  new Object(\"apple\"),\n\
    \  new Object(\"orange\"),\n  new Object(\"banana\"),\n  new Object(\"orange\"\
    )\n];\n\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpktrvn4ud.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter($strings, function($value) use ($prefix)\
    \ {\n        return strncmp($prefix, $value, strlen($prefix)) === 0;\n    });\n\
    }\n</code>\nThis also has the benefit of not requiring any additional memory or\
    \ function calls.\n<|/ a tags=php,arrays |>\n<| c |>\nWow! This is pretty awesome,\
    \ didn't think about it at all this way. Thanks!\n<|/ c |>\n<| c |>\nI do have\
    \ a question though, how do you handle an undefined offset error if for example\
    \ you are trying to get the key of an array that doesn't exist? For instance if\
    \ I wanted to use something like this: `$keys[$key];` I got an undefined offset\
    \ error. Is there an elegant way around this? Thanks!\n<|/ c |>\n<| c |>\nThe\
    \ short answer is no. Because of how `array_filter` works, it requires an array\
    \ to have a key at that offset to work, and will also discard that key when returning\
    \ from the callback. Hence, you cannot use something like `$keys[$key]` to retrieve\
    \ the actual key. You'll need to use `array_search` instead, which will search\
    \ through an array of all possible keys, return the first that matches, and then\
    \ return that key.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array('a', 'b',\
    \ 'c');\n\n$array = array_filter($array, function ($value) {\n    return substr($value,\
    \ 0, 1) === 'a';\n});\n\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=1 tags=php,arrays |>\nIn case you want to keep the original array\
    \ and just add some new elements to it you can do this:\n<code>\n$array = array('a',\
    \ 'b', 'c');\n$new_array = array('d', 'e', 'f');\n$array = array_merge($new_array,\
    \ $array);\nprint_r($array);\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => a\n\
    \    [1] => b\n    [2] => c\n    [3] => d\n    [4] => e\n    [5] => f\n)\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays |>\n<code>\n$array = array('a', 'b', 'c');\n\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3qf6s36t.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter($strings, function ($string) use ($prefix)\
    \ {\n        return strncmp($string, $prefix, strlen($prefix)) == 0;\n    });\n\
    }\n</code>\n<|/ a tags=string,php,function |>\n<| c |>\nThat's not a good implementation.\
    \ If you have \"array\" as a prefix it will also return \"array\" as a result.\n\
    <|/ c |>\n<| c |>\nthank you, i will modify my code\n<|/ c |>\n<| a |>\n<code>\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo_1_oswe.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!is_string($strings)) {\n    throw new InvalidArgumentException('$strings\
    \ must be an array');\n  }\n  if (!is_string($prefix)) {\n    throw new InvalidArgumentException('$prefix\
    \ must be a string');\n  }\n\n  return array_filter($strings, function ($str)\
    \ use ($prefix) {\n    return strpos($str, $prefix) === 0;\n  });\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: $strings must be an array\
    \ in /tmp/tmphi18cwri.php:9\nStack trace:\n#0 /tmp/tmphi18cwri.php(21): filter_by_prefix(Array,\
    \ 'john')\n#1 /tmp/tmphi18cwri.php(25): candidate(Array, 'john')\n#2 /tmp/tmphi18cwri.php(29):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphi18cwri.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $filtered = array();\n  foreach ($strings as $s) {\n    if (strpos($s,\
    \ $prefix) === 0) {\n      $filtered[] = $s;\n    }\n  }\n  return $filtered;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9vt14j9.php:18\n\
    Stack trace:\n#0 /tmp/tmpu9vt14j9.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpu9vt14j9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  global $prefixes;\n  foreach ($strings as $s) {\n    if (strncmp($s,\
    \ $prefix, strlen($prefix)) == 0) {\n      $new_strings[] = $s;\n    }\n  }\n\
    \  return $new_strings;\n}\n\n/**\n * Convert HTML-encoded characters to their\
    \ numeric equivalents.\n *\n * This function is not called directly, unless it\
    \ has been registered with\n * {@link filter_mangle_tags()}.\n *\n * @param string\
    \ $string HTML-encoded string to filter\n * @return string The filtered string.\n\
    \ */\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b_zvn99.php:31\n\
    Stack trace:\n#0 /tmp/tmp_b_zvn99.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_b_zvn99.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $result = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $result[] = $string;\n    }\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a tags=arrays,php dscore=3 |>\n<| c |>\nthanks\
    \ for your answer. but i don't know what to do in the function.\n<|/ c |>\n<|\
    \ c |>\nI've added a couple examples for you to the answer. Let me know if you\
    \ have any questions.\n<|/ c |>\n<| c |>\ni can't understand this code. because\
    \ i am a newbie. i don't know how to call this function.\n<|/ c |>\n<| c |>\n\
    What don't you understand? If you have two variables and you want to filter `$array`\
    \ based on whether they start with `$prefix`, then use the function I wrote in\
    \ the example and then call it like `filter_by_prefix($array, $prefix)`. I would\
    \ suggest reading the [PHP documentation on functions](http://php.net/manual/en/functions.php).\
    \ It's pretty easy to understand.\n<|/ c |>\n<| c |>\ni want to filter an array\
    \ using this function `array_filter`\n<|/ c |>\n<| a |>\nYou probably need to\
    \ use array_filter() method of php\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb1na3wui.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($s) use ($prefix) {\n \
    \   return (substr($s, 0, strlen($prefix)) == $prefix);\n  });\n}\n</code>\n<|/\
    \ a tags=arrays,php dscore=1 |>\n<| a |>\nYou can do it with foreach\n<code>\n\
    $arr1 = array(\"a\",\"b\",\"c\",\"d\");\n$arr2 = array(\"e\",\"f\",\"g\",\"h\"\
    );\n$arr3 = array(\"i\",\"j\",\"k\",\"l\");\n$arr4 = array(\"m\",\"n\",\"o\",\"\
    p\");\n$arr5 = array(\"q\",\"r\",\"s\",\"t\");\n$arr6 = array(\"u\",\"v\",\"w\"\
    ,\"x\");\n$arr7 = array(\"y\",\"z\");\n\n$arr[] = array('arr1' => $arr1, 'arr2'\
    \ => $arr2, 'arr3' => $arr3, 'arr4' => $arr4, 'arr5' => $arr5, 'arr6' => $arr6,\
    \ 'arr7' => $arr7);\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp1o9q5wdi.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    foreach ($strings as &$s) {\n        $s = preg_replace('/^'\
    \ . preg_quote($prefix, '/') . '/', '', $s);\n    }\n    return $strings;\n}\n\
    \nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv518ydw7.php:20\n\
    Stack trace:\n#0 /tmp/tmpv518ydw7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpv518ydw7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (empty($strings)) {\n    return [];\n  }\n\n  if (!is_string($prefix))\
    \ {\n    trigger_error('Invalid prefix type: ' . gettype($prefix), E_USER_WARNING);\n\
    \    return [];\n  }\n\n  $prefix_len = strlen($prefix);\n  $prefix_keys = array_keys($strings);\n\
    \  $prefix_values = array_map(function($x) { return $x->{$prefix_len}; }, $strings);\n\
    \  $prefix_indices = array_flip($prefix_keys);\n\n  return array_filter($strings,\
    \ function($el) use ($prefix, $prefix_values, $prefix_len, $prefix_indices) {\n\
    \    return strpos($el, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=0 tags=php,string,filtering\
    \ |>\n<| c |>\nThanks for the great answer! I'm gonna have to learn some things\
    \ about array_map and array_filter in order to understand this code! Thanks!\n\
    <|/ c |>\n<| a dscore=0 tags=php,string,filtering |>\nI think this might be a\
    \ little simpler:\n<code>\n<?php\n$names = ['jimmy', 'tom', 'harry', 'david',\
    \ 'jane'];\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpssglr6p7.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  $result = [];\n\n  // We sort the strings so that we don't have\
    \ to\n  // make an additional array copy.\n  sort($strings);\n\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $result[] =\
    \ $string;\n    }\n  }\n\n  return $result;\n}\n</code>\n<|/ a dscore=2 tags=wordpress,php,advanced-custom-fields\
    \ |>\n<| c |>\nThis is a great answer and worked perfectly. Thanks.\n<|/ c |>\n\
    <| a dscore=1 |>\nThis should do what you need (as per your title): \n<code>\n\
    <?php\n$strings = array('a', 'abc', 'abcde', 'abde', 'abcde');\n\n$prefix = 'a';\n\
    $prefixFound = false;\n\nforeach($strings as $string) {\n    if($string == $prefix)\
    \ {\n        $prefixFound = true;\n        break;\n    }\n}\n\nif($prefixFound)\
    \ {\n    echo \"Yes, there is a $prefix at position $i\";\n}\nelse {\n    echo\
    \ \"No $prefix found\";\n}\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp1rpmyj1y.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  // If the prefix is empty, we should return the original input\
    \ list.\n  if (strlen($prefix) == 0) return $strings;\n\n  $filtered = array();\n\
    \  $prefixLength = strlen($prefix);\n  // We only need to loop through the list\
    \ once.\n  foreach ($strings as $string) {\n    if (strlen($string) < $prefixLength)\
    \ continue;\n\n    $filtered[] = $string;\n  }\n\n  return $filtered;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
    , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvu3s09db.php:29\n\
    Stack trace:\n#0 /tmp/tmpvu3s09db.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvu3s09db.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function($value) use ($prefix) {\
    \ return strpos($value, $prefix) === 0; });\n}\n```\n\nThis works because `$prefix`\
    \ is only checked for values that begin with the\nsame number of characters as\
    \ `$prefix`.\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp_eyxwlyy.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  return array_filter($strings, function ($string) use ($prefix)\
    \ {\n    return mb_strpos($string, $prefix) === 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strpos() in\
    \ /tmp/tmp96hb4xc8.php:9\nStack trace:\n#0 [internal function]: {closure}('xxx')\n\
    #1 /tmp/tmp96hb4xc8.php(10): array_filter(Array, Object(Closure))\n#2 /tmp/tmp96hb4xc8.php(14):\
    \ filter_by_prefix(Array, 'xxx')\n#3 /tmp/tmp96hb4xc8.php(19): candidate(Array,\
    \ 'xxx')\n#4 /tmp/tmp96hb4xc8.php(22): test()\n#5 {main}\n  thrown in /tmp/tmp96hb4xc8.php\
    \ on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    $result = [];\n    foreach ($strings as $s) {\n        if (strpos($s,\
    \ $prefix) === 0) {\n            $result[] = $s;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return filter_by_prefix(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n    return array_filter($strings, function($string) use ($prefix)\
    \ {\n        return strpos($string, $prefix) === 0;\n    });\n}\n</code>\nUsage:\n\
    <code>\n$array = filter_by_prefix(\n    $input,\n    'myprefix_'\n);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,arrays,foreach |>\n<code>\nforeach ($array as\
    \ $key => $value) {\n   if (strpos($value, 'myprefix_') == 0) {\n      unset($array[$key]);\n\
    \   }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI prefer this solution because\
    \ it doesn't mutate the original array and avoids having to use an explicit foreach\
    \ loop within the `unset()` call. Also it makes it easier to change the search\
    \ pattern without having to change other code.\n<|/ c |>\n<| a dscore=1 |>\nYou\
    \ can use array_filter() with a closure:\n<code>\n$input  = [\n    'myprefix_aaa',\n\
    \    'myprefix_bbb',\n    'myprefix_ccc',\n    'aaa',\n    'bbb',\n    'ccc',\n\
    ];\n\n$output = array_filter($input, function($v){\n    return strpos($v, 'myprefix_')\
    \ === 0;\n});\n\nprint_r($output);\n</code>\nOutput:\n<code>\nArray\n(\n    [0]\
    \ => myprefix_aaa\n    [2] => myprefix_ccc\n)\n</code>\n<|/ a tags=php,arrays,foreach\
    \ |>\n<| c |>\nThis is the best answer because it doesn't mutate the original\
    \ array and avoids having to use an explicit foreach loop within the `array_filter()`\
    \ call. Also it makes it easier to change the search pattern without having to\
    \ change other code.\n<|/ c |>\n<| c |>\nIf `myprefix_` can be in other places\
    \ use `return strpos($v, 'myprefix_') === 0;`\n<|/ c |>\n<| a dscore=1 |>\nYou\
    \ can use array_filter to filter the array\n<code>\n<?php\n$input  = [\n    'myprefix_aaa',\n\
    \    'myprefix_bbb',\n    'myprefix_ccc',\n    'aaa',\n    'bbb',\n    'ccc',\n\
    ];\n\n$output = array_filter($input, function ($v) {\n    return !(strpos($v,\
    \ 'myprefix_') === 0);\n});\n</code>\n<|/ a tags=php,arrays,foreach |>\n<| a tags=php,arrays,foreach\
    \ |>\nTry this\n<code>\n$output = array_filter(array_flip($input), function($\n\
    function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"\
    xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqe2hsj4r.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Filter an input list of strings only for ones that start with\
    \ a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
    \ $prefix) {\n  if (!$strings) return $strings;\n\n  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return 0 === strpos(strtolower($string),\
    \ strtolower($prefix));\n  });\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis is\
    \ not the best solution, cause you do not take accentuated chars into account.\
    \ Do it like this: `if(preg_match('/\\pL/u', $string)) { return true; } else {\
    \ return false; }`\n<|/ c |>\n<| a |>\nYou can use the built in PHP function:\n\
    strpos()\nIt will find the position of the first occurrence of a substring in\
    \ a string.\nFor example:\n<code>\n$string = \"Hello World\";\n$position = 0;\n\
    $subString = \"World\";\nif(strpos($string, $subString, $position) == $position){\n\
    \    echo \"The string '$subString' was found in the string '$string'\";\n}\n\
    </code>\nIf $position is omitted, strpos() will begin searching the string from\
    \ its first character.\n<|/ a dscore=1 tags=php,string |>\n<| c |>\nThanks, strpos\
    \ is working but I don't want to use it. I'm looking for more efficient way to\
    \ do it.\n<|/ c |>\n<| c |>\nWell, if you don't want to use anything like strpos,\
    \ you could write your own function to replace it.\n<|/ c |>\n<| c |>\nstrpos\
    \ is not that inefficient - it would be if you were using a language with a built\
    \ in function that you could call without having to actually write one.\n<|/ c\
    \ |>\n<| c |>\nI agree, I just don't want use anything that is not native to the\
    \ language (like using regex or string functions). Sorry for not mentioning that\
    \ before.\n<|/ c |>\n<| c |>\n, you are mistaken. Using `strpos()` is NOT the\
    \ most efficient way to do this. See my answer.\n<|/ c |>\n<| a dscore=1 |>\n\
    This one is a little more efficient than using strpos and it supports both case-insensitive\
    \ and case-sensitive search:\n<code>\nfunction candidate(...$args) {\n    return\
    \ filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(),\
    \ \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"\
    xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp02kb_z7f.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
