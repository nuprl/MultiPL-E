name: HumanEval_80_is_happy
language: php
prompt: "<?php\n// You are given a string s.\n// Your task is to check if the string\
  \ is happy or not.\n// A string is happy if its length is at least 3 and every 3\
  \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n//\
  \ is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
  // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy($s) {\n"
tests: "function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  return is_string($s) && strlen($s) >= 3 && count_chars($s, 3) ==\
    \ 3;\n}\n", "    $str = str_split($s);\n    foreach ($str as $key => $val) {\n\
    \        if ($val != $str[$key + 1] && $val != $str[$key + 2] && $val != $str[$key\
    \ + 3] && $val != $str[$key + 4])\n            return false;\n    }\n    return\
    \ true;\n}\n", "    $count = 0;\n    $chars = str_split($s);\n    foreach ($chars\
    \ as $char) {\n        $count++;\n        if ($count == 3 && !in_array($char,\
    \ $chars)) \n            return false;\n    }\n    return true;\n}\n", "    if\
    \ (strlen($s) < 3) return false;\n    $hash = [];\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $hash[$s[$i]] = $i;\n    }\n    for ($i = 3; $i < strlen($s);\
    \ $i++) {\n        $has = false;\n        for ($j = 0; $j < strlen($s); $j++)\
    \ {\n            if ($i == $hash[$s[$j]]) {\n                $has = true;\n  \
    \              break;\n            }\n        }\n        if ($has === true) return\
    \ true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks,\
    \ I did it like this  ```function is_happy($s) {\n   $check = false;\n   $hash\
    \ = [];\n   for ($i = 0; $i < strlen($s); $i++) {\n    $hash[$s[$i]] = $i;\n \
    \  }\n   for ($i = 3; $i < strlen($s); $i++) {\n    $has = false;\n    for ($j\
    \ = 0; $j < strlen($s); $j++) {\n     if ($i == $hash[$s[$j]]) {\n      $has =\
    \ true;\n      break;\n     }\n    }\n    if ($has === true) {\n     $check =\
    \ true;\n     break;\n    }\n   }\n   \n   return $check;\n  }```\n<|/ c |>\n\
    <| a dscore=0 |>\nYou can get that by doing something like this\n<code>\n<?php",
  "    if (strlen($s) < 3 || count(array_diff(str_split($s), array_unique($s))) <\
    \ 3) return false;\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks man. you helped me a lot. but i just have one doubt on this\n<|/ c |>\n\
    <| c |>\ncan u explain me what does this mean `count(array_diff(str_split($s),\
    \ array_unique($s))) < 3` why are you using this\n<|/ c |>\n<| c |>\nIt counts\
    \ how many unique letters in $s there are apart from the first one. Let's say\
    \ $s=\"aaaa\" and we split it into ['a', 'a', 'a'], the unique array is ['a',\
    \ 'a'] and the difference between them, in essence `['a','a']-['a','a']` equals\
    \ `['a']-['a']`, we only have 1 unique letter, thus we return false.\n<|/ c |>\n\
    <| c |>\nI have edited my question can u just tell me why we are using this\n\
    <|/ c |>\n<| c |>\n`array_unique` returns an array with unique items, it means\
    \ it removes duplicates. `array_diff` compares two arrays and returns the difference\
    \ as array, it compares `a` and `b` with `b` and `a`, and returns the difference\
    \ as `b`, which has one element only. So if for example `a` is different from\
    \ `b` we return `false` which is what we want, and if `b` is different from `a`\
    \ we return `b`\n<|/ c |>\n<| a dscore=0 |>\nTry this solution\n<code>\n$string\
    \ = \"aabc\";\n$array = str_split($string);\n$array = array_count_values($array);\n\
    $array = array_filter($array, function ($count) {\n    return $count > 1;\n});\n\
    return in_array('b', $array) ? true : false;\n</code>\n<|/ a tags=php |>\n<| a\
    \ |>\n<code>\n<?php\n$string = \"aabc\";\n$array = str_split($string);\n$array\
    \ = array_count_values($array);\n$array = array_filter($array, function ($count)\
    \ {\n    return $count > 1;\n});\nreturn in_array('b', $array) ? true : false;\n\
    </code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nYou should add some explanation\
    \ on how your code is working.\n<|/ c |>\n<| a dscore=0 |>\nI used this code for\
    \ my own project:\n<code>\n$arrayString = \"a", "    if (strlen($s) < 3) return\
    \ False;\n    \n    foreach(str_split($s) as $letter){\n        if (strlen($letter)\
    \ != 3 || array_unique($letter))\n            return False;\n    }\n    \n   \
    \ return True;\n}\n", "    if (is_null($s)) {\n        return false;\n    }\n\
    \    $l = strlen($s);\n    if ($l < 3) {\n        return true;\n    }\n    $i\
    \ = 0;\n    $j = strlen($s) - 1;\n    while ($i < $j) {\n        $a = $s[$i];\n\
    \        $b = $s[$j];\n        if ($a != $b) {\n            return false;\n  \
    \      }\n        $i++;\n        $j--;\n    }\n    return true;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nIf its length is less than 3 then it is not a happy string.\
    \ \nWhat if the string was `\"ahhh\"`? It should still be a happy string.\n<|/\
    \ c |>\n<| c |>\nNope. It is not correct. `is_happy(\"aa\")` returns true. `is_happy(\"\
    aaa\")` returns false. `is_happy(\"aaab\")` returns false. `is_happy(\"aaabb\"\
    )` returns true. `is_happy(\"aaabbb\")` returns true.\n<|/ c |>\n<| c |>\nI understood\
    \ it, I understood it wrong. Sorry.\n<|/ c |>\n<| c |>\nI think your code is wrong.\
    \ `\"aaabb\"` returns false but should return true. It should be `\"aaab\"` returns\
    \ true. Try your code  on `\"ahhh\"` and you should be able to understand.\n<|/\
    \ c |>\n<| a dscore=2 |>\nTry this\n<code>", "    $len = strlen($s);\n    if ($len\
    \ < 3) return false;\n    for ($i = 1; $i < $len; $i++) {\n        if ($s[$i -\
    \ 1] == $s[$i]) return false;\n    }\n    return true;\n}", "  if ( strlen($s)\
    \ >= 3 ) {\n    for ($i = 0; $i < strlen($s); $i+=3 ) {\n      if ( !isset($a[$s[$i].$s[$i+1].$s[$i+2]])\
    \ ) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return\
    \ false;\n}\n", "    if (strlen($s) < 3) return false;\n    foreach(str_split($s)\
    \ as $char) {\n        if (in_array($char, $s)) return false;\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a tags=algorithm,string,python |>\n<| a dscore=2 |>\n\
    Here's a Python implementation that uses no built-in functions at all:\n<code>\n\
    def is_happy(s):\n    if len(s) < 3:\n        return False\n    s = set(s)\n \
    \   for i in range(1, len(s)-2):\n        if s[i] != s[i-1]:\n            return\
    \ False\n        if s[i] != s[i+1]:\n            return False\n    return True\n\
    </code>\n<|/ a tags=algorithm,string,python |>\n<| a |>\nIn python you can do\
    \ this:\n<code>\nstring = 'abbcc'\nif string[0] == 'a' and string[1] != 'b' and\
    \ string[2] != 'b':\n    #...\n</code>\n<|/ a tags=algorithm,string,python dscore=2\
    \ |>\n<| a tags=algorithm,string,python dscore=2 |>\nHere is a Java implementation:\n\
    <code>\nimport java.util.Arrays;\n\npublic class Happy {\n    public static boolean\
    \ isHappy(String s) {\n        char[] chars = s.toCharArray();\n        if (chars.length\
    \ < 3) {\n            return false;\n        }\n        char[] sortedChars = Arrays.copyOf(chars,\
    \ chars.length);\n        Arrays.sort(sortedChars);\n        return Arrays.equals(chars,\
    \ sortedChars);\n    }\n\n    public static void main(String[] args) {\n     \
    \   System.out.println(isHappy(\"abbcc\"));\n        System.out.println(isHappy(\"\
    aaabbb\"));\n        System.out.println(isHappy(\"aaabb\"));\n    }\n}\n</code>\n\
    Output:\n<code>\nfalse\nfalse\ntrue\n</code>\n<|/ a |>\n<| a tags=algorithm,string,python\
    \ |>\nI used python's regular expression :\n<code>\nre.search(r'^a{3}b{3}c$',\"\
    aaabbc\") # Returns None\nre.search(r'^a{3}b{3}c$',\"aaabbb\") # Returns 'aaabbc'\n\
    re.search(r'^a{3}b{3}c$',\"aaab\") # Returns None\nre.search(r'^a{3}b{3}c$',\"\
    abbc\") # Returns None\nre.search(r'^a{3}b{3}c$',\"abbbc\") # Returns None\nre.search(r'^a{3}b{3}c$',\"\
    abbbcc\") # Returns None\nre.search(r'^a{3}b{3}c$',\"abbbcbb\") # Returns None\n\
    re.search(r'^a{3}b{3}", "  // write code here\n  return (strlen($s) < 3) || (strlen($s)\
    \ < 3 && $s != str_repeat($s[0], $s-1));\n}\n\n/* ", "    if (strlen($s) < 3)\
    \ \n        return false;\n    $flag = array($s);\n    $count = 0;\n    $len =\
    \ strlen($flag[0]);\n    for($i = 0; $i < $len; $i++){\n        if(isset($flag[$i+1])\
    \ && $flag[$i+1] != $flag[$i]){\n            $flag[$count] = $flag[$i];\n    \
    \        $count++;\n        }\n    }\n    if($count == 3 && count(array_unique($flag))\
    \ == 3) \n        return true;\n    return false;\n}\n\nis_happy('a');\nis_happy('aa');\n\
    is_happy('abcd');\nis_happy('aabb');\nis_happy('adb');\nis_happy('xyy');", " \
    \   return (strlen($s) >= 3) && (preg_match('/^(.)\\1*$/', $s) !== 1);\n}\n</code>\n\
    <|/ a dscore=1 tags=php,loops |>\n<| a tags=php,loops dscore=0 |>\n<code>", " \
    \ $string = str_split($s);\n  foreach ($string as $key => $value) {\n    $string[$key]\
    \ = strtolower($string[$key]);\n  }\n  $stringCount = array_count_values($string);\n\
    \  foreach ($stringCount as $key1 => $value1) {\n    $stringCount[$key1]++;\n\
    \  }\n  foreach ($stringCount as $key1 => $value1) {\n    if ($value1 < 3) {\n\
    \      $isHappy = false;\n      break;\n    }\n  }\n  if ($isHappy) {\n    echo\
    \ \"The string is happy\";\n  } else {\n    echo \"The string is not happy\";\n\
    \  }\n}\n", "    // TODO: Write your code here\n    $sum = 0;\n    $flag = false;\n\
    \    for($i=0;$i<strlen($s);$i++){\n        $sum = $sum + $s[$i];\n        \n\
    \        if(($i%3)==0){\n            $sum = $sum + $s[$i+1];\n            $sum\
    \ = $sum + $s[$i+2];\n            if(($sum - $s[$i])!=3 && ($sum - $s[$i+1])!=3\
    \ && ($sum - $s[$i+2])!=3){\n                $flag = true;\n            }\n  \
    \      }\n    }\n    return $flag;\n}\n$tests = array(\n    '',\n    'a',\n  \
    \  'aa',\n    'ab',\n    'abc',\n    'abcd',\n    'abcde',\n    'abcdef',\n  \
    \  'abcdefg',\n    'a1b2c3d4e5f6g7h8i9j0k1l2m3n4',\n    'a1b2c3e4g5h6i7k7l8m9o0p1q2e3n4q3r5r6',\n\
    \    'abcde'\n);\nfor ($i = 0; $i < count($tests); $i++) {\n    $result = is_happy($tests[$i]);\n\
    \    echo $tests[$i] . ' => ' . ($result ? 'True' : 'False') . \"\\r\\n\";\n}\n",
  "  foreach($s as $val) {\n    foreach($s as $val) {\n      if ($val == $val)\n \
    \       return false;\n    }\n  }\n  return true;\n}\n", "    return ((strlen($s)\
    \ >= 3) && (!is_distinct($s)));\n}\n", "  // Write your code here\n  return true;\n\
    }\n</code>\n<|/ q dscore=0 |>\n<| c |>\nSo you have an idea of how to do this?\
    \ What exactly are you stuck with?\n<|/ c |>\n<| c |>\nWhat have you tried so\
    \ far?\n<|/ c |>\n<| c |>\nHow about `is_happy(abba)`? What happens there?\n<|/\
    \ c |>\n<| c |>\nHappy new year!\n<|/ c |>\n<| c |>\nPlease show us what you have\
    \ tried so far. Stack Overflow is not a code writing service. We are here to help\
    \ you with your code, not write it for you.\n<|/ c |>\n<| a dscore=1 |>\nHere's\
    \ an answer that uses recursion.\n<code>", "    if (strlen($s) < 3) return false;\n\
    \    $res = true;\n    $array = str_split($s);\n    foreach ($array as $char)\
    \ {\n        if ($char !== $char) $res = false;\n    }\n    return $res;\n}\n",
  "    $length = strlen($s);\n    if($length < 3) return false;\n    $s = array_count_values(str_split($s));\n\
    \    $values = array_keys($s);\n    $count = 0;\n    foreach($values as $value)\
    \ {\n        if($value >= 3) $count++;\n    }\n    return $count >= 3;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,string,boolean |>\nAnother way is to use array_count_values()\
    \ to calculate the number of occurrences of each letter:\n<code>", "    // Write\
    \ your code here\n    return (strlen($s) > 3 && array_count_values(str_split($s))[3]\
    \ == 3);\n}\n</code>\nDemo\n<|/ a dscore=1 |>\n<| c |>\nThanks , what about this\
    \ ? https://3v4l.org/BpHMr\n<|/ c |>\n<| c |>\nYes, it works too, but `array_count_values`\
    \ should be faster. See the edited answer. :)\n<|/ c |>\n<| a dscore=0 |>\nHere's\
    \ another way to check it using regex and array_count_values()\n<code>\n<?php",
  "    // check length\n    if (strlen($s) < 3) {\n        return false;\n    }\n\n\
    \    // check every 3 letters is distinct\n    for ($i = 0; $i < 3; $i++) {\n\
    \        $is_distinct = true;\n        foreach (str_split($s) as $letter) {\n\
    \            if ($letter !== $s[$i + 1]) {\n                $is_distinct = false;\n\
    \                break;\n            }\n        }\n        if ($is_distinct) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "  // Your\
    \ code here\n  return ($s === null || $s === '') ? false : ((strlen($s) >= 3)\
    \ ? true : is_happy((substr($s, 0, 3))) === is_happy((substr($s, 0, 3))) ?\n \
    \ is_happy((substr($s, 0, 3))) : 'No happy string');\n}\nvar_dump(is_happy(\"\
    Hello\"));", "    // Your code here\n    // your code here\n    $count_char=0;\n\
    \    $count_char=count($s);\n    if($count_char<3){\n        echo \"False\";\n\
    \    }\n    else{\n        for($i=0;$i<$count_char-2;$i++){\n            $char=$s[$i];\n\
    \            $char2=$s[$i+1];\n            for($j=$i+2;$j<$count_char;$j++){\n\
    \                $char3=$s[$j];\n                if($char != $char2 && $char3\
    \ != $char2){\n                    echo \"False\";\n                }\n      \
    \      }\n        }\n    }\n    echo \"True\";\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThank you for your answer\n<|/ c |>\n<| c |>\nYou might want to use `===`\
    \ instead of `==`\n<|/ c |>\n<| c |>\nThanks a lot.. this really helps me a lot..\
    \ but i wanted to know can i use 2 conditions in one if..\n<|/ c |>\n<| c |>\n\
    Yes, you can. But you shouldn't. Code is easier to read if it has less complexity.\
    \ So, I would not recommend it.\n<|/ c |>\n<| c |>\nThank you so much for all\
    \ your help.. i really appreciate it.. thanks again :)\n<|/ c |>\n<| a tags=php\
    \ |>\nMy answer is without using any for or while loop\n<code>", "    $str = str_split($s);\n\
    \    for($i=0; $i<=count($str)-2; $i++) {\n        if(count(array_diff($str,$str[$i]))\
    \ !== 0) {\n            return false;\n        }\n    }\n    if(count(array_diff($str,$str[count($str)-1]))\
    \ !== 0) {\n        return false;\n    }\n    return true;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nI have added the code to the question. Can you please check it?\
    \ The error which I'm getting is \"Parse error: syntax error, unexpected '[' in\
    \ /web/htdocs/wp-content/themes/twentythirteen/functions.php on line 91\". Line\
    \ 91 is the line number you gave.\n<|/ c |>\n<| c |>\nMy bad, please remove that\
    \ bracket from line 91 I left it there for you to add it after line 91 I updated\
    \ the answer\n<|/ c |>\n<| a dscore=1 |>\nHere is another solution:\n<code>",
  "  $len = strlen($s);\n  return $len >= 3 && check_same_elements($s);\n}\n", " \
    \   if (strlen($s) < 3) return false;\n    foreach (str_split($s) as $letter)\
    \ {\n        if (in_array($letter, $s)) {\n            $s[] = $letter;\n     \
    \       return is_happy($s);\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nIt is a correct answer but doesn't do what OP asked\
    \ for. In fact it only solves the half of the problem, it won't work with the\
    \ input `aaa` returning `true` but should return `false`\n<|/ c |>\n<| c |>\n\
    - I updated my answer to account for that.\n<|/ c |>\n<| c |>\nStill doesn't do\
    \ what OP asked for, just like other answers here.\n<|/ c |>\n<| c |>\n- I updated\
    \ my answer, and now it does.\n<|/ c |>\n<| a tags=php |>\nTry this :\n<code>",
  "    // Your code here\n}\n</code>\n<|/ q dscore=0 |>\n<| c |>\nDo you know how\
    \ to compare strings in PHP? That should be your first step.\n<|/ c |>\n<| c |>\n\
    yes, but how do i check every 3 letters is a distinct letter?\n<|/ c |>\n<| c\
    \ |>\nIf you know how to compare strings in PHP, then you can compare every three\
    \ letters, of course :)\n<|/ c |>\n<| c |>\ni tried but am a beginner and am completely\
    \ lost, can you give me an example?\n<|/ c |>\n<| c |>\nThat's not a problem,\
    \ we're here to help but we're not here to do your homework for you. Try something.\
    \ If you have some code but it's not working as it should, then you can post it\
    \ here and we'll have a look.\n<|/ c |>\n<| a tags=php dscore=2 |>\nThe problem\
    \ is your algorithm is wrong. One algorithm you could use would be to walk down\
    \ the string and keep a running count of how many of each character you encounter.\
    \ At each character in the string, you know how many times each character appears\
    \ so far and how many times you encounter that character in the string. Once you\
    \ have this information, you can compare the two values to see if they are the\
    \ same.\nSince you seem to be new to PHP, you will have to do some reading on\
    \ strings. I suggest you read this section of the manual.\n<code>\n<?php", " \
    \   $n = strlen($s);\n    for($i = 0; $i < $n; $i++) {\n        if($i % 3 ===\
    \ 0) {\n            foreach(str_split($s[$i]) as $c) {\n                if($c\
    \ != $s[$i-1] && $c != $s[$i+1] && $c != $s[$i+2]) {\n                    return\
    \ false;\n                }\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis is my answer:\n<code>", "    // TODO:\
    \ Implement is_happy() here\n\n    return true;\n}\n</code>\n<|/ a tags=php |>\n\
    <| c |>\ni dont think it works, check this one out. `is_happy(\"abcde\")` should\
    \ be `false`\n<|/ c |>\n<| c |>\nI updated it a bit. Now it works.\n<|/ c |>\n\
    <| c |>\ni would use this, but i cant since im not allowed to use built in function\
    \ on our servers\n<|/ c |>\n<| c |>\nOk, I did it another way. Now it should work.\
    \ Thanks for pointing it out!\n<|/ c |>\n<| c |>\nI updated my answer again. This\
    \ time it actually works. Thanks for the help!\n<|/ c |>\n<| a tags=php dscore=0\
    \ |>\nHere's another solution which may suit your needs. I didn't see any previous\
    \ answers which were using array_diff, so I decided to do it that way as well.\n\
    <code>\n<?php", "    // code here\n}\n</code>\n<|/ a tags=loops,string,php,function\
    \ |>\n<| c |>\nWhy does this work and my attempt at checking each character in\
    \ the string doesn't?\n<|/ c |>\n<| c |>\nYour attempt doesnt work because your\
    \ loop just checks if the string is 1 character long, then checks if the string\
    \ is 2 characters, etc, then only breaks when it equals 3, not if the entire string\
    \ has 3 characters\n<|/ c |>\n<| c |>\nYes but your loop checks if the first character\
    \ is different to the second character, the second character is different to the\
    \ third character, and the third character is different to the fourth character\
    \ etc. So you still need to check all characters\n<|/ c |>\n<| c |>\nHaving a\
    \ hard time understanding what you are trying to say.\n<|/ c |>\n<| a tags=loops,string,php,function\
    \ dscore=2 |>\nTry this code:\n<code>\n<?php", "    return strlen($s) >= 3 &&\
    \ is_uniq_substr($s, 3);\n}\n", "  return (strlen($s) >= 3) && (count(array_count_values(str_split($s)))\
    \ == 3);\n}\n\n$tests = [\n  '',\n  'a',\n  'ab',\n  'abc',\n  'abcd',\n  'abcde',\n\
    \  'abcdef',\n  'abcdefg',\n  'abcdefgh',\n  'abcdefghi',\n  'abcdefghij',\n \
    \ 'abcdefghijk',\n  'abcdefghijkl',\n  'abcdefghijklm',\n  'abcdefghijklmn',\n\
    \  'abcdefghijklmno',\n  'abcdefghijklmnop',\n  'abcdefghijklmnopq',\n  'abcdefghijklmnopqr',\n\
    \  'abcdefghijklmnopqrs',\n  'abcdefghijklmnopqrst',\n  'abcdefghijklmnopqrstu',\n\
    \  'abcdefghijklmnopqrstuv',\n  'abcdefghijklmnopqrstuvw',\n  'abcdefghijklmnopqrstuvwx',\n\
    \  'abcdefghijklmnopqrstuvwxy',\n  'abcdefghijklmnopqrstuvwxyz',\n  'abcdefghijklmnopqrstuvwxyza',\n\
    \  'abcdefghijklmnopqrstuvwxyzab',\n  'abcdefghijklmnopqrstuvwxyzabc',\n  'abcdefghijklmnopqrstuvwxyzabcd',\n\
    \  'abcdefghijklmnopqrstuvwxyzabcde',\n  'abcdefghijklmnopqrstuvwxyzabcdef',\n\
    \  'abcdefghijklmnopqrstuvwxyzabcdefg',\n  'abcdefghijklmnopqrstuvwxyzabcdefgh',\n\
    \  'abcdefghijklmnopqrstuvwxyzabcdefghi',\n  'abcdefghijklmnopqrstuvwxyzabcdefghij',\n\
    \  'abcdefghijklmnopqrstuvwxyzabcdefghijk',\n  'abcdefghijklmnopqrstuvwxyzabcdefghijkl',\n\
    \  'abcdefghijklmnopqrstuvwxyzabcdefghijklm',\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmn',\n\
    \  'abcdefghijklmnopqrstuvwxyzabcdefghijklmno',\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnop',\n\
    \  'abcdefghij", "  $str_array = str_split($s);\n  $num_elements = count($str_array);\n\
    \  return ($num_elements == 3 && array_unique($str_array)\n    != $str_array &&\
    \ $str_array != explode(',', $s));\n}\n\necho is_happy(\"abcbdbc\");\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI find that one interesting, but this doesn't seem\
    \ to work on empty strings. Also, it seems overly complicated. Why would a solution\
    \ that works everywhere not be more efficient?\n<|/ c |>\n<| c |>\nAs I understand,\
    \ there can be strings like \"abc\" or \"ab,c\"\n<|/ c |>\n<| c |>\nBut your question\
    \ was about \"happy string\"\n<|/ c |>\n<| c |>\nI misread the question. Sorry.\n\
    <|/ c |>\n<| c |>\nThis is very nice solution. Just a small change, use array_unique($str_array)\
    \ instead of array_unique($str_array) != $str_array.\n<|/ c |>\n<| a |>\n<code>\n\
    <?php\n", "    return !empty($s) && $s != \"NULL\" && strlen($s) > 3 && count(str_split($s))\
    \ === 3 && count(array_count_values(str_split($s))) === 3;\n}\n", "    // code\
    \ here\n}\n", "    $pattern = '/^[a-km-z]$/';\n    return preg_match($pattern,\
    \ $s);\n}\n", "    $length = 3;\n    $arr = str_split($s);\n    $result = count($arr)\
    \ >= $length && \n            array_reduce($arr,function($acc,$item){\n      \
    \          return $acc && is_distinct($item);\n            }, true);\n    return\
    \ $result;\n}", "    // TODO: Implement the is_happy function here.\n}\n", " \
    \   $i = 0;\n    $is_happy = false;\n    foreach ($s as $letter) {\n        if\
    \ ($i == 3) {\n            $is_happy = true;\n            $i = 0;\n        }\n\
    \        if ($letter != $s[$i+1]) {\n            $is_happy = false;\n        \
    \    break;\n        }\n        $i++;\n    }\n    return $is_happy;\n}\n", " \
    \   $len = strlen($s);\n    $happy = true;\n    if ($len < 3) {\n        $happy\
    \ = false;\n    } else {\n        for ($i = 0; $i < $len; $i++) {\n          \
    \  for ($j = $i+1; $j < $len; $j++) {\n                if ($s[$i] == $s[$j]) {\n\
    \                    for ($k = $i+1; $k < $len; $k++) {\n                    \
    \    if ($s[$i] == $s[$k]) {\n                            for ($l = $j+1; $l <\
    \ $len; $l++) {\n                                if ($s[$i] == $s[$l]) {\n   \
    \                                 for ($m = $k+1; $m < $len; $m++) {\n       \
    \                                 if ($s[$i] == $s[$m]) {\n                  \
    \                          for ($n = $l+1; $n < $len; $n++) {\n              \
    \                                  if ($s[$i] == $s[$n]) {\n                 \
    \                                   for ($o = $m+1; $o < $len; $o++) {\n     \
    \                                                   if ($s[$i] == $s[$o]) {\n\
    \                                                            for ($p = $o+1; $p\
    \ < $len; $p++) {\n                                                          \
    \      if ($s[$i] == $s[$p]) {\n                                             \
    \                       $happy = false;\n                                    \
    \                            }\n                                             \
    \               }\n                                                        }\n\
    \                                                    }\n                     \
    \                           }\n                                            }\n\
    \                                        }\n                                 \
    \   }\n                                }\n                            }\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return $happy;\n}\necho is_happy('hello') ? \"True\"\
    \ : \"False\"; // False\necho is_happy('hell') ? \"True\" : \"False\"; // True\n\
    echo is_happy('helloworld') ? \"True\" : \"False\"; // True\necho is_happy('halloworld')\
    \ ? \"True\" : \"False\"; // True\necho is_happy('aaabbb') ? \"True\" : \"False\"\
    ; // True\necho is_happy('aabb') ? \"True\" : \"False\"; // False\necho is_happy('aaaaaa')\
    \ ? \"True\" : \"False\"; // True", "  // Your code here\n  return (strlen($s)\
    \ >= 3) && \n        (array_count_values(str_split($s)) == array_count_values(str_split($s)));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    $l = strlen($s);\n\
    \    if($l < 3) return false;\n    for($i = 0; $i < $l; $i += 3) {\n        if(strpos($s,$s[$i])\
    \ !== $i) return false;\n    }\n    return true;\n}\n\n$tests = array(\"asdasd\"\
    ,false,false,true,\"asdfas\",false);\nforeach($tests as $test) {\n    echo \"\
    '$test' => \" . ($test ? \"happy\" : \"not happy\") . \"\\n\";\n}", "    $arr=str_split($s);\n\
    \    sort($arr);\n    return count($arr)>=3&&\n    !in_array($arr[0],$arr)&&\n\
    \    !in_array($arr[1],$arr)&&\n    !in_array($arr[2],$arr);\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nYour answer is missing its educational explanation.\n\
    <|/ c |>\n<| c |>\nWhat are you talking about? There is explanation what this\
    \ code is doing.\n<|/ c |>\n<| c |>\nI realize that. I'm asking if your answer\
    \ adds any educational value. Otherwise you are only providing opinion that \"\
    it works\" without elaborating on what it actually does and why and how it works.\n\
    <|/ c |>\n<| c |>\nThanks for the answer, but it's not exactly the one I expected.\
    \ It's not allowed to use any loops to find the solution.\n<|/ c |>\n<| c |>\n\
    My solution is using a loop. As I said in the answer \"As I said in the answer\
    \ 'As I said in the answer' \" :)\n<|/ c |>\n<| a dscore=0 tags=php |>\nHere is\
    \ a solution without using any loop. \n<code>\n<?php", "    $string = str_split($s);\n\
    \    $length = 3;\n    $count = 0;\n\n    foreach($string as $value){\n      \
    \  if($value != $string[$count]){\n            $count++;\n        }\n        if($count\
    \ == $length){\n            $count = 1;\n        }\n    }\n\n    return $length\
    \ >= $count;\n}\n</code>\n<|/ a tags=php,function,loops |>\n<| a tags=php,function,loops\
    \ |>\nI tried to solve this in a single loop.\n<code>", "  \n    $len = strlen($s);\n\
    \    if($len < 3) return false;\n    \n    for($i = 0; $i < $len; $i++) {\n  \
    \      $currentChar = $s[$i];\n        if(isset($s[$i+1]) && $s[$i+1] == $currentChar)\
    \ {\n            // If the next char is same as the current char\n           \
    \ $i++;\n        }\n    }\n    \n    // If every 3 chars have a distinct value,\
    \ return true\n    $count = 1;\n    for($i = 2; $i < $len; $i++) {\n        if(isset($s[$i-1]))\
    \ {\n            $count++;\n        }\n    }\n    return $len >= 3 && $count >=\
    \ 3;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nA simple Python solution:\n\
    <code>\ndef is_happy(s):\n    return (len(s) >= 3 and len(set(s[i:i+3]) for i\
    \ in range(0, len(s)-2)) >= 3)\n</code>\n<|/ a tags=string,php,algorithm |>\n\
    <| a tags=string,php,algorithm |>\nThis solution is pretty similar to one of the\
    \ other answers:\n<code>\n<?php\n$string = 'abcdef';\n\n$length = strlen($string);\n\
    \n$happed = isHappy($string);\n", "    $count = 0;\n    foreach ($s as $i => $letter)\
    \ {\n        if ($letter == $s[$i+1] && $letter == $s[$i+2]) {\n            $count++;\n\
    \        }\n    }\n    return ($count >= 3 && count($s) == 3);\n}\n</code>\n<|/\
    \ a dscore=0 tags=php,arrays |>\n<| c |>\nWhat if they input the wrong number\
    \ of letters?\n<|/ c |>\n<| c |>\nThis is not a homework assignment\n<|/ c |>\n\
    <| c |>\nThen you should post a comment about it.  I figured if someone posted\
    \ an answer and they didn't understand it they would take it on faith that it\
    \ wasn't homework.  It is a valid question that someone might want to understand\
    \ what it is asking for.  If I answered it well enough to solve the problem, I'd\
    \ give them the check.\n<|/ c |>\n<| c |>\nI posted a comment above. It was just\
    \ an additional question.\n<|/ c |>\n<| a |>\nYou were almost there, you were\
    \ counting the number of 'a' and 'b' instead of 'a' and 'c'\nTry this function:\n\
    <code>", "    if (is_string($s) && !empty($s)) {\n        $result = 0;\n     \
    \   for ($i = 0; $i < strlen($s); $i++) {\n            if (in_array($s[$i], $s_arr))\
    \ {\n                $result++;\n            }\n            $s_arr[] = $s[$i];\n\
    \        }\n        if ($result >= 3 && count(array_unique($s_arr)) >= 3) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis is not what the OP is asking for. He wants his\
    \ function return TRUE if the string contains at least 3 letters, and the string\
    \ has **all** of them distinct, not only three.\n<|/ c |>\n<| a tags=php |>\n\
    Use strlen(), explode(), and array_count_values():\n<code>\n<?php\n", "    $length\
    \ = 0;\n    foreach($s as $char) {\n        if(!isset($s[$length]) || $char !==\
    \ $s[$length]){\n            $length++;\n        } else {\n            $length++;\n\
    \        }\n    }\n    return ($length >= 3 && $length % 3 === 0);\n}", "    return\
    \ (strlen($s) >= 3) && (!isHappy($s));\n}\n", "    $len = strlen($s);\n    $flag\
    \ = true;\n    $i = 0;\n    while ($i < $len) {\n        if ($flag) {\n      \
    \      if ($s[$i] === $s[$i + 1] && $s[$i] === $s[$i + 2] && $s[$i] === $s[$i\
    \ + 3]) {\n                for ($j = $i + 4; $j < $len; $j++) {\n            \
    \        if ($s[$i] === $s[$j]) {\n                        $flag = false;\n  \
    \                      break;\n                    }\n                }\n    \
    \        }\n        } else {\n            if ($s[$i] === $s[$i + 1] && $s[$i]\
    \ === $s[$i + 2] && $s[$i] === $s[$i + 3]) {\n                for ($j = $i + 4;\
    \ $j < $len; $j++) {\n                    if ($s[$i] === $s[$j]) {\n         \
    \               $flag = true;\n                        break;\n              \
    \      }\n                }\n            }\n        }\n        $i++;\n    }\n\
    \    return $flag;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for this.\
    \ Just out of curiosity, how would I extend this to check for a minimum number\
    \ of consecutive duplicates?\n<|/ c |>\n<| c |>\nThis answer will not work for:\
    \ is_happy('abbbb'); It returns False when it should return True.\n<|/ c |>\n\
    <| c |>\nYou're right, I missed the minimum check. Updated the answer\n<|/ c |>\n\
    <| c |>\nYou can actually do this in O(n) instead of O(n log n) by using an array\
    \ of the number of occurrences of each letter of the alphabet and comparing it\
    \ to the length of the string.  Using an array is O(n) so the overall running\
    \ time is O(n).  You also don't need to keep two copies of the array if you use\
    \ an array to count the occurrences of each letter.\n<|/ c |>\n<| a |>\nI used\
    \ a modified version of Ahmet Kurmangaliyev's code\n<code>\n<?php", "    $happy\
    \ = true;\n    $length = strlen($s);\n    for($i = 0; $i < $length; $i++) {\n\
    \        $val1 = $s[$i];\n        for($j = $i; $j < $length; $j++) {\n       \
    \     $val2 = $s[$j];\n            if(!array_key_exists($val1, $counts) && !array_key_exists($val2,\
    \ $counts)) {\n                $happy = false;\n                break;\n     \
    \       }\n        }\n        if($happy) break;\n    }\n    return $happy;\n}\n\
    \n$strings = array(\"a\", \"aa\", \"ab\", \"abcd\", \"abbb\", \"adb\", \"xyy\"\
    );\n\nforeach ($strings as $s) {\n    echo $s, \" => \", is_happy($s) ? \"happy\"\
    \ : \"not happy\", \"\\n\";\n}\n", "    $pattern = '/^(a*){3,}$/i';\n    if (preg_match($pattern,\
    \ $s)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
  "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $str = str_split($s);\n  \
    \  $count = 0;\n    for ($i = 0; $i < count($str); $i++) {\n        if ($str[$i]\
    \ === $str[$i + 1] && $str[$i + 1] === $str[$i + 2] && $str[$i + 2] === $str[$i\
    \ + 3]) {\n            $count++;\n        } elseif ($count >= 3) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\n", "    $length = strlen($s);\n\
    \    if ($length < 3 || $length !== strlen(preg_split('//', $s)))\n        return\
    \ false;\n\n    $unique = array_filter(preg_split('//', $s), 'is_unique_char');\n\
    \    return count($unique) >= 3;\n}\n", "  if (strlen($s) < 3) return 0;\n  $alphabet\
    \ = array_map(function ($letter) {\n    return $letter;\n  }, str_split($s));\n\
    \  $counter = 0;\n  foreach ($alphabet as $letter) {\n    $counter++;\n    if\
    \ ($counter == 3) return 1;\n    if ($letter != $alphabet[$counter - 2]) return\
    \ false;\n  }\n  return 0;\n}\n</code>\n<|/ a dscore=2 tags=string,php,algorithm\
    \ |>\n<| c |>\nThis is actually very interesting! One thing though: I'm getting\
    \ this error with the `str_split()` function: *array_map(): Argument #2 should\
    \ be an array or an object that implements Countable*, even though I've used `str_split()`\
    \ on the string: `$s = \"helloworld\";`\n<|/ c |>\n<| c |>\nIt might be because\
    \ PHP doesn't have support for [`str_split()`](http://php.net/str_split). I've\
    \ added the equivalent code for `str_split()` to the answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere is a very simple algorithm for solving this question which uses only\
    \ 3 iterations:\n<code>\n$s = 'abcd';\n\nif (strlen($s) >= 3 && $s[0] == $s[1]\
    \ && $s[1] == $s[2])\n{\n    // $s is happy\n}\nelse\n{\n    $l = strlen($s);\n\
    \    if ($l > 3 && $l%3 === 0) {\n        // $s is happy\n    }\n    elseif ($l\
    \ > 3 && $l%3 !== 0)\n    {\n        // $s is unhappy\n    }\n}\n</code>\n<|/\
    \ a tags=string,php,algorithm |>\n<| c |>\nBut this is still `O(n)`. No `O(1)`.\n\
    <|/ c |>\n<| c |>\n, I'm sorry to say that your solution doesn't work.\n<|/ c\
    \ |>\n<| c |>\n, It does work, except for the last condition. I'll fix it.\n<|/\
    \ c |>\n<| c |>\n, The last condition doesn't work because I forgot `else` for\
    \ `if ($l > 3 && $l%3 === 0)` and `if ($l > 3 && $l%3 !== 0)`. Please take a look\
    \ at my updated answer.\n<|/ c |>\n<| c |>\nIt doesn't work for the last two cases\
    \ of your solution, since you always have `strlen($s)` as 4, so it always returns\
    \ true, and that is the same logic as the last case, which will always return\
    \ true.\n<|/ c |>\n<| a dscore=1 |>", "    $count = 0;\n    foreach (str_split($s)\
    \ as $val) {\n        $count++;\n        if ($count < 3 || in_array($val, $s2))\
    \ {\n            continue;\n        } else {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n", "   return !(strlen($s) < 3 || checkConsecutiveDistinct($s));\n\
    }", "  return (strlen($s) >= 3) && preg_match('/(.)\\1{3,}/', $s);\n}\n</code>\n\
    <|/ a tags=php |>\n<| a dscore=0 tags=php |>\n<code>", "    $a = 0;\n    $b =\
    \ 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    for($i=0;$i<strlen($s);$i++){\n\
    \        if($i%3==0){\n            $a++;\n        }\n        if($i%5==0){\n  \
    \          $b++;\n        }\n        if($i%7==0){\n            $c++;\n       \
    \ }\n        if($i%9==0){\n            $d++;\n        }\n        if($i%11==0){\n\
    \            $e++;\n        }\n    }\n    if($a>0 && $b>0 && $c>0 && $d>0 && $e>0\
    \ && $a==$b && $a==$c && $a==$d && $a==$e && $b==$c && $b==$d && $b==$e && $c==$d\
    \ && $c==$e && $d==$e){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}\n", "    $count = 0;\n    \n    for($i=0; $i < strlen($s); $i++){\n\
    \        if($s[$i] == $s[$i+1]){\n            $count++;\n        }\n        \n\
    \        if($count == 3){\n            return false;\n        }\n    }\n\n   \
    \ return true;\n}\n", "    // Your code here\n    $arr = str_split($s);\n    $count\
    \ = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n        $count = $count +\
    \ $arr[$i];\n    }\n\n    if ($count >= 3 && $count == strlen($s)) {\n       \
    \ for ($i = 1; $i < count($arr); $i++) {\n            if ($i != $arr[$i]) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/* ===== example =====\nInput:\n\
    \    $arr => $arr = [ 'a', 'b', 'c' ]\nOutput:\n    true\n\nInput:\n    $arr =>\
    \ $arr = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j' ]\nOutput:\n    false\n\
    */\n</code>\n<|/ a tags=php,substring |>\n<| c |>\nHow is this different from\
    \ other answers?\n<|/ c |>\n<| c |>\nIt's not different from others. He has posted\
    \ an answer that was before mine. He is showing how to create a function and how\
    \ it works. He has used the array functions. He has also made a loop to check\
    \ 3 letter sequences in an array\n<|/ c |>\n<| a tags=php,substring dscore=1 |>\n\
    <code>", "  $length = strlen($s);\n  return $length >= 3 && str_repeat(substr($s,\
    \ 0, 1), 3) == substr($s, 0, 3);\n}\necho is_happy(\"abcde\") ? \"happy\" : \"\
    not happy\";\n", "    return strlen($s) >= 3 && strpos($s, 'a', -1, 3) !== false;\n\
    }\n\n$tests = array(\n    'abba',\n    'abbb',\n    'baba',\n    'aba',\n    '',\n\
    \    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
  "    return (!strlen($s) || strlen($s) >= 3 && is_happy($s));\n}\n\n$strings = array(\n\
    \    'a',\n    'ab',\n    'abc',\n    'abcd',\n    'abcde',\n    'abcdef',\n \
    \   'abce',\n    'abckde',\n    'abcdefg',\n    'abcdgh',\n    'aabcdd',\n   \
    \ 'abcddee',\n    'abcddef',\n    'aacde',\n    'abckde',\n    'aacdef',\n   \
    \ 'abckde',\n    'abckdef',\n    'abckdefg',\n    'abckdefgh',\n    'abcddefgh',\n\
    \    'abcddefghij',\n    'abcddefghijkl',\n    'abcddefghijklm',\n    'abcdehijlmnop',\n\
    \    'abcdehijlmnopq',\n    'abcdefghijklmnopq',\n);\n\n$result = array_map(function\
    \ ($string) {\n    return sprintf('[%s] %s', $string, is_happy($string) ? 'Yes'\
    \ : 'No');\n}, $strings);\n\nforeach ($result as $row) {\n    echo(\"$row \\n\"\
    );\n}\n</code>\nOutput:\n<code>\n[a] No\n[a] No\n[a] No\n[a] Yes\n[a] No\n[a]\
    \ No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n\
    [a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n\
    [a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n\
    [a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n\
    [a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n\
    [a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n[a] No\n\
    [a] No", "  if (strlen($s) >= 3) {\n    foreach (str_split($s) as $letter) {\n\
    \      if ($letter === $letter) {\n        continue;\n      }\n      return false;\n\
    \    }\n    return true;\n  }\n  return false;\n}\n</code>\n<|/ a dscore=2 tags=arrays,php,string\
    \ |>\n<| c |>\nI doubt it is correct. `abcab` is happy but `aa` isn't. Your code\
    \ only checks 3 consecutive letters, not all letters. And you are ignoring case.\
    \ `Abc` is happy but `Aa` is not. Your code only checks 2 consecutive letters.\n\
    <|/ c |>\n<| c |>\n, you are right. My code is only checking 3 letters, and that\
    \ is why I used `str_split` in the first place. I will update my answer shortly.\n\
    <|/ c |>\n<| a tags=arrays,php,string |>\nYou can do it with preg_match_all function.\n\
    <code>\n<?php", "    if(strlen($s) < 3) return true;\n    $char_count = 0;\n \
    \   for($i = 0; $i < strlen($s); $i++)\n    {\n        if($s[$i] == $s[$i+1] &&\
    \ $s[$i+1] == $s[$i+2])\n            $char_count++;\n        if($char_count >\
    \ 3) return false;\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks.\
    \ I wanted to do it without loop. I would like to know why my code is not working\
    \ and how to fix it.\n<|/ c |>\n<| c |>\nI edited my answer and added a working\
    \ code without loop. Basically what it does is that it counts the number of consecutive\
    \ letters and then checks it.\n<|/ c |>\n<| c |>\nThank you. I didn't think about\
    \ counting letters.\n<|/ c |>\n<| a tags=php |>\nYou don't need regular expressions.\
    \ Just use a simple loop.\n<code>\n$string = 'xxxxx';\n$result = false;\nfor($i\
    \ = 0, $len = strlen($string); $i < $len; $i += 3) {\n    if($string[$i] !== $string[$i\
    \ + 1] || $string[$i] !== $string[$i + 2])\n        return false;\n}\nreturn true;\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer. It would be nice to\
    \ know why my code isn't working.\n<|/ c |>\n<| c |>\nWell you can debug it. Simply\
    \ add some echo statements in each if-statement and you'll see what happens. Also\
    \ look at this answer: https://stackoverflow.com/questions/14322488/php-how-to-debug-if-i-have-some-issues-with-code\n\
    <|/ c |>\n<| a |>\nYour logic is correct, try the below code and tell me if that\
    \ works\n<code>\n$string = 'xxxxx';\n$result = false;\nfor($i = 0, $len = strlen($string);\
    \ $i < $len; $i += 3) {\n    if($string[$i] !== $string[$i + 1] || $string[$i]\
    \ !== $string[$i + 2])\n        return false;\n}\nreturn true;\n</code>\n<|/ a\
    \ tags=php dscore=0 |>\n<| c |>\nThank you. I wanted to do it without loop. I\
    \ would like to know why my code is not working and how to fix it.\n<|/ c |>\n\
    <| c |>\nHi David, I tried your code on my local server with PHP 5.6.9 and its\
    \ working fine. Just try the above code snippet it should work fine\n<|/", " \
    \   $len = strlen($s);\n    if ($len < 3) return true;\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            if\
    \ ($s[$i] == $s[$j] && $i != $j) break;\n        }\n        if ($j >= $len) return\
    \ true;\n    }\n    return false;\n}\n</code>\n<|/ a tags=function,php |>\n<|\
    \ c |>\nI edited your answer to fix the code formatting, since it's much easier\
    \ to read and follow that way.\n<|/ c |>\n<| a tags=function,php dscore=0 |>\n\
    <code>\n<?php", "    if (strlen($s) < 3) return false;\n    $i = 0;\n    while\
    \ ($i < strlen($s)) {\n        if ($s[$i] != $s[$i + 1]) return false;\n     \
    \   $i++;\n    }\n    return true;\n}\n", "    if (strlen($s) < 3) {\n       \
    \ return false;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        for\
    \ ($j = 0; $j < 3; $j++) {\n            $char1 = $s[$i][$j];\n            $char2\
    \ = $s[$i + 1][$j + 1];\n            $char3 = $s[$i + 2][$j + 2];\n          \
    \  if (! isset($char1) && ! isset($char2) && ! isset($char3)) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n", " \
    \ if (strlen($s) < 3) \n    return false;\n  $count_chars = strlen($s);\n  for\
    \ ($i = 0; $i < $count_chars - 2; $i++) {\n    if ($count_chars - 2 === $i &&\
    \ $count_chars - 1 !== $i)\n      $letter = $s[$i];\n    if ($s[$i] === $s[$i+1]\
    \ && $s[$i+1] === $s[$i+2])\n      $letter = $s[$i+1];\n    if ($letter === $s[$i+1]\
    \ || $letter === $s[$i+2])\n      return false;\n  }\n  return true;\n}\n", " \
    \   $s = str_split($s);\n    $s_count = count($s);\n    if($s_count < 3) {\n \
    \       return false;\n    }\n    for($i = 0; $i < $s_count; $i++) {\n       \
    \ if($s[$i] === 'a' || $s[$i] === 'b') {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "    $chars = str_split($s);\n    $flag = false;\n\
    \    $i = 0;\n    foreach($chars as $char){\n        $i++;\n        if($flag ===\
    \ true && $char != $chars[$i]){\n            $flag = false;\n        }elseif($flag\
    \ === false && $char == $chars[$i]){\n            $flag = true;\n        }else{\n\
    \            $flag = false;\n        }\n    }\n    return $flag;\n}", "    $count\
    \ = 0;\n    $arr = [];\n    $leng = strlen($s);\n    for($i=0;$i<$leng;$i++)\n\
    \    {\n        $tmp = $s[$i];\n        if(in_array($tmp,$arr))\n        {\n \
    \           $count++;\n        }\n        else\n        {\n            $arr[]\
    \ = $tmp;\n        }\n    }\n    return ($count>=3) ? true : false;\n}\n", " \
    \   $len = strlen($s);\n    if ($len < 3 || $len > 6) return false;\n    foreach\
    \ (str_split($s) as $char) {\n        if ($char === $char) continue;\n       \
    \ if (!isset($chars[$char])) return false;\n    }\n    return true;\n}\n\n$chars\
    \ = [\n    'a' => [\n        'a' => 0,\n        'e' => 1,\n        'i' => 2,\n\
    \        'o' => 3,\n        'u' => 4,\n    ],\n    'b' => [\n        'b' => 0,\n\
    \        'c' => 1,\n        'd' => 2,\n        'f' => 3,\n        'h' => 4,\n\
    \    ],\n    'c' => [\n        'c' => 0,\n        'c' => 1,\n        'c' => 2,\n\
    \        'c' => 3,\n        'c' => 4,\n        'c' => 5,\n        'c' => 6,\n\
    \    ],\n    'd' => [\n        'd' => 0,\n        'd' => 1,\n        'd' => 2,\n\
    \        'd' => 3,\n        'd' => 4,\n        'd' => 5,\n        'd' => 6,\n\
    \        'd' => 7,\n    ],\n    'e' => [\n        'e' => 0,\n        'e' => 1,\n\
    \        'e' => 2,\n        'e' => 3,\n        'e' => 4,\n        'e' => 5,\n\
    \        'e' => 6,\n        'e' => 7,\n        'e' => 8,\n        'e' => 9,\n\
    \        'e' => 10,\n        'e' => 11,\n    ],\n    'f' => [\n        'f' =>\
    \ 0,\n        'f' => 1,\n        'f' => 2,\n        'f' => 3,\n        'f' =>\
    \ 4,\n        'f' => 5,\n        'f' => 6,\n        'f' => 7,\n        'f' =>\
    \ 8,\n        'f' => 9,\n        'f' => 10,\n        'f' => 11,\n        'f' =>\
    \ 12,\n    ],\n    'g' => [\n        'g' => 0,\n        'g' => 1,\n        'g'\
    \ => 2,\n        'g' => 3,\n        'g' => 4,\n        'g' => 5,\n        'g'\
    \ => 6,\n        'g' => 7,\n        'g' => 8,\n        'g' => 9,\n        'g'\
    \ => 10,\n        'g' => 11,\n        'g' => 12,\n        'g' => 13,\n       \
    \ 'g' => 14,\n        'g' => 15,\n    ],\n    'h' => [\n        'h' => 0,\n  \
    \      'h' => 1,\n        'h' => 2,\n        'h' => 3,\n        'h' => 4,\n  \
    \      'h' => 5,\n        'h' => 6,\n        'h' => 7,\n        'h' => 8,\n  \
    \      'h' => 9,\n        'h' => 10,\n        'h' => 11,\n        'h' => 12,\n\
    \        'h' => 13,\n", "    $string = \"\";\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $string .= $s[$i];\n    }\n    if (strlen($string) < 3) return\
    \ \"False\";\n    for ($i = 1; $i <= strlen($string) - 2; $i++) {\n        if\
    \ ($string[$i - 1] != $string[$i + 1]) return \"False\";\n    }\n    return \"\
    True\";\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a |>\nThis may help someone:\n\
    <code>", "\t$length = 3;\n\tfor($i=0;$i<strlen($s);$i++){\n\t\tif($s[$i]==$s[$i-1]\
    \ && $s[$i]==$s[$i+1])\n\t\t\t$length++;\n\t}\n\tfor($i=0;$i<$length;$i++){\n\t\
    \tif(count($s)<3){\n\t\t\treturn false;\n\t\t}\n\t\tfor($j=$i+1;$j<$length;$j++){\n\
    \t\t\tif($s[$j]==$s[$i] && $s[$j]==$s[$j+1])\n\t\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\n", "  $len = strlen($s);\n  if ($len < 3) {\n    return\
    \ false;\n  }\n  $letters_distinct = array_count_values(str_split($s));\n  foreach\
    \ ($letters_distinct as $k => $v) {\n    if ($v != 1) {\n      return false;\n\
    \    }\n  }\n  return true;\n}", "  // your code here\n}", "    $str = str_split($s);\n\
    \    $length = count($str);\n    if($length<3){\n        return false;\n    }\n\
    \    for($i=0;$i<3;$i++){\n        if($str[$i]==$str[$i+1] && $str[$i]==$str[$i+2]\
    \ && $str[$i+1]!=str[$i+2]){\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n</code>\n<|/ a |>\n<| c |>\nthank you! i got it and it's working\
    \ :) i didn't know that there is str_split in php :D\n<|/ c |>\n<| a |>\n<code>",
  "  $res = \"/^[a-z]{3,}$/\";\n  if(preg_match($res, $s) != -1) {\n    $flag = 0;\n\
    \    for($i = 1; $i < strlen($s); $i++) {\n      if($s[$i - 1] == $s[$i] || $s[$i\
    \ - 1] == $s[$i + 1] || $s[$i - 1] == $s[$i - 1] ) {\n        $flag = 1;\n   \
    \     for($j = 1; $j < $i; $j++) {\n          if($s[$j] != $s[$j + 1]) {\n   \
    \         $flag = 0;\n            break;\n          }\n        }\n        break;\n\
    \      }\n    }\n    if($flag == 1) {\n      return TRUE;\n    } else {\n    \
    \  return FALSE;\n    }\n  } else {\n    return FALSE;\n  }\n}\necho is_happy('apple');\n\
    echo is_happy('appleeee');", "  return (strlen($s) < 3 or count(array_count_values(str_split($s)))\
    \ < 3);\n}", "    \n    // Your code here\n    \n}\n", "  $len = strlen($s);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $hash = $s[$i];\n    for ($j = $i + 1;\
    \ $j < $len; $j++) {\n      if ($s[$i] == $s[$j]) {\n        $hash = $hash + 1;\n\
    \        $j++;\n      } else {\n        if ($hash == 2) {\n          return false;\n\
    \        } else {\n          $hash = 0;\n        }\n      }\n    }\n  }\n  return\
    \ true;\n}\n", "    $count = array_count_values(str_split($s));\n    $check =\
    \ (count($count) >= 3 && count($count) === array_unique($count));\n    return\
    \ $check;\n}\n", "    return (strlen($s) >= 3) && !array_count_values(str_split($s))[\"\
    a\"];\n}\n", "    $str = preg_replace('/\\B([a-zA-Z])/', '', $s);\n    return\
    \ strlen($str) >= 3 && count_chars($str) == 3;\n}\n\necho is_happy(\"abba\");\
    \ // True\necho is_happy(\"aabb\"); // True\necho is_happy(\"aaaab\"); // True\n\
    echo is_happy(\"aaaaa\"); // False\necho is_happy(\"xyy\"); // False", "    foreach($s\
    \ as $key => $value) {\n        if($key % 3 != 0)\n        {\n            $first\
    \ = $s[$key];\n            $second = 'a';\n            $third = $s[$key + 1];\n\
    \            $fourth = $s[$key + 2];\n            if($first == $second || $first\
    \ == $third || $first == $fourth)\n            {\n                if($second ==\
    \ $third || $second == $fourth || $third == $fourth)\n                {\n    \
    \                if($third == $fourth)\n                    {\n              \
    \          return true;\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nI thought the question was about checking whether a string is happy or not,\
    \ not checking whether its length is at least 3\n<|/ c |>\n<| c |>\nThe question\
    \ was to know whether a string is happy or not. Anyway, I edited the answer to\
    \ make it more specific.\n<|/ c |>\n<| a dscore=0 tags=php |>\nHere is a solution\
    \ using array_diff and array_diff.\n<code>\n<?php\n\n$string = \"aaa\";\n", " \
    \   if (strlen($s) < 3) return false;\n    if (strlen($s) == 3) return count(array_unique($s))\
    \ == 3;\n\n    // We want to find subsequences of length 3 that are unique\n \
    \   $subsequences = array_chunk($s, 3);\n    foreach ($subsequences as $subsequence)\
    \ {\n        if (count(array_unique($subsequence)) == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n", "    $len = strlen($s);\n\
    \    if ($len < 3)\n        return true;\n    if ($len == 3)\n    {\n        $res\
    \ = true;\n        for ($i = 0; $i < $len - 2; $i++)\n        {\n            $res\
    \ = $res && (($s[$i] != $s[$i + 1] && $s[$i] != $s[$i + 2]) && $s[$i] == $s[$i\
    \ + 3]);\n        }\n        return $res;\n    }\n    return false;\n}\n\n$s =\
    \ \"a\";\necho \"\\n$s is happy? \".(is_happy($s) ? 'yes' : 'no').\"\\n\";\n$s\
    \ = \"a\";\necho \"\\n$s is happy? \".(is_happy($s) ? 'yes' : 'no').\"\\n\";\n\
    $s = \"ab\";\necho \"\\n$s is happy? \".(is_happy($s) ? 'yes' : 'no').\"\\n\"\
    ;\n$s = \"abcd\";\necho \"\\n$s is happy? \".(is_happy($s) ? 'yes' : 'no').\"\\\
    n\";\n$s = \"aabb\";\necho \"\\n$s is happy? \".(is_happy($s) ? 'yes' : 'no').\"\
    \\n\";\n$s = \"adb\";\necho \"\\n$s is happy? \".(is_happy($s) ? 'yes' : 'no').\"\
    \\n\";\n$s = \"xyy\";\necho \"\\n$s is happy? \".(is_happy($s) ? 'yes' : 'no').\"\
    \\n\";", "    $count = array_count_values(str_split($s));\n    if (count($count)\
    \ < 3) return false;\n    foreach ($count as $val && $val > 3) {\n        return\
    \ false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=php,string,preg-match\
    \ |>\n<| a tags=php,string,preg-match dscore=2 |>\nFor those who don't want regex\
    \ and want just counting of letters:\n<code>", "    if (empty($s)) return false;\n\
    \    if (strlen($s) >= 3) return true;\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        for ($j = 0; $j < $i; $j++) {\n            if ($s[$i] === $s[$j])\
    \ return false;\n        }\n    }\n    return true;\n}\n\n$strings = [\n    'abba',\n\
    \    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n    'xyy',\n];\n$strings = [\n\
    \    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n    'xyy',\n];\n\
    $strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n   \
    \ 'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n$strings = [\n    'abba',\n    'abcde',\n    'a',\n    'aaaaaaaaaaaaaa',\n\
    \    'xyy',\n];\n", "    $n = strlen($s);\n    for($i = 0; $i < $n; $i++) {\n\
    \        if($s[$i] != $s[$i+1] || $s[$i] != $s[$i+2])\n            return false;\n\
    \    }\n    return true;\n}", "    $len = strlen($s);\n    return ($len >= 3)\
    \ && (!checkConsecutive($s));\n}\n", "  if (strlen($s) < 3) { return false; }\n\
    \  for ($i = 0; $i < strlen($s) - 1; $i++) {\n    if ($s[$i] === $s[$i + 1] ||\
    \ $s[$i] === $s[$i + 2]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    $len = strlen($s);\n    if ($len < 3) {\n        return false;\n  \
    \  }\n    $strs = [];\n    for ($i = 0; $i < $len; $i++) {\n        $strs[] =\
    \ $s[$i];\n    }\n    $strs = array_unique($strs);\n    return count($strs) >=\
    \ 3 && count(array_intersect($strs, $strs)) === $len;\n}\n", "    $letters = str_split($s);\n\
    \    \n    $l = count($letters);\n    \n    if($l < 3)\n        return true;\n\
    \    \n    for($i = 0; $i < $l; $i += 3)\n    {\n        if($letters[$i] == $letters[$i\
    \ + 1] && $letters[$i + 1] == $letters[$i + 2])\n        {\n            unset($letters[$i],\
    \ $letters[$i + 1], $letters[$i + 2]);\n        }\n    }\n    \n    return count($letters)\
    \ == 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "  if (strlen($s) <\
    \ 3) return false;\n  for ($i = 1; $i < strlen($s); $i++) {\n    $char = substr($s,\
    \ $i, 1);\n    if ($char !== substr($s, $i - 1, 1)) continue;\n    else return\
    \ false;\n  }\n  return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    The code I used in Python3:\n<code>\ndef is_happy(s):\n    count=0\n    for i\
    \ in s:\n        if i!=s[i-1]:\n            count+=1\n        else:\n        \
    \    count=0\n            break\n    if count>=len(s)/3:\n        return True\n\
    \    else:\n        return False\n\nprint(is_happy(\"adb\"))\n</code>\n<|/ a tags=string,algorithm,php\
    \ |>\n<| c |>\nwhat about strings like \"aabb\" for example?\n<|/ c |>\n<| c |>\n\
    This works only for strings with even length. Even length strings are happy strings.\
    \ Try it yourself with `is_happy(\"aaaa\")`\n<|/ c |>\n<| a |>\nIn Java : \n<code>\n\
    public boolean isHappy(String s) {\n    int count = 0;\n    boolean flag = true;\n\
    \n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == s.charAt(i\
    \ - 1)) {\n            count++;\n        } else {\n            flag = false;\n\
    \            break;\n        }\n    }\n    if (count < s.length() / 3) {\n   \
    \     flag = false;\n    }\n    return flag;\n}\n</code>\n<|/ a tags=string,algorithm,php\
    \ dscore=0 |>\n<| a dscore=0 |>\nI implemented a python solution which works also\
    \ for even length strings:\n<code>\ndef is_happy(s):\n    length = len(s)\n  \
    \  if length < 3:\n        return False\n    else:\n        if length >= 3:\n\
    \            count = 1\n            i = 0\n            while i < length - 2:\n\
    \                if s[i] == s[i+1] and s[i+1] != s[i+2]:\n                   \
    \ count += 2\n                else:\n                    count += 3\n        \
    \        i += 1\n            if count > length/3:\n                return True\n\
    \            else:\n                return False\n        else:\n            return\
    \ False\n</code>\n<|/ a tags=string,algorithm,php |>\n<| a tags=string,algorithm,php\
    \ |>\nI wrote a solution for PHP:\n<code>", "    return !(strlen($s) < 3 || !array_unique($s));\n\
    }\n</code>\n<|/ a tags=string,php dscore=2 |>\n<| c |>\nWhat about this one: \"\
    aabc\", it is also happy :D\n<|/ c |>\n<| c |>\n: ah yes you are right! I forgot\
    \ that in his example the strings are always longer than 3 characters! Thank you!\n\
    <|/ c |>\n<| c |>\nThank you very much, it works great! But I have a question.\
    \ Why do I need to add `!` before `!(strlen($s) < 3 || !array_unique($s))`?\n\
    <|/ c |>\n<| c |>\nThe `!` is here to invert a boolean expression, so that if\
    \ the first part is `true` (i.e. the first 3 characters are distinct), it will\
    \ return `false`, otherwise it will return `true`. I think that if you're not\
    \ interested in knowing whether a string is happy or not, you can simply use `return\
    \ !(strlen($s) < 3 || !array_unique($s));`\n<|/ c |>\n<| c |>\nI added an explanation\
    \ to the answer. Hope it helps!\n<|/ c |>\n<| a dscore=2 |>\nMy version:\n<code>\n\
    <?php\n$string = 'a';\n$pattern = '/^(.)\\1{2}$/';\n\nif(preg_match($pattern,\
    \ $string)) echo 'Still happy';\nelse echo 'Still unhappy';", "    // Your code\
    \ here\n}\nis_happy('abcd');", "  $len  = strlen($s);\n  $chars = str_split($s);\n\
    \  foreach ($chars as $key => $char) {\n    if ($key + 1 >= $len) {\n      break;\n\
    \    }\n    if ($chars[$key] == $chars[$key + 1]) {\n      unset($chars[$key +\
    \ 1]);\n    }\n  }\n  return count($chars) >= 3 && $len >= 3;\n}\n\necho is_happy(\"\
    abba\"); // False\necho is_happy(\"a\");    // False\necho is_happy(\"aaa\");\
    \ // False\necho is_happy(\"abcd\"); // True\necho is_happy(\"aabb\"); // False\n\
    echo is_happy(\"adb\");  // True\necho is_happy(\"xyy\"); // False\n</code>\n\
    <|/ a dscore=1 tags=php,string,arrays,function |>\n<| a dscore=1 |>\nI took some\
    \ of your ideas and built this:\n<code>", "    return strlen($s) >= 3 && substr_count($s,\
    \ '') !== 3;\n}", "    foreach($s as $char) {\n        // check if char is in\
    \ the right range\n        if ($char < 'a' || $char > 'z') return false;\n\n \
    \       // check if char is repeated\n        $count = substr_count($s, $char);\n\
    \        if ($count != 3) return false;\n\n        // check if char is not repeated\n\
    \        $count_of_all_chars = substr_count($s, 'a');\n        if ($count_of_all_chars\
    \ == 3) return true;\n    }\n\n    return false;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThe last test should be `if ($count_of_all_chars == 3)` not `if ($count_of_all_chars\
    \ < 3)`\n<|/ c |>\n<| c |>\nYes, sorry, I wrote it wrong because I wanted to check\
    \ both possibilities. I edited my answer and it should be fine now.\n<|/ c |>\n\
    <| a dscore=1 tags=php,algorithm |>\n<code>\n$s = \"adbd\";\n$slength = strlen($s);\n\
    $chars = str_split($s);\n$result = true;\n$chars_count = count($chars);\n\nfor\
    \ ($i=0; $i<$slength-1; $i++) {\n    if ($chars[$i] == 'a') {\n        $chars[$i]\
    \ = $chars[$i+1];\n        $chars[$i+1] = '';\n    } else if ($chars[$i] == 'd')\
    \ {\n        $chars[$i] = $chars[$i-1];\n        $chars[$i-1] = '';\n    } else\
    \ {\n        $result = false;\n        break;\n    }\n}\n\nif ($chars_count ===\
    \ 3) {\n    $result = true;\n}\n\nreturn $result;\n</code>\n<|/ a |>\n<| a tags=php,algorithm\
    \ dscore=1 |>\nIf you want something more \"fun\" than brute force, you could\
    \ consider using a DFA for the alphabet. Here is a quick implementation in PHP:\n\
    <code>\n<?php", "  $len = strlen($s);\n  if ($len < 3)\n    return FALSE;\n  $c1\
    \ = $c2 = $c3 = '';\n  for ($i = 0; $i < $len; $i++) {\n    $c1 .= $s[$i];\n \
    \   $c2 .= $s[$i];\n    $c3 .= $s[$i];\n  }\n  if ($c1 != $c2 && $c1 != $c3)\n\
    \    return FALSE;\n  if ($c2 != $c3 && $c2 != $c1)\n    return FALSE;\n  return\
    \ TRUE;\n}\n\necho \"<pre>\";\n$str1 = \"aa\";\n$str2 = \"bb\";\n$str3 = \"aa\"\
    ;\n\nif (is_happy($str1) && is_happy($str2) && is_happy($str3))\n  echo \"HAPPY!\"\
    ;\nelse\n  echo \"SAD!\";", "    $len = strlen($s);\n    if ($len < 3) return\
    \ false;\n    $str = '';\n    for ($i = 0; $i < $len; $i++) {\n        $str .=\
    \ $s[$i];\n    }\n    $str = str_split($str);\n    sort($str);\n    $flag = true;\n\
    \    for ($i = 0; $i < count($str); $i++) {\n        if ($str[$i] !== $str[$i\
    \ + 1] || $str[$i] !== $str[$i + 2]) {\n            $flag = false;\n         \
    \   break;\n        }\n    }\n    return $flag;\n}\n</code>\n<|/ a dscore=0 tags=php\
    \ |>\n<| a tags=php |>\nYou can use regex\n<code>\npreg_match(\"/(^.{3}|.{3}-.{3}$)/s\"\
    , $string)\n</code>\n<|/ a dscore=0 |>\n<| a tags=php dscore=0 |>\nYou could try\
    \ this:\n<code>", "    if (strlen($s) < 3) {\n        return false;\n    }\n \
    \   $result = true;\n    $strlen = strlen($s);\n    for ($i = 0; $i < $strlen;\
    \ $i++) {\n        if ($s[$i] != $s[$i + 1] || $s[$i] != $s[$i + 2] || $s[$i]\
    \ != $s[$i + 3] ||\n            $s[$i] != $s[$i - 2] || $s[$i] != $s[$i - 1])\
    \ {\n            $result = false;\n            break;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThe OP said the string is\
    \ only three characters. Your function works well for three characters. Try it\
    \ with `is_happy('aaa')`.\n<|/ c |>\n<| c |>\nYeah i missed that. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\n`aaa` will return `true` by my function :)\n<|/\
    \ c |>\n<| c |>\nI believe that my solution will also work for any number of characters.\
    \ I just used an example with a string length of 3\n<|/ c |>\n<| c |>\nNo, that\
    \ function will return `true` for any string of `aaa`.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe answer by Glavi\u0107 is good but has one flaw that is inconsistent\
    \ with the OP's requirements.\nIt fails on:\n<code>\n$string = 'aaab';\n</code>\n\
    which is valid for their requirements, but is not valid for the OP's.\nMy solution\
    \ would be:\n<code>\n$string = 'aaab';\n$length = 3;\n\n$isHappy = (strlen($string)\
    \ >= $length) && (!(str_repeat($string, $length)));\n\nif ($isHappy) {\n    echo\
    \ \"String is happy :)\";\n} else {\n    echo \"String is not happy :(\";\n}\n\
    </code>\n<|/ a tags=php |>\n<| c |>\nThis returns `String is happy :)` for `$string\
    \ = 'aaab';`\n<|/ c |>\n<| c |>\nGood catch, I fixed it. Thanks.\n<|/ c |>\n<|\
    \ c |>\nI believe your solution will also work for any number of characters. I\
    \ just used an example with a string length of 3\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. I'll edit the answer to reflect that as well.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThis solution works ", "    $strlen = strlen($s);\n    if ($strlen < 3)\
    \ \n        return false;\n\n    for ($i = 0; $i < $strlen; $i++) {\n        $letters[$i]\
    \ = $s[$i];\n        $letters_count = array_count_values($letters);\n        foreach\
    \ ($letters_count as $k => $v) {\n            if ($v > 1)\n                return\
    \ false;\n        }\n    }\n\n    return true;\n}\n", "    if (strlen($s) < 3)\
    \ return false;\n    foreach (str_split($s) as $letter) {\n        if (count(str_split($letter))\
    \ > 3) return false;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,loops,validation,laravel |>\n<code>\n<?php\n$string = \"Hello!\"\
    ;\nfor ($i = 0; $i < strlen($string); $i++){\n    $count = substr_count($string,\
    \ $string[$i]);\n    echo $count .\"<br />\";\n}", "    \n    // Your code here\n\
    \    \n}\n", "    $count = 0;\n    for($i = 0; $i < strlen($s); $i++) {\n    \
    \    if($s[$i] == $s[$i+1] && $s[$i] == $s[$i+2] && $s[$i] != $s[$i+3]) {\n  \
    \          $count++;\n        }\n    }\n    if($count>=3 && $count%3==0) {\n \
    \       return true;\n    }\n    return false;\n}\n", "    return (count($s) >=\
    \ 3 && checkDistinct($s));\n}\n", "  // Write your code here\n  $array = str_split($s);\n\
    \  foreach ($array as $key => $value) {\n    if ($value == $value && $value ==\
    \ $value && $value == $value) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nis_happy(\"a\") = true;\nis_happy(\"ab\") = false;\nis_happy(\"aba\") = false;\n\
    is_happy(\"abcd\") = true;\nis_happy(\"abbcd\") = false;\nis_happy(\"abccd\")\
    \ = false;\nis_happy(\"aaabbbcc\") = true;\nis_happy(\"aaabbbccc\") = true;\n\
    is_happy(\"adbcd\") = true;\nis_happy(\"xyy\") = false;\nis_happy(\"bbab\") =\
    \ true;\nis_happy(\"aaaac\") = true;\nis_happy(\"xabyc\") = true;\nis_happy(\"\
    abxcd\") = false;\nis_happy(\"abbcc\") = false;\nis_happy(\"abbbcc\") = false;\n\
    is_happy(\"abbbccc\") = false;\nis_happy(\"abbbccca\") = true;\nis_happy(\"abbbcccbb\"\
    ) = true;\nis_happy(\"abbbcccbbb\") = true;\nis_happy(\"abbbcccbbba\") = true;\n\
    is_happy(\"abbbcccbbbba\") = true;\nis_happy(\"abbbcccbbbbac\") = true;\nis_happy(\"\
    abbbcccbbbbacc\") = true;\nis_happy(\"abbbcccbbbbaccc\") = true;\nis_happy(\"\
    abbbcccbbbbaccca\") = true;\nis_happy(\"abbbcccbbbbacccbb\") = true;\nis_happy(\"\
    abbbcccbbbbacccbbb\") = true;\nis_happy(\"abbbcccbbbbacccbbba\") = true;\nis_happy(\"\
    abbbcccbbbbacccbbbba\") = true;\nis_happy(\"abbbcccbbbbacccbbbbac\") = true;\n\
    is_happy(\"abbbcccbbbbacccbbbbacc\") = true;\nis_happy(\"abbbcccbbbbacccbbbbaccc\"\
    ) = true;\nis_happy(\"abbbcccbbbbacccbbbbaccca\") = true;\nis_happy(\"abbbcccbbbbacccbbbbacccbb\"\
    ) = true;\nis_happy(\"abbbcccbbbbacccbbbbacccbbb\") = true;\nis_happy(\"abbbcccbbbbacccbbbbacccbbba\"\
    )", "    // Your code here!\n}", "    if (strlen($s)<3){\n        return false;\n\
    \    }\n    $map=array_flip(str_split($s));\n    $map=array_filter($map,function($v){return\
    \ !empty($v);});\n    return !empty($map);\n}\n", "    $str = explode(\" \", $s);\n\
    \    $i = 0;\n    foreach($str as $letter){\n        $i++;\n    }\n    if($i<3){\n\
    \        return false;\n    }\n    foreach($str as $letter){\n        if($letter!=$str[$i+1]\
    \ && $letter!=$str[$i-1]){\n            return false;\n        }\n        $i++;\n\
    \    }\n    return true;\n}", "    if (strlen($s) < 3) \n        return false;\n\
    \n    for ($i = 1; $i < strlen($s); $i++) {\n        if ($s[$i] == $s[$i - 1]\
    \ || $s[$i] == $s[$i - 2])\n            return false;\n    }\n    return true;\n\
    }\n\nprint_r(is_happy(\"abcd\"));", "    return !(strlen($s) <= 3\n          \
    \  || count(array_count_values(str_split($s))) <= 3\n        );\n}\n\n$input =\
    \ \"aaabbccc\";\n$expectedOutput = false;\n$result = is_happy($input);\n\necho\
    \ \"result: \" . $result . \"\\n\";\necho \"result: \" . ($result === $expectedOutput)\
    \ . \"\\n\";\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nAnother solution,\
    \ using regex:\n<code>", "    $string = implode(',', $s);\n\n    $array1 = array_count_values(str_split($string));\n\
    \    $array2 = array_count_values(str_split($string));\n    $array3 = array_count_values(str_split($string));\n\
    \n    $array4 = array_merge(array($array1, $array2, $array3), array_keys($array1,\
    \ $array2, $array3));\n\n    return count($array4) >= 3 && $array4['aaa'] > 0\
    \ && $array4['aaa'] == $array4['aaa'];\n}\n\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for your answer. But I tested the code and it seems the code is not working\n\
    <|/ c |>\n<| c |>\nAwesome! I appreciate your help\n<|/ c |>\n<| c |>\nI tested\
    \ your code. Its not working. Can you tell me what is the logic behind this code?\n\
    <|/ c |>\n<| c |>\nThe code will check for every 3 letters, if there are 3 letters\
    \ with the same count then it will count the number of same letters. If the count\
    \ is greater than 1 then the code will return false, otherwise return true. Now\
    \ that you have your logic, you can implement it in your code.\n<|/ c |>\n<| c\
    \ |>\nI am not clear about the logic. Why we are using $array1?\n<|/ c |>\n<|\
    \ a |>\nThis is an algorithm that I came up with. I am sharing here just in case\
    \ if anyone else would find it useful.\n<code>\n<?php\n", "  $len = strlen($s);\n\
    \  if ($len < 3 || $len % 3 != 0) {\n    return false;\n  }\n  $map = [];\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    if (!isset($map[$s[$i]]))\n      $map[$s[$i]]\
    \ = 0;\n    $map[$s[$i]]++;\n  }\n  for ($i = $len; $i > 0; $i -= 3) {\n    if\
    \ ($map[$s[$i - 3]] == $map[$s[$i - 2]] && $map[$s[$i - 1]] == $map[$s[$i]])\n\
    \      return false;\n  }\n  return true;\n}\n</code>\n<|/ a |>\n<| a |>\nO(n)\
    \ time and O(1) space - only prints the string\n<code>\n$arr = \"abcdabcaba\"\
    ;\n\n$check = 0;\nfor($i = 0; $i < strlen($arr); $i++) {\n    $check += (strlen($arr)\
    \ - $i - 1)%3 == 0;\n    if($check)\n        echo substr($arr, $i, 1);\n}\n</code>\n\
    <|/ a dscore=1 tags=arrays,php,string |>\n<| c |>\nYou don't need a loop to print\
    \ every character - just use [`str_split`](http://php.net/manual/en/function.str-split.php).\n\
    <|/ c |>\n<| c |>\nYes, but that takes O(n) space and O(n) time, which can be\
    \ avoided by checking if the character is not already in the array.\n<|/ c |>\n\
    <| c |>\n: You also don't need to keep track of the last char - you can use the\
    \ last char to test the next one against it.\n<|/ c |>\n<| a tags=arrays,php,string\
    \ |>\nThis solution is O(n) time and O(n) space. \n<code>\n$arr = array(\"abcde\"\
    , \"abccd\", \"abcde\", \"abcccde\");\n$count = 0;\n$last = array_pop($arr);\n\
    $count = strlen($last);\n$count = 0;\n$last = '';\nforeach ($arr as $str) {\n\
    \    if (strlen($str) > 0) {\n        $count++;\n        if ($count > 3) {\n \
    \           if (strlen($last) == $count) {\n                $last = $last.substr($str,\
    \ 0, 1);\n            } else {\n                echo $last;\n                $last\
    \ = '';\n            }\n            $count = 1;\n        }\n    }\n}\nif ($last)\n\
    \    echo $last;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nthis doesn't seem to work\
    \ if you have a string of length 5", "    $count = [];\n    foreach (str_split($s)\
    \ as $letter) {\n        if (!isset($count[$letter])) $count[$letter] = 0;\n \
    \       if ($count[$letter] === 3) $count[$letter]++;\n        else $count[$letter]\
    \ = 1;\n    }\n    \n    return count($count) >= 3 && count(array_count_values($count))\
    \ === 3;\n}\n\nis_happy(\"aaaa\"); //False\nis_happy(\"aaaaaa\"); //False\nis_happy(\"\
    abcd\"); //True\nis_happy(\"aaaaaa\"); //False\nis_happy(\"aba\"); //True\nis_happy(\"\
    abcd\"); //True\nis_happy(\"abaa\"); //False\nis_happy(\"abacaba\"); //True\n\
    is_happy(\"acd\"); //True\nis_happy(\"aadbcd\"); //True\nis_happy(\"aabbccd\"\
    ); //True\nis_happy(\"abbcccd\"); //True\nis_happy(\"aabcddc\"); //True\nis_happy(\"\
    abcde\"); //True\nis_happy(\"bcde\"); //True\nis_happy(\"adbcd\"); //False\nis_happy(\"\
    xyy\"); //False\nis_happy(\"xyyx\"); //True\nis_happy(\"abxyyx\"); //False\nis_happy(\"\
    abxyyxy\"); //True\nis_happy(\"abxyyxb\"); //False\nis_happy(\"abxyyxba\"); //True\n\
    is_happy(\"abxyyxab\"); //False\nis_happy(\"abxyyxabc\"); //True\nis_happy(\"\
    abxyyxabcd\"); //True\nis_happy(\"abxyyxabcde\"); //True\nis_happy(\"abxyyxabcdxy\"\
    ); //True\nis_happy(\"abxyyxabcdey\"); //True\nis_happy(\"abxyyxabcdeyy\"); //True\n\
    is_happy(\"abxyyxabcdeyyy\"); //True\nis_happy(\"abxyyxabcdeyyx\"); //True\nis_happy(\"\
    abxyyxabcdeyyxa\"); //True\nis_happy(\"abxyyxabcdeyyxab\"); //True\nis_happy(\"\
    abxyyxabcdeyyxabd\"); //True\nis_happy(\"abxyyxabcdeyyxabcd\"); //True\nis_happy(\"\
    abxyyxabcdeyyxabdcd\"); //True\nis_happy(\"abxyyxabcdeyyxabcdc\"); //True\nis_",
  "    if (strlen($s) < 3) return false;\n\n    $hash = [];\n    $is_happy = true;\n\
    \    $len = strlen($s);\n    for ($i = 0; $i < $len; $i += 3) {\n        $key\
    \ = substr($s, $i, 3);\n        if (!isset($hash[$key])) {\n            $is_happy\
    \ = false;\n            break;\n        }\n        $hash[$key]++;\n    }\n\n \
    \   return $is_happy;\n}\n", "    $strlen= strlen($s);\n    if ($strlen < 3) \n\
    \        return false;\n    if ($strlen == 3) {\n        if ($s[0] === $s[1] &&\
    \ $s[1] === $s[2])\n            return true;\n        if ($s[0] === $s[2] && $s[1]\
    \ === $s[2])\n            return true;\n        if ($s[2] === $s[0] && $s[1] ===\
    \ $s[2])\n            return true;\n    }\n    for ($i= 0; $i<$strlen; $i++){\n\
    \        if ($s[i] != $s[$i+1]) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n", "    $length = strlen($s);\n    if ($length < 3)\n \
    \       return false;\n    $count = count(str_split($s));\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if\
    \ ($s[$i] == $s[$j])\n                continue;\n            if ($i == 0)\n  \
    \              return false;\n            if ($i == $length - 1)\n           \
    \     return false;\n            if (in_array($s[$i], $s[$i - 1]))\n         \
    \       return false;\n            if (in_array($s[$i], $s[$i + 1]))\n       \
    \         return false;\n            if (in_array($s[$j], $s[$i - 1]))\n     \
    \           return false;\n            if (in_array($s[$j], $s[$i + 1]))\n   \
    \             return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like that. The code checks for `aaaa` being `not happy` but\
    \ that is a great point that you can do that part outside of the `is_happy()`\
    \ function.\n<|/ c |>\n<| c |>\n`is_happy('aabc')` is true\n<|/ c |>\n<| c |>\n\
    I have updated the code, can you please try it again and let me know if it works.\n\
    <|/ c |>\n<| c |>\nIt does work (though I am not going to accept it as an answer\
    \ since it isn't as efficient as it could be), but it doesn't answer the question\
    \ directly. I would have just commented on 's answer. I would have just upvoted\
    \ his answer too.\n<|/ c |>\n<| a |>\nUse this code, it's working properly.\n\
    <code>\n<?php", "    if (strlen($s) < 3) return 0;\n    $s = strtolower($s);\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        $hash[$i] = $s[$i] . $s[$i\
    \ + 1] . $s[$i + 2];\n    }\n    sort($hash);\n    return (count($hash) % 3 !=\
    \ 0);\n}\n\n$input = str_split('adabb');\n$result = is_happy($input);\nvar_dump($input,\
    \ $result);\n</code>\n<|/ a tags=php,function,string,boolean |>\n<| c |>\nNice\
    \ one!  Although, I would have thought that `$s = strtolower($s);` should be moved\
    \ outside the loop (but inside the function).  This will cut out a lot of extra\
    \ function calls when you get to the end of the string\n<|/ c |>\n<| c |>\nThanks,,\
    \ it's better to move `strtolower($s)` outside the function.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer, but this doesn't actually answer the question. I know\
    \ how to solve this with loops (i.e. to see if a string is happy), but I specifically\
    \ need help with a function that returns true or false for a given string (as\
    \ in the example). Do you know how to do this?\n<|/ c |>\n<| c |>\n, I update\
    \ my answer with `is_happy()` function\n<|/ c |>\n<| a tags=php,function,string,boolean\
    \ dscore=0 |>\n<code>", "   return (strlen($s) >= 3 && check3Consecutive($s));\n\
    }", "    $str = array_slice(str_split($s), 0, -1);\n    sort($str);\n    return\
    \ $str == array_unique($str);\n}\n</code>\nThe first line is to convert the string\
    \ into a list of characters. It is not mandatory that you use the function str_split(),\
    \ but it will allow you to manipulate it easily. The second line removes extra\
    \ spaces, and the third line checks if the sorted array is the same as its inverse,\
    \ that is, the array contains no duplicates.\n<|/ a dscore=3 |>\n<| c |>\nVery\
    \ elegant answer, but doesn't work for me (PHP 5.5.22): is_happy(\"Hello\") =>\
    \ TRUE, but it should be FALSE.\n<|/ c |>\n<| c |>\nThis works fine but it is\
    \ slow for large datasets. You can find this out in phpbench, run your function\
    \ 10^7 times and you will see how long it takes. I personally wouldn't use this\
    \ solution and would use something similar to Josh's answer, where you make another\
    \ array and check if all the characters are the same. Though this probably has\
    \ to do with the fact that array_unique has to loop through all the data it just\
    \ made and that loop is O(n) so it's quite expensive.\n<|/ c |>\n<| c |>\n`array_unique()`\
    \ loops through the array and stores all the unique items in a separate array,\
    \ then it checks if the first array contains all the items of the second array.\
    \ `array_diff()` only loops through the first array, so it's more efficient in\
    \ this case.\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. `is_happy(\"\
    a\") => TRUE` while it should be FALSE.\n<|/ c |>\n<| c |>\nYou know that the\
    \ function does not check for duplicates. That should be added manually in the\
    \ function.\n<|/ c |>\n<| a tags=string,php |>\n<code>\n<?php\n$string = \"Hello\"\
    ;\n$array = str_split($string);\n$unique = array_unique($array);\n$length = 3;\n\
    if(count($unique) >= $length){\n    if(array_intersect($array,$unique))\n    \
    \    echo 'true';\n    else\n        echo 'false';\n}", "  foreach ($s as $letter)\
    \ {\n    if ($letter != $letter) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n</code>\nYou also want to know if your string is happy or not, which\
    \ is best accomplished using if or else, not by setting a variable that you can\
    \ then check after the function has completed.\n<code>\n<?php", "    foreach (str_split($s)\
    \ as $char) {\n        $count[$char]++;\n    }\n    foreach ($count as $char =>\
    \ $count) {\n        if ($count < 3 || $count % 3 != 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\n`abacde` returns true. `abacde` should be false\n<|/ c |>\n<| c |>\n\
    Yes, it's fixed now (although I still don't understand why it is true instead\
    \ of false)\n<|/ c |>\n<| c |>\nNow `abacde` returns false, because it has one\
    \ character repeated twice in its string\n<|/ c |>\n<| c |>\nThis solution is\
    \ O(n^2) which is very slow for long strings\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    $s = str_split($s);\n    $length = count($s);\n    $count = [];\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if (!isset($count[$i])) {\n \
    \           $count[$i] = 1;\n        }\n        $count[$i] += 1;\n    }\n    return\
    \ ($length >= 3 && array_sum($count) >= $length);\n}\n\n$a = str_repeat('a', 4);\n\
    $b = str_repeat('b', 4);\n$c = str_repeat('c', 4);\n$d = str_repeat('d', 4);\n\
    \nvar_dump(is_happy($a)); // false\nvar_dump(is_happy($b)); // false\nvar_dump(is_happy($c));\
    \ // true\nvar_dump(is_happy($d)); // false\n</code>\n<|/ a dscore=1 tags=php,string\
    \ |>\n<| a |>\n<code>\n<?php\n    $str = \"The string is\";\n    $str1 = \"The\
    \ string is\";\n    $str2 = \"The string is\";\n    $str3 = \"The string is\"\
    ;\n    $str4 = \"The string is\";\n    $str5 = \"The string is\";\n    $str6 =\
    \ \"The string is\";\n    $str7 = \"The string is\";\n\n    $len = strlen($str);\n\
    \    if($len == 7)\n    {\n        if(preg_match(\"/\".$str1.\"/i\",$str))\n \
    \       {\n            echo \"match\";\n        }\n        if(preg_match(\"/\"\
    .$str2.\"/i\",$str))\n        {\n            echo \"match\";\n        }\n    \
    \    if(preg_match(\"/\".$str3.\"/i\",$str))\n        {\n            echo \"match\"\
    ;\n        }\n        if(preg_match(\"/\".$str4.\"/i\",$str))\n        {\n   \
    \         echo \"match\";\n        }\n        if(preg_match(\"/\".$str5.\"/i\"\
    ,$str))\n        {\n            echo \"match\";\n        }\n        if(preg_match(\"\
    /\".$str6.\"/i\",$str))\n        {\n            echo \"match\";\n        }\n \
    \       if(preg_match(\"/\".$str7.\"/i\",$str))\n        {\n            echo \"\
    match\";\n        }\n    }\n    elseif($len == 6)\n    {\n        if(preg_match(\"\
    /\".$str1.\"/i\",$str))\n        {\n            echo \"match\";\n        }\n \
    \       if(preg_match(\"/\".$str2.\"/i\",$str))\n        {\n            echo \"\
    match\";\n        }\n        if(preg_match(\"/\".$str3.\"/i\",$str))\n       \
    \ {\n            echo \"match\";\n        }\n        if(pre", "    if (empty($s))\
    \ {\n        return true;\n    }\n    $count = count(str_split($s));\n    if ($count\
    \ < 3) {\n        return false;\n    }\n    $lastLetter = end($s);\n    for ($i\
    \ = 2; $i < $count; $i++) {\n        $currentLetter = substr($s, $i - 1, 1);\n\
    \        if ($currentLetter !== $lastLetter) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$tests = [\n    'ab',\n    'aba',\n  \
    \  'abba',\n    'abaa',\n    'aa',\n    'aaa',\n    'aaaa',\n    'aaaaa',\n  \
    \  'a',\n    'aa',\n    'a',\n];\n\nforeach ($tests as $test) {\n    var_dump(is_happy($test));\n\
    }\n</code>\nOutput\n<code>\nbool(false)\nbool(false)\nbool(true)\nbool(false)\n\
    bool(true)\nbool(true)\nbool(false)\nbool(false)\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| c |>\nWow, thanks for the great answer. Could you please explain what\
    \ $lastLetter = end($s); does?\n<|/ c |>\n<| c |>\n[`end()`](https://www.php.net/manual/en/function.end.php)\
    \ returns the last element of the array. So if you have a string like `'abc'`\
    \ and you call `$last = end('abc');`, then `$last = 'c'`. So `$lastLetter` then\
    \ holds `c` when `is_happy('abba')` is called.\n<|/ c |>\n<| a dscore=1 |>\nThe\
    \ solution below is based on the logic of finding longest repeating substring\
    \ in string. It will return array containing the repeating substring, start and\
    \ end index of each one. \n<code>", "    return strlen($s)>=3 and is_happy_recursive($s);\n\
    }", "    return (strlen($s) >= 3) && (array_sum(array_slice(str_split($s), 0,\
    \ 3, true)) === 0);\n}\n</code>\nThe above function will check if a string is\
    \ happy or not. The only problem with this implementation is that it can only\
    \ check whether a string has 3 or more letters. It cannot check whether every\
    \ 3 letters are different.\nWe can improve this by making the above function take\
    \ an array of arrays that represents the groups of letters that make up the string.\
    \ This way, it can check whether every 3 letters make a group of letters that\
    \ are different.\n<code>\n<?php\n", "    $string = array_count_values(str_split($s));\n\
    \    \n    return array_key_exists(3,$string) && $string[3] >= 2;\n}\necho is_happy(\"\
    aaabb\");\necho is_happy(\"aabc\");\necho is_happy(\"abcd\");", "    $result =\
    \ true;\n    foreach (str_split($s) as $letter) {\n        $result &= (count(str_split($s))\
    \ == 3);\n        $result &= !in_array($letter, $s);\n    }\n    return $result;\n\
    }\n", "    $count = 0;\n    $arr = [];\n    foreach($s as $letter) {\n       \
    \ if (in_array($letter, $arr)) {\n            $count++;\n        } else {\n  \
    \          $arr[] = $letter;\n        }\n        if ($count == 3) {\n        \
    \    $count = 0;\n        }\n    }\n    return ($count == strlen($s));\n}\n</code>\n\
    <|/ a tags=php dscore=0 |>\n<| c |>\nPlease explain your code a little bit.\n\
    <|/ c |>\n<| c |>\nThe question was to check whether a word is happy or not. Why\
    \ would you post a solution that checks how many letters there are in a word?\
    \ The question was to find out whether every 3 letters are distinct. The answer\
    \ is simply to check the word's length and if it is not 3 then it is not a valid\
    \ word.\n<|/ c |>\n<| a |>\nThis works for me\n<code>\n<?php\n", "    for($i=0;\
    \ $i<strlen($s); $i++){\n        $j = $i + 1;\n        while($j < strlen($s) &&\
    \ $s[$i] == $s[$j]){\n            $j++;\n        }\n        if($j == strlen($s)){\n\
    \            return true;\n        }\n    }\n    return false;\n}", "    $charCount\
    \ = str_split($s);\n    $charCount = array_count_values($charCount);\n    \n \
    \   if(count($charCount) >= 3 && count(array_unique($charCount)) >= 3){\n    \
    \    return true;\n    }\n    return false;\n}", "    $length = strlen($s);\n\
    \    if ($length < 3 || $length != ($length / 3)) {\n        return false;\n \
    \   }\n    $result = [];\n    for ($i = 0; $i < $length; $i += 3) {\n        if\
    \ (in_array($s[$i], $result) && in_array($s[$i + 1], $result) && in_array($s[$i\
    \ + 2], $result)) {\n            return false;\n        } else {\n           \
    \ $result[] = $s[$i];\n        }\n    }\n    return true;\n}\n", "    \n    \n\
    }\n</cell>\n<text>\nReturn to the slides\n\n\n</text>\n<text>\nWrite a function\
    \ that takes a number and returns its factorial. Make sure to handle negative\
    \ numbers\n\n\n</text>\n<cell>\n<?php", "    if (strlen($s) < 3) return false;\n\
    \    $hashTable = array();\n    for ($i = 0; $i < strlen($s); $i++) {\n      \
    \  if ($hashTable[$s[$i]] === true) {\n            return true;\n        }\n \
    \       $hashTable[$s[$i]] = true;\n    }\n    return false;\n}\n</code>\n<|/\
    \ a tags=php |>\n<| c |>\nA shorter version with one loop: `return $s == 'a' ||\
    \ $s == 'b' || $s == 'c' || $s == 'd' || $s == 'e' || $s == 'f' || $s == 'g' ||\
    \ $s == 'h' || $s == 'i' || $s == 'j' || $s == 'k' || $s == 'l' || $s == 'm' ||\
    \ $s == 'n' || $s == 'o' || $s == 'p' || $s == 'q' || $s == 'r' || $s == 's' ||\
    \ $s == 't' || $s == 'u' || $s == 'v' || $s == 'w' || $s == 'x' || $s == 'y' ||\
    \ $s == 'z'`\n<|/ c |>\n<| c |>\nThe answer by is more correct since it takes\
    \ care of the string length requirement\n<|/ c |>\n<| c |>\nYes, you are right,\
    \ the answer by is more correct. I just wanted to point out a shorter version.\n\
    <|/ c |>\n<| c |>\nThank you guys for all the help and answers and also for explaining\
    \ the code so that I could understand it better so I appreciate all the help and\
    \ answers. I appreciate all the feedback and responses. \n\nThe code example is\
    \ very helpful and I appreciate all the help and answers. Thank you!\n<|/ c |>\n\
    <| c |>\nThis solution does not take care of string length requirement\n<|/ c\
    \ |>\n<| a |>\nFirst of all lets clarify some terms:\nA string is happy if its\
    \ length is at least 3 and every 3 consecutive letters are distinct\n<code>\n\
    \ function is_happy($s) {\n    // check if string is longer than 3 characters\n\
    \    if (strlen($s) < 3) return false;\n\n    // count number of consecutive unique\
    \ characters\n    $unique_chars = preg_match_all('~(.)\\1~', $s, $matches);\n\
    \    $unique_chars = $matches[0] ? $unique_chars : 0;\n\n    // check if length\
    \ is 3 or more\n    return strlen($s) >= 3 && $unique_chars > 3;\n}\n\necho is_happy('abc');\
    \ // true\necho is_happy('aaa'); // true\necho is_happy('abcbb'); // true\necho\
    \ is_happy('abca'); // false\necho is_happy('aaab'); // false\necho is_happy('aaaa');\
    \ // false\n", "    if (strlen($s) >= 3) {\n        $arr = str_split($s);\n  \
    \      $arr2 = array_slice($arr, 0, -1);\n        $arr3 = array_slice($arr, 0,\
    \ -2);\n\n        if (array_unique($arr3) == $arr2) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n", "    // Write your code here\n    $len = strlen($s);\n\
    \    if ($len < 3) {\n        return false;\n    }\n    if ($len == 3) {\n   \
    \     $i = 0;\n        for ($i; $i <= $len; $i++) {\n            if ($s[i] !=\
    \ $s[$i + 1]) {\n                return false;\n            }\n        }\n   \
    \     return true;\n    }\n    if ($len > 3) {\n        $i = 0;\n        for ($i;\
    \ $i <= $len - 3; $i++) {\n            $char = $s[$i];\n            $j = i + 2;\n\
    \            for ($j; $j <= $len - 2; $j++) {\n                if ($char != $s[$j])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n}\n", "   $happy = preg_match('/^[[:alpha:]]{3,3}$/',\
    \ $s) && preg_match('/^(?!.*\\1)[[:alpha:]]{3,3}$/', $s);\n   return $happy;\n\
    }\n</code>\n<|/ a |>\n<| c |>\n`preg_match('/\\K[a-z]{3,}/', $s)` would suffice...\n\
    <|/ c |>\n<| c |>\n: That's an interesting one indeed!\n<|/ c |>\n<| c |>\nVery\
    \ nice regex pattern indeed. I always forget about \\K. Thanks for the solution.\n\
    <|/ c |>\n<| c |>\n: It works, but it doesn't solve my problem because my string\
    \ is all lowercase and I need to check if a word is happy or not. For example,\
    \ my string is: \"apple\", but your solution will return true. How could I solve\
    \ this problem?\n<|/ c |>\n<| c |>\n: You can simply lowercase `$s` beforehand,\
    \ i.e. `$s = strtolower($s)`\n<|/ c |>\n<| a dscore=1 tags=php |>\n<code>\n<?php\n\
    $s=\"ABCDE\";\n$pattern = '/^([a-zA-Z]{3})*([a-zA-Z]{3})$/';\nif(preg_match($pattern,\
    \ $s)){\n   //Do something\n}\nelse{\n   //Do something\n}", "\t$arr1 = str_split($a);\n\
    \t$arr2 = str_split($s);\n\tfor ($i = 0; $i < count($arr1); $i++) {\n\t\t$found\
    \ = false;\n\t\tfor ($j = 0; $j < count($arr2); $j++) {\n\t\t\tif ($arr1[$i] ==\
    \ $arr2[$j]) {\n\t\t\t\t$found = true;\n\t\t\t}\n\t\t}\n\t\tif (!$found) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "  return is_string($s) &&\
    \ strlen($s) >= 3 && count(array_filter(str_split($s), 'strlen') === 3); // true\n\
    }\n", "    // Your code here\n    return !(strlen($s) < 3) || (count(array_unique($s))\
    \ % 3 == 0);\n}\n", "    // your code here\n    // return \n}\n\nis_happy(\"aaaaa\"\
    );\nis_happy(\"aaaaaa\");\nis_happy(\"a\");\nis_happy(\"bb\");\nis_happy(\"b\"\
    );\nis_happy(\"cb\");\nis_happy(\"abcbc\");\nis_happy(\"aabcbbc\");\nis_happy(\"\
    adb\");\nis_happy(\"abc\");\nis_happy(\"abcabc\");\nis_happy(\"aabc\");\nis_happy(\"\
    abcddcba\");\nis_happy(\"abccca\");\nis_happy(\"abccc\");\n", "    $arry = str_split($s);\n\
    \    if (count($arry) < 3)\n    {\n        return false;\n    }\n\n    $distinct\
    \ = [];\n\n    foreach ($arry as $key=>$val)\n    {\n        if (!in_array($val,\
    \ $distinct))\n        {\n            $distinct[] = $val;\n        }\n    }\n\n\
    \    return count($distinct) >= 3;\n}", "    $check=array_count_values(str_split($s))<3;\n\
    \    return $check;\n}", "    return (strlen($s) > 3 && \n            preg_match('/(.)\\\
    1{3}/', $s) === 1);\n}\n", "    $result = [];\n    foreach (str_split($s) as $char)\
    \ {\n        $result[array_search($char, array_flip($result))] = true;\n    }\n\
    \    return count($result) > 3 && count(array_diff($result, array_fill(0, 3, null)))\
    \ === 0;\n}\n", "  $result = true;\n  foreach (str_split($s) as $k => $v) {\n\
    \    if (!$v) $result = false;\n  }\n  return $result;\n}\n$tests = array(\"a\"\
    , \"aa\", \"ab\", \"abcd\", \"adb\", \"xyy\");\nforeach ($tests as $test) {\n\
    \  if (is_happy($test)) {\n    echo sprintf('%s is happy!', $test);\n  } else\
    \ {\n    echo sprintf('%s is not happy!', $test);\n  }\n  echo \"\\n\";\n}", " \
    \   return (strlen($s) >= 3 && count(array_diff(str_split($s), array_fill(0, 3,\
    \ ''))) == 0);\n}", "  // Your code here\n}\n</code>\nThe is_happy function can\
    \ easily be modified to return the boolean that is the result of the test:\n<code>",
  "    if (strlen($s) < 3) \n       return false;\n    \n    sort($s);\n    for ($i=0;$i<strlen($s);$i++){\n\
    \        if ($s[$i] == $s[$i+1] && $s[$i+1] == $s[$i+2]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if(strlen($s) < 3) {\n\
    \        return false;\n    }\n    $result=true;\n    $i=0;\n    while($i<strlen($s))\
    \ {\n        if($s[$i]==$s[$i+1] && $s[$i+1]==$s[$i+2] && $s[$i]!=$s[$i+2]){\n\
    \            return false;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nBut why do we need 3 nested `for` loops\
    \ when we can check it with `==` operator?\n<|/ c |>\n<| c |>\nNot sure why you\
    \ need 3 loops... but it is one way of doing it.\n<|/ c |>\n<| c |>\nYes we can\
    \ use `==` operator, but as I mentioned in question, we have to check with `is_happy`\
    \ function. Also, that function will be used in a lot of places, so we are not\
    \ allowed to change it.\n<|/ c |>\n<| a |>\nYou can achieve this without loops\
    \ using some string methods. For example, the following will check each letter\
    \ in the string and compare it against all 3 other letters in the string. Then,\
    \ we can determine if every letter is equal.\n<code>", "  if(strlen($s) < 3){\n\
    \      return false;\n  }\n  for($i=0;$i<strlen($s);$i++){\n      if($s[$i] ==\
    \ $s[$i+1]){\n          if($s[$i] == $s[$i+2]){\n              if($s[$i] == $s[$i+3]){\n\
    \                  return true;\n              }\n          }\n      }\n  }\n\
    \  return false;\n}", "  $count = 0;\n  foreach (str_split($s) as $letter) {\n\
    \    if ($letter === $letter) {\n      $count++;\n    }\n  }\n\n  return ($count\
    \ >= 3 && $count % 3 === 0);\n}\n</code>\n<|/ a |>\n<| c |>\nAh yes I forgot about\
    \ the requirement being 3 characters long.\n<|/ c |>\n<| c |>\nWhy are you using\
    \ `str_split()`? The OP said it needs to be 3 characters long, so why split the\
    \ string into an array?\n<|/ c |>\n<| c |>\n: I'm just using it because that's\
    \ what the OP was asking. I've edited my answer to not use `str_split()`.\n<|/\
    \ c |>\n<| c |>\nOkay, now you made me realise that `is_happy()` can only accept\
    \ 3 characters as well.\n<|/ c |>\n<| c |>\n: Yeah, I noticed that just before\
    \ I posted my comment. Fixed.\n<|/ c |>\n<| a dscore=0 |>\nOkay, here is a method\
    \ using array_filter() to filter out those letters which occur more than once\
    \ in a row. That is, we iterate over the input array, and return those values\
    \ which occur more than once in a row.\n<code>", "    $string = '';\n    for ($i\
    \ = 0; $i < strlen($s); $i++) $string .= $s[$i];\n\n    $count = 0;\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == $string[$i +\
    \ 1]) {\n            $count++;\n            if ($count == 3) break;\n        }\
    \ else if ($count > 0) {\n            $count = 0;\n        }\n    }\n    if ($count\
    \ > 3) return false;\n    for ($i = 0; $i < strlen($string); $i++) {\n       \
    \ if ($string[$i] != $string[$i + 1]) return false;\n    }\n    return true;\n\
    }\n", "    $arr1 = str_split($s);\n    $flag = true;\n    $len = count($arr1);\n\
    \    $i = 0;\n    foreach ($arr1 as $key => $val) {\n        if ($i != $len -\
    \ 1) {\n            $flag = false;\n        }\n        if ($val != $arr1[$key\
    \ + 1]) {\n            $flag = false;\n        }\n        $i++;\n    }\n\n   \
    \ if ($flag == true) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}", "    $happy = false;\n    $len = strlen($s);\n    if ($len > 3) {\n\
    \        for($i = 0; $i < $len; $i++) {\n            if ($s[$i] != $s[$i - 1])\
    \ {\n                if ($s[$i] == $s[$i + 1]) {\n                    if ($s[$i]\
    \ == $s[$i + 2]) {\n                        $happy = true;\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return $happy;\n\
    }\n", "    return !empty($s) && strlen($s) >= 3 &&\n        is_distinct($s);\n\
    }\n", "    if (strlen($s) < 3)\n        return true;\n    $res = true;\n    for\
    \ ($i = 0; $i < strlen($s); $i += 3)\n        if ($s[$i] != $s[$i+1] || $s[$i]\
    \ != $s[$i+2])\n            $res = false;\n    return $res;\n}", "  return count($s)\
    \ >= 3 && count(array_count_values(str_split($s))) >= 3;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like the solution using array_count_values() because is shorter, and\
    \ more efficient.\n<|/ c |>\n<| c |>\n`array_count_values` also requires php7.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe easiest way is to just count the distinct letters.\n\
    <code>", "    foreach (str_split($s) as $char)\n    {\n        $count = array_count_values(str_split($char));\n\
    \        if($count > 2){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\n$arr = array('a', 'b', 'c');\n$arr = array('a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', '", "    foreach(str_split($s) as $char) {\n \
    \       if(!in_array($char, $arr)){\n            $arr[] = $char;\n        }\n\
    \    }\n    return count($arr) >= 3 && count(array_unique($arr)) == count($arr);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThat's my initial thought too. However, I keep\
    \ thinking that the OP might want to learn the logic and concepts of how to solve\
    \ this problem for themselves, rather than just copy and pasting code from StackOverflow.\n\
    <|/ c |>\n<| c |>\n: Yeah, I agree. I think that code is not very efficient and\
    \ can be easily solved using other algorithms but it just might be interesting\
    \ just to find out if it can be done using simple PHP code.\n<|/ c |>\n<| c |>\n\
    I like the `array_unique` approach\n<|/ c |>\n<| a tags=string,php,arrays |>\n\
    You can do it with array_diff and array_count_values:\n<code>", "    if(strlen($s)\
    \ < 3 || (strlen($s) == 3)) {\n        return false;\n    }\n    $count = 0;\n\
    \    for($i = 0; $i < strlen($s); $i++) {\n        if($s[$i] == $s[$i + 1] &&\
    \ $s[$i] == $s[$i + 2]) {\n            $count++;\n        } else if($count > 0)\
    \ {\n            return false;\n        }\n    }\n    return ($count == 3);\n\
    }\n</code>\n<|/ a |>\n<| a tags=php |>\nI know this question has already been\
    \ answered, but I have no idea on why this code works. My answer will explain\
    \ what I understood when I read it, but I wouldn't be surprised if someone comes\
    \ up with a better explanation.\nSo the code below will first check if there are\
    \ at least 3 characters in the string. Then, it will check if there are 3 unique\
    \ characters in that string, excluding the middle one, and compare those to a\
    \ character in the string to see if the string contains one of those 3 characters.\n\
    <code>\n<?php", "    return is_string($s) && strlen($s) >= 3 && !array_count_values(str_split($s))[3];\n\
    }\n</code>\n<|/ a tags=php dscore=1 |>\n<| c |>\nThank you very much for this\
    \ solution, I was able to implement it into my script and everything works perfectly.\n\
    <|/ c |>\n<| c |>\nYou are welcome. Good luck with your coding journey :)\n<|/\
    \ c |>\n<| a tags=php |>\nYou can use array_count_values and then check if all\
    \ values are greater than or equal to 3:\n<code>\n$array = array('aaab', 'cc',\
    \ 'dddddddddd', 'aaabb');\n$result = array_count_values($array);\nif (array_sum($result)\
    \ >= 3) {\n    echo 'happy';\n} else {\n    echo 'not happy';\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis does not work, look at the example I gave. `is_happy($array)`\
    \ should return `false`, not `true`.\n<|/ c |>\n<| a dscore=0 tags=php |>\nYou\
    \ can use a loop and check if each character in the string was unique and that\
    \ the length was a multiple of 3:\n<code>", "    // Your code here\n    for ($i=0;\
    \ $i<strlen($s); $i++) {\n        $s1=substr($s,$i,3);\n        for ($j=$i+1;\
    \ $j<strlen($s); $j++) {\n            $s2=substr($s,$j,3);\n            if ($s1!=$s2)\
    \ {\n                $ok=true;\n            }\n        }\n        if ($ok == false)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  return (strlen($s) == 3 && array_sum(str_split($s)) == 0);\n}", "    return\
    \ !(strlen($s) >= 3 || !array_unique(str_split($s)));\n}\n", "    // Your code\
    \ here\n    return strlen($s) < 3 || strspn($s, $s = str_replace($s,\"\",str_replace($s,\"\
    \",str_replace($s,\"\",str_replace($s,\"\",str_replace($s,\"\",str_replace($s,\"\
    \",str_replace($s,\"\",str_replace($s,\"\",str_replace($s,\"\",str_replace($s,\"\
    \",str_replace($s,\"\",str_replace($s,\"\",str_replace($s,\"\",str_replace($s,\"\
    \",$s)))))))))))))) >= 3;\n}\n", "  return (strlen($s) < 3) || (preg_match('/[ab]/',\
    \ $s) && $s[count($s) - 1] !== $s[count($s) - 2]);\n}\n", "  \n  \n}\n$str1 =\
    \ 'abba';\n$str2 = 'abb';\n$str3 = 'abbb';\n$str4 = 'abbba';\n$str5 = 'abbbb';\n\
    $str6 = 'abbbba';\n$str7 = 'ababb';\n$str8 = 'ababba';\n$str9 = 'abbaab';\n\n\
    $str10 = 'ababababb';\n$str11 = 'ababbababb';\n$str12 = 'ababababba';\n\n$str13\
    \ = 'abababababba';\n\n$str14 = 'abbbabba';\n\n$str15 = 'abbbabb';\n\n$str16 =\
    \ 'abbbabbbabbbabbba';\n\n$str17 = 'ababbababbba';\n\n$str18 = 'abbaabbba';\n\n\
    $str19 = 'abbaabbb';\n\n$str20 = 'abbaabbbb';\n\n$str21 = 'abbaabbbba';\n\n$str22\
    \ = 'abbaabbbbb';\n\n$str23 = 'abbaabbbaabb';\n\n$str24 = 'abbaabbbbaabb';\n\n\
    $str25 = 'abbaabbbbaabbbabbba';\n\n$str26 = 'abbaabbbbaabbbaabbba';\n\n$str27\
    \ = 'abbaabbbbaabbbabbbaabb';\n\n$str28 = 'abbaabbbbaabbbabbbaabbbba';\n\n$str29\
    \ = 'abbaabbbbaabbbaabbbabbba';\n\n$str30 = 'abbaabbbbaabbbabbbaabbbbaabb';\n\n\
    $str31 = 'abbaabbbbaabbbaabbbabbbaabbbba';\n\n$str32 = 'abbaabbbbaabbbaabbbabbbaabbbbaabbba';\n\
    \n$str33 = 'abbaabbbbaabbbbaabbbabbbaabbbbaabbbaabbba';\n\n$str34 = 'abbaabbbbaabbbbaabbbabbbaabbbbaabbbaabbbaabbbba';\n\
    \n$str35 = 'abbaabbbbaabbbbaabbbabbbaabbbbaabbbaabbbaabbbbaabbba';\n\n$str36 =\
    \ 'abbaabbbbaabbbbaabbbabbbaab", "    if (strlen($s) < 3 || strlen($s) < 3 ||\
    \ strlen($s) != strlen($s) & strlen($s) & strlen($s)) {\n        return false;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if\
    \ ($s[$i] != $s[$i + 1]) {\n            $count++;\n            if ($count == 3)\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\n$str = \"aaaabc\";\nprint_r(is_happy($str));\n", "  return strlen($s)\
    \ >= 3 && checkConsecutive($s);\n}\n", "    return count($s) >= 3 && count(array_unique($s))\
    \ == 3;\n}\n", "    if (!is_string($s)) return false;\n    return strlen($s) >=\
    \ 3 && is_happy($s);\n}\n</code>\n<|/ a tags=php,arrays,recursion |>\n<| c |>\n\
    You mean `return strlen($s) >= 3 && is_happy($s);` right? The `&&` operator in\
    \ PHP doesn't short-circuit, so `is_happy($s)` will be called regardless of whether\
    \ `strlen($s) >= 3` is true or not.\n<|/ c |>\n<| c |>\nYou are right. I have\
    \ missed this. I will update my answer.\n<|/ c |>\n<| c |>\nIt's a nice solution.\n\
    <|/ c |>\n<| c |>\nThanks. I think this solution is better than the function I\
    \ proposed\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$str = \"aaaaaaa\";\n", "    $chars\
    \ = [];\n    foreach (str_split($s) as $char) {\n        if (in_array($char, $chars))\
    \ {\n            return false;\n        }\n        if ($char === 'a') {\n    \
    \        $chars[] = 'a';\n        } else if ($char === 'b') {\n            $chars[]\
    \ = 'b';\n        } else if ($char === 'c') {\n            $chars[] = 'c';\n \
    \       } else if ($char === 'd') {\n            $chars[] = 'd';\n        }\n\
    \    }\n    return true;\n}\n", "  \n  // Return true if the string is at least\
    \ three characters, and every three consecutive characters\n  // are distinct.\
    \ Otherwise, return false.\n  if (strlen($s) < 3) return false;\n  \n  for ($i\
    \ = 0; $i < strlen($s); $i++) {\n    \n    // If this is the first iteration,\
    \ then the current character is the starting character\n    if ($i == 0) $current\
    \ = $s[$i];\n    \n    // Otherwise, check if the next character is the same as\
    \ the current character\n    else if ($i == strlen($s) - 1) $next = $s[$i + 1];\n\
    \    else $next = $s[$i + 1];\n    \n    // If they are the same, then the current\
    \ character is the last character\n    // Check that the character before is the\
    \ same as the current character\n    if ($current == $next) {\n      if ($s[$i\
    \ - 1] == $current) return false;\n    }\n  }\n  \n  return true;\n}\n</code>\n\
    Test Code:\n<code>\n$tests = ['a', 'aa', 'abcd', 'aabb', 'adb', 'xyy'];\nforeach\
    \ ($tests as $test) {\n  echo \"$test => \", is_happy($test) ? \"True\" : \"False\"\
    , \"\\n\";\n}\n</code>\nOutput:\n<code>\na => False\naa => False\nabcd => True\n\
    aabb => False\nadb => True\nxyy => False\n</code>\n<|/ a |>\n<| a tags=string,php\
    \ |>\n<code>\n$str='abcd';\n$str1=implode($str);\nif(strlen($str1)>=3 && strpos($str1,$str1)==false){\n\
    \    echo $str1;\n    die;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| a dscore=0 |>\ntry this :\n<code>\n$str='abcd';\n\
    $str1=implode($str);\n$str2=substr($str1,0,3);\nif ($str1==$str2) {\n    echo\
    \ $str1;\n}\n</code>\n<|/ a tags=string,php |>\n<| a tags=string,php dscore=0\
    \ |>\n<code>\n$str='", "    return (strlen($s) >= 3 && substr_count($s, 'a') >\
    \ 2 && substr_count($s, 'b') > 2 && substr_count($s, 'c') > 2 &&\n        substr_count($s,\
    \ 'd') > 2 && substr_count($s, 'e') > 2 && substr_count($s, 'f') > 2 && substr_count($s,\
    \ 'g') > 2 &&\n        substr_count($s, 'h') > 2 && substr_count($s, 'i') > 2\
    \ && substr_count($s, 'j') > 2 && substr_count($s, 'k') > 2 &&\n        substr_count($s,\
    \ 'l') > 2 && substr_count($s, 'm') > 2 && substr_count($s, 'n') > 2 && substr_count($s,\
    \ 'o') > 2 &&\n        substr_count($s, 'p') > 2 && substr_count($s, 'q') > 2\
    \ && substr_count($s, 'r') > 2 && substr_count($s, 's') > 2 &&\n        substr_count($s,\
    \ 't') > 2 && substr_count($s, 'u') > 2 && substr_count($s, 'v') > 2 && substr_count($s,\
    \ 'w') > 2 &&\n        substr_count($s, 'x') > 2 && substr_count($s, 'y') > 2\
    \ && substr_count($s, 'z') > 2);\n}\n", "  $a = str_split($s);\n  return count($a)\
    \ >= 3 && count(array_unique($a)) == 3;\n}", "    if (!isset($s) || $s == \"\"\
    ) {\n        return false;\n    }\n\n    $len = strlen($s);\n    if ($len < 3)\
    \ {\n        return false;\n    }\n\n    for ($i = 1; $i <= $len; $i++) {\n  \
    \      for ($j = $i; $j < $len; $j++) {\n            if ($s[$j] == $s[$i]) {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nthanks for your solution. i have a little\
    \ query in your solution. I got that code from one web site while i was searching\
    \ for the solution through google and was unable to understand the code. i wanted\
    \ to know how it actually checks the conditions. i was unable to understand the\
    \ code completely. i want to know what happens when the loop executes the second\
    \ time. and why it returns true when condition is satisfied and false when condition\
    \ is not satisfied.\n<|/ c |>\n<| c |>\nI edited my answer, I hope that clarifies\
    \ some things for you.\n<|/ c |>\n<| c |>\nsorry for the confusion. I was in confusion\
    \ because of this statement. \"A loop is a repetitive code statement that is repeated\
    \ until a specific condition becomes false. For example, a while loop is a repetitive\
    \ code statement that is repeated until some condition is met.\"\n<|/ c |>\n<|\
    \ c |>\nI understand, it's a bit confusing but I'll try to explain it a little\
    \ better. Say that you are checking a string for being \"happy\" so you check\
    \ each letter one by one in a for loop, if you find the same letter more than\
    \ once (so for example \"a\" appears twice in a string \"aa\" you find it only\
    \ once so \"a\" is happy) you return false and break out of the loop. If you find\
    \ any other letter (so for example \"a\" appears twice in a string \"aab\" you\
    \ find it only once so \"a\" is happy) you return true and continue to the rest\
    \ of the loop. So as I said before, in the second execution of the loop the string\
    \ \"a\" isn't the same anymore so the condition isn't met and thus you return\
    \ false. I hope this makes sense.\n<|/ c |>\n<| c |>\nyes it makes sense. thank\
    \ you so much for the help.\n<|/ c |>\n<| a tags=php,arrays,string dscore=1 |>\n\
    In PHP (and a lot of other languages), it's more common to use arrays to check\
    \ strings. Here is a simple solution:\n<code>", "    if (strlen($s) >= 3) {\n\
    \        $res = true;\n        for ($i = 0; $i < strlen($s); $i++) {\n       \
    \     if (!isset($s[$i]) || ($s[$i] != $s[$i + 1])) {\n                $res =\
    \ false;\n            }\n        }\n        return $res;\n    }\n    return false;\n\
    }\n", "    if (strlen($s) < 3) {\n        return false;\n    }\n\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        for ($j = $i + 1; $j < strlen($s); $j++)\
    \ {\n            if ($s[$i] === $s[$j]) {\n                continue;\n       \
    \     }\n\n            $char = $s[$i];\n            foreach ($s as $k => $val)\
    \ {\n                if ($k !== $i) {\n                    if ($val !== $char)\
    \ {\n                        return false;\n                    }\n          \
    \      }\n            }\n        }\n    }\n\n    return true;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThank you so much it worked for me..!! really appreciate your\
    \ efforts.. :)\n<|/ c |>\n<| c |>\nGlad to help. Happy coding.\n<|/ c |>\n<| c\
    \ |>\nThis code works but is horrendously slow. On a list of 100,000 strings,\
    \ it takes about a minute to complete the task. On a list of 10,000 strings it\
    \ takes about a second to complete the task. On a list of 1,000,000 strings it\
    \ takes about half a minute. Using a C extension takes about a minute.\n<|/ c\
    \ |>\n<| a |>\nYou could use this function:\n<code>\n$string = 'This is a string\
    \ with many repeated words. This is a string with many repeated words. This is\
    \ a string with many repeated words. This is a string with many repeated words.\
    \ This is a string with many repeated words. This is a string with many repeated\
    \ words. This is a string with many repeated words.';\n", "    $a = str_split($s);\n\
    \    for($i = 1; $i < count($a); $i++) {\n        for($j = 1; $j < count($a) -\
    \ $i; $j++) {\n            if(in_array($a[$i], $a[$i + $j]) || in_array($a[$j],\
    \ $a[$i + $j])) {\n                unset($a[$i + $j]);\n            }\n      \
    \  }\n    }\n    return count($a) >= 3;\n}", "   return (strlen($s) >= 3) && (!array_unique($s));\n\
    }\n</code>\nYou can find more information about array_unique() here.\n<|/ a |>\n\
    <| c |>\nNice idea! Although you might be a little too clever ;)\n<|/ c |>\n<|\
    \ c |>\nI did a test on both versions and mine takes about 3 times more time to\
    \ check string length and mine takes less than 1 milisecond for that :) And this\
    \ method is very clever since it uses array_unique :)\n<|/ c |>\n<| c |>\nThanks\
    \ for your solutions. I have seen both of them and I prefer this one. Thanks again!\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n", "    return strlen($s) >= 3 && count(array_unique(str_repeat($s,\
    \ 3))) >= 3;\n}\n", "    // Your code here\n    $happy = true;\n    for ($i =\
    \ 0; $i < strlen($s); $i++) {\n        if ($i < (strlen($s)-3)) {\n          \
    \  if ($s[$i] != $s[$i+1]) {\n                $happy = false;\n              \
    \  break;\n            }\n        }\n    }\n    \n    return $happy;\n}", "  \
    \  // your code here\n    if (strlen($s) < 3 ) {\n        return false;\n    }\n\
    \    $first = $first2 = $first3 = $second1 = $second2 = $second3 = $third1 = $third2\
    \ = $third3 = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i]\
    \ == $first)  {\n            $first2 = $first1;\n            $first1 = $first;\n\
    \        }\n        if ($s[$i] == $second1) {\n            $second2 = $second1;\n\
    \            $second1 = $second;\n        }\n        if ($s[$i] == $third1) {\n\
    \            $third2 = $third1;\n            $third1 = $third;\n        }\n  \
    \      if ($s[$i] == $first) {\n            $first2 = $first3;\n            $first3\
    \ = $first;\n        }\n        if ($s[$i] == $second1) {\n            $second2\
    \ = $second3;\n            $second3 = $second;\n        }\n        if ($s[$i]\
    \ == $third1) {\n            $third2 = $third3;\n            $third3 = $third;\n\
    \        }\n    }\n    if (strlen($first2) == strlen($second2) && strlen($first2)\
    \ == strlen($third2) && strlen($second2) == strlen($third2) && strlen($third2)\
    \ == strlen($first) && strlen($third2) == strlen($second)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}", "    $count = 0;\n    foreach\
    \ (str_split($s) as $letter) {\n        if ($letter !== $letter) {\n         \
    \   $count++;\n        }\n    }\n    return $count >= 3;\n}", "    $len = strlen($s);\n\
    \    if ($len < 3) return false;\n    for ($i = 0; $i < $len; $i++) {\n      \
    \  if ($s[$i] <> $s[$i + 1] || $s[$i] <> $s[$i + 2]) return false; // check consecutive\
    \ letters\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| a |>\nThis code works.\
    \ \n<code>\n<?php\n$str = \"hello\";\n\n$checkArr = str_split($str);\n$checkArrCount\
    \ = count($checkArr);\n\n$isHappy = true;\n\nfor ($i = 0; $i < $checkArrCount;\
    \ $i++) {\n\n    $checkArr[$i] = strtolower($checkArr[$i]);\n\n    if ($checkArrCount\
    \ - $i + 1 < 3 || !array_unique($checkArr)[$i]) $isHappy = false;\n}\n\nif ($isHappy)\
    \ {\n    echo 'happy';\n} else {\n    echo 'not happy';\n}\n</code>\n<|/ a dscore=0\
    \ tags=php,regex |>\n<| c |>\nThis is not the answer to the question, since it\
    \ just compares length with 3. You have to check 3 characters at a time.\n<|/\
    \ c |>\n<| c |>\nThe question asks to check if every three consecutive letters\
    \ are different.\n<|/ c |>\n<| a dscore=0 tags=php,regex |>\nOne more simple way:\n\
    <code>", "    if (strlen($s) < 3) {\n        return false;\n    }\n    foreach\
    \ (str_split($s) as $char) {\n        if (in_array($char, $s)) { // if char is\
    \ already in array\n            continue;\n        }\n        if (count(str_split($s))\
    \ - 1 !== $char - $s[$char]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "    $count = 0;\n    foreach (str_split($s) as $letter)\
    \ {\n        if (!isset($happy[$letter])) {\n            $happy[$letter] = true;\n\
    \        } else {\n            $happy[$letter] = false;\n        }\n    }\n\n\
    \    $counter = 0;\n    foreach ($happy as $letter) {\n        if ($letter) {\n\
    \            $counter++;\n        }\n    }\n    return $counter >= 3 && $counter\
    \ % 3 == 0;\n}\n\necho is_happy(\"xyy\"); //False\necho is_happy(\"abcd\"); //True\n\
    echo is_happy(\"aabc\"); //False\necho is_happy(\"aacb\"); //True", "    $s =\
    \ strtolower($s);\n    return (\n        !empty($s) &&\n        ((strlen($s) >=\
    \ 3) && (count(array_unique(str_split($s)) === 3)) && count(array_unique(str_split($s)))\
    \ == strlen($s))\n    );\n}\n", "    // code here\n    $vowels = array('a','e','i','o','u','A','E','I','O','U');\n\
    \    \n    $len = strlen($s);\n    if ($len < 3) return false;\n    \n    for($i\
    \ = 0; $i < $len; $i++) {\n        if(in_array($s[$i], $vowels)) return false;\n\
    \    }\n    \n    for($i = 0; $i < $len; $i++) {\n        if(in_array($s[$i],\
    \ $vowels)) return false;\n    }\n    \n    for($i = 0; $i < $len; $i++) {\n \
    \       if(in_array($s[$i], $vowels)) return false;\n    }\n    \n    return true;\n\
    }\n", "    if (strlen($s) < 3)\n        return false;\n    if (strlen($s) != str_repeat($s[0],\
    \ 3))\n        return false;\n    $chars = str_split($s);\n    $counts = array_count_values($chars);\n\
    \    foreach ($counts as $c => $count) {\n        if ($count != 1)\n         \
    \   return false;\n    }\n    return true;\n}\n\nprint_r(is_happy('aa'));", " \
    \   $counts = array_count_values($s);\n    if ( array_sum($counts) < 3 ) return\
    \ false;\n\n    foreach ( $counts as $letter => $count ) {\n        if ( $count\
    \ != 3 ) return false;\n    }\n\n    return true;\n}\n", "    return strlen($s)\
    \ < 3 || is_happy_recursive($s);\n}\n", "    $strlen=$strlen= strlen($s);\n  \
    \  if($strlen<3)\n    {\n        return false;\n    }\n    for($i=0;$i<$strlen;$i++)\n\
    \    {\n        if($s[$i]!=$s[($i+1)])\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
