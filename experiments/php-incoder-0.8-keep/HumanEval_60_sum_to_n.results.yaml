name: HumanEval_60_sum_to_n
language: php
results:
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $n1 = $n-1;\n  return array_sum(array_map(function($i) use ($n1) {\n  \
    \  return $n1*$i;\n  }, range(1,$n)));\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptu6ysqn6.php:25\n\
    Stack trace:\n#0 /tmp/tmptu6ysqn6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptu6ysqn6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $r = $n;\n  for ($i = 1; $i < $n; $i++) {\n    $r += $i;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n % 2) {\n        return\
    \ $n + 1;\n    }\n    $result = $n + 1;\n    while($n > 0) {\n        $result\
    \ -= ($n & 1) ? 1 : 0;\n        $n >>= 1;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx5m2aej.php:33\n\
    Stack trace:\n#0 /tmp/tmppx5m2aej.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppx5m2aej.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n--;\n    if ($n < 1) {\n        return 1;\n    }\n\n    $factorial\
    \ = 1;\n    $f = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $f;\n        $f += 2;\n    }\n\n    return $factorial;\n}\n\n$input = (int)\
    \ fgets(STDIN);\n$input = (int) trim($input);\n$sum_to_n_result = sum_to_n($input);\n\
    if ($input == 0) {\n    echo \"0\\n\";\n} else {\n    echo \"$sum_to_n_result\\\
    n\";\n}\n</code>\nI wrote this in PHP 5.3.14. Hope this helps.\n<|/ a tags=algorithm,factorial,php\
    \ dscore=4 |>\n<| c |>\nI love that you put so much effort into your answer, thanks\
    \ for taking the time to write it.\n<|/ c |>\n<| c |>\nThanks, I actually have\
    \ a blog post on [factorial on Wikipedia](https://en.wikipedia.org/wiki/Factorial#Formula),\
    \ but somehow didn't manage to find it when I was looking for factorial in PHP.\
    \ Hope it's still alive.\n<|/ c |>\n<| c |>\n: Yes, it's still alive! :)\n<|/\
    \ c |>\n<| c |>\nHaha, I love this answer! +1 for the effort you put in and thanks\
    \ for the code! I actually have a blog post on [factorial on Wikipedia](https://en.wikipedia.org/wiki/Factorial#Formula),\
    \ but somehow didn't manage to find it when I was looking for factorial in PHP.\
    \ Hope it's still alive.\n<|/ c |>\n<| a |>\nThe answer to the question is to\
    \ use recursion.\nHere is an implementation in python:\n<code>\ndef factorial(n):\n\
    \    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\
    </code>\n<|/ a tags=algorithm,factorial,php dscore=2 |>\n<| c |>\nI think he is\
    \ asking for something in PHP\n<|/ c |>\n<| c |>\n: I agree. Since this is tagged\
    \ `php`, I thought it might be a good idea to give a PHP answer. :)\n<|/ c |>\n\
    <| c |>\nIf he's asking for something in PHP, then he shouldn't be using the [tag:algorithm]\
    \ tag...\n<|/ c |>\n<| c |>\n: Not sure, though. I'm looking for a similar function\
    \ in PHP as well.\n<|/ c |>\n<| c |>\nThis isn't a good solution. This \nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoi80ulw4.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_sum(array_slice(range(1,$n),0,-1))+array_sum(array_slice(range(1,$n),-1,1));\n\
    }\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n * $n / 2 + $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9mij6j0.php:22\n\
    Stack trace:\n#0 /tmp/tmpg9mij6j0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg9mij6j0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $x = 0;\n  for ($i = 0; $i <= $n; $i++) {\n    $x += $i;\n  }\n  return\
    \ $x;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n > 1 ? array_sum(range(1, $n)) : $n\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpml29sp7a.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $result = 0;\n    $n++;\n    do {\n        $result = $result + $n;\n\
    \    } while ($n != 1);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum = $sum +\
    \ $i;\n    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n = $n;\n    $num = 1;\n    while (--$n) {\n        $num += $num;\n\
    \    }\n    return $num;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1eq246_.php:27\n\
    Stack trace:\n#0 /tmp/tmpz1eq246_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz1eq246_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $n = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $n = $n + $i;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm5ggm6v.php:26\n\
    Stack trace:\n#0 /tmp/tmpwm5ggm6v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwm5ggm6v.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n = (int)$n;\n    $a = 1;\n    $sum = 0;\n    while ($n--) {\n     \
    \   $sum += $a;\n        $a++;\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n\treturn $n * $n + 1;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpim0qdma8.php:21\n\
    Stack trace:\n#0 /tmp/tmpim0qdma8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpim0qdma8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  if ($n < 1) {\n    return 0;\n  }\n  $n--;\n  for ($i = 0; $i < $n; $i++)\
    \ {\n    $j = ($i + $n - 1);\n    $result = $j;\n    for ($k = $i + 1; $k <= $j;\
    \ $k++) {\n      $result *= $k;\n    }\n    return $result;\n  }\n}\n\n/**\n *\
    \ Sums the digits of a given number.\n *\n * @param $number The number.\n *\n\
    \ * @return mixed The sum.\n */\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvjgx3qj.php:40\n\
    Stack trace:\n#0 /tmp/tmpuvjgx3qj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpuvjgx3qj.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n = (int)$n;\n    if ($n < 0) {\n        throw new \\InvalidArgumentException('Negative\
    \ value for $n is illegal');\n    }\n    $sum = 0;\n    for ($i = 1; $i <= $n;\
    \ ++$i) {\n        $sum += $i;\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nNice job, that's what I was looking for! Thanks!\n<|/ c |>\n<| a tags=php,math\
    \ dscore=1 |>\nA simple solution is to use Modulo.\n<code>\n<?php\n\n$numberToSum\
    \ = 30;\n\n$sum = 0;\n\n$number = 1;\n\nwhile ($number <= $numberToSum) {\n  \
    \  $sum += $number;\n\n    ++$number;\n}\n\n$modNumber = $numberToSum - $sum;\n\
    \n$mod = $modNumber % $numberToSum;\n\necho $mod;\n</code>\n$modNumber will always\
    \ be smaller than $numberToSum so the remainder of the division will always be\
    \ less than the $numberToSum.\n<|/ a |>\n<| a |>\nHere's a solution I came up\
    \ with:\n<code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_tllivzj.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function ($sum, $value) {\n    return\
    \ $sum + $value;\n  }, 0);\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n = (int)$n;\n    if ($n <= 0)\n        return 0;\n    if ($n > 100000)\n\
    \        die(\"Sorry, but PHP is not very good at calculating numbers larger than\
    \ $n\");\n    $sum = 0;\n    $last_sum = 0;\n    $last_n = 0;\n    $last_n2 =\
    \ 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $c = pow(10, floor(log($i) /\
    \ log(10)));\n        $sum += $last_sum;\n        $last_n = $last_n2;\n      \
    \  $last_n2 = $last_n;\n        $last_n = $last_n - $c * $i;\n        $last_sum\
    \ += $last_n;\n    }\n    return $sum;\n}\nfunction candidate(...$args) {\n  \
    \  return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxad2xsj5.php:38\n\
    Stack trace:\n#0 /tmp/tmpxad2xsj5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxad2xsj5.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  if ($n<=0) return 0;\n  $sum = 1;\n  for ($i=2; $i<$n; $i+=2) $sum *= ($i+1);\n\
    \  return $sum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrk_c3_1.php:25\n\
    Stack trace:\n#0 /tmp/tmpzrk_c3_1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzrk_c3_1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return ($n * ($n + 1))/2;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_reduce(range(1, $n), function($sum, $i) { return $sum +\
    \ $i; });\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $a = 0;\n  for ($i = 1; $i <= $n; ++$i) {\n    $a += $i;\n  }\n  return\
    \ $a;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for($i = 0; $i < $n; $i++) {\n        $sum += $i;\n  \
    \  }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlkct7de.php:26\n\
    Stack trace:\n#0 /tmp/tmprlkct7de.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprlkct7de.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return function($value) use ($n) {\n    return $value + $n;\n  };\n}\n\n\
    function candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7fskkp2y.php:24\n\
    Stack trace:\n#0 /tmp/tmp7fskkp2y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7fskkp2y.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n * ($n + 1) / 2;\n}\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return (n * (n + 1)) / 2;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpmtxq5r5m.php on line 14\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpmtxq5r5m.php on line 14\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpmtxq5r5m.php on line 14\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpmtxq5r5m.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpmtxq5r5m.php:22\nStack trace:\n#0 /tmp/tmpmtxq5r5m.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmtxq5r5m.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $nsum = 0;\n  for($i = 1; $i <= $n; $i++) {\n    $nsum += $i;\n  }\n  return\
    \ $nsum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n = (int)$n;\n    $sum = 1;\n    for($i=1;$i<$n;$i++) {\n        $sum\
    \ += $i;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88ftztte.php:28\n\
    Stack trace:\n#0 /tmp/tmp88ftztte.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp88ftztte.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $s = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $s += $i;\n  }\n  return\
    \ $s;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps6ncg0d6.php:25\n\
    Stack trace:\n#0 /tmp/tmps6ncg0d6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps6ncg0d6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function ($x, $y) { return $x + $y; });\n\
    }\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    $base = 1;\n    while($n > 0) {\n        $sum += $base;\n\
    \        $base++;\n        $n--;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n * ($n + 1) / 2;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ tags=php,algorithm |>\nThis is an old question, but I'm thinking that you can\
    \ do something like the following:\n<code>\nfunction candidate(...$args) {\n \
    \   return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq1qhq82s.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *=\
    \ $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbbf6fmm.php:27\n\
    Stack trace:\n#0 /tmp/tmpvbbf6fmm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvbbf6fmm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  // Create an array of numbers from 1 to $n.\n  $range = 1..$n;\n  // Sum\
    \ all the numbers in the range.\n  $sum = 0;\n  foreach ($range as $number) {\n\
    \    $sum += $number;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp5dyh7_f3.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5dyh7_f3.php:29\n\
    Stack trace:\n#0 /tmp/tmp5dyh7_f3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5dyh7_f3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for($i = 1; $i <= $n; ++$i) {\n        $sum += $i;\n \
    \   }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| a |>\nI think it's worth pointing\
    \ out that this is exactly the kind of problem that Haskell solves.\nThe solution\
    \ using that toolset is pretty succinct and elegant, and you can get pretty compact\
    \ code if you use GHC.\n<|/ a tags=php,c,c++,algorithm dscore=3 |>\n<| a |>\n\
    Here is a python solution:\n<code>\ndef sum_to_n(n):\n    if n == 0:\n       \
    \ return 1\n    return n*(n+1)/2\n</code>\n<|/ a dscore=3 tags=php,c,c++,algorithm\
    \ |>\n<| c |>\nA good answer should provide a short explanation of what you did\
    \ and why you did it.\n<|/ c |>\n<| c |>\nYou don't need `/` there if you just\
    \ want to compute `n*(...+1)/2`.\n<|/ c |>\n<| a dscore=3 |>\nThis is probably\
    \ best solved using a recursive function.\n<code>\nint sum_to_n(int n)\n{\n  \
    \  if (n==0) return 1;\n    return n*(n+1)/2;\n}\n</code>\n<|/ a tags=php,c,c++,algorithm\
    \ |>\n<| a dscore=3 tags=php,c,c++,algorithm |>\nHere's another solution, written\
    \ in PHP:\n<code>\n<?php\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu8ooytwl.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return range(1, $n+1);\n}\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh5_exmw.php:21\n\
    Stack trace:\n#0 /tmp/tmpwh5_exmw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwh5_exmw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n * array_sum(range(1, $n));\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| a |>\n<code>\n$a = array_sum(array_chunk($array, size));\n</code>\n<|/ a tags=arrays,php,sum\
    \ dscore=5 |>\n<| c |>\nThe best answer. Thanks :)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post - you can always comment on\
    \ your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nThis is a perfectly valid answer. One may find it helpful when\
    \ dealing with multi-dimensional arrays.\n<|/ c |>\n<| a |>\n<code>\n$total =\
    \ 0;\nforeach($array as $key=>$value) {\n    $total += $value;\n}\n</code>\n<|/\
    \ a dscore=5 tags=arrays,php,sum |>\n<| c |>\nI like the use of foreach here and\
    \ your solution works fine if you're looking for the sum of an array that has\
    \ numeric values only. +1 for the simplest way to sum up an array.\n<|/ c |>\n\
    <| c |>\nI like this answer. Simplified and elegant. I'm going to use this as\
    \ my \"sum\" function in my code.\n<|/ c |>\n<| c |>\nI like this answer. It's\
    \ a good solution for those that need to add up all values inside an array that\
    \ isn't numeric. I.e. `$foo = array(\"a\", 5, \"b\", 6, \"c\", 10);`\n<|/ c |>\n\
    <| a |>\nFor anyone using PHP 5.6, you can use the array_reduce function:\n<code>\n\
    $total = array_reduce($array, function($carry, $value) {\n    return $carry +\
    \ $value;\n});\n</code>\n<|/ a tags=arrays,php,sum dscore=5 |>\n<| c |>\nNice\
    \ answer. Thanks.\n<|/ c |>\n<| c |>\nJust FYI, that's a [PHP 5.6 feature](http://php.net/manual/en/migration56.new-features.php#migration56.new-features.reduce-function)\n\
    <|/ c |>\n<| c |>\nIn PHP 5.6, you can use array_sum instead.\n<|/ c |>\n<| c\
    \ |>\nIt's a PHP 5.6 feature, but also a 5.5 feature\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdo8_rnei.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n * ($n + 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmos8azf.php:22\n\
    Stack trace:\n#0 /tmp/tmprmos8azf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprmos8azf.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n \
    \   }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return ($n * ($n + 1)) / 2;\n}\n\nclass BigInt {\n  static function base($base\
    \ = 10) {\n    $base = (int) $base;\n    if ($base < 2 || $base > 36) {\n    \
    \  throw new Exception(\"invalid base: $base\");\n    }\n    return $base;\n \
    \ }\n\n  // Returns true if the two integers compare equal.  The integers must\n\
    \  // be either a BigInt, a PHP int, or an integer.  They can be in any\n  //\
    \ order.\n  //\n  // >>> BigInt::compare(1, 2)\n  // true\n  // >>> BigInt::compare(100,\
    \ '2')\n  // false\n  static function compare($a, $b) {\n    if ($a == $b) {\n\
    \      return true;\n    }\n    if ($a instanceof BigInt && $b instanceof BigInt)\
    \ {\n      return $a->compare($b);\n    }\n    if (is_int($a) && is_int($b)) {\n\
    \      return $a > $b;\n    }\n    throw new Exception(\"not comparable\");\n\
    \  }\n\n  // Compares two integers and returns a new BigInt that has the first\
    \ less\n  // or equal to each of the two integers.\n  //\n  // >>> BigInt::lessThanOrEqualTo(2,\
    \ 3)\n  // BigInt::lessThan(2, 3)\n  // >>> BigInt::lessThanOrEqualTo(100, 100)\n\
    \  // BigInt::lessThan(100, 100)\n  // >>> BigInt::lessThanOrEqualTo(100, 200)\n\
    \  // BigInt::lessThanOrEqualTo(100, 200)\n  static function lessThanOrEqualTo($a,\
    \ $b) {\n    if ($a instanceof BigInt && $b instanceof BigInt) {\n      return\
    \ $a->lessThanOrEqualTo($b);\n    }\n    if (is_int($a) && is_int($b)) {\n   \
    \   if ($a > $b) {\n        return $a;\n      }\n      if ($a < $b) {\n      \
    \  return $b;\n      }\n    }\n    throw new Exception(\"not comparable\");\n\
    \  }\n\n  // Multiplies two integers and returns a new BigInt that has the first\n\
    \  // greater or equal to each of the two integers.\n  //\n  // >>> BigInt::greaterThanOrEqualTo(2,\
    \ 3)\n  // BigInt::greaterThan(2, 3)\n  // >>> BigInt::greaterThanOrEqualTo(100,\
    \ 100)\n  // BigInt::greaterThan(100, 100)\n  // >>> BigInt::greaterThanOrEqualTo(100,\
    \ 200)\n  // BigInt::greaterThan(100, 200)\n  static function greaterThanOrEqualTo($a,\
    \ $b) {\n    if ($a instanceof BigInt && $b instanceof BigInt) {\n      return\
    \ $a->greaterThanOrEqualTo($b);\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph7f_bjml.php on line 95\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_reduce(range(1, $n), 'array_sum', 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects exactly 1 parameter, 2 given in /tmp/tmpkz9hnv5o.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkz9hnv5o.php:22\n\
    Stack trace:\n#0 /tmp/tmpkz9hnv5o.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkz9hnv5o.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_reduce(range($n), function ($carry, $i) {\n        return\
    \ $carry + $i;\n    });\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmptp691coh.php\
    \ on line 14\n\nWarning: array_reduce() expects parameter 1 to be array, bool\
    \ given in /tmp/tmptp691coh.php on line 16\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptp691coh.php:24\nStack trace:\n#0 /tmp/tmptp691coh.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptp691coh.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\n\n/**\n * Returns true if a string is all digits\n * and false otherwise.\n\
    \ *\n * @param string $s\n *   The string to be checked.\n *\n * @return bool\n\
    \ *   TRUE if the string is all digits, FALSE otherwise.\n */\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n*$n;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzpbq3hsr.php:22\n\
    Stack trace:\n#0 /tmp/tmpzpbq3hsr.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpzpbq3hsr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_reduce(range(1, $n), function ($a, $b) { return $a + $b;\
    \ });\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nYou could achieve this via a recursive\
    \ function:\n<code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdmbnq85t.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  if ($n == 0)\n    return 0;\n  return $n + array_sum(array_slice(array_fill(0,\
    \ $n, ''), 0, -1));\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_cpxto8.php:25\n\
    Stack trace:\n#0 /tmp/tmpf_cpxto8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpf_cpxto8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n <= 1) {\n        return 1;\n    }\n    $i = 0;\n    $result =\
    \ 1;\n    while ($i <= $n) {\n        $result *= $i;\n        $i++;\n    }\n \
    \   return $result;\n}\n</code>\n<|/ a dscore=1 tags=number-theory,php,biginteger,primes,factorization\
    \ |>\n<| a |>\nThe most efficient way I can think of is to divide by primes up\
    \ to sqrt(n) by hand, as you suggest. Here's some quick code to find the factors\
    \ of each prime up to n (which would be a reasonable number of primes, I think).\
    \ It's fairly easy to see how this might work, given that you're only dealing\
    \ with numbers that fit into a 64 bit integer and your largest prime is 19 (which\
    \ would take you about a year to calculate, even for just the first 10000 primes!)\n\
    <code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc95t6djj.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  if ($n < 1) {\n    return 1;\n  }\n\n  $sum = 0;\n  for ($i = 1; $i <=\
    \ $n; ++$i) {\n    $sum += $i;\n  }\n\n  return $sum;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI understand that this answer was accepted, but I don't think it\
    \ actually provides an answer. Can you edit it to include a short explanation\
    \ of what it is doing?\n<|/ c |>\n<| c |>\n: I provided a brief explanation. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for the explanation. Now I understand how\
    \ this works. I wish my PHP book would cover this in detail instead of just explaining\
    \ it in a single answer.\n<|/ c |>\n<| a |>\nJust to share my solution which was\
    \ inspired by this answer but a little shorter and more readable than the previous\
    \ one.\n<code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8gr8j088.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function ($sum, $x) {\n    return $sum\
    \ + $x;\n  }, 0);\n}\n</code>\n<|/ a dscore=4 tags=javascript,algorithm |>\n<|\
    \ c |>\nThat will do on average, if you don't want that to be the case you could\
    \ just use the difference between the max and the sum to normalise the sum by\
    \ a factor of `n`. The max will be the difference between `sum_to_n(n)` and `sum_to_n(n)`\n\
    <|/ c |>\n<| c |>\nThe first one doesn't look right - it returns 0 for n=10 and\
    \ 10 and 1 respectively. I think what you really want is the second one that has\
    \ `var sum_to_n = function(n) { return (1 + n) * (n - 1) / 2 }`\n<|/ c |>\n<|\
    \ a |>\nJust for fun, here's a solution using the Sieve of Eratosthenes algorithm:\n\
    <code>\nvar sum_to_n = function (n) {\n    var sum = 0;\n    var primes = [];\n\
    \    var i = 2;\n    primes.push(i);\n\n    while (primes.length > n) {\n    \
    \    primes.push(0);\n        for (var j = 0; j < primes.length; j++) {\n    \
    \        if (primes[j] === 0) {\n                var i = j;\n                while\
    \ (i < primes.length && primes[i] === 0) {\n                    i += 1;\n    \
    \            }\n                primes[j] = i;\n            }\n        }\n\n \
    \       sum += primes.slice(i, primes.length + 1).reduce(function(p, c) {\n  \
    \          return p + c;\n        });\n    }\n\n    return sum;\n};\n</code>\n\
    <|/ a tags=javascript,algorithm dscore=4 |>\n<| c |>\n+1 for \"just for fun\"\
    \ :)\n<|/ c |>\n<| c |>\nThanks, I added an explanation on why it works.\n<|/\
    \ c |>\n<| a dscore=3 |>\nHere's an implementation using only JavaScript:\n<code>\n\
    var sum_to_n = function (n) {\n    var sum = 0;\n    for (var i = 1; i <= n; i++)\
    \ {\n        sum += i;\n    }\n    return sum;\n};\n\nvar sum_to_n_array = function\
    \ (n) {\n    var sum = 0;\n    var numbers = [];\n    for (var i = 1; i <= n;\
    \ i++) {\n        sum += i;\n        numbers.push(i);\n    }\n    return numbers;\n\
    };\n\nconsole.log(sum_to_n(10));\nconsole.log(sum_to_n_array(10));\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| c |>\nYour `sum_to_n()` function will return\
    \ the wrong answer as you add 1 to `sum` but `sum` is initialized to 0.\n<|/ c\
    \ |>\n<| c |>\n: No it wont, look at the `+=` \nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2fk08e41.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\n</code>\n<|/ a tags=php,math dscore=2 |>\n<| c |>\nYeah, I don't care\
    \ about micro-optimizations at the moment, but I will be sure to implement these\
    \ suggestions in future.\n<|/ c |>\n<| c |>\nAnd that would be a good time to\
    \ implement them regardless. You're learning PHP so you _should_ be aware of this.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere are a couple of things to consider.  One is that\
    \ you didn't give us the definition of your sum function, so I'm going to guess\
    \ you meant your function to return $n plus $n+1.  Since you didn't specify what\
    \ your function is supposed to do, I'm going to assume that it returns $n.\nThe\
    \ second thing is that your function doesn't return $n when the input $n is 0.\
    \  I'm going to assume that that isn't a problem for you.  Either way, here's\
    \ a solution:\n<code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf19181x7.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n < 2) {\n        return 1;\n    }\n\n    $sum = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $n--;\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n\
    \  }\n  return $sum;\n}\n\n/**\n * A function that returns a random integer between\
    \ $min and $max, inclusive.\n */\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgawtpwiw.php:30\n\
    Stack trace:\n#0 /tmp/tmpgawtpwiw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgawtpwiw.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    do {\n        $n++;\n    } while (++$n < $n);\n    return $n;\n}\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprei4kxyc.php:24\n\
    Stack trace:\n#0 /tmp/tmprei4kxyc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprei4kxyc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $result = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $result += $i;\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_sum(range(1, $n));\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    $numbers = range(1, $n);\n\n    foreach ($numbers as $n)\
    \ {\n        echo $sum + $n;\n        $sum += $n;\n    }\n    \n}\n</code>\n<|/\
    \ a tags=php |>\n<| c |>\nThis code will not work as it will return just one sum,\
    \ instead of adding up all the sums.\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptwbaec8z.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_sum(range(1, $n));\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $numbers = range(1, $n);\n    $total = 0;\n    foreach ($numbers as $number)\
    \ {\n        $total += $number;\n    }\n    return $total;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $total = 0;\n  for ($i = 0; $i <= $n; $i++) {\n    $total += $i;\n  }\n\
    \  return $total;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $res = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $res = $res * $i;\n  }\n\
    \  return $res;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzhzagmp.php:27\n\
    Stack trace:\n#0 /tmp/tmpbzhzagmp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbzhzagmp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  if ($n === 0) {\n    return 0;\n  }\n  return 1 + sum_to_n($n - 1);\n}\n\
    \nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgv1ksc8.php:26\n\
    Stack trace:\n#0 /tmp/tmpkgv1ksc8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkgv1ksc8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n\treturn (n * (n + 1)) / 2;\n}\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpib1lvkel.php on line 14\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpib1lvkel.php on line 14\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpib1lvkel.php on line 14\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpib1lvkel.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpib1lvkel.php:21\nStack trace:\n#0 /tmp/tmpib1lvkel.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpib1lvkel.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n = (int)$n;\n    if ($n == 0) {\n        return 1;\n    }\n    $sum\
    \ = 0;\n    do {\n        $sum++;\n        $n--;\n    } while ($n > 0);\n    return\
    \ $sum;\n}\n</code>\n<|/ a tags=loops,php dscore=0 |>\n<| c |>\nYour answer is\
    \ the opposite of what the OP asked for. I think he asked for a *cumulative* sum\
    \ not a *running* sum.\n<|/ c |>\n<| a dscore=0 tags=loops,php |>\nThis can be\
    \ done quite simply with array_reduce and array_shift:\n<code>\n$data = [\n  \
    \  0 => 'A',\n    1 => 'B',\n    2 => 'C',\n    3 => 'D',\n    4 => 'E',\n   \
    \ 5 => 'F',\n    6 => 'G',\n    7 => 'H',\n    8 => 'I',\n    9 => 'J',\n    10\
    \ => 'K',\n];\n\n$result = array_reduce($data, function($c, $e) {\n    return\
    \ $c + array_shift($e);\n});\n\nvar_dump($result);\n</code>\nOutput:\n<code>\n\
    int(57)\n</code>\nDemo\n<|/ a |>\n<| a |>\nFor PHP 7+, you may use function array_sum():\n\
    <code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpva08rqoh.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    $base = 1;\n    while ($n > 0) {\n        $sum += $n;\n\
    \        $n--;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$b = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$c = $a;\n$c += $b;\n$c = array_merge($c, $b);\n\
    \nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $res = 1;\n    for($i = 1;$i <= $n; $i++) {\n        $res *= $i;\n  \
    \  }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkf9nz0g.php:27\n\
    Stack trace:\n#0 /tmp/tmpfkf9nz0g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfkf9nz0g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n \
    \   }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  // Return a function that returns $n for the first time\n  // the function\
    \ is called and returns $n*$n for the next\n  // time the function is called.\n\
    \  return function($n = null) use($n) {\n    // If $n is not a number or null,\
    \ just return the value of\n    // $n. If $n is a number, multiply it by $n.\n\
    \    if (!is_numeric($n) || is_null($n)) return $n;\n    return $n * $n;\n  };\n\
    }\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Cannot use lexical variable $n as a parameter name in /tmp/tmpw3su7nty.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $nstr = (string) $n;\n  $result = 0;\n  for ($i = 0; $i < $nstr; ++$i)\
    \ {\n    $result = $result + pow(2, $i);\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06hn_1ng.php:28\n\
    Stack trace:\n#0 /tmp/tmp06hn_1ng.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp06hn_1ng.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    $n = intval($n);\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $sum += $i;\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=algorithm,numbers,php\
    \ |>\n<| a dscore=1 |>\nI believe a faster solution is given here:\nhttp://www.koders.com/php/fidD8C0FEF9A49AE2FD5DBB8E3D0C59D18E3A59F1E9C.aspx?s=c\n\
    It uses addition instead of division. Also, you can optimize it further by computing\
    \ only 1/2, 1/4, 1/8, 1/16, 1/32, 1/64, 1/128 and so on.\n<|/ a tags=algorithm,numbers,php\
    \ |>\n<| c |>\nThis link doesn't work, is there an alternative link to that page?\n\
    <|/ c |>\n<| a |>\nThis is my solution to your problem. \n<code>\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpigp1ukbp.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n = (int) $n;\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n \
    \       $sum += $i;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  if ($n < 2) return 1;\n  return ($n % 2 == 0) ? $n * sum_to_n($n / 2) :\
    \ $n * sum_to_n($n - 1);\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gqqf012.php:24\n\
    Stack trace:\n#0 /tmp/tmp9gqqf012.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9gqqf012.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $nums = range(1, $n);\n    $sum = 0;\n    foreach ($nums as $num) {\n\
    \        $sum += $num;\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  // return 0 when $n is 0\n  if ($n < 1) {\n    return 0;\n  }\n  // else\
    \ return n\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbrltvnla.php:28\n\
    Stack trace:\n#0 /tmp/tmpbrltvnla.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbrltvnla.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  if ($n < 0) {\n    return null;\n  }\n\n  if ($n === 0) {\n    return 1;\n\
    \  }\n\n  return $n * array_sum(range(1, $n));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9qllm1dy.php:31\n\
    Stack trace:\n#0 /tmp/tmp9qllm1dy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9qllm1dy.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n * ($n + 1);\n}\n</code>\nHere are some examples of these functions\
    \ being used with each input value:\n<code>\n$tests = [30, 100, 5, 10, 1];\n\n\
    foreach ($tests as $n) {\n    echo 'Sum of numbers from 1 to ' . $n . ':' . PHP_EOL;\n\
    \    echo '  ' . sum_to_n($n) . PHP_EOL;\n    echo PHP_EOL;\n}\n</code>\nOutput:\n\
    <code>\nSum of numbers from 1 to 30:\n  465\nSum of numbers from 1 to 100:\n \
    \ 5050\nSum of numbers from 1 to 5:\n  15\nSum of numbers from 1 to 10:\n  55\n\
    Sum of numbers from 1 to 1:\n  1\n</code>\n<|/ a dscore=0 tags=php,algorithm,sum,numbers,for-loop\
    \ |>\n<| a tags=php,algorithm,sum,numbers,for-loop |>\nYou can achieve it by recursion\
    \ also.\n<code>\n<?php\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps_az9g4g.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_reduce(range(1, $n), function($sum, $x) {\n        return\
    \ $sum + $x;\n    });\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n * 2;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7owqufcx.php:21\n\
    Stack trace:\n#0 /tmp/tmp7owqufcx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7owqufcx.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n <= 0\n    ? 0\n    : $n == 1\n      ? 1\n      : $n % 2 == 0\n\
    \        ? sum_to_n($n - 1) + ($n / 2)\n        : sum_to_n($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpn03lbgk5.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    $max = count($n) - 1;\n    foreach($n as $number) {\n\
    \        $sum += $number;\n        if ($max == $number) {\n            $max--;\n\
    \        }\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| a tags=php,algorithm,arrays\
    \ |>\nHere is a pure PHP solution.\nIt uses recursion.\nIt will work for arrays\
    \ of any size.\n<code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8t82hdev.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  // Write your code here.\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9vqrt85.php:22\n\
    Stack trace:\n#0 /tmp/tmp_9vqrt85.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_9vqrt85.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $x = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $x += $i;\n  }\n  return\
    \ $x;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_sum(range(1, $n + 1));\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nthanks so much! I haven't tried your solution, but I've found a\
    \ way to make it work for me. Thanks again for helping me out!\n<|/ c |>\n<| c\
    \ |>\nYou're welcome, but I guess I misunderstood your question. I thought you\
    \ wanted to find the maximum of the product of all the numbers from 1 to n inclusive,\
    \ where n is the number entered at the command line. To get the maximum, you just\
    \ need to use my `max_of_product` function.\n<|/ c |>\n<| c |>\nSorry for the\
    \ confusion I created. I figured out a way to work around it, but your code is\
    \ exactly what I wanted. Thanks again!\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppzhm9aqk.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n + 1;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjfyv8zs.php:21\n\
    Stack trace:\n#0 /tmp/tmpwjfyv8zs.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwjfyv8zs.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n = (int) $n;\n    $sum = 0;\n    for($i = 1; $i < $n; $i++) {\n   \
    \     $sum += $i;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc1xv55km.php:27\n\
    Stack trace:\n#0 /tmp/tmpc1xv55km.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpc1xv55km.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return ($n * ($n + 1))/2;\n}\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n <= 1 ? 1 : ($n + sum_to_n($n - 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  // We use this helper function for all the sums that we need.\n  // It\
    \ makes the code a lot more concise!\n  $sum = 0;\n  for ($i = 0; $i < $n; $i++)\
    \ {\n    $sum += $i;\n  }\n  return $sum;\n}\nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5btyusg8.php:27\n\
    Stack trace:\n#0 /tmp/tmp5btyusg8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5btyusg8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum+=$i;\n  \
    \  }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n \
    \   }\n    return $sum;\n}\n\n/**\n * This is a comment. \n * But I must say,\
    \ it does not start with a space but with a #.\n */\n$hello = 'hello';\n$hello\
    \ = 'hello';\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  // Return the number from 1 to n.\n  return range(1, $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9uuuylhn.php:23\n\
    Stack trace:\n#0 /tmp/tmp9uuuylhn.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9uuuylhn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_reduce(range(1,$n), function($sum, $num) { return $sum +\
    \ $num; }, 0);\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n + array_sum(range(1, $n));\n}\n</code>\n<|/ a tags=php,javascript,loops,while-loop,for-loop\
    \ |>\n<| c |>\nThat's a clever use of array_sum. Very clever. I need to study\
    \ that more carefully. Thank you.\n<|/ c |>\n<| c |>\nThe last line could be written\
    \ as `return $n+array_sum(range(1,$n));`\n<|/ c |>\n<| a tags=php,javascript,loops,while-loop,for-loop\
    \ |>\nYou can do it with php with one line.\n<code>\n$sum = 0;\nfor($i = 1; $i\
    \ <= $n; $i++)\n    $sum += $i;\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is\
    \ the simplest and fastest solution. Nice!\n<|/ c |>\n<| c |>\nI honestly wouldn't\
    \ call that simplest/fastest, though. :) But you did mention \"one line\" -- a\
    \ concise one-line solution. Also, your \"fast\" solution is O(n). O(2n) would\
    \ be O(n^2). O(n^2) is *much* slower. Just sayin'.\n<|/ c |>\n<| a dscore=5 |>\n\
    This is how I made it in JavaScript. \n<code>\nvar sum = 0;\nfor(var i = 1; i\
    \ <= 100; i++) {\n    sum += i;\n}\n</code>\n<|/ a tags=php,javascript,loops,while-loop,for-loop\
    \ |>\n<| c |>\nThat is a really bad idea. The performance of this loop will degrade\
    \ very quickly as the numbers get bigger. It also isn't a good way to write code.\
    \ Not least because it mixes up variable and function names, as does another answer\
    \ on this question, even though they both use the same loop style.\n<|/ c |>\n\
    <| a tags=php,javascript,loops,while-loop,for-loop |>\n<code>\n$sum = 0;\nfor\
    \ ($i = 1; $i <= 100; $i++) {\n    $sum = $sum + $i;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| a |>\nThis is my solution in PHP:\n<code>\n$sum = 0;\n$sums = 1;\nfor\
    \ ($i=1; $i <= 100; $i++) {\n    $sum = $sum + $sums;\n    $sums++;\n}\n</code>\n\
    <|/ a tags=php,javascript,loops,while-loop,for-loop dscore=4 |>\n<|\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm86hvli8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n < 1) return $n;\n    return $n*$n + $n;\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpofuqt57c.php:22\n\
    Stack trace:\n#0 /tmp/tmpofuqt57c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpofuqt57c.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    // Our sum is 1, to start the sum.\n    return 1;\n\n    // We then loop\
    \ over the numbers 1 to n and sum those numbers.\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        // The return value is the sum of the current number and the return\
    \ value from the previous loop.\n        return $i + $n;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgrn2_1a8.php:29\n\
    Stack trace:\n#0 /tmp/tmpgrn2_1a8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgrn2_1a8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $result +=\
    \ $i;\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis works.\
    \ But is this possible in single line?\n<|/ c |>\n<| c |>\nIf you need this in\
    \ single line you can try with this. \n\n$sum=array_sum(range(1,$n));\n<|/ c |>\n\
    <| c |>\nYour code is not working. Check this https://3v4l.org/UaU4P. Try your\
    \ code in PHPStorm.\n<|/ c |>\n<| c |>\nIt is working in phpstorm. I also tested\
    \ in phpstorm. https://3v4l.org/UaU4P\n<|/ c |>\n<| c |>\nI tested it in PHPStorm.\
    \ https://3v4l.org/UaU4P\n<|/ c |>\n<| a tags=sum,php,math dscore=1 |>\nYou can\
    \ use the following code to generate all combinations:\n<code>\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9icfsdbo.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n < 1) {\n        return 1;\n    }\n    if ($n < 4) {\n        return\
    \ ($n * 3) + 1;\n    }\n    return (($n * 3) - 1) + 4;\n}\n</code>\nThis code\
    \ also makes sure to account for numbers less than 1.\n<|/ a |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9o7ba1rv.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n + ($n-1);\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zmarwzj.php:23\n\
    Stack trace:\n#0 /tmp/tmp8zmarwzj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8zmarwzj.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_sum(range($n));\n}\n\n/**\n * Tests equality of floating point\
    \ values using ULP-based comparison. See\n * https://en.wikipedia.org/wiki/Unit_in_the_last_place\
    \ for more information.\n */\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpih_oteq1.php\
    \ on line 14\n\nWarning: array_sum() expects parameter 1 to be array, bool given\
    \ in /tmp/tmpih_oteq1.php on line 14\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpih_oteq1.php:26\nStack trace:\n#0 /tmp/tmpih_oteq1.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpih_oteq1.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\n</code>\nThe PHP documentation on loops and control\
    \ statements is extremely helpful.  If you are new to PHP, I recommend you read\
    \ the manual and read a few tutorials until you understand loops and control statements\
    \ better.  Then you can make use of those concepts to write your code!\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThanks so much for your help - this is going to help me\
    \ out a lot!\n<|/ c |>\n<| c |>\nNo problem, good luck! If my answer solved your\
    \ problem, please click the check mark next to my answer.  Cheers!\n<|/ c |>\n\
    <| a |>\nHere's a solution that calculates every fibonacci number up to $N and\
    \ outputs the result as JSON. \n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpylzb64ag.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n === 1) {\n        return 1;\n    }\n    return $n * array_sum(range(1,\
    \ $n));\n}\n</code>\n<|/ a tags=php dscore=2 |>\n<| c |>\nThanks, this is definitely\
    \ an interesting approach. The question is, why isn't array_sum implemented as\
    \ a builtin?\n<|/ c |>\n<| c |>\nIt's a builtin, but it's implemented with a foreach\
    \ internally (it also doesn't check for overflow).\n<|/ c |>\n<| c |>\nOk, thanks\
    \ for clarifying. I'll look into that. Your solution is still much faster than\
    \ mine, so I'll give it the check mark.\n<|/ c |>\n<| a dscore=2 |>\nHow about\
    \ array_sum(array_map(null,$array)) ?\n<code>\n<?php\n$array = array(4, 6, 3);\n\
    \necho array_sum(array_map(null,$array));\n</code>\nprints\n<code>\n24\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nNice. I'm surprised this isn't a builtin. Seems like\
    \ something that should be included in the PHP core.\n<|/ c |>\n<| c |>\nYep,\
    \ this is pretty much the only way I know to do it without looping.\n<|/ c |>\n\
    <| c |>\nI wonder how big is your array... I wonder if there is a difference between\
    \ this method and the one I posted.\n<|/ c |>\n<| c |>\nThe array_map() method\
    \ doesn't work for me on a large array. My array has more than 1 million elements\
    \ and it crashes.\n<|/ c |>\n<| a dscore=2 tags=php |>\nTry this function in conjunction\
    \ with the array_sum() function :\n<code>\nfunction candidate(...$args) {\n  \
    \  return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz8lnqfuj.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n * ($n + 1) >> 1;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; ++$i) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\n$starttime = microtime(TRUE);\necho 'Time to sum to 50000: ', $starttime\
    \ - $t0;\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: 'Time to sum to 50000: 1659457840.1499'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $result = 1;\n    $term = $n;\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      $result *= $term;\n        $term--;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lk3zdxx.php:29\n\
    Stack trace:\n#0 /tmp/tmp_lk3zdxx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_lk3zdxx.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n % 1 == 0) {\n   \
    \     return $n;\n    }\n    return $n * sum_to_n($n - 1);\n}\n</code>\n<|/ a\
    \ tags=php,factorial,algorithm dscore=3 |>\n<| a tags=php,factorial,algorithm\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqyc_38i5.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    // Your code here!\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4yoi1exa.php:21\n\
    Stack trace:\n#0 /tmp/tmp4yoi1exa.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4yoi1exa.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $n = abs($n);\n  if ($n < 1) {\n    return 1;\n  }\n  if ($n < 6) {\n \
    \   return $n * 2;\n  }\n  if ($n < 11) {\n    return $n * 3;\n  }\n  if ($n <\
    \ 16) {\n    return $n * 5;\n  }\n  if ($n < 30) {\n    return $n * 7;\n  }\n\
    \  if ($n < 100) {\n    return $n * 10;\n  }\n  return $n * 13;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtuiyjxr.php:41\n\
    Stack trace:\n#0 /tmp/tmpqtuiyjxr.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqtuiyjxr.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n * array_sum(range(1, $n));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0amwbrf.php:23\n\
    Stack trace:\n#0 /tmp/tmpy0amwbrf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpy0amwbrf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $a = 0; // this line was added because the function didn't give correct\
    \ results for $n = 5\n    for($i=1; $i <= $n; $i++) { \n        $a = $a + $i;\n\
    \    }\n    return $a;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n == 1) {\n        return 1;\n    }\n\n    $result = 1;\n    $n--;\n\
    \    do {\n        $result *= $n;\n        $n--;\n    } while ($n >= 1);\n   \
    \ return $result;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI wish I could upvote\
    \ this more. This is actually a very good way to avoid the loop problem.\n<|/\
    \ c |>\n<| c |>\nI think you missed the point of the question. He was specifically\
    \ trying to avoid loops.\n<|/ c |>\n<| c |>\nI guess we didn't have the same definition\
    \ of the word \"loop\".  I thought the problem was that he didn't want to use\
    \ a loop.  Maybe I'm misunderstanding the problem.  I guess what I'm saying is\
    \ that this is definitely the best way to avoid the loop and it *does* avoid looping.\n\
    <|/ c |>\n<| c |>\nI was only trying to answer the question: \"what is the most\
    \ efficient way to do this in PHP?\"\n<|/ c |>\n<| c |>\nI don't think this is\
    \ any better than a while loop. You're still iterating through all the items in\
    \ the array. `array_sum` also just iterates through it until it finds one that\
    \ is greater than 0. `while ($n > 1)` is effectively doing the same thing.\n<|/\
    \ c |>\n<| a dscore=2 |>\nYou could use array_reduce\n<code>\n$numbers = array(30,\
    \ 100, 5, 10);\necho array_reduce($numbers, 'sum_to_n', 1);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\nIf you don't have to have the result in a separate variable, then\
    \ you can use an anonymous function.\n<code>\n$arr = [30, 100, 5, 10];\n$result\
    \ = array_reduce($arr, 'create_function', 1);\n</code>\nIn PHP 5.3+, you can omit\
    \ the create_function() argument, just use array_reduce():\n<code>\n$arr = [30,\
    \ 100, 5, 10];\n$result = array_reduce($arr, function ($a, $b) { return $a + $b;\
    \ });\n</code>\nDemo\n<|/ a tags=php,arrays dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    function candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplxgq0awg.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  if ($n<=1)\n    return 1;\n  return $n*$n + sum_to_n($n-1);\n}\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_79o80x.php:24\n\
    Stack trace:\n#0 /tmp/tmp8_79o80x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8_79o80x.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $a = 0;\n    while ($n--) {\n        $a += 1;\n    }\n    return $a;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6m7wlqz.php:27\n\
    Stack trace:\n#0 /tmp/tmpq6m7wlqz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpq6m7wlqz.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $result = 0;\n  for ($i = 1; $i < $n; $i++) {\n    $result = $result +\
    \ $i;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxmfwhjsr.php:25\n\
    Stack trace:\n#0 /tmp/tmpxmfwhjsr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxmfwhjsr.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n*($n+1)/2;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n--;\n    $a = 1;\n    for($i = 0; $i <= $n; $i++)\n        $a *= $i;\n\
    \    return $a;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70tdzkeu.php:26\n\
    Stack trace:\n#0 /tmp/tmp70tdzkeu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp70tdzkeu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_sum(range(1, $n + 1));\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpucod9nap.php:21\n\
    Stack trace:\n#0 /tmp/tmpucod9nap.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpucod9nap.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    $n = abs($n);\n    if ($n > 0) {\n        while ($n--\
    \ > 0)\n            $sum++;\n    } else {\n        while ($n --> 0)\n        \
    \    $sum--;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n \
    \   return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8z3jpzrl.php:32\n\
    Stack trace:\n#0 /tmp/tmp8z3jpzrl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8z3jpzrl.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n == 1 ? 1 : array_sum(range(1, $n + 1));\n}\n\n$n = 5;\nwhile\
    \ (true) {\n  // Print the numbers 1 to $n\n  print \"\\n\";\n  print \"1-$n:\
    \ \";\n  print \"$n\\n\";\n  // Add the number $n to the sum of the numbers from\
    \ 1 to $n.\n  $n++;\n  print \"2-$n: \";\n  print \"$n\\n\";\n  // Add the number\
    \ $n to the sum of the numbers from 1 to $n.\n  $n++;\n  print \"3-$n: \";\n \
    \ print \"$n\\n\";\n  // Add the number $n to the sum of the numbers from 1 to\
    \ $n.\n  $n++;\n  // If $n is greater than 100, exit the loop.\n  if ($n > 100)\
    \ {\n    break;\n  }\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\n1-5: 5\n2-6: 6\n3-7: 7\n\n1-8: 8\n2-9: 9\n3-10: 10\n\n1-11: 11\n2-12:\
    \ 12\n3-13: 13\n\n1-14: 14\n2-15: 15\n3-16: 16\n\n1-17: 17\n2-18: 18\n3-19: 19\n\
    \n1-20: 20\n2-21: 21\n3-22: 22\n\n1-23: 23\n2-24: 24\n3-25: 25\n\n1-26: 26\n2-27:\
    \ 27\n3-28: 28\n\n1-29: 29\n2-30: 30\n3-31: 31\n\n1-32: 32\n2-33: 33\n3-34: 34\n\
    \n1-35: 35\n2-36: 36\n3-37: 37\n\n1-38: 38\n2-39: 39\n3-40: 40\n\n1-41: 41\n2-42:\
    \ 42\n3-43: 43\n\n1-44: 44\n2-45: 45\n3-46: 46\n\n1-47: 47\n2-48: 48\n3-49: 49\n\
    \n1-50: 50\n2-51: 51\n3-52: 52\n\n1-53: 53\n2-54: 54\n3-55: 55\n\n1-56: 56\n2-57:\
    \ 57\n3-58: 58\n\n1-59: 59\n2-60: 60\n3-61: 61\n\n1-62: 62\n2-63: 63\n3-64: 64\n\
    \n1-65: 65\n2-66: 66\n3-67: 67\n\n1-68: 68\n2-69: 69\n3-70: 70\n\n1-71: 71\n2-72:\
    \ 72\n3-73: 73\n\n1-74: 74\n2-75: 75\n3-76: 76\n\n1-77: 77\n2-78: 78\n3-79: 79\n\
    \n1-80: 80\n2-81: 81\n3-82: 82\n\n1-83: 83\n2-84: 84\n3-85: 85\n\n1-86: 86\n2-87:\
    \ 87\n3-88: 88\n\n1-89: 89\n2-90: 90\n3-91: 91\n\n1-92: 92\n2-93: 93\n3-94: 94\n\
    \n1-95: 95\n2-96: 96\n3-97: 97\n\n1-98: 98\n2-99: 99\n3-100: 100\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp1wq9876w.php:44\nStack trace:\n\
    #0 /tmp/tmp1wq9876w.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1wq9876w.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n == 1) {\n        return 1;\n    }\n    return $n + sum_to_n($n\
    \ - 1);\n}\n</code>\nThe recursion isn't really that difficult in this case. As\
    \ you can see, I'm just using a loop to perform the addition until I reach n and\
    \ then return the result. \nThe problem is that the loop is really slow since\
    \ it has to do a lot of additions. There are better ways to do this with a bit\
    \ of mathematical insight but since you're only doing this on numbers up to a\
    \ certain number, I wouldn't bother. I would just stick to my solution and forget\
    \ about it.\n<|/ a dscore=1 |>\n<| c |>\nYes, I thought about it. I think this\
    \ is the best approach, since I need the sum for other purposes as well. But I\
    \ don't understand what happens when I implement the code as shown in my post\
    \ above.\n<|/ c |>\n<| c |>\nThe `for` loop is executed `n` times so it's basically\
    \ the same thing as using a `while` loop. Since you already have your function\
    \ defined, why don't you simply call it like you were before or define your function\
    \ to return the result? It would certainly be easier to read and less error prone\
    \ than doing it in a loop.\n<|/ c |>\n<| c |>\nI implemented your code. But it\
    \ gives me an error: Fatal error: Call to undefined function sum_to_n().\n<|/\
    \ c |>\n<| c |>\nI actually just noticed that you said you were doing this on\
    \ a larger scale so I edited my answer. I'll also post a solution that should\
    \ work but might be less efficient.\n<|/ c |>\n<| c |>\nThank you very much, that\
    \ is exactly what I was looking for! It works much faster. Do you also have an\
    \ idea how to make it work without using the for loop (while loop in this case)?\
    \ Because my code already uses it and it does not make sense to do that again.\n\
    <|/ c |>\n<| a dscore=0 |>\nTry this :\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphg6t1dii.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $number = 0;\n  while ($n > 0) {\n    $number += 1;\n    $n -= 1;\n  }\n\
    \  return $number;\n}\n</code>\n<|/ a |>\n<| c |>\nI think you meant to have `return\
    \ $number;` in your first code block.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw5z0zugi.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n      \
    \  return 1;\n    }\n    return ($n * sum_to_n($n - 1)) + 1;\n}\n</code>\n<|/\
    \ a tags=python,php,javascript dscore=4 |>\n<| a tags=python,php,javascript |>\n\
    <code>\n<?php \nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsyjqqz25.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n <= 1 ? '0' : ($n > 1 ? '' : $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7xe4twz.php:22\n\
    Stack trace:\n#0 /tmp/tmpg7xe4twz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg7xe4twz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_sum(range(1, $n));\n}\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    I feel like I understand this but I'm having trouble understanding how it works.\
    \ Would you mind explaining a little bit? Also, how would I use it in this case?\n\
    <|/ c |>\n<| c |>\nYou don't need to use the code I provided... just use it in\
    \ your code.  The idea is that you take advantage of the range function that returns\
    \ an array from 1 to the specified number.  I find that `array_sum` is quite useful\
    \ for summing numbers from an array... so that is what I used.  Hope that helps\
    \ :)\n<|/ c |>\n<| c |>\nI'm having trouble getting it to work. I tried adding\
    \ it to the script but it doesn't seem to work. Should I be putting it in the\
    \ beginning of the script?\n<|/ c |>\n<| c |>\nI put the code at the end where\
    \ I need the result but it's still not working.\n<|/ c |>\n<| c |>\nHmm, I'm going\
    \ to need to see more code then.  What is the variable you want to sum?  Is it\
    \ an array?\n<|/ c |>\n<| a tags=php |>\nUse array_sum\n<code>\n<?php\n$sum =\
    \ array_sum(range(1,30));\n$sum2 = array_sum(range(0,90));\n$sum3 = array_sum(range(0,10));\n\
    $sum4 = array_sum(range(1,10));\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7l6jtyci.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum = $sum + $i;\n  }\n\
    \  return $sum;\n}\n\n$sum_of_n_to_2 = sum_to_n(2);\n$sum_of_n_to_10 = sum_to_n(10);\n\
    $sum_of_n_to_100 = sum_to_n(100);\n$sum_of_n_to_1000 = sum_to_n(1000);\n$sum_of_n_to_10000\
    \ = sum_to_n(10000);\n$sum_of_n_to_100000 = sum_to_n(100000);\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $s = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $s += $i;\n  }\n  return\
    \ $s;\n}\n\n/**\n * Sums the numbers from 1 to n, using the Sieve of Eratosthenes.\n\
    \ * @return int\n */\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1a_vjuhf.php:30\n\
    Stack trace:\n#0 /tmp/tmp1a_vjuhf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1a_vjuhf.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  // Reset the sum to 0, and add n to it.\n  $sum = 0;\n  for ($i = 1; $i\
    \ <= $n; ++$i) {\n    $sum += $i;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  // Use a generator to create a function that will yield $n values.\n  //\
    \ The generator will always take one value from each time it is called.\n  //\
    \ The generator yields one value; that value will be stored in $n.\n  return function()\
    \ use ($n) {\n    $n = 0;\n    for ($i = 0; $i < $n; ++$i) {\n      yield $i;\n\
    \    }\n  };\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wdzahpr.php:30\n\
    Stack trace:\n#0 /tmp/tmp_wdzahpr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_wdzahpr.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return range(1, $n+1).reduce(function($a,$b) { return $a+$b; }, 0);\n}\n\
    $a = array();\nwhile ($b < $n) {\n  $a[] = sum_to_n($b);\n  $b++;\n}\necho array_sum($a);\n\
    \n/* Summation of prime numbers is fun!  Let's implement it in PHP.  For each\
    \ number up to $N\n(which is currently $N=50), we simply check if it divides evenly\
    \ into every prime number.\nThe first prime we find which doesn't divide evenly\
    \ into $N is our result! */\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "0\nFatal error: Uncaught Error: Call to undefined function reduce() in\
    \ /tmp/tmpno8leiid.php:14\nStack trace:\n#0 /tmp/tmpno8leiid.php(27): sum_to_n(1)\n\
    #1 /tmp/tmpno8leiid.php(31): candidate(1)\n#2 /tmp/tmpno8leiid.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpno8leiid.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum = $sum + $i;\n  }\n\
    \  return $sum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_sum(range(1, $n));\n}\n\nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum = $sum + $i;\n  }\n\
    \  return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n + array_sum(range(1, $n));\n}\n\n/**\n * Returns a new function\
    \ which executes func() in specified scope.\n *\n * @param  mixed  $func\n * @param\
    \  array  $scope\n * @return \\Closure\n */\nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7s1pfvu.php:29\n\
    Stack trace:\n#0 /tmp/tmpb7s1pfvu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpb7s1pfvu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return ($n*$n)/2;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7i1zu6s.php:21\n\
    Stack trace:\n#0 /tmp/tmph7i1zu6s.php(28): test()\n#1 {main}\n  thrown in /tmp/tmph7i1zu6s.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_sum(range(1,$n+1));\n}\n</code>\n<|/ a |>\n<| c |>\n: You\
    \ are welcome.  I just noticed that you asked a question about how to handle division\
    \ versus multiplication, so I updated my answer with a solution for multiplication\
    \ that might be helpful.\n<|/ c |>\n<| c |>\nI updated my question, let me know\
    \ if you have any questions :)\n<|/ c |>\n<| c |>\n: Updated the answer to address\
    \ your additional question.\n<|/ c |>\n<| c |>\nThanks again for the help, I'm\
    \ sure I could use it somewhere else but for what I'm doing right now this was\
    \ more straight forward. I appreciate it!\n<|/ c |>\n<| c |>\n: You're welcome.\
    \  If you do have a use case where this doesn't work well for you, please post\
    \ it in a new question and I can try to give you a better answer.  Also, if you\
    \ have questions about how to use the functions or how to use this code, you can\
    \ comment on the answer here, or post a new question here on StackOverflow.\n\
    <|/ c |>\n<| a dscore=3 |>\nThe \"tricky\" part here is that you need to divide\
    \ by the number you get from dividing by 10 and taking the modulus. \n<code>\n\
    function candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy2dtz7e0.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    while ($n > 0) {\n        $sum += 1;\n        $n--;\n\
    \    }\n    return $sum;\n}\n\n$filename = 'test.txt';\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ha1whr8.php:29\n\
    Stack trace:\n#0 /tmp/tmp0ha1whr8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0ha1whr8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n <= 0) {\n        throw new \\InvalidArgumentException(\"n must\
    \ be > 0.\");\n    }\n    return $n <= 1 ? $n : $n + sum_to_n($n - 1);\n}\n\n\
    $result = [];\n$i = 1;\nwhile ($i <= $n) {\n    $result[] = sum_to_n($i);\n  \
    \  $i++;\n}\n\nprint_r(array_count_values($result));\n</code>\nResults:\n<code>\n\
    Array\n(\n    [1] => 4\n    [15] => 1\n    [55] => 1\n    [76] => 1\n    [110]\
    \ => 1\n)\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nWow, you have a pretty\
    \ cool solution. I just tried it and for my `n` of 15 it gives me the right result,\
    \ `15` being the highest value in the array.\n<|/ c |>\n<| c |>\nYeah I realized\
    \ that when I realized the problem I was thinking about it in a different way.\
    \ So your solution is pretty elegant.\n<|/ c |>\n<| c |>\nThank you for the solution\
    \ Jeff, however I accepted the answer that provided a solution using only native\
    \ PHP functions.\n<|/ c |>\n<| a dscore=2 |>\nThis can easily be done with recursive\
    \ functions.\n<code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy042bgad.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n * array_reduce(range(1, $n), function ($carry, $v) {\n    \
    \    return $carry + $v;\n    });\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nYour\
    \ code is the only thing that I've seen that actually works.\n<|/ c |>\n<| a dscore=3\
    \ |>\nFor a PHP 7 solution, you can use:\n<code>\n<?php\necho sum_to_n(10); //\
    \ 55\necho sum_to_n(30); // 465\necho sum_to_n(50); // 5050\necho sum_to_n(100);\
    \ // 1555\necho sum_to_n(1); // 1\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphwy6ck38.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $n = min($n, 30);\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum\
    \ += $i;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpslla9j5z.php:31\n\
    Stack trace:\n#0 /tmp/tmpslla9j5z.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpslla9j5z.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum = $sum + $i;\n  }\n\
    \  return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function ($a, $b) {\n    return $a +\
    \ $b;\n  }, 0);\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function($a, $b) {\n    return $a + $b;\n\
    \  });\n}\n\nclass Php7Test extends \\PHPUnit\\Framework\\TestCase\n{\n  /**\n\
    \   * @dataProvider provideTestEmpty\n   */\n  public function testEmpty($data,\
    \ $expect) {\n    $this->assertSame($expect, empty($data));\n  }\n\n  public function\
    \ provideTestEmpty() {\n    return [\n      [[], true],\n      [null, true],\n\
    \      [[null], false],\n      [false, false],\n      [false, true],\n      [{},\
    \ true],\n      [[[]], true],\n      [[null], false],\n      [false, false],\n\
    \      [false, true],\n      [[{}], true],\n    ];\n  }\n\n  /**\n   * @dataProvider\
    \ provideTestNonEmpty\n   */\n  public function testNonEmpty($data, $expect) {\n\
    \    $this->assertSame($expect, !empty($data));\n  }\n\n  public function provideTestNonEmpty()\
    \ {\n    return [\n      [[1, []], false],\n      [[null, []], false],\n     \
    \ [[null, null], false],\n      [[null, false, null], false],\n      [[null, true],\
    \ true],\n      [[], [null]],\n      [[1], true],\n      [[1, 1], true],\n   \
    \ ];\n  }\n\n  /**\n   * @dataProvider provideTestString\n   */\n  public function\
    \ testString($data, $expect) {\n    $this->assertSame($expect, strlen($data));\n\
    \  }\n\n  public function provideTestString() {\n    return [\n      [[null],\
    \ 0],\n      [[], 0],\n      [[1], 1],\n      [[\"s\"], 1],\n      [[\"string\"\
    ], 6],\n      [[\"a\"], 2],\n      [[\"string\", true], 6],\n      [[\"string\"\
    , null], 0],\n      [[\"string\", false], 0],\n      [[\"string\", \"string\"\
    ], 6],\n      [[\"a\", \"\"], 2],\n      [[\"a\", true], 2],\n      [[\"a\", false],\
    \ 0],\n      [[\"a\", null], 0],\n      [[\"a\", []], 0],\n      [[\"a\", null],\
    \ 0],\n    ];\n  }\n\n  /**\n   * @dataProvider provideTestStringUnicode\n   */\n\
    \  public function testStringUnicode($data, $expect) {\n    $this->assertSame($expect,\
    \ mb_strlen($data));\n  }\n\n  public function provideTestStringUnicode() {\n\
    \    return [\n      [[null], 0],\n      [[], 0],\n      [[1], 1],\n      [[\"\
    s\"], 1],\n      [[\"string\"], 6],\n      [[\"a\"], 2],\n      [[\"string\",\
    \ true\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk42algw8.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function ($sum, $_) { return $sum + $_;\
    \ });\n}\n</code>\nThe same thing can be achieved with array_sum().\n<|/ a tags=php\
    \ |>\n<| a |>\nYou can try something like this.\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1s74r9jd.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_reduce(range(1, $n), function ($sum, $x) {\n        return\
    \ $sum + $x;\n    }, 0);\n}\n</code>\nAs a bonus, you can use this to calculate\
    \ all numbers from 1 to 100 with a function like this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3xxb6o61.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function($a, $b) { return $a + $b; },\
    \ 0);\n}\n</code>\n<|/ a |>\n<| a tags=sum,php,arrays |>\nI used array_reduce\
    \ to solve this problem\n<code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9pe9ddxk.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $r = 1;\n  for ($i = 1; $i <= $n; ++$i) {\n    $r *= $i;\n  }\n  return\
    \ $r;\n}\n</code>\n<|/ a dscore=5 tags=math,php,factorial |>\n<| c |>\nthanks,\
    \ this works great. I would like to implement this on my own but i'm not having\
    \ much luck.\n<|/ c |>\n<| a dscore=5 tags=math,php,factorial |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu4h4u6gs.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; ++$i)\n        $sum += $i;\n  \
    \  return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $result = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $result += $i + 1;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function($sum, $value){\n    return $sum\
    \ + $value;\n  });\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n = (int) $n;\n    return ($n <= 1) ? 1 : $n + sum_to_n($n - 1);\n}\n\
    function candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n <= 1 ? 1 : $n + sum_to_n($n - 1);\n}\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| c |>\nThis doesn't seem to work for me. The answer I get from this is\
    \ 15, but I think it's supposed to be 20. I'm pretty sure the answer is supposed\
    \ to be the same as the other two answers.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to fix the bug, try it now. I also added some more comments.\n<|/ c |>\n<| a\
    \ tags=algorithm,php dscore=1 |>\nThis doesn't seem to be a problem with your\
    \ code, but with the way that your input is structured. For each value that you're\
    \ taking the difference of, you have three inputs:\n<code>\nInput 1: $num1\nInput\
    \ 2: $num2\nInput 3: $num3\n</code>\nSo when you get to the end of the loop you're\
    \ essentially doing this:\n<code>\n$num1 = 20;\n$num2 = 20;\n$num3 = 20;\n$num3\
    \ = $num3 - $num1;\n</code>\nI suggest that you read in the input one at a time:\n\
    <code>\n$input = file_get_contents('php://stdin');\n$num1 = $num2 = $num3 = intval($input);\n\
    while (!is_nan($num3) && !is_nan($num1) && !is_nan($num2)) {\n  $num3 = $num3\
    \ - $num1;\n  $num1 = $num2;\n  $num2 = $num3;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This was helpful in trying to understand what was going on with my code. I'm going\
    \ to accept this answer because it was first, and because it's a more direct fix\
    \ than what I ended up doing.\n<|/ c |>\n<| a tags=algorithm,php |>\nThe original\
    \ question asks \"What is the smallest positive integer that is evenly divisible\
    \ by all of the integers from 1 to n\".  This solution can be adapted to this\
    \ question by simply replacing $num1 with $num2.\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjqwe04m1.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $result = 0;\n  for ($i = 1; $i < $n; $i++) {\n    $result += $i;\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0zpfotp9.php:26\n\
    Stack trace:\n#0 /tmp/tmp0zpfotp9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0zpfotp9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $i = 0;\n  while (true) {\n    echo $i++;\n    if ($i == $n) {\n      break;\n\
    \    }\n  }\n}\n</code>\n<|/ a tags=php,recursion |>\n<| c |>\nI really like the\
    \ idea of using an explicit for loop, I'm going to give it a try, I was trying\
    \ to figure out a way to make this work without using any loops.\n<|/ c |>\n<|\
    \ c |>\nThis is also what I was thinking but I was hoping to use a recursive function\
    \ instead of looping.  It was just an idea that came to mind. +1 for showing a\
    \ way to do it without looping.\n<|/ c |>\n<| c |>\nIt's a recursive function\
    \ that starts at 1 until $n is reached, which is why I said the base case was\
    \ $n == 0 and then return.  It will recurse until it reaches $n.\n<|/ c |>\n<|\
    \ c |>\nOh I just realized you said \"recursion without looping\".  I see what\
    \ you're saying, I'll give it a try.\n<|/ c |>\n<| a dscore=0 |>\nI wrote something\
    \ similar to your problem a while ago that used a loop that made up a recursion.\
    \ The difference between my solution and the others is the use of array_count_values().\
    \ It was very helpful for me.\n<code>\n<?php\n\nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3jsz8cun.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $numbers = range(1, $n);\n    $sum = 0;\n    foreach ($numbers as $value)\
    \ {\n        $sum += $value;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a dscore=1 tags=math,php,algorithm |>\n\
    <| c |>\n`sum_to_n(100)` returns `5050`, not `1010`\n<|/ c |>\n<| c |>\nIt returns\
    \ 5050. See the examples. This is an example on how to use recursion.\n<|/ c |>\n\
    <| c |>\nDid you read the examples?\n<|/ c |>\n<| c |>\nYes, I read them. My point\
    \ is that this is a very elegant solution, and I see no downside.\n<|/ c |>\n\
    <| c |>\nIt's also a good exercise to learn about [tail recursion](https://en.wikipedia.org/wiki/Tail_call),\
    \ which PHP is not optimized for.\n<|/ c |>\n<| a |>\nThis could be done with\
    \ a recursive function too:\n<code>\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn4jtadt2.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return ($n % 2 == 1)\n        ? $n * 3\n        : $n * 3 + 1;\n}\n\n\
    function candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2_6jdmf.php:24\n\
    Stack trace:\n#0 /tmp/tmpc2_6jdmf.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpc2_6jdmf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return array_reduce(range(1, $n), function ($sum, $i) { return $sum +\
    \ $i; });\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=php |>\nA simple recursive\
    \ function would be best.\n<code>\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwicv7ks8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return range(1, $n + 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvn92aruu.php:22\n\
    Stack trace:\n#0 /tmp/tmpvn92aruu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvn92aruu.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return (n * (n+1)) / 2;\n}\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpvxc0wgtn.php on line 14\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpvxc0wgtn.php on line 14\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpvxc0wgtn.php on line 14\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpvxc0wgtn.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvxc0wgtn.php:21\nStack trace:\n#0 /tmp/tmpvxc0wgtn.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvxc0wgtn.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n \
    \   }\n    return $sum;\n}\n$n = $_POST[\"n\"];\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $numbers = range(1, $n);\n  return array_sum($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  // Initialize the running total\n  $total = 0;\n  \n  // Iterate through\
    \ each number from 1 to n\n  for($i = 1; $i <= $n; $i++) {\n    // Add the number\
    \ to $total\n    $total += $i;\n  }\n  \n  // Return the running total\n  return\
    \ $total;\n}\n\n$number = 100;\n$sum_of_squares = $number * $number;\necho \"\
    Sum of squares from 1 to $number is:\".$sum_of_squares;\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Sum of squares from 1 to 100 is:10000
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n < 1) {\n        return 0;\n    }\n    return $n * self::sum_to_n($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use \"self\" when no class scope is active in /tmp/tmprp7tr1rd.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\n</code>\n<|/ a dscore=5 tags=php,loops,performance |>\n<| a |>\nThis\
    \ solution should work for you without having to use an array:\n<code>\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqmdl8qpp.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n + sum_to_n($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgtj44tau.php:25\n\
    Stack trace:\n#0 /tmp/tmpgtj44tau.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgtj44tau.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n\treturn (1 - pow($n, 3)) * pow($n, 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jl24b7_.php:22\n\
    Stack trace:\n#0 /tmp/tmp4jl24b7_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4jl24b7_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $sum += $i;\n \
    \   }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphy3r9755.php:26\n\
    Stack trace:\n#0 /tmp/tmphy3r9755.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphy3r9755.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n + array_sum(range(1, $n));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyohmosej.php:22\n\
    Stack trace:\n#0 /tmp/tmpyohmosej.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyohmosej.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n == 1 ? 1 : 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe40_vmol.php:23\n\
    Stack trace:\n#0 /tmp/tmpe40_vmol.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpe40_vmol.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n * array_sum(array_slice($array, 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, null given in\
    \ /tmp/tmpchbvvviz.php on line 14\n\nWarning: array_sum() expects parameter 1\
    \ to be array, null given in /tmp/tmpchbvvviz.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpchbvvviz.php:22\nStack trace:\n#0 /tmp/tmpchbvvviz.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpchbvvviz.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $n = (int)$n;\n  if ($n <= 1) {\n    return 1;\n  }\n  $sum = 0;\n  for\
    \ ($i = 2; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2z6s70dc.php:31\n\
    Stack trace:\n#0 /tmp/tmp2z6s70dc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2z6s70dc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function ($sum, $i) { return $sum + $i;\
    \ });\n}\n</code>\n<|/ a tags=php,php-5.3 dscore=1 |>\n<| a tags=php,php-5.3 |>\n\
    Just for fun, here's a version that uses array_reduce.\n<code>\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfsi3nqtv.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n *= 10;\n    $n = (int) $n;\n    $x = 0;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $x += $i;\n    }\n    return $x;\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgd2duoz.php:27\n\
    Stack trace:\n#0 /tmp/tmpzgd2duoz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzgd2duoz.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $n++;\n    $ans = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $ans\
    \ += $i;\n    }\n    return $ans;\n}\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx42ugwzk.php:26\n\
    Stack trace:\n#0 /tmp/tmpx42ugwzk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx42ugwzk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n * ($n + 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9w8q0wt.php:22\n\
    Stack trace:\n#0 /tmp/tmpk9w8q0wt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpk9w8q0wt.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $n = 0;\n  for($i = 1; $i <= $n; $i++) {\n    $n += $i;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqc_9lfe.php:25\n\
    Stack trace:\n#0 /tmp/tmpuqc_9lfe.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuqc_9lfe.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $s = 0;\n  for ($i = 1; $i <= $n; ++$i) {\n    $s += $i;\n  }\n  return\
    \ $s;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  $sum = 0;\n  for ($i = 1; $i <= $n; $i++)\n    $sum = $sum + $i;\n  return\
    \ $sum;\n}\n$time_sans_sum = time_sans_sum();\nfunction candidate(...$args) {\n\
    \    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function time_sans_sum()\
    \ in /tmp/tmpuhcf93b0.php:19\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpuhcf93b0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    $n--;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum\
    \ += $i;\n    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3mln811v.php:26\n\
    Stack trace:\n#0 /tmp/tmp3mln811v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3mln811v.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return $n * $n;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_dasu3t.php:23\n\
    Stack trace:\n#0 /tmp/tmpd_dasu3t.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd_dasu3t.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    if ($n <= 1) return 1;\n    else return $n + sum_to_n($n - 1);\n}\nfunction\
    \ candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $sum = 0;\n    for ($i = 1; $i <= $n; ++$i) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  if ($n <= 1) {\n    return 1;\n  }\n  $sum = 0;\n  for ($i = 1; $i <= $n;\
    \ $i++) {\n    $sum = $sum + $i;\n  }\n  return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !==\
    \ 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function($a, $b) {\n    return $a + $b;\n\
    \  });\n}\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    return $n + $n = $n + 1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpznu5xche.php:22\n\
    Stack trace:\n#0 /tmp/tmpznu5xche.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpznu5xche.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n  return array_reduce(range(1, $n), function ($c, $i) { return $c + $i; },\
    \ 0);\n}\n</code>\n<|/ a |>\n<| c |>\nI don't think `array_reduce` supports callbacks\
    \ that take two parameters.\n<|/ c |>\n<| c |>\n: Oops, you're right, sorry about\
    \ that. Looks like that PHP guy just forgot about `array_reduce`.\n<|/ c |>\n\
    <| a dscore=4 |>\nYou could use PHP's range() function instead:\n<code>\n<?php\n\
    \necho range('5', '10', 2).'<br>';\nfunction candidate(...$args) {\n    return\
    \ sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0c0yt37y.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>>\
    \ sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n//\
    \ 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n)\
    \ {\n    $s = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $s *= $i;\n    }\n\
    \    return $s;\n}\n</code>\nThis would be the more common way of doing it.  A\
    \ recursive function would have problems with large inputs, but the above example\
    \ would work nicely for smaller inputs.\n<|/ a tags=php,algorithm,arrays |>\n\
    <| c |>\nJust a small addition: instead of `($i = 1; $i < $n; $i++)` I would use\
    \ `($i = 1; $i <= $n; $i++)`. Not that big of a deal though.\n<|/ c |>\n<| c |>\n\
    : Actually, that's a pretty good point.  I just went with that example because\
    \ it's more common.  A loop that is initially `($i = 0)` and then `($i = 1)` is\
    \ very common.  I forgot about that :)\n<|/ c |>\n<| c |>\nIt's a bit unbelievable\
    \ how easy it is to go from 1-to-n when you have this much mathematical power...\n\
    <|/ c |>\n<| c |>\n: Yeah.  It's very easy to forget that you can do that in every\
    \ language.  I guess, in the end, that's how you learn something.\n<|/ c |>\n\
    <| c |>\n: I agree, but I'm a mathematician. :)\n<|/ c |>\n<| a tags=php,algorithm,arrays\
    \ |>\nThis is not a recursive function, but will solve the problem using an anonymous\
    \ function:\n<code>\n$sum = 1;\narray_walk(\n    $array,\n    function ($value)\
    \ use (&$sum) { $sum += $value; }\n);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ is definitely a better answer to the question.  It's more obvious to others\
    \ that we're summing elements in the array as we're using anonymous functions.\
    \  Also this can be used for arrays of any type.  It just doesn't scale well to\
    \ large arrays (the recursion would likely blow the call stack limit).\n<|/ c\
    \ |>\n<| a |>\nYou can create recursive function and use array_sum (http://php.net/array_sum)\n\
    <code>\nfunction candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp53pzg3hu.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
