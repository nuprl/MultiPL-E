name: HumanEval_87_get_row
language: php
results:
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $lst_tmp = array_map(function ($e) { return [$e]; }, $lst);\n  $row_tmp\
    \ = array_map(function ($e) { return array_slice($e, 0, $x); }, $lst_tmp);\n \
    \ $row_tmp = array_map(function ($e) { return array_reverse($e); }, $row_tmp);\n\
    \  array_map(function ($e) { sort($e); }, $row_tmp);\n  $lst_res = array_map(function\
    \ ($e) { return array_map(function ($e) { return $e[0]; }, $e); }, $lst_tmp);\n\
    \  return $lst_res;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfsr77nov.php:32\n\
    Stack trace:\n#0 /tmp/tmpfsr77nov.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpfsr77nov.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $ret = array();\n    $rows = array_count_values(array_map(function($e)\
    \ { return array_keys($e); }, $lst));\n    arsort($rows);\n    $keys = array_keys($rows);\n\
    \    foreach ($keys as $key)\n        if (!array_key_exists($x, $rows))\n    \
    \        continue 2;\n        foreach ($rows[$key] as $row)\n            $ret[]\
    \ = array($key, $row);\n    return $ret;\n}\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot 'continue' 2 levels in /tmp/tmp43ueb3md.php on line\
    \ 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  // Write your code in PHP7\n\n  $result = [];\n\n  for ($i = 0; $i\
    \ < count($lst); $i++) {\n    if (in_array($lst[$i], $x)) {\n      $result[] =\
    \ [$i, array_search($lst[$i], $x)];\n    }\n  }\n\n  usort($result, function ($a,\
    \ $b) {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: in_array() expects parameter 2 to be array, int given in /tmp/tmpq9xf79r2.php\
    \ on line 24\n\nWarning: in_array() expects parameter 2 to be array, int given\
    \ in /tmp/tmpq9xf79r2.php on line 24\n\nWarning: in_array() expects parameter\
    \ 2 to be array, int given in /tmp/tmpq9xf79r2.php on line 24\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpq9xf79r2.php:44\nStack trace:\n\
    #0 /tmp/tmpq9xf79r2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpq9xf79r2.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $res = array();\n  $rows = count($lst);\n  $cols = max(count($lst[0]),\
    \ 1);\n  $rows = count($lst);\n  $cols = max(count($lst[0]), 1);\n  $res = array();\n\
    \  for ($row = 0; $row < $rows; $row++) {\n    foreach ($lst[$row] as $col) {\n\
    \      if ($x == $col) {\n        $res[] = array($row, $col);\n        break;\n\
    \      }\n    }\n  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n  \
    \  return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1an6lj32.php:41\n\
    Stack trace:\n#0 /tmp/tmp1an6lj32.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1an6lj32.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $output = [];\n  $row = 0;\n  $max = $lst[0][0];\n  $min = $lst[0][0];\n\
    \n  for ($i = 0; $i < count($lst); $i++) {\n    $max = $row? max($max, $lst[$i][0])\
    \ : $lst[$i][0];\n    $min = $row? min($min, $lst[$i][0]) : $lst[$i][0];\n\n \
    \   $output[] = [$row, $max];\n    $output[] = [$row, $min];\n    $row++;\n  }\n\
    \n  // sort by row\n  uasort($output, function($a, $b) {\n    return $a[0] - $b[0];\n\
    \  });\n\n  // sort by columns\n  uasort($output, function($a, $b) {\n    return\
    \ $b[1] - $a[1];\n  });\n\n  $i = 0;\n  $out = [];\n  foreach($output as $tuple)\
    \ {\n    $out[] = [$tuple[0] + ($i == $x? 1: 0), $tuple[1] + ($i == $x? 1: 0)];\n\
    \    $i++;\n  }\n\n  return $out;\n}\n\n$input = [\n  [1, 2, 3, 4, 5, 6],\n  [1,\
    \ 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1],\n  [1, 2, 3, 4, 1, 2, 6],\n];\n\necho\
    \ \"<pre>\";\nprint_r($input);\necho \"</pre>\";\n\n$output = get_row($input,\
    \ 1);\necho \"<pre>\";\nprint_r($output);\necho \"</pre>\";\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 1\n    \
    \        [1] => 2\n            [2] => 3\n            [3] => 4\n            [4]\
    \ => 5\n            [5] => 6\n        )\n\n    [1] => Array\n        (\n     \
    \       [0] => 1\n            [1] => 2\n            [2] => 3\n            [3]\
    \ => 4\n            [4] => 1\n            [5] => 6\n        )\n\n    [2] => Array\n\
    \        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n\
    \            [3] => 4\n            [4] => 5\n            [5] => 1\n        )\n\
    \n    [3] => Array\n        (\n            [0] => 1\n            [1] => 2\n  \
    \          [2] => 3\n            [3] => 4\n            [4] => 1\n            [5]\
    \ => 2\n            [6] => 6\n        )\n\n)\n</pre><pre>Array\n(\n    [0] =>\
    \ Array\n        (\n            [0] => 0\n            [1] => 1\n        )\n\n\
    \    [1] => Array\n        (\n            [0] => 1\n            [1] => 2\n   \
    \     )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1]\
    \ => 1\n        )\n\n    [3] => Array\n        (\n            [0] => 1\n     \
    \       [1] => 1\n        )\n\n    [4] => Array\n        (\n            [0] =>\
    \ 2\n            [1] => 1\n        )\n\n    [5] => Array\n        (\n        \
    \    [0] => 2\n            [1] => 1\n        )\n\n    [6] => Array\n        (\n\
    \            [0] => 3\n            [1] => 1\n        )\n\n    [7] => Array\n \
    \       (\n            [0] => 3\n            [1] => 1\n        )\n\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp4h2x4utq.php:74\nStack\
    \ trace:\n#0 /tmp/tmp4h2x4utq.php(82): test()\n#1 {main}\n  thrown in /tmp/tmp4h2x4utq.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $return = array();\n  $maxRow = count($lst) - 1;\n  for ($row = 0;\
    \ $row <= $maxRow; ++$row) {\n    $maxCol = count($lst[$row]) - 1;\n    for ($col\
    \ = 0; $col <= $maxCol; ++$col) {\n      if ($lst[$row][$col] == $x) {\n     \
    \   $return[] = array($row, $col);\n      }\n    }\n  }\n  asort($return);\n \
    \ $ret = array_reverse($return);\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpud9uk0ig.php:39\n\
    Stack trace:\n#0 /tmp/tmpud9uk0ig.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpud9uk0ig.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array();\n    $cols = array_fill(0, count($lst[0]), 0);\n\
    \    for($i = 0; $i < count($lst); $i++) {\n        $row = array();\n        for($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            $row[] = $lst[$i][$j];\n   \
    \         $cols[$j] = $j;\n        }\n        $rows[] = $row;\n    }\n    usort($rows,\
    \ function($a, $b){return $b[0] <=> $a[0]});\n    usort($rows, function($a, $b){return\
    \ $b[0] <=> $a[0]});\n    $result = array();\n    for($i = 0; $i < count($rows);\
    \ $i++) {\n        $result[] = array($cols[$rows[$i][1] - 1], $rows[$i][0]);\n\
    \    }\n    usort($result, function($a, $b){return $b[1] <=> $a[1]});\n    usort($result,\
    \ function($a, $b){return $b[1] <=> $a[1]});\n    return $result;\n}\n</code>\n\
    It seems to me this function is an excellent candidate for Memoization, in particular,\
    \ Memoize\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp68o8kpg7.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $result = [];\n  $rows = array_map('array_values', array_map(function($a)\
    \ {\n    return array_fill(0, count($a), $x);\n  }, $lst));\n  asort($rows);\n\
    \  foreach ($rows as $row) {\n    $row = array_reverse($row);\n    asort($row);\n\
    \    $result[] = array_combine(range(0, count($row)), $row);\n  }\n  return $result;\n\
    }\n</code>\nThe above code is a bit long, but here it is in context:\n<code>\n\
    <?php\n\ndeclare(strict_types=1);\n\n/**\n * Finds integers x in a 2 dimensional\
    \ data, as a nested lists,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the list,\n * and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n * each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * get_row([\n * [1,2,3,4,5,6],\n * [1,2,3,4,1,6],\n * [1,2,3,4,5,1]\n * ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n * get_row([], 1) == []\n * get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n */\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpltmbs9ih.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (!is_array($lst) || count($lst) == 0) return [];\n    sort($lst);\n\
    \    $n = array_search($x, $lst);\n    $r = array_slice($lst, 0, $n + 1, true);\n\
    \    $c = array_slice($lst, $n, count($r));\n    return array_map(function($item)\
    \ use ($x, $r) {\n                return [$x, $r->max() + ($item[0] - 1)];\n \
    \           }, array_combine($r, $c));\n}\n</code>\n<|/ a |>\n<| c |>\nThe output\
    \ of`get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1) == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]` should be `[(0, 0), (1, 4), (1, 0)]`, not `[(0,\
    \ 0), (1, 4), (1, 0), (2, 5)]`\n<|/ c |>\n<| c |>\nYour test case is unclear,\
    \ `get_row([], 1) == []` but your test case is `get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n\
    [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]`, this output\
    \ is not correct, your test case output is  `[(0, 0), (1, 4), (1, 0), (2, 5)]`.\
    \ Maybe my code is not right but I think your code have some bugs, I think you\
    \ should fix them and edit your answer. :)\n<|/ c |>\n<| c |>\nSorry guys, i did\
    \ not test the code. The first version I wrote was wrong, I have edited my code.\
    \ Now it works as expected. \nThe test cases do not matter, the output must be\
    \ correct\n<|/ c |>\n<| c |>\nThank you very much. Your code is working. Yes,\
    \ the output must be correct and your code is working. Thank you very much for\
    \ that. But it seems your code has a bug. My code is working for 3 or more rows,\
    \ but it is not working for 2 or more rows. So i don't know where is the bug in\
    \ your code. Thank you very much again.\n<|/ c |>\n<| c |>\nThe input data is\
    \ also wrong. Please try your test case with my code: [1, 2, 3, 4, 5, 6], 1, get_row([[1,\
    \ 2, 3, 4, 5, 6]], 1)\n<|/ c |>\n<| a tags=php,sorting,multidimensional-array\
    \ dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzfiept_c.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (empty($lst)) return [];\n\n  $result = [];\n  for ($i = 0, $j =\
    \ 1; $i < count($lst); $i++) {\n    if ($x < $lst[$i][0]) {\n      $result[] =\
    \ [0, $j - 1];\n      $j = 1;\n    } else if ($x == $lst[$i][0]) {\n      $result[]\
    \ = [$i, $j];\n      $j++;\n    }\n  }\n  usort($result, function ($a, $b) {\n\
    \    return $a[0] - $b[0];\n  });\n\n  foreach ($result as $k => $v) {\n    $result[$k][1]\
    \ = $j;\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=1 tags=arrays,php,sorting\
    \ |>\nHere's a way to do it with foreach loops.\n<code>\n$coords = [\n    [ 1,\
    \ 2, 3, 4, 5 ],\n    [ 1, 2, 3, 4, 1, 6 ],\n    [ 1, 2, 3, 4, 5, 1 ],\n    [ ]\
    \ \n];\n\n$result = [];\n\nforeach( $coords as $row) {\n    foreach( $row as $col\
    \ => $val) {\n        if($val === 1) {\n            $coords[$row][$col] = $row;\n\
    \        }\n    }\n    asort($coords[$row]);\n}\n\nforeach( $coords as $row) {\n\
    \    foreach( $row as $col => $val) {\n        $result[] = array($row, $col);\n\
    \    }\n}\n\nprint_r($result);\n</code>\n<|/ a |>\n<| c |>\nThanks, but I need\
    \ the coordinates sorted by rows in ascending order, and then by columns in descending\
    \ order. \nThe result should be something like this: [(0, 0), (1, 4), (2, 5),\
    \ (3, 1)].\n<|/ c |>\n<| c |>\nThat's what the `asort` is doing. It first sorts\
    \ the inner arrays. Then it sorts the outer array by the first value of the inner\
    \ arrays. Is that not what you want?\n<|/ c |>\n<| c |>\nThe outer array should\
    \ be sorted in ascending order based on the first value of the inner arrays. Then\
    \ the inner arrays should be sorted in descending order based on the second value\
    \ of the inner arrays. \n\nThe result should be something like this: [(0, 0),\
    \ (1, 4), (2, 5), (3, 1)].\n<|/ c |>\n<| c |>\nAh! I see. My bad.\n<|/ c |>\n\
    <| a |>\nThis is an old question, but since this is one of the first results in\
    \ Google for \"PHP sort 2d array\", here is my take on a solution with a single\
    \ sort operation.\n<code>\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgg4el150.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n\t$lst = array_map(function($row) { return $row[$x-1]; }, $lst);\n\t\
    return array_map(function($col) { return array($x, $col-$x); }, array_column($lst,\
    \ ($x-1)));\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bbrs5pa.php:28\n\
    Stack trace:\n#0 /tmp/tmp2bbrs5pa.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2bbrs5pa.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $result = [];\n  foreach ($lst as $row) {\n    foreach ($row as $i\
    \ => $j) {\n      if ($j === $x) {\n        $result[] = [$i, $lst[0][$i] - $i];\n\
    \      }\n    }\n  }\n  usort($result, function($a, $b) {\n    if ($a[1] == $b[1])\
    \ {\n      return 0;\n    }\n    return ($a[1] < $b[1]) ? -1 : 1;\n  });\n  return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=php |>\nFor those that have\
    \ a matrix of N x M and want a NxM matrix of numbers that add up to the original\
    \ matrix, here's how I implemented it.\n<code>\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphotw6_8y.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (count($lst) < 1) {\n    return [];\n  }\n  $row = array();\n  $row_len\
    \ = count($lst[0]);\n  foreach ($lst as $key => $value) {\n    $col = get_column($lst,\
    \ $key);\n    if ($col[$x] == $row_len) {\n      array_push($row, array_combine($col,\
    \ array_fill(0, $row_len - 1, $value)));\n    }\n  }\n  ksort($row);\n  ksort($row[$row_len\
    \ - 1]);\n  $result = array();\n  $last = 0;\n  foreach ($row as $item) {\n  \
    \  $result[] = array($last, $item[$x]);\n    $last = $item[$x];\n  }\n  sort($result);\n\
    \  sort($result[0]);\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_column()\
    \ in /tmp/tmphfjkmu5a.php:25\nStack trace:\n#0 /tmp/tmphfjkmu5a.php(44): get_row(Array,\
    \ 1)\n#1 /tmp/tmphfjkmu5a.php(48): candidate(Array, 1)\n#2 /tmp/tmphfjkmu5a.php(56):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphfjkmu5a.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    $x = abs($x);\n\n    // find all rows containing\
    \ $x in their columns\n    $rows = array_filter($lst,\n        function($row)\
    \ use ($x) {\n            return array_search($x, array_column($row, 0));\n  \
    \      });\n\n    // sort all rows by column in descending order\n    usort($rows,\
    \ function($a, $b) use ($x) {\n        $a = array_column($a, 0);\n        $b =\
    \ array_column($b, 0);\n        $cmp = array_search($x, $a);\n        if ($cmp\
    \ !== false) {\n            $cmp = -$cmp;\n        }\n        return $cmp;\n \
    \   });\n\n    foreach ($rows as $row) {\n        // sort column coordinates in\
    \ descending order\n        usort($row, function($a, $b) use ($x) {\n        \
    \    $cmp = array_search($x, $b);\n            if ($cmp !== false) {\n       \
    \         $cmp = -$cmp;\n            }\n            return $cmp;\n        });\n\
    \n        // append coordinates to result\n        $result = array_merge($result,\
    \ $row);\n    }\n\n    return $result;\n}\n</code>\nTests:\n<code>\n<?php\n  \
    \  echo get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n\
    \    ], 1) . \"\\n\";\n    echo get_row([], 1) . \"\\n\";\n    echo get_row([[],\
    \ [1], [1, 2, 3]], 3) . \"\\n\";\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyjoj6sdx.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (!$lst) return [];\n  $i = null;\n  foreach ($lst as $row) {\n \
    \   if (is_array($row) && $i === null) {\n      $i = array_keys($row, $x);\n \
    \     sort($i, SORT_NUMERIC);\n      $i2 = array_keys(array_reverse($row), $x);\n\
    \      sort($i2, SORT_NUMERIC);\n      $row = $row;\n      asort($row);\n    \
    \  foreach ($i2 as $j) $j--;\n    }\n    if ($i) return [array_combine($i, $row)];\n\
    \  }\n  return [];\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_combine(): Both parameters should have an equal number\
    \ of elements in /tmp/tmpawclcanm.php on line 31\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpawclcanm.php:40\nStack trace:\n#0 /tmp/tmpawclcanm.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpawclcanm.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = array();\n  for ($i = 0; $i < count($lst); $i++) {\n    $rows[]\
    \ = array_slice($lst[$i], $i, count($lst[$i]) - $i);\n  }\n  usort($rows, function\
    \ ($a, $b) {\n    return -$a['row'] - $b['row'];\n  });\n  usort($rows, function\
    \ ($a, $b) {\n    return $a['col'] - $b['col'];\n  });\n  $index = 0;\n  $results\
    \ = array();\n  foreach ($rows as $row) {\n    $index = 0;\n    foreach ($row\
    \ as $col) {\n      if ($index == $x) {\n        $results[] = array('row' => $i,\
    \ 'col' => $index);\n        break;\n      }\n      $index++;\n    }\n  }\n  return\
    \ $results;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp931zaxkn.php:49\n\
    Stack trace:\n#0 /tmp/tmp931zaxkn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp931zaxkn.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    foreach($lst as $lst)\n    {\n        if ($lst[$x] == $x)\n     \
    \   {\n            return $lst;\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqthqfx1.php:32\n\
    Stack trace:\n#0 /tmp/tmpqqthqfx1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqqthqfx1.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    return array_map(function($col) use ($x, $lst) {\n        // sort\
    \ columns by descending order\n        usort($col, function($a, $b) {\n      \
    \      return $a > $b;\n        });\n\n        // sort rows by ascending order\
    \ of columns\n        usort($col, function($a, $b) {\n            return $a <\
    \ $b;\n        });\n\n        // sort by rows in descending order\n        usort($col,\
    \ function($a, $b) {\n            return $a - $b;\n        });\n\n        // find\
    \ and return the element by searching the sorted columns\n        return array_search($x,\
    \ $col);\n    }, $lst);\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmbkz_eh.php:45\n\
    Stack trace:\n#0 /tmp/tmpgmbkz_eh.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgmbkz_eh.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array_fill(0, count($lst[0]), 0);\n    $last_row = 0;\n \
    \   foreach ($lst as $row) {\n        foreach ($row as $key => $val) {\n     \
    \       if ($key == 0) {\n                $last_row = $key;\n            }\n \
    \           $rows[$key] += $val;\n        }\n    }\n    uasort($rows, function\
    \ ($a, $b) {\n        return $a == $b ? 0 : ($a < $b ? 1 : -1);\n    });\n   \
    \ uasort($rows, function ($a, $b) {\n        return $b == 0 ? -1 : ($a > $b ?\
    \ 1 : -1);\n    });\n    return array_filter(array_map(function ($key) use ($x,\
    \ $last_row) {\n        return [$key + $x, $key + $last_row];\n    }, $rows));\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbq2fsk6e.php:45\n\
    Stack trace:\n#0 /tmp/tmpbq2fsk6e.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbq2fsk6e.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $row = [];\n    $size = count($lst);\n    $y = $lst[0][$x];\n   \
    \ $j = 0;\n    foreach($lst as $i => $elm) {\n        if ($j == $x)\n        \
    \    $row[] = array($i, $y);\n        $y += $elm[$x];\n        $j++;\n    }\n\
    \    return $row;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7dnact5c.php:37\n\
    Stack trace:\n#0 /tmp/tmp7dnact5c.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7dnact5c.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst)) {\n        return [];\n    }\n\n    $m = count($lst);\n\
    \    $n = max(array_map('count', $lst));\n    $row = [];\n\n    for ($i = 0; $i\
    \ < $m; $i++) {\n        if ($x < $lst[$i][count($lst[$i]) - 1]) {\n         \
    \   $row[] = [$i, array_pop(array_slice($lst[$i], 0, -1))];\n        }\n    }\n\
    \n    ksort($row);\n    return array_map(function($v) { return [$v[0], $v[1] +\
    \ 1]; }, $row);\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp330weuum.php:42\n\
    Stack trace:\n#0 /tmp/tmp330weuum.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp330weuum.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $result = [];\n  // sort rows in descending order\n  krsort($lst, SORT_NUMERIC);\n\
    \  $rows = array_chunk($lst, count($lst[0]));\n  foreach ($rows as $row) {\n \
    \   foreach ($row as $col) {\n      if ($col == $x) {\n        $result[] = [count($row)\
    \ - 1, count(array_slice($row, 0, $col - 1))];\n      }\n    }\n  }\n  // sort\
    \ columns in ascending order\n  krsort($result);\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgdt1ay8p.php:40\n\
    Stack trace:\n#0 /tmp/tmpgdt1ay8p.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpgdt1ay8p.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if(!is_array($lst)) {\n    return false;\n  }\n\n  if($x == 0) {\n\
    \    $res = [];\n    foreach($lst as $row) {\n      $res += $row;\n    }\n   \
    \ return $res;\n  }\n\n  $l = count($lst);\n  if($x < 0) {\n    return false;\n\
    \  }\n  if($x > $l) {\n    return false;\n  }\n\n  // sort rows in ascending order\n\
    \  $arr = [];\n  foreach($lst as $key => $row) {\n    $arr[$key] = get_row($row,\
    \ $x - 1);\n  }\n  ksort($arr);\n\n  // sort columns in descending order\n  foreach($arr\
    \ as $key => $row) {\n    $arr[$key] = array_reverse($row);\n  }\n  krsort($arr);\n\
    \n  // return array of coordinates\n  $res = [];\n  foreach($arr as $row) {\n\
    \    $res += $row;\n  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp3zlqfjis.php:26\n\
    Stack trace:\n#0 /tmp/tmp3zlqfjis.php(42): get_row(Array, 0)\n#1 /tmp/tmp3zlqfjis.php(61):\
    \ get_row(Array, 1)\n#2 /tmp/tmp3zlqfjis.php(65): candidate(Array, 1)\n#3 /tmp/tmp3zlqfjis.php(73):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmp3zlqfjis.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $result = [];\n  $rows = count($lst);\n  for ($row = 0; $row < $rows;\
    \ $row++) {\n    $result[$row] = get_column($lst[$row], $x);\n  }\n  usort($result,\
    \ 'cmp');\n  return $result;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_column()\
    \ in /tmp/tmpi0ttsl9o.php:22\nStack trace:\n#0 /tmp/tmpi0ttsl9o.php(28): get_row(Array,\
    \ 1)\n#1 /tmp/tmpi0ttsl9o.php(32): candidate(Array, 1)\n#2 /tmp/tmpi0ttsl9o.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpi0ttsl9o.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $row = [];\n  foreach ($lst as $row_index => $row) {\n    foreach ($row\
    \ as $column_index => $element) {\n      if ($element == $x) {\n        $result[]\
    \ = [$row_index, $column_index];\n      }\n    }\n  }\n  return array_reverse(array_merge($result,\
    \ array_reverse($result)));\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ars8t0v.php:35\n\
    Stack trace:\n#0 /tmp/tmp_ars8t0v.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_ars8t0v.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $coords = array_map(function($arr) use ($x) {\n        return [$arr[0]\
    \ - 1, $arr[$x] - 1];\n    }, $lst);\n    usort($coords, 'cmp_rows');\n    return\
    \ array_map(function($row) use ($coords) {\n        return array_map(function($coord)\
    \ use ($x) {\n            return $coord[0] + 1;\n        }, $row);\n    }, $coords);\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp_rows' not found or invalid function name in /tmp/tmpg982w6sp.php on line\
    \ 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg982w6sp.php:35\n\
    Stack trace:\n#0 /tmp/tmpg982w6sp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpg982w6sp.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    $last_row = 0;\n    $last_column = 0;\n    $rows\
    \ = count($lst);\n    for($row = 0; $row < $rows; $row++) {\n        $columns\
    \ = count($lst[$row]);\n        $x = $columns - $x;\n        if($x <= 0) {\n \
    \           $result[] = array($last_row, $last_column);\n            break;\n\
    \        }\n        for($column = 0; $column < $columns; $column++) {\n      \
    \      $x = $x - $column;\n            if($x <= 0) {\n                $result[]\
    \ = array($last_row, $last_column);\n                break;\n            }\n \
    \           $result[] = array($row, $column);\n            $last_column = $column;\n\
    \        }\n        $last_row = $row;\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo840cn46.php:48\n\
    Stack trace:\n#0 /tmp/tmpo840cn46.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpo840cn46.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst) || empty($x)) return [];\n    $rows = array_keys($lst);\n\
    \    $ys = array_values($lst);\n    $rows = array_reverse($rows);\n    $cols =\
    \ array_keys($ys);\n    uasort($rows, function($a, $b) { return ($b - $a); });\n\
    \    uasort($cols, function($a, $b) { return ($b - $a); });\n    $coords = [];\n\
    \    for ($i = 0; $i < count($rows); $i++) {\n        $row = array_slice($rows,\
    \ $i, 1);\n        foreach ($cols as $j) {\n            if ($row[$j] == $x) {\n\
    \                $coords[] = [$i, $j];\n                break;\n            }\n\
    \        }\n    }\n    sort($coords);\n    return $coords;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdj_hyqua.php:45\n\
    Stack trace:\n#0 /tmp/tmpdj_hyqua.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpdj_hyqua.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $row_num = array_search($x, array_column($lst));\n  return $row_num\
    \ === false ? [] : array_map(function($val) use ($lst, $row_num){\n    return\
    \ array($row_num, $val - $lst[$row_num]);\n  }, array_column($lst, 0, $row_num));\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_column() expects at least 2 parameters, 1 given in /tmp/tmpx2h7bp7g.php\
    \ on line 19\n\nWarning: array_search() expects parameter 2 to be array, null\
    \ given in /tmp/tmpx2h7bp7g.php on line 19\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpx2h7bp7g.php:30\nStack trace:\n#0 /tmp/tmpx2h7bp7g.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx2h7bp7g.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $lst = sort_by_row($lst);\n  $x = sort_by_column($lst, $x);\n  $ret\
    \ = [];\n  foreach ($x as $row) {\n    $ret[] = array_slice($lst, ($row * count($lst[0])),\
    \ count($lst[0]));\n  }\n  return $ret;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_by_row()\
    \ in /tmp/tmptzdbrazd.php:19\nStack trace:\n#0 /tmp/tmptzdbrazd.php(29): get_row(Array,\
    \ 1)\n#1 /tmp/tmptzdbrazd.php(33): candidate(Array, 1)\n#2 /tmp/tmptzdbrazd.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptzdbrazd.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst)) return [];\n    $row = [];\n    foreach ($lst as\
    \ $row) {\n        foreach ($row as $val) {\n            if ($val == $x) {\n \
    \               $coord = $row;\n                break;\n            }\n      \
    \  }\n    }\n    $coord = array_reverse($coord);\n    ksort($coord);\n    $coord\
    \ = array_combine(array_keys($coord), array_map(null, $coord, $coord));\n    return\
    \ $coord;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdxtb0b8.php:39\n\
    Stack trace:\n#0 /tmp/tmpsdxtb0b8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpsdxtb0b8.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst) || empty($x)) {\n        return [];\n    }\n    $n\
    \ = count($lst[0]); // row\n    $m = count($lst); // col\n    $coords = [];\n\
    \    for ($i = 0; $i < $n; ++$i) {\n        $coords[$i] = []; // column\n    }\n\
    \    for ($i = 0; $i < $m; ++$i) {\n        $coords[$i][$i] = -1;\n    }\n   \
    \ for ($i = 0; $i < $n; ++$i) {\n        for ($j = 0; $j < $m; ++$j) {\n     \
    \       if ($lst[$i][$j] == $x) {\n                $coords[$i][$j] = ($i + 1,\
    \ $j + 1);\n            }\n        }\n    }\n    uasort($coords, 'compareRows');\n\
    \    return $coords;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3wz4b92m.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $ret = [];\n  foreach ($lst as $row) {\n    $ret[] = get_col($row,\
    \ $x);\n  }\n  usort($ret, function ($a, $b) {\n    if ($a[0] === $b[0]) {\n \
    \     return 0;\n    }\n    return ($a[0] < $b[0]) ? -1 : 1;\n  });\n  return\
    \ $ret;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_col() in\
    \ /tmp/tmp5a8y4tz1.php:21\nStack trace:\n#0 /tmp/tmp5a8y4tz1.php(33): get_row(Array,\
    \ 1)\n#1 /tmp/tmp5a8y4tz1.php(37): candidate(Array, 1)\n#2 /tmp/tmp5a8y4tz1.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5a8y4tz1.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  list($rows, $cols) = count($lst), count($lst[0]);\n  $rows = max(0,\
    \ $rows - $x);\n  $lst_of_tuples = [];\n  for ($row = 0; $row < $rows; $row++)\
    \ {\n    $row = [];\n    for ($col = 0; $col < $cols; $col++) {\n      $row[$col]\
    \ = isset($lst[$row][$col]) ? $lst[$row][$col] : false;\n    }\n    $lst_of_tuples[]\
    \ = $row;\n  }\n  $lst_of_tuples = array_values($lst_of_tuples);\n  usort($lst_of_tuples,\
    \ function ($a, $b) { return ($a[0] > $b[0]) - ($a[0] < $b[0]); });\n  usort($lst_of_tuples,\
    \ function ($a, $b) { return ($a[1] > $b[1]) - ($a[1] < $b[1]); });\n  return\
    \ $lst_of_tuples;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmparo21jla.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $row = [];\n    foreach ($lst as $key => $row) {\n        foreach\
    \ ($row as $col) {\n            if ($col == $x) {\n                array_push($row,\
    \ array_keys($row, 0));\n                return $row;\n            }\n       \
    \ }\n    }\n    return [];\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptsl030z7.php:35\n\
    Stack trace:\n#0 /tmp/tmptsl030z7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptsl030z7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $lst = is_array($lst) ? $lst : [[]];\n    $ret = [];\n    foreach\
    \ ($lst as $lst) {\n        $row = get_row($lst, $x);\n        if ($row) {\n \
    \           $ret[] = $row;\n        }\n    }\n    return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp822leblx.php:34\n\
    Stack trace:\n#0 /tmp/tmp822leblx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp822leblx.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $n = count($lst);\n    $m = count($lst[0]); // The number of columns\
    \ in the matrix\n    $ans = array();\n    for ($i=0; $i<$n; $i++) {\n        $tmp\
    \ = get_column($lst[$i], $x);\n        $tmp = array_reverse($tmp);\n        foreach\
    \ ($tmp as $k => $v) {\n            $ans[] = array((int)$i, (int)$k);\n      \
    \  }\n    }\n    $ans = array_merge($ans, array(array(0, $n-1)));\n    sort($ans);\n\
    \    return $ans;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_column()\
    \ in /tmp/tmprsvfskvj.php:23\nStack trace:\n#0 /tmp/tmprsvfskvj.php(35): get_row(Array,\
    \ 1)\n#1 /tmp/tmprsvfskvj.php(39): candidate(Array, 1)\n#2 /tmp/tmprsvfskvj.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprsvfskvj.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = [];\n  foreach ($lst as $row) {\n    if (array_search($x, $row)\
    \ !== false) {\n      $rows[] = [$row];\n    }\n  }\n  return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp950233_l.php:33\n\
    Stack trace:\n#0 /tmp/tmp950233_l.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp950233_l.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $xs = array_values($lst);\n  $r = [];\n  for ($i = 0; $i < count($xs);\
    \ ++$i) {\n    list($i, $j) = get_next_index($xs, $i, $x);\n    $r[] = [$i, $j];\n\
    \  }\n  return $r;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_next_index()\
    \ in /tmp/tmpjkgmffme.php:22\nStack trace:\n#0 /tmp/tmpjkgmffme.php(28): get_row(Array,\
    \ 1)\n#1 /tmp/tmpjkgmffme.php(32): candidate(Array, 1)\n#2 /tmp/tmpjkgmffme.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjkgmffme.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst) || empty($x)) {\n        return [];\n    }\n    $rows\
    \ = [];\n    foreach ($lst as $i => $l) {\n        $rows[] = array_combine(array_slice($l,\
    \ $x, 1), array_slice($l, $x, $x));\n    }\n    array_multisort(array_map(function\
    \ ($row) {\n            return array_reverse($row);\n        }, $rows), SORT_DESC,\
    \ SORT_NUMERIC);\n    return $rows;\n}\n</code>\nThis can be further optimized\
    \ by using array_reduce instead of array_map.\n<|/ a tags=matrix,php,algorithm\
    \ dscore=0 |>\n<| a |>\n<code>\n<?php\n$input = [\n        [1, 2, 3, 4, 5, 6],\n\
    \        [1, 2, 3, 4, 1, 6],\n        [1, 2, 3, 4, 5, 1]\n];\n\n$expectedOutput\
    \ = [\n    [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)],\n    [],\n    [(2, 2)]\n\
    ];\n\n$result = array_map(function ($row) {\n    return array_map(function ($cell)\
    \ {\n        return [$cell + $row];\n    }, $row);\n}, array_chunk($input, 3));\n\
    \n$result = array_map(function ($row) {\n    return array_map(function ($cell)\
    \ {\n        $cell = [$cell];\n        $row = array_map(function ($cell) {\n \
    \           return [floor($cell / 10)];\n        }, $row);\n        $row = array_map(function\
    \ ($cell) use ($row) {\n            return [$cell % 10];\n        }, $row);\n\
    \        $row[0] .= array_shift($row[0]);\n        return $row + $cell;\n    },\
    \ $row);\n}, $result);\n\necho \"<pre>\";\nprint_r(array_merge(array_map(function\
    \ ($row) {\n    return array_map(function ($cell) {\n        return $cell[0];\n\
    \    }, $row);\n}, $result), $result));\n\necho \"</pre>\";\n</code>\nOutput:\n\
    <code>\nArray\n(\n    [0] => Array\n        (\n            [0] => Array\n    \
    \            (\n                    [0] => 0\n                    [1] => 4\n \
    \                   [2] => 0\n                )\n\n            [1] => Array\n\
    \                (\n                    [0] => 0\n                    [1] => 0\n\
    \                    [2] => 5\n                )\n\n            [2] => Array\n\
    \                (\n                    [0] => 0\n                    [1] => 0\n\
    \                    [2] => 0\n                )\n\n        )\n\n    [1] => Array\n\
    \        (\n            [0] => Array\n                (\n                    [0]\
    \ => 2\n                )\n\n        )\n\n    [2] => Array\n        (\n      \
    \      [0] => Array\n                (\n                    [0] => 2\n       \
    \         )\n\n        )\n\n)\n</code>\n<|/ a dscore=0 tags=\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuzmls17e.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = array();\n    $rows = count($lst);\n    for($i = 0; $i\
    \ < $rows; $i++) {\n        $cols = count($lst[$i]);\n        for($j = $i; $j\
    \ < $cols; $j++) {\n            if(($lst[$i][$j] === $x) || ($lst[$i][$j] ===\
    \ ($x - 1))) {\n                $result[] = array($i, $j);\n                break;\n\
    \            }\n        }\n    }\n    usort($result, 'cmp');\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmp647eu05y.php on line 30\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp647eu05y.php:39\nStack\
    \ trace:\n#0 /tmp/tmp647eu05y.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp647eu05y.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = array();\n    $m = count($lst);\n    $n = count($lst[0]);\n\
    \n    for ($y = 0; $y < $n; $y++) {\n        foreach ($lst as $i => $row) {\n\
    \            if ($y == 0) {\n                $j = 0;\n            } else {\n \
    \               $j = $lst[$i - 1][$y];\n            }\n            if ($x == $j)\
    \ {\n                $result[] = array($i, $y);\n                break;\n    \
    \        }\n        }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkbznwsk.php:45\n\
    Stack trace:\n#0 /tmp/tmprkbznwsk.php(53): test()\n#1 {main}\n  thrown in /tmp/tmprkbznwsk.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = array_fill(0, count($lst), []);\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    $rows[$i] = $lst[$i];\n  }\n\n  usort($rows, function ($a, $b)\
    \ {\n    $cmp_a = array_search($a, $rows);\n    $cmp_b = array_search($b, $rows);\n\
    \    if ($cmp_a === false) {\n      return 1;\n    }\n\n    if ($cmp_b === false)\
    \ {\n      return -1;\n    }\n\n    return $cmp_b - $cmp_a;\n  });\n\n  $row_size\
    \ = count($rows);\n  for ($i = 0; $i < $row_size; $i++) {\n    $rows[$i] = array_splice($rows[$i],\
    \ $x - 1);\n  }\n\n  return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmpx1zec0by.php on line 25\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmpx1zec0by.php on line 26\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmpx1zec0by.php on line\
    \ 25\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmpx1zec0by.php on line 26\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpx1zec0by.php:51\nStack trace:\n#0 /tmp/tmpx1zec0by.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmpx1zec0by.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = array();\n  $columns = array();\n  $x = max($x, 1);\n  foreach\
    \ ($lst as $row) {\n    array_push($columns, count($row));\n    foreach ($row\
    \ as $c) {\n      if ($c <= $x) {\n        $rows[] = array($x, $c);\n      }\n\
    \      $x--;\n    }\n  }\n  array_multisort($columns, $rows, $lst);\n  return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmp7a_691g4.php\
    \ on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7a_691g4.php:40\n\
    Stack trace:\n#0 /tmp/tmp7a_691g4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7a_691g4.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array_map(function($row) {\n        $r = array_map(function($e)\
    \ {\n            return $e;\n        }, $row);\n        asort($r);\n        return\
    \ $r;\n    }, $lst);\n    $rows = array_filter($rows, function($a) {\n       \
    \ return count(array_filter($a)) === 1;\n    });\n    $rows2 = array_map(function($a)\
    \ {\n        return array_map('count', $a);\n    }, $rows);\n    $rows3 = array_map(function($a)\
    \ {\n        return array_sum($a);\n    }, $rows);\n    $x = $x - 1;\n    if ($x\
    \ < count($rows2)) {\n        $y = $rows2[$x];\n        return array_map(function($a)\
    \ use ($x, $y) {\n            return array($x, $y - $x);\n        }, $rows3[$x]);\n\
    \    }\n    return array();\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcobhgk5t.php:50\n\
    Stack trace:\n#0 /tmp/tmpcobhgk5t.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpcobhgk5t.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $m = count($lst);\n  $n = count($lst[0]);\n  // Sort the coordinates\
    \ initially by rows in ascending order\n  $coords = array_map(function($row) use($n){\n\
    \    return array_map(function($j) use($n){\n      return $j * ($n + 1) - $j -\
    \ $n + $row;\n    }, $row);\n  }, array_flip(array_map(function($row) use($n){\n\
    \    return array_flip($row);\n  }, $lst)));\n\n  // Sort coordinates of each\
    \ row by columns in descending order\n  krsort($coords);\n\n  // Get the coordinates\n\
    \  $coords = array_map(function($coord) use($x, $n){\n    return $coord * $n +\
    \ $x;\n  }, array_flip($coords));\n\n  // Return sorted coordinates\n  $coords\
    \ = array_map(function($coord) use($m){\n    return $coord % $m;\n  }, array_flip($coords));\n\
    \n  return $coords;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_flip(): Can only flip STRING and INTEGER values! in /tmp/tmppzkut7d7.php\
    \ on line 28\n\nWarning: array_flip(): Can only flip STRING and INTEGER values!\
    \ in /tmp/tmppzkut7d7.php on line 28\n\nWarning: array_flip(): Can only flip STRING\
    \ and INTEGER values! in /tmp/tmppzkut7d7.php on line 28\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppzkut7d7.php:51\nStack trace:\n#0 /tmp/tmppzkut7d7.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppzkut7d7.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array();\n    foreach($lst as $row) {\n        $row_x = array();\n\
    \        foreach($row as $c) {\n            $row_x[] = array($c, $c - $x);\n \
    \       }\n        $rows[] = $row_x;\n    }\n    return $rows;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2baemcs.php:34\n\
    Stack trace:\n#0 /tmp/tmpp2baemcs.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpp2baemcs.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    asort($lst);\n    $rows = array();\n    $i = -1;\n    $last_row =\
    \ -1;\n    foreach($lst as $row) {\n        $i++;\n        asort($row);\n    \
    \    $rows[$i] = $row;\n        if ($i == $last_row) {\n            break;\n \
    \       }\n        $last_row = $i;\n    }\n    foreach($rows as $row) {\n    \
    \    if (in_array($x, $row)) {\n            $result = [];\n            $i = 0;\n\
    \            $last_column = 0;\n            foreach($row as $column) {\n     \
    \           $result[] = [$i, $last_column];\n                $last_column++;\n\
    \                if ($i == $x) {\n                    break;\n               \
    \ }\n                $i++;\n            }\n            asort($result);\n     \
    \       return $result;\n        }\n    }\n}\n</code>\n<|/ a dscore=1 tags=matrix,php,algorithm\
    \ |>\n<| c |>\nHi, your code is working fine, but I am having some trouble implementing\
    \ it with PHP. Could you take a look at it? https://stackoverflow.com/questions/51905250/php-recursive-function-not-working\n\
    <|/ c |>\n<| a tags=matrix,php,algorithm dscore=1 |>\nHere's my recursive solution\
    \ in javascript:\n<code>\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9qorkl9v.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $new_lst = array();\n    foreach($lst as $k => $v) {\n        if(count($v)\
    \ == 0) {\n            $new_lst[] = array();\n        } else {\n            $temp\
    \ = get_row($v, $x);\n            array_push($new_lst, (count($temp) ? array_combine(array_keys($v),\
    \ $temp) : array()));\n        }\n    }\n    return count($new_lst) ? $new_lst\
    \ : array();\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpar6h797q.php on line 21\n\nWarning: Invalid argument supplied\
    \ for foreach() in /tmp/tmpar6h797q.php on line 20\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpar6h797q.php\
    \ on line 21\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpar6h797q.php\
    \ on line 20\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpar6h797q.php on line 21\n\nWarning: Invalid\
    \ argument supplied for foreach() in /tmp/tmpar6h797q.php on line 20\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpar6h797q.php on line 21\n\nWarning: Invalid argument supplied for foreach()\
    \ in /tmp/tmpar6h797q.php on line 20\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmpar6h797q.php on line\
    \ 21\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpar6h797q.php\
    \ on line 20\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpar6h797q.php on line 21\n\nWarning: Invalid\
    \ argument supplied for foreach() in /tmp/tmpar6h797q.php on line 20\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpar6h797q.php on line 21\n\nWarning: Invalid argument supplied for foreach()\
    \ in /tmp/tmpar6h797q.php on line 20\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmpar6h797q.php on line\
    \ 21\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpar6h797q.php\
    \ on line 20\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpar6h797q.php on line 21\n\nWarning: Invalid\
    \ argument supplied for foreach() in /tmp/tmpar6h797q.php on line 20\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpar6h797q.php on line 21\n\nWarning: Invalid argument supplied for foreach()\
    \ in /tmp/tmpar6h797q.php on line 2"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $new_lst = array();\n  for($i = 0; $i < count($lst); $i++) {\n    for($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n      if($lst[$i][$j] == $x) {\n       \
    \ array_push($new_lst, ($i, $j));\n      }\n    }\n  }\n  arsort($new_lst);\n\
    \  return $new_lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu489lilj.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $lst_r = $lst_c = [];\n  for ($row = 0; $row < count($lst); $row++)\
    \ {\n    $lst_c[] = array_fill(0, count($lst[$row]), $row);\n    $lst_r[] = $lst_c[$row];\n\
    \  }\n  $lst_r[$x] = array_reverse($lst_r[$x]);\n\n  return $lst_r[$x];\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_1bpsi3.php:34\n\
    Stack trace:\n#0 /tmp/tmpd_1bpsi3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpd_1bpsi3.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array_count_values($lst[0]);\n    $rows = array_filter($rows,\
    \ function ($num) {\n        return $num != 0;\n    });\n    $rows = array_keys($rows);\n\
    \n    asort($rows);\n    $rows = array_reverse($rows);\n\n    $cols = array_count_values(array_slice($lst[0],\
    \ 0, $rows[0]));\n    $cols = array_filter($cols, function ($num) {\n        return\
    \ $num != 0;\n    });\n    $cols = array_keys($cols);\n\n    asort($cols);\n \
    \   $cols = array_reverse($cols);\n\n    $res = array();\n    foreach ($rows as\
    \ $row) {\n        $res = array_merge($res, $get_row(array_slice($lst, 0, $row),\
    \ $x - $rows[$row]));\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp4e8l84x7.php:39\n\
    Stack trace:\n#0 /tmp/tmp4e8l84x7.php(44): get_row(Array, 1)\n#1 /tmp/tmp4e8l84x7.php(48):\
    \ candidate(Array, 1)\n#2 /tmp/tmp4e8l84x7.php(56): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp4e8l84x7.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $results = [];\n    // Sort the first dimension initially by rows\n\
    \    usort($lst, function($a, $b) use (&$results) {\n        $a = array_keys($a);\n\
    \        $b = array_keys($b);\n        if ($a[0] === $b[0]) {\n            return\
    \ $a[0] <=> $b[0];\n        } else {\n            return $a[0] <=> $b[0];\n  \
    \      }\n    });\n    // Sort the second dimension initially by columns in descending\
    \ order\n    usort($lst, function($a, $b) use (&$results) {\n        $a = array_reverse($a);\n\
    \        $b = array_reverse($b);\n        if ($a[0] === $b[0]) {\n           \
    \ return $a[1] <=> $b[1];\n        } else {\n            return $a[1] <=> $b[1];\n\
    \        }\n    });\n    foreach ($lst as $lst) {\n        $row = array_flip($lst[0]);\n\
    \        if ($row[$x] === $x) {\n            $results[] = array_flip(array_keys($lst));\n\
    \        }\n    }\n    return $results;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_flip() expects parameter 1 to be array, int given in /tmp/tmpss5suxy4.php\
    \ on line 41\n\nWarning: array_flip() expects parameter 1 to be array, int given\
    \ in /tmp/tmpss5suxy4.php on line 41\n\nWarning: array_flip() expects parameter\
    \ 1 to be array, int given in /tmp/tmpss5suxy4.php on line 41\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpss5suxy4.php:54\nStack trace:\n\
    #0 /tmp/tmpss5suxy4.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpss5suxy4.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = array_map(function ($lst) { return array_slice($lst, 0, $x);\
    \ }, $lst);\n  array_multisort(array_map('array_reverse', $rows), SORT_DESC, SORT_NUMERIC,\
    \ $rows);\n  $result = array_map(function ($lst) { return array_combine(array_slice($lst,\
    \ 0, $x),\n    array_slice($lst, $x, count($lst))); }, $rows);\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkf8r7cs.php:30\n\
    Stack trace:\n#0 /tmp/tmpnkf8r7cs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnkf8r7cs.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst)) {\n        return [];\n    }\n\n    $res = $lst[0];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        $res = array_intersect_key($res,\
    \ array_flip($lst[$i]));\n    }\n\n    return array_flip($res);\n}\n</code>\n\
    It works like this in python:\n<code>\nlst = [[1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n\
    \        [1,2,3,4,5,1]]\n\nprint(get_row(lst,1)) # [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)]\nprint(get_row([],1)) # []\nprint(get_row(lst,3)) # [(2, 2)]\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThank you. This was\
    \ helpful. Although it did not answer the problem stated above, I think this is\
    \ a better way to go about it because it makes clear that each row is a coordinate\
    \ and that the order is by column.\n<|/ c |>\n<| a dscore=2 |>\nMy take on it\
    \ is just to go through each row, and for each element in the row check whether\
    \ the element exists in any of the columns. \nIf it does not, just push it onto\
    \ a results array. The below code does this and assumes every array row is of\
    \ equal length, otherwise it will not work.\n<code>\n<?php\n\n$array = [\n   \
    \ [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n];\n\n$result = [];\n\
    \nforeach ($array as $row)\n{\n    foreach ($row as $key => $val)\n    {\n   \
    \     if (!in_array($key, $result))\n        {\n            $result[] = $key;\n\
    \        }\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=1 |>\nA more efficient solution would be to sort the array of\
    \ rows by column, and then search through the sorted array for the desired value.\
    \  In Python it looks like this:\n<code>\ndef findValue(array, col, value):\n\
    \    rows = [row[:] for row in array]\n    rows.sort(key=lambda row: row[::-1][col])\n\
    \    for row in rows:\n        if value in row:\n            return row, col\n\
    \    return None, None\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxzhn3car.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (!is_array($lst)) {\n        return [];\n    }\n\n    $row = array_filter($lst,\
    \ function($entry) use ($x) {\n        return $entry[$x];\n    });\n\n    $sortedRow\
    \ = $row;\n    usort($sortedRow, function($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return 0;\n        }\n\n        return ($a[0] < $b[0]) ? -1 :\
    \ 1;\n    });\n\n    $sortedRow = $sortedRow;\n    usort($sortedRow, function($a,\
    \ $b) {\n        if ($a[1] == $b[1]) {\n            return 0;\n        }\n\n \
    \       return ($a[1] < $b[1]) ? -1 : 1;\n    });\n\n    return array_map(function($entry)\
    \ use ($x) {\n        return array_combine(range((int) $entry[0], (int) $entry[1]),\
    \ range((int) $entry[1], (int) $entry[2]+1));\n    }, $sortedRow);\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_combine(): Both parameters should have an equal number\
    \ of elements in /tmp/tmpxago3ykq.php on line 46\n\nWarning: array_combine():\
    \ Both parameters should have an equal number of elements in /tmp/tmpxago3ykq.php\
    \ on line 46\n\nWarning: array_combine(): Both parameters should have an equal\
    \ number of elements in /tmp/tmpxago3ykq.php on line 46\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxago3ykq.php:55\nStack trace:\n#0 /tmp/tmpxago3ykq.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxago3ykq.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    foreach ($lst as $row) {\n        if (in_array($x,\
    \ $row)) {\n            $result[] = array_search($x, $row);\n        }\n    }\n\
    \    if (empty($result)) {\n        return [];\n    } else {\n        sort($result);\n\
    \        arsort($result);\n        return array_slice($result, 0, -1);\n    }\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThat is exactly what I wanted. Thanks a lot. I\
    \ also want to know what is the time complexity of this solution?\n<|/ c |>\n\
    <| c |>\nI am afraid that your algorithm is O(N^2), since you go through the entire\
    \ matrix for each row. O(N^2) is bad.\n<|/ c |>\n<| a tags=arrays,algorithm,php\
    \ dscore=2 |>\n<code>\n<?php\n$arr = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n\
    \    [9, 10, 11, 12],\n];\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7n1oucca.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $n = count($lst);\n    $rows = [];\n    $y = 0;\n    foreach ($lst\
    \ as $row) {\n        $y += count($row);\n        $i = 0;\n        foreach ($row\
    \ as $j=>$e) {\n            if ($i == $x) {\n                $rows[] = [$i, $y];\n\
    \                $y += 1;\n            }\n            $i += 1;\n        }\n  \
    \  }\n    usort($rows, function($a, $b) {\n        return $b[1] - $a[1];\n   \
    \ });\n    foreach($rows as $r) {\n        $cols = get_col($lst, $r[0]);\n   \
    \     usort($cols, function($a, $b) {\n            return $b[0] - $a[0];\n   \
    \     });\n        foreach($cols as $c) {\n            $result[] = [$r[0], $c[0]];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_col() in\
    \ /tmp/tmpiwupqidh.php:37\nStack trace:\n#0 /tmp/tmpiwupqidh.php(49): get_row(Array,\
    \ 1)\n#1 /tmp/tmpiwupqidh.php(53): candidate(Array, 1)\n#2 /tmp/tmpiwupqidh.php(61):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpiwupqidh.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $result = [];\n  for ($i = 0; $i < $lst[0].length; $i++) {\n    $result[$i]\
    \ = [];\n  }\n  for ($i = 0; $i < $lst.length; $i++) {\n    for ($j = 0; $j <\
    \ $lst[0].length; $j++) {\n      if ($lst[$i][$j] == $x) {\n        $result[$i][$j]\
    \ = $i;\n      }\n    }\n  }\n  usort($result, 'cmp');\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmppphu20k2.php on line 20\n\
    \nWarning: Use of undefined constant length - assumed 'length' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmppphu20k2.php on line 23\n\n\
    Warning: usort() expects parameter 2 to be a valid callback, function 'cmp' not\
    \ found or invalid function name in /tmp/tmppphu20k2.php on line 30\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmppphu20k2.php:39\nStack trace:\n\
    #0 /tmp/tmppphu20k2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmppphu20k2.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    $row = 0;\n    $column_counter = 0;\n    foreach\
    \ ($lst as $lst) {\n        if ($row == 0) {\n            $row++;\n          \
    \  $column_counter = 0;\n            $result[] = array(0, 0);\n        }\n   \
    \     if ($column_counter > $x) {\n            $column_counter = 0;\n        \
    \    $row++;\n            $result[] = array(0, 0);\n        }\n        $result[]\
    \ = array((int)$lst[$row], (int)$column_counter);\n        $column_counter++;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflkwotgd.php:44\n\
    Stack trace:\n#0 /tmp/tmpflkwotgd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpflkwotgd.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = [];\n    $row_x = $x;\n    foreach ($lst as $row) {\n   \
    \     // Get list of columns from current row.\n        $cols = [];\n        foreach\
    \ ($row as $col) {\n            $cols[] = $col;\n        }\n        \n       \
    \ // If current row does not contain x\n        if (array_search($row_x, $cols)\
    \ === false) {\n            // Add current row to result list, starting from next\
    \ row.\n            $new_row = [];\n            foreach ($row as $col) {\n   \
    \             $new_row[] = $col;\n            }\n            $rows[] = $new_row;\n\
    \            continue;\n        }\n        \n        // Get tuples for found x.\n\
    \        $coords = array_flip(\n            array_filter(\n                $cols,\n\
    \                function ($col) use ($row_x) {\n                    return $col\
    \ === $row_x;\n                }\n            )\n        );\n\n        // Add\
    \ found x to row with found coords.\n        $rows[] = $coords + [1 => count($cols)\
    \ - count($coords)];\n    }\n    \n    foreach ($rows as &$row) {\n        array_multisort($row,\
    \ SORT_DESC);\n    }\n    \n    return array_map(function ($v) {\n        return\
    \ [$v[0] + 1, $v[1] + 1];\n    }, $rows);\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstoe346g.php:67\n\
    Stack trace:\n#0 /tmp/tmpstoe346g.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpstoe346g.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $arr = [];\n    foreach($lst as $arrRow) {\n        $found = false;\n\
    \        foreach($arrRow as $key => $value) {\n            if($value == $x) {\n\
    \                $found = true;\n                unset($arrRow[$key]);\n     \
    \           break;\n            }\n        }\n        if(!$found) {\n        \
    \    continue;\n        }\n        $arr[] = [array_search($x, array_column($arrRow,\
    \ 0))];\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmexo7xtw.php:42\n\
    Stack trace:\n#0 /tmp/tmpmexo7xtw.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmexo7xtw.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $out = [];\n    foreach($lst as $row) {\n        foreach($row as\
    \ $n) {\n            if ($n===$x) {\n                $out[] = [count($row), count($row)-1];\n\
    \                break;\n            }\n        }\n    }\n    array_multisort($out,\
    \ SORT_DESC, SORT_NUMERIC, $lst);\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdhpmi90_.php:37\n\
    Stack trace:\n#0 /tmp/tmpdhpmi90_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdhpmi90_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = [];\n    foreach ($lst as $row) {\n        $rows[] = $row;\n\
    \    }\n    usort($rows, function ($a, $b) {\n        $rowA = $a;\n        $rowB\
    \ = $b;\n        foreach ($rowA as $k => $v) {\n            if ($k !== 0) return\
    \ $v;\n        }\n        foreach ($rowB as $k => $v) {\n            if ($k !==\
    \ 0) return $v;\n        }\n        return 0;\n    });\n    usort($rows, function\
    \ ($a, $b) {\n        $rowA = $a;\n        $rowB = $b;\n        foreach ($rowA\
    \ as $k => $v) {\n            if ($k !== 0) return -$v;\n        }\n        foreach\
    \ ($rowB as $k => $v) {\n            if ($k !== 0) return -$v;\n        }\n  \
    \      return 0;\n    });\n    $index = 0;\n    $found = [];\n    foreach ($rows\
    \ as $row) {\n        $found[$index] = [];\n        $index++;\n        foreach\
    \ ($row as $k => $v) {\n            if ($k === $x) return [($index - 1), $index];\n\
    \            $found[$index][] = $k;\n        }\n    }\n    return $found;\n}\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n<?php\n\n$matrix = [\n   \
    \ [1,2,3,4,5,6,7,8],\n    [1,2,3,4],\n    [1,2],\n    [1,2,3],\n    [1,2,4,5,6,7,8]\n\
    ];\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3h6vqg6_.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array_count_values(array_column($lst, (0)));\n    $sorted_rows\
    \ = array_reverse($rows);\n    $result = [];\n    foreach($sorted_rows as $row)\
    \ {\n        $sorted_cols = array_reverse($row);\n        $sorted_cols_map = array_flip($sorted_cols);\n\
    \        $coords = [];\n        foreach($lst as $row) {\n            if (array_search($x,\
    \ $row) !== false) {\n                $coords[] = $sorted_cols_map[array_search($x,\
    \ $row)];\n            }\n        }\n        $result = $result + array_chunk($coords,\
    \ 2);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, int given in\
    \ /tmp/tmpsuoh98xt.php on line 23\n\nWarning: array_flip() expects parameter 1\
    \ to be array, null given in /tmp/tmpsuoh98xt.php on line 24\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsuoh98xt.php:41\nStack trace:\n#0 /tmp/tmpsuoh98xt.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsuoh98xt.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    foreach ($lst as $key => $row) {\n        $result[$key]\
    \ = [];\n        foreach ($row as $k => $val) {\n            if ($x == $k) {\n\
    \                $result[$key][] = [$key, $k];\n            }\n        }\n   \
    \ }\n    usort($result, function($a, $b) {\n        return $a[0] < $b[0] ? 1 :\
    \ -1;\n    });\n    $result = [];\n    foreach ($result as $k => $val) {\n   \
    \     $result[] = array_combine($val[1], $val[0]);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wc8kr6d.php:43\n\
    Stack trace:\n#0 /tmp/tmp6wc8kr6d.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6wc8kr6d.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $row = [];\n  $row_sorted = [];\n  $col_sorted = [];\n  foreach($lst\
    \ as $k => $v) {\n    if(array_key_exists($x, $v)) {\n      $row[] = $k;\n   \
    \   $row_sorted[] = $k;\n      $col_sorted[$k] = $v[$x];\n    }\n  }\n  return\
    \ [\n    array_reverse($row_sorted), //sort by columns in descending order\n \
    \   array_flip($col_sorted) //sort by columns in ascending order\n  ];\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpasl58wdu.php:40\n\
    Stack trace:\n#0 /tmp/tmpasl58wdu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpasl58wdu.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if($lst == []) {\n        return [];\n    }\n    $sorted = array_map(function($a)\
    \ { return array_slice($a, 0, $x); }, $lst);\n    $sorted = array_map(function($a)\
    \ { return array_flip($a); }, $sorted);\n    $sorted = array_map(function($a)\
    \ { return array_reverse($a); }, $sorted);\n    $sorted = array_map(function($a)\
    \ { return array_merge([$x], $a); }, $sorted);\n    return array_map(function($a)\
    \ { return array_slice($a, 1, -1); }, $sorted);\n}\n</code>\n<|/ a tags=php,search,arrays\
    \ dscore=1 |>\n<| c |>\nthis looks great, however, it only returns the columns\
    \ in the same row as the search term. Also, it does not return all matches in\
    \ each row. For example, if I input \"7\" into the function and my array is\n\
    \    \n`[\n    [0]=>\n        [4]=>\n            [5]=>\n                [2]=>\n\
    \                    [6]=>\n                        [7]=>\n                  \
    \          [0]=>\n                                [9]=>\n                    \
    \                [10]=>\n                                        [11]=>\n    \
    \                                        [15]=>\n                            \
    \                    [16]=>\n                                                \
    \    [17]=>\n                                                        [19]=>\n\
    \                                                            [22]=>\n        \
    \                                                        [23]=>\n            \
    \                                                        [24]=>\n            \
    \                                                    [25]=>\n                \
    \                                                    [26]=>\n                \
    \                                                        [28]=>\n            \
    \                                                                [29]=>\n    \
    \                                                                            [32]=>\n\
    \                                                                            \
    \        [33]=>\n                                                            \
    \                            [34]=>\n                                        \
    \                                                    [35]=>\n                \
    \                                                                            \
    \    [36]=>\n                                                                \
    \                                    [37]=>\n                                \
    \                                                                        [39]=>\n\
    \                                                                            \
    \                                [40]=>\n                                    \
    \                                                                            [42]=>\n\
    \                                                                            \
    \                                        [43]=>\n                            \
    \                                                                            \
    \                [45]=>\n                                                    \
    \                                                                        [48]=>\n\
    \                                                                            \
    \                                                    [49]=>\n                \
    \                                                                            \
    \                                        [50]=>\n                            \
    \                                                                            \
    \                                [52]=>\n                                    \
    \                                                                            \
    \                            [53]=>\n                                        \
    \                                                                            \
    \                    [54]=>\n                                                \
    \                                                                            \
    \                [55]=>\n                                                    \
    \                                                                            \
    \                [52]=>\n                                                    \
    \                                                                            \
    \                    [53]=>\n                                                \
    \                                                                            \
    \                            [54]=>\n                                        \
    \                                                                            \
    \                                        [55]=>\n                            \
    \                                                                            \
    \                                                        [56]=>\n            \
    \                                                                            \
    \                                                                            [57]=>\n\
    \                                                                            \
    \                                                                            \
    \                [58]=>\n                                                    \
    \                                                                            \
    \                                            [59]=>\n                        \
    \                                                                            \
    \                                                                            [60]=>\n\
    \                                                                            \
    \                                                                            \
    \                            [61]=>\n                                        \
    \                                                                            \
    \                                                                    [62]=>\n\
    \                                                                            \
    \                                                                            \
    \                                    [63]=>\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0bb6x0t6.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $res = array();\n  for ($i = 0; $i < count($lst); $i++) {\n    foreach\
    \ ($lst[$i] as $k => $v) {\n      if ($v == $x) {\n        $res[] = array($i,\
    \ $k);\n        break;\n      }\n    }\n  }\n  usort($res, function($a, $b) {\n\
    \    return ($a[1] - $b[1]) <=> ($b[1] - $a[1]);\n  });\n  $res = array_map(function($row)\
    \ {\n    return $lst[$row[0]][$row[1]];\n  }, $res);\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92o7hhv4.php:41\n\
    Stack trace:\n#0 /tmp/tmp92o7hhv4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp92o7hhv4.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  global $rows;\n  foreach ($rows as $row) {\n    $cols = count($row);\n\
    \    foreach ($row as $coord) {\n      if ($coord === $x) {\n        $found =\
    \ true;\n        break;\n      }\n    }\n    if ($found) {\n      $found = array();\n\
    \      $coords = array_map(function ($i) {\n        return $i + 1;\n      }, array_keys($row));\n\
    \      sort($coords);\n      sort($coords);\n      foreach ($coords as $i => $coord)\
    \ {\n        $found = array_merge($found, array_slice($row, $i));\n        break;\n\
    \      }\n      return $found;\n    }\n  }\n  return array();\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmph1wrwb68.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1wrwb68.php:50\n\
    Stack trace:\n#0 /tmp/tmph1wrwb68.php(58): test()\n#1 {main}\n  thrown in /tmp/tmph1wrwb68.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $arr = array();\n    for ($i = 0, $j = count($lst) - 1; $i < $j;\
    \ $i++) {\n        if ($x < $lst[$i]) {\n            $j--;\n        }\n      \
    \  $arr[$i] = array($i, $lst[$i]);\n        $lst[$i] = $lst[$j];\n        $arr[$j]\
    \ = $lst[$i];\n        $j--;\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jdl5pzf.php:37\n\
    Stack trace:\n#0 /tmp/tmp6jdl5pzf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6jdl5pzf.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $x = $x - 1;\n    $lst_temp = $lst;\n    $result = array();\n   \
    \ $row_length = count($lst_temp[$x]);\n    $col_length = 1;\n\n    for ($i = 0;\
    \ $i < $row_length; $i++) {\n        $result[] = array(0, $col_length);\n    \
    \    $col_length += $lst_temp[$x][i];\n    }\n\n    return $result;\n}\n\n$lst\
    \ = array();\n\n$lst[] = array(1, 3, 5);\n$lst[] = array(4, 5, 1, 3);\n$lst[]\
    \ = array(6, 3, 1, 5);\n\necho count(get_row($lst, 3));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant i - assumed 'i' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpdp6ldhm2.php on line 27\n\nWarning:\
    \ Use of undefined constant i - assumed 'i' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpdp6ldhm2.php on line 27\n\nWarning: Use of undefined\
    \ constant i - assumed 'i' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpdp6ldhm2.php on line 27\n\nWarning: Use of undefined constant i -\
    \ assumed 'i' (this will throw an Error in a future version of PHP) in /tmp/tmpdp6ldhm2.php\
    \ on line 27\n4\nWarning: Use of undefined constant i - assumed 'i' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpdp6ldhm2.php on line 27\n\
    \nWarning: Use of undefined constant i - assumed 'i' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmpdp6ldhm2.php on line 27\n\nWarning: Use\
    \ of undefined constant i - assumed 'i' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpdp6ldhm2.php on line 27\n\nWarning: Use of undefined\
    \ constant i - assumed 'i' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpdp6ldhm2.php on line 27\n\nWarning: Use of undefined constant i -\
    \ assumed 'i' (this will throw an Error in a future version of PHP) in /tmp/tmpdp6ldhm2.php\
    \ on line 27\n\nWarning: Use of undefined constant i - assumed 'i' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpdp6ldhm2.php on line 27\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdp6ldhm2.php:45\nStack\
    \ trace:\n#0 /tmp/tmpdp6ldhm2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpdp6ldhm2.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    foreach ($lst as $key => $row) {\n        $x = array_search($x, $row);\n\
    \        if ($x !== false) {\n            $newArr[] = array($key + 0, $x);\n \
    \       }\n    }\n    // sort by rows\n    usort($newArr, function($a, $b) {\n\
    \        return $a[0] - $b[0];\n    });\n    usort($newArr, function($a, $b) {\n\
    \        return $a[1] - $b[1];\n    });\n    return $newArr;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nNice solution, though I see that you are sorting the array twice\
    \ (with `usort()`). As a result, it is O(n log n) instead of O(n). That said,\
    \ the overall complexity is still O(n).\n<|/ c |>\n<| c |>\n, you're right, that's\
    \ why I said that it's O(n) instead of O(n log n). I just wanted to show that\
    \ OP can write his/her own solution, it's not that important how it looks.\n<|/\
    \ c |>\n<| c |>\nThat was my thought too. Even though I agree it's good to show\
    \ different solutions to different problems. In this case, I would say that the\
    \ O(n) part is unimportant and that the O(n log n) part is more important.\n<|/\
    \ c |>\n<| c |>\n, thanks for the feedback. I've also edited my answer - it was\
    \ my mistake. :)\n<|/ c |>\n<| c |>\nThis solution works, but it makes two passes\
    \ on the array, which can be avoided. Check my solution, which is in O(n) instead\
    \ of O(n*log(n))\n<|/ c |>\n<| a tags=php,arrays |>\nThe solution I've got is\
    \ actually O(n), not O(n*log(n)). I think it's more clear than the O(n^2). I don't\
    \ know if it's faster/better than the solution from.\n<code>\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphm9z381e.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $r = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row\
    \ as $j => $element) {\n            if ($element == $x) {\n                $r[]\
    \ = array($i, $j);\n            }\n        }\n    }\n    // sort the rows in ascending\
    \ order\n    usort($r, function ($a, $b) {\n        return $a[0] - $b[0];\n  \
    \  });\n    // sort the columns in descending order\n    usort($r, function ($a,\
    \ $b) {\n        return $b[1] - $a[1];\n    });\n    // sort the coordinates in\
    \ descending order from bottom row\n    usort($r, function ($a, $b) {\n      \
    \  return $b[0] - $a[0];\n    });\n\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvx4e6xm.php:48\n\
    Stack trace:\n#0 /tmp/tmphvx4e6xm.php(56): test()\n#1 {main}\n  thrown in /tmp/tmphvx4e6xm.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $result = [];\n  for ($row = 0; $row < count($lst); $row++) {\n   \
    \ $rowCoordinates = array_keys($lst[$row]);\n    sort($rowCoordinates);\n    sort($rowCoordinates,\
    \ SORT_DESC);\n\n    for ($col = 0; $col < $row; $col++) {\n      if (isset($lst[$row][$col]))\
    \ {\n        $result[] = array_merge([$row, $col], $rowCoordinates);\n      }\n\
    \    }\n  }\n\n  usort($result, function ($a, $b) {\n    $rA = $a[0];\n    $rB\
    \ = $b[0];\n    return $rA < $rB ? -1 : ($rA > $rB ? 1 : 0);\n  });\n  return\
    \ $result;\n}\n\n$tests = [\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14], 5],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14],\
    \ 5],\n  [[1,2,3,4], 5],\n  [[1,2,3,4], 3],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14],\
    \ 8],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14], 8],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14],\
    \ 11],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14], 1],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14],\
    \ 0],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14], 0],\n  [[1,2,3,4], 4],\n  [[1,2,3,4],\
    \ 4],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14], 13],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14],\
    \ 0],\n];\n\n$t = microtime(true);\nfor ($i = 0; $i < 100000; $i++) {\n  get_row($tests[0],\
    \ $tests[1]);\n}\n$t = microtime(true) - $t;\n$t->mark(\"get_row\");\necho \"\
    get_row time: \" . $t . \"\\n\";\nfor ($i = 0; $i < 100000; $i++) {\n  array_search($tests[0],\
    \ $tests[1]);\n}\n$t = microtime(true) - $t;\n$t->mark(\"array_search\");\necho\
    \ \"array_search time: \" . $t . \"\\n\";\nfor ($i = 0; $i < 100000; $i++) {\n\
    \  get_col($tests[0], $tests[1]);\n}\n$t = microtime(true) - $t;\n$t->mark(\"\
    get_col\");\necho \"get_col time: \" . $t . \"\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphet6fkk2.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst) || !is_array($lst)) {\n        return [];\n    }\n\
    \    \n    $rows = array_slice($lst, 0, $x);\n    $rows = array_flip(array_slice($rows,\
    \ 0, $x));\n    $columns = array_slice($lst, $x, count($lst));\n    \n    array_multisort($rows,\
    \ SORT_DESC, $columns, SORT_DESC, SORT_NUMERIC, $lst);\n    return array_map(function($a)\
    \ { return [$a, $a - $x]; }, array_keys($rows));\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_flip(): Can only flip STRING and INTEGER values! in /tmp/tmp82fra3a1.php\
    \ on line 24\n\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmp82fra3a1.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82fra3a1.php:35\n\
    Stack trace:\n#0 /tmp/tmp82fra3a1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp82fra3a1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = array_fill(0, count($lst), []);\n  array_walk($rows, function($row)\
    \ use ($lst) { $row[] = array_search($x, $row); });\n  array_multisort($rows,\
    \ SORT_DESC, array_keys($rows));\n  return $rows;\n}\n</code>\nThe $rows array\
    \ is filled with indexes of $lst items. $rows[$row] is then a list with indexes\
    \ of $lst items in column $row. array_search is used for finding the index of\
    \ $x from the current row. array_multisort is used for sorting the rows by columns.\
    \ array_keys is used to get keys of $rows array.\n<|/ a |>\n<| c |>\nThe `count($lst)`\
    \ is always going to be greater than or equal to the number of rows (columns).\
    \ It should be `count($lst) - $row`.\n<|/ c |>\n<| c |>\nThanks for your comment,\
    \ but it is irrelevant since I did not post any code. The idea is to get the index\
    \ of `$x` in `$lst` and multiply it with the number of columns minus 1 to get\
    \ row. For example, `get_row([], 1) == []`, `get_row([[], [1], [1, 2, 3]], 3)\
    \ == [(2, 2)]`\n<|/ c |>\n<| c |>\nI see, that's a much better explanation.\n\
    <|/ c |>\n<| c |>\nWow, this works great. I wonder if there is a way to make this\
    \ work for an array/list with multiple sublists in it.\n<|/ c |>\n<| c |>\nI have\
    \ added a new answer for that case. Let me know if it works for you\n<|/ c |>\n\
    <| a dscore=1 |>\nThis code works for the cases you posted. \n<code>\n<?php\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaqkjugyv.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $l = count($lst);\n  if ($l === 0) {\n    return [];\n  }\n  for ($i\
    \ = $l - 1; $i >= 0; $i--) {\n    if ($x >= $lst[$i][count($lst[$i])-1]) {\n \
    \     unset($lst[$i]);\n    } else {\n      break;\n    }\n  }\n  if ($i === 0)\
    \ {\n    return [];\n  }\n  $r = count($lst[$i]);\n  sort($lst[$i], SORT_NUMERIC);\n\
    \  for ($j = count($lst[$i]) - 1; $j >= 0; $j--) {\n    if ($lst[$i][$j] > $x)\
    \ {\n      break;\n    }\n  }\n  return array_merge([[$i]], array_reverse($lst[$i][$j:$r]));\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz9v7ar9t.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $r = [];\n  foreach ($lst as $i => $l) {\n    foreach ($l as $j =>\
    \ $v) {\n      if ($x == $v) {\n        $r[$i][] = [$j, $i];\n      }\n    }\n\
    \  }\n  sort($r);\n  asort($r);\n  return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ft0ziks.php:37\n\
    Stack trace:\n#0 /tmp/tmp4ft0ziks.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4ft0ziks.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $lst = array_map(function($v) {\n        return array_slice($v, $v[0]);\n\
    \    }, $lst);\n    return array_map(function($v) use ($x) {\n        return array_search($x,\
    \ $v);\n    }, $lst);\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6me6g8c6.php:32\n\
    Stack trace:\n#0 /tmp/tmp6me6g8c6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6me6g8c6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $lst_copy = $lst;\n    $new_lst = [];\n    $temp_lst = [];\n    foreach\
    \ ($lst_copy as $key => $value) {\n        if ($value == $x) {\n            $temp_lst[]\
    \ = array($key, $value);\n        } else {\n            $new_lst[] = $temp_lst;\n\
    \            $temp_lst = array($key, $value);\n        }\n    }\n    if (count($temp_lst)\
    \ != 0) {\n        $new_lst[] = $temp_lst;\n    }\n    $temp_lst = array();\n\
    \    $temp_lst[] = array(count($new_lst) - 1, count($new_lst));\n    $new_lst[]\
    \ = $temp_lst;\n    return $new_lst;\n}\n\nfunction candidate(...$args) {\n  \
    \  return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2_eo_8m.php:44\n\
    Stack trace:\n#0 /tmp/tmpv2_eo_8m.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpv2_eo_8m.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    // write your code here\n}\n\nfunction candidate(...$args) {\n  \
    \  return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvoid146r.php:27\n\
    Stack trace:\n#0 /tmp/tmpvoid146r.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvoid146r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $lst = array_reverse($lst);\n    foreach ($lst as $i => $row) {\n\
    \        if (in_array($x, $row)) {\n            return array_slice($lst, 0, $i\
    \ + 1);\n        }\n    }\n    return [];\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qczbs28.php:33\n\
    Stack trace:\n#0 /tmp/tmp0qczbs28.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0qczbs28.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $coords = [];\n    $row = 0;\n    $column = 0;\n    foreach ($lst\
    \ as $row) {\n        foreach ($row as $column) {\n            if ($column ==\
    \ $x) {\n                $coords[$row][$column] = [$row, $column];\n         \
    \   }\n        }\n    }\n    return $coords;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Illegal offset type in /tmp/tmpxzozg9_4.php on line 25\n\nWarning:\
    \ Illegal offset type in /tmp/tmpxzozg9_4.php on line 25\n\nWarning: Illegal offset\
    \ type in /tmp/tmpxzozg9_4.php on line 25\n\nWarning: Illegal offset type in /tmp/tmpxzozg9_4.php\
    \ on line 25\n\nWarning: Illegal offset type in /tmp/tmpxzozg9_4.php on line 25\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzozg9_4.php:37\nStack\
    \ trace:\n#0 /tmp/tmpxzozg9_4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxzozg9_4.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if ($x < 0 OR $x > count($lst))\n        return [];\n    $lst = $lst[$x];\n\
    \    $n = count($lst);\n    $m = count($lst[0]);\n    $result = [];\n    for ($i\
    \ = 0; $i < $n; ++$i) {\n        $result[] = [($i), ($n - $i - 1)];\n        for\
    \ ($j = 0; $j < $m; ++$j) {\n            if ($j == $x)\n                $result[$i][]\
    \ = ($i, j);\n        }\n    }\n    return array_merge(array_fill(0, $m, 0), $result);\n\
    }\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpavfrqsga.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $res = array();\n    foreach ($lst as $row) {\n        $xCoord =\
    \ array_search(max($row), $row);\n        $yCoord = array_search(min($row), $row);\n\
    \        if ($xCoord !== false || $yCoord !== false) {\n            $res[] = array($xCoord\
    \ + 1, $yCoord - 1);\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d0afwnb.php:35\n\
    Stack trace:\n#0 /tmp/tmp3d0afwnb.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3d0afwnb.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = [];\n    foreach($lst as $row) {\n        if ($row[$x] ==\
    \ $x) {\n            $rows[] = $row;\n        }\n    }\n    return $rows;\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tomz7lh.php:33\n\
    Stack trace:\n#0 /tmp/tmp0tomz7lh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0tomz7lh.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  // Write your code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoikm5a44.php:27\n\
    Stack trace:\n#0 /tmp/tmpoikm5a44.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoikm5a44.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n\n    for ($i = 0; $i < count($lst); $i++) {\n   \
    \     if ($x == $i) {\n            $result[] = [$i, $lst[$i]];\n        }\n  \
    \  }\n\n    // Sort by row in ascending order\n    $result = uasort($result, function\
    \ ($a, $b) {\n        if ($a[1] == $b[1]) {\n            return 0;\n        }\n\
    \        return $a[1] < $b[1] ? -1 : 1;\n    });\n\n    // Sort by column in descending\
    \ order\n    $result = array_reverse($result, true);\n\n    // Return coordinates\
    \ as a list of tuples.\n    return $result;\n}\n\nprint_r(get_row($arr, 1));\n\
    print_r(get_row($arr, 2));\nprint_r(get_row($arr, 3));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpstur2apj.php on line 21\n\nWarning: array_reverse() expects\
    \ parameter 1 to be array, bool given in /tmp/tmpstur2apj.php on line 36\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpstur2apj.php on line 21\n\nWarning: array_reverse() expects parameter\
    \ 1 to be array, bool given in /tmp/tmpstur2apj.php on line 36\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpstur2apj.php\
    \ on line 21\n\nWarning: array_reverse() expects parameter 1 to be array, bool\
    \ given in /tmp/tmpstur2apj.php on line 36\n\nWarning: array_reverse() expects\
    \ parameter 1 to be array, bool given in /tmp/tmpstur2apj.php on line 36\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpstur2apj.php:50\nStack trace:\n\
    #0 /tmp/tmpstur2apj.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpstur2apj.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (empty($lst)) {\n    return [];\n  }\n\n  foreach ($lst as $row)\
    \ {\n    $rowWithIndex = [];\n    foreach ($row as $coord) {\n      $rowWithIndex[]\
    \ = array_search($coord, $x) + 0;\n    }\n\n    $sortedRowWithIndex = sort($rowWithIndex);\n\
    \n    $sortedRowWithIndex2 = array_reverse($sortedRowWithIndex);\n    sort($rowWithIndex2);\n\
    \n    $result = [];\n    foreach ($rowWithIndex2 as $key => $value) {\n      $result[]\
    \ = array_search($value, $x) + 0;\n    }\n\n    return $result;\n  }\n\n  return\
    \ [];\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, int given in\
    \ /tmp/tmprb2iwgyl.php on line 26\n\nWarning: array_search() expects parameter\
    \ 2 to be array, int given in /tmp/tmprb2iwgyl.php on line 26\n\nWarning: array_search()\
    \ expects parameter 2 to be array, int given in /tmp/tmprb2iwgyl.php on line 26\n\
    \nWarning: array_search() expects parameter 2 to be array, int given in /tmp/tmprb2iwgyl.php\
    \ on line 26\n\nWarning: array_search() expects parameter 2 to be array, int given\
    \ in /tmp/tmprb2iwgyl.php on line 26\n\nWarning: array_search() expects parameter\
    \ 2 to be array, int given in /tmp/tmprb2iwgyl.php on line 26\n\nWarning: array_reverse()\
    \ expects parameter 1 to be array, bool given in /tmp/tmprb2iwgyl.php on line\
    \ 31\n\nWarning: sort() expects parameter 1 to be array, null given in /tmp/tmprb2iwgyl.php\
    \ on line 32\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmprb2iwgyl.php\
    \ on line 35\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprb2iwgyl.php:50\n\
    Stack trace:\n#0 /tmp/tmprb2iwgyl.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprb2iwgyl.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst) || empty($lst[0])) return [];\n    $result = [];\n\
    \    $rows = array_slice($lst, 0, -1, true);\n    $cols = array_map(function($item)\
    \ { return count($item); }, array_slice($lst,-1));\n    $rows = array_map(function($item)\
    \ { return array_slice($item, 0, -1); }, $rows);\n    foreach ($rows as $key =>\
    \ $row) {\n        $colIdx = 0;\n        foreach ($row as $value) {\n        \
    \    if ($value == $x) {\n                $result[] = [$key, $colIdx];\n     \
    \       }\n            $colIdx++;\n        }\n    }\n    array_multisort($cols,\
    \ SORT_DESC, SORT_NUMERIC, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer, but i need to find all the same elements\
    \ in first array and output them, and the same elements in the second array and\
    \ output them too, so for example first array has 2 same values \"1\" and second\
    \ array has 3 same values \"1,2\", my expected output should be \"1,2\" because\
    \ both arrays are equal to each other in terms of same element and same position\
    \ in array.\n<|/ c |>\n<| c |>\nthanks, i will try to implement it and get back\
    \ to you\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array,algorithm dscore=0\
    \ |>\nTry this function:\n<code>\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpln5fynqp.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = [];\n  foreach ($lst as $column) {\n    $coord = [$column,\
    \ $x];\n    // sort by columns in descending order\n    $coord = array_reverse($coord);\n\
    \    // sort by rows in ascending order\n    $coord = array_slice($coord, 0, 1);\n\
    \    $rows[] = $coord;\n  }\n  return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzvgr9vr.php:36\n\
    Stack trace:\n#0 /tmp/tmpuzvgr9vr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpuzvgr9vr.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array_filter(range(1, count($lst)), function ($key) use ($lst)\
    \ {\n        return !isset($lst[$key - 1]);\n    });\n    foreach ($rows as $row)\
    \ {\n        $sorted = array_merge(\n            array_map(function ($row) use\
    \ ($lst) {\n                return $lst[$row - 1];\n            }, $row),\n  \
    \          array_flip(array_flip($row))\n        );\n        ksort($sorted);\n\
    \        $result = array();\n        $current = 0;\n        foreach ($sorted as\
    \ $key => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = array($row, $key);\n                $current += 1;\n            }\n      \
    \  }\n        $sorted = array_reverse(array_merge($current, $sorted));\n     \
    \   ksort($sorted);\n        return $result;\n    }\n    return [];\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfomnchyd.php:50\n\
    Stack trace:\n#0 /tmp/tmpfomnchyd.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpfomnchyd.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst)) return array();\n    $ret = array();\n    $rows\
    \ = count($lst);\n    foreach ($lst as $row) {\n        $row_x = count($row);\n\
    \        $row_y = count($row[$x]);\n        $ret[] = array($x, $y - 1);\n    \
    \    $ret[] = array($row_x, $y - 1);\n        $ret[] = array($row_y, $x);\n  \
    \      $y--;\n    }\n    return $ret;\n}\n\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp99vfregz.php on line 24\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp99vfregz.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp99vfregz.php on line 24\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp99vfregz.php:38\nStack trace:\n#0 /tmp/tmp99vfregz.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp99vfregz.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $coords = [];\n  $lst_len = count($lst);\n  if ($lst_len == 0) {\n\
    \    return [];\n  }\n  for ($i = 0; $i < $lst_len; ++$i) {\n    $coords[$i] =\
    \ [];\n    for ($j = 0; $j < $lst[$i]->count; ++$j) {\n      if ($j == $x) {\n\
    \        $coords[$i][$j] = $i;\n      }\n    }\n  }\n  $coords = array_multisort(array_column($coords,\
    \ 'row'), SORT_DESC, array_column($coords, 'column'));\n  $coords = array_map(function($a)\
    \ { return array_combine(array_column($a, 'column'), $a); }, $coords);\n  return\
    \ $coords;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, bool given\
    \ in /tmp/tmp7xa724tm.php on line 33\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp7xa724tm.php:42\nStack trace:\n#0 /tmp/tmp7xa724tm.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7xa724tm.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $lst_rows = array_values($lst);\n    $rows = array_count_values($lst_rows);\n\
    \    $row_counts = $rows;\n    if (empty($rows[$x])) {\n        return [];\n \
    \   }\n    $res = array_fill(0, $rows[$x], []);\n    foreach ($lst_rows as $index\
    \ => $row) {\n        $column = $index - $rows[$x];\n        $res[$row][$column]\
    \ = 1;\n    }\n    ksort($res);\n    krsort($res, SORT_NUMERIC);\n    return array_values($res);\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmp83mi03wv.php on line 20\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmp83mi03wv.php on line 20\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmp83mi03wv.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83mi03wv.php:40\n\
    Stack trace:\n#0 /tmp/tmp83mi03wv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp83mi03wv.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    foreach ($lst as $row) {\n        $row_coords\
    \ = [];\n        for ($i = 0; $i < $row[0]; $i++) {\n            $row_coords[]\
    \ = $i;\n        }\n        for ($i = 0; $i < $row[$row.length - 1]; $i++) {\n\
    \            $row_coords[] = $i;\n        }\n        $row_coords = array_reverse($row_coords);\n\
    \        $row_coords = array_unique($row_coords);\n        $result = array_merge($result,\
    \ array_intersect($row_coords, [$x]));\n    }\n    sort($result);\n    sort($result);\n\
    \    return $result;\n}\n\n/**\n * Given a 2 dimensional data, as a nested lists,\n\
    \ * which is similar to matrix, however, unlike matrices,\n * each column may\
    \ contain a different number of rows.\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 37 in /tmp/tmpvfa04jxh.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = [];\n    $cols = count($lst[0]);\n    $i = 0;\n    foreach\
    \ ($lst as $row) {\n        $i++;\n        if ($i == $x) {\n            $rows[]\
    \ = $row;\n        }\n    }\n    foreach ($rows as $row) {\n        foreach ($row\
    \ as $j => $value) {\n            if ($j > 0) {\n                sort($rows[$i]);\n\
    \                sort($rows[$i][$j]);\n            }\n        }\n    }\n    return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, null given in /tmp/tmpiq85dugp.php\
    \ on line 31\n\nWarning: sort() expects parameter 1 to be array, null given in\
    \ /tmp/tmpiq85dugp.php on line 32\n\nWarning: sort() expects parameter 1 to be\
    \ array, null given in /tmp/tmpiq85dugp.php on line 32\n\nWarning: sort() expects\
    \ parameter 1 to be array, null given in /tmp/tmpiq85dugp.php on line 32\n\nWarning:\
    \ sort() expects parameter 1 to be array, null given in /tmp/tmpiq85dugp.php on\
    \ line 32\n\nWarning: sort() expects parameter 1 to be array, null given in /tmp/tmpiq85dugp.php\
    \ on line 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiq85dugp.php:44\n\
    Stack trace:\n#0 /tmp/tmpiq85dugp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpiq85dugp.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (is_null($lst) || is_null($x)) {\n        return [];\n    }\n\
    \    $rows = array_flip(array_count_values($lst[0]));\n    $cols = [];\n    foreach\
    \ ($rows as $row) {\n        $cols[] = array_flip(array_count_values($row));\n\
    \    }\n    usort($cols, 'array_multisort_by_columns');\n    $result = [];\n \
    \   foreach ($cols as $row) {\n        foreach ($row as $col) {\n            if\
    \ ($col == $x) {\n                $result[] = array_map(function ($r) use ($row)\
    \ {\n                    return array_keys($row, $r);\n                }, $row);\n\
    \            }\n        }\n    }\n    usort($result, 'array_multisort_reverse');\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values() expects parameter 1 to be array, int given\
    \ in /tmp/tmpfl049znt.php on line 25\n\nWarning: array_flip() expects parameter\
    \ 1 to be array, null given in /tmp/tmpfl049znt.php on line 25\n\nWarning: usort()\
    \ expects parameter 2 to be a valid callback, function 'array_multisort_by_columns'\
    \ not found or invalid function name in /tmp/tmpfl049znt.php on line 27\n\nWarning:\
    \ Invalid argument supplied for foreach() in /tmp/tmpfl049znt.php on line 30\n\
    \nWarning: usort() expects parameter 2 to be a valid callback, function 'array_multisort_reverse'\
    \ not found or invalid function name in /tmp/tmpfl049znt.php on line 38\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpfl049znt.php:47\nStack trace:\n\
    #0 /tmp/tmpfl049znt.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfl049znt.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array_count_values(array_column($lst,0));\n    foreach($rows\
    \ as $row=>$value){\n        $new_row = [];\n        foreach($lst as $lst){\n\
    \            if($lst[$row] == $value){\n                $new_row[$row]= [($row,$value)];\n\
    \            }\n        }\n        $new_row = array_merge($new_row, array_count_values(array_column($lst,1)));\n\
    \        $new_row = array_merge($new_row,array_count_values(array_column($lst,2)));\n\
    \        asort($new_row);\n        arsort($new_row);\n        $lst = array_merge($new_row,$lst);\n\
    \    }\n    return array_keys($rows,$x);\n}\n</code>\n<|/ a dscore=0 tags=php,multidimensional-array,arrays,matrix\
    \ |>\n<| a dscore=0 tags=php,multidimensional-array,arrays,matrix |>\nYou can\
    \ use the following functions in PHP\n<code>\n$array = array(\n    array( 1 =>\
    \ 2 , 2 => 3 ),\n    array( 4 => 5 , 5 => 6 )\n);\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy3ljfan7.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if(!is_array($lst))\n        return false;\n    \n    foreach($lst\
    \ as $l){\n        $l=array_unique($l);\n        if(!is_array($l))\n         \
    \   return false;\n        if(array_search($x, $l)===false)\n            return\
    \ false;\n    }\n    \n    $res=[];\n    \n    foreach($lst as $l){\n        $l=array_reverse($l);\n\
    \        $temp=[];\n        \n        foreach($l as $k=>$v){\n            if($k==0)\n\
    \                $temp[]=[];\n            else\n                $temp[]=[$k-1,\
    \ $k];\n        }\n        \n        sort($temp);\n        \n        $res[]=$temp;\n\
    \    }\n    \n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tvvss38.php:56\n\
    Stack trace:\n#0 /tmp/tmp7tvvss38.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp7tvvss38.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    // write your code here\n    $coords = array();\n    foreach($lst\
    \ as $row) {\n        foreach($row as $value) {\n            if ($value == $x)\
    \ {\n                array_push($coords, array_fill(0, count($row), $row));\n\
    \            }\n        }\n    }\n    uasort($coords, 'sort_coordinates');\n \
    \   $results = array();\n    foreach($coords as $coord) {\n        $row = array_fill(0,\
    \ count($coord), '0');\n        foreach($coord as $k => $v) {\n            array_unshift($row,\
    \ array_shift($v));\n        }\n        array_push($results, $row);\n    }\n \
    \   uasort($results, 'sort_row_by_column');\n    return $results;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: uasort() expects parameter 2 to be a valid callback, function\
    \ 'sort_coordinates' not found or invalid function name in /tmp/tmpslj0xera.php\
    \ on line 28\n\nWarning: uasort() expects parameter 2 to be a valid callback,\
    \ function 'sort_row_by_column' not found or invalid function name in /tmp/tmpslj0xera.php\
    \ on line 37\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpslj0xera.php:46\n\
    Stack trace:\n#0 /tmp/tmpslj0xera.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpslj0xera.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $row = array();\n  foreach ($lst as $key => $row) {\n    if ($key ==\
    \ $x) {\n      array_unshift($row, $key);\n      break;\n    }\n  }\n  foreach\
    \ ($row as $key => $column) {\n    $new_row = array();\n    foreach ($row as $key\
    \ => $row) {\n      $new_row[$key] = ($key == $column) ? 1 : 0;\n    }\n    array_push($row,\
    \ $new_row);\n  }\n\n  $coords = array();\n  foreach ($row as $key => $row) {\n\
    \    foreach ($row as $key => $column) {\n      $coords[] = array($key, $column);\n\
    \    }\n  }\n  ksort($coords);\n  krsort($coords);\n  return $coords;\n}\n\n$coords\
    \ = get_row($arr, 2);\n$new_coords = array();\nforeach ($coords as $coord) {\n\
    \  array_push($new_coords, array($coord[1], $coord[0]));\n}\n$new_coords = array_reverse($new_coords);\n\
    echo '<pre>' . print_r($new_coords) . '</pre>';\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp77wvholw.php\
    \ on line 20\nArray\n(\n)\n<pre>1</pre>\nWarning: array_push() expects parameter\
    \ 1 to be array, int given in /tmp/tmp77wvholw.php on line 31\n\nWarning: Invalid\
    \ argument supplied for foreach() in /tmp/tmp77wvholw.php on line 28\n\nWarning:\
    \ array_push() expects parameter 1 to be array, int given in /tmp/tmp77wvholw.php\
    \ on line 31\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp77wvholw.php\
    \ on line 28\n\nWarning: array_push() expects parameter 1 to be array, int given\
    \ in /tmp/tmp77wvholw.php on line 31\n\nWarning: Invalid argument supplied for\
    \ foreach() in /tmp/tmp77wvholw.php on line 28\n\nWarning: array_push() expects\
    \ parameter 1 to be array, int given in /tmp/tmp77wvholw.php on line 31\n\nWarning:\
    \ Invalid argument supplied for foreach() in /tmp/tmp77wvholw.php on line 28\n\
    \nWarning: array_push() expects parameter 1 to be array, int given in /tmp/tmp77wvholw.php\
    \ on line 31\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp77wvholw.php\
    \ on line 28\n\nWarning: array_push() expects parameter 1 to be array, int given\
    \ in /tmp/tmp77wvholw.php on line 31\n\nWarning: Invalid argument supplied for\
    \ foreach() in /tmp/tmp77wvholw.php on line 28\n\nWarning: array_push() expects\
    \ parameter 1 to be array, int given in /tmp/tmp77wvholw.php on line 31\n\nWarning:\
    \ Invalid argument supplied for foreach() in /tmp/tmp77wvholw.php on line 35\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77wvholw.php:57\nStack\
    \ trace:\n#0 /tmp/tmp77wvholw.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp77wvholw.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  assert(is_array($lst));\n  $row = array_slice($lst, 0, $x);\n  array_walk(\n\
    \    function ($row) use (&$lst) {\n      foreach ($row as $key => $val) {\n \
    \       $lst[] = [$key, $val];\n      }\n    },\n    $row\n  );\n  return $lst;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Only variables can be passed by reference in /tmp/tmpsrxlqt0l.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $ret = [];\n    foreach($lst as $i => $row) {\n        foreach($row\
    \ as $j => $col) {\n            if($j == $x)\n                $ret[] = [$i, $j];\n\
    \        }\n    }\n    usort($ret, function($a, $b) {\n        if($a[0] == $b[0])\n\
    \            return $a[1] < $b[1] ? -1 : 1;\n        return $a[0] < $b[0] ? -1\
    \ : 1;\n    });\n    usort($ret, function($a, $b) {\n        if($a[1] == $b[1])\n\
    \            return $a[0] < $b[0] ? -1 : 1;\n        return $a[1] < $b[1] ? -1\
    \ : 1;\n    });\n    return $ret;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqa_09u8.php:44\n\
    Stack trace:\n#0 /tmp/tmpbqa_09u8.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpbqa_09u8.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n\t$result = array();\n\tforeach ($lst as $k => $v) {\n\t\tforeach ($v\
    \ as $vv => $vvv) {\n\t\t\tif ($vvv == $x) {\n\t\t\t\t$result[] = array($k, $v);\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result, SORT_NUMERIC);\n\tksort($result[1], SORT_NUMERIC);\n\
    \treturn $result;\n}\n</code>\n<|/ a tags=php,multidimensional-array dscore=1\
    \ |>\n<| c |>\nThank you for your quick answer! This solves my problem. :-)\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. My array looks like this `array(2)\
    \ {\n  [0]=>\n  array(1) {\n    [0]=>\n    int(1)\n  }\n  [1]=>\n  array(1) {\n\
    \    [0]=>\n    int(2)\n  }\n}`\n\nBut I need the result like `array(2) {\n  [0]=>\n\
    \  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n    int(1)\n  }\n  [1]=>\n  array(2)\
    \ {\n    [0]=>\n    int(0)\n    [1]=>\n    int(2)\n  }\n}`\n<|/ c |>\n<| c |>\n\
    , sorry, i was a little bit tired today... edited.\n<|/ c |>\n<| c |>\nWow. Thank\
    \ you so much for your effort! Now I understand your code. :-)\n<|/ c |>\n<| a\
    \ |>\nThe code below will give an array like this if $lst = array(\n  0 => array(\n\
    \    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n\
    \    6 => 7,\n    7 => 8,\n    8 => 9\n  ),\n  1 => array(\n    0 => 1,\n    1\
    \ => 2,\n    2 => 3,\n    3 => 4,\n    4 => 1,\n    5 => 6,\n    6 => 7,\n   \
    \ 7 => 1,\n    8 => 9\n  )\n);\n<code>\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplzex_wpq.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $n = count($lst);\n  if ($n === 0) {\n    return [];\n  }\n  if ($n\
    \ <= 1) {\n    return [];\n  }\n  // Get coordinates of row\n  $row_i = $x; //\
    \ Index of row in $lst\n  $row_coordinates = [$row_i]; // Coordinates of row\n\
    \  for ($i = 1; $i < $n; ++$i) {\n    $c = $lst[$row_i]; // Current element\n\
    \    $row_coordinates[] = [$i, $c]; // Update row coordinates\n    if ($c !==\
    \ $x) {\n      $row_coordinates[] = [$row_i, $x];\n    }\n    $row_i = ($row_i\
    \ + 1) % $n; // Update row index\n  }\n  // Sort coordinates\n  $row_coordinates\
    \ = array_merge(\n    array_slice($row_coordinates, 0, -1),\n    array_slice($row_coordinates,\
    \ 1),\n    array_slice($row_coordinates, -1));\n  // Sort row by columns\n  array_multisort(array_slice($row_coordinates,\
    \ 1), $row_coordinates);\n  // Return array of coordinates\n  return $row_coordinates;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpmszt8pll.php\
    \ on line 43\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmszt8pll.php:53\n\
    Stack trace:\n#0 /tmp/tmpmszt8pll.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpmszt8pll.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (!$lst) return [];\n    if ($x == 0 || $x == 1) return [$x];\n\
    \    $lst1 = [];\n    $n = count($lst);\n    $m = count($lst[0]);\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $lst1[] = get_row($lst[$i], $x);\n    }\n   \
    \ $rows = array_merge($lst1, $lst);\n    ksort($rows);\n    ksort($rows, SORT_NUMERIC);\n\
    \    $ret = [];\n    for ($i = 0; $i < $m; $i++) {\n        $ret[] = array_column($rows,\
    \ $i);\n    }\n    return $ret;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevy1hp_7.php:42\n\
    Stack trace:\n#0 /tmp/tmpevy1hp_7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpevy1hp_7.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $res = [];\n    foreach ($lst as $row) {\n        foreach ($row as\
    \ $col) {\n            if ($col === $x) {\n                $res[] = [array_search($x,\
    \ $row), count($row) - 1];\n            }\n        }\n    }\n    array_multisort(array_column($res),\
    \ SORT_DESC, array_column($res, 1), SORT_ASC, SORT_NUMERIC, \n        $res);\n\
    \    return $res;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_column() expects at least 2 parameters, 1 given in /tmp/tmpj_4gxpdw.php\
    \ on line 27\n\nWarning: array_multisort(): Argument #1 is expected to be an array\
    \ or a sort flag in /tmp/tmpj_4gxpdw.php on line 28\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpj_4gxpdw.php:37\nStack trace:\n#0 /tmp/tmpj_4gxpdw.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpj_4gxpdw.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array_count_values($lst);\n    ksort($rows);\n    $rows[$x]\
    \ ? $row = $rows[$x] : $row = [];\n    $sorted = [];\n    foreach ($row as $i\
    \ => $coord) {\n        foreach ($coord as $col) {\n            $sorted[] = array_merge([$i],\
    \ array_slice($sorted, 0, $i + 1));\n        }\n    }\n    return $sorted;\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmpdnuojeki.php on line 19\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmpdnuojeki.php on line 19\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmpdnuojeki.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnuojeki.php:36\n\
    Stack trace:\n#0 /tmp/tmpdnuojeki.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdnuojeki.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $ans = [];\n    $rows = array_count_values($lst);\n    for ($i =\
    \ 0; $i < count($rows); $i++) {\n        if ($rows[$i] == $x) {\n            $row\
    \ = $i;\n            $cols = array_count_values($lst[$i]);\n        }\n    }\n\
    \    if ($row == null) {\n        $ans[] = [];\n        return $ans;\n    }\n\
    \    $cols = array_count_values($lst[$row]);\n    for ($i = 0; $i < count($cols);\
    \ $i++) {\n        if ($cols[$i] == $x) {\n            $col = $i;\n        }\n\
    \    }\n    $r = $row;\n    $c = $col;\n    $ans[] = [$r, $c];\n    $lst[$row][$col]--;\n\
    \    $lst[$r][$c]--;\n    if ($lst[$row][$col] == 0) {\n        $row--;\n    }\n\
    \    if ($lst[$r][$c] == 0) {\n        $c--;\n    }\n    return get_row($lst,\
    \ $x);\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmppov_ca2m.php on line 20\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmppov_ca2m.php on line 20\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmppov_ca2m.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppov_ca2m.php:56\n\
    Stack trace:\n#0 /tmp/tmppov_ca2m.php(64): test()\n#1 {main}\n  thrown in /tmp/tmppov_ca2m.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    // write your code in PHP7.0\n    $lst = array_slice($lst, 0, $x);\n\
    \    return array_map(function($row) {\n        $row = array_slice($row, 0, $x);\n\
    \        return $row;\n    }, $lst);\n}\n$lst = array(\n    array(1,2,3,4,5,6),\n\
    \    array(1,2,3,4,1,6),\n    array(1,2,3,4,5,1)\n);\nvar_dump(get_row($lst, 1));\
    \ // array([0]=>array([0]=>1, [1]=>4), [1]=>array([0]=>1, [1]=>0), (2=>5), (3=>2))\n\
    var_dump(get_row([], 1)); // array([0]=>array([0]=>1), [1]=>array([0]=>1), [2]=>array([0]=>1),\
    \ [3]=>array([0]=>1), [4]=>array([0]=>1), [5]=>array([0]=>1))\nvar_dump(get_row([[],\
    \ [1], [1, 2, 3]], 3)); // array([0]=>array([0]=>1), [1]=>array([0]=>2))\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nThanks for helping, but i dont know\
    \ why its not working with my code.. :(\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ My code is wrong. Now I fix my code.\n<|/ c |>\n<| c |>\nIt works perfectly\
    \ :) Thanks a lot\n<|/ c |>\n<| c |>\nIt's not working when array is empty, please\
    \ check my edited question.\n<|/ c |>\n<| c |>\nI fixed my code\n<|/ c |>\n<|\
    \ a tags=php,arrays,sorting dscore=0 |>\nI made a very simple solution that uses\
    \ array_filter and array_reverse to keep only x elements of the array.\n<code>\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9rcp0l7u.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $n = count($lst);\n    $rows = array_fill(0, $n + 1, array());\n\
    \    foreach ($lst as $i => $lst) {\n        $col = 0;\n        foreach ($lst\
    \ as $val) {\n            if ($val == $x) {\n                $rows[$i][$col] =\
    \ $i;\n                $col++;\n                break;\n            }\n      \
    \  }\n    }\n    ksort($rows);\n    ksort($rows[$n]);\n    return $rows;\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97inmvky.php:41\n\
    Stack trace:\n#0 /tmp/tmp97inmvky.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp97inmvky.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $n = count($lst);\n    if ($x == 0) { return []; }\n    if ($x ==\
    \ 1) { return array_pop($lst); }\n    $i = $n - 1;\n    $row = [];\n    $x--;\n\
    \    while ($i >= 0 && $lst[$i][$x] > $x) {\n        $row[$x] = [$i, $x];\n  \
    \      $i--;\n        $x--;\n    }\n    array_push($row, ['0', count($lst[0])\
    \ - 1]);\n    array_push($row, $i);\n    array_push($row, $x);\n    return $row;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2twlxfsy.php:41\n\
    Stack trace:\n#0 /tmp/tmp2twlxfsy.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp2twlxfsy.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    // Write your code here\n    \n    $row = array_reverse($lst);\n\
    \    \n    foreach($row as $key => $value)\n    {\n        if($value == $x)\n\
    \        {\n            return $key;\n        }\n    }\n    \n    return [];\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplssy372s.php:39\n\
    Stack trace:\n#0 /tmp/tmplssy372s.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplssy372s.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (count($lst) < 1)\n    return array();\n  // sort the initial rows\
    \ by column in descending order\n  array_multisort(array_map(function($v) { return\
    \ strlen($v); }, $lst), SORT_DESC, $lst);\n  // sort the remaining rows by row\
    \ in ascending order\n  array_multisort(array_map(function($v) { return $v[0];\
    \ }, $lst), SORT_ASC,$lst);\n  // return matching row\n  $ret = [];\n  foreach($lst\
    \ as $row) {\n    if (array_search($x, $row) !== false) {\n      $ret = array_merge($ret,\
    \ array_slice($row, array_search($x, $row)));\n    }\n  }\n  // sort the row by\
    \ columns in descending order\n  array_multisort(array_map(function($v) { return\
    \ strlen($v[0]); }, $ret), SORT_DESC, $ret);\n  return $ret;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=algorithm,arrays,php,sorting |>\nSince you are only looking\
    \ for a single element in the inner array, I would use a simple loop rather than\
    \ going through the array structure. \nHere is a pseudo code (I am not sure what\
    \ language you are using):\n<code>\narray[x] = array();\n\nfor (i = 0; i < array.length;\
    \ i++) {\n  for(j = 0; j < array[i].length; j++) {\n    if (array[i][j] == x)\
    \ {\n      array[y][1] = j;\n    }\n  }\n}\n</code>\nThe outer loop iterates over\
    \ all the rows in the array, and the inner loop goes over all the columns in the\
    \ row. I set the value of array[y][1] at the moment to j (i.e. the column where\
    \ x was found)\n<|/ a dscore=1 |>\n<| a dscore=0 tags=algorithm,arrays,php,sorting\
    \ |>\n<code>\n$array = [\n  ['A'],\n  ['A', 'B'],\n  ['B'],\n  ['B', 'B', 'C']\n\
    ];\n\n$x = array_search('B', $array);\n$y = $x-1;\n$z = $array[$y];\n\n$result\
    \ = [\n  [$array[0][0], $z[0]],\n  [$array[1][0], $array[1][$y]],\n  [$array[2][0],\
    \ $array[2][$y]]\n];\n</code>\n<|/ a |>\n<| a tags=algorithm,arrays,php,sorting\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr_rnlv02.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    // base case\n    if ($x == 0)\n        return [];\n\n    // recursive\
    \ case\n    $lst = array_map('array_reverse', $lst);\n    $rows = array_unique(array_map('array_values',\
    \ $lst));\n    $cols = array_unique(array_map('count', $lst));\n    $result =\
    \ array();\n    foreach ($rows as $row) {\n        $coords = array_flip(array_slice($lst,\
    \ $row, 1));\n        $row_by_col_reverse = array_flip(array_slice($rows, $row,\
    \ 1));\n        $row_by_col = array_reverse($row_by_col_reverse);\n        $row_by_col_slice\
    \ = array_slice($row_by_col, $col, $row);\n        foreach ($row_by_col_slice\
    \ as $col => $value) {\n            $result[] = array($coords[$col], $value);\n\
    \        }\n    }\n    return array_map('array_reverse', array_flip($result));\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 2 to be int, array given in\
    \ /tmp/tmpqdz_4uit.php on line 29\n\nWarning: array_flip() expects parameter 1\
    \ to be array, null given in /tmp/tmpqdz_4uit.php on line 29\n\nWarning: array_slice()\
    \ expects parameter 2 to be int, array given in /tmp/tmpqdz_4uit.php on line 30\n\
    \nWarning: array_flip() expects parameter 1 to be array, null given in /tmp/tmpqdz_4uit.php\
    \ on line 30\n\nWarning: array_reverse() expects parameter 1 to be array, null\
    \ given in /tmp/tmpqdz_4uit.php on line 31\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, null given in /tmp/tmpqdz_4uit.php on line 32\n\nWarning: Invalid\
    \ argument supplied for foreach() in /tmp/tmpqdz_4uit.php on line 33\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpqdz_4uit.php:45\nStack trace:\n\
    #0 /tmp/tmpqdz_4uit.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqdz_4uit.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        $curr\
    \ = array_slice($lst[$i], 0, $x);\n        if (count($curr) < $x) {\n        \
    \    $curr[] = null;\n        }\n        sort($curr);\n        array_unshift($curr,\
    \ null);\n        sort($curr);\n        array_unshift($curr, null);\n        $res[]\
    \ = $curr;\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8vwac0k.php:39\n\
    Stack trace:\n#0 /tmp/tmpv8vwac0k.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpv8vwac0k.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $r = array();\n    for($i = 0, $l = count($lst); $i < $l; ++$i) {\n\
    \        $r = array_merge($r, array_intersect(array_column($lst[$i], 'x'), array_column($lst,\
    \ $i), $l));\n    }\n    usort($r, function($a, $b) { return $b[1] - $a[1]; });\n\
    \    return array_filter($r, function($row, $x) use ($lst, $x) {\n        return\
    \ $lst == array_column($lst, $x)\n            || !empty($lst[array_search($x,\
    \ array_column($lst, 'x'))])\n            && $lst[array_search($x, array_column($lst,\
    \ 'x'))][count($lst[array_search($x, array_column($lst, 'x'))])]['x'] == $x;\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use lexical variable $x as a parameter name in /tmp/tmp9lvu1a3f.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $ret = [];\n    $rows = count($lst);\n    foreach ($lst as $i =>\
    \ $row) {\n        if ($i < $x) {\n            continue;\n        }\n        $ret[]\
    \ = [$i, array_slice($row, count($row) - $x, 1)];\n    }\n    usort($ret, 'cmp');\n\
    \    return $ret;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmpilquty0k.php on line 27\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpilquty0k.php:35\nStack\
    \ trace:\n#0 /tmp/tmpilquty0k.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpilquty0k.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $list = array();\n    for ($row = 0; $row < count($lst); $row++)\
    \ {\n        $row = array_flip(array_flip($lst[$row]));\n        $row = array_slice($row,\
    \ -$x);\n        $list[] = $row;\n    }\n    return $list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar1_3zkx.php:33\n\
    Stack trace:\n#0 /tmp/tmpar1_3zkx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpar1_3zkx.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $n = count($lst);\n  $rows = [];\n  $cols = [];\n  for ($i = 0, $i\
    \ < $n; ++$i) {\n    $cols = array_column($lst, $i);\n    foreach ($cols as $col)\
    \ {\n      if ($col === $x) {\n        $rows[] = [$i, array_search($x, $cols)];\n\
    \        break;\n      }\n    }\n  }\n  krsort($rows);\n  krsort($cols);\n  return\
    \ array_map(function ($v) use ($cols) { return array_combine($cols, $v); }, $rows);\n\
    }\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4g2exf9q.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $row = [];\n    $rows = [];\n    $row_len = 0;\n    foreach($lst\
    \ as $row) {\n        foreach($row as $val) {\n            if ($val == $x) {\n\
    \                $rows[$row_len] = $row;\n                $row_len++;\n      \
    \      }\n        }\n    }\n    $row[$row_len] = $row;\n    return $rows;\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoeo_zgwk.php:39\n\
    Stack trace:\n#0 /tmp/tmpoeo_zgwk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpoeo_zgwk.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if ($lst.length === 0 || $lst[0].length === 0 || $x === 0 || x ===\
    \ 0) {\n        return [];\n    }\n\n    var results = [];\n    var last_row =\
    \ -1;\n    var last_col = -1;\n    var row_start = 0;\n    var col_start = 0;\n\
    \    var curr_row = -1;\n    var curr_col = 0;\n    var is_in = false;\n\n   \
    \ $.each(lst, function (i, e) {\n        // find rows\n        if ($.isArray(e))\
    \ {\n            if ($x === i || $x === i + 1) {\n                row_start =\
    \ i;\n                curr_row = i;\n                curr_col = col_start;\n \
    \               is_in = true;\n            }\n            else {\n           \
    \     if (curr_row !== last_row) {\n                    results.push([]);\n  \
    \              }\n                $.each(e, function (j, col) {\n            \
    \        if (curr_col === col_start || curr_col === col_start + 1) {\n       \
    \                 is_in = false;\n                    }\n                    if\
    \ (is_in) {\n                        results[results.length - 1].push(curr_row,\
    \ curr_col);\n                        last_col = curr_col;\n                 \
    \       curr_col += 1;\n                    }\n                });\n         \
    \       last_row = curr_row;\n                curr_row = i;\n                curr_col\
    \ = col_start;\n                is_in = true;\n            }\n        }\n    });\n\
    \n    results = results.sort(function (a, b) {\n        var _a = $(a).sort().reverse();\n\
    \        var _b = $(b).sort().reverse();\n        return _a[0] - _b[0];\n    });\n\
    \n    return results.sort(function (a, b) {\n        var _a = $(a).sort().reverse();\n\
    \        var _b = $(b).sort().reverse();\n        return _a[1] - _b[1];\n    });\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv0arv25n.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $row = array();\n  $cols = count($lst[0]);\n  for ($c = 0; $c < $cols;\
    \ $c++) {\n    for ($r = 0; $r < count($lst); $r++) {\n      if ($lst[$r][$c]\
    \ == $x) {\n        $row[] = array($r, $c);\n        break;\n      }\n    }\n\
    \  }\n  arsort($row);\n  arsort($row);\n  return $row;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfn5otmd.php:38\n\
    Stack trace:\n#0 /tmp/tmpyfn5otmd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpyfn5otmd.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    $row_len = 1;\n    foreach ($lst as $row) {\n\
    \        if (count($row) != $row_len) {\n            die(\"Invalid input data!\"\
    );\n        }\n    }\n\n    // sort rows in ascending order\n    sort($lst, SORT_NUMERIC);\n\
    \n    // sort rows by columns in descending order\n    usort($lst, function($a,\
    \ $b) use ($x) {\n        $a_col = array_search($a, $x);\n        $b_col = array_search($b,\
    \ $x);\n        if ($a_col < $b_col) {\n            return -1;\n        } else\
    \ if ($a_col > $b_col) {\n            return 1;\n        } else {\n          \
    \  return 0;\n        }\n    });\n\n    // add column coordinates\n    foreach\
    \ ($lst as $key => $row) {\n        for ($i = 0; $i < $row_len; $i++) {\n    \
    \        $result[$i][$key] = $key + $i;\n        }\n    }\n\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Invalid input data!
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $row = [];\n  foreach($lst as $row) {\n    foreach($row as $col) {\n\
    \      $result = [$x, $col];\n      array_push($lst, $result);\n    }\n  }\n \
    \ return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3n54x8fw.php:34\n\
    Stack trace:\n#0 /tmp/tmp3n54x8fw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3n54x8fw.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $result = [];\n  $num_rows = count($lst);\n  for ($i = 0; $i < $num_rows;\
    \ $i++) {\n    $row_lst = $lst[$i];\n    if ($x >= $row_lst[0]) {\n      break;\n\
    \    }\n  }\n  $row_lst = $lst[$i];\n  $x_i = $row_lst;\n  $x_i = $x_i[0];\n \
    \ $row_lst = $x_i;\n  $num_cols = count($row_lst);\n  for ($i = 0; $i < $num_cols;\
    \ $i++) {\n    $col_lst = $row_lst[$i];\n    if ($x >= $col_lst) {\n      break;\n\
    \    }\n  }\n  for ($i = 0; $i < $num_cols; $i++) {\n    $col_lst = $row_lst[$i];\n\
    \    $result[] = [$i, $col_lst];\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp1n6hw664.php on line 31\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1n6hw664.php:49\nStack trace:\n#0 /tmp/tmp1n6hw664.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1n6hw664.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $data = [];\n    foreach ($lst as $lstRow) {\n        $row = [];\n\
    \        foreach ($lstRow as $i => $j) {\n            if ($i == $x) { $row[] =\
    \ array(0, $j); }\n        }\n        $data[] = $row;\n    }\n    ksort($data);\n\
    \    return array_map(function($a) { return array_combine(range(0,count($a)),$a);},\
    \ $data);\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_combine(): Both parameters should have an equal number\
    \ of elements in /tmp/tmphtjnx0mr.php on line 28\n\nWarning: array_combine():\
    \ Both parameters should have an equal number of elements in /tmp/tmphtjnx0mr.php\
    \ on line 28\n\nWarning: array_combine(): Both parameters should have an equal\
    \ number of elements in /tmp/tmphtjnx0mr.php on line 28\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphtjnx0mr.php:36\nStack trace:\n#0 /tmp/tmphtjnx0mr.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphtjnx0mr.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $ret = [];\n  foreach ($lst as $line) {\n    $r = array_count_values($line);\n\
    \    foreach ($r as $col => $val) {\n      if ($val == $x) {\n        $ret[] =\
    \ [count($line) - 1, $col];\n      }\n    }\n  }\n  usort($ret, 'cmp');\n  return\
    \ $ret;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmpszz3zflo.php on line 28\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszz3zflo.php:37\nStack\
    \ trace:\n#0 /tmp/tmpszz3zflo.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpszz3zflo.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = [];\n    $rows_cnt = count($lst);\n    $rows_cnt = $rows_cnt\
    \ ? $rows_cnt : 0;\n    for ($row = 0; $row < $rows_cnt; ++$row) {\n        if\
    \ ($row == 0) {\n            $cols = count($lst[$row]);\n            $cols = $cols\
    \ ? $cols : 0;\n            for ($col = 0; $col < $cols; ++$col) {\n         \
    \       $row_data = [];\n                $row_data[] = ($row, $col);\n       \
    \         $row_data[] = $lst[$row][$col];\n                $rows[] = $row_data;\n\
    \            }\n        } else {\n            $row_data = [];\n            $row_data[]\
    \ = ($row, $col);\n            $row_data[] = $lst[$row][$col];\n            $rows[]\
    \ = $row_data;\n        }\n    }\n    usort($rows, function($a, $b) {\n      \
    \  $a_cnt = count($a[2]);\n        $b_cnt = count($b[2]);\n        if ($a_cnt\
    \ != $b_cnt) {\n            return $a_cnt < $b_cnt;\n        }\n        return\
    \ $a[1] < $b[1];\n    });\n    usort($rows, function($a, $b) {\n        $a_cnt\
    \ = count($a[2]);\n        $b_cnt = count($b[2]);\n        if ($a_cnt != $b_cnt)\
    \ {\n            return $a_cnt > $b_cnt;\n        }\n        return $a[1] > $b[1];\n\
    \    });\n    $row = $rows[0];\n    return $row;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1lpytlua.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = array_map(function ($row) {\n    return array_combine(array_values($row),\
    \ array_fill(0, count($row), 0));\n  }, $lst);\n  sort($rows, SORT_NUMERIC);\n\
    \  $result = [];\n  foreach ($rows as $row) {\n    $row_sorted = array_reverse(array_slice($row,\
    \ $x));\n    sort($row_sorted, SORT_NUMERIC);\n    $result[] = $row_sorted;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwccfsxps.php:37\n\
    Stack trace:\n#0 /tmp/tmpwccfsxps.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwccfsxps.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    // Sort row by rows in ascending order\n    usort($lst[0], function($a,\
    \ $b) use ($x) {\n        if($a == $x)\n            return 1;\n        elseif($b\
    \ == $x)\n            return -1;\n        else\n            return 0;\n    });\n\
    \    // Sort row by columns in descending order\n    usort($lst[0], function($a,\
    \ $b) use ($x) {\n        return $a < $b ? -1 : 1;\n    });\n    \n    $rows =\
    \ array_fill(0, count($lst[0]),0);\n    \n    for($i=0;$i<count($lst[0]);$i++)\
    \ {\n        for($j=0;$j<count($lst);$j++) {\n            if($lst[$j][0] == $i)\
    \ {\n                $rows[$i] = $j;\n            }\n        }\n    }\n    \n\
    \    $new_rows = array_fill(0, count($lst[0]),0);\n    \n    foreach($rows as\
    \ $row) {\n        $new_rows[$row] = array_slice($lst, $row);\n    }\n    \n \
    \   foreach($new_rows as &$new_row) {\n        $new_row[0] = array_reverse($new_row[0]);\n\
    \    }\n    \n    return $new_rows;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, null given\
    \ in /tmp/tmpjiehu0u8.php on line 50\n\nWarning: Cannot use a scalar value as\
    \ an array in /tmp/tmpjiehu0u8.php on line 50\n\nWarning: array_reverse() expects\
    \ parameter 1 to be array, null given in /tmp/tmpjiehu0u8.php on line 50\n\nWarning:\
    \ Cannot use a scalar value as an array in /tmp/tmpjiehu0u8.php on line 50\n\n\
    Warning: array_reverse() expects parameter 1 to be array, null given in /tmp/tmpjiehu0u8.php\
    \ on line 50\n\nWarning: Cannot use a scalar value as an array in /tmp/tmpjiehu0u8.php\
    \ on line 50\n\nWarning: array_reverse() expects parameter 1 to be array, null\
    \ given in /tmp/tmpjiehu0u8.php on line 50\n\nWarning: Cannot use a scalar value\
    \ as an array in /tmp/tmpjiehu0u8.php on line 50\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjiehu0u8.php:61\nStack trace:\n#0 /tmp/tmpjiehu0u8.php(69):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjiehu0u8.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = [];\n  if (empty($lst)) {\n    return [];\n  }\n  $n = count($lst);\n\
    \  $m = count($lst[0]);\n  for ($i = 0; $i < $n; $i++) {\n    $row = [];\n   \
    \ for ($j = 0; $j < $m; $j++) {\n      if ($j === $x) {\n        $row[] = array($i,\
    \ $j);\n      }\n    }\n    $rows[] = $row;\n  }\n  asort($rows);\n  krsort($rows);\n\
    \  return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbi28c6sj.php:44\n\
    Stack trace:\n#0 /tmp/tmpbi28c6sj.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpbi28c6sj.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    for($i = 0, $length = count($lst); $i < $length;\
    \ $i++) {\n        $curr = array_slice($lst[$i], 0, $x);\n        if(count($curr)\
    \ > $x) {\n            array_splice($lst[$i], $x, 0, [$curr]);\n            $curr[0]--;\n\
    \        }\n        $result[] = array_splice($curr, 0, 1);\n    }\n    usort($result,\
    \ function ($a, $b) {\n        return strcasecmp(array_flip($a), array_flip($b));\n\
    \    });\n    return array_map(function ($row) {\n        return array_flip($row);\n\
    \    }, $result);\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strcasecmp() expects parameter 1 to be string, array given in\
    \ /tmp/tmpxhmqesbv.php on line 29\n\nWarning: strcasecmp() expects parameter 1\
    \ to be string, array given in /tmp/tmpxhmqesbv.php on line 29\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxhmqesbv.php:41\nStack trace:\n\
    #0 /tmp/tmpxhmqesbv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxhmqesbv.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rslt = array();\n    foreach ($lst as $lst) {\n        $rslt = array_merge($rslt,\
    \ array_slice($lst, (array_search($x, $lst) + count($lst)), count($lst)));\n \
    \   }\n    sort($rslt, SORT_NUMERIC);\n    $rslt = array_merge(array(array(0)),\
    \ $rslt);\n    $rslt = array_reverse($rslt, true);\n    return $rslt;\n}\n$lst\
    \ = array(array(1,2,3,4,5,6), array(1,2,3,4,1,6), array(1,2,3,4,5,1));\nsort($lst,\
    \ SORT_NUMERIC);\nprint_r(get_row($lst, 1) == array(\n    array(0, 0),\n    array(4,\
    \ 4),\n    array(0, 0),\n    array(5, 5),\n    array(0, 0),\n));\nprint_r(get_row([],\
    \ 1) == array());\nprint_r(get_row([[], [1], [1, 2, 3]]) == array(\n    array(2,\
    \ 2)\n));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught ArgumentCountError: Too few arguments to function\
    \ get_row(), 1 passed in /tmp/tmpfv5azlex.php on line 38 and exactly 2 expected\
    \ in /tmp/tmpfv5azlex.php:18\nStack trace:\n#0 /tmp/tmpfv5azlex.php(38): get_row(Array)\n\
    #1 {main}\n  thrown in /tmp/tmpfv5azlex.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst)) {\n        return [];\n    }\n\n    $result = [];\n\
    \    $rows = count($lst);\n    for ($i = 0; $i < $rows; $i++) {\n        $row\
    \ = get_row($lst[$i], $x);\n        if (!empty($row)) {\n            $result[]\
    \ = [$i, $x];\n            foreach ($row as $j) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    $result = array_reverse($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmptgyamw_m.php on line 24\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmptgyamw_m.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptgyamw_m.php on line 24\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmptgyamw_m.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptgyamw_m.php on line 24\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmptgyamw_m.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptgyamw_m.php on line 24\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmptgyamw_m.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptgyamw_m.php on line 24\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmptgyamw_m.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptgyamw_m.php on line 24\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmptgyamw_m.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptgyamw_m.php on line 24\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmptgyamw_m.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptgyamw_m.php on line 24\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmptgyamw_m.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptgyamw_m.php on line 24\n\nWarning"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (!$lst) {\n    return [];\n  }\n\n  $sorted_rows = ksort($lst);\n\
    \  foreach ($sorted_rows as $row) {\n    $sorted_cols = (array) ksort($row);\n\
    \    if (!array_intersect_key($sorted_cols, array_flip($sorted_rows)) && $sorted_cols[$x]\
    \ !== null) {\n      continue;\n    }\n\n    $coords = array_combine(array_keys($row),\
    \ range(count($row)));\n    $coords = array_flip($coords);\n    $coords[$x] =\
    \ null;\n    $res = array_filter(\n      array_keys($coords),\n      function($c)\
    \ use ($sorted_rows, $sorted_cols) {\n        return isset($sorted_rows[$c]) &&\
    \ isset($sorted_cols[$c]);\n      }\n    );\n    if (count($res) === 1) {\n  \
    \    return [$coords[$res[0]]];\n    }\n  }\n  return [];\n}\n</code>\nTo illustrate\
    \ it more, here is the above code with some test data:\n<code>\n<?php\n$data =\
    \ [\n  [\n    [1, 3, 5],\n    [4, 1, 6],\n    [5, 6, 3]\n  ],\n  [\n    [],\n\
    \    [2, 4],\n    [1],\n  ],\n  [\n    [2, 3],\n    [],\n    [],\n  ],\n  [\n\
    \    [],\n    [],\n    [],\n    [1, 5]\n  ],\n  [\n    [3, 4, 5],\n    [6, 1,\
    \ 7],\n    [2, 4, 6]\n  ],\n  [\n    [1, 3, 4],\n    [5, 6, 2],\n    [],\n  ],\n\
    ];\n\n$tests = [\n  [[\n    2,\n    1,\n    3,\n    4,\n    5,\n    6,\n    7\n\
    \  ], [\n    0,\n    2,\n    4,\n    1,\n    1,\n    6,\n    7\n  ], [\n    0,\n\
    \    0,\n    4,\n    5,\n    6,\n    2,\n    7\n  ], [\n    2,\n    0,\n    0,\n\
    \    0,\n    0,\n    0,\n    3\n  ], [\n    0,\n    2,\n    0,\n    0,\n    0,\n\
    \    0,\n    3\n  ], [\n    0,\n    0,\n    0,\n    0,\n    1,\n    5,\n    3\n\
    \  ], [\n    1,\n    3,\n    5,\n    6,\n    0,\n    0,\n    3\n  ], [\n    2,\n\
    \    1,\n    3,\n    4,\n    5,\n    6,\n    7\n  ], [\n    0,\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphh6vud8s.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    foreach($lst as $k1 => $v1) {\n        $result[] = [$k1, $x];\n \
    \   }\n    foreach($lst as $k1 => $v1) {\n        if($x != $v1) {\n          \
    \  $result[] = [$k1, $v1];\n        }\n    }\n    ksort($result);\n    krsort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdupekbz9.php:37\n\
    Stack trace:\n#0 /tmp/tmpdupekbz9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdupekbz9.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array();\n    foreach ($lst as $row) {\n        if (in_array($x,\
    \ $row)) {\n            $rows[] = $row;\n        }\n    }\n    if (!count($rows))\
    \ {\n        return array();\n    }\n    // sort by rows in ascending order\n\
    \    usort($rows, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return 0;\n        } else {\n            return ($a[0] < $b[0]) ? -1 : 1;\n\
    \        }\n    });\n    // sort by columns in descending order\n    usort($rows,\
    \ function ($a, $b) {\n        $x = $b[0] - ($b[0] - $a[0]) + count($a) - 1;\n\
    \        if ($x == 0) {\n            return 0;\n        } else {\n           \
    \ return ($a[0] < $b[0]) ? -1 : 1;\n        }\n    });\n    return $rows;\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6h4smr80.php:53\n\
    Stack trace:\n#0 /tmp/tmp6h4smr80.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp6h4smr80.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $i = 1;\n    $n = count($lst);\n    $j = $n - 1;\n    $coord = [];\n\
    \    foreach ($lst as $k => $v) {\n        $coord[$k] = [$i, $j];\n        $i++;\n\
    \        if ($i == $x) {\n            break;\n        }\n    }\n    ksort($coord);\n\
    \    ksort($coord[$k]);\n    $result = [];\n    $x = $coord[$k][1] - 1;\n    for\
    \ ($k = 0; $k < $n; $k++) {\n        $result[] = [$coord[$k][0], $k];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxb9zwi3d.php:45\n\
    Stack trace:\n#0 /tmp/tmpxb9zwi3d.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxb9zwi3d.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $arr = [];\n  $size = count($lst[0]);\n  for ($i = 0; $i < $size; $i++)\
    \ {\n    $result = [$i, 0];\n    for ($j = 1; $j < $size; $j++) {\n      if ($arr[$i\
    \ - 1][$j - 1] > $arr[$i - 1][$j]) {\n        $result = [$i, $j];\n      }\n \
    \   }\n    $arr[] = $result;\n  }\n  $return = [];\n  for ($i = 0; $i < $size;\
    \ $i++) {\n    if ($x < $arr[$i][0]) {\n      break;\n    }\n    $return[] = array_merge($arr[$i]);\n\
    \  }\n  return $return;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv772iebi.php:44\n\
    Stack trace:\n#0 /tmp/tmpv772iebi.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpv772iebi.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  foreach($lst as $i => $row) {\n    $row = array_flip($row);\n    $keys\
    \ = array_keys($row);\n    asort($keys);\n    asort($row);\n    $row_lst = [];\n\
    \    foreach($keys as $k) {\n      $row_lst[] = [$i, $k];\n    }\n    $row_lst_sorted\
    \ = sort($row_lst);\n    $row_lst_sorted[] = [$i, $x];\n    return $row_lst_sorted;\n\
    \  }\n  return [];\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Cannot use a scalar value as an array in /tmp/tmp644dcfat.php\
    \ on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp644dcfat.php:40\n\
    Stack trace:\n#0 /tmp/tmp644dcfat.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp644dcfat.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $ans = [];\n    foreach ($lst as $row) {\n        foreach ($row as\
    \ $i) {\n            if ($i == $x) {\n                $ans[] = array(0, count($row));\n\
    \                $ans[count($ans) - 1][1]--;\n            }\n        }\n    }\n\
    \    return $ans;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_ylkw54.php:35\n\
    Stack trace:\n#0 /tmp/tmp1_ylkw54.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp1_ylkw54.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if($lst === null || $lst.length === 0) return [];\n\n    $out = [];\n\
    \    foreach($lst as $l) {\n        if(in_array($x, $l)) return $out;\n\n    \
    \    $r = $l[0];\n        foreach($l as $v) {\n            $r &= $v;\n       \
    \ }\n\n        $out[] = [$r, $l];\n    }\n\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpj433edeh.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj433edeh.php:41\nStack\
    \ trace:\n#0 /tmp/tmpj433edeh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpj433edeh.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    foreach ($lst as $key => $value) {\n        if\
    \ (in_array($key, $x)) {\n            $result[] = [$key, array_search($key, $x)];\n\
    \        }\n    }\n    usort($result, 'cmp');\n    foreach ($result as $key =>\
    \ $value) {\n        $result[$key] = array_reverse($result[$key]);\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: in_array() expects parameter 2 to be array, int given in /tmp/tmpy48a3tlr.php\
    \ on line 21\n\nWarning: in_array() expects parameter 2 to be array, int given\
    \ in /tmp/tmpy48a3tlr.php on line 21\n\nWarning: in_array() expects parameter\
    \ 2 to be array, int given in /tmp/tmpy48a3tlr.php on line 21\n\nWarning: usort()\
    \ expects parameter 2 to be a valid callback, function 'cmp' not found or invalid\
    \ function name in /tmp/tmpy48a3tlr.php on line 25\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpy48a3tlr.php:37\nStack trace:\n#0 /tmp/tmpy48a3tlr.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy48a3tlr.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (empty($lst) || $x < 0) {\n    return [];\n  }\n  $row = [0 => $x];\n\
    \  $col = [];\n  $xs = [];\n  foreach ($lst as $y) {\n    if (!isset($col[$y]))\
    \ {\n      $xs[] = $y;\n      $col[$y] = count($xs);\n    }\n    $row[$y] = $col[$y];\n\
    \  }\n  return $row;\n}\n$test = [\n  [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n  [[1,\
    \ 2, 3], [1, 2, 3], [4, 5, 1]],\n  [[1, 2, 3], [4, 1, 2, 3], [7, 7, 7, 7], [9,\
    \ 9, 9, 9]],\n];\nforeach ($test as $t) {\n  printf(\"Expected:\\n%s\\nActual:\\\
    n%s\\n\", json_encode($t), json_encode($get_row($t, 1)));\n}\n</code>\n<|/ a tags=arrays,php,algorithm\
    \ dscore=0 |>\n<| c |>\nThis seems to be the most optimal solution. Even though\
    \ it's not necessarily the most efficient solution, it is the most succinct.\n\
    <|/ c |>\n<| a tags=arrays,php,algorithm |>\nThis is my solution.\nI added a class\
    \ property $rows to store the row index and a class property $cols to store the\
    \ column index. \n<code>\n<?php\nclass MyClass {\n  private $rows, $cols;\n\n\
    \  public function __construct(array $arr) {\n    $this->rows = 0;\n    $this->cols\
    \ = 0;\n\n    foreach($arr as $row) {\n      $this->rows++;\n      if(empty($this->cols))\
    \ {\n        $this->cols = count($row);\n        continue;\n      }\n\n      foreach($row\
    \ as $key => $val) {\n        $this->cols[$key] = max(1, $this->cols[$key]);\n\
    \      }\n    }\n  }\n\n  public function find(int $x, int $y = null): array\n\
    \  {\n    if($y < 0 || $y >= $this->rows) {\n      return [];\n    }\n\n    if($x\
    \ != $this->cols[$y]) {\n      return [];\n    }\n\n    $res = $this->get($y);\n\
    \    return array_slice($res, array_search($x, $res), 1);\n  }\n\n  private function\
    \ get(int $y): array\n  {\n    if($y < 0 || $y >= $this->rows) {\n      return\
    \ [];\n    }\n\n    $res = array_slice($this, $y, $this->cols[$y], 1);\n    array_splice($this,\
    \ $y, $this->cols[$y]);\n    return $res;\n  }\n\n  public function dump(): array\n\
    \  {\n    return array_map(function($item\nfunction candidate(...$args) {\n  \
    \  return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy2s8bc5h.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $r = array();\n  foreach ($lst as $i => $row) {\n    $c = array_flip(array_keys($row,\
    \ $x));\n    $r[$i][0] = 0;\n    $r[$i][count($c)] = 0;\n    foreach ($c as $k\
    \ => $v) {\n      if ($v) $r[$i][$k + 1] = $k;\n    }\n  }\n  return $r;\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce1xxaf1.php:36\n\
    Stack trace:\n#0 /tmp/tmpce1xxaf1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpce1xxaf1.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    foreach ($lst as $row) {\n        $result[] =\
    \ array_intersect_key($row, array_flip(array_keys($row))) + array($x);\n    }\n\
    \    \n    return array_map(function($item) { return array_flip($item); }, $result);\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpucmrw3vg.php:32\n\
    Stack trace:\n#0 /tmp/tmpucmrw3vg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpucmrw3vg.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $res = array();\n    foreach($lst as $row) {\n        foreach($row\
    \ as $i => $elem) {\n            if($elem == $x)\n                $res[] = array($i,\
    \ $x);\n        }\n    }\n    sort($res, function($a, $b) { return $a[1] - $b[1];\
    \ });\n    sort($res, function($a, $b) { return $a[0] - $b[0]; });\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 2 to be int, object given in /tmp/tmpu5x_v5c5.php\
    \ on line 26\n\nWarning: sort() expects parameter 2 to be int, object given in\
    \ /tmp/tmpu5x_v5c5.php on line 27\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpu5x_v5c5.php:36\nStack trace:\n#0 /tmp/tmpu5x_v5c5.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpu5x_v5c5.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (!is_array($lst))\n        return [];\n    $new_lst = [];\n  \
    \  if (count($lst) < $x) {\n        return $new_lst;\n    }\n    $rows = array_count_values(array_slice($lst,\
    \ 0, $x));\n    $columns = array_slice(array_keys($rows), $x);\n    foreach ($rows\
    \ as $row) {\n        $row_x = array_keys($columns, $row);\n        $row_y = array_slice($columns,\
    \ 0, count($row_x));\n        $new_lst[] = [$row, $row_x, $row_y];\n    }\n  \
    \  return $new_lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmpjb0wak87.php on line 25\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpjb0wak87.php:40\nStack trace:\n#0 /tmp/tmpjb0wak87.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjb0wak87.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (!is_array($lst) || $x < 0 || $x >= count($lst)) {\n    return array();\n\
    \  }\n  $row = array();\n  foreach($lst as $i => $row) {\n    $row[$i] = $i;\n\
    \  }\n  $sorted = array_reverse($row);\n  $sorted = array_combine($sorted, array_reverse($row));\n\
    \  $sorted = array_merge($sorted, array_flip(array_keys($sorted)));\n  $sorted\
    \ = array_flip( array_keys($sorted) );\n  $sorted = array_values( $sorted );\n\
    \  return array_intersect_key($row, $sorted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmugyvmq.php:39\n\
    Stack trace:\n#0 /tmp/tmptmugyvmq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmptmugyvmq.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $out = array();\n    foreach($lst as $row) {\n        $out[] = array_slice($row,\
    \ array_search($x, $row), 1);\n    }\n    foreach($out as &$v) {\n        sort($v);\n\
    \    }\n    return $out;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvnf6ony.php:34\n\
    Stack trace:\n#0 /tmp/tmpzvnf6ony.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzvnf6ony.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $lst = sort($lst, 'strcmp');\n    $rows = array();\n    foreach ($lst\
    \ as $row) {\n        $new_row = array();\n        for ($i = 0; $i < $x; $i++)\
    \ {\n            $new_row[] = (int) array_slice($row, $i * $x, $x);\n        }\n\
    \        $rows[] = $new_row;\n    }\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 2 to be int, string given in /tmp/tmppqm6azo7.php\
    \ on line 19\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmppqm6azo7.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqm6azo7.php:36\n\
    Stack trace:\n#0 /tmp/tmppqm6azo7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppqm6azo7.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array_map(function ($v) { return range($v); }, $lst);\n \
    \   usort($rows, function ($a, $b) { return array_multisort(array_reverse($a),\
    \ array_reverse($b)); });\n    foreach ($rows as $k => $row) {\n        if (in_array($x,\
    \ $row)) {\n            return array_slice($row, $k + 1, -1);\n        }\n   \
    \ }\n    return [];\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpfey02lqk.php\
    \ on line 19\n\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpfey02lqk.php\
    \ on line 19\n\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmpfey02lqk.php\
    \ on line 19\n\nWarning: array_reverse() expects parameter 1 to be array, bool\
    \ given in /tmp/tmpfey02lqk.php on line 20\n\nWarning: array_reverse() expects\
    \ parameter 1 to be array, bool given in /tmp/tmpfey02lqk.php on line 20\n\nWarning:\
    \ array_multisort(): Argument #1 is expected to be an array or a sort flag in\
    \ /tmp/tmpfey02lqk.php on line 20\n\nWarning: array_reverse() expects parameter\
    \ 1 to be array, bool given in /tmp/tmpfey02lqk.php on line 20\n\nWarning: array_reverse()\
    \ expects parameter 1 to be array, bool given in /tmp/tmpfey02lqk.php on line\
    \ 20\n\nWarning: array_multisort(): Argument #1 is expected to be an array or\
    \ a sort flag in /tmp/tmpfey02lqk.php on line 20\n\nWarning: in_array() expects\
    \ parameter 2 to be array, bool given in /tmp/tmpfey02lqk.php on line 22\n\nWarning:\
    \ in_array() expects parameter 2 to be array, bool given in /tmp/tmpfey02lqk.php\
    \ on line 22\n\nWarning: in_array() expects parameter 2 to be array, bool given\
    \ in /tmp/tmpfey02lqk.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpfey02lqk.php:34\nStack trace:\n#0 /tmp/tmpfey02lqk.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfey02lqk.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst)) {\n        return [];\n    }\n    $rows = array_count_values(array_map(function\
    \ ($row) {\n        return $row;\n    }, $lst));\n    $lst = array_map(function\
    \ ($row) use ($rows) {\n        $r = array_count_values($row);\n        return\
    \ [$r[$x], $r];\n    }, $lst);\n\n    uasort($lst, 'cmp');\n    usort($lst, 'cmp');\n\
    \n    $ret = [];\n    $curRow = 0;\n    foreach ($lst as $lstItem) {\n       \
    \ if (is_array($lstItem[1])) {\n            $ret[] = [$curRow, $curRow + $lstItem[0]];\n\
    \            $curRow += $lstItem[1];\n        } else {\n            $ret[] = [$curRow,\
    \ $curRow + 1];\n        }\n    }\n\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmpyay2ruin.php on line 24\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmpyay2ruin.php on line 24\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmpyay2ruin.php\
    \ on line 24\n\nWarning: uasort() expects parameter 2 to be a valid callback,\
    \ function 'cmp' not found or invalid function name in /tmp/tmpyay2ruin.php on\
    \ line 30\n\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmpyay2ruin.php on line 31\n\
    \nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpyay2ruin.php:38\n\
    Stack trace:\n#0 /tmp/tmpyay2ruin.php(48): get_row(Array, 1)\n#1 /tmp/tmpyay2ruin.php(52):\
    \ candidate(Array, 1)\n#2 /tmp/tmpyay2ruin.php(60): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpyay2ruin.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    foreach($lst as $row) {\n        $row_x = array_search($x, $row);\n\
    \        $row_y = array_search($x, $row, $row_x + 1);\n        $row_coord = array($row_x,\
    \ $row_y);\n        \n        asort($row_coord);\n        arsort($row_coord);\n\
    \        \n        $result[] = $row_coord;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7644lia.php:37\n\
    Stack trace:\n#0 /tmp/tmpf7644lia.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpf7644lia.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $n = count($lst);\n    $res = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $sub = $lst[$i];\n        if (is_array($sub)) {\n            $tmp\
    \ = get_row($sub, $x);\n            if (!empty($tmp)) {\n                sort($tmp);\n\
    \                for ($j = 0; $j < $n; $j++) {\n                    $res[$i][$j]\
    \ = $tmp[$j];\n                }\n            }\n        } else {\n          \
    \  if ($sub == $x) {\n                $res[] = [$i, $n - 1];\n            }\n\
    \        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw_p2n2_.php:45\n\
    Stack trace:\n#0 /tmp/tmpiw_p2n2_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpiw_p2n2_.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if($x == 0) {\n    return [];\n  }\n  $r = [];\n  foreach($lst as $row)\
    \ {\n    if(count($row) == $x) {\n      $r[] = array_slice($row, 0);\n    }\n\
    \  }\n  return array_multisort(array_reverse($r), SORT_DESC, SORT_NUMERIC, $r);\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjfvxv05.php:36\n\
    Stack trace:\n#0 /tmp/tmpnjfvxv05.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnjfvxv05.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst) || empty($x)) {\n        return array();\n    }\n\
    \    $rows = array_map(function($row) {\n            return array_count_values($row);\n\
    \    }, $lst);\n    $sorted_rows = array_map(function($row) {\n            ksort($row);\n\
    \            uasort($row, function($a, $b) use ($x) {\n                return\
    \ $a - $b;\n            });\n            return $row;\n    }, $rows);\n    $result_rows\
    \ = array();\n    foreach($sorted_rows as $row) {\n            if ($row[$x] ===\
    \ 1) {\n                    $result_rows[] = array(0, $row);\n            }\n\
    \    }\n    return $result_rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xtpigd5.php:46\n\
    Stack trace:\n#0 /tmp/tmp4xtpigd5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp4xtpigd5.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $res = [];\n    foreach($lst as $row) {\n        $row2 = [];\n  \
    \      $cnt = 0;\n        foreach($row as $col) {\n            if(!is_null($col)\
    \ && !is_null($cols[$col])) {\n                ++$cnt;\n                if($cnt\
    \ === $x) {\n                    $row2[] = array(0, $cols[$col]);\n          \
    \      }\n            }\n        }\n        if($row2) {\n            $res = $row2;\n\
    \            break;\n        }\n    }\n    if(!$res) {\n        return [];\n \
    \   }\n    usort($res, function($a, $b){\n        $r = $a[1] - $b[1];\n      \
    \  return $r;\n    });\n    usort($res, function($a, $b){\n        $c = $b[0]\
    \ - $a[0];\n        return $c;\n    });\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ns94603.php:55\n\
    Stack trace:\n#0 /tmp/tmp_ns94603.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp_ns94603.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $r = [];\n    $c = 0;\n    foreach ($lst as $row) {\n        $m =\
    \ count($row) - 1;\n        $i = $row[0];\n        foreach (range($m, $x) as $j)\
    \ {\n            $c = $j;\n            $r[] = array($i, $c);\n            $i =\
    \ $row[$j];\n        }\n    }\n    usort($r, function($a, $b) {\n        $a =\
    \ $a[0] < $b[0] ? -1 : 1;\n        $b = $b[0] < $a[0] ? -1 : 1;\n        return\
    \ $a > $b;\n    });\n    return $r;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxypynf1.php:43\n\
    Stack trace:\n#0 /tmp/tmptxypynf1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmptxypynf1.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $result = array();\n  foreach ($lst as $row) {\n    if (array_search($x,\
    \ $row) === false) {\n      continue;\n    }\n    $result[] = array($row, array_flip($row));\n\
    \  }\n  sort($result, SORT_NUMERIC);\n  ksort($result[0], SORT_NUMERIC);\n  sort($result[0],\
    \ SORT_NUMERIC, SORT_DESC);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects at most 2 parameters, 3 given in /tmp/tmpyi7q50nt.php\
    \ on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyi7q50nt.php:37\n\
    Stack trace:\n#0 /tmp/tmpyi7q50nt.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyi7q50nt.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    array_walk($lst, function(&$v) use ($x) {\n        $v = $v;\n   \
    \ });\n    array_walk($lst, function(&$v) use ($x, &$r) {\n        $v = $x - $v;\n\
    \    });\n    $r = [];\n    array_walk($lst, function($v) use (&$r, &$r) {\n \
    \       foreach ($v as $i => $e) {\n            $r[$i] += $e;\n        }\n   \
    \ });\n    array_multisort($r, SORT_DESC, SORT_NUMERIC, $lst);\n    return $lst;\n\
    }\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use variable $r twice in /tmp/tmp5p0bzioq.php on\
    \ line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    // Your code here\n    $result = [];\n    foreach($lst as $row){\n\
    \        $temp = [];\n        foreach($row as $item){\n            if($item ==\
    \ $x){\n                $temp[] = array(0, count($row)-1);\n            }\n  \
    \      }\n        $result = array_merge($result, $temp);\n    }\n    sort($result);\n\
    \    usort($result,'cmp');\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmp4pmqkxvw.php on line 31\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pmqkxvw.php:40\nStack\
    \ trace:\n#0 /tmp/tmp4pmqkxvw.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4pmqkxvw.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $ret = [];\n    foreach ($lst as $row) {\n        if (in_array($x,\
    \ $row)) {\n            $r = [];\n            foreach ($row as $col) {\n     \
    \           $r[] = array_search($col, $x);\n            }\n            $ret[]\
    \ = array_combine(range(0,count($row)), $r);\n        }\n    }\n    usort($ret,\
    \ function ($a, $b) {\n        if ($a[0] > $b[0]) {\n            return 1;\n \
    \       }\n        if ($a[0] < $b[0]) {\n            return -1;\n        }\n \
    \       if ($a[1] < $b[1]) {\n            return -1;\n        }\n        return\
    \ 1;\n    });\n    return $ret;\n}\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, int given in\
    \ /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_search() expects parameter\
    \ 2 to be array, int given in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_search()\
    \ expects parameter 2 to be array, int given in /tmp/tmp1ovgofnn.php on line 24\n\
    \nWarning: array_search() expects parameter 2 to be array, int given in /tmp/tmp1ovgofnn.php\
    \ on line 24\n\nWarning: array_search() expects parameter 2 to be array, int given\
    \ in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_search() expects parameter\
    \ 2 to be array, int given in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_combine():\
    \ Both parameters should have an equal number of elements in /tmp/tmp1ovgofnn.php\
    \ on line 26\n\nWarning: array_search() expects parameter 2 to be array, int given\
    \ in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_search() expects parameter\
    \ 2 to be array, int given in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_search()\
    \ expects parameter 2 to be array, int given in /tmp/tmp1ovgofnn.php on line 24\n\
    \nWarning: array_search() expects parameter 2 to be array, int given in /tmp/tmp1ovgofnn.php\
    \ on line 24\n\nWarning: array_search() expects parameter 2 to be array, int given\
    \ in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_search() expects parameter\
    \ 2 to be array, int given in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_combine():\
    \ Both parameters should have an equal number of elements in /tmp/tmp1ovgofnn.php\
    \ on line 26\n\nWarning: array_search() expects parameter 2 to be array, int given\
    \ in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_search() expects parameter\
    \ 2 to be array, int given in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_search()\
    \ expects parameter 2 to be array, int given in /tmp/tmp1ovgofnn.php on line 24\n\
    \nWarning: array_search() expects parameter 2 to be array, int given in /tmp/tmp1ovgofnn.php\
    \ on line 24\n\nWarning: array_search() expects parameter 2 to be array, int given\
    \ in /tmp/tmp1ovgofnn.php on line 24\n\nWarning: array_search() expects parameter\
    \ 2 to be array, int"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (empty($lst)) {\n    return [];\n  }\n\n  // Return empty list if\
    \ x is not in lst\n  if (!array_search($x, $lst)) {\n    return [];\n  }\n\n \
    \ $result = [];\n  $max_row = 0;\n  $max_column = 0;\n\n  // Get row numbers of\
    \ x using binary search\n  $i = 0;\n  $found = false;\n  $row = 0;\n  while (!$found\
    \ && $i < count($lst)) {\n    $current = $lst[$i];\n    if ($current === $x) {\n\
    \      $found = true;\n      $row = floor($i / count($lst));\n      $column =\
    \ array_search($x, $current);\n    } else {\n      if ($row > $max_row) {\n  \
    \      $max_row = $row;\n      }\n\n      $i++;\n    }\n  }\n\n  if ($row > $max_row)\
    \ {\n    return [];\n  }\n\n  $row--;\n\n  // Get column numbers of x using binary\
    \ search\n  $j = 0;\n  $found = false;\n  $column = 0;\n  while (!$found && $j\
    \ < count($lst[$row])) {\n    $current = $lst[$row][$j];\n    if ($current ===\
    \ $x) {\n      $found = true;\n      $column = array_search($x, $current);\n \
    \   } else {\n      if ($column > $max_column) {\n        $max_column = $column;\n\
    \      }\n\n      $j++;\n    }\n  }\n\n  if ($column > $max_column) {\n    return\
    \ [];\n  }\n\n  $column--;\n\n  return [\n    array($row, $column),\n    array_reverse(array_slice($lst,\
    \ $row * count($lst[$row]), $column + 1)),\n  ];\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbaql4zz.php:92\n\
    Stack trace:\n#0 /tmp/tmpzbaql4zz.php(100): test()\n#1 {main}\n  thrown in /tmp/tmpzbaql4zz.php\
    \ on line 92\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $ans = [];\n  if (count($lst) == 0) return $ans;\n  $row = get_row($lst[$x],\
    \ 0);\n  if (count($row) == 0) return $ans;\n  foreach ($row as $i => $r) {\n\
    \    $row[$i] = array_values($r);\n    sort($row[$i]);\n    sort($row[$x]);\n\
    \    if ($row[$i][0] == $row[$x][0]) $ans[] = $row[$i];\n  }\n  return $ans;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp5ttghiig.php on line 20\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp5ttghiig.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ttghiig.php:37\n\
    Stack trace:\n#0 /tmp/tmp5ttghiig.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5ttghiig.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array();\n    foreach ($lst as $row) {\n        $row_array\
    \ = get_row($row, x - 1);\n        foreach ($row_array as $v) {\n            $v\
    \ = array_map(function ($v) { return $v + $x; }, $row);\n            $v[] = $x;\n\
    \            $rows[] = $v;\n        }\n    }\n    ksort($rows);\n    ksort($rows[0]);\n\
    \    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant x - assumed 'x' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmp2qkl383p.php on line 21\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmp2qkl383p.php on line 21\n\nWarning:\
    \ Use of undefined constant x - assumed 'x' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmp2qkl383p.php on line 21\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmp2qkl383p.php on line 21\n\nWarning: Invalid argument\
    \ supplied for foreach() in /tmp/tmp2qkl383p.php on line 20\n\nWarning: ksort()\
    \ expects parameter 1 to be array, null given in /tmp/tmp2qkl383p.php on line\
    \ 29\n\nWarning: array_map(): Expected parameter 2 to be an array, int given in\
    \ /tmp/tmp2qkl383p.php on line 23\n\nWarning: Use of undefined constant x - assumed\
    \ 'x' (this will throw an Error in a future version of PHP) in /tmp/tmp2qkl383p.php\
    \ on line 21\n\nWarning: A non-numeric value encountered in /tmp/tmp2qkl383p.php\
    \ on line 21\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp2qkl383p.php\
    \ on line 20\n\nWarning: ksort() expects parameter 1 to be array, null given in\
    \ /tmp/tmp2qkl383p.php on line 29\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, int given in /tmp/tmp2qkl383p.php on line 23\n\nWarning: Use\
    \ of undefined constant x - assumed 'x' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmp2qkl383p.php on line 21\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmp2qkl383p.php on line 21\n\nWarning: Invalid argument\
    \ supplied for foreach() in /tmp/tmp2qkl383p.php on line 20\n\nWarning: ksort()\
    \ expects parameter 1 to be array, null given in /tmp/tmp2qkl383p.php on line\
    \ 29\n\nWarning: array_map(): Expected parameter 2 to be an array, int given in\
    \ /tmp/tmp2qkl383p.php on line 23\n\nWarning: Use of undefined constant x - assumed\
    \ 'x' (this will throw an Error in a future version of PHP) in /tmp/tmp2qkl383p.php\
    \ on line 21\n\nWarning: A non-numeric value encountered in /tmp/tmp2qkl383p.php\
    \ on line 21\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp2qkl383p.php\
    \ on line 20\n\nWarning: ks"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  // Your code goes here\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ldq7_ie.php:27\n\
    Stack trace:\n#0 /tmp/tmp8ldq7_ie.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8ldq7_ie.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if ($x == 0) return [];\n  if ($x == 1) return [[], [], [], [], [],\
    \ []];\n  // Find the row index of the element with value $x\n  $row = array_search($x,\
    \ $lst);\n  // If the current element with value $x is not found, return the empty\
    \ list\n  if ($row === false) return [];\n  // Get the row as array of its elements\n\
    \  $row = array_slice($lst, $row, 1);\n  // Sort the row by its elements in descending\
    \ order\n  arsort($row, SORT_NUMERIC);\n  // Sort the row by its elements in ascending\
    \ order\n  asort($row, SORT_NUMERIC);\n  return $row;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87b0j_ru.php:38\n\
    Stack trace:\n#0 /tmp/tmp87b0j_ru.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp87b0j_ru.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $coords = array_fill(0, $lst[0][0], []);\n    for ($y = 0; $y < $lst[0][1];\
    \ $y++) {\n        foreach ($lst as $row) {\n            $coords[$y][$row[0]]\
    \ = $y;\n        }\n        $coords = array_flip($coords);\n    }\n    return\
    \ $coords[$x];\n}\n\n$examples = [\n    'get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n\
    \    [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]',\n\
    \    'get_row([], 1) == []',\n    'get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]'\n\
    ];\n\nforeach ($examples as $test) {\n    var_export(eval($test));\n    echo \"\
    \\n\";\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe code in your example doesn't\
    \ produce the output you listed. Your output should be: `[(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)]`\n<|/ c |>\n<| c |>\nYes, the code was wrongly tested. I\
    \ fixed it, and tested it again (using PHP >= 7.0). Now it should return what\
    \ you want. Thank you for reporting the bug.\n<|/ c |>\n<| a dscore=1 |>\nHere's\
    \ a very concise solution using array_reduce and a custom sorting function:\n\
    <code>\n$matrix = [\n    [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4,\
    \ 1, 6],\n        [1, 2, 3, 4, 5, 1]\n    ],\n    [\n        [2, 5, 6, 8, 9, 1],\n\
    \        [1, 6, 3, 9, 2, 4]\n    ],\n    [\n        [5, 8, 3, 7, 4, 6],\n    \
    \    [5, 1, 2, 3, 4, 6]\n    ]\n];\n\n$coordinates = array_reduce(\n    $matrix,\
    \ // the matrix\n    function($carry, $item) {\n        // sort each row by its\
    \ column\n        array_map(\n            function($column) use ($carry) {\n \
    \               return [$column, $carry];\n            },\n            array_sort(array_column($item,\
    \ 0))\n        );\n\n        // now that each row has been sorted, we sort the\
    \ rows\n        // by their columns in descending order\n        array_multisort(\n\
    \            array_map(\n                function($row) use ($carry) {\n     \
    \               return array_reverse(array_column($row, 0));\n               \
    \ },\n                $carry\n            ),\n            SORT_DESC,\n       \
    \     SORT_NUMERIC\n        );\n\n        // now we just return the row with the\
    \ greatest column\n        return $carry[0];\n    },\n    []  // the initial value\n\
    );\n\nprint_r($coordinate\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnuidaqu5.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = [];\n    $r1 = [];\n    $r2 = [];\n    $n = count($lst);\n\
    \    if ($n == 0) {\n        return [];\n    }\n    $row = [$x, 0];\n    array_push($rows,\
    \ $row);\n    do {\n        $i = 0;\n        $col = 0;\n        while ($i < $n)\
    \ {\n            if ($row == $lst[$i]) {\n                array_push($r1, [$i,\
    \ $col]);\n                $i++;\n            } else {\n                array_push($r2,\
    \ [$i, $col]);\n                $i++;\n            }\n            $col++;\n  \
    \      }\n        $row = array_merge($r1, $r2);\n        array_pop($row);\n  \
    \      array_push($rows, $row);\n        $r1 = [];\n        $r2 = [];\n    } while\
    \ (count($rows));\n    array_multisort($r2, -1, $rows);\n    return $rows;\n}\n\
    </code>\n<|/ a dscore=1 tags=sorting,algorithm,php |>\n<| a tags=sorting,algorithm,php\
    \ |>\nI assume that you are not supposed to use any special functions.\nYou can\
    \ do it in two steps:\n\nFind the first occurrence of the element you want in\
    \ the matrix.\nSort all rows and columns of the matrix by rows and columns.\n\n\
    First step:\n<code>\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptru0njum.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (!is_array($lst) || empty($lst))\n        return [];\n\n    if\
    \ (empty($x))\n        return $lst;\n\n    $rows = array_column($lst, 0);\n  \
    \  $row_idx = array_search($x, $rows, true);\n    if ($row_idx === false)\n  \
    \      return [];\n\n    $cols = array_column($lst, $row_idx);\n    $cols = array_reverse($cols);\n\
    \n    $res = array_map(function ($row) use ($row_idx, $cols) {\n        return\
    \ [\n            $row_idx === 0 ?\n                0 :\n                array_search($row[$row_idx\
    \ - 1], $cols, true),\n            array_search($row[$row_idx], $cols, true)\n\
    \        ];\n    }, $lst);\n\n    array_multisort($res, SORT_DESC, $rows);\n\n\
    \    return $res;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for your effort but\
    \ your code does not produce the expected output\n<|/ c |>\n<| c |>\nI've just\
    \ checked and it is working as expected. Please, provide a sample input and output\
    \ for further help.\n<|/ c |>\n<| c |>\nI have edited my question, could you please\
    \ have a look?\n<|/ c |>\n<| a dscore=0 |>\nYou can do it by creating two arrays,\
    \ one that keeps the order of the rows, and one that keeps the order of the columns.\
    \ Then you just have to loop over the rows and use the indices in the columns\
    \ to get the coordinates:\n<code>\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnvz6na3i.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    $rows = array_count_values(array_column($lst));\n\
    \    asort($rows);\n    foreach ($rows as $key => $value) {\n        $row = [];\n\
    \        $cols = [];\n        $row = array_map(function($value) use ($key, $x)\
    \ {\n            return [$value, $x];\n        }, $lst);\n        $cols = array_count_values(array_column($row,\
    \ $x - 1));\n        $result = array_merge($result, array_column($row, 1), array_column($row,\
    \ 0));\n    }\n    usort($result, function($a, $b) {\n        return $b[1] - $a[1];\n\
    \    });\n    return array_values($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_column() expects at least 2 parameters, 1 given in /tmp/tmpzdxc3e8y.php\
    \ on line 20\n\nWarning: array_count_values() expects parameter 1 to be array,\
    \ null given in /tmp/tmpzdxc3e8y.php on line 20\n\nWarning: asort() expects parameter\
    \ 1 to be array, null given in /tmp/tmpzdxc3e8y.php on line 21\n\nWarning: Invalid\
    \ argument supplied for foreach() in /tmp/tmpzdxc3e8y.php on line 22\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpzdxc3e8y.php:42\nStack trace:\n\
    #0 /tmp/tmpzdxc3e8y.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpzdxc3e8y.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $m = count($lst);\n    $n = count($lst[0]);\n    $out = array();\n\
    \    for ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $x_coord = ($lst[$i]) [$j];\n            $x_row = get_row($lst, $x_coord);\n\
    \            if ($x_row == NULL || $x_coord != $x_row[0]) {\n                $out[]\
    \ = array(0, 0);\n            } else {\n                $out[] = array($i, $j);\n\
    \            }\n        }\n    }\n    if (count($out) == 0) {\n        return\
    \ $out;\n    }\n    usort($out, \"cmp\");\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpwyhmlwpv.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $l = count($lst);\n    if ($l <= 0) {\n        return [];\n    }\n\
    \    $result = [];\n    $last_row = [];\n    $last_col = [];\n    for ($i = 0;\
    \ $i < $l; $i++) {\n        $row = get_col($lst, $i);\n        $row = get_row($row,\
    \ $x);\n        if ($row != []) {\n            $row = $row + $last_row;\n    \
    \        $col = $last_col + $row;\n            $last_row = $row;\n           \
    \ $last_col = $col;\n            $result[] = [$i, $col];\n        }\n    }\n \
    \   usort($result, function($a, $b) {\n        $a_c = $a[1];\n        $b_c = $b[1];\n\
    \        return $a_c > $b_c ? 1 : -1;\n    });\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_col() in\
    \ /tmp/tmp0ue2m8t2.php:27\nStack trace:\n#0 /tmp/tmp0ue2m8t2.php(46): get_row(Array,\
    \ 1)\n#1 /tmp/tmp0ue2m8t2.php(50): candidate(Array, 1)\n#2 /tmp/tmp0ue2m8t2.php(58):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0ue2m8t2.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    return array_map(function ($el) { return [$el[0], $el[$x]]; }, array_chunk($lst,\
    \ ceil(count($lst) / count($lst[0]))));\n}\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45zuylzf.php:26\n\
    Stack trace:\n#0 /tmp/tmp45zuylzf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp45zuylzf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (!is_array($lst)) {\n        return null;\n    }\n\n    $result\
    \ = [];\n    $max = $rowLen = 0;\n    foreach ($lst as $i => $row) {\n       \
    \ $rowLen = count($row);\n        $max = $rowLen > $max ? $rowLen : $max;\n  \
    \      foreach ($row as $j => $val) {\n            if ($val === $x) {\n      \
    \          $result[] = [$i, $j];\n            }\n        }\n    }\n\n    if ($rowLen\
    \ === 0 || $max === 0) {\n        return null;\n    }\n\n    // Sort result by\
    \ row length\n    uasort($result, function ($a, $b) {\n        return $b[0] <=>\
    \ $a[0];\n    });\n\n    $result = [];\n    foreach ($result as $k) {\n      \
    \  foreach ($lst as $i => $row) {\n            $result[] = [$i, $k[1]];\n    \
    \    }\n    }\n\n    uasort($result, function ($a, $b) {\n        return $b[1]\
    \ <=> $a[1];\n    });\n\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qm_y81t.php:62\n\
    Stack trace:\n#0 /tmp/tmp2qm_y81t.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp2qm_y81t.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $ans = [];\n    if (empty($lst)) return [];\n    foreach ($lst as\
    \ $row) {\n        foreach ($row as $key => $val) {\n            if ($val == $x)\
    \ $ans[] = [$key, $key + 1];\n        }\n    }\n    usort($ans, function ($a,\
    \ $b) {\n        $a_row = get_row($a, 0);\n        $b_row = get_row($b, 0);\n\
    \        if ($a_row[0] == $b_row[0]) return $a_row[1] < $b_row[1] ? -1 : 1;\n\
    \        else return $a_row[0] < $b_row[0] ? -1 : 1;\n    });\n    return $ans;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3wu86no0.php\
    \ on line 22\n\nWarning"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $l = count($lst);\n    for($i = 0; $i < $l; ++$i) {\n        if($lst[$i][$x]\
    \ === $x)\n            return array($i, $i - 1);\n    }\n\n    // Return empty\
    \ array if not found.\n    return array(-1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2ie3t0t.php:34\n\
    Stack trace:\n#0 /tmp/tmpm2ie3t0t.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpm2ie3t0t.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  if (empty($lst) || empty($x)) {\n    return [];\n  }\n  $sorted = $lst;\n\
    \  $sorted = array_map(function($row) {\n    return array_slice($row, 0, $x);\n\
    \  }, $sorted);\n  return array_map(function($row) {\n    return array_slice($row,\
    \ $x, count($row) - $x);\n  }, $sorted);\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsx9q_ct5.php:36\n\
    Stack trace:\n#0 /tmp/tmpsx9q_ct5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsx9q_ct5.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $return = [];\n    for ($i = 0; $i < count($lst); $i++) {\n     \
    \   if (in_array($x, $lst[$i])) {\n            $return[$i] = [$i, array_search($x,\
    \ $lst[$i])];\n        }\n    }\n    sort($return, function ($a, $b) { return\
    \ $a[1] - $b[1]; });\n    sort($return, function ($a, $b) { return $a[0] - $b[0];\
    \ });\n    return $return;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 2 to be int, object given in /tmp/tmp1k39o2th.php\
    \ on line 25\n\nWarning: sort() expects parameter 2 to be int, object given in\
    \ /tmp/tmp1k39o2th.php on line 26\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1k39o2th.php:35\nStack trace:\n#0 /tmp/tmp1k39o2th.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1k39o2th.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $lst = array_map(function($row) use ($x) {\n    return array_filter(array_map('intval',\
    \ array_slice($row, 0, $x)));\n  }, $lst);\n  $rows = array_map(function($row)\
    \ use ($x) {\n    return array_filter(array_map('intval', array_slice($row, $x)));\n\
    \  }, $lst);\n  ksort($rows);\n  array_multisort($rows, $cols, $lst);\n  return\
    \ $lst;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_multisort(): Argument #2 is expected to be an array or\
    \ a sort flag in /tmp/tmpqn5p5e_3.php on line 26\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqn5p5e_3.php:34\nStack trace:\n#0 /tmp/tmpqn5p5e_3.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqn5p5e_3.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (is_null($lst) || is_null($x)) {\n        return null;\n    }\n\
    \    $n = count($lst);\n    $res = [];\n    for ($r = 0; $r < $n; $r++) {\n  \
    \      $cols = get_column($lst, $r);\n        if ($x === $r) {\n            $res[]\
    \ = array_combine(range(count($cols)), $cols);\n        }\n        elseif (is_null($cols))\
    \ {\n            $res[] = [];\n        }\n        else {\n            foreach\
    \ ($cols as $c) {\n                if ($x < $c) {\n                    break;\n\
    \                }\n                $res[] = [$r, $c];\n            }\n      \
    \  }\n    }\n    usort($res, function($a, $b) {\n        $r = $a[0] - $b[0];\n\
    \        if ($r == 0) {\n            $r = count($a[1]) - count($b[1]);\n     \
    \   }\n        return $r;\n    });\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_column()\
    \ in /tmp/tmpfnwhdv58.php:25\nStack trace:\n#0 /tmp/tmpfnwhdv58.php(52): get_row(Array,\
    \ 1)\n#1 /tmp/tmpfnwhdv58.php(56): candidate(Array, 1)\n#2 /tmp/tmpfnwhdv58.php(64):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpfnwhdv58.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $coords = [];\n    foreach($lst as $row) {\n        $row_coords =\
    \ rowcoords($row);\n        if(in_array($x, $row_coords)) {\n            $coords[]\
    \ = [$x, $row_coords[$x]];\n        }\n    }\n    return $coords;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function rowcoords() in\
    \ /tmp/tmpuhtjomb0.php:21\nStack trace:\n#0 /tmp/tmpuhtjomb0.php(30): get_row(Array,\
    \ 1)\n#1 /tmp/tmpuhtjomb0.php(34): candidate(Array, 1)\n#2 /tmp/tmpuhtjomb0.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuhtjomb0.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $res = array();\n  for($i = 0; $i < count($lst); $i++) {\n    $res_row\
    \ = get_col($lst[$i], $x);\n    foreach($res_row as $col) {\n      $res[] = array($i,\
    \ $col);\n    }\n  }\n  usort($res, 'cmp');\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_col() in\
    \ /tmp/tmpy3lasivo.php:21\nStack trace:\n#0 /tmp/tmpy3lasivo.php(31): get_row(Array,\
    \ 1)\n#1 /tmp/tmpy3lasivo.php(35): candidate(Array, 1)\n#2 /tmp/tmpy3lasivo.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpy3lasivo.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $rows = array_count_values(array_column($lst,0));\n  $rows = array_flip($rows);\n\
    \n  $coords = [];\n\n  // Sort the rows in ascending order - first on rows, then\
    \ on columns\n  krsort($rows, SORT_NUMERIC);\n\n  // Sort the columns in descending\
    \ order\n  krsort($rows);\n\n  // Go through each row\n  foreach ($rows as $row)\
    \ {\n    $cols = array_count_values(array_column($lst, $row));\n\n    // Sort\
    \ the columns in descending order\n    krsort($cols);\n\n    // Get coordinates\
    \ (x,y) for each row/col\n    foreach ($cols as $col => $count) {\n      if ($count\
    \ == $x) {\n        $coords[$row] = $col;\n      }\n    }\n  }\n\n  // Sort coordinates\
    \ initially by rows\n  krsort($coords);\n\n  // Re-sort coordinates by columns\n\
    \  krsort($coords);\n\n  return $coords;\n}\n\n$tests = [\n  [[1,2,3,4,5,6],\n\
    \   [1,2,3,4,1,6],\n   [1,2,3,4,5,1]],\n  [],\n  [[[], [1], [1,2,3]]],\n];\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpems1usgl.php:67\n\
    Stack trace:\n#0 /tmp/tmpems1usgl.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpems1usgl.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $m = count($lst);\n  $n = count($lst[0]);\n  // Sort rows by rows in\
    \ ascending order\n  arsort($lst);\n  // Sort rows by columns in descending order\n\
    \  arsort($lst);\n  // Get indices of rows containing x\n  $rows = array_flip(array_filter($lst,\
    \ function($v) use ($x) { return $v == $x; }));\n  // Get indices of columns of\
    \ rows with x\n  $cols = array_flip(array_intersect($rows,\n                 \
    \                   array_map(function($row) use ($n) { return range(0, $n-1);\
    \ }, $rows)));\n  // Return coordinates - (row, columns)\n  return array_map(function($r)\
    \ use ($cols) { return [$r, $cols[$r]]; }, $rows);\n}\n</code>\n<|/ a |>\n<| a\
    \ tags=algorithm,php,sorting,arrays |>\nI made an attempt, but I'm not quite sure\
    \ it works. I believe it does what you want it to do, but I did not check its\
    \ edge cases.\n<code>\n$array = array(\n  array(1,2,3,4,5,6),\n  array(1,2,3,4,1,6),\n\
    \  array(1,2,3,4,5,1)\n);\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpebnkov19.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $ret = [];\n    foreach($lst as $row) {\n        $row = [];\n   \
    \     foreach($row as $col) {\n            if($col === $x) {\n               \
    \ $row[] = $ret[count($ret)-1][1]+1;\n                $ret[] = array(count($ret)-1,0);\n\
    \            }\n        }\n    }\n    usort($ret, function($a, $b) {\n       \
    \ return $b[0] - $a[0];\n    });\n    usort($ret, function($a, $b) {\n       \
    \ return $b[1] - $a[1];\n    });\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15ssn71b.php:43\n\
    Stack trace:\n#0 /tmp/tmp15ssn71b.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp15ssn71b.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n\t$row = [];\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\t$cur_row\
    \ = [];\n\t\tfor ($j = 0; $j < $lst[$i]; $j++) {\n\t\t\tif ($j == 0) {\n\t\t\t\
    \t$cur_row[] = $i;\n\t\t\t}\n\t\t\tif ($i == 0) {\n\t\t\t\t$cur_row[] = $j;\n\t\
    \t\t}\n\t\t}\n\t\t$row[] = $cur_row;\n\t}\n\tfor ($i = 0; $i < count($row); $i++)\
    \ {\n\t\t$row[$i] = array_reverse($row[$i]);\n\t\t$row[$i] = array_reverse($row[$i],\
    \ true);\n\t}\n\tfor ($i = 0; $i < count($row); $i++) {\n\t\tfor ($j = 0; $j <\
    \ count($row[0]); $j++) {\n\t\t\tif ($row[$i][$j] == $x) {\n\t\t\t\t$l = [];\n\
    \t\t\t\tfor ($k = 0; $k < count($row); $k++) {\n\t\t\t\t\t$l[] = $k;\n\t\t\t\t\
    }\n\t\t\t\treturn $l;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n$test = [\n\t\
    [1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n];\nvar_dump(get_row($test,\
    \ 1));\n$test2 = [];\n$test2[] = [1];\n$test2[] = [1, 2, 3];\nvar_dump(get_row($test2,\
    \ 3));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpjfkbyvrm.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $lst = array_reverse($lst);\n    foreach($lst as $row) {\n      \
    \  $row = array_reverse($row);\n        if(in_array($x, $row)) {\n           \
    \ $ret = [array_keys($row)];\n            $ret[] = [array_pop(array_keys($row))];\n\
    \            return $ret;\n        }\n    }\n    return [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbh9wzzvp.php:36\n\
    Stack trace:\n#0 /tmp/tmpbh9wzzvp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbh9wzzvp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $new_lst = [];\n  foreach($lst as $lst)\n  {\n    foreach($lst as $v)\n\
    \    {\n      if ($v == $x) {\n        $new_lst[] = array($lst , intval($x));\n\
    \        break;\n      }\n    }\n  }\n  return $new_lst;\n}\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| a dscore=1 |>\nIf your data is in JSON format, the following JavaScript\
    \ code will work to get the rows of a given element and their position in the\
    \ array.\n<code>\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq4utqe6u.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $rows = array_chunk(array_flip($lst), count($lst));\n    foreach\
    \ ($rows as $i => &$row) {\n        $row = array_flip($row);\n        ksort($row);\n\
    \        ksort($row[$i]);\n        $row[$i] = array_slice($row[$i], 0, $x);\n\
    \    }\n    return array_map(function($row) { return array_combine(array_keys($row),\
    \ $row); }, $rows);\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_flip(): Can only flip STRING and INTEGER values! in /tmp/tmpx_uy_j63.php\
    \ on line 19\n\nWarning: array_flip(): Can only flip STRING and INTEGER values!\
    \ in /tmp/tmpx_uy_j63.php on line 19\n\nWarning: array_flip(): Can only flip STRING\
    \ and INTEGER values! in /tmp/tmpx_uy_j63.php on line 19\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpx_uy_j63.php:34\nStack trace:\n#0 /tmp/tmpx_uy_j63.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx_uy_j63.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $ret = [];\n    foreach($lst as $lsts) {\n        $row_lst = [];\n\
    \        foreach ($lsts as $x) {\n            if ($x[0] == $x) {\n           \
    \     $row_lst[] = [$x, $x];\n            }\n        }\n        $ret[] = $row_lst;\n\
    \    }\n    sort($ret, SORT_NUMERIC);\n    foreach ($ret as $lst) {\n        sort($lst);\n\
    \    }\n    return array_slice($ret, array_search($x, $lst) + 1);\n}\n$res = get_row($lst,\
    \ 1);\n$row = array_pop($res);\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpsgffbqq3.php\
    \ on line 20\n\nWarning: array_search() expects parameter 2 to be array, null\
    \ given in /tmp/tmpsgffbqq3.php on line 33\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsgffbqq3.php:42\nStack trace:\n#0 /tmp/tmpsgffbqq3.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsgffbqq3.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst)) {\n        return array();\n    }\n    $rows = array_count_values(array_slice($lst,\
    \ 0, -1) + array_slice($lst));\n    asort($rows);\n    $rows = array_flip($rows);\n\
    \    asort($rows);\n    $result = array();\n    foreach ($rows as $i => $row)\
    \ {\n        if ($row == $x) {\n            $result[] = array($i, count($rows)\
    \ - 1);\n        }\n    }\n    return $result;\n}\n\n/**\n * Given a 2D matrix,\
    \ return a list of unique coordinate tuples,\n * where each tuple is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinate tuples initially by rows\
    \ in ascending order.\n * Also, sort tuples of the row by columns in descending\
    \ order.\n * Example:\n * [[0, 0], [1, 1], [2, 2]] == [[0, 0], [0, 1], [1, 1]]\n\
    \ * [[0, 1], [1, 1]] == []\n * [[0, 1], [1, 1], [2, 2]] == [[0, 1], [0, 1], [1,\
    \ 1], [2, 2]]\n * [[0, 0], [1, 1], [2, 2], [3]] == [[0, 0], [0, 1], [1, 1], [2,\
    \ 2]]\n */\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects at least 2 parameters, 1 given in /tmp/tmpgebk1opw.php\
    \ on line 22\n\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpgebk1opw.php:22\n\
    Stack trace:\n#0 /tmp/tmpgebk1opw.php(47): get_row(Array, 1)\n#1 /tmp/tmpgebk1opw.php(51):\
    \ candidate(Array, 1)\n#2 /tmp/tmpgebk1opw.php(59): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpgebk1opw.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    if (empty($lst))\n        return array();\n    if (!is_array($lst[0]))\n\
    \        return array();\n    $res = array();\n    $row = 0;\n    $num_cols_lst\
    \ = count($lst[0]);\n    while ($row < $num_cols_lst) {\n        $col = $row +\
    \ 1;\n        $found = false;\n        foreach ($res as $r) {\n            if\
    \ ($r[0] <= $col) {\n                $found = true;\n                break;\n\
    \            }\n        }\n        if (!$found) {\n            $res[] = array((int)\
    \ $col, 1);\n            $row++;\n        }\n    }\n    $row = count($res) - 1;\n\
    \    foreach ($res as $r) {\n        if ($r[0] == $row)\n            break;\n\
    \        $row--;\n    }\n    $row = max($row, 0);\n    foreach ($res as $r) {\n\
    \        if ($r[0] <= $row)\n            break;\n        $row--;\n    }\n    return\
    \ array_slice($res, $row, $row + $x - 1);\n}\n\n/**\n * Get the rows and columns\
    \ for the rectangular region defined by the points\n * given as arguments. Returns\
    \ array of pairs of integers denoting each\n * point on the given rectangle.\n\
    \ */\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $out = array();\n    foreach($lst as $row) {\n        $out[] = array_merge(array($x),\
    \ array_slice($row, 0, $x));\n    }\n    asort($out);\n    array_multisort(array_reverse($out),\
    \ SORT_DESC, $out);\n    return $out;\n}\n\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9zopwpb.php:33\n\
    Stack trace:\n#0 /tmp/tmpl9zopwpb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpl9zopwpb.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n    $result = [];\n    foreach($lst as $row) {\n        $result[] = $row[$x];\n\
    \    }\n    return $result;\n}\n\n$lst1 = [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]];\n\
    $lst2 = [[1,2,3,4], [1,2,3,1], [1,2,3,4], [1,2,3,4,5], [1,2,3,4,1], [1,2,3,4,6]];\n\
    $lst3 = [[],[1],[1,2,3]];\n\n$t1 = get_row($lst1, 1);\n$t2 = get_row($lst2, 1);\n\
    $t3 = get_row($lst3, 1);\n\nvar_dump($t1);\nvar_dump($t2);\nvar_dump($t3);\n</code>\n\
    <|/ a dscore=1 tags=sorting,arrays,multidimensional-array,php |>\n<| a |>\nYou\
    \ can do this with two nested loops. The inner loop goes over every element in\
    \ your array, and the outer loop goes over the rows in that array.\n<code>\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgnxrl9tb.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
    \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
    // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
    \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
    \ $x) {\n  $n = count($lst);\n  $res = array();\n  for ($i = 0; $i < $n; $i++)\
    \ {\n    $row = get_row($lst[$i], $x);\n    sort($row);\n    sort($res);\n   \
    \ if ($row == $res) {\n      $res[] = array($i, 0);\n    }\n  }\n  return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpq5j8e_58.php on line 19\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpq5j8e_58.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq5j8e_58.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpq5j8e_58.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq5j8e_58.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpq5j8e_58.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq5j8e_58.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpq5j8e_58.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq5j8e_58.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpq5j8e_58.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq5j8e_58.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpq5j8e_58.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq5j8e_58.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpq5j8e_58.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq5j8e_58.php on line 19\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpq5j8e_58.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq5j8e_58.php on line 19\n\nWarning"
  stderr: ''
  exit_code: 255
  status: Exception
