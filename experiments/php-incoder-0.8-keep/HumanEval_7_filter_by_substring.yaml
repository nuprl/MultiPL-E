name: HumanEval_7_filter_by_substring
language: php
prompt: "<?php\n// Filter an input list of strings only for ones that contain given\
  \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring($strings,\
  \ $substring) {\n"
tests: "function candidate(...$args) {\n    return filter_by_substring(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"\
  asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\",\
  \ \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xx\") !== array(\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"grunt\", \"trumpet\", \"prune\", \"gruesome\"),\
  \ \"run\") !== array(\"grunt\", \"prune\")) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $filtered_strings = array();\n    foreach ($strings as $str) {\n\
    \        if (strpos($str, $substring) !== false) {\n            $filtered_strings[]\
    \ = $str;\n        }\n    }\n    return $filtered_strings;\n}", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== FALSE;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== FALSE;\n  });\n\
    }\n</code>\n<|/ a dscore=0 tags=php,multidimensional-array,arrays,algorithm |>\n\
    <| c |>\nThank you for the detailed response. Your method was the one I was thinking\
    \ of as well, but for some reason I thought I was reinventing the wheel when there's\
    \ a built-in function. Anyway, thanks again.\n<|/ c |>\n<| c |>\nThe built-in\
    \ functions usually provide a more efficient solution. Sometimes a simple `foreach`\
    \ loop like your one does better than using an internal function or library functions.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n", "    $result = [];\n    foreach ($strings\
    \ as $str) {\n        if (strpos($str, $substring) !== false) {\n            $result[]\
    \ = $str;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThe \"array_filter\" solution is very smart and clean. Thank you.\n\
    <|/ c |>\n<| c |>\nThis is not what OP asking for. OP wants to check if it contains\
    \ substring\n<|/ c |>\n<| a |>\nI think this would help you:\n<code>\n<?php\n\
    $strings = array(\"abc\", \"bcd\", \"cde\");\n$substring = \"ab\";\n$new_strings\
    \ = array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n});\n\nprint_r($new_strings);\n</code>\n<|/ a dscore=5\
    \ tags=php,arrays,multidimensional-array |>\n<| c |>\nThis should be the accepted\
    \ answer.\n<|/ c |>\n<| c |>\nThis is the one that works better than the others.\
    \  \nIt also handles cases where you search for more than one string at a time.\
    \ Ex. `[\"abc\", \"def\", \"ghi\"]` `[\"abc\", \"def\", \"ghi\"]`  \n\nAnd if\
    \ you want to find the strings that contain a substring but are not at the beginning\
    \ of the string, use `$substring .= '*';`.\n<|/ c |>\n<| c |>\n`filter_var` should\
    \ be used instead of `strpos`\n<|/ c |>\n<| c |>\nThis was the only answer to\
    \ work the way I wanted it to. Thank you.\n<|/ c |>\n<| a |>\nFor multidimensional\
    \ arrays use this:\n<code>\n$array = array_filter($array, \"searchFunction\");\n",
  "  return array_filter($strings, function ($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n", "  $results = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $results[] = $string;\n    }\n  }\n  return $results;\n}", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  if (!$strings) return array();\n  return array_filter(\n    $strings,\n\
    \    function ($s) use ($substring) {\n      return strpos($s, $substring) !==\
    \ false;\n    }\n  );\n}", "    foreach ($strings as $key => $string) {\n    \
    \    if (strpos($string, $substring) !== false) {\n            unset($strings[$key]);\n\
    \        }\n    }\n    return $strings;\n}\n", "    return array_filter($strings,\
    \ function($string) use($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a |>\n<| c |>\nI like the idea of returning the string\
    \ and not modifying the original array. Not sure how that would be implemented\
    \ though.\n<|/ c |>\n<| c |>\nI like it too, but I feel like it would just be\
    \ too much code for such a small task. I'll have a look when I'm in the office\n\
    <|/ c |>\n<| a dscore=1 tags=string,php,arrays |>\nI ended up going with this.\
    \ It seems to be the shortest and most efficient way of doing it. Thanks for the\
    \ suggestions and comments.\n<code>", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[$string]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays\
    \ |>\n<| c |>\nThe question was how to filter an array by substring, not by any\
    \ part of it.\n<|/ c |>\n<| c |>\nThat's what the code does. The function filter_by_substring\
    \ filters strings containing \"a\" into an array containing just \"abc\", \"bacd\"\
    , and \"array\".\n<|/ c |>\n<| c |>\nI thought the OP wanted to get all the strings\
    \ that contained \"a\" regardless of position in the string.\n<|/ c |>\n<| c |>\n\
    That's what I thought too, because I got confused by the question and thought\
    \ the OP wanted to get all the strings containing the letter 'a' regardless of\
    \ position in the string, but that's not what your code does.\n<|/ c |>\n<| c\
    \ |>\nYes, that is what I wanted, thanks! The only thing is that it's not printing\
    \ out the entire string, so it would be more like: aa bb cc dd ee ff.\n<|/ c |>\n\
    <| a tags=php,arrays |>\n<code>\n$my_array = array('aaa', 'bbb', 'ccc', 'ddd',\
    \ 'eee', 'fff');\n$my_array2 = array('bbb', 'ccc', 'ddd');\n$my_array3 = array('ddd');\n\
    $my_array4 = array('ddd', 'eee', 'fff');\n\nforeach($my_array2 as $key => $val)\n\
    {\n    foreach($my_array3 as $key2 => $val2)\n    {\n        foreach($my_array4\
    \ as $key3 => $val3)\n        {\n            if(!in_array($val2, $my_array)){\n\
    \                unset($my_array2[$key2]);\n                break;\n         \
    \   }\n        }\n    }\n}\n\nvar_dump($my_array2);\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThe question is asking to filter an array by substring, not by any part\
    \ of it.\n<|/ c |>\n<| c |>\nThis is exactly what I needed! Thank you so much!\n\
    <|/ c |>\n<| a tags=php,arrays dscore=0 |>\nThe question was how to filter an\
    \ array by substring, not by any part of it\nI have tested some of answers, all\
    \ of them work, but they are limited and complicated for such a simple task.\n\
    The most easy way that I have ", "  $strings = array_map('trim', $strings);\n\
    \  $strings = array_filter($strings, function ($s) use ($substring) {\n    return\
    \ strpos($s, $substring) !== false;\n  });\n\n  return $strings;\n}\n</code>\n\
    <|/ a tags=php,arrays,filtering |>\n<| c |>\nI like this solution. Thanks!\n<|/\
    \ c |>\n<| a dscore=2 |>\nI've found that PHP has a native function for this.\n\
    <code>\n$array = array('abc', 'bacd', 'cde', 'array');\n$string = 'a';\n$result\
    \ = array_intersect(\n    array_map('strtolower', array_filter(\n        array_map('trim',\
    \ $array)\n    )), \n    array_map('strtolower', array_filter(\n        array_map('strlen',\
    \ $array)\n    ))\n);\n\nvar_dump($result);\n</code>\nOutputs:\n<code>\narray(1)\
    \ {\n  [0]=>\n  string(3) \"abc\"\n}\n</code>\n<|/ a tags=php,arrays,filtering\
    \ |>\n<| c |>\nNice, thank you! It took me a while to figure out what this does,\
    \ but it makes sense now. array_intersect returns all items that are in both arrays.\n\
    <|/ c |>\n<| c |>\nBy the way, you can save one step by changing the last line\
    \ to: `$result = array_intersect(array_filter($array), array_filter($array));`\n\
    <|/ c |>\n<| a tags=php,arrays,filtering dscore=1 |>\nI made this function as\
    \ a simple solution. \nI hope it helps somebody.\n<code>\n/**\n * array_filter_recursive\n\
    \ * $array\n * $string\n * bool|int|string\n */", "  if (is_string($strings))\
    \ {\n    return array_filter($strings, function($string) use ($substring) {\n\
    \      return strpos($string, $substring) !== false;\n    });\n  }\n  return $strings;\n\
    }\n", "    return array_filter($strings, function($s) use ($substring) {\n   \
    \     return strpos($s, $substring) !== false;\n    });\n}\n</code>\n<|/ a tags=arrays,function,php\
    \ |>\n<| a tags=arrays,function,php |>\nYou could use array_filter():\n<code>\n\
    $array = [\n    \"abc\",\n    \"bacd\",\n    \"cde\",\n    \"array\"\n];\n\n$array\
    \ = array_filter($array);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nUsing\
    \ array_filter you can find exact match and remove from array if found.\n<code>\n\
    $array = array(\"abc\",\"bacd\",\"cde\",\"array\");\n$result = array_filter($array,\
    \ function($str) {\n    return strpos($str, 'bacd') === false;\n});\n</code>\n\
    Output:- https://3v4l.org/5H4Eh\n<|/ a tags=arrays,function,php |>\n<| a dscore=0\
    \ |>\nTry this one:\n<code>\n<?php\n\n$string = array(\"abc\",\"bacd\",\"cde\"\
    ,\"array\");\n", "  $new_strings = array();\n  foreach($strings as $string) {\n\
    \    if (strpos($string, $substring) !== FALSE) {\n      $new_strings[] = $string;\n\
    \    }\n  }\n  return $new_strings;\n}", "  $results = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $results[]\
    \ = $string;\n    }\n  }\n\n  return $results;\n}\n", "  return array_filter($strings,\
    \ function ($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "    foreach($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $result[] = $string;\n        }\n    }\n\
    \    return $result;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== FALSE;\n  });\n\
    }\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (stripos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $filtered_strings = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}\n", "  $filtered_strings\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n", "    return array_filter($strings, function ($s) use ($substring) {\n  \
    \      return (strpos($s, $substring) !== false);\n    });\n}\n</code>\n<|/ a\
    \ tags=regex,php,arrays,string dscore=2 |>\n<| c |>\nThis is fantastic. I never\
    \ thought of doing it this way. Thanks very much.\n<|/ c |>\n<| c |>\nI tried\
    \ to get this to work and it doesn't appear to be working. I added it into my\
    \ code and it doesn't seem to filter anything, even though I do exactly what you\
    \ wrote. I changed \"test\" to my variable and added a filter in the foreach loop\
    \ for \"test\". Here is my code:\n<|/ c |>\n<| c |>\n<?php\n\n    $filterArray\
    \ = array(\"test\");\n\n    $stringArray = array(\n        \"test test test\"\
    ,\n        \"test test test\",\n        \"test test test test\",\n        \"test\
    \ test test test\",\n        \"test test test test test\",\n        \"test test\
    \ test test test\",\n        \"test test test test test\",\n        \"test test\
    \ test test test test test\",\n        \"test test test test test test test test\"\
    ,\n        \"test test test test test test test test test test test\",\n     \
    \   \"test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test test test test test test\
    \ test test test test test test test test test test test ", "  $found = [];\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $found[] = $string;\n    }\n  }\n\n  return $found;\n}", "    $result\
    \ = [];\n    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $result[] = $string;\n        }\n    }\n    return\
    \ $result;\n}\n", "    if (!is_array($strings) || !is_string($substring)) {\n\
    \        throw new InvalidArgumentException('Values must be given as arrays and\
    \ strings.');\n    }\n    $result = [];\n    foreach ($strings as $s) {\n    \
    \    if (strpos($s, $substring) !== false) {\n            $result[] = $s;\n  \
    \      }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    `strpos($s, $substring) !== false` - so `f` is still there, won't it?\n<|/ c |>\n\
    <| c |>\nYes, I supposed that he will do some check after that on it.\n<|/ c |>\n\
    <| c |>\nThank you! It seems like I have made it a lot harder than it actually\
    \ was. :)\n<|/ c |>\n<| c |>\nI updated the question with a function that actually\
    \ does what I need it to do. It seems like the strpos() is really the best function\
    \ for my needs.\n<|/ c |>\n<| a dscore=0 tags=php,arrays |>\n<code>\n<?php\n",
  "  return array_filter(\n      $strings,\n      function ($string) use ($substring)\
    \ {\n        return strpos($string, $substring) !== false;\n      }\n  );\n}\n\
    \n/**\n * Returns a new array with the element of $array corresponding to the\
    \ index of $key for each\n * element of $array.\n *\n * @param $array array\n\
    \ * @param $key int|string\n * @return array\n */", "  $substrings = array_unique(array_filter(array_map(function($string)\
    \ {\n    return str_split($string, 1);\n  }, $strings)));\n  return array_map(function($string)\
    \ use ($substring) {\n    return in_array($substring, $string) ? '' : $string;\n\
    \  }, $strings);\n}\n", "  $return = [];\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $return[] = $string;\n\
    \    }\n  }\n  return $return;\n}\n</code>\n<|/ a dscore=2 tags=php,arrays,filter\
    \ |>\n<| a |>\n<code>\n<?php\n$arr = [\"ab\",\"ac\",\"bc\",\"bd\",\"de\",\"ef\"\
    ,\"fg\",\"ah\"];\n$search = \"b\";\n\nforeach (array_filter($arr, function($a)\
    \ use ($search) {\n    return strpos($a, $search) !== false;\n}) as $key => $value)\
    \ {\n    echo \"$key : $value <br>\";\n}\n</code>\noutput:\n<code>\n0 : b\n2 :\
    \ b \n5 : b \n7 : b\n</code>\n<|/ a dscore=2 tags=php,arrays,filter |>\n<| a tags=php,arrays,filter\
    \ |>\nTry this simple approach\n<code>\n<?php\n$array = [\"ab\",\"ac\",\"bc\"\
    ,\"bd\",\"de\",\"ef\",\"fg\",\"ah\"];\n$search = \"b\";\n$array = array_filter($array,\
    \ function ($a) use ($search) {\n    return strpos($a, $search) !== false;\n});\n\
    print_r($array);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,filter dscore=2\
    \ |>\nYou could write an array_filter-like function, like the following:\n<code>",
  "  $words = array_map(function ($string) {\n    return str_split($string);\n  },\
    \ $strings);\n  $result = array();\n  foreach ($words as $word) {\n    if (in_array($substring,\
    \ $word)) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}", " \
    \ return array_filter($strings, function ($item) use ($substring) {\n    return\
    \ strpos($item, $substring) !== false;\n  });\n}\n", "  $filtered_strings = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== FALSE;\n  });\n}\n", "  return array_filter($strings,\
    \ function ($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  $ret = [];\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== FALSE) {\n      $ret[] = $string;\n \
    \   }\n  }\n  return $ret;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI agree. \
    \ However, I added a comment under the OP indicating that he did not want to use\
    \ a built-in PHP function.\n<|/ c |>\n<| c |>\n: Yes, I realized that after I\
    \ added my comment :)\n<|/ c |>\n<| c |>\nYes, this is a great solution, thank\
    \ you!\n<|/ c |>\n<| a tags=arrays,php |>\nThis is probably not the fastest method\
    \ but it does avoid using any built-in PHP functions. The main change I made is\
    \ to make the function accept an array of string values, rather than a single\
    \ string.\n<code>\n<?php\n", "  // Return an empty list if given an empty list\n\
    \  if (empty($strings)) return [];\n\n  // Return an empty list if given an empty\
    \ string\n  if (empty($substring)) return $strings;\n\n  return array_filter($strings,\
    \ function ($str) use ($substring) {\n    // Check if the given string contains\
    \ the substring\n    return strpos($str, $substring) !== false;\n  });\n}\n\n\
    /**\n * Returns the number of elements in the given array.\n *\n * @param array|object\
    \ $array The array.\n *\n * @return int The number of elements in the given array.\n\
    \ */", "  return array_filter($strings, function($value) {\n    return strpos($value,\
    \ $substring) !== FALSE;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\n+1 Nice function\
    \ name, but I wouldn't use it for something that's meant to be used in more of\
    \ a whitelist fashion where you want to allow certain substrings.  But I like\
    \ it for filtering inputs in general\n<|/ c |>\n<| a |>\nYou could try this:\n\
    <code>\n$search = 'array';\n\n$result = array_filter($data, function($value) use\
    \ ($search) {\n    return strpos($value, $search) !== FALSE;\n});\n</code>\n<|/\
    \ a dscore=4 tags=arrays,php,filtering |>\n<| c |>\nNice solution, but I think\
    \ it's important to mention that this solution won't work if your PHP version\
    \ doesn't have anonymous functions.\n<|/ c |>\n<| a tags=arrays,php,filtering\
    \ dscore=4 |>\nAs an additional note, array_filter is actually a lot slower than\
    \ array_walk and a lot slower than a custom function that does the same thing.\n\
    To prove this, I wrote this benchmark test I did on some code. \n<code>\n$input\
    \ = range(1,100000);\n$input[] = 'array';\n$input[] = 'apple';\n$input[] = 'orange';\n\
    $input[] = 'test';\n$input[] = 'tester';\n$input[] = 'array';\n$input[] = 'apple';\n\
    $input[] = 'test';\n$input[] = 'tester';\n$input[] = 'tester';\n$input[] = 'tester';\n\
    $input[] = 'tester';\n$input[] = 'tester';\n$input[] = 'tester';\n$input[] = 'tester';\n\
    \n$result = [];\n\n$loops = 100000;\n$loops = 10000;\n$loops = 1000;\n$loops =\
    \ 10;\n\n$start = microtime(TRUE);\nfor ($i = 0; $i < $loops; $i++) {\n    array_walk($input,\
    \ 'do_nothing');\n}\n$stop = microtime(TRUE);\n\necho 'array_walk: ' . ($stop\
    \ - $start) . PHP_EOL;\n\n$start = microtime(TRUE);\nfor ($i = 0; $i < $loops;\
    \ $i++) {\n    array_filter($input, 'do_nothing');\n}\n$stop = microtime(TRUE);\n\
    \necho 'array_filter: ' . ($stop - $start) . PHP_EOL;\n", "    if (!is_array($strings))\
    \ {\n        return [];\n    }\n\n    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=2\
    \ |>\narray_filter can work on a multi-dimensional array as well. \n<code>\n$arr\
    \ = [\n    ['one', 'two'],\n    ['one', 'three'],\n    ['four', 'five', 'six'],\n\
    \    ['one', 'seven'],\n];\n\n$result = array_filter($arr, function($val) {\n\
    \    $result = true;\n    foreach ($val as $value) {\n        if (strpos($value,\
    \ 'e') === false) { \n            $result = false;\n        }\n    }\n    return\
    \ $result;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array dscore=1 |>\narray_filter()\
    \ doesn't work on multidimensional arrays, only on ones that have a certain value\
    \ (string in this case).  It does work on single arrays (strings in this case)\
    \ however.  You can create a function for the callback and pass it array_filter()\
    \ as the callback.  Here's a working example:\n<code>\n$array = [\n    [\n   \
    \     'string' => 'string 1',\n        'string2' => 'string 2',\n        'string3'\
    \ => 'string 3',\n        'string4' => 'string 4',\n        'string5' => 'string\
    \ 5',\n    ],\n    [\n        'string' => 'string 1',\n        'string2' => 'string\
    \ 2',\n        'string3' => 'string 3',\n        'string4' => 'string 4',\n  \
    \      'string5' => 'string 5',\n    ],\n    [\n        'string' => 'string 1',\n\
    \        'string2' => 'string 2',\n        'string3' => 'string 3',\n        'string4'\
    \ => 'string 4',\n        'string5' => 'string 5',\n    ],\n    [\n        'string'\
    \ => 'string 1',\n        'string2' => 'string 2',\n        'string3' => 'string\
    \ 3',\n        'string4' => 'string 4',\n        'string5' => 'string 5',\n  \
    \  ],\n    [\n        'string' => 'string 1',\n        'string2' => 'string 2',\n\
    \        'string3' => 'string 3',\n        'string4' => 'string 4',\n        'string5'\
    \ => 'string 5',\n    ],\n    [\n        'string' => 'string 1',\n        'string2'\
    \ => 'string 2',\n        'string3' => 'string 3',\n        'string4' => 'string\
    \ 4',\n        'string5' => 'string 5',\n    ],\n];\n\n$result = array_filter(\n\
    \    $array,\n    function($value) {\n        foreach ($value as $key => $value)\
    \ {\n            if (str", "  return array_filter($strings, function($string)\
    \ use($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "    $result = array();\n    foreach ($strings as $string)\
    \ {\n        if (strpos($string, $substring) !== false) {\n            $result[]\
    \ = $string;\n        }\n    }\n    return $result;\n}\n", "  return array_filter($strings,\
    \ function($s) use ($substring) {\n    return strpos($s, $substring) !== false;\n\
    \  });\n}\n", "  return array_filter(\n    $strings,\n    function ($string) use\
    \ ($substring) {\n      return strpos($string, $substring) !== false;\n    }\n\
    \  );\n}\n</code>\n<|/ a tags=arrays,php,multidimensional-array |>\n<| a dscore=3\
    \ |>\n<code>\n$array = [\n  ['aaa','bbb','ccc'],\n  ['aaa','bbb'],\n  ['aaa','ccc'],\n\
    \  ['aaa'],\n  ['bbb','ccc','ddd'],\n  ['aaa','bbb','ccc','ddd'],\n];\n\n$result\
    \ = [];\n\nforeach($array as $arr) {\n  $result[] = array_values($arr);\n}\n\n\
    var_dump($result);\n</code>\n<|/ a tags=arrays,php,multidimensional-array |>\n\
    <| a tags=arrays,php,multidimensional-array |>\nYou can try this \n<code>\n$a[][]=\"\
    aaa\";\n$a[][]=\"bbb\";\n$a[][]=\"ccc\";\n$a[][]=\"ddd\";\n\n$final = [];\nforeach\
    \ ($a as $v) {\n    $final[] = $v[0];\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    `$final` will contain all `aaa`, `bbb`, and `ccc`, instead of just `aaa`.\n<|/\
    \ c |>\n<| c |>\nYa I didn't see that. Thanks for point out\n<|/ c |>\n<| a tags=arrays,php,multidimensional-array\
    \ dscore=1 |>\nTry this :\n<code>\n$array = [\n  ['aaa','bbb','ccc'],\n  ['aaa','bbb'],\n\
    \  ['aaa','ccc'],\n  ['aaa'],\n  ['bbb','ccc','ddd'],\n  ['aaa','bbb','ccc','ddd'],\n\
    ];\n\n$result = array();\nforeach ($array as $key => $value) {\n    foreach ($value\
    \ as $k => $v) {\n        $result[] = $v;\n    }\n}\n\nprint_r($result);\n</code>\n\
    <|/ a |>\n<| a |>\n<code>\n<?php", "  return array_filter($strings, function ($item)\
    \ use ($substring) {\n    return strpos($item, $substring) !== FALSE;\n  });\n\
    }\n</code>\nTo use above function just call:\n<code>\nfilter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n\
    <| c |>\nThis does return `['abc', 'bacd', 'array']`, but I'm looking for a function\
    \ that filters out any array element that has a substring in its value\n<|/ c\
    \ |>\n<| c |>\nYes, but how do you want it be filtered? If you want it just to\
    \ filter out all values which have substring, just use code from my answer. If\
    \ you want to remove all values from array which have substring, see updated answer.\n\
    <|/ c |>\n<| c |>\nThat's perfect! Thank you!\n<|/ c |>\n<| c |>\nGlad to help\
    \ you!\n<|/ c |>\n<| a dscore=0 tags=arrays,php |>\nTry this:\n<code>\n$array\
    \ = [\n    'hello', 'hello', 'hello',\n    'hello', 'hello', 'hello'\n];\n\n$new_array\
    \ = array_filter($array, function ($item) use ($substring) {\n    return strpos($item,\
    \ $substring) !== FALSE;\n});\n</code>\n<|/ a |>\n<| c |>\nThis doesn't do what\
    \ I'm looking for\n<|/ c |>\n<| a dscore=0 |>\nYou can use array_filter function.\n\
    <code>\n$array = array(\n    \"hello\",\n    \"hello\",\n    \"hello\",\n    \"\
    world\",\n    \"world\",\n    \"hello\",\n    \"world\"\n);\n\n$sub = \"hello\"\
    ;\n\n$result = array_filter($array, function($element) use ($sub){\n    return\
    \ strpos($element, $sub) !== FALSE;\n});\n\nvar_dump($result);\n</code>\nThe output\
    \ is:\n<code>\narray(3) {\n  [3]=>\n  string(5) \"world\"\n  [4]=>\n  string(5)\
    \ \"world\"\n  [5]=>\n  string(5) \"world\"\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\nYou can use this code\n<code>\n<?php\n$arr = [\n\
    \    'hello', 'hello', 'hello',\n    'hello', 'hello', 'hello'\n];\n\n$string\
    \ = 'hello';\n$result = array_filter($arr, function($v) use ($string) {\n    return\
    \ false !== stripos((string)$v, $string);\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a |>\n<| a |>\nI use this as a base for my\
    \ needs.\n<code>\n<?php", "    return array_filter(\n        $strings,\n     \
    \   function($string) use ($substring) {\n            return mb_strpos($string,\
    \ $substring) !== false;\n        }\n    );\n}\n</code>\n<|/ a tags=php |>\n<|\
    \ c |>\nA single regex would not work since it won't match `'abc'` and `'bacd'`\
    \ in the example above.\n<|/ c |>\n<| c |>\n, correct. That's the reason why I\
    \ suggest to build two regexes and apply the filter on the first one and the second\
    \ on the second one.\n<|/ c |>\n<| c |>\nI updated my answer so your example will\
    \ work now.\n<|/ c |>\n<| c |>\nThanks for the update but the point of using a\
    \ regex is that you don't have to have two separate functions to get the job done.\
    \ Your answer is still good though as an alternative.\n<|/ c |>\n<| c |>\n, I\
    \ did not see your comment before you added it. I deleted my comment because I\
    \ realized that it was not a good answer. My bad.\n<|/ c |>\n<| a dscore=2 tags=php\
    \ |>\nThis should do the trick without regular expressions or loops\n<code>\n\
    $strings = array(\"one\", \"two\", \"three\", \"four\", \"five\");\n$strings =\
    \ array_intersect($strings, \"five\", \"six\");\n</code>\n<|/ a |>\n<| c |>\n\
    That will leave `\"five\"` out of the result.\n<|/ c |>\n<| c |>\nThe question\
    \ is about substrings, not whole strings.\n<|/ c |>\n<| a |>\nThe correct answer\
    \ should be this:\n<code>", "  return array_filter($strings, function($s) use\
    \ ($substring) {\n    return strpos($s, $substring) !== FALSE;\n  });\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI prefer using \"stripos\" instead of \"strpos\",\
    \ because stripos will return false on false or 0 occurrences.\n<|/ c |>\n<| a\
    \ tags=arrays,php |>\nI know I'm late to the party on this one, but I found this\
    \ question searching for something else and thought I'd contribute a more elegant\
    \ solution to this. It uses array_filter() to filter and strpos() to search for\
    \ the substring.\n<code>", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=arrays,php,filtering,filter\
    \ |>\n<| a dscore=1 |>\nI created this simple code with a loop to solve this problem\
    \ by filtering an array and eliminating elements that do not match. \nIt also\
    \ takes an optional search parameter, if empty it will use the full string match.\
    \ \n<code>", "    return array_filter($strings, function($string) use ($substring)\
    \ {\n        return mb_strpos($string, $substring) !== false;\n    });\n}\n</code>\n\
    <|/ a dscore=5 tags=php,arrays |>\n<| c |>\nFor PHP7 you can now use: mb_stripos($string,\
    \ $substring) !== false\n<|/ c |>\n<| c |>\nThis answer should be marked as the\
    \ correct one because the array_filter method is the way to go.\n<|/ c |>\n<|\
    \ a |>\n<code>\nforeach ($array as $key => $value) {\n    $array[$key] = array_search($value,\
    \ $array);\n}\n</code>\n<|/ a dscore=5 tags=php,arrays |>\n<| c |>\nThis should\
    \ be the accepted answer - it directly answers the question. Thanks!\n<|/ c |>\n\
    <| c |>\nNote that this solution will replace duplicates with keys. Say you have\
    \ `$array = array('abc', 'abbc');` and the search term is 'abc'. The keys will\
    \ be changed to 0, 1, 2.\n<|/ c |>\n<| c |>\nThanks, I didn't know that.\n<|/\
    \ c |>\n<| c |>\nThis is the best answer here, as it works even if there are duplicates\
    \ in the array.\n<|/ c |>\n<| a tags=php,arrays |>\nUse array_search:\n<code>\n\
    $result = array_search($string, $array);\n</code>\nOr, if you want it more concise:\n\
    <code>\n$result = array_search($string, $array);\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis is great for when `$string` does not appear in any of the array\
    \ values.\n<|/ c |>\n<| a dscore=5 tags=php,arrays |>\nIf you don't like using\
    \ array_search, you can use array_flip to invert a keyed array.\nExample:\n<code>\n\
    <?php\n\n$a = array('red', 'green', 'blue', 'yellow');\n\n$b = array('green',\
    \ 'blue');\n\n$c = array_flip($b);\n\nprint_r($a); // Array\nprint_r($b); // Array\n\
    print_r($c); // Array ( [blue] => 0 [green] => 1 )\n\nprint_r(array_search('green',\
    \ $a));\n\nprint_r(array_search('green', $c)); // = 1\n</code>\n<|/ a |>\n<| c\
    \ |>\nWhy array_flip when array_search does the job?\n<|/ c |>\n<| a tags=php,arrays\
    \ dscore=5 |>\nI've got another solution if you don't want to use array_search:\n\
    <code>", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== FALSE) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $filtered = [];\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n  \
    \  }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThe downside\
    \ is that it removes the duplicate items. If the input array is ['a', 'a', 'b',\
    \ 'b', 'b'] it returns ['a', 'b'] instead of ['a', 'b', 'b']\n<|/ c |>\n<| c |>\n\
    Good point. Maybe it can be fixed with [array_unique()](http://php.net/manual/en/function.array-unique.php)\
    \ after filtering?\n<|/ c |>\n<| c |>\nIf you want it to return `['a', 'b', 'b']`\
    \ then `array_unique($filtered)`\n<|/ c |>\n<| c |>\nThis also does not work for\
    \ PHP 7 - you might have to upgrade to PHP7.\n<|/ c |>\n<| c |>\nThe second example\
    \ is not very clear. How does it handle a substring \"ab\" when searching for\
    \ \"a\"?\n<|/ c |>\n<| a tags=php |>\nTry this:\n<code>", "    $result = array();\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $result[] = $string;\n        }\n    }\n    return\
    \ $result;\n}\n", "  return array_filter(\n    $strings,\n    function ($string)\
    \ use ($substring) {\n      return strpos($string, $substring) !== false;\n  \
    \  }\n  );\n}", "  return array_filter(\n      $strings,\n      function ($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== FALSE;\n\
    \      },\n      ARRAY_FILTER_USE_BOTH\n  );\n}\n", "  $filtered_strings = [];\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n", "  $return = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $return[] = $string;\n    }\n  }\n  return $return;\n\
    }\n</code>\nThe second function filter_by_substring is simple as that:\n<code>",
  "  return array_filter(\n    $strings,\n    function ($string) use ($substring)\
    \ {\n      return strpos($string, $substring) !== false;\n    }\n  );\n}\n", " \
    \ global $LNG;\n  $results = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== FALSE) {\n      $results[] = $string;\n    }\n  }\n  return\
    \ $results;\n}", "  $filtered = array();\n\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== FALSE) {\n      $filtered[] = $string;\n\
    \    }\n  }\n\n  return $filtered;\n}\n", "  if ($substring === '') {\n    return\
    \ $strings;\n  }\n  $matches = [];\n  foreach ($strings as $key => $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $matches[] = $key;\n\
    \    }\n  }\n  return array_intersect_key($strings, array_flip($matches));\n}\n\
    </code>\n<|/ a |>\n<| c |>\nGood idea, but `array_intersect_key` will still require\
    \ you to pass all the values at once, which could be thousands of strings. You'd\
    \ lose performance doing that in a loop.\n<|/ c |>\n<| c |>\n: I agree, though\
    \ if there aren't any thousands of strings, that might not be the best optimization\
    \ to make.\n<|/ c |>\n<| a |>\n<code>\n$string = 'This is some random text with\
    \ random numbers 1234567890';\n$array = array();\n$words = explode(' ', $string);\n\
    $count = 1;\nforeach($words as $word) {\n    if(strpos($word, '#') !== false)\
    \ {\n        $array = array_merge($array, explode('#', $word));\n    } else {\n\
    \        $array[] = $word;\n    }\n}\nvar_dump($array);\n</code>\n<|/ a tags=php,string\
    \ dscore=2 |>\n<| c |>\nHow would you do this without using regex?\n<|/ c |>\n\
    <| c |>\nUse array_search() maybe? http://php.net/manual/en/function.array-search.php\n\
    <|/ c |>\n<| c |>\nYou could do something like `if(strpos($word, '#') !== false)\
    \ $array[] = array_search('#', $word);`\n<|/ c |>\n<| c |>\nAnd if you want it\
    \ to split on `#` characters when there is no `#` in the string just do `if(strpos($word,\
    \ '#') !== false) $array[] = array_search('#', $word);` else `$array[] = $word;`\
    \ The only change would be `strpos($word, '#') !== false` to `!strpos($word, '#')`\n\
    <|/ c |>\n<| a tags=php,string |>\nThe PHP library that supports this, is called\
    \ Text::BalancedString. It's in the PHP core, but not in 5.3 or 5.4 (which the\
    \ OP wants to use). The method was added in 5.6.\nIt can perform these kinds of\
    \ operations (and the others you can find in Text::BalancedString itself):\n\n\
    <code>\n/**\n * A balanced string, for example:\n *", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== FALSE;\n  });\n}\n</code>\n<|/ a |>\n<| a tags=arrays,string,php |>\n<code>\n\
    foreach($arr as $key => $value){\n   if(strpos($value, 'a') !== FALSE){\n    \
    \   unset($arr[$key]);\n   }\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis should\
    \ be the accepted answer. No unsets, no loops needed and it's obvious and simple.\n\
    <|/ c |>\n<| a dscore=2 |>\nThis should do the trick:\n<code>\n$array = array_filter($array,\
    \ function($el) {\n    return !(strpos($el, 'a') === FALSE);\n});\n</code>\n<|/\
    \ a tags=arrays,string,php |>\n<| c |>\nThat's a good answer, but as pointed out\
    \ in the comments on the accepted answer, you might as well write that function\
    \ inline, instead of having two functions.\n<|/ c |>\n<| c |>\nNo need for that\
    \ anonymous function, `array_filter` supports callback functions (`function($el){}`).\n\
    <|/ c |>\n<| c |>\nThanks for the suggestion. I tried it out with array_filter\
    \ and it worked fine. :)\n<|/ c |>\n<| a |>\nTry this:\n<code>\n$array = array_filter($array,\
    \ function($el) {\n    return !(strpos($el, 'a') === FALSE);\n});\n</code>\n<|/\
    \ a tags=arrays,string,php dscore=1 |>\n<| a tags=arrays,string,php |>\n<code>\n\
    $arr = array(\"a\",\"b\",\"c\");\n$arr2 = array_filter($arr,function($val){ return\
    \ !strpos($val,\"b\");});\nprint_r($arr2);\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,string,php\
    \ |>\nI used the below code to filter out elements from array which do not contain\
    \ the string 'a'\n<code>\n$arr = [\n    0 => 'a',\n    1 => 'b',\n    2 => 'c',\n\
    \    3 => 'e',\n    4 => 'f',\n    5 => 'g',\n    6 => 'h',\n];\n\n$filter = $arr;\n\
    foreach ($filter as $key => $value) {\n    if (!strpos($value, 'a')) {\n     \
    \   unset($filter[$key]);\n    }\n}\n</code>\n<|/ a dscore=0 |>\n", "  return\
    \ array_filter(\n    $strings,\n    function ($string) use ($substring) {\n  \
    \    return strpos($string, $substring) !== false;\n    }\n  );\n}\n", "    foreach\
    \ ($strings as $string) {\n        if (strpos($string, $substring) !== false)\
    \ {\n            array_push($strings, $string);\n        }\n    }\n    return\
    \ $strings;\n}\n</code>\n<|/ a dscore=0 tags=string,arrays,php,substring |>\n\
    <| a |>\nTo add more to GolezTrol's answer, you can create a function which filters\
    \ through a list of words and returns true if the word contains a specified substring:\n\
    <code>\n<?php\n", "  $filtered = array();\n\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== FALSE) {\n      $filtered[$string] =\
    \ $string;\n    }\n  }\n\n  return $filtered;\n}", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\nThe above is untested, but should be along the\
    \ lines of what you need.\nThe above is just a demonstration. You should probably\
    \ use an actual validation function, or better yet, a combination of validation\
    \ and cleaning functions. It's a little bit more work, but you might find that\
    \ doing things \"right\" will mean you end up with fewer bugs.\n<|/ a tags=codeigniter,php\
    \ |>\n<| c |>\nI love the use of closures.\n<|/ c |>\n<| c |>\nI honestly thought\
    \ that was the best way to do it, but I guess not :)\n<|/ c |>\n<| a tags=codeigniter,php\
    \ |>\nThis code will allow you to check if a given string is contained in another\
    \ string.  It will only return true if there is at least one match, false if the\
    \ string is not contained in the other string.  It will allow for multiple occurrences\
    \ of a string as well, which is why I am using a foreach loop.  If you were only\
    \ looking to check for one occurrence of a string, you could use the strpos function\
    \ instead.\n<code>\n<?php\n\n$search_string = 'hello';\n\n$string_to_search =\
    \ 'hello world hello';\n\n$string_found_in_string_to_search = array();\n\nforeach($string_to_search\
    \ as $string_check){\n\n    if(strpos($search_string, $string_check) !== false){\n\
    \n        $string_found_in_string_to_search[] = $string_check;\n\n    }\n\n}\n\
    \nvar_dump($string_found_in_string_to_search);\n", "    $filtered_strings = [];\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $filtered_strings[] = $string;\n        }\n    }\n\
    \    return $filtered_strings;\n}\n", "    if (empty($strings)) {\n        return\
    \ $strings;\n    }\n    $filtered_strings = array();\n    foreach ($strings as\
    \ $string) {\n        if (strpos($string, $substring) !== false) {\n         \
    \   $filtered_strings[] = $string;\n        }\n    }\n    return $filtered_strings;\n\
    }\n", "  return array_filter($strings, function ($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n", "  if (count($strings)\
    \ === 0) {\n    return $strings;\n  }\n\n  // Reverse the string\n  $strings =\
    \ array_reverse($strings);\n\n  $result = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $result[] = $string;\n\
    \    }\n  }\n\n  // Reverse the array again\n  $result = array_reverse($result);\n\
    \n  return $result;\n}\n", "  if (!is_array($strings)) $strings = [$strings];\n\
    \  if (!is_string($substring)) return $strings;\n  \n  $filtered = [];\n  $start\
    \ = 0;\n  foreach ($strings as $s) {\n    if (strpos($s, $substring) === 0) {\n\
    \      $filtered[] = $s;\n      $start++;\n    }\n  }\n  \n  return array_slice($filtered,\
    \ $start);\n}", "  if (!is_array($strings)) {\n    throw InvalidArgumentException::invalidInputArgument(\n\
    \        $strings, 'array', 'Input should be an array of strings'\n    );\n  }\n\
    \n  if (!is_string($substring)) {\n    throw InvalidArgumentException::invalidInputArgument(\n\
    \        $substring, 'string', 'Substring should be a string of characters'\n\
    \    );\n  }\n\n  return array_filter(\n    $strings,\n    function($string) use\
    \ ($substring) {\n      return strpos(strtolower($string), strtolower($substring))\
    \ !== FALSE;\n    }\n  );\n}\n", "  $filtered_strings = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}", "  $filtered_strings\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }", "  if (!is_array($strings)) {\n    return $strings;\n  }\n\n  return array_filter($strings,\
    \ function($s) use ($substring) {\n    if (strpos($s, $substring) === 0) {\n \
    \     return true;\n    }\n    return false;\n  });\n}\n\n/**\n * Generate an\
    \ UUID with microseconds and a random string at the end\n *\n * @param string\
    \ $prefix\n * @param bool $include_hyphen\n * @return string\n */", "  if (!$strings)\
    \ {\n    return $strings;\n  }\n  $results = [];\n  $matches = [];\n  foreach\
    \ ($strings as $s) {\n    // If there are no matches, just return the original\
    \ array\n    if (empty($matches)) {\n      $results[] = $s;\n    }\n    // Check\
    \ if the current string matches any part of the substring we're looking for\n\
    \    elseif (stripos($s, $substring) !== FALSE) {\n      $matches[] = $s;\n  \
    \  }\n  }\n  // If there are no matches and no matches were found above, return\
    \ an empty array\n  if (!$matches && !empty($results)) {\n    return [];\n  }\n\
    \  // If there are no matches or matches were found above, return only matching\
    \ strings\n  if (!$matches || empty($results)) {\n    return $matches;\n  }\n\
    \  // If there were matches or matches were found above, return only the parts\
    \ containing the substring\n  return $results;\n}", "  $new_strings = array();\n\
    \n  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== FALSE)\
    \ {\n      $new_strings[] = $string;\n    }\n  }\n\n  return $new_strings;\n}\n\
    </code>\n<|/ a tags=php,arrays,sorting dscore=3 |>\n<| c |>\n`strtolower` should\
    \ be `mb_strtolower` (PHP 5.3+)\n<|/ c |>\n<| c |>\nI changed it to `strcasecmp`\
    \ as I thought this was more efficient. `strcasecmp` does not use the locale,\
    \ so the letters get compared as is.\n<|/ c |>\n<| a dscore=3 |>\nI came up with\
    \ this, which may be a bit heavy-handed, but I think it does the job:\n<code>\n\
    $result = array_filter(\n    $array,\n    function($a) use ($sub_string) {\n \
    \       return count(array_filter(\n            $a,\n            function($b)\
    \ use ($sub_string) {\n                return strpos($b, $sub_string) !== FALSE;\n\
    \            }\n        )) === 0;\n    }\n);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThanks Gumbo. Nice and elegant.\n<|/ c |>\n<| a |>\n<code>", " \
    \   if (empty($strings)) return $strings;\n    $substring = strtolower($substring);\n\
    \    return array_filter(\n        $strings,\n        function ($str) use ($substring)\
    \ {\n            $str = strtolower($str);\n            return (substr_count($str,\
    \ $substring) > 0);\n        }\n    );\n}\n", "  $filtered = array();\n  foreach\
    \ ($strings as $s) {\n    if (strpos($s, $substring) !== FALSE) {\n      $filtered[]\
    \ = $s;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,search,multidimensional-array\
    \ dscore=0 |>\nYou can use array_filter() and strpos() to search through the array:\n\
    <code>\n$array = ['abc', 'bacd', 'cde', 'array', 'foobar'];\n\n$string = 'a';\n\
    \n$result = array_filter($array, function ($v) use ($string) {\n    return strpos($v,\
    \ $string) !== false;\n});\n\nprint_r($result);\n</code>\nOutput\n<code>\nArray\n\
    (\n    [2] => bacd\n    [3] => array\n)\n</code>\nDemo\n<|/ a |>\n<| a tags=php,arrays,search,multidimensional-array\
    \ |>\n<code>", "  return array_filter($strings, function($value) use ($substring)\
    \ {\n    return strpos($value, $substring) !== false;\n  });\n}\n</code>\n(If\
    \ your PHP version doesn't support anonymous functions, you can use function wrapper\
    \ instead)\n<|/ a dscore=5 |>\n<| c |>\nWhat if I am looking for strings that\
    \ contain `abc`? `filter_by_substring` won't return anything unless I use `'*abc*'`.\
    \ How do I do that?\n<|/ c |>\n<| c |>\nI've updated the example so you can easily\
    \ match strings that contains `abc`\n<|/ c |>\n<| c |>\nWhat if I am looking for\
    \ strings that contain `abc` and don't want it to return `abc`?\n<|/ c |>\n<|\
    \ c |>\n`filter_by_substring` won't return anything unless I use `'*abc*'`. How\
    \ do I do that?\n<|/ c |>\n<| c |>\nThis one fails, if the string contains multiple\
    \ of the substring: `filter_by_substring` will return an empty array, if the string\
    \ contains none.\n<|/ c |>\n<| a dscore=5 |>\nYou can use the following code if\
    \ you want to find if an element is inside the array or not, and return the other\
    \ elements that is not matching the search.\n<code>\n<?php\n$a = [\n    'a' =>\
    \ 'apple',\n    'b' => 'banana',\n    'c' => 'cherry',\n    'd' => 'durian',\n\
    \    'e' => 'eggplant',\n    'f' => 'foo',\n    'g' => 'grape',\n];\n\n$search\
    \ = 'apple';\n$a = array_filter($a, function($el) use($search) {\n    return ($el\
    \ != $search);\n});\nprint_r($a);\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    What if I want to find the element if it exist anywhere in the array?\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\n$search = 'apple';\n$a = ['a', 'b', 'apple', 'c'];\n\
    $a = array_filter($a, function($a) use($search) {\n    return (preg_match('/'.$search.'/i',\
    \ $a));\n});\nprint_r($a);\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\nI think\
    \ array_filter should be enough\n<code>\n$search = 'apple';\n$a = ['a', 'b', 'apple',\
    \ 'c'];\n$a = array_filter($a, function($a) use($search) {\n    return strpos($a,\
    \ $search) !== false;\n});\nprint_r($a);\n</code>\n<|/ a tags=arrays,php dscore=4\
    \ |>", "  return array_filter($strings, function ($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\nThe array_filter\
    \ function applies the filter function to every element of the array and returns\
    \ the filtered array.\nThe anonymous function used in the array_filter call checks\
    \ if the current string in the list contains the given substring.\nThis can be\
    \ written as a regular function as well:\n<code>", "  return array_filter(\n \
    \   array_map(function ($string) {\n      return strpos($string, $substring) !==\
    \ false;\n    }, $strings),\n    function ($string) {\n      return strlen($string);\n\
    \    }\n  );\n}\n</code>\n<code>", "  $result = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=regex,php |>\n<| a dscore=1\
    \ |>\nYour regex seems to be working fine. Try it here https://regex101.com/r/nY6qM0/1\n\
    <code>\n<?php\n\n$subjects = [\n    'abc abc abc',\n    'bc abc abc',\n    'abc',\n\
    \    'bc abc',\n    'abc abc cde',\n    'abc abc cde cde'\n];\n\n$pattern = '/abc|bc/g';\n\
    foreach ($subjects as $subject) {\n    echo \"$subject\\n\";\n    preg_match_all($pattern,\
    \ $subject, $matches);\n    print_r($matches);\n}\n", "  $filtered_strings = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== FALSE)\
    \ {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n", "    if (!is_string($substring)) {\n        return false;\n    }\n    return\
    \ array_filter($strings, function ($string) use ($substring) {\n        return\
    \ strpos($string, $substring) !== false;\n    });\n}\n</code>\nThe above function\
    \ will filter out all the strings in the array that do not contain the substring\
    \ you are searching for. You can use it in a foreach loop or in any function that\
    \ takes a function and applies it to the elements of the array.\n<|/ a |>\n<|\
    \ c |>\nThank you for helping me out ! My input would be an array of strings,\
    \ like this `['abc', 'bacd', 'cde', 'array']` and the substring could be `'a'`\
    \ but I'd like to filter it out like how you've shown me with `filter_by_substring`\n\
    <|/ c |>\n<| c |>\nSo you would like to filter the array of strings to only keep\
    \ those that contain the substring you are searching for?\n<|/ c |>\n<| c |>\n\
    Yes something like that\n<|/ c |>\n<| c |>\nI've updated my answer to show you\
    \ how to implement the function.\n<|/ c |>\n<| c |>\nThank you so much for your\
    \ help and efforts ! It's working now\n<|/ c |>\n<| a |>\nI've created an example\
    \ that you can use.\n<code>\n$array=['abc', 'bacd', 'cde', 'array'];\n\n$searched='bacd';\n\
    \narray_filter(\n    $array,\n    function($el) use ($searched){\n        return\
    \ strpos(strtolower($el),strtolower($searched))!==false;\n    }\n);\n</code>\n\
    <|/ a tags=arrays,php,search dscore=1 |>\n<| c |>\nI think `'array'` should be\
    \ in the `array_filter()` function as well. Otherwise, it's just going to return\
    \ the whole array.\n<|/ c |>\n<| c |>\nYes, I assumed that you wanted it also.\n\
    <|/ c |>\n<| c |>\nThanks for your help ! It's working now\n<|/ c |>\n<| a dscore=0\
    \ |>\nJust loop through the array and filter the array as you go through, like\
    \ this:\n<code>\n<?php\n\n$array = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n$search\
    \ = 'a';\n\nforeach($array as $key => $value) {\n    if(strpos($value, $search)\
    \ !== false) {\n        unset($array[$key]);\n    }\n}\n\nvar_dump($array);\n\
    </code>\n<|/ a tags=arrays,php,search |>\n<| a dscore=0 |>\nTry array_filter()\
    \ function:\n", "  global $app;\n  return array_filter($strings, function($item)\
    \ use ($app, $substring) {\n    return strpos($item, $substring) !== false;\n\
    \  });\n}", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n", "    if (is_null($strings)\
    \ || is_null($substring)) return $strings;\n\n    $filtered_strings = array();\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) $filtered_strings[] = $string;\n    }\n\n    return $filtered_strings;\n\
    }\n", "  if (!is_array($strings)) {\n    error_log(\"$strings is not an array.\"\
    );\n    return $strings;\n  }\n  if (!is_string($substring)) {\n    error_log(\"\
    $substring is not a string.\");\n    return $strings;\n  }\n  $substring = strtolower($substring);\n\
    \  $filter = function ($string) use ($substring) {\n    return (stripos($string,\
    \ $substring) !== false);\n  };\n  return array_filter($strings, $filter);\n}",
  "  if (empty($strings)) return array();\n  if (empty($substring)) return $strings;\n\
    \n  $results = [];\n\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== FALSE) {\n      $results[] = $string;\n    }\n  }\n\n  return\
    \ $results;\n}\n", "  return array_filter($strings, function ($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n\n/**\n * @}\n\
    \ */", "  if (!empty($strings)) {\n    $substring = strtolower($substring);\n\
    \    $substring = preg_quote($substring, '/');\n    $strings = array_filter(\n\
    \        $strings,\n        function ($str) use ($substring) {\n          $str\
    \ = strtolower($str);\n          return strpos($str, $substring) !== false;\n\
    \        });\n  }\n  return $strings;\n}\n", "    return array_filter($strings,\
    \ function($item) use ($substring) {\n        return strpos($item, $substring)\
    \ !== false;\n    });\n}\n\n/**\n * Given an input list of strings, return the\
    \ maximum value found in each string\n * >>> get_max_value_from_list(['a','2','3','b','4','c','d'])\
    \ == 'c'\n * True\n * >>> get_max_value_from_list(['a','2','3','b','4','c','d','e','e','a','a','a'])\
    \ == 'e'\n * True\n * >>> get_max_value_from_list([]) == ''\n * True\n * >>> get_max_value_from_list([''])\
    \ == ''\n * True\n * >>> get_max_value_from_list([1,3,5]) == '5'\n * True\n *\
    \ >>> get_max_value_from_list([1,3,5]) == '5'\n * True\n * >>> get_max_value_from_list([1,3,5,4,5])\
    \ == '5'\n * True\n * >>> get_max_value_from_list([1,3,5,4,5,6,5,4,5,6,5,4,5])\
    \ == '5'\n * True\n * >>> get_max_value_from_list([1,3,5,4,5,6,5,4,5,6,5,4,5,6,5,4,5,6,5,4,5,6,5,4,5,6,5,4,5,6,5,4,5,6,5,4,5,6,5,4,5,6,5,4,5,6,5,4,5])\
    \ == '5'\n * True\n * >>> get_max_value_from_list(['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j']) == 'j'\n * True\n * >>> get_max_value_from_list(['a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 'e') == 'i'\n * True\n * >>> get_max_value_from_list(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 'j') == 'j'\n * True\n * >>> get_max_value_from_list(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 'd') == 'd'\n * True\n * >>> get_max_value_from_list(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 'j') == 'j'\n * True\n * >>> get_max_value_from_list(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 'e') == 'i'\n * True\n * >>> get_max_value_from_list(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 'e') == 'i'\n * True\n * >>> get_max_value_from_list(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 'd') == 'd'\n * True\n * >>> ",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $result = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nthanks for your answer but i think\
    \ this answer works better for me, because i want to filter the whole array, not\
    \ only a few values from it.\n<|/ c |>\n<| c |>\nThis works perfectly for me.\
    \ Thank you so much!\n<|/ c |>\n<| a tags=arrays,php |>\nHere is a function to\
    \ get all values which have a value containing a string in a given array :\n<code>",
  "  if (is_null($strings)) {\n    return [];\n  }\n  if (!is_string($strings)) {\n\
    \    throw new \\InvalidArgumentException('Expecting a list of strings.');\n \
    \ }\n\n  if (strlen($substring) > strlen($strings)) {\n    return [];\n  }\n\n\
    \  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n\n/**\n * Filters an input\
    \ list of strings only for ones not containing given substring\n * >>> filter_by_not_substring([],\
    \ 'a')\n * []\n * >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'a')\n * ['cde', 'array']\n */", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n", "  $return = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $return[] = $string;\n    }\n  }\n  return $return;\n\
    }\n", "  $filtered_strings = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered_strings[] = $string;\n    }\n  }\n\
    \  return $filtered_strings;\n}", "  if (!$strings) {\n    return $strings;\n\
    \  }\n\n  // If the substring is not an array, it will be cast as a string\n \
    \ if (!is_array($substring)) {\n    $substring = (array) $substring;\n  }\n\n\
    \  $filtered_array = [];\n  foreach ($strings as $string) {\n    // If the string\
    \ does not contain the substring\n    if (strpos($string, implode($substring))\
    \ === false) {\n      $filtered_array[] = $string;\n    }\n  }\n\n  return $filtered_array;\n\
    }\n</code>\nIt might be possible to simplify this a bit, by checking that the\
    \ substring is an array first and calling filter_by_substring on it. But this\
    \ should be more readable.\n<|/ a tags=arrays,string,php,array-filter |>\n<| c\
    \ |>\nThis does exactly what I was looking for, Thank you so much! It helped me\
    \ solve a lot of problems I was having, thanks again!\n<|/ c |>\n<| a dscore=0\
    \ |>\nYou can do this with an anonymous function, like this:\n<code>\n$input =\
    \ [\n  'abc',\n  'bacd',\n  'cde',\n  'array'\n];\n\n$substring = 'a';\n\n$result\
    \ = array_filter($input, function($item) use ($substring) {\n  return strpos($item,\
    \ $substring) !== FALSE;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,string,php,array-filter\
    \ |>\n<| c |>\nThis seems to return an empty array.\n<|/ c |>\n<| a |>\n<code>",
  "  $new_strings = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== FALSE) {\n      $new_strings[] = $string;\n    }\n  }\n  return\
    \ $new_strings;\n}", "  return array_filter($strings, function($item) {\n    return\
    \ strpos($item, $substring) !== FALSE;\n  });\n}\n", "    $filtered_strings =\
    \ array();\n    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $filtered_strings[] = $string;\n        }\n    }\n\
    \    return $filtered_strings;\n}\n", "  $result = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $result[]\
    \ = $string;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks.\
    \ This is exactly what I was looking for, although the answer by is what I was\
    \ looking for.\n<|/ c |>\n<| c |>\nI agree this is more concise than my solution.\
    \ But it is important to point out that this is only a quick and dirty solution.\
    \ For example, it won't work if `$substring` is an accented character, or there\
    \ are other characters that could be confused with the substring you are looking\
    \ for.\n<|/ c |>\n<| a tags=php,string,regex dscore=2 |>\nI figured out a way\
    \ to do this. I just came up with a simple function that does a strpos and strrpos\
    \ then returns true or false to determine if the string contains the substring.\n\
    <code>", "    $substring = strtolower($substring);\n    return array_filter(\n\
    \        $strings,\n        function ($item) use ($substring) {\n            return\
    \ (0 === strpos($item, $substring));\n        }\n    );\n}\n</code>\n<|/ a tags=arrays,php,string,filtering,search\
    \ |>\n<| c |>\nThe function should work on an array of any type of data.\n<|/\
    \ c |>\n<| a tags=arrays,php,string,filtering,search |>\n<code>\n$names = [\n\
    \    \"Adam Bragaglia\" => \"Bryan\",\n    \"Adam Bragaglia\" => \"Bob\",\n  \
    \  \"Adam Bragaglia\" => \"Bryan\",\n    \"Adam Bragaglia\" => \"Bob\",\n    \"\
    Adam Bragaglia\" => \"Charles\",\n    \"Adam Bragaglia\" => \"David\",\n    \"\
    Adam Bragaglia\" => \"George\",\n    \"Adam Bragaglia\" => \"Garry\",\n    \"\
    Adam Bragaglia\" => \"Greg\",\n];\n\n$search = \"Garry\";\n\n$results = [];\n\n\
    foreach ($names as $name => $person) {\n    if (strpos(strtolower($name), strtolower($search))\
    \ !== false) {\n        $results[] = $name;\n    }\n}\n\nvar_dump($results);\n\
    </code>\n<|/ a dscore=4 |>\n<| a |>\nI think array_filter is better, but if you\
    \ want to implement your own function you can use something like this\n<code>",
  "  return array_filter($strings, function($value) use ($substring) {\n    return\
    \ strpos($value, $substring) !== false;\n  });\n}", "  $pattern = '/' . preg_quote($substring)\
    \ . '/i';\n  return array_filter($strings, function ($str) use ($pattern) {\n\
    \    return preg_match($pattern, $str);\n  });\n}\n</code>\n<|/ a tags=function,arrays,php\
    \ |>\n<| c |>\nI really liked your solution but I changed it to work only with\
    \ strings and it works better because it is much cleaner. Thank you so much!\n\
    <|/ c |>\n<| c |>\nGood catch! I actually didn't know that about `in_array()`\
    \ - I always use `array_search()` instead. I've amended my answer to use `array_search()`\
    \ instead :-)\n<|/ c |>\n<| a |>\nI guess you are looking for array_filter()\n\
    <code>\n<?php\n$array = ['abc', 'bacd', 'cde', 'array'];\n$array = array_filter($array,\
    \ function($v) { return !is_string($v); });\nprint_r($array);\n</code>\nOutput\n\
    <code>\nArray ( [0] => abc [1] => bcd [2] => array )\n</code>\n<|/ a tags=function,arrays,php\
    \ dscore=1 |>\n<| c |>\nI believe you are right, OP should read up on it before\
    \ writing his own function. Thanks for your answer :)\n<|/ c |>\n<| a tags=function,arrays,php\
    \ dscore=0 |>\nYou don't need a function here, just use array_filter() like so:\n\
    <code>\n$result = array_filter(['abc', 'bacd', 'cde', 'array'], function($value)\
    \ {\n    return !is_string($value);\n});\n\nvar_dump($result);\n</code>\nWorking\
    \ example: https://3v4l.org/mZDt7\n<|/ a |>\n<| c |>\nBut then it gives `Array\
    \ ( [0] => abc [1] => bcd [2] => array )` as the output\n<|/ c |>\n<| c |>\nRight,\
    \ you could then `array_value` to turn that back into an array.\n<|/ c |>\n<|\
    \ a |>\nThis is another way of doing this, it does it in-line and doesn't use\
    \ any functions:\n<code>\n$array = [\"abc\", \"bacd\", \"cde\", \"array\"];\n\
    $array = array_filter(\n    $array,\n    function($v){\n        return !is_string($v);\n\
    \    }\n);\n</code>\n<|/ a tags=function,arrays,php dscore=0 |>\n<| a tags=function,arrays,php\
    \ |>\nI like array_filter, but since it's used like \"filters\" it could be ",
  "  $filtered = array();\n  $substring = preg_quote($substring, '/');\n  foreach($strings\
    \ as $str) {\n    if (strpos($str, $substring) !== false) {\n      $filtered[]\
    \ = $str;\n    }\n  }\n  return $filtered;\n}\n", "  if (!is_array($strings))\
    \ {\n    return array();\n  }\n  $output = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $output[] = $string;\n\
    \    }\n  }\n  return $output;\n}\n", "    foreach ($strings as $key => $string)\
    \ {\n        if ( strpos($string, $substring) !== FALSE ) {\n            $result[$key]\
    \ = $string;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php dscore=2 |>\nA simple approach would be to use array_filter\
    \ with a callback that checks if the string contains the substring you are looking\
    \ for.\n<code>\n$array = array(\"foo\",\"bar\",\"foobar\",\"barfoo\");\n$substr\
    \ = \"bar\";\n$newArray = array_filter($array, function($elm) use ($substr) {\n\
    \    return strpos($elm, $substr) !== FALSE;\n});\n</code>\n<|/ a |>\n<| a |>\n\
    In PHP >= 5.5:\n<code>\n$array = array(\"foo\",\"bar\",\"foobar\",\"barfoo\");\n\
    $substr = \"bar\";\n$newArray = array_filter($array, function ($elm) use ($substr)\
    \ {\n    return strpos($elm, $substr) !== FALSE;\n});\n</code>\n<|/ a dscore=1\
    \ tags=arrays,php |>\n<| a dscore=1 |>\nYou could use the array_filter function\
    \ and use strpos to check if each element contains the given string.\n<code>\n\
    $array = array(\"foo\",\"bar\",\"foobar\",\"barfoo\");\n$substr = \"bar\";\n$newArray\
    \ = array_filter($array, function ($elm) use ($substr) {\n    return strpos($elm,\
    \ $substr) !== FALSE;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>", "  return array_filter($strings, function ($string) use ($substring)\
    \ {\n    return false !== strpos($string, $substring);\n  });\n}\n", "    $new_strings\
    \ = [];\n    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $new_strings[] = $string;\n        }\n    }\n    return\
    \ $new_strings;\n}\n</code>\nUsage:\n<code>\n$array = array(\n    'abc',\n   \
    \ 'bacd',\n    'cde',\n    'array'\n);\n\nprint_r(filter_by_substring($array,\
    \ 'a'));\n</code>\nThis should print the following result:\n<code>\nArray\n(\n\
    \    [0] => abc\n    [1] => bacd\n    [2] => array\n)\n</code>\n<|/ a dscore=1\
    \ tags=arrays,php |>\n<| c |>\nThank you for the answer but the input array is\
    \ dynamic and I dont know what is in it beforehand\n<|/ c |>\n<| c |>\n: I see.\
    \ I've updated my answer. I hope this is what you want.\n<|/ c |>\n<| a dscore=0\
    \ tags=arrays,php |>\nYou can use the array_filter() function like so:\n<code>\n\
    $array = array('abc', 'bacd', 'cde', 'array');\n$new_array = array_filter($array,\
    \ function($el) {\n    return strpos($el, 'a') !== false;\n});\n</code>\nWhich\
    \ gives you:\n<code>\nArray\n(\n    [0] => abc\n    [1] => bacd\n    [2] => array\n\
    )\n</code>\n<|/ a |>\n<| a dscore=0 tags=arrays,php |>\nIf you want to find the\
    \ array elements which contains \"a\" only then try this:\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$new_array = array_filter($array, function($el) {\n\
    \   return strpos($el, 'a') !== false;\n});\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=arrays,php |>\n<code>\n$arr = array('abc', 'bacd', 'cde', 'array');\n$newArr\
    \ = array_filter($arr, function($el) use ($arr){\n    return strpos($el, 'a')\
    \ !== false;\n});\n</code>\n<|/ a |>\n<| a |>\nYou could use array_filter() and\
    \ a closure. Something like:\n<code>\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    $newArray = array_filter($array, function($el) {\n    return strpos($el, 'a')\
    \ !== false;\n});\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a dscore=0 |>\n\
    You can use array_filter() with a callback.\n<code>", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\nThen you can apply it to your inputs like this:\n\
    <code>\n$names = filter_by_substring($names, 'a');\n</code>\n<|/ a |>\n<| c |>\n\
    This is very nice and clean solution\n<|/ c |>\n<| a dscore=0 |>\nIf you can create\
    \ a string with each name on a new line (without an extra space at the end), you\
    \ can split the string into an array and then use the in_array function.\n<code>\n\
    $names = 'John Doe\n          Jane Doe\n          John Doe\n          John Doe';\n\
    \n$names_array = explode(\"\\n\", $names);\n$new_names = array();\nforeach($names_array\
    \ as $name) {\n    if(in_array(\"John Doe\", $names_array)) {\n        $new_names['John\
    \ Doe'] = $name;\n    } else {\n        $new_names['Jane Doe'] = $name;\n    }\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting dscore=0\
    \ |>\nYou can use the following solution:\n<code>\n<?php\n\n    $names = \"John\
    \ Doe Jane Doe John Doe John Doe John Doe\";\n    $names_array = explode(\" \"\
    , $names);\n\n    foreach($names_array as $name){\n        $matches = array();\n\
    \        $matches = preg_grep('~John Doe|Jane Doe~', $names_array);\n        if(count($matches)\
    \ > 0){\n            unset($matches[0]);\n        }\n    }\n\n    foreach($names_array\
    \ as $name){\n        if($name == $matches[0]){\n            echo $name;\n   \
    \     }else{\n            echo $name;\n        }\n    }\n", "    return array_filter($strings,\
    \ function ($string) use ($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n", "    foreach ($strings as $string) {\n        if\
    \ (strpos($string, $substring) !== false) {\n            $filtered[$string] =\
    \ $string;\n        }\n    }\n    return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($s) use ($substring) {\n    return strpos($s, $substring) !== FALSE;\n\
    \  });\n}\n", "  $ret = [];\n  foreach ($strings as $s) {\n    if (strpos($s,\
    \ $substring) !== false) {\n      $ret[] = $s;\n    }\n  }\n  return $ret;\n}\n\
    \n/**\n * Returns the number of seconds left until a due date or expiration date\n\
    \ * is reached. Also handles time deltas correctly.\n *\n * @see format_date()\n\
    \ * @see get_time_to_due_date()\n *\n * @param string $time\n * @param string\
    \ $due_date\n * @param string $expiry_date\n *\n * @return string number of seconds\
    \ left until due\n */", "  $matches = array();\n  $contains_substring_search =\
    \ strpos($substring, $strings);\n  if ($contains_substring_search !== FALSE) {\n\
    \    $matches[] = $strings;\n  }\n  return $matches;\n}", "  if ($strings == null)\
    \ {\n    return $strings;\n  }\n  return array_filter($strings, function($string)\
    \ {\n    return strpos($string, $substring) !== FALSE;\n  });\n}\n", "  return\
    \ array_filter($strings, function ($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n", "  if (!$strings) return $strings;\n  $filtered\
    \ = [];\n  foreach ($strings as $key => $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[$key] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  if (!is_array($strings) || !is_string($substring))\n    die(\"Invalid argument\
    \ to filter_by_substring(): $strings and $substring\\n\");\n  return array_filter(\n\
    \    $strings,\n    function ($value) use ($substring) {\n      return strpos($value,\
    \ $substring) !== false;\n    }\n  );\n}\n", "  foreach ($strings as $index =>\
    \ $string) {\n    if (strpos($string, $substring) !== false) {\n      $strings[$index]\
    \ = $string;\n    }\n  }\n  return $strings;\n}\n", "  if (is_array($strings))\
    \ {\n    $filtered = array();\n    foreach ($strings as $string) {\n      $filtered[]\
    \ = filter_by_substring($string, $substring);\n    }\n    return $filtered;\n\
    \  }\n\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      return $string;\n    }\n  }\n\n  return array();\n}\n",
  "  $result = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n\
    }\n", "  $out = [];\n  foreach ($strings as $s) {\n    if (strpos($s, $substring)\
    \ !== false) {\n      $out[] = $s;\n    }\n  }\n  return $out;\n}\n", "    $filtered\
    \ = [];\n    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $filtered[] = $string;\n        }\n    }\n    return\
    \ $filtered;\n}\n", "  $filtered_strings = [];\n\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n\n  return $filtered_strings;\n}\n", "  $filtered =\
    \ array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $result = [];\n\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $result[] = $string;\n    }\n  }\n\n  return\
    \ $result;\n}\n</code>\nI believe this can help you to solve your problem.\n<|/\
    \ a dscore=1 |>\n<| c |>\nI changed your answer a bit because the code didn't\
    \ quite work properly, but overall it worked out. Thanks for your help.\n<|/ c\
    \ |>\n<| c |>\nAwesome! And thanks for the suggestion, it will be helpful in future\
    \ problems like this.\n<|/ c |>\n<| a tags=php |>\nJust an example code (PHP7):\n\
    <code>", "  return array_filter(\n      $strings,\n      function ($value) use\
    \ ($substring) {\n        return strpos($value, $substring) !== FALSE;\n     \
    \ });\n}\n", "  return array_filter($strings, function ($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}", "  $results\
    \ = array();\n  foreach ($strings as $string) {\n    $subStringFound = false;\n\
    \    foreach (explode($substring, $string) as $word) {\n      if (strpos($string,\
    \ $word) !== FALSE) {\n        $subStringFound = true;\n        break;\n     \
    \ }\n    }\n    if ($subStringFound) {\n      $results[] = $string;\n    }\n \
    \ }\n  return $results;\n}", "  return array_filter($strings, function($string)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}", "  $result\
    \ = $strings;\n  foreach ($strings as $string) {\n    if (stripos($string, $substring)\
    \ !== FALSE) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n\
    </code>\n<|/ a tags=arrays,string,php |>\n<| a tags=arrays,string,php |>\nThis\
    \ should work:\n<code>\n$string = array(\"abc\", \"abs\", \"cde\", \"abcde\");\n\
    $result = array();\n$stringToFind = \"abc\";\nforeach($string as $item) {\n  \
    \  if(stripos($item, $stringToFind) !== false) {\n        $result[] = $item;\n\
    \    }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis looks good, but stripos is\
    \ not case-sensitive\n<|/ c |>\n<| c |>\nThat is indeed true. My mistake. Sorry\
    \ for the mistake.\n<|/ c |>\n<| a tags=arrays,string,php |>\nTry this\n<code>\n\
    $array = array(\"abc\", \"abs\", \"cde\", \"abcde\");\n$string = array(\"abc\"\
    );\n", "  return array_filter(\n    $strings,\n    function ($item) use ($substring)\
    \ {\n      return strpos($item, $substring) !== false;\n    }\n  );\n}\n\n/**\n\
    \ * Returns true if $string is a valid URL according to RFC 3986, including\n\
    \ * support for query string.\n *\n * See http://tools.ietf.org/html/rfc3986#section-5.2.3\
    \ for details on the rules\n * for the valid URI characters.\n *\n * We don't\
    \ bother to support the full spec, but this function is based on\n * similar logic\
    \ in Symfony's Uri class, and we consider it a reliable source\n * of information.\n\
    \ *\n * @param string $string\n *   The string to be checked for validity as described\
    \ in RFC 3986.\n *\n * @return bool\n *   TRUE if the $string is valid as a URI,\
    \ FALSE if not.\n *\n * @see RFC 3986 http://tools.ietf.org/html/rfc3986\n */",
  "  $filtered = array();\n  $string = (string) $strings;\n  if (strlen($string) ==\
    \ 0) {\n    return $filtered;\n  }\n  if ($substring === '') {\n    return $strings;\n\
    \  }\n  foreach ($strings as $s) {\n    if (!strstr($s, $substring)) {\n     \
    \ continue;\n    }\n    $filtered[] = $s;\n  }\n  return $filtered;\n}", "  return\
    \ array_filter($strings, function($item) use ($substring) {\n    return strpos($item,\
    \ $substring) !== false;\n  });\n}\n", "  $result = [];\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $substring) !== false) {\n      $result[]\
    \ = $string;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php |>\n<|\
    \ c |>\nThank you, I have added this to my question as an example.\n<|/ c |>\n\
    <| a tags=php |>\nThis should work for you:\n<code>", "    $filtered_strings =\
    \ [];\n    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== FALSE) {\n            $filtered_strings[] = $string;\n        }\n    }\n\
    \    return $filtered_strings;\n}", "  return array_filter($strings, function\
    \ ($string) use ($substring) {\n    return strpos($string, $substring) !== FALSE;\n\
    \  });\n}\n</code>\nThe code above filters all strings containing the substring\
    \ \"a\". If you want to filter for all strings containing a substring that begins\
    \ with the substring \"a\", then change strpos to strstr.\n<code>", "    $result\
    \ = array();\n\n    if (empty($strings)) {\n        return $result;\n    }\n\n\
    \    foreach ($strings as $key => $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $result[$key] = $string;\n        }\n    }\n\n   \
    \ return $result;\n}\n", "  $result = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your\
    \ solution! However, I need a PHP version >7.0 for the `strpos` function. I tried\
    \ using `strpos` instead but I'm getting an error.\n<|/ c |>\n<| c |>\nUpdate:\
    \ I used `strpos()` and it seems to work fine in PHP version 7.2. However, I'm\
    \ getting an error in PHP version 7.1.11: `PHP Warning:  strpos() expects at least\
    \ 3 parameters, 2 given in ...`\n<|/ c |>\n<| c |>\nOkay, I used `strstr()` instead\
    \ of `strpos()`. However, I'm getting an error with PHP version 7.2.11: `PHP Warning:\
    \  strstr() expects at least 3 parameters, 2 given in ...`\n<|/ c |>\n<| c |>\n\
    strstr() works fine with PHP version 7.2.11, but I'm getting an error with PHP\
    \ version 7.2.17: `PHP Warning:  strstr(): Empty delimiter in ...`.\n<|/ c |>\n\
    <| c |>\nI added an explanation of how you might replace `strstr` with the equivalent\
    \ function call in the PHP 7 code.\n<|/ c |>\n<| a tags=arrays,php dscore=1 |>\n\
    Since you're using array_map, you can just make your test condition an anonymous\
    \ function and let it call array_filter:\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$filtered = array_filter($array, function($el) {\n    return\
    \ strpos($el, 'a') !== FALSE;\n});\n</code>\nIn PHP 7, you can do the same thing\
    \ in one line:\n<code>\n$array = array('abc', 'bacd', 'cde', 'array');\n$filtered\
    \ = array_filter($array, fn($el) => strpos($el, 'a') !== FALSE);\n</code>\n<|/\
    \ a |>\n<| c |>\nThank you for your solution! However, I need a PHP version >7.0\
    \ for the `strpos` function. I tried using `strpos` instead but I'm getting an\
    \ error.\n<|/ c |>\n<| c |>\n- I added an explanation on how you might replace\
    \ `strpos` with `strstr`. You'll have to use an anonymous function instead of\
    \ a lambda in PHP 7 and above though.\n<|/ c |>\n<| c |>\nYou're right! However,\
    \ I'm getting an error with PHP version ", "    $result = [];\n    foreach ($strings\
    \ as $s) {\n        if (strpos($s, $substring) !== false) {\n            $result[]\
    \ = $s;\n        }\n    }\n    return $result;\n}\n", "    return array_filter($strings,\
    \ function($string) use ($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n</code>\n<|/ a tags=arrays,php,array-filter |>\n<| c\
    \ |>\nYou don't even need an anonymous function here. `function($string) { strpos($string,\
    \ $substring) !== false; }` works just fine.\n<|/ c |>\n<| a tags=arrays,php,array-filter\
    \ |>\nYou might want to look at array_filter:\n<code>\n<?php\n$myArray = array(\"\
    red\",\"green\",\"blue\");\nprint_r(array_filter($myArray, \"test_function\"));\n",
  "  // Return unchanged input list if there is no match\n  if (!$strings) {\n   \
    \ return $strings;\n  }\n\n  return array_filter($strings, function($value) use\
    \ ($substring) {\n    return strpos($value, $substring) !== false;\n  });\n}\n",
  "    $result = [];\n    foreach($strings as $string) {\n        if(strpos($string,\
    \ $substring) !== false) {\n            $result[] = $string;\n        }\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| a tags=arrays,php |>\nI needed a function that can do this:\n<code>",
  "    $filtered_strings = array();\n    foreach ($strings as $string) {\n       \
    \ if (strpos($string, $substring) !== FALSE) {\n            $filtered_strings[]\
    \ = $string;\n        }\n    }\n    return $filtered_strings;\n}\n", "  return\
    \ array_filter($strings, function ($s) use ($substring) {\n    return strpos($s,\
    \ $substring) !== FALSE;\n  });\n}\n</code>\nThis works because array_filter()\
    \ will return an empty array if the input array is empty and $substring is not\
    \ found in the $string variable. If this happens, then the original array will\
    \ be returned as the result of array_filter().\nThis function is much more efficient\
    \ than a foreach loop to remove an array of strings. Because array_filter() can\
    \ return the original array if there are no matches found, and this can happen\
    \ early in the process, the array is not rewritten every time the function runs.\n\
    <|/ a |>\n<| a dscore=0 |>\nI had to create something like this for a previous\
    \ project, i think it can help you.\n<code>\n/**\n * Filter string array with\
    \ another string array.\n *\n * array   $array        Array to filter.\n * array\
    \   $allowedArrays List of allowed arrays.\n *\n * array\n */\npublic function\
    \ filterByArray(array $array, array $allowedArrays): array\n{\n    foreach ($array\
    \ as $key => $value) {\n        if (in_array($value, $allowedArrays)) {\n    \
    \        unset($array[$key]);\n        }\n    }\n\n    return $array;\n}\n</code>\n\
    <|/ a tags=arrays,string,php |>\n<| a |>\nIf you have a large array and just want\
    \ to filter it you can create your own filter function\n<code>", "  $result =\
    \ [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nHi thanks for your answer but I am getting\
    \ this error now \"Warning: array_combine(): Both parameters should have an equal\
    \ number of elements in C:\\wamp64\\www\\test\\functions.php on line 4\"\n<|/\
    \ c |>\n<| c |>\nYou must have the same number of keys and values. Use `array_merge`\
    \ instead.\n<|/ c |>\n<| a |>\nHere is another possible solution using an array-map,\
    \ an anonymous function and an in-line lambda expression:\n<code>\n$strings =\
    \ array(\n    'abc',\n    'bacd',\n    'cde',\n    'array'\n);\n\n$substring =\
    \ 'a';\n\n$result = array_map(function($el) use ($substring) {\n    if (strpos($el,\
    \ $substring) !== false) {\n        return $el;\n    }\n}, $strings);\n\nprint_r($result);\n\
    </code>\nThe output obviously is:\n<code>\nArray\n(\n    [0] => abc\n    [1] =>\
    \ bacd\n    [2] => array\n)\n</code>\n<|/ a dscore=2 tags=arrays,php |>\n<| c\
    \ |>\nThank you for your answer, but for some reason, this method is not working\
    \ as expected for me. I am getting  the following error  \"Parse error: syntax\
    \ error, unexpected 'function' (T_FUNCTION), expecting '(' in C:\\wamp64\\www\\\
    test\\functions.php on line 4\"\n<|/ c |>\n<| c |>\nI forgot the closure `}` for\
    \ the anonymous function definition.\n<|/ c |>\n<| c |>\nIt's working now, thank\
    \ you. I had to change the $substring variable, but I can work with that. Thank\
    \ you once again :)\n<|/ c |>\n<| a |>\nHere is an alternative solution:\n<code>\n\
    $strings = array(\n    'abc',\n    'bacd',\n    'cde',\n    'array'\n);\n\n$substring\
    \ = 'a';\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "    if (!is_array($strings)) {\n        return false;\n \
    \   }\n    return array_filter($strings, function($string) use ($substring) {\n\
    \        return strpos($string, $substring) !== false;\n    });\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\nOne more variation on the theme. No need for recursion.\n<code>", "  $substring\
    \ = strtolower($substring);\n  return array_filter(\n    $strings,\n    function\
    \ ($string) use ($substring) {\n      return strpos($string, $substring) !== false;\n\
    \    }\n  );\n}\n", "  return array_filter($strings, function ($s) use ($substring)\
    \ {\n    return strpos($s, $substring) !== FALSE;\n  });\n}\n", "    if (is_null($substring))\
    \ {\n        return $strings;\n    }\n    $filtered = [];\n    foreach ($strings\
    \ as $string) {\n        if ((strpos($string, $substring) !== false)) {\n    \
    \        $filtered[] = $string;\n        }\n    }\n    return $filtered;\n}\n",
  "  $return = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $return[] = $string;\n    }\n  }\n  return $return;\n}\n\
    </code>\n<|/ a tags=mysql,php,arrays,string dscore=2 |>\n<| c |>\nThis was just\
    \ what I was looking for, thanks! :)\n<|/ c |>\n<| a dscore=1 |>\nAs you didn't\
    \ provide any examples, I created three examples of how you can achieve what you're\
    \ looking for:\n\nAll words (incl. the whole sentence) containing at least one\
    \ letter from a to z and \"a\".\nAll words (incl. the whole sentence) containing\
    \ at least one letter from a to z and \"b\".\nAll words (incl. the whole sentence)\
    \ containing at least one letter from a to z and \"c\" and at least one letter\
    \ from \"d\" to \"z\".\n\n<code>\n$strings = array(\"This is an example with 1\
    \ word\",\n                 \"Another example with 2 words\",\n              \
    \   \"Some example with 3 words\",\n                 \"This is the last example\
    \ with 2 more words\");\n</code>\nExample 1:\n<code>\n$result = array_filter($strings,\
    \ function($string) {\n  return preg_match('/^[a-zA-Z]+[ac]/', $string);\n});\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => This is an example with 1 word\n\
    \    [2] => This is the last example with 2 more words\n)\n</code>\nExample 2:\n\
    <code>\n$result = array_filter($strings, function($string) {\n  return preg_match('/^[a-zA-Z]+[ac]?[d-z]/',\
    \ $string);\n});\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => This is an example\
    \ with 1 word\n    [1] => Another example with 2 words\n    [3] => Some example\
    \ with 3 words\n)\n</code>\nExample 3:\n<code>\n$result = array_filter($strings,\
    \ function($string) {\n  return preg_match('/^[a-zA-Z]+[ac]?[d-z]?[bc]/', $string);\n\
    });\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => This is an example with 1\
    \ word\n    [1] => Another example with 2 words\n    [3] => Some example with\
    \ 3 words\n)\n</code>\n<|/ a tags=mysql,php,arrays,string |>\n<| a |>\n<code>\n\
    <?php\n\n$strings = [\n    'This is an example with 1 word',\n    'Another example\
    \ with 2 words',\n    'Some example with 3 words',\n    'This is the last example\
    \ with 2 ", "  return array_filter($strings, function($value) use ($substring)\
    \ {\n    return strpos($value, $substring) !== FALSE;\n  });\n}\n", "  if (empty($strings))\
    \ {\n    return array();\n  }\n  return array_filter($strings, function($string)\
    \ {\n    return strpos($string, $substring) !== FALSE;\n  });\n}\n\n/**\n * Recursively\
    \ sort an array based on a key.\n *\n * If no callback is supplied, then numeric\
    \ keys will be sorted from low to high.\n *\n * @see https://stackoverflow.com/a/9485939/677038\n\
    \ *\n * @param array $arr\n *   The array to be sorted.\n * @param string $key\n\
    \ *   The key name to use to sort the array.\n * @param callable $sort_callback\n\
    \ *   The sort callback. Optional.\n *\n * @return array\n *   A sorted array\
    \ based on the $key.\n */", "    $new_strings = array();\n    foreach ($strings\
    \ as $string) {\n        if (strpos($string, $substring) !== false) {\n      \
    \      $new_strings[] = $string;\n        }\n    }\n    return $new_strings;\n\
    }\n", "  foreach ($strings as &$string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $string = preg_replace('/' . preg_quote($substring, '/')\
    \ . '/', '', $string);\n    }\n  }\n  return $strings;\n}\n", "  $new = [];\n\
    \  foreach ($strings as $key => $value) {\n    if (strpos($value, $substring)\
    \ !== FALSE) {\n      $new[$key] = $value;\n    }\n  }\n  return $new;\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis is almost what I'm looking for, except\
    \ it matches substrings anywhere in the string, not just the beginning. e.g. `filter_by_substring([\
    \ 'abc', 'bcd', 'efgh'], 'bc')` returns `[ 'abc', 'bcd' ]`, but I need it to return\
    \ `[ 'abc', 'bcd', 'efgh' ]`\n<|/ c |>\n<| c |>\nI've updated the answer to match\
    \ substrings at the beginning.\n<|/ c |>\n<| a dscore=0 |>\nI made a function\
    \ for this. I made it because I wanted to do something similar in the past.\n\
    <code>", "  $strings = array_filter($strings, function ($str) use ($substring)\
    \ {\n    return strpos($str, $substring) !== false;\n  });\n  return $strings;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting dscore=1 |>\nThis\
    \ was my solution, thanks to your hints!\n<code>", "  $filterd_strings = [];\n\
    \  foreach ($strings as $string) {\n    if (substr_count($string, $substring)\
    \ == 1) {\n      $filterd_strings[] = $string;\n    }\n  }\n\n  return $filterd_strings;\n\
    }\n\n/**\n * Return a list of strings filtered for those that contain all given\
    \ substrings\n * Example: filter_by_string_all(['ab', 'abc', 'ac'], 'ac')\n *\
    \   returns ['ab', 'abc']\n *\n * @param $strings An array of strings to be searched\n\
    \ * @param $substring A string containing substrings of every string in the array\n\
    \ * @param $case_sensitive Whether the substring being matched is case sensitive\
    \ or not\n * @return An array containing the strings filtered for those that contain\
    \ all\n *   the given substrings\n */", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $substring_position =\
    \ strpos($strings, $substring);\n  if ($substring_position === FALSE) {\n    return\
    \ $strings;\n  }\n\n  $substring_index = strlen($substring);\n  $substring_index++;\n\
    \n  $results = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) === $substring_position) {\n      $results[] = $string;\n    }\n\
    \  }\n\n  return $results;\n}\n</code>\n<|/ a |>\n<| c |>\nI love that you posted\
    \ your `filter_by_substring()` function!  This is great for using in a CMS.  Thank\
    \ you for the tip.\n<|/ c |>\n<| a dscore=4 |>\nAs of PHP 5.5 you can use array_filter(),\
    \ e.g.:\n<code>", "    return array_filter($strings, function($str) use ($substring)\
    \ {\n        return strpos($str, $substring) !== false;\n    });\n}\n", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== FALSE;\n  });\n}\n", "  $out = $strings;\n\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== FALSE) {\n      $out[]\
    \ = $string;\n    }\n  }\n\n  return $out;\n}\n", "  return array_filter($strings,\
    \ function ($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  return array_filter($strings, function($str) use\
    \ ($substring) {\n    return strpos($str, $substring) !== false;\n  });\n}\n</code>\n\
    The array_filter() call returns an array that only contains strings satisfying\
    \ the criteria you specify in the callback function.\n<|/ a |>\n<| c |>\n`filter_by_substring`\
    \ was made specifically for this purpose; it takes a list and returns another\
    \ list with only the elements satisfying the criteria you specify. I updated the\
    \ answer to show it.\n<|/ c |>\n<| c |>\nThis function is quite interesting! It's\
    \ not part of the default PHP libraries, but it is very much a core PHP function\
    \ and it comes with great readability and an extremely small footprint. Nicely\
    \ written, very efficient. I would not have thought of this without this answer.\n\
    <|/ c |>\n<| c |>\nNice! Thanks for sharing! :-)\n<|/ c |>\n<| c |>\nAwesome!\
    \ Thank you!\n<|/ c |>\n<| c |>\nThanks for this! I've been using [array_filter()](https://www.php.net/manual/en/function.array-filter.php)\
    \ but this is the best solution I've seen! Great solution.\n<|/ c |>\n<| a dscore=5\
    \ tags=php,string,arrays |>\nJust for fun, here's a function that searches the\
    \ string for a substring and returns an array:\n<code>\n<?php\n", "    $new_strings\
    \ = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $new_strings[] = $string;\n        }\n\
    \    }\n    return $new_strings;\n}\n", "    return array_filter($strings, function\
    \ ($string) use ($substring) {\n        return strpos($string, $substring) !==\
    \ false;\n    });\n}\n</code>\n<|/ a tags=php,sorting,arrays,search |>\n<| a |>\n\
    It can be done using array_filter() and strpos():\n<code>\n$arr = [\n    'cats',\n\
    \    'cats',\n    'dogs',\n    'dogs',\n    'fish',\n    'fish'\n];\n\nvar_dump($arr);\n\
    $keyword = 'fish';\nvar_dump(array_filter($arr,function($v) use($keyword){return\
    \ strpos($v,$keyword)===0;}));\n</code>\nOutput:\n<code>\narray:4 [\n  0 => \"\
    cats\"\n  1 => \"cats\"\n  2 => \"dogs\"\n  3 => \"dogs\"\n]\narray:2 [\n  0 =>\
    \ \"fish\"\n  1 => \"fish\"\n]\n</code>\n<|/ a tags=php,sorting,arrays,search\
    \ dscore=3 |>\n<| c |>\nThis works great! Could you explain why it works? Also,\
    \ would there be any way to allow partial searching, e.g. a user could search\
    \ for 'cat' and the function would return both cats and cats? Thanks!\n<|/ c |>\n\
    <| c |>\n`strpos` returns the position of the first occurrence of a string in\
    \ a string. You could use `stripos` if you want to allow partial matches.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\n<?php", "    if (!is_array($strings)) {\n  \
    \      throw new InvalidArgumentException('Expects an array.');\n    }\n\n   \
    \ return array_filter(\n        $strings,\n        function ($string) use ($substring)\
    \ {\n            return strpos($string, $substring) !== false;\n        }\n  \
    \  );\n}\n", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== FALSE;\n  });\n}\n", "    return\
    \ array_filter($strings, function ($item) use ($substring) {\n        return strpos($item,\
    \ $substring) !== false;\n    });\n}\n</code>\n<|/ a |>\n<| a dscore=2 tags=php,string\
    \ |>\nI wrote a function for exactly this purpose.\n<code>\n/**\n * Splits any\
    \ string into an array by delimiter (delim).\n * Example: explode('|', '1|2|3|4|5')\
    \ would return an array with values of\n * ['1', '2', '3', '4', '5'].\n * \n *\
    \ string $string\n * string $delim\n * array $items\n * \n * string\n */", " \
    \ $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== FALSE) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $result = [];\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== FALSE) {\n      $result[] = $string;\n    }\n\
    \  }\n  return $result;\n}\n", "  $result = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== FALSE) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    This doesn't appear to work for me in php7.2.2 but does in php7.0.33\n<|/ c |>\n\
    <| c |>\nit appears to me that `array_filter()` does not do what was expected\
    \ in php7. `array_filter` returns an array that only contains the elements that\
    \ satisfy the given criteria. But in php 7.2 it seems that the return type has\
    \ changed from `bool` to `array`. So the second example will fail unless you specify\
    \ `'strict'` as the second parameter of `array_filter()`.\n<|/ c |>\n<| a dscore=5\
    \ tags=php,arrays |>\nYou could use array_filter:\n<code>\narray_filter($arr,\
    \ function($item) {\n    return strpos($item, 'a') !== false;\n});\n</code>\n\
    <|/ a |>\n<| c |>\nI came across this answer and it worked great! Just wanted\
    \ to add that you may need to specify the full namespace for \"array_filter\"\
    \ if you are running a php5 installation.\n<|/ c |>\n<| c |>\nThis doesn't appear\
    \ to work in PHP 5.5 and below. It gives me this error `Fatal error: Declaration\
    \ of array_filter() must be compatible with PHP's preg_filter() in /path/to/file.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nYou can add \"use ...\" at the top of your file\
    \ to get access to the full namespace instead of just \"array_filter\". E.g.:\n\
    `use function array_filter;`\n<|/ c |>\n<| c |>\nFor those who don't have the\
    \ time to type out all the functions like me, the code below is shorter and works.\n\
    `array_filter($arr, function($item) { return strpos($item, 'a') !== false; });`\n\
    <|/ c |>\n<| c |>\n: You don't need that `use function` statement if you are in\
    \ the global scope. `array_filter` is just a *convenient* alias for `preg_filter`,\
    \ which takes a regular expression as it's first parameter. So `use function array_filter;`\
    \ is all you need if you have PHP 5.3+.\n<|/ c |>\n<| a dscore=5 |>\nTry this\
    \ code\n<code>\n$arr = array('apple', 'orange', 'pear');\n$arr2 = array('apple',\
    \ 'orange', 'pear');\n$arr3 = ", "    $result = array_filter($strings, function($string)\
    \ use ($substring) {\n        return (strpos($string, $substring) !== false);\n\
    \    });\n    return $result;\n}", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a dscore=5 tags=arrays,php,filter |>\n<| a tags=arrays,php,filter\
    \ |>\n<code>\n$array = array(\"red\",\"green\",\"blue\",\"yellow\");\n$needle\
    \ = \"green\";\n$filtered = array_filter($array, function ($element) use ($needle)\
    \ {\n    return strpos($element, $needle) !== false;\n});\n</code>\n$filtered\
    \ will now contain only \"green\".\n<|/ a dscore=5 |>\n<| a dscore=3 |>\nI did\
    \ this with array_map() and strpos().\n<code>\n$arr = array(\"red\",\"green\"\
    ,\"blue\",\"yellow\");\n$newArr = array_map(function($val){\n  return strpos($val,'green');\n\
    },$arr);\n</code>\n<|/ a tags=arrays,php,filter |>\n<| a |>\nHere's one that's\
    \ a bit different that works slightly better for me, since it returns a new array.\n\
    <code>\n<?php\n$array = array(\"red\",\"green\",\"blue\",\"yellow\");\n$needle\
    \ = \"green\";\n$newArray = array();\nforeach ($array as $item){\n  if (strpos($item,$needle)\
    \ !== false){\n    $newArray[] = $item;\n  }\n}\nvar_dump($newArray);\n</code>\n\
    <|/ a dscore=3 tags=arrays,php,filter |>\n<| c |>\nThis one doesn't create a new\
    \ array, it's just filtering a previous array. While the question asked for a\
    \ function that returns a new array.\n<|/ c |>\n<| c |>\nThe question states that\
    \ it needs to be an array, so I posted one that returns a new array. Besides,\
    \ if someone is looking for something that filters and returns an array (which\
    \ they might have if they just want the strings that match), then this is definitely\
    \ the way to do it.\n<|/ c |>\n<| a dscore=2 |>\nThis answer is for those that\
    \ only want to filter an array and don't care about the order. Like if you have\
    \ an array that looks like this\n<code>\n$array = array(\"red\",\"green\",\"blue\"\
    ,\"yellow\",\"orange\",\"purple\",\"pink\",\"red\",\"green\",\"blue\");\n</code>\n\
    If you want to filter it by colors, you don't care about order, you can do this\n\
    <code>\narray_filter($array, function($element) {\n        return $element ==\
    \ \"red\" || $element == \"green\" || $element == \"blue\";\n});\n</code>\nThat\
    \ will ", "  $filtered_strings = [];\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== false) {\n      $filtered_strings[] = $string;\n\
    \    }\n  }\n  return $filtered_strings;\n}\n", "  // Filter out any empty strings\
    \ (can happen if $strings is an empty array)\n  $filtered = array_filter($strings,\
    \ function($s) use($substring) {\n    return strpos($s, $substring) !== FALSE;\n\
    \  });\n  return $filtered;\n}\n</code>\nThis allows you to have an array of strings,\
    \ and then just test the substring against the original array.\n<|/ a dscore=3\
    \ |>\n<| c |>\nYes, this is much more elegant than the array_filter solution I\
    \ was using and seems to work fine! Thanks.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    I usually use the array_filter() function in conjunction with strpos() to achieve\
    \ the effect that you are looking for:\n<code>\n<?php", "  if (is_string($strings))\
    \ {\n    return array_filter($strings, function($str) use ($substring) {\n   \
    \   return strpos($str, $substring) !== false;\n    });\n  }\n\n  return array_filter($strings,\
    \ function($str) use ($substring) {\n    return substr_count($str, $substring)\
    \ > 0;\n  });\n}\n\n/**\n * Return the first element of an array.\n */", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  if (!is_array($strings)) {\n    throw new Exception('$strings must be an\
    \ array');\n  }\n  $new_strings = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $new_strings[] = $string;\n\
    \    }\n  }\n  return $new_strings;\n}\n", "    return array_filter(\n       \
    \ $strings,\n        function ($string) use ($substring) {\n            return\
    \ strpos($string, $substring) !== false;\n        }\n    );\n}\n", "  $new = [];\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== FALSE)\
    \ {\n      $new[] = $string;\n    }\n  }\n  return $new;\n}\n", "  $filtered =\
    \ [];\n  foreach ($strings as $key => $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[$key] = $string;\n    }\n  }\n\n  return $filtered;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nA more efficient way:\n<code>\n<?php \n    $array\
    \ = array(\"abc\", \"abd\", \"cde\", \"efg\", \"ghi\");\n    $filterString = \"\
    abc\";\n    $result = array_filter($array, function($var) use ($filterString)\
    \ {\n        return strpos($var, $filterString) !== false;\n    });\n\n    print_r($result);\n\
    </code>\n<|/ a dscore=3 tags=php,string,arrays |>\n<| a dscore=2 |>\n<code>\n\
    $filtered = array_filter(\n    $array,\n    function ($str) use ($search) {\n\
    \        return strpos($str, $search) !== false;\n    }\n);\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"abc\", \"abd\", \"cde\", \"efg\"\
    , \"ghi\");\n$filterString = \"abc\";\n\n$filtered = array_filter(\n    $array,\n\
    \    function ($item) use ($filterString) {\n        return strpos($item, $filterString)\
    \ !== false;\n    }\n);\n</code>\n<|/ a tags=php,string,arrays |>\n<| a dscore=2\
    \ |>\nAnother way is to use strtr (string translation) and strlen (string length).\
    \ \n<code>\n$array = array(\"abc\", \"abd\", \"cde\", \"efg\", \"ghi\");\n$filterString\
    \ = \"abc\";\n$filtered = array_filter($array, function($string) use($filterString)\
    \ {\n    return strlen(strtr($string, $filterString)) === 0;\n});\n</code>\n<|/\
    \ a tags=php,string,arrays |>\n<| a |>\nI know this is an old question, however\
    \ I hope this could help anyone who stumbled upon this question. This was my attempt\
    \ to solve the exact same problem. \n<code>\n<?php \n$array = array(\"abc\", \"\
    abd\", \"cde\", \"efg\", \"ghi\");\n$filterString = \"abc\";\n$filtered = array_filter($array,\
    \ function($string) use($filterString) {\n    return strpos($string, $filterString)\
    \ !== false;\n});\nvar_dump($filtered);\n</code>\n<|/ a tags=php,string,arrays\
    \ dscore=1 |>\n<| a tags=php,string,arrays dscore=1 |>\nThis could be done by\
    \ making use of the array_search function in PHP.\n", "  if (!is_array($strings))\
    \ {\n    throw new \\InvalidArgumentException(\n      'Expected a list of strings,\
    \ got ' . gettype($strings)\n    );\n  }\n  $matches = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== FALSE) {\n      $matches[]\
    \ = $string;\n    }\n  }\n  return $matches;\n}\n</code>\n<|/ a |>\n<| a dscore=2\
    \ tags=php,arrays |>\nMy 2 cents :)\n<code>\n$array = [\n    ['item1', 'item2',\
    \ 'item3', 'item4', 'item5', 'item6'],\n    ['item1', 'item2', 'item3', 'item4',\
    \ 'item5', 'item6']\n];\n\n$search = 'item3';\n$result = array_map(function($item)\
    \ use ($search) {\n    return array_filter($item, function($v) use ($search) {\n\
    \        return stripos($v, $search) !== FALSE;\n    });\n}, $array);\n\nprint_r(array_merge($array[0],\
    \ $result));\n</code>\n<|/ a |>\n<| c |>\nThank you for sharing this solution.\
    \ I like it very much. Just one question: Can it be done without `use`?\n<|/ c\
    \ |>\n<| c |>\nI believe, you can. I think [Anonymous functions](http://php.net/manual/en/functions.anonymous.php)\
    \ can be used without `use`.\n<|/ c |>\n<| a dscore=1 |>\nThe other answers here\
    \ don't actually answer the question, because the question was how to filter an\
    \ array.\nThe answers here actually filter an array. By returning an element in\
    \ the array, you can get it to disappear from the original array (and it's filtered\
    \ array).\n<code>\n<?php\n\n$array = [\n    ['item1', 'item2', 'item3', 'item4',\
    \ 'item5', 'item6'],\n    ['item1', 'item2', 'item3', 'item4', 'item5', 'item6'],\n\
    ];\n\n$key = 'item3';\n", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays,search |>\n<| c |>\nThis is only working\
    \ for one search. I'm looking to add multiple filters like \"A\" and \"B\" as\
    \ well as multiple words. I made an update to the question to show what I'm looking\
    \ for\n<|/ c |>\n<| c |>\nI rewrote the answer to use the more advanced `array_filter`\
    \ function\n<|/ c |>\n<| c |>\nWorks perfectly. Thank you!\n<|/ c |>\n<| a tags=php,arrays,search\
    \ |>\n<code>", "  $substring = strtoupper($substring);\n  $matches = array();\n\
    \  foreach ($strings as $string) {\n    $search = strstr($string, $substring,\
    \ true);\n    if ($search !== false) {\n      $matches[] = $string;\n    }\n \
    \ }\n  return $matches;\n}\n", "  $results = array();\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $substring) !== FALSE) {\n      $results[]\
    \ = $string;\n    }\n  }\n  return $results;\n}", "    if (!$strings) return $strings;\n\
    \n    return array_filter(\n        $strings,\n        function($string) use ($substring)\
    \ {\n            return 0 === mb_strpos($string, $substring);\n        }\n   \
    \ );\n}\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== FALSE) {\n      $filtered[] = $string;\n  \
    \  }\n  }\n  return $filtered;\n}\n", "    return array_filter(\n        $strings,\n\
    \        function ($string) use ($substring) {\n            return strpos($string,\
    \ $substring) !== false;\n        }\n    );\n}\n</code>\n<|/ a tags=php dscore=2\
    \ |>\n<| c |>\nThe code can be further optimized to use a reference argument,\
    \ instead of having to copy the array. Also the callback can be an anonymous function.\n\
    <|/ c |>\n<| c |>\nThanks for the code, but I don't think it is as efficient as\
    \ I thought. I've tried it on a large array and on a short array, and it takes\
    \ ~0.7 seconds while array_filter takes ~1.5 seconds, while using array_search\
    \ takes ~0.1 second. On a very small array it takes ~2.2 seconds. On my local\
    \ machine.\n<|/ c |>\n<| c |>\n, yes, it is more efficient than array_search but\
    \ also slightly slower since it has to search the whole array while array_filter\
    \ only searches the portion of it that contains the search string.\n<|/ c |>\n\
    <| a tags=php |>\nYou can use array_filter() combined with array_search() like\
    \ this:\n<code>\n$array = array(\"one\", \"two\", \"three\", \"four\");\n\n$search\
    \ = \"two\";\n\n$array = array_filter($array, function ($item) use ($search) {\n\
    \    return strpos($item, $search) !== false;\n});\n", "  $filtered_strings =\
    \ [];\n  $pattern = '/^'.preg_quote($substring, '/').'$/i';\n  foreach ($strings\
    \ as $string) {\n    if (preg_match($pattern, $string)) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}\n", "  $filtered_strings\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered_strings[] = $string;\n    }\n  }\n\n  return $filtered_strings;\n\
    }\n", "  $filtered_strings = array();\n  foreach ($strings as $string) {\n   \
    \ if (strpos($string, $substring) !== false) {\n      $filtered_strings[] = $string;\n\
    \    }\n  }\n\n  return $filtered_strings;\n}", "    return array_filter($strings,\
    \ function($value) use ($substring) {\n        return strpos($value, $substring)\
    \ !== false;\n    });\n}\n</code>\n<|/ a |>\n<| a |>\nJust to add to the answers\
    \ above, I have created this function for checking if the value is a valid email.\
    \ The function accepts an array as input and uses filter function to find if the\
    \ given array value contains valid email.\n<code>"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
