name: HumanEval_99_closest_integer
language: php
results:
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5ml2t0r.php:23\n\
    Stack trace:\n#0 /tmp/tmpk5ml2t0r.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpk5ml2t0r.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $intVal = (int) $value;\n  if ($value <= $intVal) {\n    return $intVal;\n\
    \  }\n  $difference = $value - $intVal;\n  $absDifference = abs($difference);\n\
    \  if ($absDifference < 0.5) {\n    return $intVal;\n  }\n  if ($absDifference\
    \ > 0.5) {\n    return $intVal + 1;\n  }\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8gtb4qn.php:36\n\
    Stack trace:\n#0 /tmp/tmpt8gtb4qn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpt8gtb4qn.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value); // Make sure the value is a number\n    $delta = $value - floor($value);\
    \ // Find how far from zero the value is\n    return $value === 0 ? 0 : round($value\
    \ + $delta / 2); // Round away from zero\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpai85dlfa.php:26\n\
    Stack trace:\n#0 /tmp/tmpai85dlfa.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpai85dlfa.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ * 10) / 10;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nThe example code\
    \ you provided has some issues. You can't define a function outside of a function.\
    \ You should either use a closure or define it as a regular function. If you are\
    \ going to use an anonymous function, you can't use the `use ()` statement to\
    \ import namespaces.\n<|/ c |>\n<| a dscore=0 tags=php |>\nFor anyone that stumbles\
    \ across this thread and wants a more general solution:\n<code>\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzcacimp3.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $int = (int)\
    \ $value;\n    $dist = abs($int - $int);\n\n    // If the numbers are equidistant,\
    \ return either one\n    if ($dist == 0) {\n        return $int;\n    }\n\n  \
    \  $divisor = pow(10, ceil(log10($dist)));\n\n    return (int) round($dist / $divisor)\
    \ * $divisor;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcj777y1z.php:34\n\
    Stack trace:\n#0 /tmp/tmpcj777y1z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcj777y1z.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest_integer\
    \ = $value;\n\n    $decimal_places = strlen($value) - strlen(floor($value));\n\
    \    $decimal_places = max(0, $decimal_places);\n\n    while($decimal_places >\
    \ 0) {\n        $fraction = $decimal_places % 1;\n        $closest_integer = floor($value)\
    \ + ($fraction * floor($value));\n        $decimal_places -= 1;\n    }\n\n   \
    \ return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpznht_928.php:35\n\
    Stack trace:\n#0 /tmp/tmpznht_928.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpznht_928.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Split value\
    \ into two pieces around decimal point.\n  $value_parts = explode('.', $value);\n\
    \  $int_part = $value_parts[0];\n  $decimal_part = $value_parts[1];\n  // Convert\
    \ the decimal part to integer and remove decimal point from\n  // the integer\
    \ part.\n  $int_part = intval($decimal_part);\n  $decimal_part = substr($decimal_part,\
    \ 1);\n  // Get the absolute value of the difference between the integer part\
    \ and\n  // the decimal part.\n  $diff = $int_part - $decimal_part;\n  // If the\
    \ difference is negative return integer part.\n  if ($diff < 0) {\n    return\
    \ $int_part;\n  }\n  // If the difference is positive, return decimal part plus\
    \ one.\n  if ($diff > 0) {\n    return $decimal_part + 1;\n  }\n  // If they are\
    \ equidistant, round away from zero.\n  return round($int_part);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphb8y79_6.php:44\n\
    Stack trace:\n#0 /tmp/tmphb8y79_6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmphb8y79_6.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Get an\
    \ array of all integer values\n    $int_values = array_map('intval', str_split($value));\n\
    \    // Find the two numbers in $int_values that is closest to $value\n    $closest\
    \ = null;\n    $smallest_diff = null;\n    foreach ($int_values as $i => $int)\
    \ {\n        // Get the difference between the current $int and the value we are\n\
    \        // checking\n        $diff = $int - $value;\n        // If this is the\
    \ smallest difference\n        if ($smallest_diff === null || $diff < $smallest_diff)\
    \ {\n            // Store the smallest difference in the next value\n        \
    \    $smallest_diff = $diff;\n            // Store the number we're currently\
    \ checking\n            $closest = $int;\n        }\n    }\n    // If the difference\
    \ between the two closest values is smaller than our\n    // smallest difference\
    \ we found before, we need to round up\n    return ($smallest_diff === null) ?\
    \ $closest : $closest + 1;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkltinn50.php:42\n\
    Stack trace:\n#0 /tmp/tmpkltinn50.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkltinn50.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int = $value;\n\
    \  $round = round($value);\n  if ($int == $round) {\n    $round = round($int,\
    \ 1);\n  }\n  return $round;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9j26vti.php:29\n\
    Stack trace:\n#0 /tmp/tmpu9j26vti.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpu9j26vti.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return ceil(abs($value));\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6c1c3aqr.php:24\n\
    Stack trace:\n#0 /tmp/tmp6c1c3aqr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6c1c3aqr.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Extract\
    \ the value as a float.\n  $value = floatval($value);\n  // Create a set of possible\
    \ candidates to choose from.\n  $candidates = array(\n    (intval($value)),\n\
    \    (intval($value * 10)),\n    (intval($value * 100)),\n    (intval($value *\
    \ 1000)),\n    (intval($value * 10000)),\n    (intval($value * 100000)),\n   \
    \ (intval($value * 1000000)),\n  );\n  // Get the closest candidate.\n  $closest\
    \ = min(\n    array_map(\n      function ($candidate) {\n        // Return the\
    \ closest integer.\n        return intval($candidate);\n      },\n      $candidates\n\
    \    ),\n    function ($a, $b) {\n      // Return the difference in two integers,\
    \ or the absolute difference (if\n      // one is negative).\n      return abs($a\
    \ - $b);\n    }\n  );\n  // Return the closest integer.\n  return $closest;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI added an example for rounding away from\
    \ zero.\n<|/ c |>\n<| c |>\nThank you for this! I used it for a project where\
    \ I needed to round values up if the value is between a specific range. Worked\
    \ perfectly.\n<|/ c |>\n<| a tags=math,php,integer dscore=2 |>\nIf you don't care\
    \ about the decimal places (i.e. you are happy with a rounded integer value, as\
    \ is the case with the \"floor\" and \"ceil\" functions), you can also do this\
    \ with string manipulation:\n<code>\n$val = \"10.99\";\n$val = number_format($val,\
    \ 0, '', '');\nvar_dump($val); // string(2) \"11\"\n</code>\nThis does not handle\
    \ negative values, though.\n<|/ a |>\n<| a tags=math,php,integer |>\nIf you want\
    \ to round a number up or down, you can use this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsz9pgv33.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  global $int_tolerance;\n\
    \  if (is_numeric($value)) {\n    $value = str_replace(array('.','-'),array('',''),$value);\n\
    \    $value = (int)$value;\n    $min = $value - $int_tolerance;\n    $max = $value\
    \ + $int_tolerance;\n    if ($min == $max) {\n      return $value;\n    } else\
    \ if ($min > $max) {\n      $min = $value + $int_tolerance;\n    }\n    $delta\
    \ = $max - $min;\n    $int = $min + round($delta * $int_tolerance);\n    if ($delta\
    \ < $int_tolerance) {\n      return $int;\n    } else {\n      return $max;\n\
    \    }\n  }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_uge0ng.php:43\n\
    Stack trace:\n#0 /tmp/tmpt_uge0ng.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpt_uge0ng.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $diff = abs($value\
    \ - $value);\n  $closest = $diff;\n  if ($diff == 0) {\n    return $value;\n \
    \ }\n  $closest = $diff - 1;\n  if ($closest < 0) {\n    $closest = abs($closest\
    \ - 1);\n  }\n  return $value;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0k6umm3n.php:33\n\
    Stack trace:\n#0 /tmp/tmp0k6umm3n.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0k6umm3n.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // TODO:\
    \ Implement Function\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlkb5on8.php:24\n\
    Stack trace:\n#0 /tmp/tmpnlkb5on8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnlkb5on8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round((abs($value)\
    \ - abs($value - round($value))) * 100) / 100;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nHi thanks for the answer but I don't really see how I apply this to the\
    \ problem at hand. Can you please elaborate? Thanks.\n<|/ c |>\n<| c |>\nSo the\
    \ problem is this - you have two numbers (two input fields), let's say they are\
    \ 15 and 10. Now I want the program to find the closest integer to the given number.\
    \ If they are equidistant, the one that is closest to zero should be chosen. So\
    \ it should give 15 back as that is the closest to zero.\n<|/ c |>\n<| c |>\n\
    That's exactly what my code does.\n<|/ c |>\n<| c |>\nOh yeah sorry, I didnt see\
    \ you had that in there. So I guess your first code block will still work? Is\
    \ that it?\n<|/ c |>\n<| c |>\nYes, the code from your first block is still correct,\
    \ just take out the if condition that checks whether the input is zero (you already\
    \ know it's not, so there's no need to check it).\n<|/ c |>\n<| a dscore=1 |>\n\
    I did something like this with Python a while back. You can do it fairly easily\
    \ in PHP as well, although the code is more verbose.\n<code>\n<?php\n    $a=\"\
    15\";\n    $b=\"10\";\n    $min=0;\n    $max=100;\n    while($a<$max){\n     \
    \   $c=$a+($max-$min)/2;\n        if($c==$b){\n            $d=1;\n        }else{\n\
    \            $d=0;\n        }\n        if($a==$b){\n            $e=1;\n      \
    \  }else{\n            $e=0;\n        }\n        if($c>$a&&$c<$b){\n         \
    \   $f=$c;\n        }elseif($c<$a&&$c>$b){\n            $f=$b;\n        }else{\n\
    \            $f=$a;\n        }\n        if($d>$e&&$d<$f){\n            $min=$c;\n\
    \        }elseif($e>$d&&$e<$f){\n            $min=$b;\n        }else{\n      \
    \      $min=$a;\n        }\n        if($e>$d&&$e<$f){\n            $max=$c;\n\
    \        }elseif($d>$e&&$d<$f){\n            $max=$b;\n        }else{\n      \
    \      $max=$a;\n        }\n    }\n    echo $min;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr8n2v9ui.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest_number\
    \ = null;\n    $closest_integer = null;\n    $closest_float = null;\n    $parts\
    \ = explode('.', $value);\n    $parts = array_filter($parts);\n    $parts = array_map(function\
    \ ($part) { return intval($part); }, $parts);\n    $parts = array_map('round',\
    \ $parts);\n    $parts = array_map('abs', $parts);\n    $parts = array_filter($parts);\n\
    \    if (count($parts) > 1) {\n        $parts = array_merge($parts, array_fill(1,\
    \ count($parts) - 1, $parts[count($parts) - 1]));\n    }\n    $parts = array_map(function\
    \ ($part) { return abs($part); }, $parts);\n    if (count($parts) > 1) {\n   \
    \     $sorted_parts = array_slice($parts, 1, array_sum($parts) - 1);\n    } else\
    \ {\n        $sorted_parts = $parts;\n    }\n    foreach ($sorted_parts as $part)\
    \ {\n        if ($closest_integer === null) {\n            if ($part <= $sorted_parts[0])\
    \ {\n                $closest_integer = $part;\n                $closest_number\
    \ = $value;\n            }\n        } else if ($part >= $closest_integer) {\n\
    \            if ($part < $closest_integer) {\n                $closest_integer\
    \ = $part;\n                $closest_number = $value;\n            }\n       \
    \ } else if ($part > $closest_integer) {\n            if ($part < $closest_integer)\
    \ {\n                $closest_integer = $part;\n                $closest_number\
    \ = $value;\n            }\n        }\n    }\n    if (is_numeric($closest_integer)\
    \ && is_numeric($closest_number)) {\n        $closest_number = $closest_float\
    \ = $closest_integer;\n    }\n    return $closest_number;\n}\n</code>\n<|/ a tags=php,math,rounding\
    \ |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9c7wy09m.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return ceil(log10($value))\
    \ + floor((log10($value) - floor(log10($value))) * 2);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjj6632_p.php:23\n\
    Stack trace:\n#0 /tmp/tmpjj6632_p.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjj6632_p.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return ceil($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xja68lb.php:24\n\
    Stack trace:\n#0 /tmp/tmp9xja68lb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9xja68lb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value,\
    \ -1);\n}\n</code>\nExample #2\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe17lro4v.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = abs(floatval($value));\n\
    \    $diff = floor($num);\n    if ($diff == $num) {\n        return $diff;\n \
    \   }\n    return $diff > $num ? $num - 1 : $num + 1;\n}\n\n/**\n * Converts the\
    \ given string to upper case.\n *\n * @param string $str\n * @return string\n\
    \ */\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ga_wpwd.php:35\n\
    Stack trace:\n#0 /tmp/tmp8ga_wpwd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8ga_wpwd.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    if (is_numeric($value))\
    \ {\n        // We can't use floor or ceil, otherwise we can get erroneous answers.\n\
    \        $value = round($value);\n        // If it is equidistant, round away\
    \ from zero\n        // e.g. 10.5 -> 10 and 9.5 -> 10\n        if (abs($value\
    \ - $value%1) < 0.01) {\n            $value -= 1;\n        }\n        return $value;\n\
    \    }\n    else {\n        return null;\n    }\n}\n</code>\n<|/ a |>\n<| a |>\n\
    I just found out that you can use round() for that purpose\n<code>\n$number =\
    \ round(3.499, 1);\n</code>\n<|/ a dscore=4 tags=floating-point,php |>\n<| c |>\n\
    but this doesn't work for negative numbers, e.g. round(-3.499,1) is -3\n<|/ c\
    \ |>\n<| a dscore=3 |>\n<code>\n<?php\n$number = 5.5;\n$newNumber = round($number);\n\
    echo $newNumber;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpntfgh5jq.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if ($value\
    \ === \"0\") {\n    return 0;\n  }\n\n  $floatValue = floatval($value);\n  $intValue\
    \ = (int) $floatValue;\n\n  if ($floatValue - $intValue > 0.5) {\n    return $intValue;\n\
    \  }\n\n  return $floatValue;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4vot782.php:35\n\
    Stack trace:\n#0 /tmp/tmpj4vot782.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpj4vot782.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the input to a float because we need to know if it\n  // is a number or string\n\
    \  $value = floatval($value);\n\n  // If the number is equal to the smaller or\
    \ larger integer\n  // nearest the number we're trying to convert then this means\n\
    \  // the number we're trying to convert is the integer itself.\n  if ($value\
    \ == intval($value)) {\n    return $value;\n  }\n\n  // If the number is an integer\
    \ multiple of the smaller integer\n  // nearest to the number we're trying to\
    \ convert then round that\n  // number away from zero.\n  if ($value % intval($value)\
    \ == 0) {\n    return intval($value);\n  }\n\n  // If the number is equal to the\
    \ smaller or larger integer\n  // nearest the number we're trying to convert then\
    \ this means\n  // the number we're trying to convert is the smaller integer.\n\
    \  $closest_smaller_integer = intval($value);\n\n  // If the number is an integer\
    \ multiple of the smaller integer\n  // nearest to the number we're trying to\
    \ convert then round that\n  // number away from zero.\n  if ($value % $closest_smaller_integer\
    \ == 0) {\n    return $closest_smaller_integer;\n  }\n\n  // We didn't find any\
    \ integer that equidistantly divides the\n  // number we're trying to convert.\
    \ Return whatever integer we\n  // found is closest to zero.\n  return $closest_smaller_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1kr8lcyz.php:57\n\
    Stack trace:\n#0 /tmp/tmp1kr8lcyz.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1kr8lcyz.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $integer =\
    \ floor($value);\n  $distance = $value - $integer;\n  if ($distance < 0) {\n \
    \   $distance = -$distance;\n    $integer = -$integer;\n  }\n  $distance = $distance\
    \ * 10000;\n  if ($distance < $integer) {\n    $integer = $integer;\n  }\n  return\
    \ $integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_fn53z3.php:34\n\
    Stack trace:\n#0 /tmp/tmpz_fn53z3.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz_fn53z3.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int_value\
    \ = intval($value);\n  $closest = $int_value;\n  $differences = array();\n  foreach\
    \ (array(0, $int_value) as $difference) {\n    if (abs($int_value - $difference)\
    \ > $closest) {\n      $closest = $difference;\n    }\n    $differences[] = $difference;\n\
    \  }\n\n  if ($int_value - $closest) {\n    // The number was equidistant from\
    \ two integers, round it away from zero.\n    $closest++;\n  }\n  return $closest;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprgap0jfe.php:39\n\
    Stack trace:\n#0 /tmp/tmprgap0jfe.php(45): test()\n#1 {main}\n  thrown in /tmp/tmprgap0jfe.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return intval(round($value));\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $integer =\
    \ intval($value);\n  $closest = intval(floor($value));\n\n  if (($integer - $closest)\
    \ === ($integer - $closest)) {\n    return $closest;\n  }\n  return $integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61mceigo.php:31\n\
    Stack trace:\n#0 /tmp/tmp61mceigo.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp61mceigo.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the value\
    \ is an integer, return it.\n  $value = (int)$value;\n\n  // If the value is negative,\
    \ subtract it.\n  if ($value < 0) {\n    $value = abs($value);\n    $value -=\
    \ 1;\n  }\n\n  // If the value is negative, subtract it.\n  if ($value < 0) {\n\
    \    return 0;\n  }\n\n  // Loop through the array of integers between 0 and the\
    \ value.\n  for ($i = -ceil($value); $i < ceil($value); $i++) {\n    // If the\
    \ number is equidistant from two integers, round it away from zero.\n    if (abs($i)\
    \ === abs($value - $i)) {\n      $i = $i + 1;\n    }\n  }\n\n  return $value;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1voy6cur.php:47\n\
    Stack trace:\n#0 /tmp/tmp1voy6cur.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1voy6cur.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // We need\
    \ to round the value away from zero so that it can compare\n  // to another number\
    \ in the range of integers without going over.\n  $value = round($value);\n\n\
    \  // If the value is not an integer, then just return it\n  if (!is_int($value))\
    \ {\n    return $value;\n  }\n\n  // Initialize the current min to zero\n  $min\
    \ = 0;\n\n  // For every number in the list, see what the current min is\n  //\
    \ and update the min if it is not closer than the current min\n  for ($i = 1;\
    \ $i <= count($values); $i++) {\n    $current = $values[$i];\n    if (abs($value\
    \ - $current) < $min) {\n      $min = $current;\n    }\n  }\n\n  // Return the\
    \ current min\n  return $min;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpca31t3si.php:46\n\
    Stack trace:\n#0 /tmp/tmpca31t3si.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpca31t3si.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if (abs($value\
    \ - round($value)) < 1) {\n    return round($value);\n  }\n  $closest = $value;\n\
    \  $closestIndex = -1;\n  $closestDiff = PHP_INT_MAX;\n\n  for ($i = 0; $i < PHP_INT_MAX;\
    \ ++$i) {\n    $newValue = $i + 1;\n    $newDiff = abs($value - $newValue);\n\
    \    if ($newDiff < $closestDiff) {\n      $closestDiff = $newDiff;\n      $closest\
    \ = $newValue;\n      $closestIndex = $i;\n    }\n  }\n  return $closest;\n}\n\
    </code>\n<|/ a tags=integer,rounding,php |>\n<| c |>\nThis is an awesome solution,\
    \ but it didn't round up correctly for me. This answer did, though!\n<|/ c |>\n\
    <| a tags=integer,rounding,php |>\nTry this one, it's working:\n<code>\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwia9mlj0.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round(($value\
    \ - floor($value)) + 0.5, 0);\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbc__iz1h.php:23\n\
    Stack trace:\n#0 /tmp/tmpbc__iz1h.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbc__iz1h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Get the\
    \ integer part\n  $int_part = floor($value);\n  // If the integer part is equidistant\
    \ from two integers, round it away from zero.\n  if (abs($int_part - floor($int_part))\
    \ < abs($int_part - ceil($int_part))) {\n    $int_part += round($int_part >= $int_part\
    \ ? -.5 : .5);\n  }\n  // Return it\n  return $int_part;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1yy83k6.php:31\n\
    Stack trace:\n#0 /tmp/tmpg1yy83k6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpg1yy83k6.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = (int)\
    \ $value;\n\n  // If the number is already an integer, just cast it into an integer\
    \ and return\n  if ($num === (int) $num) {\n    return (int) $num;\n  }\n\n  $difference\
    \ = $num - round($num);\n\n  if ($difference == 0) {\n    return $num;\n  }\n\n\
    \  $num_half = (int) ($num / 2);\n\n  if ($difference > 0 && $num_half > $num)\
    \ {\n    return $num;\n  } elseif ($difference < 0 && $num_half < $num) {\n  \
    \  return $num;\n  } else {\n    return $num_half;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2amuznq.php:46\n\
    Stack trace:\n#0 /tmp/tmpb2amuznq.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpb2amuznq.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $parts =\
    \ explode(\".\", $value);\n    $closest = pow(2, 53) - 1;\n    foreach ($parts\
    \ as $part) {\n        $closest = min(abs($closest), abs($part));\n    }\n   \
    \ return $closest;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2av6orx.php:30\n\
    Stack trace:\n#0 /tmp/tmpj2av6orx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpj2av6orx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $lower =\
    \ floor($value);\n    $upper = ceil($value);\n    $diff = $value - $lower;\n \
    \   if (abs($lower) > abs($upper)) {\n        $upper = $lower;\n    }\n    return\
    \ $lower + ($diff > 0 ? $diff : -$diff);\n}\n</code>\n<|/ a dscore=1 tags=php,math,integer\
    \ |>\n<| a tags=php,math,integer |>\n<code>\n<?php\n$values=array(12,25,35,41,49);\n\
    $results=array();\nforeach($values as $key=>$value){\n    if($value<$results[count($results)-1]){\n\
    \        $results[]=$value;\n    }\n    if($value>$results[count($results)-1]){\n\
    \        $results[count($results)-1]=$value;\n    }\n}\nprint_r($results);\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn93zvwkh.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Split\
    \ string by commas\n    $numbers = explode(\",\", $value);\n    $closest_integer\
    \ = null;\n    $min = null;\n    foreach ($numbers as $number) {\n        // Convert\
    \ string to a number\n        $number = intval($number);\n        if ($min ===\
    \ null || $number < $min) {\n            $min = $number;\n        }\n        if\
    \ ($closest_integer === null || $number > $closest_integer) {\n            $closest_integer\
    \ = $number;\n        }\n    }\n    return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5stvyss.php:38\n\
    Stack trace:\n#0 /tmp/tmpb5stvyss.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpb5stvyss.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6cdghnl.php:23\n\
    Stack trace:\n#0 /tmp/tmpi6cdghnl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpi6cdghnl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$closest =\
    \ null;\n\tif ($value > 0) {\n\t\t$closest = $value;\n\t} elseif ($value < 0)\
    \ {\n\t\t$closest = -$value;\n\t} elseif ($value == 0) {\n\t\t$closest = $value;\n\
    \t} else {\n\t\t$closest = 0;\n\t}\n\tif ($closest == 0) {\n\t\t$closest = 1;\n\
    \t}\n\tif ($closest < 0.5) {\n\t\t$closest++;\n\t}\n\tif ($closest > 10) {\n\t\
    \t$closest++;\n\t}\n\treturn $closest;\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpheicde6h.php:43\n\
    Stack trace:\n#0 /tmp/tmpheicde6h.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpheicde6h.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $distance\
    \ = $value - floor(abs($value));\n    if ($distance > 0 && $distance < 0.5) {\n\
    \        return floor($value);\n    }\n    return ceil($value);\n}\n</code>\n\
    <|/ a tags=php |>\n<| a tags=php |>\nYou can use this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi02nfn0r.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int = intval($value);\n\
    \  if ($int == $value) {\n    return $int;\n  }\n  $fraction = round(($value -\
    \ $int) * pow(10, strlen($int)));\n  return $int + $fraction;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtuun_zj.php:29\n\
    Stack trace:\n#0 /tmp/tmpjtuun_zj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjtuun_zj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    if ( $value\
    \ == \"\") {\n        $value = \"0\";\n    }\n\n    // Convert all strings to\
    \ numbers.\n    $value = preg_replace(\"/[^0-9.\\-]/\", '', $value);\n    $value\
    \ = floatval($value);\n\n    // Get smallest and largest possible numbers\n  \
    \  $int_max = pow(10, ceil(log($value, 10)));\n    $int_min = -pow(10, ceil(log($value,\
    \ 10)));\n\n    // Return closest integer if value is equidistant from two integers\n\
    \    $int_delta = $int_max - $int_min;\n    if (abs($value-$int_min) <= abs($value-$int_max)/2)\
    \ {\n        return round($int_min + $int_delta);\n    } else {\n        return\
    \ round($int_max - $int_delta);\n    }\n}\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpab5hk5ua.php:41\n\
    Stack trace:\n#0 /tmp/tmpab5hk5ua.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpab5hk5ua.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  foreach ([0.0, 1.0, 10.0, 100.0, 1000.0] as $distance) {\n    $result = $value\
    \ + $distance;\n    if ($value == $result) return $result;\n  }\n  return $value;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9tf85x8.php:29\n\
    Stack trace:\n#0 /tmp/tmph9tf85x8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph9tf85x8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $number = $value;\n\
    \  $low = $high = $number = round($number);\n  while ($number != $low) {\n   \
    \ $mid = $low + floor(($high - $low) / 2);\n    if ($mid < $number && $mid !=\
    \ $low) {\n      $low = $mid;\n    } else if ($mid > $number && $mid != $high)\
    \ {\n      $high = $mid;\n    } else {\n      $low = $mid;\n      $high = $number;\n\
    \    }\n    $number = round($high);\n  }\n  return $low;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7rvpb13.php:37\n\
    Stack trace:\n#0 /tmp/tmpj7rvpb13.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpj7rvpb13.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7auqwrbu.php:23\n\
    Stack trace:\n#0 /tmp/tmp7auqwrbu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7auqwrbu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is not an integer, just return it\n  if (!is_numeric($value)) {\n   \
    \ return $value;\n  }\n\n  // Use a lookup table to find the closest integer (from\
    \ zero)\n  // using the difference between the given number and all integers\n\
    \  $lookup = array_flip(range(0, abs($value)));\n\n  // Get the difference between\
    \ the given number and all integers\n  // and find the closest integer in the\
    \ lookup table\n  $closest = abs($value - array_keys($lookup)) + 1;\n\n  // Return\
    \ the value of the closest integer in the lookup table\n  return $lookup[$closest];\n\
    }\n</code>\n<|/ a tags=php,number-formatting,decimal |>\n<| c |>\nThanks, this\
    \ helped me a lot.\n<|/ c |>\n<| a |>\nHere is another solution:\n<code>\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_71y8qya.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your implementation here\n    $result = 0;\n    $numbers = explode('.', $value);\n\
    \    foreach ($numbers as $key => $number) {\n        $result -= intval($number);\n\
    \    }\n    return $result + 1;\n}\n</code>\n<|/ a dscore=0 tags=regex,php |>\n\
    <| a |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjv1hw_2u.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Don't try\
    \ to validate an empty value\n  if (empty($value)) {\n    throw new \\InvalidArgumentException(\"\
    Cannot use 'null' as a value.\");\n  }\n  // Return an empty string if the value\
    \ is null, or if it's not numeric\n  if (!is_numeric($value)) {\n    return '';\n\
    \  }\n\n  // Find the difference between the value and the next integer up to\n\
    \  // four decimal places\n  $diff = $value - round($value, 4);\n  // If we're\
    \ at the last integer and there's a remainder of 0\n  // (i.e. the remainder of\
    \ division by four is 0), then return the\n  // integer.\n  return ($diff % 1\
    \ == 0) ? $value : round($value, 4);\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdicy2i8b.php:39\n\
    Stack trace:\n#0 /tmp/tmpdicy2i8b.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpdicy2i8b.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Test input\
    \ for errors.\n  if (!is_numeric($value)) {\n    throw new Exception('Value '\
    \ . $value . ' is not numeric');\n  }\n  $value = abs($value);\n  if ($value <\
    \ 5) {\n    return floor($value);\n  }\n  else {\n    return ceil($value);\n \
    \ }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqq26b15f.php:34\n\
    Stack trace:\n#0 /tmp/tmpqq26b15f.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqq26b15f.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  return $value < 1.0 ? round($value) : floor($value);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabp83rz5.php:24\n\
    Stack trace:\n#0 /tmp/tmpabp83rz5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpabp83rz5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\
    \ // make sure $value is an int\n  \n  $min_val = 0;\n  $max_val = 0;\n  if ($value\
    \ < 0)\n  {\n    $max_val = $value + 10;\n    $min_val = $value - 10;\n  }\n \
    \ else\n  {\n    $max_val = $value + 10;\n    $min_val = $value - 10;\n  }\n\n\
    \  // Make sure that we don't round the value up\n  if ($value == 0) return 0;\n\
    \  if ($value > 0)\n  {\n    // If the number has gone too far to the left of\
    \ the decimal point, \n    // we need to round up instead of down\n    if ($value\
    \ >= $min_val) return round($value) + 10; \n    return round($value) - 10;\n \
    \ }\n  else\n  {\n    // If the number has gone too far to the right of the decimal\
    \ point, \n    // we need to round down instead of up\n    if ($value <= $max_val)\
    \ return round($value) - 10; \n    return round($value);\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6p1wiir.php:54\n\
    Stack trace:\n#0 /tmp/tmp_6p1wiir.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp_6p1wiir.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int_val =\
    \ (int) $value;\n  $max_int = (int) floor($int_val);\n  if ($int_val - $max_int\
    \ < 1) {\n    return $int_val;\n  }\n  return $max_int;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa53_kjud.php:30\n\
    Stack trace:\n#0 /tmp/tmpa53_kjud.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa53_kjud.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is equidistant from two integers, return the one\n  // that is farthest\
    \ from zero.\n  if ( abs($value - round($value)) < abs($value - round(-$value))\
    \ )\n    return round($value);\n  return round(-$value);\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq8bi5tij.php:28\n\
    Stack trace:\n#0 /tmp/tmpq8bi5tij.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq8bi5tij.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int_value\
    \ = floatval($value);\n  if ($int_value == 0) {\n    return 0;\n  }\n\n  // $int_value\
    \ must be an integer at this point\n  $int_diff_from_minus_one = $int_value -\
    \ 1;\n  $int_diff_from_minus_two = $int_diff_from_minus_one - 1;\n\n  // If the\
    \ difference between the two integers is less than or equal\n  // to the value\
    \ itself, return it.\n  if ($int_diff_from_minus_one <= $int_diff_from_minus_two)\
    \ {\n    return $int_value;\n  }\n\n  return round($int_diff_from_minus_one);\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8xf04shi.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = (int)\
    \ $value;\n  $step = 0;\n  $closest = ($num + $step) - $step;\n  while (abs($num\
    \ - $closest) < $step) {\n    $step++;\n    $closest = ($num + $step) - $step;\n\
    \  }\n  return $closest;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwifuztm8.php:32\n\
    Stack trace:\n#0 /tmp/tmpwifuztm8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwifuztm8.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $parts = explode(\"\
    .\", $value);\n  $difference = abs($parts[0] - $parts[1]);\n\n  return max($parts[0],\
    \ $parts[1]) == $parts[0] ? $parts[0] : $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdodt82xo.php:27\n\
    Stack trace:\n#0 /tmp/tmpdodt82xo.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdodt82xo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  list($number)\
    \ = explode('.', $value);\n  return ceil($number);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez67pvac.php:24\n\
    Stack trace:\n#0 /tmp/tmpez67pvac.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpez67pvac.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $closest_integer\
    \ = $value;\n  for ($i = 1; $i <= floor(strlen($value)/2); $i++) {\n    $difference\
    \ = abs($value - $closest_integer);\n    if ($difference > $closest_integer) {\n\
    \      $closest_integer = $i;\n    }\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp283d6sze.php:31\n\
    Stack trace:\n#0 /tmp/tmp283d6sze.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp283d6sze.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $min = abs($value);\n\
    \    $result = $min;\n\n    while ($min > 0 && !is_int($result)) {\n        --$min;\n\
    \        $result = $min + 1;\n    }\n\n    return $result;\n}\n</code>\nThis code\
    \ uses recursion to get the closest integers to the number you pass into it.\n\
    <|/ a |>\n<| c |>\nI thought of doing this, except I didn't want to use loops.\
    \ I'll probably end up doing this, thanks!\n<|/ c |>\n<| c |>\nA loop is pretty\
    \ much the only way to do this. There is no way to get around the need to loop\
    \ through all of the numbers until you find one that works.\n<|/ c |>\n<| c |>\n\
    Thanks for the additional info. I'm still new to PHP so I was trying to avoid\
    \ loops.\n<|/ c |>\n<| c |>\nI added a recursive function. It might be better\
    \ than a loop as you don't need to iterate through all of the numbers just to\
    \ find the answer.\n<|/ c |>\n<| c |>\nGreat answer but I think you should also\
    \ mention the use of `floor` instead of `ceil`.\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp31xgscx7.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  global $rounding_mode;\n\
    \  \n  if ( ! is_numeric($value) ) {\n    throw new InvalidArgumentException(\"\
    Must be numeric\");\n  }\n  \n  if ( $rounding_mode === ROUND_FLOOR ) {\n    $closest\
    \ = (int) floor($value);\n    if ( $closest < 0 ) {\n      $closest = $closest\
    \ + 1;\n    }\n  } else {\n    $closest = (int) ceil($value);\n    if ( $closest\
    \ > 0 ) {\n      $closest = $closest - 1;\n    }\n  }\n  \n  return $closest;\n\
    }\n\n/**\n * Calculates the difference between the provided number and the closest\
    \ integer\n * to it. If the provided number is equidistant from two integers,\
    \ round\n * it away from zero.\n * \n * @param  string $value \n * @return int\
    \  \n * @throws InvalidArgumentException\n */\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant ROUND_FLOOR - assumed 'ROUND_FLOOR'\
    \ (this will throw an Error in a future version of PHP) in /tmp/tmpok1bhshk.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpok1bhshk.php:51\n\
    Stack trace:\n#0 /tmp/tmpok1bhshk.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpok1bhshk.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Find the\
    \ two closest integers to the given value.\n  $closest1 = closest_integer($value,\
    \ 1);\n  $closest2 = closest_integer($value, -1);\n  // See if they need rounding\
    \ towards zero.\n  if ($value < 0) {\n    // If the value was negative, we should\
    \ round towards zero.\n    return min($closest1, $closest2);\n  }\n  if ($closest1\
    \ != $closest2) {\n    // If the given value isn't equidistant, return the larger\
    \ one.\n    return $closest1 > $closest2 ? $closest1 : $closest2;\n  }\n  // If\
    \ the given value is equidistant, return the smaller one.\n  return $closest1\
    \ < $closest2 ? $closest1 : $closest2;\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  list($whole,\
    \ ) = explode('.', $value);\n  list($integer, ) = explode('-', $whole);\n  //\
    \ round the value up so we get the nearest integer if there are two\n  // or three\
    \ numbers\n  $integer = round($integer, 0, PHP_ROUND_HALF_UP);\n  // round the\
    \ whole number down so we get the farthest integer if we\n  // only have a one\
    \ number\n  $whole = round($whole, 0, PHP_ROUND_HALF_DOWN);\n  // subtract the\
    \ two to get our result\n  return $integer - ($whole - $integer);\n}\n</code>\n\
    <|/ a dscore=1 tags=integer,math,php,rounding,string |>\n<| c |>\n`number_format()`\
    \ is not rounding. It's just converting a number to a string and then back to\
    \ a number again. This is not what the OP is looking for. He wants to find out\
    \ which is the nearest number to another number.\n<|/ c |>\n<| c |>\nYeah, sorry,\
    \ I meant `round()` not `number_format()`. But the OP has since updated the question\
    \ to include rounding, so I've updated my answer to take that into account\n<|/\
    \ c |>\n<| c |>\nYeah that is it! I updated my answer with that information also\n\
    <|/ c |>\n<| a dscore=1 |>\nThe first thing I thought of: round the number down\
    \ and compare it to the rounded down number. Something like:\n<code>\n$val = \"\
    14.5\";\n$valRoundedDown = round($val);\n\nif($val < $valRoundedDown) {\n    echo\
    \ \"Number is smaller than rounded down.\";\n} elseif($val > $valRoundedDown)\
    \ {\n    echo \"Number is greater than rounded down.\";\n} else {\n    echo \"\
    Number is exactly rounded down.\";\n}\n</code>\n<|/ a tags=integer,math,php,rounding,string\
    \ |>\n<| a dscore=1 tags=integer,math,php,rounding,string |>\nThis was my solution,\
    \ for rounding decimals up to two decimal places:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkm8isdjg.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $integer\
    \ = ceil($value);\n    if ($integer == $value) {\n        return $integer;\n \
    \   }\n    return $integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5u49hch6.php:28\n\
    Stack trace:\n#0 /tmp/tmp5u49hch6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5u49hch6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if ($value\
    \ < 0.0) {\n    return floor($value);\n  }\n  $closest_integer = $value;\n  $closest_integer\
    \ = floor($closest_integer);\n  if ($closest_integer == $value) {\n    return\
    \ $value;\n  }\n  foreach (range(1, $closest_integer) as $integer) {\n    if (abs($value\
    \ % $integer) < abs($closest_integer % $integer)) {\n      $closest_integer =\
    \ $integer;\n    }\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ze72vx1.php:37\n\
    Stack trace:\n#0 /tmp/tmp2ze72vx1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2ze72vx1.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ / 0.1) * 0.1;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpje5pcab2.php:23\n\
    Stack trace:\n#0 /tmp/tmpje5pcab2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpje5pcab2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $number =\
    \ floor($value);\n    $distance = $value - $number;\n    if ($distance < 0.5)\
    \ {\n        $distance += 0.5;\n    }\n    return $number + $distance;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=2 |>\nIt depends on the rounding you want. floor()\
    \ and ceil() will round the number down if it's greater or equal than the value\
    \ you asked, and up if it's lesser or equal than the value asked. \n<code>\n<?php\n\
    $a = 8; // 8 is greater\n$b = 7; // 8 is lesser\nvar_dump(floor($a)); // outputs\
    \ 8\nvar_dump(ceil($a)); // outputs 9\nvar_dump($a > $b); // outputs true\nvar_dump($a\
    \ < $b); // outputs false\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn7044c9u.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value/abs($value))\
    \ * abs($value);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4l9qa71r.php:24\n\
    Stack trace:\n#0 /tmp/tmp4l9qa71r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4l9qa71r.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  if ($value >= abs($value % 1000)) {\n    return ceil($value);\n  }\n  return\
    \ floor($value);\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2yzpg3n.php:27\n\
    Stack trace:\n#0 /tmp/tmpe2yzpg3n.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpe2yzpg3n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $difference\
    \ = abs($value - $value);\n  if ($difference == 0) {\n    return 0;\n  }\n  return\
    \ min($difference, round($difference, 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zg0k8h9.php:28\n\
    Stack trace:\n#0 /tmp/tmp2zg0k8h9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2zg0k8h9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $rounded_value\
    \ = round($value);\n  if ($rounded_value == $value) $rounded_value++;\n  return\
    \ $rounded_value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yxgxie9.php:26\n\
    Stack trace:\n#0 /tmp/tmp_yxgxie9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_yxgxie9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Return\
    \ the closest integer that is smaller than the value.\n    $closest_integer =\
    \ $value;\n    $closest_distance  = abs($value - $closest_integer);\n    for ($x\
    \ = $closest_integer; $x <= $value; $x++) {\n        $distance  = abs($value -\
    \ $x);\n        if ($distance < $closest_distance) {\n            $closest_integer\
    \ = $x;\n            $closest_distance = $distance;\n        }\n    }\n    return\
    \ $closest_integer;\n}\n</code>\n<|/ a tags=php,rounding |>\n<| a tags=php,rounding\
    \ |>\nThe round() function does not always round up. \n<code>\n$num = ceil($num);\n\
    </code>\nWill return ceil(num) rounded up\n<|/ a dscore=1 |>\n<| c |>\n`ceil()`\
    \ will always round up. `floor()` is different. If `5` is given to `floor()` the\
    \ result is `5`, while for `ceil()` the result is `6`.\n<|/ c |>\n<| c |>\nYes,\
    \ I got confused because I was using it in a while loop and for some reason it\
    \ was rounding up every other number that was above 10.\n<|/ c |>\n<| a tags=php,rounding\
    \ dscore=0 |>\n<code>\n<?php\n$num = 42.5;\necho ceil($num); // 43.0\necho floor($num);\
    \ // 42.0\necho round($num); // 43.0\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptzjb54ii.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Split the\
    \ string into an integer and a decimal.\n  $parts = explode('.', $value);\n  $value\
    \ = $parts[0];\n  $decimal = $parts[1];\n  if ($value === '0' || $value === '')\
    \ {\n    return 0;\n  }\n  if ($decimal == '') {\n    $decimal = '0';\n  }\n \
    \ // If no decimal exists, return integer.\n  if ($decimal === '0') {\n    return\
    \ $value;\n  }\n  // If decimal is 0, return integer.\n  if ($decimal === '1')\
    \ {\n    return $value;\n  }\n  // Get the decimal value as a decimal number.\n\
    \  $decimal = str_replace('.', '', $decimal);\n  // If the decimal is negative,\
    \ subtract it from the number.\n  if ($decimal[0] === '-') {\n    $value = $value\
    \ - $decimal;\n    $decimal = '0';\n  }\n  // Add up the individual values and\
    \ divide by the decimal.\n  $sum = 0;\n  for ($i = 0; $i < strlen($decimal); $i++)\
    \ {\n    $sum += $value[$i] * pow(10, strlen($decimal) - $i - 1);\n  }\n  return\
    \ $sum / $decimal;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_0o0jfi.php:54\n\
    Stack trace:\n#0 /tmp/tmpd_0o0jfi.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpd_0o0jfi.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $ratio = $value\
    \ - floor($value);\n  $closest_integer = $value + ceil($ratio);\n\n  if ($closest_integer\
    \ < 0) {\n    $closest_integer = $closest_integer * -1;\n  }\n\n  return $closest_integer;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nWorks like a charm. Thanks. :)\n<|/ c\
    \ |>\n<| c |>\nI love you. Thanks a lot for the idea!\n<|/ c |>\n<| c |>\nBeautiful\
    \ solution!\n<|/ c |>\n<| c |>\nA lot simpler than the accepted answer.  Nicely\
    \ done!\n<|/ c |>\n<| c |>\nWorks very well for me when trying to implement a\
    \ function to get rid of the fractional part.\n<|/ c |>\n<| a tags=php,math |>\n\
    This simple solution to find closest number to zero is correct only for integers,\
    \ and when there is no exact solution (for example when it is negative and there\
    \ is no integer before it). \nThe following is a PHP version of the code above:\n\
    <code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnr116ev0.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    // Round away from zero.\n    $value = floor($value);\n  \
    \  // If value is negative, subtract one.\n    if ($value < 0) {\n        $value\
    \ = $value * -1;\n    }\n    return $value;\n}\n\n/**\n * A function to return\
    \ the correct value for 'time'.\n *\n * @param string $time\n *  The time value\
    \ to translate.\n *\n * @return string\n */\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbhhxzfj.php:39\n\
    Stack trace:\n#0 /tmp/tmprbhhxzfj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprbhhxzfj.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Return null\
    \ if $value is equal to null\n  if ($value === null) {\n    return null;\n  }\n\
    \n  // Return null if $value is not a string\n  if (!is_string($value)) {\n  \
    \  return null;\n  }\n\n  // Remove the $ and . characters\n  $value = preg_replace('/[^0-9\\\
    .]/', '', $value);\n\n  // Remove leading zeros\n  $value = ltrim($value, '0');\n\
    \n  // If the string is empty, return null\n  if ($value === '') {\n    return\
    \ null;\n  }\n\n  // Convert the string to an array of integers\n  $ints = explode('.',\
    \ $value);\n\n  // Return null if there are no integers\n  if (count($ints) ===\
    \ 0) {\n    return null;\n  }\n\n  // Sort the array of integers\n  natsort($ints);\n\
    \n  // If there is only one integer left, return it\n  if (count($ints) === 1)\
    \ {\n    return $ints[0];\n  }\n\n  // Calculate the difference between the two\
    \ numbers\n  $diff = $ints[1] - $ints[0];\n\n  // If the difference is negative,\
    \ return the smallest integer\n  if ($diff < 0) {\n    return $ints[0];\n  }\n\
    \n  // If the difference is positive, return the largest integer\n  return $ints[1];\n\
    }\nadd_filter('excerpt_length', 'custom_excerpt_length', 999);\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function add_filter()\
    \ in /tmp/tmp9ggzmqym.php:64\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp9ggzmqym.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest_integer\
    \ = 0;\n    $nearest_integer = 1;\n\n    foreach ($number as $key => $char) {\n\
    \        if ($char == '.') {\n            if ($number[$key - 1] == '.') {\n  \
    \              $nearest_integer = $closest_integer;\n                $closest_integer\
    \ = $key;\n            } elseif ($number[$key + 1] == '.') {\n               \
    \ $nearest_integer = $key;\n                $closest_integer = $key + 1;\n   \
    \         } else {\n                $nearest_integer = $key;\n               \
    \ $closest_integer = $key + 1;\n            }\n        }\n    }\n\n    return\
    \ $nearest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpl3h7ungh.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3h7ungh.php:42\n\
    Stack trace:\n#0 /tmp/tmpl3h7ungh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl3h7ungh.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $difference\
    \ = abs($value);\n  $closest = round($difference);\n  if ($difference == $closest)\
    \ {\n    return $value;\n  }\n  $next = $closest - 1;\n  return $next\n    ? array($value,\
    \ $next)\n    : $next;\n}\n</code>\n<|/ a tags=math,php dscore=1 |>\n<| c |>\n\
    Can I use this in php? or what should I do? Thanks.\n<|/ c |>\n<| a dscore=0 tags=math,php\
    \ |>\nI recently did a project where I was working with PHP and I was working\
    \ on a formula to work out a total cost of a service item which was dependent\
    \ on the number of units in stock of the product. The formula I used was:\n$total\
    \ = ($unitsInStock * $unitPrice) + (($unitsInStock + 1) * $serviceCost)\nThe above\
    \ formula was my initial formula which I found to be incorrect.\nThen I went ahead\
    \ and changed the formula to this:\n$total = ($unitsInStock * $unitPrice) + (($unitsInStock\
    \ - 1) * $serviceCost)\nThis was my new formula which I ended up using after a\
    \ couple of hours fiddling around. Hopefully this helps someone else out.\n<|/\
    \ a |>\n<| a tags=math,php |>\nI like my solution a bit more elegant than others:\n\
    <code>\n$total = ($unitsInStock * $unitPrice) + (($unitsInStock - 1) * $serviceCost);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$a=$unitsInStock\
    \ * $unitPrice;\n$b=$unitsInStock - 1;\n$total=$a+($b*$serviceCost);\n</code>\n\
    <|/ a tags=math,php |>\n<| a dscore=0 |>\nIf your $unitsInStock is always less\
    \ than $unitPrice, you can use a formula:\n<code>\n$total = $unitsInStock * $unitPrice\
    \ + ($unitsInStock - 1) * $serviceCost;\n</code>\n<|/ a tags=math,php |>\n<| c\
    \ |>\nHe said in his question \"If $unitsInStock is always less than $unitPrice\"\
    . He also said that he already have a $serviceCost.\n<|/ c |>\n<| c |>\nAh, missed\
    \ that.  However, if $unitsInStock is always less than $unitPrice, why would he\
    \ say \"$unitsInStock is always less than $unitPrice\" ?\n<|/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp147e70xz.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $decimal_places = strlen((string)$value);\n\
    \    $decimal_places_rev = strlen((string)$closest_integer);\n    if ($decimal_places\
    \ > $decimal_places_rev) {\n        $closest_integer = floor($value);\n    }\n\
    \    elseif ($decimal_places < $decimal_places_rev) {\n        $closest_integer\
    \ = ceil($value);\n    }\n    return $closest_integer;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI don't get the `strlen` part, you do `ceil` or `floor` on `$value`\
    \ anyway... And why would you use `strlen` on `$closest_integer`?\n<|/ c |>\n\
    <| c |>\nThis doesn't work. `closest_integer(\"15\")` returns `15`.\n<|/ c |>\n\
    <| c |>\nYes, `15` is the correct answer, but `closest_integer(\"15.3\")` returns\
    \ `15` as well.\n<|/ c |>\n<| c |>\n: That's because `15.3` is equidistant from\
    \ `15`. You should round towards zero and compare the integer value of `$closest_integer`\
    \ to the integer value of `$value`.\n<|/ c |>\n<| c |>\n: Sorry, my mistake. See\
    \ updated answer.\n<|/ c |>\n<| a dscore=2 tags=php,math |>\nI suggest you use\
    \ ceil($a) and floor($a) if you want it to be \"rounded\" to the nearest integer\
    \ instead of \"truncated\" to the nearest integer.\n<code>\n<?php\n$number = 6.5;\n\
    \n$ceil = ceil($number);\n$ceil === 6 // true\n\n$ceil = ceil($number);\n$ceil\
    \ === 7 // false\n\n$floor = floor($number);\n$floor === 6 // true\n\n$floor =\
    \ floor($number);\n$floor === 7 // true\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpanel299t.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $diff = $value\
    \ + abs(floor($value));\n  if ($diff >= abs($value - ceil($value))) {\n    return\
    \ floor($value);\n  }\n  return ceil($value);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\nThe most straightforward way is to use a simple loop to determine\
    \ the closest integer to your target number while incrementing by one.  When you\
    \ reach the target number, break out of the loop and return the value.\nIf you\
    \ only want to handle positive numbers, you'll have to check if the target number\
    \ is less than the value you're trying to return.  If so, you will need to return\
    \ an appropriate value that can represent negative numbers also.\n<|/ a tags=integer,php\
    \ |>\n<| c |>\nThat's a solution but I wanted to ask if there's a simpler way\
    \ of doing it. I tried thinking about it but I just can't come up with anything.\n\
    <|/ c |>\n<| c |>\n- No.  There is no \"simple\" way of doing it.  It's just math.\
    \  I feel your pain.\n<|/ c |>\n<| c |>\nNo I meant something simpler like some\
    \ PHP function that would solve it. But I think I'll go with this and mark your\
    \ answer as correct since it seems to be the simplest and easiest solution. Thanks\
    \ for your time.\n<|/ c |>\n<| c |>\n- Yeah, it makes sense to keep things simple\
    \ when it comes to things like this.  It doesn't look too complicated either to\
    \ me.\n<|/ c |>\n<| a |>\nThis would work for you:\n<code>\n<?php\n$num = array();\n\
    $num = range(1,51);\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpugczhjvd.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest\
    \ = null;\n\n    // Convert the value to a float and check that it is a number.\n\
    \    $floatValue = floatval($value);\n    if (!is_numeric($floatValue)) {\n  \
    \      // Not a number!\n        return null;\n    }\n\n    // Get two closest\
    \ integers.\n    $closestInteger1 = round($floatValue - ($floatValue % 1));\n\
    \    $closestInteger2 = round($floatValue - ($floatValue % 1.0001));\n\n    if\
    \ ($closestInteger1 > $closestInteger2) {\n        // Closer than the second closest\
    \ integer.\n        $closest = $closestInteger1;\n    } else {\n        // Closer\
    \ than the third closest integer.\n        $closest = $closestInteger2;\n    }\n\
    \n    return $closest;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpappiyd4v.php:44\n\
    Stack trace:\n#0 /tmp/tmpappiyd4v.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpappiyd4v.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the value\
    \ is an integer, just return the value\n  if (is_int($value)) {\n    return $value;\n\
    \  }\n  // If the value is negative, return the negative of the closest integer\n\
    \  if ($value < 0) {\n    return -closest_integer(abs($value));\n  }\n  // If\
    \ the value is equidistant from two integers, round it away from zero.\n  // This\
    \ effectively rounds up numbers that are equidistant from zero.\n  if ($value\
    \ % 1 === 0) {\n    return floor($value) + 1;\n  }\n  // Otherwise, round the\
    \ value up\n  return ceil($value);\n}\n</code>\nAnd here is the code to find the\
    \ closest integer from a set of arrays of numbers:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb43d1ho6.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = preg_replace('/[^0-9]/',\
    \ '', $value);\n  $values = explode('.', $value);\n  $closest = abs($values[0]);\n\
    \  foreach ($values as $k => $v) {\n    if ($v > $closest) {\n      $closest =\
    \ $v;\n    }\n  }\n  return $closest;\n}\n\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcg5grvu.php:33\n\
    Stack trace:\n#0 /tmp/tmplcg5grvu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplcg5grvu.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Get the\
    \ distance between the two closest integers.\n    $closest_integer1 = closest_integer($value);\n\
    \    $closest_integer2 = closest_integer($value);\n\n    // Get the distance between\
    \ the two closest integers.\n    $closest_integer1_2 = closest_integer($value\
    \ . \".0\");\n    $closest_integer2_2 = closest_integer($value . \"0\");\n\n \
    \   // Get the difference in absolute values\n    $difference = abs($closest_integer1\
    \ - $closest_integer2);\n\n    // Get the difference in absolute values\n    $difference\
    \ = abs($closest_integer1_2 - $closest_integer2_2);\n\n    // If the difference\
    \ is negative, return the smaller integer.\n    if($difference < 0) {\n      \
    \  return $closest_integer1;\n    } else {\n        return $closest_integer2;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$closest =\
    \ null;\n\t$diff = PHP_INT_MAX;\n\tforeach(explode('.', $value) as $part) {\n\t\
    \t$diff = (int)$part - (int)$closest;\n\t\tif($diff) {\n\t\t\tbreak;\n\t\t}\n\t\
    \t$closest = (int)$part;\n\t}\n\tif(abs($diff) > 0.5) {\n\t\t$closest = (int)$closest\
    \ + ((int)$diff * 0.5);\n\t}\n\treturn $closest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p8hhztn.php:36\n\
    Stack trace:\n#0 /tmp/tmp0p8hhztn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0p8hhztn.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Your code\
    \ here\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0zftcey.php:23\n\
    Stack trace:\n#0 /tmp/tmpw0zftcey.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpw0zftcey.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    if (is_numeric($value))\
    \ {\n        // Convert the string to a number\n        $value = floatval($value);\n\
    \n        // If the number is equidistant from two integers, round it away from\
    \ zero.\n        if (abs($value - round($value)) < abs($value - floor($value)))\
    \ {\n            $value = round($value);\n        }\n\n        return intval($value);\n\
    \    }\n\n    return $value;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php |>\n\
    <code>\n$input = intval('1.23');\n$output = ($input + 0.5);\n</code>\nOr, for\
    \ negative numbers:\n<code>\n$input = -intval('1.23');\n$output = ($input - 0.5);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nIt's not guaranteed that `intval` returns\
    \ a positive integer. Negative numbers are also positive.\n<|/ c |>\n<| c |>\n\
    That's why I've mentioned \"for negative numbers\". I've updated my answer.\n\
    <|/ c |>\n<| c |>\nThe OP also wants integers to be rounded up to the next integer.\
    \ That's why I didn't downvote you ;)\n<|/ c |>\n<| c |>\nIt's not guaranteed\
    \ that `intval` returns a positive integer. Negative numbers are also positive.\n\
    <|/ c |>\n<| c |>\nI wasn't downvoting you, but if negative numbers are allowed,\
    \ your solution won't work.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$value = '-15.3';\n\
    $value = preg_replace('/\\D+/', '', $value);\n$value = $value + 0;\necho $value;\n\
    </code>\nOutput\n<code>\n-15\n</code>\n<|/ a tags=php |>\n<| a dscore=1 |>\nUse\
    \ this one:\n<code>\n$value = '-15.3';\n$value = intval($value) + 0;\necho $value;\
    \ // -15\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>\n$val = '-15.3';\n\
    $val = str_replace(\",\",\"\",$val);\n$val = intval($val) + 0;\necho $val;\n</code>\n\
    <|/ a tags=php |>\n<| a dscore=0 |>\n<code>\n$value = -15.3;\n$value = str_replace(',',\
    \ '', $value);\n$value = intval($value) + 0;\necho $value;\n</code>\n<|/ a tags=php\
    \ |>\n<| a tags=php |>\n<code>\n$value = \nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdalpnvoj.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Split value\
    \ by non-digits and strip leading/trailing non-digits.\n  // This assumes there\
    \ is no negative sign in the value.\n  $value = preg_replace('/[^\\d.]/', '',\
    \ $value);\n\n  // Find the difference between the number and zero.\n  $diff =\
    \ $value - 0;\n\n  // If the value was equidistant, round the difference away\n\
    \  // from zero so that it is less than zero.\n  if ($diff > 0) {\n    $diff *=\
    \ -1;\n  }\n  return $value + $diff;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhsagbcb.php:36\n\
    Stack trace:\n#0 /tmp/tmplhsagbcb.php(43): test()\n#1 {main}\n  thrown in /tmp/tmplhsagbcb.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest\
    \ = null;\n    $difference = null;\n    foreach (range(-10, 10) as $i) {\n   \
    \     $difference = abs($value - $i);\n        if ($difference > $closest) {\n\
    \            $closest = $difference;\n        }\n    }\n    return $closest;\n\
    }\n\n$closestInteger = closest_integer($distance);\necho $closestInteger;\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpap1nmg6i.php:34\n\
    Stack trace:\n#0 /tmp/tmpap1nmg6i.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpap1nmg6i.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $integer =\
    \ intval($value);\n  if ($integer === 0) {\n    return 0;\n  }\n  $decimal = $value\
    \ - $integer;\n  $decimal_abs = abs($decimal);\n  if ($decimal_abs < 0.5) {\n\
    \    return $integer;\n  }\n  else {\n    return $integer + 1;\n  }\n}\n\n$tests\
    \ = array(\n  '',\n  '0',\n  '10',\n  '-10',\n  '15.6',\n  '-15',\n  '15',\n \
    \ '14.5',\n  '-14.5',\n  '0',\n  '5',\n  '5.5',\n  '6.6',\n  '-7',\n  '-10',\n\
    \  '-10.4',\n  '-15.2',\n  '14',\n  '14.8',\n  '-15.5',\n  '14.5',\n  '-15',\n\
    \  '15.5',\n  '15.8',\n  '-15.5',\n  '15.5',\n  '15.8',\n  '-15.5',\n  '15.5',\n\
    \  '15.8',\n  '-15',\n  '15',\n  '15.3',\n  '-15.5',\n  '15.5',\n  '15.8',\n \
    \ '-15',\n  '15',\n  '15.3',\n  '-15.5',\n  '15.5',\n  '15.8',\n  '-15',\n  '15',\n\
    \  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n\
    \  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n\
    \  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n\
    \  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n\
    \  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n\
    \  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n\
    \  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n\
    \  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n  '-15',\n  '15',\n  '15.3',\n\
    \  '-15\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwf2iqp5a.php on line 139\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = 1;\n\n  for ($i = 0; $i < $value; ++$i) {\n    $closest = ($closest\
    \ + $value) % $value;\n  }\n\n  return $closest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_qv8why.php:31\n\
    Stack trace:\n#0 /tmp/tmpo_qv8why.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpo_qv8why.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ - round($value));\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcvwmfrb.php:24\n\
    Stack trace:\n#0 /tmp/tmprcvwmfrb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprcvwmfrb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $val = intval($value);\n\
    \  return $val == $val ? $val : $val - $val%1 + $val%1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7mxh3mf.php:26\n\
    Stack trace:\n#0 /tmp/tmpt7mxh3mf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt7mxh3mf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Make sure\
    \ the number we're given is a string\n    $value = strval($value);\n\n    // Split\
    \ it into an array of whole numbers (integer)\n    $value = preg_replace(\"/[^0-9\\\
    .]+/\", \"\", $value);\n\n    // Initialize an integer that we'll use to hold\
    \ the closest\n    // integer\n    $closest = 0;\n\n    // Go through each number\
    \ in the array\n    foreach($value as $i) {\n        // If this is closer to $closest\n\
    \        // than the previous number, store that number\n        if(abs($i - $closest)\
    \ < abs($closest - $i)) {\n            $closest = $i;\n        }\n    }\n\n  \
    \  // Return what we got\n    return $closest;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp6fhdttgs.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fhdttgs.php:43\n\
    Stack trace:\n#0 /tmp/tmp6fhdttgs.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6fhdttgs.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int = abs($value);\n\
    \  $diffs = array_map('intval', explode('.', $int));\n  $closest_diff = max($diffs);\n\
    \n  if ($closest_diff < $diffs[0]) {\n    return $int;\n  }\n\n  return $int +\
    \ abs($closest_diff) - 1;\n}\n</code>\n<|/ a |>\n<| a tags=rounding,php |>\n<code>\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdcrsxe11.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to an integer.\n  $value = floatval($value);\n  // Round the value.\n\
    \  $value = round($value);\n  // If the value is equidistant from two integers,\
    \ round the value away from\n  // zero. This means that if the given number is\
    \ equidistant from two\n  // integers, we will round the number to the nearest\
    \ integer.\n  if (($value % 1) === 0) {\n    $value = ceil($value);\n  } else\
    \ {\n    $value = floor($value);\n  }\n  // Return the value.\n  return $value;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfh7eok4.php:36\n\
    Stack trace:\n#0 /tmp/tmpbfh7eok4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbfh7eok4.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ we're given is equidistant from two integers, round\n  // away from zero.\n\
    \  if ($value == round($value)) {\n    // If both integers are equidistant, round\
    \ away from zero.\n    if ($value == round($value + 0.5)) {\n      // If they're\
    \ equidistant by an amount greater than 0.5, round to\n      // the nearest even\
    \ integer.\n      if ($value == round($value + 1.5)) {\n        // If they're\
    \ equidistant by an amount greater than 1, round to\n        // the nearest even\
    \ integer.\n        return round($value + 1.5);\n      }\n      // Otherwise round\
    \ to zero.\n      return 0;\n    }\n  }\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7pk3equ.php:39\n\
    Stack trace:\n#0 /tmp/tmpb7pk3equ.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpb7pk3equ.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // If the\
    \ value is negative, add 100 to make it positive.\n    if ($value[0] === '-')\
    \ {\n        $value = abs($value) + 100;\n    }\n\n    // Convert input value\
    \ to float.\n    $value = floatval($value);\n\n    // Set $a1 to the first integer.\n\
    \    $a1 = floor($value);\n\n    // Set $a2 to the second integer.\n    $a2 =\
    \ ceil($value);\n\n    // Check if the difference between $a1 and $a2 is one or\
    \ more.\n    // If $a1 equals $a2, then it's equidistant from two integers.\n\
    \    if ($a1 == $a2) {\n        // If both $a1 and $a2 are equal, then the difference\
    \ is 1.\n        return $a1;\n    }\n\n    // If the difference between $a1 and\
    \ $a2 is greater than one,\n    // then the closest integer must be between $a1\
    \ and $a2.\n    // If the difference is greater than 1, then $a1 is closer\n \
    \   // to $a2 than $a2.\n    if ($a1 - $a2 > 1) {\n        return $a1;\n    }\n\
    \n    // If the difference between $a1 and $a2 is less than one,\n    // then\
    \ $a2 is closer to $a1 than $a1.\n    return $a2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkjb_jkci.php:55\n\
    Stack trace:\n#0 /tmp/tmpkjb_jkci.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpkjb_jkci.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ here...\n  $integer = intval($value);\n  if(($integer < 0) || ($integer > 9))\
    \ {\n    throw new \\InvalidArgumentException(\"Argument should be a positive\
    \ integer\");\n  }\n\n  $difference = $integer - intval($value) . intval($value)\
    \ / intval($value);\n  return intval($value) + $difference;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: Argument should be a\
    \ positive integer in /tmp/tmp1fc1e702.php:19\nStack trace:\n#0 /tmp/tmp1fc1e702.php(27):\
    \ closest_integer('10')\n#1 /tmp/tmp1fc1e702.php(31): candidate('10')\n#2 /tmp/tmp1fc1e702.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp1fc1e702.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round(($value\
    \ - floor($value)) + 0.5, 0);\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfaq4rep.php:23\n\
    Stack trace:\n#0 /tmp/tmpzfaq4rep.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzfaq4rep.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int_value\
    \ = intval($value);\n  if ($int_value == $value) {\n    return $int_value;\n \
    \ }\n  $fraction = ($int_value - floor($int_value)) * 100 / floor($int_value);\n\
    \  $int_differences = array(\n    0 => abs($int_value - floor($int_value)),\n\
    \    1 => abs($int_value - ceil($int_value)),\n    2 => abs($int_value - round($int_value)),\n\
    \  );\n  return $int_differences[min($int_differences)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nbkqcpl.php:35\n\
    Stack trace:\n#0 /tmp/tmp4nbkqcpl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4nbkqcpl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $diff = $value\
    \ - $closest_integer($value);\n    if ($diff == 0) {\n        return $value;\n\
    \    }\n    return $value + ($diff < 0 ? 1 : -1);\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis is an interesting solution that you propose and I very much appreciate\
    \ the comments.\n<|/ c |>\n<| a tags=algorithm,php |>\nTry this:\n<code>\n<?php\n\
    $str = \"0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2\";\n$val = explode('\
    \ ', $str);\n$i = 0;\n$max = array_reduce($val, 'max', 0);\nforeach($val as $n){\n\
    \    $sum += $n;\n    if($sum == $max){\n        $max = $n;\n    }\n}\n$val[$i]\
    \ = $max;\nprint_r($val);\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpua72cdli.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Only take\
    \ positive values.\n  $value = abs($value);\n  if ($value <= 0) {\n    return\
    \ 0;\n  }\n\n  // Keep a running tally of whether we encounter a ceiling or floor.\n\
    \  $floor = false;\n  $ceiling = false;\n\n  // Loop through each digit in the\
    \ number one at a time.\n  $result = $value;\n  for ($i = 1; $i <= strlen($value);\
    \ $i++) {\n    if ($i === 1) {\n      // If the digit is one, it's an \"extra\"\
    \ digit that should be rounded down.\n      if ($result < $ceiling) {\n      \
    \  return 0;\n      }\n      if ($result > $floor) {\n        return 0;\n    \
    \  }\n    } else {\n      // If it's not the first digit, check the value of the\
    \ digit.\n      $digit = $result[($i - 1)];\n      if ($digit < $ceiling) {\n\
    \        return 0;\n      }\n      if ($digit > $floor) {\n        return 0;\n\
    \      }\n    }\n\n    // If we've seen both a floor and a ceiling, then return\
    \ the smaller one.\n    if ($ceiling) {\n      return $ceiling;\n    }\n    if\
    \ ($floor) {\n      return $floor;\n    }\n\n    // Keep track of the current\
    \ ceiling and floor values.\n    $ceiling = ceil($result);\n    $floor = floor($result);\n\
    \n    // If the current number is closer to the ceiling than the\n    // previous\
    \ number, then add one. We will then round this digit\n    // up as desired.\n\
    \    if ($ceiling < $result) {\n      $result = $ceiling + 1;\n    }\n    // If\
    \ the current number is closer to the floor than the previous\n    // number,\
    \ then subtract one. We will then round this digit down\n    // as desired.\n\
    \    if ($floor > $result) {\n      $result = $floor - 1;\n    }\n  }\n\n  //\
    \ Return the result.\n  return $result;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    Thanks, this is the best way to get the closest integer. I used it with a slightly\
    \ different approach: I took the integer \"x\" and divided it by 10^4. I did this\
    \ until I got an int, then subtracted it from the original \"x\".\n<|/ c |>\n\
    <| a |>\nI came up with a solution for this, which doesn't involve looping through\
    \ each digit, which might not be very efficient.\n<code>\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmposfzteoy.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ + ($value - floor($value)) * (1 / PHP_INT_MAX));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThe first function is giving `PHP Fatal error:  Function name must\
    \ be a string`\n<|/ c |>\n<| a dscore=0 tags=php |>\nI got it from this link\n\
    <code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp314c3cf3.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // If the\
    \ value is non-numeric, return zero.\n    if (! is_numeric($value)) {\n      \
    \  return 0;\n    }\n    $closest = round($value);\n    if ($closest == $value)\
    \ {\n        return 0;\n    }\n    return $closest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkbe2no9.php:32\n\
    Stack trace:\n#0 /tmp/tmprkbe2no9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprkbe2no9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Extract\
    \ the numbers from the value string\n  $numbers = str_split($value);\n  $closest\
    \ = array();\n  foreach ($numbers as $i => $num) {\n    // Create a range of numbers\
    \ around the current number to see\n    // what number they are equidistant from\n\
    \    $range = range($num, $num + 4);\n    // Find the smallest number in the range\n\
    \    $smallest = $range[0];\n    foreach ($range as $num) {\n      if ($num <\
    \ $smallest) {\n        $smallest = $num;\n      }\n    }\n    // If this is the\
    \ smallest number we've seen so far, store\n    // it as the closest.\n    if\
    \ ($smallest == $num) {\n      $closest[] = $smallest;\n    }\n  }\n  // Return\
    \ the first element from the array if the array is non-empty,\n  // otherwise\
    \ return null.\n  return isset($closest[0]) ? $closest[0] : null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3149u3j.php:46\n\
    Stack trace:\n#0 /tmp/tmpp3149u3j.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpp3149u3j.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if (is_numeric($value))\
    \ {\n    if ($value == round($value)) {\n      // The number passed in is the\
    \ same as the rounded number,\n      // so we can return the exact value.\n  \
    \    return $value;\n    } else {\n      // The given number is equidistant from\
    \ two integers.\n      // Find which integer is closer to zero.\n      // Round\
    \ that integer away, and return the closest.\n      // For example, closest_integer(15.3)\
    \ should return 15, and closest_integer(14.5) should return 14.\n      $diff =\
    \ $value - round($value);\n      if ($diff > 0) {\n        return round($value);\n\
    \      } else {\n        return round(-$value);\n      }\n    }\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1autse0i.php:41\n\
    Stack trace:\n#0 /tmp/tmp1autse0i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1autse0i.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpywvylk5t.php:23\n\
    Stack trace:\n#0 /tmp/tmpywvylk5t.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpywvylk5t.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round(($value\
    \ - floor($value)) + 0.5, 0);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nHi Ahmed\
    \ Thank you for your reply.\n\nI believe that this is the closest answer I have\
    \ found so far, however I wasn't able to get it to work.\n\nWould you mind taking\
    \ another look at my answer? I added my current code that I have tried to use\
    \ and also some test results I made.\n\nThank you in advance.\n<|/ c |>\n<| c\
    \ |>\nThanks for your reply. I had a look at the code you posted, however I cannot\
    \ get it to work either.\n<|/ c |>\n<| c |>\nI did some research on the function\
    \ you posted, and I think it is what I am looking for. But I cannot get it to\
    \ work. I cannot figure out what I am doing wrong.\n<|/ c |>\n<| c |>\nI modified\
    \ my code based on your example and got it to work. Thanks for your help Ahmed.\n\
    <|/ c |>\n<| a |>\nI ended up finding a function by Ahmed Ayd\u0131n that helped\
    \ me solve this problem.\nThis is the function I came up with that does what I\
    \ need it to do:\n<code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzrwhn6aw.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If this\
    \ value is a string, convert it to an integer.\n  $value = intval($value);\n\n\
    \  // Return either the floor or the ceiling of the value.\n  return ($value >=\
    \ 0) ? floor($value) : ceil($value);\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu57bddrf.php:27\n\
    Stack trace:\n#0 /tmp/tmpu57bddrf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpu57bddrf.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = strval($value);\n\
    \  if ($value == 0) {\n    return 0;\n  }\n  $sign = 1;\n  if ($value[0] === \"\
    -\") {\n    $sign = -1;\n    $value = substr($value, 1);\n  }\n\n  $value = explode(\"\
    .\", $value);\n  $value = $value[0];\n  if (is_float($value)) {\n    $value =\
    \ round($value, 2);\n  } else {\n    $value = ltrim($value, \"+- \");\n  }\n \
    \ $diff = 0;\n  for ($i = 0; $i < strlen($value); ++$i) {\n    $diff += pow($value,\
    \ $i);\n  }\n\n  return round($diff * $sign, 0);\n}\n\n/**\n * Returns an array\
    \ of all PHP files loaded as a string\n */\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx5zgj8os.php:49\n\
    Stack trace:\n#0 /tmp/tmpx5zgj8os.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpx5zgj8os.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $val = (int)\
    \ $value;\n  if (!is_numeric($val)) {\n    return $val;\n  }\n  \n  // If the\
    \ value is negative, find the absolute value, subtract that\n  // and divide by\
    \ the difference to find the absolute value.\n  if ($val < 0) {\n    $val -= abs($val);\n\
    \  }\n  \n  $diff = $val - floor($val);\n  if ($diff < .5) {\n    return floor($val);\n\
    \  }\n  \n  return ceil($val);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjenqvqo.php:40\n\
    Stack trace:\n#0 /tmp/tmprjenqvqo.php(47): test()\n#1 {main}\n  thrown in /tmp/tmprjenqvqo.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value); // Make positive\n    $min_diff = 1;\n    $current_diff = 0;\n\n\
    \    while ($current_diff < $min_diff) {\n        $current_diff++;\n        if\
    \ ($value == round($value, 0)) {\n            $value = floor($value);\n      \
    \      break;\n        }\n\n        $value = round($value + $min_diff / 2, 1);\n\
    \    }\n\n    return $value;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code gives wrong\
    \ results on \"12.3\" and \"12.8\". See my answer for a working example.\n<|/\
    \ c |>\n<| a tags=math,php |>\nThis solution is based on answers from-nielsen\
    \ and and uses native PHP intval(). Other solutions including custom rounding\
    \ functions can give wrong results on \"12.3\" and \"12.8\". This solution works\
    \ correctly. Also it uses \"round()\" function. It returns false if input is not\
    \ a number or if the input value is not an integer. For example \"12.3as\" returns\
    \ false.\n<code>\n/**\n * Return closest integer to passed number.\n * If passed\
    \ number is not a number or is not an integer, return false.\n *\n * int $value\
    \ Number to be converted to closest integer\n * int\n */\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp09cx834v.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ trim($value);\n    if ($value == \"\") {\n        return 0;\n    }\n    // First\
    \ pass is to find out how many trailing zeros there are\n    if (preg_match(\"\
    /[^.-]$/\", $value)) {\n        $precision = 0;\n    } else {\n        $precision\
    \ = strlen($value) - strlen(ltrim($value, '0'));\n    }\n    // This loop will\
    \ continue until it no longer has any zeros after the decimal\n    for ($i = 0;\
    \ $i <= $precision; $i++) {\n        $test = \"$value.0\";\n        $test = substr($test,\
    \ 0, $i);\n        if ($test == $value) {\n            $result = $i;\n       \
    \     break;\n        }\n    }\n    // If there are still no zeros after decimal\
    \ point, then we're done\n    if ($result == 0) {\n        return intval($value);\n\
    \    }\n    // Second pass is to see if there's a number before the decimal\n\
    \    $test = \"$value.\";\n    if (substr($test, 0, strlen($test) - 1) === $value)\
    \ {\n        $result = strlen($test) - 1;\n    } else {\n        $result = strlen($value);\n\
    \    }\n    // If the number before the decimal is equidistant from two integers,\
    \ round it to the nearest integer\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvmq3ek7.php:55\n\
    Stack trace:\n#0 /tmp/tmpxvmq3ek7.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpxvmq3ek7.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = strtolower($value);\n\
    \  $value = preg_replace('/[^0-9.]/', '', $value);\n  list($value, $unit) = explode('.',\
    \ $value);\n  list($low, $high) = explode('-', $value);\n  $diff = abs($low -\
    \ $high);\n  if ($diff == 0) {\n    return $low;\n  }\n  return $low + (floor($diff\
    \ / $unit) * $unit);\n}\n</code>\n<|/ a |>\n<| a dscore=2 tags=php |>\nTo find\
    \ the closest number in a list of numbers you can do something like this :\n<code>\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjxu02olj.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  // Make sure the value is not zero\n  $value = $value ? intval($value) : 0;\n\
    \  // If the value is zero, we are done\n  if ($value == 0) {\n    return 0;\n\
    \  }\n  $closest_value = $value;\n  $closest_diff = 0;\n  foreach ($GLOBALS['math_round']\
    \ as $key => $round) {\n    $diff = abs(($value - $closest_value) / $round);\n\
    \    if ($diff == 0) {\n      return $closest_value;\n    }\n    $closest_diff\
    \ = $diff;\n    $closest_value = $round;\n  }\n  return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpm6l_u_j6.php\
    \ on line 25\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpm6l_u_j6.php\
    \ on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6l_u_j6.php:42\n\
    Stack trace:\n#0 /tmp/tmpm6l_u_j6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpm6l_u_j6.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $a = abs($value);\
    \ // negative number or zero\n    $b = abs($value); // negative number or zero\n\
    \    $distance = 0;\n    if ($a < $b) {\n        // negative number\n        $distance\
    \ = $a - $b;\n        if ($distance > $b) {\n            // closest integer\n\
    \            $distance = $b;\n        }\n    } else {\n        // positive number\n\
    \        $distance = $b - $a;\n        if ($distance > $a) {\n            // closest\
    \ integer\n            $distance = $a;\n        }\n    }\n    return round($distance);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_z7_zw1o.php:41\n\
    Stack trace:\n#0 /tmp/tmp_z7_zw1o.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_z7_zw1o.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your solution here\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6wtkqxt.php:23\n\
    Stack trace:\n#0 /tmp/tmpz6wtkqxt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpz6wtkqxt.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $intVal = (int)$value;\n\
    \  $delta = $value - $intVal;\n  $deltaAbs = abs($delta);\n  if ($delta > 0) {\n\
    \    if ($deltaAbs > $intVal) {\n      return $intVal;\n    }\n    return $intVal\
    \ + 1;\n  }\n  if ($deltaAbs < $intVal) {\n    return $intVal;\n  }\n  return\
    \ $intVal - 1;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nJust curious - how can\
    \ you tell if that number is equidistant from two other numbers?\n<|/ c |>\n<|\
    \ c |>\nI've added an example for that to the answer (the part about `closest_integer(\"\
    14.5\")` returning `15` instead of `14` and the `closest_integer(\"-14.5\")` returning\
    \ `-15` instead of `-14`).\n<|/ c |>\n<| c |>\nThat was really helpful. Thanks\
    \ a lot. :)\n<|/ c |>\n<| a tags=php |>\n<code>\n$num = 20;\n$num2 = 15;\n$num3\
    \ = 10\n$num4 = 20;\n$difference = $num - $num2;\n$difference2 = $num3 - $num4;\n\
    \nif($difference < 0){\n  echo 'difference negative'; //$difference = -$difference\n\
    }\nelseif($difference == 0){\n  echo 'difference is 0'; //$difference = $difference\n\
    }\nelseif($difference > 0 && $difference2 > 0){\n  echo 'differences are equidistant';\
    \ //$difference = 10, $difference2 = 15\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks. But I wanted to check the difference with different numbers. So, here\
    \ $difference is equal to $num - $num2 and $difference2 is equal to $num3 - $num4.\
    \ So, how to check that?\n<|/ c |>\n<| a tags=php |>\nI suppose you could use\
    \ the abs() function to return the absolute value of a number.\n<code>\n<?php\n\
    $myVar = abs(15);\necho $myVar;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppy_zjry3.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  if ($value > 0) {\n    $is_negative = ($value < 0) ? '-' : '';\n    return\
    \ $is_negative . round($value);\n  }\n  return ceil($value);\n}\n\n$tests = array();\n\
    for ($i = 1; $i <= 20; $i++) {\n  $value = sprintf(\"%g\", $i);\n  $tests[] =\
    \ array($value);\n}\n$tests[] = array(0);\n$tests[] = array('0');\n$tests[] =\
    \ array('0.000');\n$tests[] = array('0.01');\n$tests[] = array('-0.0001');\n$tests[]\
    \ = array('-1');\n$tests[] = array('-0');\n$tests[] = array('-0.000001');\n$tests[]\
    \ = array('-1e-10');\n$tests[] = array('-1e-2');\n$tests[] = array('-1e-5');\n\
    $tests[] = array('-1e-6');\n$tests[] = array('-1e-7');\n$tests[] = array('-1e-8');\n\
    $tests[] = array('-1e-9');\n$tests[] = array('-1e-10');\n$tests[] = array('-1e-11');\n\
    $tests[] = array('-1e-1');\n$tests[] = array('-1e-2');\n$tests[] = array('-1e-21');\n\
    $tests[] = array('-1e-217');\n$tests[] = array('-1e-23');\n$tests[] = array('-1e-24');\n\
    $tests[] = array('-1e-25');\n$tests[] = array('-1e-26');\n$tests[] = array('-1e-27');\n\
    $tests[] = array('-1e-28');\n$tests[] = array('-1e-29');\n$tests[] = array('-1e-30');\n\
    $tests[] = array('-1e-31');\n$tests[] = array('-1e-32');\n$tests[] = array('-1e-33');\n\
    $tests[] = array('-1e-34');\n$tests[] = array('-1e-35');\n$tests[] = array('-1e-36');\n\
    $tests[] = array('-1e-37');\n$tests[] = array('-1e-38');\n$tests[] = array('-1e-39');\n\
    $tests[] = array('-1e-40');\n$tests[] = array('-1e-41');\n$tests[] = array('-1\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjiyubh66.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\
    \ // convert negative to positive number\n  if ($value == 0) {\n    $value = 1;\
    \ // avoid division by zero\n  }\n  $smallest = $value;\n  foreach (array_slice($GLOBALS['cfg']['FormHistoryLimit'],\
    \ 1) as $prev) {\n    if ($prev['time'] < $smallest) {\n      $smallest = $prev['time'];\n\
    \    }\n  }\n  return ($smallest == $value) ? 1 : $smallest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, null given in\
    \ /tmp/tmpqknt_4vi.php on line 21\n\nWarning: Invalid argument supplied for foreach()\
    \ in /tmp/tmpqknt_4vi.php on line 21\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpqknt_4vi.php:34\nStack trace:\n#0 /tmp/tmpqknt_4vi.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqknt_4vi.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = floatval($value);\n\
    \    $max = $num + PHP_INT_MAX;\n    if ($num < 0) {\n        $min = 0;\n    }\
    \ else {\n        $min = PHP_INT_MAX;\n    }\n    return round($min + $num * ($max\
    \ - $min) / $num);\n}\n</code>\n<|/ a |>\n<| c |>\nNice solution, however it will\
    \ not handle decimal values, it will handle integers only\n<|/ c |>\n<| a |>\n\
    Here's an example of using regex to remove all periods and minus signs from a\
    \ string:\n<code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfqx00e2o.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $numbers =\
    \ explode('.', $value);\n  $min = count($numbers) <= 1 ? 0 : $numbers[0];\n  foreach\
    \ ($numbers as $number) {\n    if (abs($number) - abs($min) < abs($numbers - $min))\
    \ {\n      $min = $number;\n    }\n  }\n  return $min;\n}\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_filter('wpml_format_number_decimals', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number_thousands_decimals', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number_thousands_separator', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number_thousands_separator', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number', 'closest_integer', 10, 2);\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_filter('wpml_format_number', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number', 'closest_integer', 10, 2);\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_filter('wpml_format_number', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number', 'closest_integer', 10, 2);\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_filter('wpml_format_number', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number', 'closest_integer', 10, 2);\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_filter('wpml_format_number', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number', 'closest_integer', 10, 2);\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_filter('wpml_format_number', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number', 'closest_integer', 10, 2);\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_filter('wpml_format_number', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number', 'closest_integer', 10, 2);\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_filter('wpml_format_number', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number', 'closest_integer', 10, 2);\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_filter('wpml_format_number', 'closest_integer',\
    \ 10, 2);\nadd_filter('wpml_format_number', 'closest_integer', 10, 2);\nadd_filter('wpml_format_number',\
    \ 'closest_integer', 10, 2);\nadd_\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5xvqyawh.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $vals = array_map('intval',\
    \ explode('.', $value));\n\n  // Make sure we have an array of integers.\n  $vals\
    \ = array_filter($vals);\n  if (!empty($vals)) {\n    // Find the smallest and\
    \ largest values.\n    $smallest = min(array_keys($vals));\n    $largest = max(array_keys($vals));\n\
    \n    // If there are no numbers between $smallest and $largest, we\n    // are\
    \ done.\n    if ($largest - $smallest == 1) {\n      return $vals[$smallest];\n\
    \    }\n\n    // If there is only one number between $smallest and $largest,\n\
    \    // return it.\n    if ($largest - $smallest == 2) {\n      return $vals[$smallest]\
    \ + 1;\n    }\n\n    // Calculate how many numbers are between $smallest and $largest.\n\
    \    $difference = $largest - $smallest;\n\n    // Calculate the midpoint between\
    \ $smallest and $largest.\n    $mid = $difference / 2;\n\n    // Use the midpoint\
    \ to calculate the closest integer.\n    return round($vals[$smallest] + $mid,\
    \ 0);\n  }\n  return 0;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1yxtx5g.php:54\n\
    Stack trace:\n#0 /tmp/tmpf1yxtx5g.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpf1yxtx5g.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ goes here.\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp255cytqv.php:24\n\
    Stack trace:\n#0 /tmp/tmp255cytqv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp255cytqv.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Make sure\
    \ our value is numeric\n  if(!is_numeric($value)) {\n    throw new Exception(\"\
    The input value $value is not a number.\");\n  }\n\n  // Convert string value\
    \ to int\n  $value = intval($value);\n\n  // Get the integer distance between\
    \ $value and the lowest possible\n  // integer.\n  $distance  = $value - pow(10,\
    \ floor(log10($value))); // 10**floor(log10(value))\n  $distance  = round($distance);\n\
    \n  // Return the integer closest to $value that is less than or equal to\n  //\
    \ $distance.\n  return min($distance, $value + 1);\n}\n</code>\n<|/ a |>\n<| a\
    \ tags=php,math |>\nHere's a generic formula to find the closest integer between\
    \ two numbers:\n<code>\n$closestInt = (($num1 + $num2) * ($num1 - $num2)) / ($num1\
    \ * $num2);\n</code>\nThis formula is for integers only, but can be easily adapted\
    \ to other types, such as floats.\n<|/ a dscore=3 |>\n<| a tags=php,math |>\n\
    I prefer this way, as it is shorter and easier to understand\n<code>\n$a = floor(abs($a));\n\
    $b = floor(abs($b));\n</code>\n<|/ a dscore=2 |>\n<| c |>\nBut if $a and $b are\
    \ integers, the result will be an integer. `floor()` will convert a negative number\
    \ into zero.\n<|/ c |>\n<| a tags=php,math |>\nThe answer above did not work for\
    \ me. I ended up using this.\n<code>\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgphwrhe7.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float so we can compare it with other\n  // floats to see if\
    \ they are equidistant\n  $float = floatval($value);\n  if ($float == $value)\
    \ {\n    return $value;\n  }\n\n  // Convert the value to a float so we can compare\
    \ it with other\n  // floats to see if they are equidistant\n  $float2 = floatval($value);\n\
    \  if ($float2 == $value) {\n    return $value;\n  }\n\n  $int_val = intval($value);\n\
    \  $float2_val = floatval($value);\n  if (abs($int_val - $float2_val) <= abs($float2_val\
    \ - $int_val)) {\n    return $int_val;\n  }\n\n  return $float2_val;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_hfuoxj.php:44\n\
    Stack trace:\n#0 /tmp/tmpw_hfuoxj.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpw_hfuoxj.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value\
    \ / abs($value), 1);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxr5cr7_m.php:24\n\
    Stack trace:\n#0 /tmp/tmpxr5cr7_m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxr5cr7_m.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  global $closest;\n\
    \  $closest = round($value,0);\n  return $closest;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6qmaq6y.php:25\n\
    Stack trace:\n#0 /tmp/tmpe6qmaq6y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpe6qmaq6y.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Split string\
    \ into array on '.'\n  $value = explode(\".\", $value);\n  // Find the difference\
    \ between the two parts\n  $difference = $value[1] - $value[0];\n  \n  if ($difference\
    \ == 0) {\n    // The two parts are the same so return the first number\n    return\
    \ $value[0];\n  }\n  else {\n    // The two parts are different, so return the\
    \ smaller number\n    return $value[0] < $value[1] ? $value[0] : $value[1];\n\
    \  }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnirkxh66.php:35\n\
    Stack trace:\n#0 /tmp/tmpnirkxh66.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpnirkxh66.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return abs(round($value))\
    \ - abs(round($value));\n}\n\n/**\n * Get a list of all the classes for which\
    \ a hook is registered.\n *\n * @param string $hook The hook to find classes for.\n\
    \ *\n * @return array\n *   An array of all the classes registered for the given\
    \ hook.\n */\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9o2lrj9.php:32\n\
    Stack trace:\n#0 /tmp/tmpa9o2lrj9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa9o2lrj9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ here\n}\n</cell>\n<cell>\n%%bash\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_sx69l39.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // This function\
    \ will return the closest integer to the given value.\n    // If no integer can\
    \ be found within the range (-\u221E, \u221E), it will return\n    // \u221E.\n\
    \    $closest = PHP_INT_MAX;\n    $closestIndex = 0;\n    for ($i = -PHP_INT_MAX;\
    \ $i <= PHP_INT_MAX; $i ++) {\n        $currentInteger = $i * $value + $closest;\n\
    \        if ($currentInteger == $closest) {\n            // If $value is equidistant\
    \ from $i from both sides, round $i\n            // away from zero.\n        \
    \    if ($i == 0) {\n                $closestIndex = 0;\n            } else {\n\
    \                $closestIndex = 1;\n            }\n            break;\n     \
    \   }\n        if (abs($currentInteger - $closest) < abs($closest - $currentInteger))\
    \ {\n            $closest = $currentInteger;\n            $closestIndex = $i;\n\
    \        }\n    }\n    return $closestIndex * $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round(abs($value));\n\
    }\n\n/**\n * Return the number of seconds in the given number of milliseconds.\n\
    \ * https://gist.github.com/dperini/729294\n *\n * @param int $milliseconds\n\
    \ *\n * @return int\n */\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmn52dii.php:32\n\
    Stack trace:\n#0 /tmp/tmptmn52dii.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptmn52dii.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if (!is_numeric($value))\
    \ {\n    throw new InvalidArgumentException(sprintf('Value %s is not a number',\
    \ $value));\n  }\n\n  $absValue = $value;\n  if ($absValue < 0) {\n    $absValue\
    \ = 0 - $absValue;\n  }\n\n  $closestInteger = $absValue;\n  $closestFraction\
    \ = null;\n  while ($closestFraction !== 1 && $closestFraction !== null) {\n \
    \   $closestFraction = $absValue % $closestInteger;\n    $closestInteger = $closestInteger\
    \ / $closestInteger;\n  }\n\n  return $closestInteger;\n}\n</code>\n<|/ a tags=php,integer,floating-point\
    \ |>\n<| c |>\nI do not have access to the $value string because it is obtained\
    \ from another source. I would prefer not to convert it to a number prior to using\
    \ this function though. I might use this function if nothing else works.\n<|/\
    \ c |>\n<| c |>\nOk I edited my answer to avoid converting to a number\n<|/ c\
    \ |>\n<| c |>\nI think this is the best solution. Thanks!\n<|/ c |>\n<| a tags=php,integer,floating-point\
    \ dscore=0 |>\nFor negative values this may work: \n<code>\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5nzo7o57.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $number = $value;\n\
    \n  do {\n    $number = round($number);\n  } while ($number != $number);\n\n \
    \ return $number;\n}\n</code>\nThis assumes that the integers are equidistant\
    \ from each other.\n<|/ a |>\n<| a tags=math,php |>\nThis may work for you:\n\
    <code>\n$int1 = rand(11, 21);\n$int2 = rand(11, 21);\n\n$difference = $int2 -\
    \ $int1;\n$numberRange = 10;\n$range = $int2 - $int1 + $numberRange;\n\nif ($difference\
    \ <= $numberRange && $difference >= 0) {\n    $number = $int1 + $numberRange;\n\
    } else {\n    $number = $int1;\n}\n\necho $number;\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI like this approach, but why `$numberRange + 1;` instead of just `$numberRange`?\n\
    <|/ c |>\n<| c |>\nYes, I forgot to add that one in, fixed.\n<|/ c |>\n<| a tags=math,php\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2sxflfih.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Get the\
    \ difference between the two inputs\n  $diff = $value - floor($value);\n  // If\
    \ the difference is zero, return that integer\n  // If the difference is greater\
    \ than zero, return that integer plus one\n  // If the difference is less than\
    \ zero, return that integer minus one\n  if ($diff == 0) {\n    return $value;\n\
    \  }\n  else if ($diff > 0) {\n    return floor($value + 1);\n  }\n  else if ($diff\
    \ < 0) {\n    return floor($value - 1);\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qt8v_ls.php:36\n\
    Stack trace:\n#0 /tmp/tmp2qt8v_ls.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2qt8v_ls.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Convert\
    \ the value to a floating point and round it to the nearest integer.\n    $value\
    \ = floatval($value);\n    $nearest_integer = ceil($value);\n\n    // If the nearest\
    \ integer is identical to the original value then\n    // the value was equidistant\
    \ from two integers and you should return the\n    // original integer.\n    if\
    \ ($value == $nearest_integer) {\n        return $value;\n    }\n\n    // If the\
    \ nearest integer is less than the original value then rounding\n    // away from\
    \ zero means you should return the closest integer that is\n    // less than the\
    \ original value.\n    if ($nearest_integer < $value) {\n        return $nearest_integer;\n\
    \    }\n\n    // If the nearest integer is greater than the original value then\
    \ rounding\n    // away from zero means you should return the closest integer\
    \ that is\n    // greater than the original value.\n    return $nearest_integer\
    \ - 1;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9b3dlu5z.php:44\n\
    Stack trace:\n#0 /tmp/tmp9b3dlu5z.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp9b3dlu5z.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if ($value{0}\
    \ === '-') {\n    $value = substr($value, 1);\n  }\n  $value = ltrim($value, '0');\n\
    \  $parts = explode('.', $value);\n  $integer = $parts[0];\n  if (count($parts)\
    \ < 2) {\n    return $integer;\n  }\n  sort($parts);\n  $farthest_difference =\
    \ array_pop($parts);\n  sort($parts);\n  $difference = array_pop($parts);\n  sort($parts);\n\
    \  $closest_difference = array_pop($parts);\n  sort($parts);\n  $closest_integer\
    \ = array_pop($parts);\n  sort($parts);\n  $closest_integer = array_pop($parts);\n\
    \  sort($parts);\n  $closest_integer = array_pop($parts);\n  sort($parts);\n \
    \ $closest_integer = array_pop($parts);\n  $closest_integer = array_pop($parts);\n\
    \  sort($parts);\n  if ($difference != 0) {\n    $closest_integer = $farthest_difference;\n\
    \  }\n  return $closest_integer;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjar9ydor.php:51\n\
    Stack trace:\n#0 /tmp/tmpjar9ydor.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpjar9ydor.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmx3kooed.php:24\n\
    Stack trace:\n#0 /tmp/tmpmx3kooed.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmx3kooed.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Ensure that\
    \ $value is a number\n  $value = is_numeric($value) ? floatval($value) : 0;\n\
    \  \n  // If $value is equidistant from two integers,\n  // round it away from\
    \ zero.\n  $fraction = abs($value - $value%1);\n  $closest = $value < 0 and $fraction\
    \ < .5 ? -2 : 2;\n  return $closest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps40rbm4z.php:31\n\
    Stack trace:\n#0 /tmp/tmps40rbm4z.php(38): test()\n#1 {main}\n  thrown in /tmp/tmps40rbm4z.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if ($value[0]\
    \ == '-') {\n    $sign = -1;\n    $value = substr($value, 1);\n  } else {\n  \
    \  $sign = 1;\n  }\n  $parts = explode('.', $value);\n  $closest_integer = array_shift($parts);\n\
    \  foreach ($parts as $part) {\n    $closest_integer = round($closest_integer\
    \ * pow(10, $sign) + $part * pow(10, -$sign), $sign);\n    $sign *= -1;\n  }\n\
    \  return $closest_integer;\n}\n</code>\n<|/ a tags=php,rounding |>\n<| a dscore=0\
    \ |>\nTry this:\n<code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd24jbtzx.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // The number\
    \ you're trying to get the closest integer to.\n    $num = $value;\n    // The\
    \ difference between $num and the closest integer.\n    $difference = 0;\n   \
    \ // The closest integer that's less than $num.\n    $closest = null;\n    //\
    \ Loop through the list of possible integer values to see if any of them\n   \
    \ // are less than $num.\n    foreach($integers as $int) {\n        // Check if\
    \ the current integer is less than the number.\n        if ($int > $num) {\n \
    \           // If it is then make it the closest integer.\n            $closest\
    \ = $int;\n        }\n        // Check if the difference between $num and the\
    \ current integer is\n        // less than the current difference value.\n   \
    \     $current_difference = ($num - $closest);\n        if ($current_difference\
    \ < $difference) {\n            // If it is then make it the closest integer.\n\
    \            $closest = $int;\n            // The difference between the $num\
    \ and the closest integer.\n            $difference = $current_difference;\n \
    \       }\n    }\n    // Return the closest integer.\n    return $closest;\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nIf i understand the problem correctly, the\
    \ OP wants to find the closest number not necessarily an integer.\n<|/ c |>\n\
    <| c |>\nI know, but this is the closest I can get to it without using any functions\
    \ or libraries.\n<|/ c |>\n<| c |>\nI see you edited your answer to include that\
    \ :) The OP has now edited his question to say he doesn't want to use any libraries.\
    \ +1 now that you edited your answer to show him how to do it :) I think he should\
    \ select this as the best answer\n<|/ c |>\n<| c |>\nOh I didn't realize the OP\
    \ didn't want to use libraries.\n<|/ c |>\n<| c |>\nThanks, I realized that after\
    \ you edited your answer so I edited mine to include my answer as well.\n<|/ c\
    \ |>\n<| a dscore=1 |>\nThis answer does not use any built-in library functions.\n\
    <code>\n<?php\n\n$ints = array(10, 20, 30, 40);\n\n$input = 15;\n\nforeach ($ints\
    \ as $number) {\n    // Add one to the previous difference\n    $difference +=\
    \ ($number - $input);\n\n    // If the difference is now smaller than the input\n\
    \    if ($difference <= $input) {\n        // Output the number\n        echo\
    \ $number;\n        // Break out of the loop\n        break;\n    }\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThis is not the most efficient way to solve the problem.\
    \ The main issue is that $ints is an array of numbers and \nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp2p46uhj.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest_integer\
    \ = $value;\n    $current_integer   = $value;\n    if ($current_integer == 0)\n\
    \        return $current_integer;\n    if ($current_integer < 0)\n        return\
    \ -$closest_integer;\n    $diff = $current_integer - $closest_integer;\n    if\
    \ ($diff > 0.5 || $diff < -0.5) {\n        $closest_integer = $current_integer;\n\
    \    }\n    return $closest_integer;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq15z32nt.php:33\n\
    Stack trace:\n#0 /tmp/tmpq15z32nt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq15z32nt.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if (preg_match('/^\\\
    d+$/', $value)) {\n    return $value;\n  }\n  $numbers = array();\n  $numbers['1']\
    \ = 1;\n  $numbers['2'] = 2;\n  $numbers['3'] = 3;\n  $numbers['4'] = 4;\n  $numbers['5']\
    \ = 5;\n  $numbers['6'] = 6;\n  $numbers['7'] = 7;\n  $numbers['8'] = 8;\n  $numbers['9']\
    \ = 9;\n  $numbers['0'] = 10;\n  $numbers['.'] = 10;\n  $numbers['-'] = 10;\n\
    \  $numbers['+'] = 10;\n  $numbers['e'] = 11;\n  $numbers['pi'] = 26;\n  $numbers['E']\
    \ = 11;\n  $numbers['i'] = 21;\n  $numbers['I'] = 21;\n  $numbers['n'] = 15;\n\
    \  $numbers['N'] = 15;\n  $numbers['0'] = 10;\n  $numbers['-'] = 10;\n  $numbers['+']\
    \ = 10;\n  $numbers['.'] = 10;\n  $numbers['e'] = 11;\n  $numbers['pi'] = 26;\n\
    \  $numbers['E'] = 11;\n  $numbers['i'] = 21;\n  $numbers['I'] = 21;\n  $numbers['n']\
    \ = 15;\n  $numbers['N'] = 15;\n  $numbers['0'] = 10;\n  $numbers['-'] = 10;\n\
    \  $numbers['+'] = 10;\n  $numbers['.'] = 10;\n  $numbers['e'] = 11;\n  $numbers['pi']\
    \ = 26;\n  $numbers['E'] = 11;\n  $numbers['i'] = 21;\n  $numbers['I'] = 21;\n\
    \  $numbers['n'] = 15;\n  $numbers['N'] = 15;\n  $numbers['0'] = 10;\n  $numbers['-']\
    \ = 10;\n  $numbers['+'] = 10;\n  $numbers['.'] = 10;\n  $numbers['e'] = 11;\n\
    \  $numbers['pi'] = 26;\n  $numbers['E'] = 11;\n  $numbers['i'] = 21;\n  $numbers['I']\
    \ = 21;\n  $numbers['n'] = 15;\n  $numbers['N'] = 15;\n  $numbers['0'] = 10;\n\
    \  $numbers['-'] = 10;\n  $numbers['+'] = 10;\n  $numbers['.'] = 10;\n  $numbers['e']\
    \ = 11;\n  $numbers['pi'] = 26;\n  $numbers['E'] = 11;\n  $numbers['i'] = 21;\n\
    \  $numbers['I'] = 21;\n  $numbers['n'] = 15;\n  $numbers['N'] = 15;\n  $numbers['0']\
    \ = 10;\n  $numbers['-'] = 10;\n  $numbers['+'] = 10;\n  $numbers['.\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmkb0imfs.php on line 87\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // If the\
    \ given value is an integer, just return the value.\n    if (is_int($value)) {\n\
    \        return $value;\n    }\n    $closest = $value;\n    $closest = round($closest,\
    \ 1);\n    // If the given value is a float, calculate the closest integer\n \
    \   // value between the two numbers and return that.\n    if (is_float($value))\
    \ {\n        $closest = round($closest + $value, 1);\n    }\n    return $closest;\n\
    }\n\n/**\n * Determine whether a given value is an integer.\n *\n * http://php.net/is_int\n\
    \ *\n * @param mixed $value\n *   A value that will be checked against for whether\
    \ it is an integer.\n *\n * @return boolean\n *   Whether or not the value is\
    \ an integer.\n */\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppq_lnwdn.php:46\n\
    Stack trace:\n#0 /tmp/tmppq_lnwdn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmppq_lnwdn.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Your code\
    \ here\n}\nSolution Two: \n<?php\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa82k892n.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // TODO: Implement\
    \ Function\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mu7ner6.php:24\n\
    Stack trace:\n#0 /tmp/tmp9mu7ner6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9mu7ner6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $integers =\
    \ array(\n    10,\n    10.5,\n    11.5,\n    12.5,\n    13.5,\n    14,\n    14.5,\n\
    \    15,\n    15.5,\n    16,\n    17,\n    17.5,\n    18,\n    19,\n    20,\n\
    \    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n\
    \    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n\
    \    39,\n    40\n  );\n\n  if (isset($integers[$value])) {\n    return $integers[$value];\n\
    \  }\n\n  foreach ($integers as $key => $integer) {\n    $dist = $value - $integer;\n\
    \    if ($dist == 0 || $dist < 0 || $dist > $integer) {\n      return $integers[$key];\n\
    \    }\n  }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=math,php |>\nThe number\
    \ you're dealing with is close to a perfect square.\n<code>\n$number = floor(sqrt($number));\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nWhat if `sqrt` overflows?\n<|/ c |>\n<| c\
    \ |>\nYou could still use `sqrt`. `floor` might not always be exact. `floor(sqrt($number))`\
    \ will always give you an integer.\n<|/ c |>\n<| c |>\nThe `floor` will round\
    \ the integer to the nearest integer no matter what `sqrt` returns.\n<|/ c |>\n\
    <| c |>\nRight, I got confused because `floor` and `round` round the value to\
    \ an integer.\n<|/ c |>\n<| a dscore=0 |>\nIn order to get it done in single line\
    \ use following code\n<code>\n echo floor(sqrt($number)); \n</code>\n<|/ a tags=math,php\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(10,20,30,40,50);\nforeach($numbers\
    \ as $number) {\n    $square = pow($number,2);\n    if($square > 100) {\n    \
    \    $square = 100;\n    }\n    if($square < 100) {\n        $square = 0;\n  \
    \  }\n    echo \"The square of $number is: \".$square.\"<br/>\";\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsqv24ah7.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest\
    \ = null;\n    $delta = null;\n    $delta2 = 0;\n    $delta2_rev = 0;\n    $int_part\
    \ = floor($value);\n    $rem_part = $value - $int_part;\n\n    for ($int = 0;\
    \ $int < 100; $int++) {\n        $rem = $rem ? $rem : round($rem_part);\n    \
    \    $int_part_rev = $int_part ? $int_part : round($int_part);\n        $delta\
    \ = $int_part_rev - $rem_part;\n        $delta2 = $int_part_rev * $int_part_rev\
    \ - $delta * $delta;\n        $delta2_rev = $int_part_rev * $int_part_rev;\n \
    \       if (abs($delta) == abs($delta2)) {\n            if ($int_part != $closest)\
    \ {\n                $closest = $int_part;\n            }\n            if (abs($delta)\
    \ < abs($delta2_rev)) {\n                if ($int > $closest) {\n            \
    \        $closest = $int;\n                }\n                break;\n       \
    \     } else {\n                if ($int < $closest) {\n                    $closest\
    \ = $int;\n                }\n                break;\n            }\n        }\n\
    \        $rem_part -= $int_part * $rem;\n    }\n\n    if ($closest == 0) {\n \
    \       $closest = $int_part + 1;\n    }\n\n    return $closest;\n}\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| c |>\nThank you for your input! I actually found\
    \ the function on my first google search and was thinking about using it, but\
    \ didn't want to reinvent the wheel if someone already implemented it :) Your\
    \ answer is very helpful, and I learned a lot from it.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nThe algorithm is this:\n\nTake the largest number that is a multiple of\
    \ the remaining number.\nSubtract that from the remaining number.\nRepeat from\
    \ 1 until you get back to the original number.\n<|/ a dscore=3 |>\n<| a |>\nThe\
    \ algorithm is something like this:\n\nTake the largest number that is a multiple\
    \ of the remaining number.\nSubtract that from the remaining number.\nRepeat from\
    \ 1 until you get back to the original number.\n<|/ a tags=php,algorithm dscore=3\
    \ |>\n<| c |>\nI wouldn't say it's a duplicate, this is much more elegant\n<|/\
    \ c |>\n<| a tags=php,algorithm |>\n<code>\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpchi4wgvf.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrfmy9gj.php:23\n\
    Stack trace:\n#0 /tmp/tmpzrfmy9gj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzrfmy9gj.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is equidistant from two integers,\n  // round it away from zero.\n  // If the\
    \ number is less than zero or zero, return zero.\n  if ($value === 0 ) {\n   \
    \ return 0;\n  }\n  return round($value);\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f9__j_7.php:30\n\
    Stack trace:\n#0 /tmp/tmp9f9__j_7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9f9__j_7.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest\
    \ = null;\n    foreach ([10, 15, 20, 30] as $i) {\n        if (abs($value - $i)\
    \ == 0) {\n            return $i;\n        }\n        if ($closest == null ||\
    \ abs($value - $closest) < abs($value - $i)) {\n            $closest = $i;\n \
    \       }\n    }\n    return $closest;\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_pdkle7.php:34\n\
    Stack trace:\n#0 /tmp/tmps_pdkle7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmps_pdkle7.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Create a\
    \ function that takes a value (string) representing a number\n  // and returns\
    \ the closest integer to it. If the number is equidistant\n  // from two integers,\
    \ round it away from zero.\n  return function ($v) {\n    return $v < 0.01 ? ($v\
    \ < 1 ? ceil($v) : floor($v)) : floor($v);\n  };\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnnn0ui4.php:29\n\
    Stack trace:\n#0 /tmp/tmplnnn0ui4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplnnn0ui4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ $value to a float.\n  $value = floatval($value);\n\n  // If the $value is equidistant\
    \ from two integers, return the\n  // integer closest to the other integer.\n\
    \  if ($value >= $ints[0] && $value <= $ints[1]) {\n    return $ints[2];\n  }\n\
    \n  // If the $value is not equidistant from two integers, iterate through\n \
    \ // the array of potential integers until we find a number that is\n  // equidistant\
    \ from $value. Return the number that is furthest away\n  // from zero.\n  foreach\
    \ ($ints as $integer) {\n    if ($integer >= $value) {\n      return $integer;\n\
    \    }\n  }\n\n  // If all integers were equidistant from each other, return the\
    \ last\n  // integer in the array.\n  return $ints[count($ints)-1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp9z99dlcb.php\
    \ on line 29\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp9z99dlcb.php on line 37\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9z99dlcb.php:45\nStack trace:\n#0 /tmp/tmp9z99dlcb.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9z99dlcb.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    if ($value\
    \ == '-' || $value == '+') {\n        // If the number is equidistant from two\
    \ integers, round\n        // it away from zero.\n        return round(($value\
    \ === '-' ? -1.0 : 1.0) * $value, 0);\n    }\n    // Convert it to a float.\n\
    \    $float = (float)$value;\n    // If the value can be converted to a float\
    \ or if it is an integer,\n    // return the integer.\n    if ($float || intval($float)\
    \ == $float) {\n        return intval($float);\n    }\n    // Otherwise find the\
    \ closest integer.\n    $integers = range(abs($float), -abs($float), -1);\n  \
    \  foreach ($integers as $integer) {\n        $float = (float)$integer;\n    \
    \    if ($float || intval($float) == $float) {\n            return intval($integer);\n\
    \        }\n    }\n    // If no integers were found, the value itself is a float.\n\
    \    return $float;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$input = \"10.10\";\n$output = round($input);\necho \"$output\";\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpra4cncg6.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $increment = isset($value) ? '1' : '0.000000000000000001';\n  $min_absolute\
    \ = $value - floor($value);\n  if ($min_absolute < 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value) + 1;\n}\n</code>\n<|/ a tags=php,math,mathematical-expressions,rounding\
    \ |>\n<| c |>\nI wonder if this would work well with floating points and decimal\
    \ points?\n<|/ c |>\n<| c |>\nIt's for integers only. The rounding logic could\
    \ be changed easily though.\n<|/ c |>\n<| c |>\nI like your use of \"closest\"\
    \ here, but it's worth noting that \"closest\" isn't exactly correct here, since\
    \ there are two integers \"closer\" than the \"closest\" integer.\n<|/ c |>\n\
    <| a dscore=3 tags=php,math,mathematical-expressions,rounding |>\nI've been using\
    \ this function for a while now and it's been working well for me so far.\n<code>\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp85k6yle_.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if (is_numeric($value))\
    \ {\n    if ($value > 0) {\n      $closest = $value;\n      while ($closest >=\
    \ 10) {\n        $closest -= 10;\n      }\n      return $closest;\n    } else\
    \ {\n      $closest = $value;\n      while ($closest < -10) {\n        $closest\
    \ += 10;\n      }\n      return $closest;\n    }\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ly3xjr8.php:38\n\
    Stack trace:\n#0 /tmp/tmp2ly3xjr8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2ly3xjr8.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = preg_replace(\"\
    /[^0-9\\.]/\",\"\",$value);\n  $value = trim($value);\n  preg_match(\"/([0-9]+)\\\
    .([0-9]+)/\",$value,$matches);\n  if ($matches) {\n    $a1 = $matches[1];\n  \
    \  $b1 = $matches[2];\n  }\n  else {\n    $a1 = $matches[0];\n    $b1 = \"0\"\
    ;\n  }\n  if ($matches) {\n    $a2 = $matches[2];\n    $b2 = $matches[3];\n  }\n\
    \  else {\n    $a2 = $matches[0];\n    $b2 = \"0\";\n  }\n  if ($a1 == $a2) {\n\
    \    if ($b1 < $b2) {\n      return $a1;\n    }\n    return $a2;\n  }\n  if ($a1\
    \ > $a2) {\n    return $a1;\n  }\n  return $a2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9b0df8i3.php:52\n\
    Stack trace:\n#0 /tmp/tmp9b0df8i3.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp9b0df8i3.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Calculate\
    \ the distance between the two values.\n  $distance  = abs($value);\n  $distance2\
    \ = abs($value * 2);\n\n  // If these values are equidistant, round away from\
    \ zero.\n  if ($distance2 === $distance) {\n    $distance2 = $distance;\n  }\n\
    \n  // Return whichever value is the closest to zero.\n  return $distance2 ===\
    \ $distance ? floor($value) : ceil($value);\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1m60u5y_.php:33\n\
    Stack trace:\n#0 /tmp/tmp1m60u5y_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1m60u5y_.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $diff = $value\
    \ - round($value);\n  if ($diff <= 0) {\n    return round($value);\n  }\n  return\
    \ $value;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptm3nbtuo.php:27\n\
    Stack trace:\n#0 /tmp/tmptm3nbtuo.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptm3nbtuo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if ($value\
    \ === \"0\") {\n    return 0;\n  }\n  $numbers = array($value);\n  foreach ($numbers\
    \ as $number) {\n    $remainder = $number % 10;\n    if ($remainder === 0) {\n\
    \      return $number;\n    }\n  }\n  foreach ($numbers as $number) {\n    if\
    \ ($number % 10 !== 0) {\n      return $number;\n    }\n    $remainder = $number\
    \ % 10;\n    if ($remainder === 0) {\n      return $number;\n    }\n  }\n  return\
    \ $numbers[0];\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvg74c_pf.php:42\n\
    Stack trace:\n#0 /tmp/tmpvg74c_pf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpvg74c_pf.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ / abs($value)) * abs($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pctez2h.php:24\n\
    Stack trace:\n#0 /tmp/tmp8pctez2h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8pctez2h.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \n  $max = $value;\n  for ($i = 2; $i < 100; ++$i) {\n    if ($i > abs($value\
    \ - $max)) {\n      $max = $value;\n    }\n    $value = $i + $max;\n  }\n  return\
    \ $max;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp763d_m8u.php:32\n\
    Stack trace:\n#0 /tmp/tmp763d_m8u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp763d_m8u.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $diff1 = abs($value\
    \ - floor($value));\n  $diff2 = abs($value - round($value));\n  return max($diff1,\
    \ $diff2);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nIf $value is the string \"\
    -1.23\" then this won't work. floor() only works on integers.\n<|/ c |>\n<| c\
    \ |>\nIf you want it to work on floating numbers as well, use `round()` instead\
    \ of `floor()`\n<|/ c |>\n<| c |>\nThis is actually the best answer on this page\n\
    <|/ c |>\n<| c |>\nI love this solution, but if someone is looking for a decimal\
    \ solution check this link: https://stackoverflow.com/a/67308831/3790846\n<|/\
    \ c |>\n<| c |>\nI think it is wrong for $value = -1.23, because it will return\
    \ -1.\n<|/ c |>\n<| a tags=php,numbers,rounding |>\nThe shortest way is:\n<code>\n\
    $x = 1.234;\necho round(1.234,0);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis does\
    \ not round the value. See: http://php.net/manual/en/function.round.php\n<|/ c\
    \ |>\n<| c |>\nI agree, it does not round the value.  But it is the shortest way\
    \ as pointed out.\n<|/ c |>\n<| c |>\nIf you don't want float rounding you can\
    \ use ceil or floor.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. The\
    \ question is about rounding to **0 decimal**.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question. The question is about rounding to **0 decimal**.\n<|/ c\
    \ |>\n<| a tags=php,numbers,rounding |>\n<code>\n$x = 1.234;\necho round($x, 1);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\n`round` should be `round($x, 2)`\n<|/ c |>\n\
    <| c |>\nThis doesn't round the value. See: http://php.net/manual/en/function.round.php\n\
    <|/ c |>\n<| a tags=php,numbers,rounding dscore=5 |>\nFor rounding to a certain\
    \ decimal, you can use\n<code>\n$x = 1.234;\necho round($x, 2);\n</code>\nThis\
    \ outputs: 1.23\n<|/ a |>\n<| c |>\nThis doesn't round the value. See: http://php.net/manual/\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5djh1gv4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Return\
    \ closest integer that isn't equidistant from two integers.\n    // Example: closest_integer(\"\
    14.8\") should return 15\n    $float = $value * 1;\n    if ($float == floor($float))\
    \ {\n        return $float;\n    }\n    $int = $float;\n    while ($int - floor($int)\
    \ == 0.5) {\n        $int++;\n    }\n    return $int;\n}\n</code>\n<|/ a tags=php,arrays,compare\
    \ |>\n<| a dscore=0 |>\nI wrote a function that will loop through the array and\
    \ find the difference between each number and return the item in the array that\
    \ has the smallest difference.  \n<code>\nfunction candidate(...$args) {\n   \
    \ return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_90hpy82.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  global $nearest;\n\
    \  // Convert the value into a number\n  $number = floatval($value);\n\n  // See\
    \ if this is one of the values we already know about\n  $result = isset($nearest[$number])\
    \ ? $nearest[$number] : false;\n  // If we didn't find it yet, see if we can figure\
    \ out whether it's\n  // equidistant from any integer we already know about\n\
    \  if (!$result) {\n    // We need to keep track of the nearest integers for every\
    \ number\n    // we know about\n    $nearest = array();\n    // See if the number\
    \ is equidistant from two integers\n    if (isset($nearest[$number + 1])) {\n\
    \      // It is, so round away from zero\n      $result = ($number < $nearest[$number\
    \ + 1]) ? $nearest[$number + 1] : $number - 1;\n    } else {\n      // It isn't,\
    \ so find out which integer is the closest\n      $closest = $number;\n      for\
    \ ($i = $number; $i > 0; $i--) {\n        if ($i == $closest) {\n          break;\n\
    \        }\n        if ($nearest[$i]) {\n          $closest = $i;\n        }\n\
    \      }\n      // See which number is closest\n      $result = $closest;\n  \
    \  }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=2 tags=php,math |>\n<|\
    \ a dscore=2 |>\nA simple solution would be to make a table with the nearest integers\
    \ up, and a table with the nearest integers down.\n<code>\n+-------------+---------------+-----------+\n\
    | Number      | Nearest Up    | Nearest Down |\n+-------------+---------------+-----------+\n\
    | 10          | 10            | NULL       |\n| 15          | 15            |\
    \ NULL       |\n| 14.3        | 15            | 15         |\n| 14.3        |\
    \ 15            | -15        |\n| 14.3        | 15            | -15        |\n\
    | 13          | 14            | NULL       |\n| 14.4        | 14            |\
    \ 14         |\n| 14.4        | 14            | -14        |\n| 14.4        |\
    \ 14            | -14        |\n| 14.4        | 14            | -14        |\n\
    | 14.5        | 14            | 14         |\n| 13.9        | 13            |\
    \ NULL       |\n| 13.9        | 13            | NULL       |\n| 13.9        |\
    \ 13            | 13         |\n| 14.1        | 14            | NULL       |\n\
    | 15.5        | 15            | NULL       |\n| 15.5        | 15            |\
    \ NULL       |\n| 15.5        | 15            | NULL       |\n| 14.5        |\
    \ 14            | 14         |\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpavjr25ti.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  if ($value > 0) {\n    if ($value > .5) {\n      return ceil($value);\n   \
    \ }\n    return floor($value);\n  }\n  if ($value < 0) {\n    if ($value < -.5)\
    \ {\n      return floor($value);\n    }\n    return ceil($value);\n  }\n  return\
    \ $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbrkfj5w.php:37\n\
    Stack trace:\n#0 /tmp/tmpdbrkfj5w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdbrkfj5w.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $closest_integer\
    \ = null;\n    $min_int = null;\n    $max_int = null;\n\n    // Loop over every\
    \ item in the array\n    foreach ($GLOBALS['numbers'] as $index => $number) {\n\
    \        if ($min_int == null) {\n            $min_int = $number;\n          \
    \  $max_int = $number;\n        } else {\n            // Check to see if current\
    \ number is the lowest in the array\n            if ($number == $min_int) {\n\
    \                $min_int = $number;\n            }\n\n            // Check to\
    \ see if current number is the farthest from the lowest number\n            if\
    \ ($number < $max_int) {\n                if ($number > $min_int) {\n        \
    \            $max_int = $number;\n                }\n            }\n        }\n\
    \    }\n\n    // Loop over the array\n    foreach ($GLOBALS['numbers'] as $index\
    \ => $number) {\n        if ($number == $min_int) {\n            if ($closest_integer\
    \ == null) {\n                $closest_integer = $min_int;\n            } else\
    \ {\n                $closest_integer = $index;\n            }\n        } elseif\
    \ ($number == $max_int) {\n            if ($closest_integer == null) {\n     \
    \           $closest_integer = $max_int;\n            } else {\n             \
    \   $closest_integer = $index;\n            }\n        } else {\n            if\
    \ ($closest_integer == null) {\n                $closest_integer = $number;\n\
    \            } else {\n                $closest_integer = $index;\n          \
    \  }\n        }\n    }\n\n    return $closest_integer;\n}\n</code>\n<|/ a tags=arrays,php\
    \ dscore=0 |>\n<| a dscore=0 tags=arrays,php |>\ntry this:\n<code>\n$numbers =\
    \ array(\"10\", \"14.5\", \"10.5\", \"15\", \"16\", \"12\", \"13.5\", \"18.5\"\
    , \"19\", \"15.5\", \"17\", \"11\", \"18\", \"13\", \"16.5\", \"13.5\", \"9.5\"\
    , \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\"\
    , \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\"\
    , \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\"\
    , \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\"\
    , \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\"\
    , \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\", \"9.5\"\
    , \"\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5o4yohbs.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $positive\
    \ = (float) $value;\n    $negative = (float) -$value;\n    if ($positive == $negative)\
    \ {\n        return 0;\n    }\n\n    $absolute = abs($positive);\n\n    $is_odd_integer\
    \ = $positive % 2 === 1;\n    $is_odd_negative = $negative % 2 === 1;\n\n    $integer\
    \ = $absolute / (abs($negative) + abs($positive));\n    $integer_is_positive =\
    \ is_int($integer);\n\n    if (!$is_odd_integer && !$is_odd_negative) {\n    \
    \    // All numbers are equidistant from two integers so round towards zero.\n\
    \        $integer = floor($integer);\n    }\n\n    if ($integer_is_positive) {\n\
    \        return $integer;\n    }\n\n    return -$integer;\n}\n</code>\n<|/ a tags=php\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n$num = \"-245.75\";\n$result = abs(floor($num));\n\
    echo round($result); // -237\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n    $a = \"-245.75\";\n    $b = $a;\n    $a = abs($a);\n    $a = ceil($a);\n\
    \    $b = abs($b);\n    $b = ceil($b);\n    if ($a < $b) {\n        $c = $a;\n\
    \        $a = $b;\n        $b = $c;\n    }\n\n    echo $a;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpupnqgf4x.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx841y7l9.php:24\n\
    Stack trace:\n#0 /tmp/tmpx841y7l9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpx841y7l9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if (is_numeric($value))\
    \ {\n    if ($value == (int) $value) {\n      return (int) $value;\n    }\n  \
    \  // If the number is not an integer, return the value unchanged.\n    return\
    \ $value;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYes, I believe this solution\
    \ is what I'm looking for. I tried it with your example and got this error `Warning:\
    \ array_map(): Expected parameter 1 to be array, object given in C:\\xampp\\htdocs\\\
    test\\index.php on line 13`. Line 13 is `array_map(closest_integer, $test);`.\
    \ Should I post my full code here? I'm not sure why I'm getting that error.\n\
    <|/ c |>\n<| c |>\nI have updated the code to the example above and it now works.\n\
    <|/ c |>\n<| c |>\nI got the following error when running your updated code: `Fatal\
    \ error: Call to a member function closest_integer() on array in C:\\xampp\\htdocs\\\
    test\\index.php on line 15`. Line 15 is `array_map($value->closest_integer(),\
    \ $test);`. Any idea what I'm doing wrong?\n<|/ c |>\n<| c |>\nThanks, it's working\
    \ now. Just had to change `closest_integer` to `closest_integer` since I was calling\
    \ `closest_integer` in the `array_map` function.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nTry this - \n<code>\n$tests = [\n    new TestCase(2, '2', '2', '2'), \n\
    \    new TestCase(2, '2', '2', '4'), \n    new TestCase(2, '2', '2', '5'),\n \
    \   new TestCase(2, '2', '3', '5'),\n];\n$result = array_map(\n    function($a)\
    \ use ($tests) {\n        $b = [];\n        foreach ($tests as $t) {\n       \
    \     $b[] = $t->closest_integer($a[0]);\n        }\n        return $b;\n    },\n\
    \    $tests\n);\n\nprint_r($result);\n</code>\nDemo\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nYou can do this with array_map:\n<code>\n<?php\n\nclass TestCase\n{\n  \
    \  private $a;\n    private $b;\n    private $c;\n    private $d;\n\n    public\
    \ function __construct($a, $b, $c, $d)\n    {\n        $this->a = $a;\n      \
    \  $this->b = $b;\n        $this->c = $c;\n        $this->d = $d;\n    }\n\n \
    \   public function closest_integer($val)\n    {\n        return round($val) ==\
    \ round($val);\n    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvrt2fh74.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // Write\
    \ your code here\n    $values = explode('.', $value);\n    $closest_integer =\
    \ '';\n    $previous_integer = '';\n    $closest_value = 0;\n    foreach ($values\
    \ as $value) {\n        $current = floatval($value);\n        if ($closest_integer\
    \ == '') {\n            $closest_integer = $current;\n        }\n        else\
    \ if (abs($current - $closest_integer) < abs($current - $previous_integer)) {\n\
    \            $closest_integer = $current;\n        }\n        else {\n       \
    \     $previous_integer = $current;\n        }\n    }\n\n    return $closest_integer;\n\
    }\n\n$value = closest_integer(\"13.6\");\necho 'Part 1: ' . $value . \"\\n\";\n\
    \n$value = closest_integer(\"13.60\");\necho 'Part 2: ' . $value . \"\\n\";\n\
    </code>\nOutput:\n<code>\nPart 1: 13\nPart 2: 14\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7p9m856i.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $number = $value\
    \ + 0;\n  if ($number < $number) {\n    $number++;\n  }\n  if ($number > $number)\
    \ {\n    $number--;\n  }\n  return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2c0mw9_.php:32\n\
    Stack trace:\n#0 /tmp/tmpo2c0mw9_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpo2c0mw9_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Ensure that\
    \ $value is numeric\n  if (is_numeric($value)) {\n    // If $value is an integer,\
    \ return it\n    if ($value == intval($value)) {\n      return intval($value);\n\
    \    }\n    // Otherwise, get the integer closest to $value\n    $difference =\
    \ abs($value - intval($value));\n    if ($difference == 0) {\n      return $value;\n\
    \    }\n    return intval($value);\n  }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,php\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiai9f9z_.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if (!is_numeric($value))\
    \ {\n    throw new InvalidArgumentException(\"Value must be numeric.\");\n  }\n\
    \n  $closest = ceil($value);\n  $difference = $value - $closest;\n\n  if ($difference\
    \ >= 0) {\n    return $closest;\n  }\n\n  return -$closest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfs51zca.php:35\n\
    Stack trace:\n#0 /tmp/tmpjfs51zca.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjfs51zca.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    if ($value\
    \ == 0)\n        return 0;\n    $diff = $value - floor($value);\n    if (abs($diff)\
    \ < 0.00000001) {\n        return $value;\n    }\n    if ($diff > 0) {\n     \
    \   $diff = $diff * -1; // Make sure we round up instead of down when diff is\
    \ bigger than 1\n    } else {\n        // If the number is smaller than 0, we\
    \ must round DOWN to the closest negative number\n        $diff = abs($diff);\n\
    \        $diff = $diff * -1; // Make sure we round up instead of down when diff\
    \ is bigger than 1\n    }\n    return floor($value) + $diff;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwp48sys.php:36\n\
    Stack trace:\n#0 /tmp/tmpxwp48sys.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxwp48sys.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Check if\
    \ string is numeric\n  if (!is_numeric($value)) {\n    throw new Exception(\"\
    The function 'closest_integer' only takes a numeric string.\");\n  }\n\n  // Check\
    \ if value is negative\n  if ($value < 0) {\n    throw new Exception(\"The function\
    \ 'closest_integer' only takes a non-negative number.\");\n  }\n\n  // Check if\
    \ value is zero\n  if ($value == 0) {\n    return 0;\n  }\n\n  // Calculate distance\
    \ of $value from zero\n  $distance_from_zero = abs($value);\n\n  // Check if value\
    \ is equidistant from two integers\n  if ($distance_from_zero < 2) {\n    return\
    \ $value;\n  }\n\n  // Check if value is equidistant from two floats\n  if ($distance_from_zero\
    \ < 1) {\n    $distance_from_zero = 1;\n  }\n\n  // If $value is equidistant from\
    \ two integers, return a rounded number\n  return round($value, -($distance_from_zero\
    \ % 2));\n}\n</code>\n<|/ a |>\n<| c |>\nThat is absolutely awesome solution.\
    \ Really appreciate the explanation!\n<|/ c |>\n<| a |>\nI ran into this problem\
    \ recently. For my particular case I was trying to round a number to the next\
    \ multiple of 5. The function I came up with was very similar to yours, but I\
    \ used modulus and division to get it done. \n<code>\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmsd3fg_9.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    if ($value\
    \ == 0) {\n        return 0;\n    }\n\n    $roundTowardZero = function ($number)\
    \ use ($value) {\n        return $number < 0 ? ceil($number) : floor($number);\n\
    \    };\n\n    $distanceFromZero = function ($number) {\n        return $number\
    \ < 0 ? abs($number) : -abs($number);\n    };\n\n    $diffFromZero = abs($value\
    \ - ($roundTowardZero($value)));\n\n    $closestInteger = $roundTowardZero($diffFromZero\
    \ / 2);\n\n    if (abs($value - $closestInteger) < abs($value + $closestInteger))\
    \ {\n        return $closestInteger;\n    }\n\n    return $closestInteger;\n}\n\
    \n<|/ file source=gitlab filename=vf-functions.php ext=.php |>\n<?php\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph_dsdg3t.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return ceil(abs($value));\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpres_ac.php:24\n\
    Stack trace:\n#0 /tmp/tmpdpres_ac.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdpres_ac.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $lower = $higher = $value;\n  $lower = $lower < 0 ? -$lower : 0;\n  $higher\
    \ = $value > 0 ? $value : 0;\n\n  while ($lower > $higher + 1) {\n    $value =\
    \ floor($value / 10);\n    if ($value == $lower) {\n      return $lower;\n   \
    \ } elseif ($value == $higher) {\n      return $higher;\n    }\n    $lower = floor($lower\
    \ / 10);\n    $higher = floor($higher / 10);\n  }\n  return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsng4vak5.php:40\n\
    Stack trace:\n#0 /tmp/tmpsng4vak5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpsng4vak5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $closest_integer\
    \ = $value;\n  foreach ($GLOBALS['_number_to_word_map'] as $number => $word) {\n\
    \    $distance = $number - $closest_integer;\n    if (abs($distance) < abs($closest_integer\
    \ - $number)) {\n      $closest_integer = $number;\n    }\n  }\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpu1emz1n4.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1emz1n4.php:30\n\
    Stack trace:\n#0 /tmp/tmpu1emz1n4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpu1emz1n4.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_5lrgww.php:23\n\
    Stack trace:\n#0 /tmp/tmp7_5lrgww.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7_5lrgww.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  if ($value\
    \ === \"0\") return 0;\n  if ($value === \"1\") return 1;\n  if ($value === \"\
    2\") return 2;\n  if ($value === \"4\") return 4;\n  if ($value === \"9\") return\
    \ 9;\n  $fractional = (float)($value - floor($value)) * 100;\n  return floor($value)\
    \ + round($fractional/10);\n}\n\n$num_rows = 10;\n$num_cols = 6;\n\necho \"<table\
    \ border=1 width=\\\"$num_cols\\\" cellpadding=0 cellspacing=0>\\n\";\nfor ($row\
    \ = 1; $row <= $num_rows; $row++) {\n  echo \"<tr>\\n\";\n  for ($col = 1; $col\
    \ <= $num_cols; $col++) {\n    $x = $col * 0.3;\n    $y = $row * 0.1;\n    $angle\
    \ = (mt_rand() * 30) - 15;\n    $radius = mt_rand(1,5);\n    $fillColor = (mt_rand(0,50)\
    \ > 50 ? \"#FFFFFF\" : \"#000000\");\n    $circleFill = sprintf('fill=\"#%s\"\
    \ cx=%s cy=%s r=%s stroke-width=0 stroke-opacity=0 stroke=\"#000000\"',\n    \
    \  htmlspecialchars($fillColor), htmlspecialchars($x), htmlspecialchars($y), htmlspecialchars($radius));\n\
    \    $circleStroke = sprintf('fill=\"%s\" cx=%s cy=%s r=%s stroke-width=\"5\"\
    \ stroke-opacity=1 stroke=\"%s\"',\n      htmlspecialchars($fillColor), htmlspecialchars($x),\
    \ htmlspecialchars($y), htmlspecialchars($radius), htmlspecialchars($fillColor));\n\
    \    $textFill = sprintf('fill=\"#%s\" x=\"%s\" y=\"%s\" font-size=\"%s\" font-family=\"\
    sans-serif\"',\n      htmlspecialchars($fillColor), htmlspecialchars($x), htmlspecialchars($y),\
    \ htmlspecialchars($radius));\n    $textStroke = sprintf('fill=\"%s\" x=\"%s\"\
    \ y=\"%s\" font-size=\"%s\" font-family=\"sans-serif\"',\n      htmlspecialchars($fillColor),\
    \ htmlspecialchars($x), htmlspecialchars($y), htmlspecialchars($radius));\n  \
    \  // Print the circle\n    echo \"  <td>\n    <svg width=$num_cols height=$num_rows\
    \ xmlns=\\\"http://www.w3.org/2000/svg\\\">\n      <circle $circleFill $circleStroke\n\
    \        transform=\\\"translate(\" . htmlspecialchars($x) . \",\" . htmlspecialchars($y)\
    \ . \") rotate($angle)\\\" />\n      <text $textFill $textStroke\n        transform=\\\
    \"translate(\" . htmlspecialchars($x) . \",\" . htmlspecial\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb1w3p0r0.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return intval(round($value\
    \ * 100) / 100);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxshm5va.php:25\n\
    Stack trace:\n#0 /tmp/tmpzxshm5va.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzxshm5va.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $n = abs($value);\n\
    \  $diff = $n % 1;\n  return $n - ($diff ? $diff : 0);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2c9wadaw.php:26\n\
    Stack trace:\n#0 /tmp/tmp2c9wadaw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2c9wadaw.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$parts = explode(\"\
    .\", $value);\n\t$whole_number = $parts[0];\n\t$decimal_value = $parts[1];\n\t\
    $whole_number = abs((int)$whole_number);\n\tif ($whole_number == 0) {\n\t\treturn\
    \ 0;\n\t}\n\t$decimal_value = abs((int)$decimal_value);\n\t$diff = $decimal_value\
    \ - $whole_number;\n\tif ($diff < 0) {\n\t\treturn $whole_number - 1;\n\t} else\
    \ {\n\t\treturn $whole_number + 1;\n\t}\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_n5h2y3.php:37\n\
    Stack trace:\n#0 /tmp/tmp8_n5h2y3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8_n5h2y3.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Initialize\
    \ all variables to 0.\n  $closest = 0;\n  $closest = abs($value);\n  $closest\
    \ = ceil($closest);\n  $closest = abs($closest);\n  return $closest;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprh7t13c9.php:28\n\
    Stack trace:\n#0 /tmp/tmprh7t13c9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprh7t13c9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxh20m46.php:24\n\
    Stack trace:\n#0 /tmp/tmppxh20m46.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppxh20m46.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ value to a numeric value\n  $value = floatval($value);\n\n  // Return null if\
    \ $value is 0\n  if ($value == 0)\n    return null;\n\n  // Get a list of all\
    \ the powers of 10\n  $powers = array_map(function ($value) {\n    return pow(10,\
    \ $value);\n  }, range(1, floor(log($value, 10)) + 1));\n\n  // Find which power\
    \ of ten $value is\n  $index = array_search(floor($value), $powers);\n  $power\
    \ = $powers[$index];\n\n  // Return closest integer if $value is an integer\n\
    \  if ($value == $power)\n    return $value;\n\n  // Return closest integer if\
    \ $value is equidistant from two powers of ten\n  if ($index - 1 == 0) {\n   \
    \ $previous = $powers[$index - 1];\n    return $previous == $power ? $previous\
    \ : $previous + 1;\n  } else {\n    return $powers[$index - 1] + 1;\n  }\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6x2h_mz.php:50\n\
    Stack trace:\n#0 /tmp/tmpi6x2h_mz.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpi6x2h_mz.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $number = abs($value);\n\
    \  $is_neg = ($value < 0);\n  $diff = max(abs($number), abs($number) - abs($number)\
    \ % 2);\n  $closest = $is_neg ? ($diff + abs($number)) : $diff;\n  return $is_neg\
    \ ? $closest - abs($number) : $closest;\n}\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqaxvdp9.php:28\n\
    Stack trace:\n#0 /tmp/tmphqaxvdp9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphqaxvdp9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $numbers =\
    \ array(\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\" => 2,\n    \"3\" => 3,\n\
    \    \"4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n    \"7\" => 7,\n    \"8\"\
    \ => 8,\n    \"9\" => 9,\n  );\n  $closest = $numbers[0];\n  foreach ($numbers\
    \ as $key => $number) {\n    if ($number == $value) {\n      if ($key + 1 < count($numbers))\
    \ {\n        $closest = $numbers[$key + 1];\n      }\n      break;\n    }\n  \
    \  $closest = max($number, $closest);\n  }\n  return $closest;\n}\n\n$num = \"\
    \";\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9j3dvldg.php:48\n\
    Stack trace:\n#0 /tmp/tmp9j3dvldg.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9j3dvldg.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the input to a float\n  $value = floatval($value);\n  // If the number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if (abs($value) == intval(abs($value)))\
    \ {\n    return round($value);\n  }\n  $closest = null;\n  $prev    = null;\n\
    \  $numbers  = range(-10, 10);\n  foreach ($numbers as $number) {\n    // If this\
    \ is the first number in the range, we've got a closer one\n    // than any number\
    \ we've found so far\n    if ($prev === null) {\n      $prev = $number;\n    \
    \  continue;\n    }\n    // If the number is equal to the previous number in the\
    \ range,\n    // we've found a closer number.\n    if ($number == $prev) {\n \
    \     $closest = $prev;\n      break;\n    }\n    // Otherwise, the number is\
    \ further away than any number we've found\n    // so far. Use the previous number\
    \ in the range.\n    $prev = $number;\n  }\n  // If we still haven't found a closer\
    \ number, use the first number in the\n  // range\n  return $prev;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8241r7r8.php:53\n\
    Stack trace:\n#0 /tmp/tmp8241r7r8.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp8241r7r8.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $divisor = pow(10, ceil(log10($value)));\n    if ($value %\
    \ $divisor == 0) {\n        return $value;\n    } else {\n        return $value\
    \ / $divisor;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnesmkjhk.php:31\n\
    Stack trace:\n#0 /tmp/tmpnesmkjhk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnesmkjhk.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round(abs($value));\n\
    }\n</code>\nFor what it's worth, I also found this PHP script to be pretty helpful:\
    \ http://phpscript.net/php/integer-closest-number-to-a-given-number-in-php.html\n\
    <|/ a dscore=5 |>\n<| c |>\nThis is really helpful.  I was trying to write something\
    \ similar but was having trouble with edge cases.  Thanks!\n<|/ c |>\n<| c |>\n\
    This is exactly what I was looking for! I couldn't find anything like this. Thanks!\n\
    <|/ c |>\n<| c |>\nI like it! But I used `abs($value)` instead of `abs($value\
    \ - floor($value))` because `floor()` doesn't work with floats.\n<|/ c |>\n<|\
    \ c |>\nGreat solution, I was looking for a number closest to a given number.\n\
    <|/ c |>\n<| c |>\nDoesn't work if the number is below zero\n<|/ c |>\n<| a |>\n\
    You can do like this:\n<code>\n<?php\n$number = 80.85;\n$closestToZero = abs(($number\
    \ - (int)$number)); //80\n$closestToZero = abs(($number - (int)$number) - 0.5);\
    \ //79.5\n$closestToZero = abs(($number - (int)$number) - 0.6); //79\n$closestToZero\
    \ = abs(($number - (int)$number) - 0.7); //78.5\n$closestToZero = abs(($number\
    \ - (int)$number) - 0.8); //78\n$closestToZero = abs(($number - (int)$number)\
    \ - 0.9); //77.5\n$closestToZero = abs(($number - (int)$number) - 1.0); //77\n\
    $closestToZero = abs(($number - (int)$number) - 1.1); //76.5\n$closestToZero =\
    \ abs(($number - (int)$number) - 1.2); //76\n$closestToZero = abs(($number - (int)$number)\
    \ - 1.3); //75.5\n$closestToZero = abs(($number - (int)$number) - 1.4); //75\n\
    $closestToZero = abs(($number - (int)$number) - 1.5); //74.5\n$closestToZero =\
    \ abs(($number - (int)$number) - 1.6); //74\n$closestToZero = abs(($number - (int)$number)\
    \ - 1.7); //73\n$closestToZero = abs(($number - (int)$number) - 1.8); //72\n$closestToZero\
    \ = abs(($number - (int)$number) - 1.9); //71\n$closestToZero = abs(($number -\
    \ (\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpro_dukjr.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $parts =\
    \ explode(\".\", $value);\n    $d = $parts[0] - $parts[1];\n    return round($d);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ywneekh.php:26\n\
    Stack trace:\n#0 /tmp/tmp5ywneekh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5ywneekh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return floor((round($value)\
    \ + round($value, 2)) / 2);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubqqq4yu.php:24\n\
    Stack trace:\n#0 /tmp/tmpubqqq4yu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpubqqq4yu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // The value\
    \ of $value must be a string\n    $value = is_string($value) ? $value : \"\";\n\
    \    // Check if the string is empty\n    if (empty($value)) {\n        // Return\
    \ an empty string\n        return \"\";\n    }\n    // The length of the string\
    \ must be at least one character\n    $value = strlen($value);\n    // Convert\
    \ value to an integer\n    $value = intval($value);\n    // If the value is negative,\
    \ we must add it to it to get the positive value\n    if ($value < 0) {\n    \
    \    $value += 1;\n    }\n    // Convert the value to an array\n    $value = str_split($value);\n\
    \    // Return the closest integer\n    return $value[count($value) - 1];\n}\n\
    add_filter('wp_next_post_rel_link_func', 'closest_integer', 10, 3);\nadd_filter('wp_previous_post_rel_link_func',\
    \ 'closest_integer', 10, 3);\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function add_filter()\
    \ in /tmp/tmpm6uqsoyg.php:36\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpm6uqsoyg.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    if ($value\
    \ == 0) {\n        return 0;\n    }\n\n    $closest_integer = $value;\n    $closest_integer\
    \ = $closest_integer - 1;\n\n    foreach ($GLOBALS['hooks']['Filter_Plugin_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table_Admin_Settings_Table\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmxonavu6.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $diff = $value\
    \ - ceil(abs($value));\n    if ($diff > 0) {\n        return ceil($value);\n \
    \   }\n    return floor($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzon3z6vd.php:28\n\
    Stack trace:\n#0 /tmp/tmpzon3z6vd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzon3z6vd.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    // TODO:\
    \ Implement Function\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeg0ktf1l.php:24\n\
    Stack trace:\n#0 /tmp/tmpeg0ktf1l.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeg0ktf1l.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round(max(round($value,\
    \ -2), round($value, 0)));\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1m0nht4s.php:23\n\
    Stack trace:\n#0 /tmp/tmp1m0nht4s.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1m0nht4s.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
