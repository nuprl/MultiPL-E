name: HumanEval_55_fib
language: php
results:
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 2)\n \
    \       return $n;\n    return fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoi5ouwsl.php:20\n\
    Stack trace:\n#0 /tmp/tmpoi5ouwsl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpoi5ouwsl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) return\
    \ 1;\n    return fib(n - 2) + fib(n - 1);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpuwinanve.php on line 11\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpuwinanve.php on line 11\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpuwinanve.php on line 11\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpuwinanve.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpuwinanve.php:18\nStack trace:\n#0 /tmp/tmpuwinanve.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuwinanve.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 0) {\n\
    \        return -1;\n    } else if ($n === 0) {\n        return 0;\n    } else\
    \ if ($n === 1) {\n        return 1;\n    } else {\n        return fib(floor($n\
    \ / 2)) + fib(floor($n / 3) + 1);\n    }\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpy0a_bp2q.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    static $a, $b, $c;\n\
    \    if ($n <= 0) { return 1; }\n    if ($n <= 2) { return $n; }\n    if ($a ===\
    \ null) { $a = fib(0); }\n    if ($b === null) { $b = fib(1); }\n    if ($c ===\
    \ null) { $c = fib(2); }\n    return $a + $b - $c;\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdm256xc.php:23\n\
    Stack trace:\n#0 /tmp/tmpmdm256xc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmdm256xc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    // If n is undefined\
    \ or null, return a 0.\n    if ( is_null($n) || $n == 0 ) {\n        return 0;\n\
    \    }\n\n    // If n is 1, return 1.\n    if ( $n == 1 ) {\n        return 1;\n\
    \    }\n\n    // If n is odd, return the first odd fibonacci number.\n    if (\
    \ $n % 2 != 0 ) {\n        return fib($n - 1) + fib($n - 2);\n    }\n\n    //\
    \ If n is even, return the last odd fibonacci number.\n    return fib($n - 1)\
    \ + fib($n - 2);\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) return\
    \ 1;\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphlyaowm_.php:19\n\
    Stack trace:\n#0 /tmp/tmphlyaowm_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphlyaowm_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 1) {\n\t\
    \treturn $n;\n\t}\n\treturn fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return $n<2?$n:fib(--$n)\
    \ + fib(--$n);\n}\n$n = 10;\nwhile($n>1){\n  $fib_result = fib($n);\n  echo \"\
    $n: $fib_result\\n\";\n  $n--;\n}\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "10: 55\n9: 34\n8: 21\n7: 13\n6: 8\n5: 5\n4: 3\n3: 2\n2: 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\t$result = 1;\n\tfor\
    \ ($i = 1; $i <= $n; $i++) {\n\t\t$result = $result + $i;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5w06gewo.php:22\n\
    Stack trace:\n#0 /tmp/tmp5w06gewo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5w06gewo.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return $n;\n\t}\n\treturn fib(--$n) + fib(--$n);\n}\n\n/**\n * Get the fibonacci\
    \ number of the given integer.\n * \n * In fact, it is implemented by a recursive\
    \ function.\n * \n * @return int\n */\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\t$n--;\n\tif ($n <\
    \ 2) return $n;\n\treturn fib($n - 1) + fib($n - 2);\n}\n\n/**\n * Returns the\
    \ number of times 'x' is divided by 'y' in PHP\n * @link http://www.php.net/manual/en/function.bcdiv.php\n\
    \ */\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposuo9814.php:24\n\
    Stack trace:\n#0 /tmp/tmposuo9814.php(31): test()\n#1 {main}\n  thrown in /tmp/tmposuo9814.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 1) {\n\
    \        return $n;\n    }\n    return fib(floor($n / 2)) + fib(floor($n / 3));\n\
    }\n\n/**\n * Calculate a number's digit sum.\n * @method digit_sum($number)\n\
    \ * @param $number\n * @return int\n */\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuuj04__7.php:27\n\
    Stack trace:\n#0 /tmp/tmpuuj04__7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuuj04__7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\treturn fib2($n - 1)\
    \ + fib2($n - 2);\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib2() in /tmp/tmp0c6n8wm3.php:10\n\
    Stack trace:\n#0 /tmp/tmp0c6n8wm3.php(14): fib(10)\n#1 /tmp/tmp0c6n8wm3.php(18):\
    \ candidate(10)\n#2 /tmp/tmp0c6n8wm3.php(25): test()\n#3 {main}\n  thrown in /tmp/tmp0c6n8wm3.php\
    \ on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  // Base case\n  if\
    \ ($n <= 1)\n    return $n;\n  // Add all numbers in the series\n  $fibs = fib(floor($n\
    \ / 2) - 1) + fib(floor($n / 2));\n  // Return the nth number\n  return $fibs[$n\
    \ - 1];\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfz_4j9n9.php:23\n\
    Stack trace:\n#0 /tmp/tmpfz_4j9n9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfz_4j9n9.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 1) {\n\t\
    \treturn $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return isset($array[$n])?$array[$n]:fib($n-1)+fib($n-2)\n\
    }\n\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprz1udps2.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) return\
    \ $n;\n  return fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 0) return\
    \ 0;\n    if ($n <= 2) return 1;\n    return fib($n - 1) + fib($n - 2);\n}\n\n\
    /**\n * Returns the sum of all numbers in an array.\n */\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) return\
    \ $n;\n  return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args) {\n  \
    \  return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $fib = [0, 1];\n\
    \    $x = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $fib[$i] = $fib[$i -\
    \ 1] + $fib[$i - 2];\n        $x = $fib[$i];\n    }\n    return $x;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) { return\
    \ 1; }\n    return fib(n - 1) + fib(n - 2);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpj8lflplp.php on line 11\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpj8lflplp.php on line 11\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpj8lflplp.php on line 11\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpj8lflplp.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpj8lflplp.php:18\nStack trace:\n#0 /tmp/tmpj8lflplp.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpj8lflplp.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return $n < 2 ? $n\
    \ : fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return $n < 2\n\
    \        ? $n\n        : $fib(--$n) + $fib(--$n);\n}\n</code>\n<|/ a dscore=0\
    \ tags=php,fibonacci |>\n<| c |>\nYou do not need to define it recursively: `fib($n)\
    \ { return n < 2 ? n : fib(--$n) + fib(--$n); }` works.\n<|/ c |>\n<| c |>\nYes,\
    \ but that still does not explain how to calculate the `n`th fibonacci number.\n\
    <|/ c |>\n<| c |>\nYou don\u2019t need to define the function recursively, because\
    \ it is defined in PHP itself.\n<|/ c |>\n<| c |>\nYes, but OP specifically asked\
    \ how to calculate it by recursion.\n<|/ c |>\n<| c |>\n\"How to calculate the\
    \ nth Fibonacci number\" - that's what the OP asked for.\n<|/ c |>\n<| a dscore=0\
    \ tags=php,fibonacci |>\nI understand this is an old question, however I found\
    \ it very difficult to find a solution in PHP using recursion.\nAs stated by others,\
    \ an iterative method would be:\n<code>\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmdibb510.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n <= 0) {\n \
    \   return 1;\n  }\n  return fib(int($n - 1) + fib(int($n - 2)));\n}\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function int() in /tmp/tmpb_cumin5.php:13\n\
    Stack trace:\n#0 /tmp/tmpb_cumin5.php(16): fib(10)\n#1 /tmp/tmpb_cumin5.php(20):\
    \ candidate(10)\n#2 /tmp/tmpb_cumin5.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpb_cumin5.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) return\
    \ $n;\n  return fib(n - 1) + fib(n - 2);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpu9fxpt1o.php on line 11\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpu9fxpt1o.php on line 11\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpu9fxpt1o.php on line 11\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpu9fxpt1o.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpu9fxpt1o.php:18\nStack trace:\n#0 /tmp/tmpu9fxpt1o.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu9fxpt1o.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return $n < 2 ?\
    \ $n : fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  // Initialize $fib\
    \ to be the first two numbers in the sequence,\n  // then walk through the sequence\
    \ by starting with a third and then a fourth.\n  // Each number is the sum of\
    \ the previous two.\n  if ($n <= 2) return 1;\n  $fib = [0, 1];\n  for ($i = 2;\
    \ $i <= $n; $i++) {\n    $fib[] = $fib[$i - 1] + $fib[$i - 2];\n  }\n  return\
    \ $fib[$n];\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is an example for you\
    \ which uses memoization to avoid recalculating the same Fibonacci number many\
    \ times per second:\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8j3ol8ut.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n    return fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return $n < 2 ?\
    \ $n : fib(array_slice($array, -$n+1, 1, $n)) + ($n == 0 || $array[0] ? $array[1]\
    \ : 0);\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, null given in\
    \ /tmp/tmprfz4zn7s.php on line 10\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprfz4zn7s.php:18\nStack trace:\n#0 /tmp/tmprfz4zn7s.php(25): test()\n\
    #1 {main}\n  thrown in /tmp/tmprfz4zn7s.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 1) {\n\t\
    \treturn $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 1) {\n\t\
    \treturn 1;\n\t}\n\treturn fib(n - 1) + fib(n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpkzr7l1yi.php on line 13\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpkzr7l1yi.php on line 13\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpkzr7l1yi.php on line 13\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpkzr7l1yi.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpkzr7l1yi.php:21\nStack trace:\n#0 /tmp/tmpkzr7l1yi.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkzr7l1yi.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 2) {\n\
    \        return $n;\n    }\n    return fib(fib(n - 1) + fib(n - 2));\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpd8enkahf.php on line 13\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpd8enkahf.php on line 13\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpd8enkahf.php on line 13\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpd8enkahf.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpd8enkahf.php:21\nStack trace:\n#0 /tmp/tmpd8enkahf.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd8enkahf.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return $n < 2 ? $n\
    \ : fib($n - 1) + fib($n - 2);\n}\n\n$sum = 0;\nfor ($i = 0; $i < 10; $i++) {\n\
    \  $sum += fib($i) * pow(10, $i);\n}\n\necho 'Fibonacci series: '.$sum.'<br />';\n\
    \nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'Fibonacci series: 36238532110<br />'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\treturn fib(n - 1)\
    \ + fib(n - 2);\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmptdad4d60.php on line 10\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmptdad4d60.php on line 10\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmptdad4d60.php on line 10\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmptdad4d60.php on line 10\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmptdad4d60.php on line 10\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmptdad4d60.php on line 10\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmptdad4d60.php\
    \ on line 10\n\nWarning: A non-numeric value encountered in /tmp/tmptdad4d60.php\
    \ on line 10\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmptdad4d60.php on line 10\n\
    \nWarning: A non-numeric value encountered in /tmp/tmptdad4d60.php on line 10\n\
    \nWarning: Use of undefined constant n - assumed 'n' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmptdad4d60.php on line 10\n\nWarning: A\
    \ non-numeric value encountered in /tmp/tmptdad4d60.php on line 10\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmptdad4d60.php on line 10\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmptdad4d60.php on line 10\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmptdad4d60.php on line 10\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmptdad4d60.php on line 10\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmptdad4d60.php\
    \ on line 10\n\nWarning: A non-numeric value encountered in /tmp/tmptdad4d60.php\
    \ on line 10\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a fut"
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $a = 1;\n    $b\
    \ = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $a = $a + $b;\n        $b =\
    \ $a - $b;\n    }\n    return $a;\n}\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw0hh4r1.php:23\n\
    Stack trace:\n#0 /tmp/tmprw0hh4r1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprw0hh4r1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 1) {\n\
    \        return $n;\n    }\n\n    return fib($n - 1) + fib($n - 2);\n}\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return 1;\n\t} else if ($n <= 3) {\n\t\treturn $n;\n\t} else {\n\t\treturn fib(fib(n\
    \ - 1) + fib(n - 2)); // Use recursion.\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmphsu8djfl.php on line 15\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmphsu8djfl.php on line 15\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmphsu8djfl.php on line 15\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmphsu8djfl.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphsu8djfl.php:23\nStack trace:\n#0 /tmp/tmphsu8djfl.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphsu8djfl.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 3) return\
    \ 1;\n    return fib(n - 2) + fib(n - 1);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpehyhmc9o.php on line 11\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpehyhmc9o.php on line 11\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpehyhmc9o.php on line 11\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpehyhmc9o.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpehyhmc9o.php:18\nStack trace:\n#0 /tmp/tmpehyhmc9o.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpehyhmc9o.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 1) return\
    \ $n;\n\treturn fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpot6g8fj2.php:20\n\
    Stack trace:\n#0 /tmp/tmpot6g8fj2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpot6g8fj2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrm9csow.php:21\n\
    Stack trace:\n#0 /tmp/tmpdrm9csow.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdrm9csow.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n    else {\n        return fib($n - 1) + fib($n -\
    \ 2);\n    }\n}\n</code>\n<|/ a tags=php,recursion |>\n<| a tags=php,recursion\
    \ dscore=0 |>\nThe simplest solution is this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl3p8tb0h.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) {\n  \
    \  return 1;\n  }\n\n  if ($n === 2) {\n    return 2;\n  }\n\n  return fib($n\
    \ - 1) + fib($n - 2);\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2nkf4ie.php:25\n\
    Stack trace:\n#0 /tmp/tmpp2nkf4ie.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpp2nkf4ie.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return $n <= 1 ? 1\
    \ : fib($n - 1) + fib($n - 2);\n}\n\n/**\n * Generates pseudo-random hex string.\n\
    \ * Warning: this function is not secure at all and should not be used for\n *\
    \ security-sensitive applications.\n * @param string $length Desired string length.\
    \ 16 for standard pseudo-random\n *                      string.\n * @return string\
    \ Pseudo-random string value.\n */\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5t9_xbj3.php:26\n\
    Stack trace:\n#0 /tmp/tmp5t9_xbj3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5t9_xbj3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n    return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 3) {\n\
    \        return 1;\n    }\n    if ($n < 9) {\n        return fib($n - 2) + fib($n\
    \ - 3);\n    }\n    return fib($n - 4) + fib($n - 7);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbt80j_p5.php:24\n\
    Stack trace:\n#0 /tmp/tmpbt80j_p5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbt80j_p5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $fibs = array(0,\
    \ 1, 1, 2, 3);\n    return $fibs[$n];\n}\nfunction candidate(...$args) {\n   \
    \ return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !==\
    \ 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2j70mg2v.php:18\n\
    Stack trace:\n#0 /tmp/tmp2j70mg2v.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2j70mg2v.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    $n = 0;\n\t}\n\treturn ($n == 0) ? 1 : fib(--$n) + fib(--$n);\n}\n\n/*\n * Calculate\
    \ nth fibonacci number using continued fraction.\n * \n * f(n) = f(n-1) + f(n-2)\
    \ where f(0) = 1\n */\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2c33l_f8.php:26\n\
    Stack trace:\n#0 /tmp/tmp2c33l_f8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2c33l_f8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $n = abs($n);\n\
    \    if ($n < 2)\n        return $n;\n    return fib($n - 1) + fib($n - 2);\n\
    }\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return ($n<2) ?\
    \ 1 : fib(fibonacci($n-1))+fibonacci($n-2);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fibonacci() in\
    \ /tmp/tmphzmjdhmy.php:10\nStack trace:\n#0 /tmp/tmphzmjdhmy.php(13): fib(10)\n\
    #1 /tmp/tmphzmjdhmy.php(17): candidate(10)\n#2 /tmp/tmphzmjdhmy.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmphzmjdhmy.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n === 0) {\n\
    \    return 0;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpjj6y_zr_.php\
    \ on line 13\n\nWarning: A non-numeric value encountered in /tmp/tmpjj6y_zr_.php\
    \ on line 13\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpjj6y_zr_.php on line 13\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpjj6y_zr_.php on line 13\n\
    \nWarning: Use of undefined constant n - assumed 'n' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning: A\
    \ non-numeric value encountered in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpjj6y_zr_.php on line 13\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpjj6y_zr_.php\
    \ on line 13\n\nWarning: A non-numeric value encountered in /tmp/tmpjj6y_zr_.php\
    \ on line 13\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a fut"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return ($n <= 1) ?\
    \ $n : fib(min($n-1, 2)) + fib(min($n-1, 3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdyk5jd0.php:18\n\
    Stack trace:\n#0 /tmp/tmpsdyk5jd0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsdyk5jd0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2)\n  \
    \      return $n;\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return $n <= 1 ?\
    \ 1 : fib(min($n, 3)) + fib(min($n, 5));\n}\n\n$fib10 = fib(10);\n$fib10 = pow($fib10,\
    \ $fib10);\n$fib10 = $fib10 + $fib10;\n\n$fib1 = fib(1);\n$fib1 = pow($fib1, $fib1);\n\
    $fib1 = $fib1 + $fib1;\n\n$fib8 = fib(8);\n$fib8 = pow($fib8, $fib8);\n$fib8 =\
    \ $fib8 + $fib8;\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 1) return\
    \ $n;\n\treturn fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps6lg512.php:21\n\
    Stack trace:\n#0 /tmp/tmpps6lg512.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpps6lg512.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) { return\
    \ 1; }\n    return fib($n-2) + fib($n-1);\n}\n\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph733uiaw.php:19\n\
    Stack trace:\n#0 /tmp/tmph733uiaw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmph733uiaw.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 0 || $n >=\
    \ 5) {\n    return NULL;\n  }\n  return $fibs[$n];\n}\n\n$fibs = array(1,1,2,3,5,8,13);\n\
    $fibonacci = new fibonacci();\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Class 'fibonacci' not found in /tmp/tmp5ayccoye.php:17\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmp5ayccoye.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return array_reduce(range(1,$n),function($a,$b){return\
    \ $a+$b;});\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40fgq2_i.php:20\n\
    Stack trace:\n#0 /tmp/tmp40fgq2_i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp40fgq2_i.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 0) {\n\
    \        return 0;\n    } else if ($n <= 2) {\n        return 1;\n    }\n\n  \
    \  return fib(--$n - 1) + fib(--$n);\n}\n\nfunction candidate(...$args) {\n  \
    \  return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3q68m7s.php:24\n\
    Stack trace:\n#0 /tmp/tmpe3q68m7s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpe3q68m7s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  // Use cached result\
    \ if available\n  if (isset($GLOBALS['fib'][$n]))\n    return $GLOBALS['fib'][$n];\n\
    \n  // Use first two terms recursively\n  if ($n < 2)\n    return $GLOBALS['fib'][$n]\
    \ = $n;\n\n  // Otherwise, use mid-point formula\n  $a = $GLOBALS['fib'][$n-2];\n\
    \  $b = $GLOBALS['fib'][$n-1];\n\n  $GLOBALS['fib'][$n] = $a + $b;\n\n  return\
    \ $GLOBALS['fib'][$n];\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpax8djgda.php:32\n\
    Stack trace:\n#0 /tmp/tmpax8djgda.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpax8djgda.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $a, $b = 0, $c;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $c = $a + $b;\n        $a = $b;\n\
    \        $b = $c;\n    }\n    return $c;\n}\n\n$primes = array();\nfor ($i = 1;\
    \ $i <= 31; $i++) {\n    if (fib($i) == 1)\n        $primes[] = $i;\n}\nvar_dump($primes);\n\
    function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkhnpetf0.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n    return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return 1;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqd7l30g.php:21\n\
    Stack trace:\n#0 /tmp/tmpdqd7l30g.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdqd7l30g.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2)\n  \
    \      return $n;\n    return fib(floor($n/2)) + fib(floor($n/2));\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs3c2xhw.php:20\n\
    Stack trace:\n#0 /tmp/tmpjs3c2xhw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjs3c2xhw.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n === 0 ||\
    \ $n === 1 || $n === 2) return $n;\n    return fib(--$n) + fib(--$n);\n}\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdauyzd18.php:18\n\
    Stack trace:\n#0 /tmp/tmpdauyzd18.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpdauyzd18.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $fib = [0, 1];\n\
    \    if ($n > 0) {\n        for ($i = 1; $i <= $n; $i++) {\n            $fib[]\
    \ = $fib[$i - 1] + $fib[$i - 2];\n        }\n    }\n    return $fib[$n - 1];\n\
    }\n\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2jo5ou_.php:24\n\
    Stack trace:\n#0 /tmp/tmpc2jo5ou_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpc2jo5ou_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return ($n < 2)\
    \ ? 1 : fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9xmx38w.php:18\n\
    Stack trace:\n#0 /tmp/tmps9xmx38w.php(25): test()\n#1 {main}\n  thrown in /tmp/tmps9xmx38w.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1kka087.php:20\n\
    Stack trace:\n#0 /tmp/tmpn1kka087.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpn1kka087.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $results = [1, 1];\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        $results[] = $results[$i - 1] + $results[$i];\n\
    \    }\n    return $results[$n];\n}\n</code>\n<|/ a tags=php,fibonacci |>\n<|\
    \ a |>\nThis is an old question, but since this post is still very high in Google\
    \ I thought I'd share my solution anyway. \nIt doesn't use recursion. \nIt uses\
    \ simple math. \nIt does not use loops.\nIt doesn't use any predefined functions\
    \ like fmod(), sin() etc... \nIt doesn't use any loops. \nIt uses only basic math.\
    \ \nIt can go up to fib(1000), which is about 10^8 numbers. \nIt can use any variable\
    \ name you like. \nIt uses no global variables. \nIt uses no functions at all.\n\
    It doesn't use anything that doesn't exist in PHP.\nIt doesn't use any array data\
    \ structures. \nIt uses no loops. \nIt does not use any predefined functions.\
    \ \nIt doesn't use any loops. \nIt does not use anything that doesn't exist in\
    \ PHP. \nIt uses only basic math. \nIt uses no global variables. \nIt uses no\
    \ functions at all. \nIt doesn't use anything that doesn't exist in PHP. \nIt\
    \ uses no loops. \nIt does not use any predefined functions. \nIt doesn't use\
    \ any loops. \nIt does not use anything that doesn't exist in PHP. \n<code>\n\
    function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4r7iovcg.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2)\n  \
    \      return $n;\n\n    return fib(--$n)+fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return $n <= 1 ?\n\
    \        $n :\n        $fib($n - 1) + $fib($n - 2);\n}\n</code>\n<|/ a |>\n<|\
    \ a |>\nThis is an improved version of my answer:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp79u6_9sq.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return isset(fib_cache[$n])\
    \ ? fib_cache[$n] : (fib_cache[$n] = is_string($n) ? strpos($n, $n = substr($n,\
    \ 0, 1)) ? call_user_func($n) : $n() > 1 ? fib_iter($n) : fib_solo($n));\n}\n\n\
    function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwnsucn3f.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) { return\
    \ 1; }\n    return fib($n - 2) + fib($n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz28qnbev.php:19\n\
    Stack trace:\n#0 /tmp/tmpz28qnbev.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpz28qnbev.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    $n++;\n\t} elseif ($n == 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib(n - 1)\
    \ + fib(n - 2);\n\t}\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpbml6secp.php on line 15\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpbml6secp.php on line 15\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpbml6secp.php on line 15\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpbml6secp.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbml6secp.php:24\nStack trace:\n#0 /tmp/tmpbml6secp.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbml6secp.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) return\
    \ $n;\n\treturn fib($n - 1) + fib($n - 2);\n}\n\n/**\n * Return the factorial\
    \ of a number.\n * >>> factorial(5)\n * 120\n */\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 1)\n \
    \       return $n;\n    $prev = $prev2 = 1;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $prev = $prev2;\n        $prev2 = $prev + $prev2;\n    }\n    return\
    \ $prev;\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurpk9d9b.php:24\n\
    Stack trace:\n#0 /tmp/tmpurpk9d9b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpurpk9d9b.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n === 0) {\n\
    \        return 0;\n    } else if ($n === 1) {\n        return 1;\n    } else\
    \ {\n        return fib(fib(--$n) - $n);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpcqyvzmzv.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 2)\n\t\t\
    return 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpytgivfku.php on line 13\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpytgivfku.php on line 13\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpytgivfku.php on line 13\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpytgivfku.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpytgivfku.php:20\nStack trace:\n#0 /tmp/tmpytgivfku.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpytgivfku.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\t$f = array(0, 1, 1);\n\
    \tfor ($i = 1; $i <= $n; $i++) {\n\t\t$f[$i] = $f[$i - 1] + $f[$i - 2];\n\t}\n\
    \treturn $f[$n - 1];\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0k7lp8oa.php:22\n\
    Stack trace:\n#0 /tmp/tmp0k7lp8oa.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0k7lp8oa.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $a = 1;\n    $b\
    \ = 1;\n    while ($n > 1) {\n        $f1 = $a;\n        $f2 = $b;\n        $a\
    \ = $b;\n        $b = $f1 + $f2;\n        $n--;\n    }\n    return $a;\n}\n</code>\n\
    <|/ a tags=php,recursion dscore=0 |>\n<| c |>\nThis will not work for `fib(10)`\
    \ which should be 55 instead of 61. Also this will result in an infinite loop\
    \ for `fib(10)` since you are not checking the value of `$n` and once you exceed\
    \ 10 it will just keep going forever.\n<|/ c |>\n<| c |>\nthanks for the comment\
    \ . I've edited my answer. Hope it will help you.\n<|/ c |>\n<| a tags=php,recursion\
    \ |>\nA few things to note here...\nFirst, fibonacci numbers are defined as follows:\n\
    \n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377...\n\nSecond, there are\
    \ many ways to calculate the n-th fibonacci number. You can do it with recursion\
    \ and by using a formula you can get the n-th fibonacci number in O(1) time. You\
    \ don't need to calculate each number in the sequence. You only need to calculate\
    \ the n-1 fibonacci number. \nYou can do this as follows:\n<code>\n<?php\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppsug9_cw.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\t$fibN = 0;\n\tfor\
    \ ($i = 0; $i < $n; $i++) {\n\t\t$fibN += 1;\n\t\t$fibN = $fibN > 1 ? $fibN -\
    \ 1 : 0;\n\t}\n\treturn $fibN;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_am2da1.php:23\n\
    Stack trace:\n#0 /tmp/tmpn_am2da1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpn_am2da1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return fib($n -\
    \ 1) + fib($n - 2);\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) {\n  \
    \  return $n;\n  }\n\n  return fib(--$n)+fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib(--$n) + fib(--$n);\n}\n\nclass FibonacciTest\
    \ extends PHPUnit_Framework_TestCase {\n    public function testFibReturnsCorrectValues()\
    \ {\n        $this->assertEquals(1, fib(0));\n        $this->assertEquals(1, fib(7));\n\
    \        $this->assertEquals(2, fib(4));\n        $this->assertEquals(8, fib(5));\n\
    \        $this->assertEquals(34, fib(10));\n        $this->assertEquals(44, fib(9));\n\
    \        $this->assertEquals(55, fib(8));\n        $this->assertEquals(89, fib(7));\n\
    \        $this->assertEquals(144, fib(8));\n        $this->assertEquals(233, fib(10));\n\
    \        $this->assertEquals(233, fib(9));\n        $this->assertEquals(3772,\
    \ fib(2));\n    }\n\n    public function testFibWithLargeValues() {\n        $this->assertEquals(233,\
    \ fib(10000));\n    }\n\n    public function testFibWithNegativeValues() {\n \
    \       $this->assertEquals(-1, fib(-10));\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'PHPUnit_Framework_TestCase' not found\
    \ in /tmp/tmpquyw6zjk.php:16\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpquyw6zjk.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib(floor($n / 2)) + fib(floor($n % 2));\n\
    }\n\nclass Person\n{\n    public $name;\n    public $age;\n\n    public function\
    \ __construct($name, $age)\n    {\n        $this->name = $name;\n        $this->age\
    \ = $age;\n    }\n\n    public function getName()\n    {\n        return $this->name;\n\
    \    }\n\n    public function sayHi()\n    {\n        echo $this->name.\" says\
    \ hi.\";\n    }\n}\n\n$person = new Person(\"George\", 44);\n\n$person->sayHi();\n\
    \necho $person->getName();\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "George says hi.George\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp391nbhkg.php:49\nStack trace:\n#0 /tmp/tmp391nbhkg.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmp391nbhkg.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    static $a, $b, $c;\n\
    \    if ($n <= 2) {\n        return $n;\n    }\n    if ($n <= 3) {\n        return\
    \ ($n <= 2) ? 1 : 2;\n    }\n    list($a, $b, $c) = array_pad(array($a, $b, $c),\
    \ $n, 0);\n    return $a + $b + $c;\n}\n</code>\n<|/ a |>\n<| c |>\nThe question\
    \ is specifically asking for a recursive version and a solution that uses recursion.\
    \ This answer does not provide that.\n<|/ c |>\n<| c |>\nI agree, my solution\
    \ doesn't use recursion, and it does use recursion to get the n-th fibonacci number.\
    \ Just wanted to show another way to solve the problem.\n<|/ c |>\n<| a |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl_dmfsh6.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  $a = 1;\n  $b = 1;\n\
    \  for ($i = 0; $i < $n; $i++) {\n    $a = $a + $b;\n    $b = $a - $b;\n  }\n\
    \  return $b;\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rdsarxg.php:23\n\
    Stack trace:\n#0 /tmp/tmp9rdsarxg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9rdsarxg.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\treturn is_int($n)\
    \ ? ($n <= 1 ? $n : fib($n - 1) + fib($n - 2)) : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\t$a = 1;\n\t$b = 1;\n\
    \t$prev = null;\n\tfor ($i = $n; $i > 0; --$i) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\
    \t\t$b = $temp + $prev;\n\t\t$prev = $temp;\n\t}\n\treturn $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wu41n40.php:27\n\
    Stack trace:\n#0 /tmp/tmp1wu41n40.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1wu41n40.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return ($n <= 1) ?\
    \ 1 : (\n    ($n === 2) ? 1 : (\n      fib($n - 1) + fib($n - 2)\n    )\n  );\n\
    }\n</code>\n<|/ a dscore=1 tags=php,fibonacci,recursion |>\n<| a tags=php,fibonacci,recursion\
    \ dscore=1 |>\nYou could use Recursion.\n<code>\n<?php \n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl1xnlu8f.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n === 0) {\n\
    \        return 0;\n    } else if ($n === 1) {\n        return 1;\n    } else\
    \ {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n <= 1)\n   \
    \ return $n;\n\n  return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n    return fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n === 0)\n\
    \        return 0;\n    if ($n === 1)\n        return 1;\n    return fib($n -\
    \ 1) + fib($n - 2);\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n    return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return ($n < 2)\
    \ ? 1 : fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj58e5n2u.php:17\n\
    Stack trace:\n#0 /tmp/tmpj58e5n2u.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj58e5n2u.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\t$a = 1; $b = 0;\n\t\
    if ($n < 3) {\n\t\treturn $a;\n\t}\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t$tmp\
    \ = $a;\n\t\t$a = $b;\n\t\t$b = $tmp + $b;\n\t}\n\treturn $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbv8mi3a.php:27\n\
    Stack trace:\n#0 /tmp/tmplbv8mi3a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplbv8mi3a.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $a = 0;\n    $b\
    \ = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $a = $a + $b;\n        $b =\
    \ $a - $b;\n    }\n    return $b;\n}\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmf3s4748.php:23\n\
    Stack trace:\n#0 /tmp/tmpmf3s4748.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmf3s4748.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) return\
    \ $n;\n    return fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return isset($this->fib[$n])\
    \ ? $this->fib[$n] : $this->fib[$n] = $this->fib(\n    $n - 1) + $this->fib(\n\
    \    $n - 2);\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmp3pvn5rlm.php:10\nStack trace:\n#0 /tmp/tmp3pvn5rlm.php(16): fib(10)\n\
    #1 /tmp/tmp3pvn5rlm.php(20): candidate(10)\n#2 /tmp/tmp3pvn5rlm.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3pvn5rlm.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 0) return\
    \ null;\n    $a = fib($n-2);\n    $b = fib($n-1);\n    if ($a > $b) {\n      \
    \  return $b;\n    } else {\n        return $a;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0r2wc2u.php:25\n\
    Stack trace:\n#0 /tmp/tmpn0r2wc2u.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpn0r2wc2u.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 2) {\n\
    \        return 1;\n    }\n    return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    // Return the nth\
    \ Fibonacci number.\n    if ($n < 2) {\n        return 1;\n    }\n\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n\n$result = fib(6);\necho \"Fibonacci number\
    \ 6 is $result\\n\";\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Fibonacci number 6 is 13\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp8fhvkqq9.php:25\nStack trace:\n#0 /tmp/tmp8fhvkqq9.php(32): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8fhvkqq9.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) return\
    \ $n;\n  return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args) {\n  \
    \  return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\n$start\
    \ = microtime(true);\nfor ($i = 0; $i <= 15; $i++) {\n    fib($i);\n}\n$time =\
    \ microtime(true) - $start;\necho \"Fibonacci numbers calculated in: \" . $time\
    \ . \" seconds.\\n\";\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Fibonacci numbers calculated in: 0.00011110305786133 seconds.\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmphhjwgafx.php:27\nStack trace:\n\
    #0 /tmp/tmphhjwgafx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphhjwgafx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n <= 2) {\n \
    \   return 1;\n  }\n\n  return fib(n - 2) + fib(n - 1);\n}\n\n$result = fib($num);\n\
    \nprint \"<html><body>\";\nprint \"Fibonacci Number:\" . \"$result\";\nprint \"\
    </body></html>\";\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "<html><body>Fibonacci Number:1</body></html>\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmptn6qjlza.php on line 14\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmptn6qjlza.php on line 14\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmptn6qjlza.php\
    \ on line 14\n\nWarning: A non-numeric value encountered in /tmp/tmptn6qjlza.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptn6qjlza.php:27\n\
    Stack trace:\n#0 /tmp/tmptn6qjlza.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptn6qjlza.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 1)\n \
    \       return $n;\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) {\n  \
    \  return 1;\n  }\n  return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6q64noe.php:20\n\
    Stack trace:\n#0 /tmp/tmpz6q64noe.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpz6q64noe.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    // Make sure n is\
    \ an integer and >= 1.\n    if (!is_int($n) || $n < 1) {\n        throw new InvalidArgumentException('fib()\
    \ expects an integer >= 1 as its first argument');\n    }\n\n    // Return cached\
    \ result if possible.\n    if (isset($cache[$n])) {\n        return $cache[$n];\n\
    \    }\n\n    if ($n <= 2) {\n        return 1;\n    }\n\n    $f = fib(floor($n\
    \ / 2));\n    $f = $f * $f + $n % 2;\n    return $cache[$n] = $f;\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught InvalidArgumentException: fib() expects an integer\
    \ >= 1 as its first argument in /tmp/tmpo9eyg4dl.php:12\nStack trace:\n#0 /tmp/tmpo9eyg4dl.php(24):\
    \ fib(5)\n#1 /tmp/tmpo9eyg4dl.php(30): fib(10)\n#2 /tmp/tmpo9eyg4dl.php(34): candidate(10)\n\
    #3 /tmp/tmpo9eyg4dl.php(41): test()\n#4 {main}\n  thrown in /tmp/tmpo9eyg4dl.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return $n < 2 ? $n\
    \ : fib(n - 1) + fib(n - 2);\n}\n\nclass Main extends React.Component {\n  constructor()\
    \ {\n    super();\n    this.state = {\n      name: '',\n      city: '',\n    \
    \  country: '',\n      address: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n\
    \    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event)\
    \ {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n\
    \  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    alert(`Your\
    \ name is ${this.state.name} and you are from ${this.state.city}, ${this.state.country}!`);\n\
    \  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n\
    \        <label htmlFor=\"name\">Name</label>\n        <input type=\"text\" value={this.state.name}\
    \ name=\"name\" onChange={this.handleChange} />\n        <label htmlFor=\"city\"\
    >City</label>\n        <input type=\"text\" value={this.state.city} name=\"city\"\
    \ onChange={this.handleChange} />\n        <label htmlFor=\"country\">Country</label>\n\
    \        <input type=\"text\" value={this.state.country} name=\"country\" onChange={this.handleChange}\
    \ />\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n\
    \  }\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));</code>\n\
    <code>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js\"\
    ></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js\"\
    ></script>\n<div id=\"root\"></div></code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    You can use this.setState to handle it on submit\n<code>\nhandleSubmit(event)\
    \ {\n  event.preventDefault();\n  const {\n    name,\n    city,\n    country\n\
    \  } = this.state;\n  alert(`Your name is ${name} and you are from ${city}, ${country}!`);\n\
    }\n</code>\n<|/ a tags=reactjs,javascript,html |>\n<| a dscore=1 |>\nIn your handleSubmit\
    \ function, you can get the values from the form like this\n<code>\nconst { name,\
    \ city, country } = this.state;\n</code>\n<|/ a tags=reactjs,javascript,html |>\n\
    <| a |>\nYou have to set state for input fields. \n<code>\nhandleChange(event)\
    \ {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n\
    }\n</code>\nAnd then call setState in your handleSubmit:\n<code>\nhandleSubmit(event)\
    \ {\n   event.preventDefault();\n   this.setState({\n      name: \"\",\n     \
    \ city: \"\",\n      country\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpt36mgns7.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return $n < 2 ?\
    \ $n : fib(n - 1) + fib(n - 2);\n}\n</code>\n<|/ a tags=fibonacci,php,algorithm\
    \ dscore=2 |>\n<| a tags=fibonacci,php,algorithm |>\n<code>\n<?php\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7k5uqs3a.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\treturn (\n\t\tisset($fibs)\
    \ && isset($fibs[$n])\n\t\t\t? $fibs[$n]\n\t\t\t: (\n\t\t\t\tisset($fibs)\n\t\t\
    \t\t\t? $fibs[$n] = fib(--$n)\n\t\t\t\t\t: (\n\t\t\t\t\t\t$fibs[$n] = fib(--$n)\n\
    \t\t\t\t\t\t\t+ fib(--$n)\n\t\t\t\t\t\t\t+ fib(--$n)\n\t\t\t\t\t\t\t+ fib(--$n),\n\
    \t\t\t\t\t\t$fibs[$n]\n\t\t\t\t\t)\n\t\t\t)\n\t);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa_88x72l.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  // Return the nth\
    \ Fibonacci number.\n  return $n <= 1 ? $n : fib($n - 1) + fib(--$n);\n}\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0nrglla.php:18\n\
    Stack trace:\n#0 /tmp/tmpk0nrglla.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpk0nrglla.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 1) {\n\
    \        return 1;\n    }\n    if ($n < 2) {\n        return $n;\n    }\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81qrgvu0.php:24\n\
    Stack trace:\n#0 /tmp/tmp81qrgvu0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp81qrgvu0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return isset($cache[$n])\n\
    \        ? $cache[$n]\n        : $cache[$n] = fib(n - 1) + fib(n - 2);\n}\n$cache\
    \ = [];\n</code>\nAnd here's another solution which uses memoization with closures.\n\
    <code>\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpafvu10rz.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return isset($_SESSION['fib'][$n])\
    \ ? $_SESSION['fib'][$n] : ($_SESSION['fib'][$n] = fib(max($n - 1, 0)));\n}\n\
    function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmptvvkuk_r.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) {\n  \
    \  return 1;\n  }\n\n  if ($n === 2) {\n    return 2;\n  }\n\n  return fib(n -\
    \ 1) + fib(n - 2);\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpm2ya19zs.php on line 18\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpm2ya19zs.php on line 18\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpm2ya19zs.php on line 18\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpm2ya19zs.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpm2ya19zs.php:25\nStack trace:\n#0 /tmp/tmpm2ya19zs.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpm2ya19zs.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 1) return\
    \ $n;\n\treturn fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args) {\n  \
    \  return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) {\n  \
    \  return 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvd4ap3f.php:20\n\
    Stack trace:\n#0 /tmp/tmpzvd4ap3f.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzvd4ap3f.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  $f = 1;\n  $b = 1;\n\
    \  $fibVal = $fibs[$n];\n  for ($i = 1; $i <= $n; $i++) {\n    $f = ($fibVal +\
    \ $f);\n    $b = ($b * $fibVal);\n    $fibVal = $f;\n  }\n  return $b;\n}\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwoum_qm9.php:25\n\
    Stack trace:\n#0 /tmp/tmpwoum_qm9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwoum_qm9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) {\n  \
    \  return $n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpgmt_5d36.php on line 14\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpgmt_5d36.php on line 14\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpgmt_5d36.php on line 14\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpgmt_5d36.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgmt_5d36.php:21\nStack trace:\n#0 /tmp/tmpgmt_5d36.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgmt_5d36.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2)\n  \
    \      return 1;\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvuylmqq3.php:20\n\
    Stack trace:\n#0 /tmp/tmpvuylmqq3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvuylmqq3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  // Return Fibonacci\
    \ number for n < 10.\n  if ($n < 2) {\n    return 1;\n  }\n  // Return Fibonacci\
    \ numbers for n > 10.\n  return fib(n - 1) + fib(n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmp1js0m7gm.php on line 15\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmp1js0m7gm.php on line 15\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmp1js0m7gm.php on line 15\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmp1js0m7gm.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1js0m7gm.php:23\nStack trace:\n#0 /tmp/tmp1js0m7gm.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1js0m7gm.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\n$fib = fib($n);\n\
    return $fib;\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return 1;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n\nclass Foo {\n\tpublic\
    \ function bar() {\n\t\techo fib(10);\n\t}\n}\n\n$f = new Foo();\n$f->bar();\n\
    function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "89\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3363rqo.php:29\n\
    Stack trace:\n#0 /tmp/tmpk3363rqo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk3363rqo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 2) return\
    \ $n;\n    $next = new StdClass;\n    $next->n1 = fib($n - 1) + fib($n - 2);\n\
    \    $next->n2 = fib($n - 2);\n    return $next->n1;\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ta6x4xy.php:21\n\
    Stack trace:\n#0 /tmp/tmp8ta6x4xy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8ta6x4xy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 0) {\n\t\t\
    return false;\n\t}\n\tstatic $cache = array(0);\n\t$n = (int) $n;\n\treturn isset($cache[$n])\
    \ ? $cache[$n] : false;\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6z_mzw7.php:23\n\
    Stack trace:\n#0 /tmp/tmpn6z_mzw7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpn6z_mzw7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  $f1 = 1;\n  $f2 =\
    \ 1;\n  for ($i = 0; $i < $n; ++$i) {\n    $f1 = $f2;\n    $f2 = $f1 + $f2;\n\
    \  }\n  return $f2;\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzl7m3bi.php:24\n\
    Stack trace:\n#0 /tmp/tmpjzl7m3bi.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjzl7m3bi.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 2) {\n\
    \        return $n;\n    }\n\n    return fib(--$n) + fib(--$n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5s94oe2.php:22\n\
    Stack trace:\n#0 /tmp/tmpn5s94oe2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn5s94oe2.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    // Return the nth\
    \ Fibonacci number.\n    return fibs[$n];\n}\n\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant fibs - assumed 'fibs' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmpbkv5vrd_.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbkv5vrd_.php:19\nStack\
    \ trace:\n#0 /tmp/tmpbkv5vrd_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbkv5vrd_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) return\
    \ $n;\n    return fib(fib(fib($n - 1) + 1)) + fib($n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n\n/**\n * Find longest\
    \ common prefix of two strings.\n */\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return fib2($n);\n\
    }\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib2() in /tmp/tmp0qje049k.php:10\n\
    Stack trace:\n#0 /tmp/tmp0qje049k.php(13): fib(10)\n#1 /tmp/tmp0qje049k.php(17):\
    \ candidate(10)\n#2 /tmp/tmp0qje049k.php(24): test()\n#3 {main}\n  thrown in /tmp/tmp0qje049k.php\
    \ on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) {\n  \
    \  return 1;\n  }\n  return fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnjincf0.php:21\n\
    Stack trace:\n#0 /tmp/tmpjnjincf0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjnjincf0.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgci9z09x.php:22\n\
    Stack trace:\n#0 /tmp/tmpgci9z09x.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgci9z09x.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if($n < 2) {\n \
    \       return $n;\n    }\n    return fib(fib($n-1) + fib($n-2))\n}\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_oxfpxz5.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return $n;\n\t} else {\n\t\treturn fib(fib(--$n) - $n);\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkj9g094y.php:21\n\
    Stack trace:\n#0 /tmp/tmpkj9g094y.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkj9g094y.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n\n    return fib(--$n) + fib(--$n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\t$fib = array(1,1,2,3,5,8,13,21,34,55);\n\
    \treturn $fib[$n];\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnypgxgaq.php:19\n\
    Stack trace:\n#0 /tmp/tmpnypgxgaq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnypgxgaq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n\n    return fib(--$n) + fib(--$n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5f95oers.php:22\n\
    Stack trace:\n#0 /tmp/tmp5f95oers.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5f95oers.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return $n < 2 ?\
    \ $n : fib(sub(1,$n-1)) + fib(sub(2,$n-1));\n}\n$fibonacci_numbers = array(\n\
    \        0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,\n        987,1597,2584,4181,6765,10946,17711,28657,46368,75025,\n\
    \        121393,197225,317811,514229,832040,1346269,2178309,3524578,\n       \
    \ 5702887,9227463,14930352,24157817,39088169,63245986,102334155,\n        165580141,267914296,433494437,701408733,1134903170,1836311903\n\
    \    );\n    $factorial_numbers = array(\n        1,\n        1,\n        2,\n\
    \        6,\n        24,\n        120,\n        720,\n        5040,\n        40320,\n\
    \        362880,\n        3628800,\n        39916800,\n        479001600,\n  \
    \      6227020800,\n        87178291200,\n        1307674368000\n    );\n    $fibonacci_sums\
    \ = array_combine($fibonacci_numbers, $factorial_numbers);\n\n    // print fib(10)\n\
    \    echo fib(10), PHP_EOL;\n    // print fib(1)\n    echo fib(1), PHP_EOL;\n\
    \    // print fib(8)\n    echo fib(8), PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_combine(): Both parameters should have an equal number\
    \ of elements in /tmp/tmpfesfwgbq.php on line 37\n\nFatal error: Uncaught Error:\
    \ Call to undefined function sub() in /tmp/tmpfesfwgbq.php:10\nStack trace:\n\
    #0 /tmp/tmpfesfwgbq.php(40): fib(10)\n#1 {main}\n  thrown in /tmp/tmpfesfwgbq.php\
    \ on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 1) return\
    \ $n;\n    return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n <= 1) return\
    \ 1;\n  return fib(--$n) + fib(--$n);\n}\n</code>\n<|/ a tags=fibonacci,php,algorithm\
    \ |>\n<| a tags=fibonacci,php,algorithm |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8ghkueu_.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return ($n <= 1\
    \ ? 1 : fib(--$n) + fib(--$n));\n}\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4u_lr2a6.php:17\n\
    Stack trace:\n#0 /tmp/tmp4u_lr2a6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4u_lr2a6.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 2) {\n\t\
    \treturn $n;\n\t}\n\treturn fib(n - 2) + fib(n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmptdka7ren.php on line 13\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmptdka7ren.php on line 13\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmptdka7ren.php on line 13\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmptdka7ren.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptdka7ren.php:21\nStack trace:\n#0 /tmp/tmptdka7ren.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptdka7ren.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 0 || $n >=\
    \ 1000000) {\n\t\tthrow new Exception('The argument must be a non-negative integer.');\n\
    \t}\n\n\t$a = 1;\n\t$b = 1;\n\t$sum = 0;\n\tfor ($n--; $n >= 1; --$n) {\n\t\t\
    $sum = $a + $b;\n\t\t$a = $b;\n\t\t$b = $sum;\n\t}\n\treturn $sum;\n}\n\n/**\n\
    \ * Checks that the current request is a HTTP POST request.\n *\n * @return bool\n\
    \ *   `true` if the current request is a HTTP POST request, `false` otherwise.\n\
    \ */\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymfapf_c.php:36\n\
    Stack trace:\n#0 /tmp/tmpymfapf_c.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpymfapf_c.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return $n <= 1 ? $n\
    \ : fib(fib($n - 1) + fib(fib_last_index($n)));\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib_last_index()\
    \ in /tmp/tmpbd5gb5_h.php:10\nStack trace:\n#0 /tmp/tmpbd5gb5_h.php(10): fib(2)\n\
    #1 /tmp/tmpbd5gb5_h.php(10): fib(3)\n#2 /tmp/tmpbd5gb5_h.php(10): fib(4)\n#3 /tmp/tmpbd5gb5_h.php(10):\
    \ fib(5)\n#4 /tmp/tmpbd5gb5_h.php(10): fib(6)\n#5 /tmp/tmpbd5gb5_h.php(10): fib(7)\n\
    #6 /tmp/tmpbd5gb5_h.php(10): fib(8)\n#7 /tmp/tmpbd5gb5_h.php(10): fib(9)\n#8 /tmp/tmpbd5gb5_h.php(13):\
    \ fib(10)\n#9 /tmp/tmpbd5gb5_h.php(17): candidate(10)\n#10 /tmp/tmpbd5gb5_h.php(24):\
    \ test()\n#11 {main}\n  thrown in /tmp/tmpbd5gb5_h.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) return\
    \ 1;\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprliwv982.php:19\n\
    Stack trace:\n#0 /tmp/tmprliwv982.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprliwv982.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 1) return\
    \ 1;\n\treturn fib(floor($n / 2)) + fib(floor($n / 2) + 1);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n <= 2) { //\
    \ 0 or 1 fibonacci number\n    return $n;\n  }\n\n  return fib(n - 1) + fib(n\
    \ - 2);\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpf5i8iorc.php on line 14\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpf5i8iorc.php on line 14\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpf5i8iorc.php on line 14\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpf5i8iorc.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpf5i8iorc.php:21\nStack trace:\n#0 /tmp/tmpf5i8iorc.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf5i8iorc.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\treturn ($n > 1) ?\
    \ fib($n - 1) + fib($n - 2) : $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return $n;\n\t}\n\treturn fib($n - 2) + fib($n - 1);\n}\n\n$numbers = range(10,\
    \ 20);\n$fibs = array_map(fib, $numbers);\n$fibs = array_chunk($fibs, 2);\n\n\
    $sum = 0;\n\nforeach ($fibs as $fib) {\n\t$sum += $fib[0];\n}\n\necho $sum;\n\
    function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant fib - assumed 'fib' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp_sbqcgx8.php on line 17\n10912"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    // Write Fibonacci\
    \ numbers less than or equal to\n    // n into an array\n    $a = $b = 1;\n  \
    \  $result = array();\n    do {\n        $result[] = $a;\n        $a = $b;\n \
    \       $b = $a + $b - $a;\n    } while (--$n >= 0);\n    return $result;\n}\n\
    function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6dwyn79.php:26\n\
    Stack trace:\n#0 /tmp/tmpo6dwyn79.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpo6dwyn79.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\treturn ($n < 2) ?\
    \ $n : fib(array_slice($array, --$n, null)) + ((array_slice($array, --$n, null)\
    \ !== null) ? array_slice($array, --$n, null) : 0);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, null given in\
    \ /tmp/tmppc1x38xb.php on line 10\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, null given in /tmp/tmppc1x38xb.php on line 10\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmppc1x38xb.php:17\nStack trace:\n\
    #0 /tmp/tmppc1x38xb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmppc1x38xb.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  // return 1 if n is\
    \ 0 OR less than 0\n  if ($n <= 0 || $n >= 21)\n    return 1;\n  // return if\
    \ n is 1 or less than 1\n  if ($n == 1 || $n == 0)\n    return 1;\n  // compute\
    \ nth fibonacci number\n  return fib(fib(fib($n - 1) + fib($n - 2)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\t$a = $b = 1;\n\tfor\
    \ ($i = 0; $i < $n; $i++){\n\t\t$tmp = $a + $b;\n\t\t$a = $b;\n\t\t$b = $tmp;\n\
    \t}\n\treturn $b;\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qnmbl1n.php:24\n\
    Stack trace:\n#0 /tmp/tmp1qnmbl1n.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1qnmbl1n.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps_ece5d.php:21\n\
    Stack trace:\n#0 /tmp/tmpps_ece5d.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpps_ece5d.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) return\
    \ $n;\n    return fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib($n - 2) + fib($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7667q53.php:21\n\
    Stack trace:\n#0 /tmp/tmpf7667q53.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpf7667q53.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2)\n  \
    \      return $n;\n\n    return fib($n - 1) + fib($n - 2);\n}\n\n$start = microtime(true);\n\
    for ($i = 0; $i < 10000; $i++) {\n    fib($i);\n}\n$end = microtime(true);\necho\
    \ $end - $start;\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\t$a = 0;\n\t$b = 1;\n\
    \tif ($n < 2)\n\t\treturn $n;\n\tfor ($i = 0; $i < $n; $i++)\n\t\t$a = $a + $b;\n\
    \t\treturn $a;\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqa4bjdt4.php:24\n\
    Stack trace:\n#0 /tmp/tmpqa4bjdt4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqa4bjdt4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $n = (int) $n;\n\
    \    if ($n <= 0) {\n        return 0;\n    }\n    if ($n <= 1) {\n        return\
    \ 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n    return fib(--$n) + fib(--$n);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return $n < 2 ?\
    \ $n : $fib(fib($n - 1)) + $n;\n}\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmprv3_mkzc.php:10\n\
    Stack trace:\n#0 /tmp/tmprv3_mkzc.php(13): fib(10)\n#1 /tmp/tmprv3_mkzc.php(17):\
    \ candidate(10)\n#2 /tmp/tmprv3_mkzc.php(24): test()\n#3 {main}\n  thrown in /tmp/tmprv3_mkzc.php\
    \ on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return $n;\n    }\n    return fib(--$n - 1) + fib(--$n);\n}\n\n$result\
    \ = fib($num);\nif ($result == 55) {\n    echo $result;\n} else {\n    echo 'error';\n\
    }\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "error\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptqjdl56_.php:27\n\
    Stack trace:\n#0 /tmp/tmptqjdl56_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptqjdl56_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return $n <= 1 ? 1\
    \ : fib(floor($n/2)) + fib(floor($n%2));\n}\n\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz13u55od.php:18\n\
    Stack trace:\n#0 /tmp/tmpz13u55od.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpz13u55od.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    // Return first\
    \ value if $n == 0, or return fib(floor($n)).\n    if ($n==0) {\n        return\
    \ 0;\n    }\n    if ($n==1) {\n        return 1;\n    }\n    return fib($n-2)\
    \ + fib($n-3);\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return ($n < 2) ?\
    \ $n : fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) return\
    \ $n;\n    return fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return ($n <= 1\
    \ || $n >= 3) ? 1 : fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpunmdaryb.php:18\n\
    Stack trace:\n#0 /tmp/tmpunmdaryb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpunmdaryb.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    $a = $b = 1;\n \
    \   while ($n > 1) {\n        $tmp = $a;\n        $a = $b;\n        $b = $tmp\
    \ + $b;\n        $n--;\n    }\n    return $a;\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  return ($n <= 1) ?\
    \ $n : (fib($n - 1) + fib($n - 2));\n}\n</code>\nThe above code works fine. But\
    \ when I replaced it with recursive approach, its throwing stack overflow error.\n\
    <code>\n<?php\n\nclass Fibonacci {\n\n  private $count = 0;\n\n  public function\
    \ fib($n) {\n    if($n<=1) return $n;\n\n    $this->count++;\n    return $this->fib($n-1)\
    \ + $this->fib($n-2);\n  }\n}\n\n$fibonacci = new Fibonacci;\nprint_r($fibonacci->fib(50));\n\
    print_r($fibonacci->count);\n</code>\n<|/ q dscore=2 |>\n<| c |>\nYou're missing\
    \ a return statement, that's why you get the error\n<|/ c |>\n<| c |>\nHi, I don't\
    \ think I missed the return statement, because I have added a static variable\
    \ and it worked fine. But the problem persists with non static variable. I am\
    \ new to PHP, so maybe I am missing something. But I can not find out what mistake\
    \ I am doing. I tried a lot to find out but no luck.\n<|/ c |>\n<| c |>\nThe problem\
    \ is that the recursive method will call itself, but it will not return the result,\
    \ so it continues to call itself. This means that it will always end up doing\
    \ a lot of calls, instead of returning the value once.\n<|/ c |>\n<| c |>\nI think\
    \ you should look into that more. Your method is not really recursive at all.\
    \ Its just a loop.\n<|/ c |>\n<| c |>\nThe last example is actually recursive\
    \ by nature.  It just happens to return itself in a special case where $n == 1.\n\
    <|/ c |>\n<| a tags=php,recursion,fibonacci,static,variables |>\nI believe your\
    \ problem is that you're not returning the result in your recursive function.\n\
    <code>\n  public function fib($n) {\n    if($n<=1) return $n;\n\n    $this->count++;\n\
    \    return $this->fib($n-1) + $this->fib($n-2);\n  }\n</code>\nWhen you call\
    \ this function, you need to return the result of the recursive call:\n<code>\n\
    $fibonacci = new Fibonacci;\nprint_r($fibonacci->fib(50));\nprint_r($fibonacci->count);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,recursion,fibonacci,static,variables\
    \ |>\nI think you got some misunderstanding about how recursion works. I suggest\
    \ you to read this \nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp3gvun1ct.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  $result = 0;\n  $x\
    \ = 1;\n  $y = 1;\n  $prev = $y;\n  for (; $n < 15; $n += 2) {\n    $x += $y;\n\
    \    $y = $prev + $x;\n    $prev = $x;\n    $x = $y;\n  }\n  return $y;\n}\n</code>\n\
    <|/ a dscore=4 tags=php,fibonacci |>\n<| c |>\nNice work.  I did a similar implementation\
    \ but with just a `return`.  +1.\n<|/ c |>\n<| a dscore=4 tags=php,fibonacci |>\n\
    <code>\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpngckc7nf.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 0) return\
    \ 0;\n    if ($n <= 2) return 1;\n    return fib(--$n) + fib(--$n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 3) {\n\
    \        return 1;\n    }\n\n    return fib($n - 1) + fib($n - 2);\n}\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) return\
    \ $n;\n    return fib(--$n) + fib(--$n);\n}\n</code>\nI didn't include the rest\
    \ of the code here for brevity since it doesn't seem to add anything to the solution.\
    \ Instead, just focus on the parts of code that deal with generating fibonacci\
    \ numbers and using them as parameters to the fib() function. If you want to test\
    \ it out yourself, you can just copy the function definition and paste it into\
    \ your editor, run the code, then go ahead and run the code with some parameters\
    \ to see what the result is.\nI hope this helps.\n<|/ a tags=php |>\n<| c |>\n\
    Thanks so much for the effort you put into this, I was really lost and couldn't\
    \ figure out how to do this. Thank you!\n<|/ c |>\n<| c |>\nYou're welcome! Glad\
    \ it helped :)\n<|/ c |>\n<| c |>\nI used the code above to calculate fibonacci\
    \ numbers with dynamic recursion. But the fibonacci number that is returned is\
    \ always 0. Is there a way to get it to return numbers > 2?\n<|/ c |>\n<| c |>\n\
    If you're using dynamic recursion, you'll want to call `fib()` with a higher number\
    \ than `$n`, unless you want it to loop forever until your stack overflows.\n\
    <|/ c |>\n<| c |>\nThank you for the response! I was able to figure out how to\
    \ get this to work. I really appreciate your help :)\n<|/ c |>\n<| a tags=php\
    \ |>\nYou can write like this way :\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjymfp_kg.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcst3r8d.php:21\n\
    Stack trace:\n#0 /tmp/tmprcst3r8d.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprcst3r8d.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\nfunction\
    \ candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
    \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
    \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdy8ygn78.php:20\n\
    Stack trace:\n#0 /tmp/tmpdy8ygn78.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpdy8ygn78.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) { return\
    \ 1; }\n  return fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgugkosp.php:18\n\
    Stack trace:\n#0 /tmp/tmppgugkosp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppgugkosp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\treturn $n < 2 ? $n\
    \ : fib($n - 1) + fib(--$n);\n}\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprk3lx7f8.php:17\n\
    Stack trace:\n#0 /tmp/tmprk3lx7f8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprk3lx7f8.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return $n < 2 ?\
    \ 1 : fib(n - 1) + fib(n - 2);\n}\n\n$a = [1,2,3,4,5];\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpq9mt_dz0.php on line 10\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpq9mt_dz0.php on line 10\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpq9mt_dz0.php on line 10\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpq9mt_dz0.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpq9mt_dz0.php:20\nStack trace:\n#0 /tmp/tmpq9mt_dz0.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq9mt_dz0.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return fib_array($n);\n\
    }\n\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fib_array() in\
    \ /tmp/tmpnmnmjqga.php:10\nStack trace:\n#0 /tmp/tmpnmnmjqga.php(14): fib(10)\n\
    #1 /tmp/tmpnmnmjqga.php(18): candidate(10)\n#2 /tmp/tmpnmnmjqga.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnmnmjqga.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n <= 2) {\n \
    \   return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmp7hfael1l.php on line 13\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmp7hfael1l.php on line 13\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmp7hfael1l.php on line 13\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmp7hfael1l.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7hfael1l.php:20\nStack trace:\n#0 /tmp/tmp7hfael1l.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7hfael1l.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) {\n\t\t\
    return $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n <= 1) {\n\t\
    \treturn $n;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n$result = fib($n);\n\
    function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\tif ($n < 2) return\
    \ $n;\n\treturn fib($n - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 2) return\
    \ 1;\n  return fib(--$n) + fib(--$n);\n}\n\nclass Util {\n  public $x;\n  public\
    \ $y;\n\n  public function __construct($x, $y) {\n    $this->x = $x;\n    $this->y\
    \ = $y;\n  }\n\n  public function __toString() {\n    return \"(\" . $this->x\
    \ . \", \" . $this->y . \")\";\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !==\
    \ 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf095zfql.php:33\n\
    Stack trace:\n#0 /tmp/tmpf095zfql.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf095zfql.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return ($n < 2)\
    \ ? 1 : fib(--$n) + fib(--$n);\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2t07rvj2.php:18\n\
    Stack trace:\n#0 /tmp/tmp2t07rvj2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2t07rvj2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n < 2) {\n\
    \        return 1;\n    }\n\n    if ($n <= 3) {\n        return ($n % 2 === 0)\
    \ ? ($n <= 1) ? 1 : 1 : fib($n - 1) + fib(n - 2);\n    }\n\n    return fib($n\
    \ - 1) + fib($n - 2);\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: Use of undefined constant n - assumed 'n' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpa_2u_iv9.php\
    \ on line 15\n\nWarning: A non-numeric value encountered in /tmp/tmpa_2u_iv9.php\
    \ on line 15\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpa_2u_iv9.php on line 15\n\
    \nWarning: A non-numeric value encountered in /tmp/tmpa_2u_iv9.php on line 15\n\
    \nWarning: Use of undefined constant n - assumed 'n' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning: A\
    \ non-numeric value encountered in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning:\
    \ Use of undefined constant n - assumed 'n' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning: Use of undefined\
    \ constant n - assumed 'n' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpa_2u_iv9.php on line 15\n\nWarning: Use of undefined constant n -\
    \ assumed 'n' (this will throw an Error in a future version of PHP) in /tmp/tmpa_2u_iv9.php\
    \ on line 15\n\nWarning: A non-numeric value encountered in /tmp/tmpa_2u_iv9.php\
    \ on line 15\n\nWarning: Use of undefined constant n - assumed 'n' (this will\
    \ throw an Error in a fut"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    // Create a generator\
    \ that returns (n-1)-th\n    // Fibonacci number\n    $a = fib($n - 1);\n    return\
    \ $a($n-1);\n}\n\nfunction candidate(...$args) {\n    return fib(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    // Implement function\n\
    }\n\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0kpxiv9.php:18\n\
    Stack trace:\n#0 /tmp/tmpz0kpxiv9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpz0kpxiv9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    return ($n > 2 ?\
    \ fib(--$n) : 1) + ($n ? fib(--$n) : 1);\n}\nfunction candidate(...$args) {\n\
    \    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnoexycon.php:17\n\
    Stack trace:\n#0 /tmp/tmpnoexycon.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnoexycon.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n  if ($n < 0 || $n >=\
    \ count($this->fib_array)) {\n    return null;\n  }\n  return $this->fib_array[$n];\n\
    }\nfunction candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmpdv5d6786.php:10\nStack trace:\n#0 /tmp/tmpdv5d6786.php(16): fib(10)\n\
    #1 /tmp/tmpdv5d6786.php(20): candidate(10)\n#2 /tmp/tmpdv5d6786.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdv5d6786.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>>\
    \ fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 1) return\
    \ $n;\n    return fib($n - 1) + fib($n - 2);\n}\nfunction candidate(...$args)\
    \ {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10)\
    \ !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
