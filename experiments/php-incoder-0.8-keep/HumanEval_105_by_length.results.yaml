name: HumanEval_105_by_length
language: php
results:
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return [];\n    }\n    foreach ($arr as $key\
    \ => $num) {\n        // If it's a \"normal\" integer\n        if (is_int($num))\
    \ {\n            $arr[count($arr) - 1 - $key] = $num;\n        }\n    }\n    //\
    \ Sort the array\n    asort($arr);\n    // Reverse it\n    $arr = array_reverse($arr);\n\
    \    // Convert each digit to the corresponding word\n    return array_map(function\
    \ ($num) {\n        if ($num == 1) {\n            return 'One';\n        }\n \
    \       if ($num == 2) {\n            return 'Two';\n        }\n        if ($num\
    \ == 3) {\n            return 'Three';\n        }\n        if ($num == 4) {\n\
    \            return 'Four';\n        }\n        if ($num == 5) {\n           \
    \ return 'Five';\n        }\n        if ($num == 6) {\n            return 'Six';\n\
    \        }\n        if ($num == 7) {\n            return 'Seven';\n        }\n\
    \        if ($num == 8) {\n            return 'Eight';\n        }\n        if\
    \ ($num == 9) {\n            return 'Nine';\n        }\n        return 'Ninety\
    \ ' . $num;\n    }, $arr);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php,sorting\
    \ |>\nYou can use ksort() to sort an array in reverse order, and str_replace()\
    \ to convert the values to their respective names\n<code>\n$arr = array('Two',\
    \ 'One', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n\n$arr =\
    \ array_reverse($arr);\nksort($arr);\n$arr = array_map(function($v){ return str_replace('One','1',$v);},\
    \ $arr);\n$arr = array_map(function($v){ return str_replace('Two','2',$v);}, $arr);\n\
    $arr = array_map(function($v){ return str_replace('Three','3',$v);}, $arr);\n\
    $arr = array_map(function($v){ return str_replace('Four','4',$v);}, $arr);\n$arr\
    \ = array_map(function($v){ return str_replace('Five','5',$v);}, $arr);\n$arr\
    \ = array_map(function($v){ return str_replace('Six','6',$v);}, $arr);\n$arr =\
    \ array_map(function($v){ return str_replace('Seven','7',$v);}, $arr);\n$arr =\
    \ array_map(function($v){ return str_replace('Eight','8',$v);}, $arr);\n$arr =\
    \ array_map(function($v){ return str_replace('Nine','9',$v);}, $\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpavh1uga9.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!is_array($arr)) {\n        return [];\n    }\n    usort($arr, function\
    \ ($a, $b) {\n        if ($a === 9) {\n            return -1;\n        }\n   \
    \     if ($b === 9) {\n            return 1;\n        }\n        return strlen($a)\
    \ - strlen($b);\n    });\n    return array_reverse(array_map(function ($a) {\n\
    \        return $a === '9' ? 'One' : $a;\n    }, $arr));\n}\n</code>\n<|/ a |>\n\
    <| a |>\nHere is how I did it, using Python. Just add numbers between 1 and 9\
    \ to test_arr.\n<code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3z82l9v9.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_reverse($arr);\n    foreach ($arr as $value) {\n       \
    \ if ($value < 1) {\n            $arr[] = 1;\n        } else if ($value < 9) {\n\
    \            $arr[] = 'One';\n        } else if ($value < 27) {\n            $arr[]\
    \ = 'Two';\n        } else if ($value < 37) {\n            $arr[] = 'Three';\n\
    \        } else if ($value < 47) {\n            $arr[] = 'Four';\n        } else\
    \ if ($value < 57) {\n            $arr[] = 'Five';\n        } else if ($value\
    \ < 67) {\n            $arr[] = 'Six';\n        } else if ($value < 78) {\n  \
    \          $arr[] = 'Seven';\n        } else if ($value < 89) {\n            $arr[]\
    \ = 'Eight';\n        } else {\n            $arr[] = 'Nine';\n        }\n    }\n\
    \    return $arr;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps57xbi3e.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $length_arr = array();\n  $length_arr = array_count_values($arr);\n  //\
    \ print_r($length_arr);\n  arsort($length_arr);\n  $arr = array_reverse($arr);\n\
    \  $arr = array_slice($arr, 0, -1);\n  arsort($arr);\n  $arr = array_reverse($arr);\n\
    \n  for ($i = 0; $i < count($arr); $i++) {\n    $name_value[$i] =  'One';\n  \
    \  if ($arr[$i] == 1) {\n      $name_value[$i] = 'Two';\n    }\n    if ($arr[$i]\
    \ == 2) {\n      $name_value[$i] = 'Three';\n    }\n    if ($arr[$i] == 3) {\n\
    \      $name_value[$i] = 'Four';\n    }\n    if ($arr[$i] == 4) {\n      $name_value[$i]\
    \ = 'Five';\n    }\n    if ($arr[$i] == 5) {\n      $name_value[$i] = 'Six';\n\
    \    }\n    if ($arr[$i] == 6) {\n      $name_value[$i] = 'Seven';\n    }\n  \
    \  if ($arr[$i] == 7) {\n      $name_value[$i] = 'Eight';\n    }\n    if ($arr[$i]\
    \ == 8) {\n      $name_value[$i] = 'Nine';\n    }\n  }\n  print_r($name_value);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Two\n    [1] => Two\n    [2] => Three\n    [3] =>\
    \ Four\n    [4] => Five\n    [5] => Six\n    [6] => Nine\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcb97xxsf.php:63\nStack trace:\n#0 /tmp/tmpcb97xxsf.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcb97xxsf.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return [];\n    }\n    sort($arr);\n    $result\
    \ = [];\n    foreach ($arr as $number) {\n        if ($number >= 1 && $number\
    \ <= 9) {\n            $result[] = array_search($number, range(1, 9));\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jrjxvbf.php:37\n\
    Stack trace:\n#0 /tmp/tmp8jrjxvbf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8jrjxvbf.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (empty($arr)) {\n\t\treturn [];\n\t}\n\n\t$result = [];\n\n\tforeach\
    \ ($arr as $key => $number) {\n\t\tif ($number >= 1 && $number <= 9) {\n\t\t\t\
    $result[$number] = str_repeat('Digit', count($arr) - $key);\n\t\t}\n\t}\n\n\t\
    array_walk($result, function (&$value) {\n\t\t$value = str_repeat('Digit', count($result)\
    \ - count(preg_grep('/^Digit/', $value)));\n\t});\n\n\tarray_reverse($result);\n\
    \n\treturn array_values(array_filter($result, function ($value) {\n\t\treturn\
    \ $value !== '';\n\t}));\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmprjnzl7c6.php on line 32\n\nWarning: preg_grep() expects\
    \ parameter 2 to be array, string given in /tmp/tmprjnzl7c6.php on line 32\n\n\
    Warning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmprjnzl7c6.php on line 32\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmprjnzl7c6.php on line\
    \ 32\n\nWarning: preg_grep() expects parameter 2 to be array, string given in\
    \ /tmp/tmprjnzl7c6.php on line 32\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmprjnzl7c6.php on line 32\n\n\
    Warning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmprjnzl7c6.php on line 32\n\nWarning: preg_grep() expects parameter\
    \ 2 to be array, string given in /tmp/tmprjnzl7c6.php on line 32\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmprjnzl7c6.php\
    \ on line 32\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmprjnzl7c6.php on line 32\n\nWarning: preg_grep()\
    \ expects parameter 2 to be array, string given in /tmp/tmprjnzl7c6.php on line\
    \ 32\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmprjnzl7c6.php on line 32\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmprjnzl7c6.php\
    \ on line 32\n\nWarning: preg_grep() expects parameter 2 to be array, string given\
    \ in /tmp/tmprjnzl7c6.php on line 32\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmprjnzl7c6.php on line\
    \ 32\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmprjnzl7c6.php on line 32\n\nWarning: preg_grep() expects\
    \ parameter 2 to be array, string given in /tmp/tmprjnzl7c6.php on line 32\n\n\
    Warning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmprjnzl7c6.php o"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr2 = array();\n    if (count($arr) == 0) {\n        return $arr2;\n\
    \    }\n    $a = array();\n    $b = array();\n    foreach ($arr as $c) {\n   \
    \     $a[] = $c;\n    }\n    foreach ($arr as $c) {\n        $b[] = $c;\n    }\n\
    \    foreach ($a as $k => $c) {\n        if ($c > 9) {\n            unset($a[$k]);\n\
    \            unset($b[$k]);\n        }\n    }\n    foreach ($b as $k => $c) {\n\
    \        $arr2[] = str_pad($c, count($a) + count($b) - $k, \"0\", STR_PAD_LEFT);\n\
    \    }\n    return $arr2;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6muwg3z2.php:48\n\
    Stack trace:\n#0 /tmp/tmp6muwg3z2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp6muwg3z2.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $reverse = array_reverse($arr);\n  foreach($reverse as $v) {\n    if ($v\
    \ != 1 && $v != -1 && $v != 55) {\n      $temp = $v;\n      unset($reverse[$v]);\n\
    \      $reverse[] = $temp;\n    }\n  }\n  return $reverse;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_c1r5tu.php:35\n\
    Stack trace:\n#0 /tmp/tmpa_c1r5tu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa_c1r5tu.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length_of_array = array_map(function($number) {\n        return strlen($number);\n\
    \    }, $arr);\n    $sorted_array = array();\n\n    array_multisort($length_of_array,\
    \ $arr, $sorted_array);\n\n    return array_map(function($number) {\n        if\
    \ ($number === '') {\n            return '';\n        }\n        $first_digit\
    \ = substr($number, 0, 1);\n        $last_digit = substr($number, -1);\n\n   \
    \     // return $first_digit == 1 ? 'One' : $first_digit == 2 ? 'Two' : $first_digit\
    \ == 3 ? 'Three' : $first_digit == 4 ? 'Four' : $first_digit == 5 ? 'Five' : $first_digit\
    \ == 6 ? 'Six' : $first_digit == 7 ? 'Seven' : $first_digit == 8 ? 'Eight' : $first_digit\
    \ == 9 ? 'Nine' : 'Invalid';\n        return ($first_digit == 1 ? 'One' : $first_digit\
    \ == 2 ? 'Two' : $first_digit == 3 ? 'Three' : $first_digit == 4 ? 'Four' : $first_digit\
    \ == 5 ? 'Five' : $first_digit == 6 ? 'Six' : $first_digit == 7 ? 'Seven' : $first_digit\
    \ == 8 ? 'Eight' : $first_digit == 9 ? 'Nine' : 'Invalid');\n    }, $sorted_array);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmp24hip175.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24hip175.php:43\n\
    Stack trace:\n#0 /tmp/tmp24hip175.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp24hip175.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$sorted = array();\n\t\n\tusort($arr, function ($a, $b) {\n\t\treturn strlen($a)\
    \ - strlen($b);\n\t});\n\t\n\tforeach ($arr as $k => $v) {\n\t\tif ($k === 0)\n\
    \t\t\t$sorted[] = 'One';\n\t\telseif ($k === 1)\n\t\t\t$sorted[] = 'Two';\n\t\t\
    elseif ($k === 2)\n\t\t\t$sorted[] = 'Three';\n\t\telseif ($k === 3)\n\t\t\t$sorted[]\
    \ = 'Four';\n\t\telseif ($k === 4)\n\t\t\t$sorted[] = 'Five';\n\t\telseif ($k\
    \ === 5)\n\t\t\t$sorted[] = 'Six';\n\t\telseif ($k === 6)\n\t\t\t$sorted[] = 'Seven';\n\
    \t\telseif ($k === 7)\n\t\t\t$sorted[] = 'Eight';\n\t\telseif ($k === 8)\n\t\t\
    \t$sorted[] = 'Nine';\n\t\telse\n\t\t\t$sorted[] = $v;\n\t}\n\t\n\treturn $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72oiab4k.php:56\n\
    Stack trace:\n#0 /tmp/tmp72oiab4k.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp72oiab4k.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $arr2 = array_filter($arr, function($a) { return $a <= 9 && $a >= 1; });\n\
    \  if (count($arr2) === 0) { return array(); }\n  sort($arr2);\n  $reverse = array_reverse($arr2);\n\
    \  return array_map(function($v) { return $v . 'One'; }, $reverse);\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlb5zytt.php:31\n\
    Stack trace:\n#0 /tmp/tmpvlb5zytt.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvlb5zytt.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $a = array();\n    if (is_array($arr)) {\n        $b = array_keys($arr);\n\
    \        $a = array_values($arr);\n        $a = array_flip($a);\n        for ($i\
    \ = 0; $i < count($b) - 1; $i++) {\n            $a[$b[$i]] = $i + 1;\n       \
    \ }\n    }\n    return $a;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp599mraw_.php:36\n\
    Stack trace:\n#0 /tmp/tmp599mraw_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp599mraw_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (count($arr) === 0) {\n        return [];\n    }\n\n    $result =\
    \ [];\n    foreach ($arr as $num) {\n        if ($num >= 1 && $num <= 9) {\n \
    \           $result[array_search($num, $result)] = $names[$num - 1];\n       \
    \ }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vkh8qnp.php:38\n\
    Stack trace:\n#0 /tmp/tmp0vkh8qnp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0vkh8qnp.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$len = [];\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t$len[$arr[$i]]\
    \ = $i;\n\t}\n\n\t$sorted = array_reverse($arr);\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$sorted[$i] = $len[$sorted[$i]];\n\t}\n\n\tforeach ($sorted as\
    \ $key => $val) {\n\t\tif ($val < 9) {\n\t\t\t$sorted[$key] = \"One\";\n\t\t}\
    \ else if ($val < 19) {\n\t\t\t$sorted[$key] = \"Two\";\n\t\t} else if ($val <\
    \ 39) {\n\t\t\t$sorted[$key] = \"Three\";\n\t\t} else if ($val < 49) {\n\t\t\t\
    $sorted[$key] = \"Four\";\n\t\t} else if ($val < 59) {\n\t\t\t$sorted[$key] =\
    \ \"Five\";\n\t\t} else if ($val < 69) {\n\t\t\t$sorted[$key] = \"Six\";\n\t\t\
    } else if ($val < 79) {\n\t\t\t$sorted[$key] = \"Seven\";\n\t\t} else if ($val\
    \ < 89) {\n\t\t\t$sorted[$key] = \"Eight\";\n\t\t} else if ($val < 99) {\n\t\t\
    \t$sorted[$key] = \"Nine\";\n\t\t}\n\t}\n\t\n\treturn $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfweualhx.php:59\n\
    Stack trace:\n#0 /tmp/tmpfweualhx.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpfweualhx.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = count($arr);\n    if ($length == 0) {\n        return [];\n\
    \    }\n    $sortedArr = array_filter($arr, function ($v) use ($length) {\n  \
    \      return $v >= 1 && $v <= 9;\n    });\n    $sortedArr = array_reverse($sortedArr);\n\
    \    $result = array();\n    for ($i = 0; $i < $length; $i++) {\n        $result[$i]\
    \ = str_ireplace($sortedArr[$i], $arr[$i], $arr[$i]);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2osk71u.php:38\n\
    Stack trace:\n#0 /tmp/tmpd2osk71u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd2osk71u.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = array_map('strlen', $arr);\n    rsort($length);\n\n    $result\
    \ = [];\n    foreach ($arr as $val) {\n        $pos = array_search($val, $length);\n\
    \        if ($pos !== FALSE) {\n            $result[$pos] = substr($val, 0, $pos\
    \ + 1);\n        }\n    }\n\n    return $result;\n}\n\n$arr = [2, 1, 1, 4, 5,\
    \ 8, 2, 3];\n$arr = by_length($arr);\n\n$newArr = array_reverse($arr, TRUE);\n\
    $newArr = array_map(function($v) {\n    return implode('',\n        array_map(function($x)\
    \ {\n            return $x == '1' ? 'One'\n                : ($x == '2' ? 'Two'\n\
    \                    : ($x == '3' ? 'Three'\n                        : ($x ==\
    \ '4' ? 'Four'\n                            : ($x == '5' ? 'Five'\n          \
    \                      : ($x == '6' ? 'Six'\n                                \
    \    : ($x == '7' ? 'Seven'\n                                        : ($x ==\
    \ '8' ? 'Eight'\n                                            : ($x == '9' ? 'Nine'\
    \ : ''))))));\n        }, $v)\n    );\n}, $newArr);\n\nvar_dump($newArr);\n</code>\n\
    <|/ a |>\n<| a |>\nUse array_count_values and array_map for this.\n<code>\n$arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr = array_count_values($arr);\n\n$new_arr =\
    \ array_map(function($v){ \n    return implode(array_keys($v));\n}, $arr);\n\n\
    print_r($new_arr);\n</code>\n<|/ a dscore=0 tags=php,algorithm,arrays,sorting\
    \ |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8748qtwj.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr = array_filter(array_map(function ($x) {\n\t\treturn $x;\n\t}, $arr));\n\
    \tsort($arr);\n\t$arr2 = array_reverse($arr);\n\t$arr = array_map(function ($x,\
    \ $i) {\n\t\treturn str_repeat(\"One\", $x) == $arr2[$i] ? \"{$arr2[$i]}\" : \"\
    {$arr2[$i]}s\";\n\t}, $arr2, array_keys($arr2));\n\treturn $arr;\n}\n$arr2 = array_reverse(array_map(\"\
    by_length\", $arr));\n\nprint_r($arr2);\n</code>\n<|/ a tags=sorting,php,arrays\
    \ |>\n<| c |>\nIf you can do this in O(n) without having to iterate through the\
    \ array, why use an algorithm that has to iterate through the array twice?\n<|/\
    \ c |>\n<| c |>\nI didn't think about doing it without looping, but I ended up\
    \ doing it in O(n) because I had to do it multiple times, so I thought it would\
    \ be easier to have O(n) solution.\n<|/ c |>\n<| c |>\nI didn't think of it either,\
    \ but I'm pretty sure that this is still O(n). You're iterating through the array\
    \ twice, once for sorting and once for mapping out the names.\n<|/ c |>\n<| c\
    \ |>\nI believe it is O(n) because you have two loops, first for sorting and second\
    \ for mapping out names. So complexity should be O(2n) = O(n).\n<|/ c |>\n<| c\
    \ |>\nYes, the complexity is O(n). But I don't think it's possible to do it in\
    \ O(n) without iterating through the array twice...\n<|/ c |>\n<| a |>\n<code>\n\
    <?php\n\n$arr = array(\"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n$arr2 = array();\n$arr3 = array();\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqtg_xrpr.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    foreach ($arr as $key => $val) {\n        if ($val < 10) {\n        \
    \    $temp[$key] = $val;\n        }\n    }\n    return array_reverse($temp);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6ii4_gm.php:32\n\
    Stack trace:\n#0 /tmp/tmpr6ii4_gm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr6ii4_gm.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $result = array();\n  \n  usort($arr, \"by_length_cmp\");\n  \n  $arr_rev\
    \ = array_reverse($arr);\n  \n  foreach ($arr_rev as $key => $val) {\n    if ($val\
    \ > 1) {\n      $result[] = strval($val);\n    }\n  }\n  \n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'by_length_cmp' not found or invalid function name in /tmp/tmp1sxtf8qc.php on\
    \ line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sxtf8qc.php:39\n\
    Stack trace:\n#0 /tmp/tmp1sxtf8qc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1sxtf8qc.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!empty($arr)) {\n        $len = array_map(function($num) {\n    \
    \        return strlen($num);\n        }, $arr);\n        array_multisort($len);\n\
    \        return array_map(function($num) {\n            if (is_int($num)) {\n\
    \                return $num;\n            }\n            return \"One\";\n  \
    \      }, $arr);\n    }\n    return [];\n}\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft9e_5k3.php:38\n\
    Stack trace:\n#0 /tmp/tmpft9e_5k3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpft9e_5k3.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$result = [];\n\tif (empty($arr)) {\n\t\treturn $result;\n\t}\n\t$length\
    \ = array_sum(array_map('intval', array_column($arr, 'length')));\n\tif ($length\
    \ > 10) {\n\t\t$first = isset($arr[0]) ? $arr[0] : null;\n\t\t$last = array_pop($arr);\n\
    \t\t$arr = array_map(function ($el) use ($length, $first, $last) {\n\t\t\t$length\
    \ = intval($el->length);\n\t\t\t$first = isset($el[0]) ? $el[0] : null;\n\t\t\t\
    $last = isset($el[count($el) - 1]) ? $el[count($el) - 1] : null;\n\t\t\tif ($length\
    \ <= 10) {\n\t\t\t\treturn $el;\n\t\t\t}\n\t\t\tif ($length <= 20) {\n\t\t\t\t\
    return [$first == null ? 1 : $first];\n\t\t\t}\n\t\t\tif ($length <= 30) {\n\t\
    \t\t\treturn [\n\t\t\t\t\t$first == null ? 1 : $first,\n\t\t\t\t\t$last == null\
    \ ? 1 : $last\n\t\t\t\t];\n\t\t\t}\n\t\t\tif ($length <= 40) {\n\t\t\t\treturn\
    \ array_map(function ($e) use ($length) {\n\t\t\t\t\treturn [$e[0], $e[1], $e[2]];\n\
    \t\t\t\t}, $el);\n\t\t\t}\n\t\t\treturn [$e[0], $e[1], $e[2], $e[3], $e[4]];\n\
    \t\t}, $arr);\n\t}\n\tksort($arr);\n\tforeach ($arr as $key => $value) {\n\t\t\
    $result[] = sprintf('%1$s', $length);\n\t}\n\t$result = array_reverse($result);\n\
    \treturn array_map(function ($el) use ($length) {\n\t\treturn sprintf('%1$s',\
    \ $length);\n\t}, $result);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5cu36l9.php:65\n\
    Stack trace:\n#0 /tmp/tmpn5cu36l9.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpn5cu36l9.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = array_sum($arr);\n    if ($length < 2) {\n        return [];\n\
    \    }\n    $lengths_count = array_count_values($arr);\n    // Sort the array\n\
    \    sort($arr);\n    // Reverse the array\n    $arr = array_reverse($arr);\n\
    \    foreach ($arr as $key => $value) {\n        if (array_key_exists($value,\
    \ $lengths_count)) {\n            $arr[$key] = $lengths_count[$value];\n     \
    \   }\n    }\n    return array_filter($arr, 'strlen');\n}\n\n$arr = array(1, -1,\
    \ 55);\nprint_r(by_length($arr));\n</code>\n<|/ a |>\n<| c |>\nNice solution.\
    \ Could you explain a bit why is this better than other answers? Thanks.\n<|/\
    \ c |>\n<| a tags=arrays,php |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\n\
    usort($arr, function($a,$b){\n   if($a > $b){\n      return 1;\n   } elseif($a\
    \ < $b){\n      return -1;\n   } else {\n      return 0;\n   }\n});\n\n$arr =\
    \ array_reverse($arr);\n\n$arr2 = array_filter($arr, function($num){\n   return\
    \ !is_numeric($num);\n});\n\n$arr2 = array_map(function($num){\n   return 'One';\n\
    }, $arr2);\n\n$arr2 = array_merge($arr2, array_fill(0,9,0));\n\n$arr2 = array_merge($arr2,\
    \ array_fill(0,9,null));\n\nvar_dump($arr2);\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphv_ej_e2.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value >= 1 && $value <= 9) {\n            array_push($result, $value);\n \
    \       }\n    }\n    if (count($result) > 0) {\n        sort($result);\n    \
    \    $result = array_reverse($result);\n        foreach ($result as $key => $value)\
    \ {\n            array_push($result, sprintf(\"%c\", chr($value)));\n        }\n\
    \        return $result;\n    }\n    return array();\n}\n$arr = array(1, -1, 55);\n\
    $arr = by_length($arr);\nprint_r($arr);\n</code>\n<|/ a tags=arrays,php |>\n<|\
    \ a dscore=3 tags=arrays,php |>\n<code>\n<?php\n$array = [1, -1, 55];\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_ly81dtu.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (empty($arr)) {\n\t\treturn [];\n\t}\n\tsort($arr);\n\treturn array_reverse($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcmmsxx5.php:31\n\
    Stack trace:\n#0 /tmp/tmpdcmmsxx5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdcmmsxx5.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tarray_walk($arr, function(&$item, $key) { $item = strlen($item); });\n\t\
    array_walk($arr, function(&$item, $key) { $item = strrev($item); });\n\treturn\
    \ array_map(function($i) { return str_replace(range(1, 9), \"One\", \"0$i\");\
    \ }, $arr);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lu2ix26.php:29\n\
    Stack trace:\n#0 /tmp/tmp3lu2ix26.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3lu2ix26.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  // code here\n  if($arr == null) {\n    return [];\n  }\n  array_walk($arr,\
    \ function(&$v){\n    return $v = abs($v);\n  });\n  $arr = $arr ?: [];\n  array_multisort(array_map(function($v){\n\
    \    return $v < 10 ? 0 : $v < 100 ? 1 : 2;\n  }, $arr), SORT_NUMERIC, array_flip(range(0,\
    \ 9)));\n  $res = [];\n  foreach($arr as $v){\n    $res[] = str_pad(str_split($v,\
    \ 1)[$v < 10 ? 0 : 1], 2, '0', STR_PAD_RIGHT);\n  }\n  return $res;\n}\n$arr =\
    \ ['1', '10', '2', '3', '4', '5', '6', '7', '8', '9'];\nvar_dump(by_length($arr));\n\
    </code>\n<|/ a tags=arrays,sorting,php |>\n<| c |>\nYeah!! It works great, thank\
    \ you very much for your help!!\n<|/ c |>\n<| c |>\nYou are welcome, glad to help\
    \ :)\n<|/ c |>\n<| a dscore=0 |>\nI ended up with this, as I needed a general\
    \ solution so I created an array of all digits 0-9 and used a custom sorting function\
    \ to return the correct order:\n<code>\n$numbers = [\n  '10', '11', '12', '13',\
    \ '14', '15', '16', '17', '18', '19',\n  '20', '21', '22', '23', '24', '25', '26',\
    \ '27', '28', '29',\n  '30', '31', '32', '33', '34', '35', '36', '37', '38', '39',\n\
    \  '40', '41', '42', '43', '44', '45', '46', '47', '48', '49',\n  '50', '51',\
    \ '52', '53', '54', '55', '56', '57', '58', '59',\n  '60', '61', '62', '63', '64',\
    \ '65', '66', '67', '68', '69',\n  '70', '71', '72', '73', '74', '75', '76', '77',\
    \ '78', '79',\n  '80', '81', '82', '83', '84', '85', '86', '87', '88', '89',\n\
    \  '90', '91', '92', '93', '94', '95', '96', '97', '98', '99',\n  '100'\n];\n\n\
    $numbers_reversed = array_flip($numbers);\n\n$sorted = array_map(function($number){\n\
    \  return str_pad(str_split($number, 1)[$number < 10 ? 0 : 1], 2, '0', STR\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpepbfeoy_.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!$arr || !is_array($arr)) {\n        return [];\n    }\n    foreach\
    \ ($arr as $k => $v) {\n        if ($v >= 1 && $v <= 9) {\n            $arr[$k]\
    \ = strval($v);\n        }\n    }\n    array_multisort($arr, SORT_DESC, $arr);\n\
    \    $result = [];\n    foreach ($arr as $v) {\n        $result[] = $v;\n    }\n\
    \    return $result;\n}\n\n/**\n * Sorts an array of integers by their sum and\
    \ returns an array with the results.\n * For example:\n * arr = [2, 1, 1, 4, 5,\
    \ 8, 2, 3]   \n * -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n * -> return arr ->\
    \ [1, 2, 3, 1, 1, 2, 5, 4, 8]\n * If the array is empty, return an empty array:\n\
    \ * arr = []\n * -> return []\n * If the array has any strange number ignore it:\n\
    \ * arr = [1, -1 , 55] \n * -> sort arr -> [-1, 1, 55]\n * -> return arr -> [-1,\
    \ 1, 55]\n * return = ['One']\n * @param $arr array of integers\n */\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6ebopgg.php:56\n\
    Stack trace:\n#0 /tmp/tmp_6ebopgg.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp_6ebopgg.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // If the array is empty, return an empty array:\n    if (empty($arr))\
    \ {\n        return array();\n    }\n\n    // If any strange number, just ignore\
    \ it.\n    if (in_array($arr[0], array(1, -1, 55))) {\n        return array();\n\
    \    }\n\n    // Sort the array by its length:\n    sort($arr, SORT_NUMERIC);\n\
    \n    // Reverse the array:\n    $arr = array_reverse($arr);\n\n    // Replace\
    \ every digit in the array by its corresponding name from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\":\n    $arr\
    \ = str_split(implode('', $arr));\n    \n    // Return an array with the names\
    \ of the digits:\n    return array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\");\n}\n</code>\n<|/ a dscore=3 tags=php,algorithm\
    \ |>\n<| a dscore=3 |>\n<code>\n<?php\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arrLength\
    \ = count($arr);\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1j553626.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return array();\n  }\n\n  $min_value = array_pop($arr);\n\
    \  $max_value = array_pop($arr);\n  return array_map(\n    function ($i) use ($min_value,\
    \ $max_value) {\n      $int_value = $i - 1;\n      return sprintf('%d', $int_value);\n\
    \    },\n    array_merge(\n      range($min_value, $max_value),\n      range($max_value\
    \ + 1, $min_value + 1)\n    )\n  );\n}\n\n/**\n * Test two ints.\n *\n * Return\
    \ true if the two given ints are equal or false if not.\n */\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bcrgptg.php:47\n\
    Stack trace:\n#0 /tmp/tmp2bcrgptg.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2bcrgptg.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return [];\n    }\n\n    $nums = [];\n  \
    \  $max  = 9;\n    $min  = 1;\n    foreach ($arr as $n) {\n        if (!empty($n))\
    \ {\n            if ($n > $max) {\n                $nums[$n] = 'Max';\n      \
    \      } elseif ($n < $min) {\n                $nums[$n] = 'Min';\n          \
    \  } else {\n                $nums[$n] = floor($n).\"-\".$max;\n            }\n\
    \        }\n    }\n    $result = array();\n    foreach ($nums as $n => $r) {\n\
    \        $result[] = strrev($r);\n    }\n    return array_unique($result);\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpywqinj83.php:49\n\
    Stack trace:\n#0 /tmp/tmpywqinj83.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpywqinj83.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!$arr) {\n        return [];\n    }\n    $len = sizeof($arr);\n \
    \   if ($len < 10) {\n        $names = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n        $index = 0;\n \
    \       $temp = $arr;\n        $temp = array_map(function($value) use (&$names,\
    \ &$index, $len) {\n            $index = ++$index % $len;\n            return\
    \ $names[$index];\n        }, $arr);\n        $arr = [];\n        foreach ($temp\
    \ as $value) {\n            $arr[] = $value;\n        }\n        return $arr;\n\
    \    }\n    $temp = $arr;\n    array_multisort(array_map('strlen', $arr), SORT_DESC,\
    \ $arr);\n    array_multisort(array_map('strlen', $arr), SORT_DESC, $arr);\n \
    \   array_multisort(array_map('strlen', $arr), SORT_ASC, $arr);\n    $arr = [];\n\
    \    foreach ($temp as $value) {\n        $arr[] = $value;\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbakzc84.php:53\n\
    Stack trace:\n#0 /tmp/tmprbakzc84.php(60): test()\n#1 {main}\n  thrown in /tmp/tmprbakzc84.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return [];\n  }\n  // Get rid of any strange numbers\n\
    \  $arr = array_filter($arr, 'is_numeric');\n  $arr = array_merge($arr, range(1,9));\n\
    \  \n  // Sort the array\n  sort($arr);\n  \n  // Reverse the array\n  array_reverse($arr);\n\
    \  \n  // Replace each digit by its corresponding name from \n  // \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n\
    \  $result = [];\n  for ($i=0; $i < count($arr); $i++) {\n    if ($arr[$i] >=\
    \ 1 && $arr[$i] <= 9) {\n      $result[] = str_replace(range(0,9), '', $arr[$i])\
    \ . chr(ord(\"A\") + $i);\n    } else {\n      continue 2;\n    }\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| c |>\nThis doesn't\
    \ work if any number in the array is a strange number. See my answer for a fix.\n\
    <|/ c |>\n<| c |>\nI didn't say this didn't work, I said it didn't work as desired.\
    \ Your answer doesn't do what the OP asked. I gave an example of how this sort\
    \ of thing works in my answer. Did you read the question?\n<|/ c |>\n<| c |>\n\
    Yeah I did read the question. My answer does not answer it. Your answer does not\
    \ solve the problem you raised in your comment. Maybe you should read what you're\
    \ posting, and my answer. Your answer does not solve the problem you raised in\
    \ your comment. And your answer does not answer my question, which asked for a\
    \ solution where negative numbers are not considered when sorting.\n<|/ c |>\n\
    <| c |>\nAh, okay, I misunderstood that part. I suppose you could still use the\
    \ first part of my answer to do that.\n<|/ c |>\n<| c |>\nThat's not what your\
    \ solution does.\n<|/ c |>\n<| a tags=arrays,php,sorting dscore=4 |>\nThis should\
    \ be the fastest and most readable answer. I've used a lambda function for the\
    \ sort comparison and array_flip for the reverse conversion, which is necessary\
    \ because sorting and reversing are opposites of each other. \n<code>\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkxxiytw1.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = count($arr);\n  $lenMinus1 = $len - 1;\n  foreach ($arr as $key\
    \ => $value) {\n    if ($value == 1) {\n      // remove 1 to 9\n      unset($arr[$key]);\n\
    \    }\n  }\n  if (count($arr) == 0) {\n    return [];\n  }\n  // sort arr\n \
    \ $arr2 = [];\n  foreach ($arr as $key => $value) {\n    $arr2[$key] = $value;\n\
    \  }\n  sort($arr2);\n  // reverse arr\n  $arr3 = array_reverse($arr2);\n  //\
    \ replace each digit to its corresponding name from \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n  $arr4 = [];\n\
    \  foreach ($arr3 as $key => $value) {\n    $arr4[$key] = $arrName[$value];\n\
    \  }\n  return $arr4;\n}\n\n$arr1 = [];\nfor ($i = 1; $i <= 9; $i++) {\n  $arr1[]\
    \ = $i;\n}\n$arr2 = by_length($arr1);\necho \"<pre>\";\nprint_r($arr2);\necho\
    \ \"</pre>\";\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => \n    [1] => \n    [2] => \n    [3] => \n   \
    \ [4] => \n    [5] => \n    [6] => \n    [7] => \n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpz6awsv4b.php:59\nStack trace:\n#0 /tmp/tmpz6awsv4b.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz6awsv4b.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    sort($arr);\n    return array_reverse($arr);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nHow does this answer the question?\n<|/ c |>\n<| c |>\nIt returns\
    \ the correct output.  Just because I wrote the code doesn't mean its correct\
    \ or is correct in all circumstances.\n<|/ c |>\n<| c |>\nThis doesn't output\
    \ the expected output, which is `[\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]`\n<|/ c |>\n<| c |>\nI didn't realize you were\
    \ looking for the names.  I made some changes.  I left the `array_reverse()` call\
    \ in there, since you said you wanted them reversed.  I also changed the sorting\
    \ algorithm to a different one.\n<|/ c |>\n<| a tags=arrays,algorithm,php |>\n\
    First of all, you can't sort arrays by their numeric values if they're mixed of\
    \ strings and numbers.\nYou can only sort arrays by their key's alphabetical order\
    \ or a numerical order.\nSecond, you didn't write any code for that.\n<|/ a dscore=0\
    \ |>\n<| a |>\nTry this:\n<code>\n<?php\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\n\
    $newArr = array();\n$strArr = array();\n\nforeach($arr as $value) {\n    if($value\
    \ <= 9) {\n        $strArr[] = $value;\n    } else {\n        $strArr[] = \"'\"\
    \ . $value . \"'\";\n    }\n}\n\nrsort($strArr);\n\nforeach($strArr as $strValue)\
    \ {\n    array_push($newArr, $strValue);\n}\n\n$newArr = array_reverse($newArr);\n\
    print_r($newArr);\n</code>\nThe idea is to get the string representation of the\
    \ numbers in the array and then sort them alphabetically and then reverse the\
    \ array.\n<|/ a dscore=0 tags=arrays,algorithm,php |>\n<| c |>\nThis doesn't output\
    \ the expected output, which is `[\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]`\n<|/ c |>\n<| a dscore=0 tags=arrays,algorithm,php\
    \ |>\nYou can use the PHP array_multisort function, that does what you want:\n\
    <code>\n<?php\n$a = array(2, 1, 1, 4, 5, 8, 2, 3);\narray_multisort($a);\nprint_r($a);\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm1_nno45.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // sort arr\n    $arr = sort($arr);\n    // reverse arr\n    $arr = array_reverse($arr);\n\
    \    // replace each digit by its corresponding name from One, Two, ..., Nine\n\
    \    $arr = array_map(function($item){\n        $str = str_pad($item+1, 9, \"\
    0\", STR_PAD_LEFT);\n        return $names[$item] ?? $str;\n    }, $arr);\n  \
    \  return array_filter(array_unique($arr));\n}\n$names = [\n    \"One\" => \"\
    Eight\",\n    \"Two\" => \"Five\",\n    \"Three\" => \"Four\",\n    \"Four\" =>\
    \ \"Three\",\n    \"Five\" => \"Two\",\n    \"Six\" => \"One\",\n    \"Seven\"\
    \ => \"One\",\n    \"Eight\" => \"Nine\",\n    \"Nine\" => \"Eight\",\n];\n$arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr = by_length($arr);\necho implode(\"\\n\",\
    \ $arr);\n</code>\n<|/ a tags=sorting,arrays,php |>\n<| c |>\nNice one. I will\
    \ add it to my toolbelt.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers,\
    \ though.\n<|/ c |>\n<| c |>\nYou are right. I fixed it. It works now.\n<|/ c\
    \ |>\n<| c |>\nThanks, works great! I modified it a bit to make it more reusable.\
    \ https://gist.github.com/jamesbarnett/fcc66e66d6bab7ffb5b88e86ca9f8484\n<|/ c\
    \ |>\n<| a |>\n<code>\n<?php\n\n$input = [\n    '1' => 'One',\n    '2' => 'Two',\n\
    \    '3' => 'Three',\n    '4' => 'Four',\n    '5' => 'Five',\n    '6' => 'Six',\n\
    \    '7' => 'Seven',\n    '8' => 'Eight',\n    '9' => 'Nine',\n    '0' => 'Zero',\n\
    \    'a' => 'A',\n    'b' => 'B',\n    'c' => 'C',\n    'd' => 'D',\n    'e' =>\
    \ 'E',\n    'f' => 'F',\n    'g' => 'G',\n    'h' => 'H',\n    'i' => 'I',\n \
    \   'j' => 'J',\n    'k' => 'K',\n    'l' => 'L',\n    'm' => 'M',\n    'n' =>\
    \ 'N',\n    'o' => 'O',\n    'p' => 'P',\n    'q' => 'Q',\n    'r' => 'R',\n \
    \   's' \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps4tqvox5.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Sort the array by length\n    sort($arr);\n    // Reverse the array\n\
    \    reverse($arr);\n    // Map each digit to its corresponding number\n    $arr2\
    \ = array_map(function ($digit) {\n        static $arr = [\n            \"One\"\
    \ => 1,\n            \"Two\" => 2,\n            \"Three\" => 3,\n            \"\
    Four\" => 4,\n            \"Five\" => 5,\n            \"Six\" => 6,\n        \
    \    \"Seven\" => 7,\n            \"Eight\" => 8,\n            \"Nine\" => 9\n\
    \        ];\n        return $arr[$digit];\n    }, $arr);\n    // Return the sorted\
    \ array but with the length reversed\n    return array_map(function ($digit) {\n\
    \        static $arr = [\n            \"One\" => 1,\n            \"Two\" => 2,\n\
    \            \"Three\" => 3,\n            \"Four\" => 4,\n            \"Five\"\
    \ => 5,\n            \"Six\" => 6,\n            \"Seven\" => 7,\n            \"\
    Eight\" => 8,\n            \"Nine\" => 9\n        ];\n        return $arr[$digit];\n\
    \    }, $arr2);\n}\n\n$input = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = by_length($input);\n\
    var_dump($result);\n</code>\nThe above code produces the following array:\n<code>\n\
    array(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(1)\n  [2]=>\n  int(1)\n  [3]=>\n\
    \  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(2)\n  [6]=>\n  int(3)\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is much better than my solution!\n<|/ c |>\n<| a dscore=2\
    \ tags=arrays,algorithm,php |>\nThis is a great question.\nHere is my answer:\n\
    <code>\n$arr = array();\n$a = 1;\n$b = 2;\n$c = 3;\n$d = 4;\n$e = 5;\n$f = 6;\n\
    $g = 7;\n$h = 8;\n$i = 9;\n$arr[] = $a;\n$arr[] = $b;\n$arr[] = $c;\n$arr[] =\
    \ $d;\n$arr[] = $e;\n$arr[] = $f;\n$arr[] = $g;\n$arr[] = $h;\n$arr[] = $i;\n\
    $size = count($arr);\n$result = [];\nfor ($i=0; $i<$size; $i++) {\n    if ($i%2\
    \ === 0) {\n        for ($j=0; $j<$size; $\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnbfs2otf.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$result = [];\n\tforeach($arr as $value) {\n\t\tif ($value == $value) {\n\
    \t\t\t$result[] = 'One';\n\t\t} elseif ($value == $value + 1) {\n\t\t\t$result[]\
    \ = 'Two';\n\t\t} elseif ($value == $value - 1) {\n\t\t\t$result[] = 'Three';\n\
    \t\t} elseif ($value == $value + 2) {\n\t\t\t$result[] = 'Four';\n\t\t} elseif\
    \ ($value == $value - 2) {\n\t\t\t$result[] = 'Five';\n\t\t} elseif ($value ==\
    \ $value + 3) {\n\t\t\t$result[] = 'Six';\n\t\t} elseif ($value == $value - 3)\
    \ {\n\t\t\t$result[] = 'Seven';\n\t\t} elseif ($value == $value + 4) {\n\t\t\t\
    $result[] = 'Eight';\n\t\t} elseif ($value == $value - 4) {\n\t\t\t$result[] =\
    \ 'Nine';\n\t\t} else {\n\t\t\t$result[] = '?';\n\t\t}\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6mb2tkp.php:50\n\
    Stack trace:\n#0 /tmp/tmp_6mb2tkp.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_6mb2tkp.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) return [];\n    sort($arr);\n    return array_reverse($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph6w7ex5y.php:29\n\
    Stack trace:\n#0 /tmp/tmph6w7ex5y.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph6w7ex5y.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (!is_array($arr)) return [];\n  $result = [];\n  $one = array_slice($arr,\
    \ 0, 1);\n  array_push($result, 'One');\n  foreach ($arr as $key => $val) {\n\
    \    if ($val != $one) {\n      if ($key === 0) $result[] = 'One';\n      else\
    \ $result[] = str_replace(array_slice($arr, 0, $key - 1), array_slice($arr, $key),\
    \ $result[$key - 1]);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays,php\
    \ |>\n<| c |>\nWhat do you mean by \"replace each digit by its corresponding name\
    \ from One to Nine\"? Do you mean replace the digit with the name from One, Two,\
    \ ... Nine?\n<|/ c |>\n<| c |>\nI mean each number from the array will be replaced\
    \ with the corresponding name from \"One\" to \"Nine\", so the array [2,2,1,1,4,5,8,2,3]\
    \ will be [One, One, Two, Two, Four, Five, Six,Seven, Eight, Nine].\n<|/ c |>\n\
    <| c |>\nI meant `One` -> `Eight`, `Two` -> `Five`, `Three` -> `Four`, ...\n<|/\
    \ c |>\n<| c |>\nYes, sorry I should have been more specific. I meant \"One\"\
    \ -> \"Eight\", \"Six\" -> \"Five\", etc.\n<|/ c |>\n<| c |>\nGreat! I've updated\
    \ the answer with an implementation of this idea.\n<|/ c |>\n<| a dscore=2 |>\n\
    Here is another simple algorithm using recursion\n<code>\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfvbdxb1w.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  // Sort the array and reverse it.\n  $arr = array_reverse($arr);\n\n  //\
    \ Return the first array element if any exists. \n  if (count($arr) > 0) {\n \
    \   return $arr[0];\n  } else {\n    return [];\n  }\n}\n\nprint_r($by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nprint_r($by_length([2, 1, 1, 4, 5, 8, 2, 30]));\nprint_r($by_length([]));\n\
    print_r($by_length([55, 1, 1, -1, 55]));\nprint_r($by_length([-1, 1, 55]));\n\
    print_r($by_length([1, -1 , 55]));\nprint_r($by_length([1, 1, 55]));\nprint_r($by_length([55,\
    \ -1, 55]));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp3vucx2nx.php:30\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmp3vucx2nx.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $return = [];\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ foreach ($arr as $v) {\n        $return[] = array_search($v, range(1, 10));\n\
    \    }\n    return $return;\n}\n\n$array = [2, 1, 1, 4, 5, 8, 2, 3];\n$result\
    \ = by_length($array);\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=php,sorting |>\nI like most of these answers very much, however i went\
    \ with my original method where i used a foreach loop.\nThis was my original code:\n\
    <code>\n    $array = [2, 1, 1, 4, 5, 8, 2, 3];\n    $result = by_length($array);\n\
    \    print_r($result);\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmper7web0h.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return array_reverse($arr);\n}\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n\
    $arr = by_length($arr);\n$arr = array_map('by_length', $arr);\n$arr = array_merge($arr);\n\
    $arr = array_map(function($x) {\n    return str_pad($x, 1, '0', STR_PAD_LEFT);\n\
    }, $arr);\nprint_r($arr);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nOh my god this\
    \ is incredible! I just changed a variable and my code worked! Thanks!\n<|/ c\
    \ |>\n<| c |>\nNo problem, but if your question is answered, please mark it as\
    \ accepted.\n<|/ c |>\n<| c |>\nOne more quick question for my understanding.\
    \ What is the purpose of STR_PAD_RIGHT? I believe it is messing me up.\n<|/ c\
    \ |>\n<| c |>\n`STR_PAD_RIGHT` makes the `2` go on the right side. Just like `STR_PAD_CENTER`\
    \ makes the `2` go on the left side of the string and the `1` go to the center\
    \ of the string. The difference is that the `2` is going from the right to the\
    \ left, but `1` going from the left to the right.\n<|/ c |>\n<| c |>\nOne last\
    \ question. Would it be possible to do the same with integers? For example, in\
    \ the array above it would be: [1, -1 , 55]\n<|/ c |>\n<| a tags=php dscore=0\
    \ |>\nYou could use array_walk:\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\narray_walk($arr,\
    \ function($item, $key) use (&$arr) {\n    $arr[$key] = ($item % 10) * pow(10,\
    \ strlen($arr) - $key - 1);\n});\n$arr = array_reverse($arr);\nprint_r($arr);\n\
    </code>\nOutput\n<code>\nArray ( [0] => 8 [1] => 5 [2] => 4 [3] => 3 [4] => 2\
    \ [5] => 2 [6] => 1 [7] => 1 )\n</code>\n<|/ a |>\n<| a tags=php |>\nYou could\
    \ also use an array_map function, like so:\n<code>\n<?php\n$arr = [2, 1, 1, 4,\
    \ 5, 8, 2, 3];\n\n$reversed_arr = array_map('intval', array_reverse($arr));\n\
    $reversed_arr = array_map('str_pad', $reversed_arr, 5, STR_PAD_RIGHT, STR_PAD_LEFT);\n\
    \n$new_arr = array_map(function ($v) {\n    return str_pad($v, 1, '0\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0_cc9_8s.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (!is_array($arr)) {\n    return [];\n  }\n  $sorted = [];\n  usort(\n\
    \    $arr,\n    function ($a, $b) {\n      return strlen($a) - strlen($b);\n \
    \   }\n  );\n  $reversed = array_reverse($arr);\n  foreach ($reversed as $num)\
    \ {\n    $sorted[] = isset($name[$num])\n      ? $name[$num]\n      : 'Zero';\n\
    \  }\n  return $sorted;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtvo6abh.php:43\n\
    Stack trace:\n#0 /tmp/tmpjtvo6abh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjtvo6abh.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return array();\n    }\n\n    $sorted = array_merge(\n\
    \        array_fill(0, 9, array()),\n        array_slice($arr, 1, 10)\n    );\n\
    \n    $reversed = array_map(\n        function ($num) {\n            return array_pop($sorted);\n\
    \        },\n        $sorted\n    );\n\n    return array_map(\n        function\
    \ ($num) {\n            return sprintf('One', str_replace(\n                array_fill(0,\
    \ 9, '0'),\n                array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n           \
    \     $num\n            ));\n        },\n        $reversed\n    );\n}\n</code>\n\
    <|/ a dscore=1 tags=arrays,sorting,php |>\n<| c |>\nThis is great. Thanks so much\
    \ for your help :) I'm going to learn more about arrays and how to work with them.\n\
    <|/ c |>\n<| a dscore=1 |>\nI believe you mean something like this:\n<code>\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphriv5cew.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (!is_array($arr) || empty($arr))\n    return [];\n\n  $arr['1'] = 'One';\n\
    \  $arr['2'] = 'Two';\n  $arr['3'] = 'Three';\n  $arr['4'] = 'Four';\n  $arr['5']\
    \ = 'Five';\n  $arr['6'] = 'Six';\n  $arr['7'] = 'Seven';\n  $arr['8'] = 'Eight';\n\
    \  $arr['9'] = 'Nine';\n\n  $length = array_map('strlen', $arr);\n  $length =\
    \ array_filter($length, function($n) {\n    return $n >= 1 && $n <= 9;\n  });\n\
    \  $length = array_values($length);\n  asort($length);\n  $reverse = array_reverse($length);\n\
    \  $result = array_map(function($value, $key) use ($arr) {\n    return $arr[$key];\n\
    \  }, $reverse, $length);\n  return $result;\n}\n$result = by_length($arr);\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64sxbd5s.php:51\n\
    Stack trace:\n#0 /tmp/tmp64sxbd5s.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp64sxbd5s.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $new_arr = [];\n    $count = count($arr);\n    if ($count === 0) return\
    \ $new_arr;\n    if ($count === 1) return $new_arr;\n    $sorted_arr = array_merge(array_keys($arr),\
    \ $arr);\n    sort($sorted_arr);\n    $arr = array_reverse($sorted_arr);\n   \
    \ $length = array_sum(array_map('strlen', $arr));\n    foreach ($arr as $key =>\
    \ $val) {\n        $val = preg_replace('/[^1-9]/', '', $val);\n        $digits\
    \ = str_split($val, 1);\n        $new_arr[] = array_combine($digits, $key);\n\
    \    }\n    return $new_arr;\n}\n\nprint_r($output);\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_combine() expects parameter 2 to be array, int given in\
    \ /tmp/tmpv3pq3ewt.php on line 30\n\nWarning: array_combine() expects parameter\
    \ 2 to be array, int given in /tmp/tmpv3pq3ewt.php on line 30\n\nWarning: array_combine()\
    \ expects parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php on line 30\n\
    \nWarning: array_combine() expects parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php\
    \ on line 30\n\nWarning: array_combine() expects parameter 2 to be array, int\
    \ given in /tmp/tmpv3pq3ewt.php on line 30\n\nWarning: array_combine() expects\
    \ parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php on line 30\n\nWarning:\
    \ array_combine() expects parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php\
    \ on line 30\n\nWarning: array_combine() expects parameter 2 to be array, int\
    \ given in /tmp/tmpv3pq3ewt.php on line 30\n\nWarning: array_combine() expects\
    \ parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php on line 30\n\nWarning:\
    \ array_combine() expects parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php\
    \ on line 30\n\nWarning: array_combine() expects parameter 2 to be array, int\
    \ given in /tmp/tmpv3pq3ewt.php on line 30\n\nWarning: array_combine() expects\
    \ parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php on line 30\n\nWarning:\
    \ array_combine() expects parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php\
    \ on line 30\n\nWarning: array_combine() expects parameter 2 to be array, int\
    \ given in /tmp/tmpv3pq3ewt.php on line 30\n\nWarning: array_combine() expects\
    \ parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php on line 30\n\nWarning:\
    \ array_combine() expects parameter 2 to be array, int given in /tmp/tmpv3pq3ewt.php\
    \ on line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3pq3ewt.php:41\n\
    Stack trace:\n#0 /tmp/tmpv3pq3ewt.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpv3pq3ewt.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    $sorted = $arr;\n    array_multisort($sorted,\
    \ SORT_DESC, $arr);\n\n    for ($i = $len - 2; $i >= 0; $i -= 2) {\n        if\
    \ ($sorted[$i] === $sorted[$i + 1]) {\n            $sorted[$i] = \"One\";\n  \
    \          $sorted[$i + 1] = \"Two\";\n        }\n    }\n\n    return $arr;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbi5tllz.php:37\n\
    Stack trace:\n#0 /tmp/tmpqbi5tllz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqbi5tllz.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $n = count($arr);\n    if (!$n) {\n        return array();\n    }\n\n\
    \    // sort arr\n    $a = array_keys($arr);\n    array_multisort($arr);\n\n \
    \   // reverse arr\n    $a = array_reverse($a);\n\n    // arr is now sorted\n\
    \    $str = strrev($arr[0]);\n    $str = str_split($str);\n    $str = array_combine($a,\
    \ $str);\n\n    // arr is now reversed, return an array of the names of the digits\
    \ (0-9)\n    return array_values($str);\n}\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_combine(): Both parameters should have an equal number\
    \ of elements in /tmp/tmp_h1kl5ta.php on line 34\n\nWarning: array_values() expects\
    \ parameter 1 to be array, bool given in /tmp/tmp_h1kl5ta.php on line 37\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp_h1kl5ta.php:44\nStack trace:\n\
    #0 /tmp/tmp_h1kl5ta.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_h1kl5ta.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return [];\n  }\n\n  if (count($arr) < 2) {\n \
    \   return ['One'];\n  }\n\n  usort($arr, 'cmp');\n\n  return array_reverse($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmpcxvk5axo.php on line 27\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxvk5axo.php:37\nStack\
    \ trace:\n#0 /tmp/tmpcxvk5axo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcxvk5axo.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $result = array();\n  $length = count($arr);\n  for($i=0;$i<$length;$i++)\
    \ {\n    if($arr[$i] >= 1 && $arr[$i] <= 9) {\n      array_push($result,\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n    }\n  }\n  return array_reverse($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg92ery9k.php:34\n\
    Stack trace:\n#0 /tmp/tmpg92ery9k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpg92ery9k.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (!$arr) return [];\n\t$len = count($arr);\n\t$i = 0;\n\twhile ($i <\
    \ $len) {\n\t\tif ($arr[$i] > 9) $arr[($i+1)] = $arr[$i] % 10;\n\t\t$i++;\n\t\
    }\n\t$len = count($arr);\n\t$i = 0;\n\twhile ($i < $len) {\n\t\tif ($arr[$i] >\
    \ 9) $arr[($i)] = $arr[$i] + '' . ucfirst($arr[($i)]%10);\n\t\t$i++;\n\t}\n\t\
    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6uj416p7.php:40\n\
    Stack trace:\n#0 /tmp/tmp6uj416p7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6uj416p7.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) return [];\n  sort($arr);\n  $revArr = array_reverse($arr);\n\
    \  foreach ($revArr as $key => $value) {\n    if ($value < 1 || $value > 9) unset($revArr[$key]);\n\
    \  }\n  return array_map(function ($n) { return ${\"One\"[$n]}; }, $revArr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi81_8in5.php:33\n\
    Stack trace:\n#0 /tmp/tmpi81_8in5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi81_8in5.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $length = array_count_values($arr);\n  arsort($length);\n  $count = array_keys($length);\n\
    \  foreach ($count as $key => $value) {\n    if ($value == 1) {\n      return\
    \ array_slice($count, 0, $key);\n    }\n  }\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppncc1dsd.php:35\n\
    Stack trace:\n#0 /tmp/tmppncc1dsd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppncc1dsd.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Your code here...\n    $result = array();\n    foreach($arr as $key\
    \ => $value) {\n        if ( $value < 1 || $value > 9 ) {\n            continue;\n\
    \        }\n        $result[] = $arr[$key];\n    }\n    if ( count($result) ==\
    \ 0 ) {\n        return array();\n    }\n    $result = array_reverse($result);\n\
    \    foreach($result as $key => $value) {\n        if ( $value <= 9 ) {\n    \
    \        $result[$key] = 'One';\n        } elseif ( $value == 10 ) {\n       \
    \     $result[$key] = 'Ten';\n        } elseif ( $value == 11 ) {\n          \
    \  $result[$key] = 'Eleven';\n        } elseif ( $value == 12 ) {\n          \
    \  $result[$key] = 'Twelve';\n        } elseif ( $value == 13 ) {\n          \
    \  $result[$key] = 'Thirteen';\n        } elseif ( $value == 14 ) {\n        \
    \    $result[$key] = 'Fourteen';\n        } elseif ( $value == 15 ) {\n      \
    \      $result[$key] = 'Fifteen';\n        } elseif ( $value == 16 ) {\n     \
    \       $result[$key] = 'Sixteen';\n        } elseif ( $value == 17 ) {\n    \
    \        $result[$key] = 'Seventeen';\n        } elseif ( $value == 18 ) {\n \
    \           $result[$key] = 'Eighteen';\n        } elseif ( $value == 19 ) {\n\
    \            $result[$key] = 'Nineteen';\n        } elseif ( $value == 20 ) {\n\
    \            $result[$key] = 'Twenty';\n        } elseif ( $value == 21 ) {\n\
    \            $result[$key] = 'Twenty one';\n        } elseif ( $value == 22 )\
    \ {\n            $result[$key] = 'Twenty two';\n        } elseif ( $value == 23\
    \ ) {\n            $result[$key] = 'Twenty three';\n        } elseif ( $value\
    \ == 24 ) {\n            $result[$key] = 'Twenty four';\n        } elseif ( $value\
    \ == 25 ) {\n            $result[$key] = 'Twenty five';\n        } elseif ( $value\
    \ == 26 ) {\n            $result[$key] = 'Twenty six';\n        } elseif ( $value\
    \ == 27 ) {\n            $result[$key] = 'Twenty seven';\n        } elseif ( $value\
    \ == 28 ) {\n            $result[$key] = 'Twenty eight';\n        } elseif ( $value\
    \ == 29 ) {\n            $result[$key] = 'Twenty nine';\n        } elseif ( $value\
    \ == 30 ) {\n            $result[$key] = 'Thirty';\n        } elseif ( $value\
    \ == 31 ) {\n            $result[$key] = 'Thirty one';\n        } elseif ( $value\
    \ == 32 ) {\n            $result[$key\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt9uiqzvk.php on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return array_reverse(\n            array_map(\n                    function($num)\
    \ {\n                        $length = strlen($num);\n                       \
    \ return isset($num[$length-1])\n                                ? [$num, $num[$length-1]]\n\
    \                                : [$num];\n                    }, \n        \
    \            $arr)\n    );\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p_0b508.php:35\n\
    Stack trace:\n#0 /tmp/tmp_p_0b508.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_p_0b508.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $temp = array();\n    foreach ($arr as $item) {\n        $temp[] = $item;\n\
    \    }\n    sort($temp);\n    $temp = array_reverse($temp);\n    return $temp;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyk0gbdb.php:33\n\
    Stack trace:\n#0 /tmp/tmplyk0gbdb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplyk0gbdb.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $length = array_map('strlen', $arr);\n  return array_map(function ($item,\
    \ $index) {\n    return mb_substr($item, 0, 1) . array_keys($length)[$index];\n\
    \  }, $arr, $length);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_substr() in\
    \ /tmp/tmp8coxuggz.php:21\nStack trace:\n#0 [internal function]: {closure}(2,\
    \ 1)\n#1 /tmp/tmp8coxuggz.php(22): array_map(Object(Closure), Array, Array)\n\
    #2 /tmp/tmp8coxuggz.php(26): by_length(Array)\n#3 /tmp/tmp8coxuggz.php(30): candidate(Array)\n\
    #4 /tmp/tmp8coxuggz.php(37): test()\n#5 {main}\n  thrown in /tmp/tmp8coxuggz.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sorted = [];\n    if (count($arr) > 0) {\n        foreach ($arr as $value)\
    \ {\n            $tmp = [$value];\n            while (count($tmp) > 0) {\n   \
    \             $number = array_shift($tmp);\n                if ($number < 10)\
    \ {\n                    $sorted[] = 'One';\n                } else if ($number\
    \ < 20) {\n                    $sorted[] = 'Two';\n                } else if ($number\
    \ < 30) {\n                    $sorted[] = 'Three';\n                } else if\
    \ ($number < 40) {\n                    $sorted[] = 'Four';\n                }\
    \ else if ($number < 50) {\n                    $sorted[] = 'Five';\n        \
    \        } else if ($number < 60) {\n                    $sorted[] = 'Six';\n\
    \                } else if ($number < 70) {\n                    $sorted[] = 'Seven';\n\
    \                } else if ($number < 80) {\n                    $sorted[] = 'Eight';\n\
    \                } else if ($number < 90) {\n                    $sorted[] = 'Nine';\n\
    \                } else {\n                    $sorted[] = 'Ten';\n          \
    \      }\n            }\n        }\n    }\n    return $sorted;\n}\n$input = \"\
    1, 2, 4, 3, 8, 5\";\nprint_r(by_length($input));\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpnq3hf4p3.php on line 20\n\nWarning: Invalid argument supplied\
    \ for foreach() in /tmp/tmpnq3hf4p3.php on line 21\nArray\n(\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpnq3hf4p3.php:58\nStack trace:\n\
    #0 /tmp/tmpnq3hf4p3.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpnq3hf4p3.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (count($arr) == 0) return [];\n    $min = min($arr);\n    $max = max($arr);\n\
    \    if ($min == $max) return [];\n    $count = [];\n    for ($i = $min; $i <=\
    \ $max; $i++) {\n        if (isset($count[$i]) && $count[$i] > 0) $count[$i]++;\n\
    \        else $count[$i] = 1;\n    }\n    for ($i = $min; $i <= $max; $i++) {\n\
    \        $new[$i] = $count[$i];\n    }\n    asort($new);\n    $new = [];\n   \
    \ foreach ($new as $k => $v) $new[$k] = $names[$k];\n    return array_reverse($new);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gsq422b.php:42\n\
    Stack trace:\n#0 /tmp/tmp0gsq422b.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0gsq422b.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Your code here\n    if (empty($arr)) {\n        return [];\n    }\n\
    \    foreach ($arr as $key => $value) {\n        if ($value >= 1 && $value <=\
    \ 9) {\n            $length[$value] = strval($value);\n        }\n    }\n    ksort($length);\n\
    \    reset($length);\n    return array_map(function($item) use ($length) {\n \
    \       return array_search($item, $length);\n    }, $arr);\n}\n</code>\n<|/ a\
    \ tags=arrays,php,sorting,numbers |>\n<| c |>\nThis seems to work great but when\
    \ I test it I get this: [22, 31, 12, 19, 21, 34, 21, 29, 24, 29, 28, 25, 28] when\
    \ it should give me [22, 21, 19, 34, 12, 29, 21, 31, 24, 28, 25, 28]\n<|/ c |>\n\
    <| c |>\nThis answer fails to provide any sorting algorithm that works on multidimensional\
    \ arrays.\n<|/ c |>\n<| c |>\nThis answer fails to provide any sorting algorithm\
    \ that works on multidimensional arrays.\n<|/ c |>\n<| a tags=arrays,php,sorting,numbers\
    \ |>\nHere's a function that accepts an array and returns the sorted array. The\
    \ function is recursive, i.e. the function calls itself for the second level of\
    \ the array:\n<code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyjwocp2m.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!$arr) return array();\n    $len = sizeof($arr);\n    if ($len <=\
    \ 1) {\n        return $arr;\n    }\n    for ($i = 0; $i < $len; $i++) {\n   \
    \     if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n            $arr[$i] = \"One\";\n\
    \        } else if ($arr[$i] >= 10 && $arr[$i] <= 19) {\n            $arr[$i]\
    \ = \"Two\";\n        } else if ($arr[$i] >= 20 && $arr[$i] <= 29) {\n       \
    \     $arr[$i] = \"Three\";\n        } else if ($arr[$i] >= 30 && $arr[$i] <=\
    \ 39) {\n            $arr[$i] = \"Four\";\n        } else if ($arr[$i] >= 40 &&\
    \ $arr[$i] <= 49) {\n            $arr[$i] = \"Five\";\n        } else if ($arr[$i]\
    \ >= 50 && $arr[$i] <= 59) {\n            $arr[$i] = \"Six\";\n        } else\
    \ if ($arr[$i] >= 60 && $arr[$i] <= 69) {\n            $arr[$i] = \"Seven\";\n\
    \        } else if ($arr[$i] >= 70 && $arr[$i] <= 89) {\n            $arr[$i]\
    \ = \"Eight\";\n        } else if ($arr[$i] >= 90 && $arr[$i] <= 99) {\n     \
    \       $arr[$i] = \"Nine\";\n        }\n    }\n    $len = sizeof($arr);\n   \
    \ if ($len == 0) {\n        return array();\n    }\n    for ($i = $len - 1; $i\
    \ >= 0; $i--) {\n        $arr[$i] = strrev($arr[$i]);\n    }\n    return $arr;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_1r9aqi.php:59\n\
    Stack trace:\n#0 /tmp/tmp5_1r9aqi.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp5_1r9aqi.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  arsort($arr);\n  $res = array_reverse($arr);\n  foreach ($res as $key =>\
    \ $val){\n    $res[$key] = str_replace($key, \"One\", $val);\n  }\n  return $res;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqw5822yx.php:31\n\
    Stack trace:\n#0 /tmp/tmpqw5822yx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqw5822yx.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $a = array();\n    $b = array();\n    $len = array();\n    foreach($arr\
    \ as $value) {\n        $len[$value]++;\n    }\n    krsort($len);\n    foreach($len\
    \ as $index => $value) {\n        $a[$index] = $index;\n        for($x = 0; $x\
    \ < $value; $x++) {\n            $b[] = $a[$index];\n        }\n    }\n    return\
    \ array_reverse($b);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqsp7ifzj.php:40\n\
    Stack trace:\n#0 /tmp/tmpqsp7ifzj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqsp7ifzj.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Sorting the array\n    usort($arr, function ($a, $b) {\n        return\
    \ $a - $b;\n    });\n\n    // Reversing the array\n    $arr = array_reverse($arr);\n\
    \n    // Creating an array for returning\n    $return = [];\n\n    // For each\
    \ element in the array\n    foreach ($arr as $key => $value) {\n        // If\
    \ the current element is not between 1 and 9 inclusive\n        if (!(is_int($value)\
    \ && $value >= 1 && $value <= 9)) {\n            continue;\n        }\n\n    \
    \    // If the current element is not in the return array\n        if (!in_array($value,\
    \ $return)) {\n            // Adding the element to the return array\n       \
    \     $return[] = $value;\n        }\n    }\n\n    // Returning the array\n  \
    \  return $return;\n}\n</code>\n<|/ a tags=arrays,sorting,php,string dscore=4\
    \ |>\n<| c |>\nThe original question was about sorting an array of strings. You\
    \ made it work for me!\n<|/ c |>\n<| c |>\nNice, how do you make it work for integers?\n\
    <|/ c |>\n<| c |>\nI just added a solution for integers. I guess the code is pretty\
    \ self-explanatory after that point.\n<|/ c |>\n<| c |>\nThis is amazing answer.\
    \ Thanks a lot :) saved my day.\n<|/ c |>\n<| c |>\nthis works, but unfortunately\
    \ is very slow for huge lists (>1000000 items). any idea how to make it more efficient?\n\
    <|/ c |>\n<| a dscore=4 |>\nThis is my solution based on my previous answer. The\
    \ problem with preserving original array order is it is required to create new\
    \ array with keys. Using array_intersect_keys() to remove duplicates is a good\
    \ idea. But we can do it much easier with array_unique() function. Also to avoid\
    \ copying array, we can use array_map() function. Here is code:\n<code>\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4r_vt8n9.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  \n  if (count($arr) == 0) {\n    return [];\n  }\n\n  $arr = array_reverse($arr);\n\
    \n  $names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n\n  foreach ($arr as $key => $value) {\n    $arr[$key] = str_replace('One',\
    \ 0, $value);\n    $arr[$key] = str_replace('Two', 1, $arr[$key]);\n    $arr[$key]\
    \ = str_replace('Three', 2, $arr[$key]);\n    $arr[$key] = str_replace('Four',\
    \ 3, $arr[$key]);\n    $arr[$key] = str_replace('Five', 4, $arr[$key]);\n    $arr[$key]\
    \ = str_replace('Six', 5, $arr[$key]);\n    $arr[$key] = str_replace('Seven',\
    \ 6, $arr[$key]);\n    $arr[$key] = str_replace('Eight', 7, $arr[$key]);\n   \
    \ $arr[$key] = str_replace('Nine', 8, $arr[$key]);\n  }\n\n  return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybhetqyu.php:48\n\
    Stack trace:\n#0 /tmp/tmpybhetqyu.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpybhetqyu.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    $length = count($arr);\n    $size = pow(4, $length\
    \ - 1);\n\n    for ($i = 0; $i < $length; $i++) {\n        $val = array_sum(array_slice($arr,\
    \ $i, $size)) / $size;\n\n        if (!is_numeric($val)) {\n            continue;\n\
    \        }\n\n        $result[$i] = $names[$val];\n    }\n\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks Martin, I will try to implement the algorithm\
    \ into my program. One more thing, can you check my question again if it's not\
    \ too much.\n<|/ c |>\n<| c |>\nYou don't need to reverse the array before sorting.\
    \ I think that algorithm is correct\n<|/ c |>\n<| c |>\nThe algorithm is correct,\
    \ but it's unnecessarily complex. Sorting has O(nlogn) complexity, while reversing\
    \ has O(n). So overall it's O(nlogn)\n<|/ c |>\n<| c |>\nOh, ok. I thought that\
    \ reverse() is an operation that costs O(n). In that case it is not needed.\n\
    <|/ c |>\n<| c |>\nYes, you were right, I have removed it now from the answer.\
    \ Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk5szk8g6.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = count($arr);\n  sort($arr);\n  array_reverse($arr);\n  $sorted =\
    \ [];\n  for($i=0; $i<$len; $i++) {\n    $sorted[] = array_search($arr[$i], range(0,9));\n\
    \  }\n  sort($sorted);\n  return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjq8q0s8.php:35\n\
    Stack trace:\n#0 /tmp/tmpcjq8q0s8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcjq8q0s8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $sorted_arr = [];\n  for($i = 0; $i < count($arr); $i++) {\n    $sorted_arr[$i]\
    \ = $arr[$i];\n  }\n  sort($sorted_arr);\n  array_reverse($sorted_arr);\n  for($i\
    \ = 0; $i < count($arr); $i++) {\n    $sorted_arr[$i] = $one_str[($sorted_arr[$i]-1)];\n\
    \  }\n  return $sorted_arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiaikr31i.php:36\n\
    Stack trace:\n#0 /tmp/tmpiaikr31i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiaikr31i.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr1 = array_filter($arr, function ($num) { return $num >= 1 && $num\
    \ <= 9; });\n    $arr2 = array_reverse(array_unique($arr1));\n    $str = '';\n\
    \    foreach ($arr2 as $num) {\n        switch ($num) {\n            case 1:\n\
    \                $str .= 'One';\n                break;\n            case 2:\n\
    \                $str .= 'Two';\n                break;\n            case 3:\n\
    \                $str .= 'Three';\n                break;\n            case 4:\n\
    \                $str .= 'Four';\n                break;\n            case 5:\n\
    \                $str .= 'Five';\n                break;\n            case 6:\n\
    \                $str .= 'Six';\n                break;\n            case 7:\n\
    \                $str .= 'Seven';\n                break;\n            case 8:\n\
    \                $str .= 'Eight';\n                break;\n            case 9:\n\
    \                $str .= 'Nine';\n                break;\n        }\n    }\n \
    \   if (empty($arr2)) {\n        return array();\n    }\n    return $str;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpns1ht37y.php:64\n\
    Stack trace:\n#0 /tmp/tmpns1ht37y.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpns1ht37y.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr2 = [];\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i]\
    \ >= 1 && $arr[$i] <= 9) {\n\t\t\t$arr2[$i] = \"One\";\n\t\t} else if ($arr[$i]\
    \ >= 10 && $arr[$i] <= 19) {\n\t\t\t$arr2[$i] = \"Two\";\n\t\t} else if ($arr[$i]\
    \ >= 20 && $arr[$i] <= 49) {\n\t\t\t$arr2[$i] = \"Three\";\n\t\t} else if ($arr[$i]\
    \ >= 50 && $arr[$i] <= 99) {\n\t\t\t$arr2[$i] = \"Four\";\n\t\t} else if ($arr[$i]\
    \ >= 100 && $arr[$i] <= 199) {\n\t\t\t$arr2[$i] = \"Five\";\n\t\t} else if ($arr[$i]\
    \ >= 200 && $arr[$i] <= 499) {\n\t\t\t$arr2[$i] = \"Six\";\n\t\t} else if ($arr[$i]\
    \ >= 500 && $arr[$i] <= 999) {\n\t\t\t$arr2[$i] = \"Seven\";\n\t\t} else if ($arr[$i]\
    \ >= 1000 && $arr[$i] <= 1499) {\n\t\t\t$arr2[$i] = \"Eight\";\n\t\t} else if\
    \ ($arr[$i] >= 1500 && $arr[$i] <= 9999) {\n\t\t\t$arr2[$i] = \"Nine\";\n\t\t\
    } else {\n\t\t\tarray_push($arr2, \"\");\n\t\t}\n\t}\n\treturn $arr2;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp787e22.php:51\n\
    Stack trace:\n#0 /tmp/tmpnp787e22.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpnp787e22.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!is_array($arr)) {\n        return [];\n    }\n    $len = array_map(function($a){return\
    \ strlen($a);}, $arr);\n    array_multisort($len, SORT_DESC, $arr);\n    foreach\
    \ ($arr as &$v){\n        switch ($v){\n            case 1:\n                $v\
    \ = \"One\";\n                break;\n            case 2:\n                $v\
    \ = \"Two\";\n                break;\n            case 3:\n                $v\
    \ = \"Three\";\n                break;\n            case 4:\n                $v\
    \ = \"Four\";\n                break;\n            case 5:\n                $v\
    \ = \"Five\";\n                break;\n            case 6:\n                $v\
    \ = \"Six\";\n                break;\n            case 7:\n                $v\
    \ = \"Seven\";\n                break;\n            case 8:\n                $v\
    \ = \"Eight\";\n                break;\n            case 9:\n                $v\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8mp67g7x.php:63\n\
    Stack trace:\n#0 /tmp/tmp8mp67g7x.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp8mp67g7x.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return sort($arr);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv58tij40.php:27\n\
    Stack trace:\n#0 /tmp/tmpv58tij40.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpv58tij40.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return array();\n    }\n    $len = array_sum($arr);\n\
    \    if ($len > 9) {\n        $len = 9; // Just in case there's not 9 in there\n\
    \    }\n    ksort($arr);\n    return array_reverse($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1haqzzh1.php:35\n\
    Stack trace:\n#0 /tmp/tmp1haqzzh1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1haqzzh1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_count_values($arr);\n    foreach ($lengths as $length\
    \ => $num) {\n        if ($num > 1 && $num < 9) {\n            $index = ($length\
    \ * 10) - $num;\n            $arr[$index] = $lengths[$length];\n        }\n  \
    \  }\n    return array_reverse($arr);\n}\n$input = array(2,1,1,4,5,8,2,3);\nprint_r(by_length($input));\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nAs mentioned, you can try using\
    \ array_count_values() to return the counts of each number in the array and then\
    \ use array_search() to find the appropriate index for the number:\n<code>\n$input\
    \ = array(2, 1, 1, 4, 5, 8, 2, 3);\n\n$counts = array_count_values($input);\n\
    $max_count = max($counts);\n$key = 0;\nforeach ($counts as $count => $num) {\n\
    \    if ($count === $max_count) {\n        $key = $num - 1;\n    }\n}\n$output\
    \ = array(\n    \"One\" => $input[$key],\n    \"Two\" => $input[$key + 1],\n \
    \   \"Three\" => $input[$key + 2],\n    \"Four\" => $input[$key + 3],\n    \"\
    Five\" => $input[$key + 4],\n    \"Six\" => $input[$key + 5],\n    \"Seven\" =>\
    \ $input[$key + 6],\n    \"Eight\" => $input[$key + 7],\n    \"Nine\" => $input[$key\
    \ + 8],\n);\nprint_r($output);\n</code>\nOutput:\n<code>\nArray\n(\n    [One]\
    \ => 2\n    [Two] => 1\n    [Three] => 1\n    [Four] => 2\n    [Five] => 1\n \
    \   [Six] => 4\n    [Seven] => 1\n    [Eight] => 8\n    [Nine] => 3\n)\n</code>\n\
    Demo on 3v4l.org\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\nYou can do this\
    \ by first finding the max value, then looping over each value in the array and\
    \ searching for the value with the max value minus one:\n<code>\n$input = [2,\
    \ 1, 1, 4, 5, 8, 2, 3];\n$maxValue = max($input);\n$output = [];\n\nforeach ($input\
    \ as $value) {\n    $pos = array_search($value, $input);\n    if ($pos !== false\
    \ && $pos != 0) {\n        $output[$pos -1] = $value;\n    }\n}\n\nprint_r($output);\n\
    </code>\n<|/ a tags=php,\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4clftq9q.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return [];\n  }\n  $arr = sort($arr);\n  $arr =\
    \ array_reverse($arr);\n  $arr = array_map('by_name', $arr);\n  return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, bool given\
    \ in /tmp/tmp0gtpbzbm.php on line 23\n\nWarning: array_map() expects parameter\
    \ 1 to be a valid callback, function 'by_name' not found or invalid function name\
    \ in /tmp/tmp0gtpbzbm.php on line 24\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp0gtpbzbm.php:33\nStack trace:\n#0 /tmp/tmp0gtpbzbm.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0gtpbzbm.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tfor($i = 0, $l=count($arr); $i < $l; $i++) {\n\t\t$arr[$i] = intval($arr[$i]);\n\
    \t}\n\tarray_multisort($arr, SORT_DESC);\n\t$l = count($arr);\n\tfor($i = 0; $i\
    \ < $l; $i++) {\n\t\t$arr[$i] = strval($arr[$i]);\n\t}\n\treturn $arr;\n}\n\t\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzhp1nvjk.php:35\n\
    Stack trace:\n#0 /tmp/tmpzhp1nvjk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzhp1nvjk.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $reversed = array_reverse($arr);\n  $length = array_filter($reversed, function($i)\
    \ { return $i >= 0; });\n  $digits = array_intersect(range(1, 9), $length);\n\
    \  foreach($digits as $digit) {\n    $key = array_search($digit, $arr);\n    $arr[$key]\
    \ = strval($digits[$digit]);\n  }\n  return $arr;\n}\n</code>\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| a tags=arrays,php,sorting dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpltj5xh_j.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return [];\n    }\n    sort($arr);\n    reverse($arr);\n\
    \    return array_map(function ($val) {\n        return str_pad(dechex($val),\
    \ 2, \"0\", STR_PAD_LEFT);\n    }, array_keys($arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function reverse() in\
    \ /tmp/tmpjzo11at6.php:23\nStack trace:\n#0 /tmp/tmpjzo11at6.php(30): by_length(Array)\n\
    #1 /tmp/tmpjzo11at6.php(34): candidate(Array)\n#2 /tmp/tmpjzo11at6.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjzo11at6.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  return is_array($arr) ? array_reverse($arr) : $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7_oc0f6.php:26\n\
    Stack trace:\n#0 /tmp/tmpi7_oc0f6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi7_oc0f6.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Return empty array if the array is empty.\n    if (count($arr) ===\
    \ 0) {\n        return [];\n    }\n    // Sort the array if the array has at least\
    \ one element.\n    // Sort is done by length, not value.\n    if (count($arr)\
    \ > 0) {\n        sort($arr);\n    }\n    // If array has only one element, return\
    \ an empty array.\n    if (count($arr) === 1) {\n        return [];\n    }\n \
    \   // If array has only one element, return empty array.\n    if (count($arr)\
    \ === 0) {\n        return [];\n    }\n    // Otherwise, loop on each digit, if\
    \ the number is between 1 and 9, return \"One\"\n    // if the number is between\
    \ 10 and 99, return \"Two\", etc.\n    // If the number is outside of this range,\
    \ return \"No\".\n    // If any number is strange, return \"Unknown\".\n    $strange_number\
    \ = false;\n    foreach ($arr as $element) {\n        if ($element < 0 || $element\
    \ > 9) {\n            $strange_number = true;\n            break;\n        }\n\
    \    }\n    if (!$strange_number) {\n        // The array is sorted, loop through\
    \ each digit.\n        $length = count($arr);\n        for ($i = 1; $i < $length;\
    \ $i++) {\n            // If the current number is less than 1, return \"No\"\
    .\n            if ($arr[$i] < 1) {\n                return ['No'];\n         \
    \   }\n            // If the current number is less than 10, return \"One\".\n\
    \            if ($arr[$i] < 10) {\n                return ['One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n            }\n         \
    \   // If the current number is between 10 and 99, return \"Two\".\n         \
    \   if ($arr[$i] <= 99) {\n                return ['Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'];\n            }\n            // If the current\
    \ number is between 100 and 999, return \"Three\".\n            if ($arr[$i] <=\
    \ 999) {\n                return ['Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n            }\n            // If the current number is between 1000\
    \ and 9999, return \"Four\".\n            if ($arr[$i] <= 9999) {\n          \
    \      return ['Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n           \
    \ }\n            // If the current number is between 10000 and 99999, return \"\
    Five\".\n            if ($arr[$i] <= 99999) {\n                return ['Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'];\n            }\n            // If the current\
    \ number is between 100000 and 999999, return \"Six\".\n            if ($arr[$i]\
    \ <= 999999) {\n                return ['S\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeyf_9wko.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    if (!is_array($arr)) {\n        return $result;\n\
    \    }\n    foreach ($arr as $i => $item) {\n        if ($item < 1 || $item >\
    \ 9) {\n            continue;\n        }\n        $result[$i] = \"One\";\n   \
    \ }\n    krsort($result);\n    $reversed = array_reverse($result);\n    foreach\
    \ ($reversed as $i => $item) {\n        $result[$i] = chr($i + 64) . strtolower($item);\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<|\
    \ a dscore=1 |>\n<code>\n$numbers = [\n    10,\n    5,\n    7,\n    3,\n    8,\n\
    \    11,\n    9,\n    0,\n    2,\n    4,\n    12,\n    14,\n    15,\n    16,\n\
    \    18,\n    2,\n    1,\n    3,\n    6,\n    11,\n    13,\n    1,\n    10,\n\
    \    15,\n    17,\n    2,\n    9,\n    5,\n    12,\n    14,\n    16,\n    6,\n\
    \    13,\n    15,\n    14,\n    2,\n    6,\n    9,\n    8,\n    15,\n    17,\n\
    \    11,\n    1,\n    4,\n    15,\n    9,\n    17,\n    12,\n    17,\n    14,\n\
    \    18,\n    7,\n    8,\n    13,\n    15,\n    15,\n    6,\n    1,\n    8,\n\
    \    14,\n    16,\n    10,\n    2,\n    13,\n    8,\n    15,\n    15,\n    12,\n\
    \    15,\n    11,\n    3,\n    9,\n    13,\n    15,\n    17,\n    10,\n    11,\n\
    \    3,\n    4,\n    8,\n    8,\n    15,\n    15,\n    11,\n    8,\n    1,\n \
    \   17,\n    13,\n    8,\n    17,\n    17,\n    1,\n    15,\n    1,\n    4,\n\
    \    5,\n    17,\n    11,\n    4,\n    6,\n    15,\n    6,\n    2,\n    3,\n \
    \   5,\n    6,\n    12,\n    1,\n    15,\n    10,\n    5,\n    8,\n    3,\n  \
    \  4,\n    10,\n    11,\n    7,\n    7,\n    13,\n    14,\n    15,\n    16,\n\
    \    17,\n    18,\n    12,\n    13,\n    \nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_niqp76_.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  // Your code here\n  $arr2 = [];\n  foreach ($arr as $key => $val) {\n\
    \    if ($val < 1 || $val > 9) continue;\n    $arr2[] = array($val, $key);\n \
    \ }\n  $arr2 = array_reverse($arr2);\n  foreach ($arr2 as $key => $val) {\n  \
    \  $arr2[$key][0] = str_replace(array('One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'), '', $arr2[$key][0]);\n  }\n  return $arr2;\n}\nvar_dump(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 2]));\nvar_dump(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 0]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 5]));\nvar_dump(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 6]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 9]));\nvar_dump(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 10]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 11]));\n\
    var_dump(by_length([2, 1, 1, 4, 5, 8, 2, 8]));\nvar_dump(by_length([2, 1, 1, 4,\
    \ 5, 8, 2, 90]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 91]));\nvar_dump(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 9]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 90]));\nvar_dump(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 90]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 10]));\n\
    var_dump(by_length([2, 1, 1, 4, 5, 8, 2, 10]));\nvar_dump(by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 11]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 10]));\nvar_dump(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 10]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 10]));\n\
    var_dump(by_length([2, 1, 1, 4, 5, 8, 2, 10]));\nvar_dump(by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 10]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 10]));\nvar_dump(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 10]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 10]));\n\
    var_dump(by_length([2, 1, 1, 4, 5, 8, 2, 10]));\nvar_dump(by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 10]));\nvar_dump(by_length([2, 1, 1, 4, 5, 8, 2, 10]));\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(8) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(1) \"3\"\n   \
    \ [1]=>\n    int(7)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    string(1) \"2\"\
    \n    [1]=>\n    int(6)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    string(1)\
    \ \"8\"\n    [1]=>\n    int(5)\n  }\n  [3]=>\n  array(2) {\n    [0]=>\n    string(1)\
    \ \"5\"\n    [1]=>\n    int(4)\n  }\n  [4]=>\n  array(2) {\n    [0]=>\n    string(1)\
    \ \"4\"\n    [1]=>\n    int(3)\n  }\n  [5]=>\n  array(2) {\n    [0]=>\n    string(1)\
    \ \"1\"\n    [1]=>\n    int(2)\n  }\n  [6]=>\n  array(2) {\n    [0]=>\n    string(1)\
    \ \"1\"\n    [1]=>\n    int(1)\n  }\n  [7]=>\n  array(2) {\n    [0]=>\n    string(1)\
    \ \"2\"\n    [1]=>\n    int(0)\n  }\n}\narray(8) {\n  [0]=>\n  array(2) {\n  \
    \  [0]=>\n    string(1) \"2\"\n    [1]=>\n    int(7)\n  }\n  [1]=>\n  array(2)\
    \ {\n    [0]=>\n    string(1) \"2\"\n    [1]=>\n    int(6)\n  }\n  [2]=>\n  array(2)\
    \ {\n    [0]=>\n    string(1) \"8\"\n    [1]=>\n    int(5)\n  }\n  [3]=>\n  array(2)\
    \ {\n    [0]=>\n    string(1) \"5\"\n    [1]=>\n    int(4)\n  }\n  [4]=>\n  array(2)\
    \ {\n    [0]=>\n    string(1) \"4\"\n    [1]=>\n    int(3)\n  }\n  [5]=>\n  array(2)\
    \ {\n    [0]=>\n    string(1) \"1\"\n    [1]=>\n    int(2)\n  }\n  [6]=>\n  array(2)\
    \ {\n    [0]=>\n    string(1) \"1\"\n    [1]=>\n    int(1)\n  }\n  [7]=>\n  array(2)\
    \ {\n    [0]=>\n    string(1) \"2\"\n    [1]=>\n    int(0)\n  }\n}\narray(7) {\n\
    \  [0]=>\n  array(2) {\n    [0]=>\n    string(1) \"2\"\n    [1]=>\n    int(6)\n\
    \  }\n  [1]=>\n  array(2) {\n    [0]=>\n    string(1) \"8\"\n    [1]=>\n    int(5)\n\
    \  }\n  [2]=>\n  array(2) {\n    [0]=>\n    string(1) \"5\"\n    [1]=>\n    int(4)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    string(1) \"4\"\n    [1]=>\n    int(3)\n\
    \  }\n  [4]=>\n  array(2) {\n    [0]=>\n    string(1) \"1\"\n    [1]=>\n    int(2)\n\
    \  }\n  [5]=>\n  array(2) {\n    [0]=>\n    string(1) \"1\"\n    [1]=>\n    int(1)\n\
    \  }\n  [6]=>\n  array(2) {\n    [0]=>\n    string(1) \"2\"\n    [1]=>\n    int(0)\n\
    \  }\n}\narray(8) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(1) \"5\"\n \
    \   [1]=>\n    int(7)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    string(1) \"\
    2\"\n    [1]=>\n    int(6)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    string(1)\
    \ \"8\"\n    [1]=>\n    int(5)\n  }\n  [3]=>\n  array(2) {\n    [0]=>\n    string(1)\
    \ \"5\"\n    [1]=>\n    int(4)\n  }\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    sort($arr);\n    array_reverse($arr);\n    $result = [];\n    foreach($arr\
    \ as $number) {\n        if($number > 1 && $number < 9) {\n            $result[]\
    \ = $names[\"$number\"];\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjm3xuhj9.php:34\n\
    Stack trace:\n#0 /tmp/tmpjm3xuhj9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjm3xuhj9.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $sorted = array_filter($arr, function($v) { return $v <= 9; });\n  sort($sorted);\n\
    \  return array_reverse($sorted);\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nVery\
    \ clean and straight forward.\n<|/ c |>\n<| a dscore=2 |>\nIf your array is sorted\
    \ you can use this code:\n<code>\n<?php\n$arr = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\nsort($arr);\n\
    $arr = array_reverse($arr);\n$arr = array_map(function($v){ return str_replace(\"\
    n\", \"N\", $v); }, $arr);\nprint_r($arr);\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a tags=arrays,php |>\n<code>\n$arr = array();\n$arr[] = \"One\";\n$arr[] =\
    \ \"Two\";\n$arr[] = \"Three\";\n$arr[] = \"Four\";\n$arr[] = \"Five\";\n$arr[]\
    \ = \"Six\";\n$arr[] = \"Seven\";\n$arr[] = \"Eight\";\n$arr[] = \"Nine\";\nsort($arr);\n\
    $arr = array_reverse($arr);\n\n$newArr = array();\nfor($i=0;$i<count($arr);$i++){\n\
    \    $newArr[$i] = substr($arr[$i], 0, 1);\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=arrays,php |>\nThis is my take on it\n<code>\n    $arr = array();\n \
    \   $arr[] = \"One\";\n    $arr[] = \"Two\";\n    $arr[] = \"Three\";\n    $arr[]\
    \ = \"Four\";\n    $arr[] = \"Five\";\n    $arr[] = \"Six\";\n    $arr[] = \"\
    Seven\";\n    $arr[] = \"Eight\";\n    $arr[] = \"Nine\";\n\n    array_multisort(array_map('strlen',\
    \ $arr), SORT_ASC, SORT_NUMERIC, $arr);\n\n    $reversed = array_reverse(array_values($arr));\n\
    \n    foreach ($reversed as $key => $val) {\n        if (is_numeric($val)) {\n\
    \            $reversed[$key] = str_replace('n', 'N', $val);\n        }\n    }\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nYou can do it using an anonymous function:\n\
    <code>\n$array = array(\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\"\
    ,\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe9mfihwu.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!$arr) return [];\n    sort($arr);\n    reset($arr);\n    $reversed\
    \ = array_reverse($arr);\n    foreach ($reversed as $k => $v) {\n        if ($v\
    \ > 9) unset($reversed[$k]);\n    }\n    $res = [];\n    $counter = 1;\n    foreach\
    \ ($reversed as $k => $v) {\n        $res[] = chr(64 + $counter++);\n    }\n \
    \   return $res;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ndenimy.php:38\n\
    Stack trace:\n#0 /tmp/tmp_ndenimy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_ndenimy.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (count($arr) == 0) return [];\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    $ones = $twos = $threes = $fours = $fives = $sixes = $sevens = $eights =\
    \ $nines = [];\n    foreach ($arr as $key => $value) {\n        if ($value ==\
    \ 1) $ones[] = $key;\n        if ($value == 2) $twos[] = $key;\n        if ($value\
    \ == 3) $threes[] = $key;\n        if ($value == 4) $fours[] = $key;\n       \
    \ if ($value == 5) $fives[] = $key;\n        if ($value == 6) $sixes[] = $key;\n\
    \        if ($value == 7) $sevens[] = $key;\n        if ($value == 8) $eights[]\
    \ = $key;\n        if ($value == 9) $nines[] = $key;\n    }\n    return $ones\
    \ + $twos + $threes + $fours + $fives + $sixes + $sevens + $eights + $nines;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjwyzs8b.php:42\n\
    Stack trace:\n#0 /tmp/tmpnjwyzs8b.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpnjwyzs8b.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (!is_array($arr)) {\n\t\treturn [];\n\t}\n\tif (!is_numeric(array_shift($arr)))\
    \ {\n\t\treturn [];\n\t}\n\t\n\tfor ($i=count($arr)-1; $i>0; $i--) {\n\t\tif ($arr[$i]\
    \ < 10) {\n\t\t\t$arr[$i] = \"One\";\n\t\t} elseif ($arr[$i] < 100) {\n\t\t\t\
    $arr[$i] = $arr[$i-1].\"Two\";\n\t\t} elseif ($arr[$i] < 1000) {\n\t\t\t$arr[$i]\
    \ = $arr[$i-1].\"Three\";\n\t\t} elseif ($arr[$i] < 10000) {\n\t\t\t$arr[$i] =\
    \ $arr[$i-1].\"Four\";\n\t\t} elseif ($arr[$i] < 100000) {\n\t\t\t$arr[$i] = $arr[$i-1].\"\
    Five\";\n\t\t} elseif ($arr[$i] < 1000000) {\n\t\t\t$arr[$i] = $arr[$i-1].\"Six\"\
    ;\n\t\t} elseif ($arr[$i] < 10000000) {\n\t\t\t$arr[$i] = $arr[$i-1].\"Seven\"\
    ;\n\t\t} elseif ($arr[$i] < 100000000) {\n\t\t\t$arr[$i] = $arr[$i-1].\"Eight\"\
    ;\n\t\t} elseif ($arr[$i] < 1000000000) {\n\t\t\t$arr[$i] = $arr[$i-1].\"Nine\"\
    ;\n\t\t} else {\n\t\t\t$arr[$i] = \"Zero\";\n\t\t}\n\t}\n\t\n\treturn array_reverse($arr);\n\
    }\n$arr = array_map(\"by_length\", $arr);\n$result = \"\";\nforeach ($arr as $value)\
    \ {\n\techo strval($value);\n\t$result .= strval($value).\"\\n\";\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, null given\
    \ in /tmp/tmp14sgiepu.php on line 52\n\nWarning: Invalid argument supplied for\
    \ foreach() in /tmp/tmp14sgiepu.php on line 54\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp14sgiepu.php:63\nStack trace:\n#0 /tmp/tmp14sgiepu.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp14sgiepu.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjkixvwg.php:27\n\
    Stack trace:\n#0 /tmp/tmphjkixvwg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphjkixvwg.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    foreach ($arr as &$value) {\n        if ($value <= 9) {\n           \
    \ $value = 'One';\n        } else if ($value <= 99) {\n            $value = 'Two';\n\
    \        } else if ($value <= 999) {\n            $value = 'Three';\n        }\
    \ else if ($value <= 9999) {\n            $value = 'Four';\n        } else if\
    \ ($value <= 99999) {\n            $value = 'Five';\n        } else if ($value\
    \ <= 999999) {\n            $value = 'Six';\n        } else if ($value <= 9999999)\
    \ {\n            $value = 'Seven';\n        } else if ($value <= 99999999) {\n\
    \            $value = 'Eight';\n        } else if ($value <= 999999999) {\n  \
    \          $value = 'Nine';\n        } else if ($value <= 9999999999) {\n    \
    \        $value = 'Ten';\n        } else {\n            $value = 'Not a number';\n\
    \        }\n    }\n    return array_reverse($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn97bbu9n.php:52\n\
    Stack trace:\n#0 /tmp/tmpn97bbu9n.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpn97bbu9n.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!count($arr)) {\n        return [];\n    }\n    foreach ($arr as\
    \ $key => $val) {\n        if ($val < 1 || $val > 9) {\n            unset($arr[$key]);\n\
    \        }\n    }\n    arsort($arr);\n    return array_reverse(array_map(function($i)\
    \ {\n        static $nums = array('One' => 0, 'Two' => 1, 'Three' => 2, 'Four'\
    \ => 3, 'Five' => 4, 'Six' => 5, 'Seven' => 6, 'Eight' => 7, 'Nine' => 8);\n \
    \       return $nums[$i];\n    }, $arr));\n}\n</code>\n<|/ a tags=sorting,php,arrays\
    \ dscore=0 |>\n<| c |>\nThanks for sharing your thought process and answering\
    \ a question that has been asked many times. I just want to mention that your\
    \ solution is actually a lot cleaner than the other ones. My only gripe is that\
    \ it requires more steps (and more PHP code) compared to the other solutions.\n\
    <|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>\n<?php\n$input = array(2, 1,\
    \ 1, 4, 5, 8, 2, 3);\n$output = array();\n$last = 0;\nfor ($i = 0; $i < count($input);\
    \ $i++) {\n    if ($input[$i] < 1 && $input[$i] > 9) {\n        $output[$i] .=\
    \ \"#\" . $input[$i];\n    } else if ($input[$i] == $last) {\n        $output[$i]\
    \ .= $input[$i];\n    } else {\n        $output[$i] .= $input[$i];\n        $last\
    \ = $input[$i];\n    }\n}\nprint_r($output);\n</code>\nIt checks if the number\
    \ is between 1 and 9 then it appends a \"#\" to the front and appends the value\
    \ to the array at the end so it's in order, if not it appends the number to the\
    \ end of the last value in the array and makes the number last by setting it as\
    \ the last number in the array. \nThe output for me is:\nArray ( [0] => #2 [1]\
    \ => #1 [2] => #2 [3] => #3 [4] => #4 [5] => #5 [6] => #6 [7] => #7 [8] => #8\
    \ [9] => #9 ) \nWhich is what you are after. \nThe reason i used \"#\" is because\
    \ the array was being sorted in reverse order and i wanted it to show in normal\
    \ order for the results. \nHope this helps\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for sharing your thought process and answering a question that has been asked\
    \ many times. I just want to mention that \nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbyv6f6np.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengthArr = array();\n    $one = array('One' => 1, 'Two' => 2, 'Three'\
    \ => 3, 'Four' => 4, 'Five' => 5, 'Six' => 6, 'Seven' => 7, 'Eight' => 8, 'Nine'\
    \ => 9);\n    foreach ($arr as $key => $value) {\n        if (is_numeric($value)\
    \ && $value < 10 && $value >= 1) {\n            $value = $one[$value];\n     \
    \   }\n        array_push($lengthArr, $value);\n    }\n    return array_reverse(array_map(function($a)\
    \ {\n        return $a < 1 ? 1 : $a >= 10 ? $a : $one[$a];\n    }, $lengthArr));\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ublkvb5.php:37\n\
    Stack trace:\n#0 /tmp/tmp8ublkvb5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8ublkvb5.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (empty($arr)) {\n\t\treturn [];\n\t}\n\t$n = count($arr);\n\tfor ($i\
    \ = 0; $i < $n; ++$i) {\n\t\t$n = $arr[$i];\n\t\tif ($n < 1 || $n > 9) {\n\t\t\
    \tcontinue;\n\t\t}\n\t\t$arr[$i] = $n % 10;\n\t\t$n = floor($n / 10);\n\t\t$arr[$i]\
    \ += ($n % 10);\n\t}\n\tfor ($i = 0; $i < $n; ++$i) {\n\t\t$arr[$i] = $names[$i][$arr[$i]];\n\
    \t}\n\treturn $arr;\n}\n$names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n$n = 12;\n$result = by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]);\nfor ($i = 0; $i < count($result); ++$i) {\n\tprint \"\
    $result[$i]\\n\";\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n1\n1\n4\n5\n8\n2\n3\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpigx1e9sg.php:48\nStack trace:\n#0 /tmp/tmpigx1e9sg.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmpigx1e9sg.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return array_values(array_map(function($item) {\n        if(!is_int($item))\n\
    \            return $item;\n        $length = strlen($item);\n        return ($length\
    \ < 5) ? $item : $length . \" \" . strrev($item);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptj5nyq63.php:32\n\
    Stack trace:\n#0 /tmp/tmptj5nyq63.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptj5nyq63.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return [];\n  }\n  $arr2 = [];\n  foreach ($arr\
    \ as $val) {\n    if ($val >= 1 && $val <= 9) {\n      $arr2[$val - 1] = $val\
    \ + 1;\n    }\n  }\n  return array_flip($arr2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmihoia78.php:36\n\
    Stack trace:\n#0 /tmp/tmpmihoia78.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpmihoia78.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $newArr = [];\n    foreach ($arr as $key => $value) {\n        if ($key\
    \ > 8 || $key < 0) {\n            continue;\n        }\n        $newArr[$key -\
    \ 1] = $value;\n    }\n    return array_reverse($newArr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxn4f7ezr.php:34\n\
    Stack trace:\n#0 /tmp/tmpxn4f7ezr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxn4f7ezr.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    sort($arr);\n    foreach($arr as $key => $val)\
    \ {\n        $result[$key] = $val % 10;\n    }\n    foreach(array_reverse($result)\
    \ as $key => $val) {\n        $result[$key] = $arr[$key];\n    }\n    foreach($result\
    \ as $key => $val) {\n        if($val > 9) {\n            $result[$key] = $arr[$key];\n\
    \        }\n    }\n    return array_slice($result, 0, 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7znpag5.php:40\n\
    Stack trace:\n#0 /tmp/tmpz7znpag5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpz7znpag5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = count($arr);\n    $result = [];\n    for($i=0; $i < $length;\
    \ $i++) {\n        $result[] = key($arr);\n        next($arr);\n    }\n    sort($result);\n\
    \    reset($arr);\n    reset($arr);\n    return $result;\n}\n</code>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_x_4zej1.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (is_array($arr) && count($arr) > 0) {\n        array_multisort(array_map(function\
    \ ($v) { return strlen($v); }, $arr), SORT_ASC, $arr);\n        array_map(function\
    \ ($v) { return strrev($v); }, $arr);\n        array_walk($arr, function (&$v)\
    \ { $v = strrev($v); });\n        array_walk($arr, function (&$v) { $v = strlen($v);\
    \ });\n        return $arr;\n    }\n    return array();\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't seem to work for me.\n<|/ c |>\n<| c |>\n- can you give\
    \ an example and describe what happened?\n<|/ c |>\n<| a |>\n<code>\n<?php\n$array\
    \ = [1, -1, 55, 3, 56, 9, 11, 100, 55, 6, 99, 9];\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_unpcku_.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return [];\n  }\n  usort($arr, function ($a, $b)\
    \ {\n    return $a - $b;\n  });\n  return array_reverse(array_map(function ($v)\
    \ {\n    return one($v);\n  }, $arr));\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function one() in /tmp/tmp_rqr22a5.php:26\n\
    Stack trace:\n#0 [internal function]: {closure}(1)\n#1 /tmp/tmp_rqr22a5.php(27):\
    \ array_map(Object(Closure), Array)\n#2 /tmp/tmp_rqr22a5.php(31): by_length(Array)\n\
    #3 /tmp/tmp_rqr22a5.php(35): candidate(Array)\n#4 /tmp/tmp_rqr22a5.php(42): test()\n\
    #5 {main}\n  thrown in /tmp/tmp_rqr22a5.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $tmp = array_count_values($arr);\n  $tmp_sorted = array_reverse($tmp);\n\
    \  $result = [];\n  foreach ($tmp_sorted as $key => $value) {\n    $result[] =\
    \ array_search($key, array_keys($value));\n  }\n  return $result;\n}\n$num = by_length($nums);\n\
    print_r($num);\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values() expects parameter 1 to be array, null given\
    \ in /tmp/tmppa8wtcw1.php on line 19\n\nWarning: array_reverse() expects parameter\
    \ 1 to be array, null given in /tmp/tmppa8wtcw1.php on line 20\n\nWarning: Invalid\
    \ argument supplied for foreach() in /tmp/tmppa8wtcw1.php on line 22\nArray\n\
    (\n)\n\nWarning: array_keys() expects parameter 1 to be array, int given in /tmp/tmppa8wtcw1.php\
    \ on line 23\n\nWarning: array_search() expects parameter 2 to be array, null\
    \ given in /tmp/tmppa8wtcw1.php on line 23\n\nWarning: array_keys() expects parameter\
    \ 1 to be array, int given in /tmp/tmppa8wtcw1.php on line 23\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmppa8wtcw1.php on line\
    \ 23\n\nWarning: array_keys() expects parameter 1 to be array, int given in /tmp/tmppa8wtcw1.php\
    \ on line 23\n\nWarning: array_search() expects parameter 2 to be array, null\
    \ given in /tmp/tmppa8wtcw1.php on line 23\n\nWarning: array_keys() expects parameter\
    \ 1 to be array, int given in /tmp/tmppa8wtcw1.php on line 23\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmppa8wtcw1.php on line\
    \ 23\n\nWarning: array_keys() expects parameter 1 to be array, int given in /tmp/tmppa8wtcw1.php\
    \ on line 23\n\nWarning: array_search() expects parameter 2 to be array, null\
    \ given in /tmp/tmppa8wtcw1.php on line 23\n\nWarning: array_keys() expects parameter\
    \ 1 to be array, int given in /tmp/tmppa8wtcw1.php on line 23\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmppa8wtcw1.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppa8wtcw1.php:34\n\
    Stack trace:\n#0 /tmp/tmppa8wtcw1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppa8wtcw1.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  return array_reduce(\n    $arr,\n    function($a, $b) { return array_merge($a,\
    \ array_slice($b, 0, 9)); },\n    array_reverse($arr)\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmprrs626se.php on line 21\n\nWarning: array_merge(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmprrs626se.php on line 21\n\nWarning:\
    \ array_slice() expects parameter 1 to be array, int given in /tmp/tmprrs626se.php\
    \ on line 21\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmprrs626se.php on line 21\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmprrs626se.php on line 21\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, null given in /tmp/tmprrs626se.php on line\
    \ 21\n\nWarning: array_slice() expects parameter 1 to be array, int given in /tmp/tmprrs626se.php\
    \ on line 21\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmprrs626se.php on line 21\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmprrs626se.php on line 21\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, null given in /tmp/tmprrs626se.php on line\
    \ 21\n\nWarning: array_slice() expects parameter 1 to be array, int given in /tmp/tmprrs626se.php\
    \ on line 21\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmprrs626se.php on line 21\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmprrs626se.php on line 21\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, null given in /tmp/tmprrs626se.php on line\
    \ 21\n\nWarning: array_slice() expects parameter 1 to be array, int given in /tmp/tmprrs626se.php\
    \ on line 21\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmprrs626se.php on line 21\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmprrs626se.php:31\nStack trace:\n#0 /tmp/tmprrs626se.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprrs626se.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if ($arr == []) {\n    return [];\n  }\n  sort($arr);\n  $arr2 = array_reverse($arr);\n\
    \  $res = array_map(function ($value) {\n    if ($value == 1) {\n      return\
    \ 'One';\n    }\n    if ($value == 2) {\n      return 'Two';\n    }\n    if ($value\
    \ == 3) {\n      return 'Three';\n    }\n    if ($value == 4) {\n      return\
    \ 'Four';\n    }\n    if ($value == 5) {\n      return 'Five';\n    }\n    if\
    \ ($value == 6) {\n      return 'Six';\n    }\n    if ($value == 7) {\n      return\
    \ 'Seven';\n    }\n    if ($value == 8) {\n      return 'Eight';\n    }\n    if\
    \ ($value == 9) {\n      return 'Nine';\n    }\n  }, $arr2);\n  return $res;\n\
    }\n\necho by_length([2,1,1,4,5,8,2,3]);\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7b8d5u0.php:64\n\
    Stack trace:\n#0 /tmp/tmpr7b8d5u0.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpr7b8d5u0.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    foreach ($arr as $el) {\n        $result[strlen($el)]\
    \ = $el;\n    }\n    return array_reverse($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kw0u7bn.php:31\n\
    Stack trace:\n#0 /tmp/tmp4kw0u7bn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4kw0u7bn.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  // $arr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\", \"Ten\"]\n  // $arr = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  if(sizeof($arr)\
    \ == 0){\n    return $arr;\n  }\n  // $arr = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"]\n  $arr =\
    \ [$arr];\n  $sorted = array_map('strrev', sort(array_reverse($arr)));\n  foreach\
    \ ($sorted as $k => $v) {\n    $newArray[] = $arr[$k];\n  }\n  return $newArray;\n\
    }\n\n$arr = [1,-1,55];\n$arr = by_length($arr);\nprint_r($arr);\n</code>\nOutput:\n\
    <code>\nArray\n(\n    [0] => One\n    [1] => One\n    [2] => Five\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => Four\n    [6] => Three\n    [7] => Three\n\
    \    [8] => Two\n    [9] => Two\n    [10] => One\n    [11] => One\n)\n</code>\n\
    Demo.\n<|/ a dscore=1 tags=sorting,php |>\n<| c |>\nI tested your solution and\
    \ it works perfectly fine. The only change I made was the sorting criteria to\
    \ `sort($arr)` instead of `sort(array_reverse($arr))`. Thank you for the help!\n\
    <|/ c |>\n<| c |>\nYes i did, i was working on the array before i posted the answer\
    \ and i forgot to change that. But yes its fixed now, thanks.\n<|/ c |>\n<| c\
    \ |>\nIt looks like you still have `array_reverse` instead of `sort` but I'm not\
    \ sure why. If you have an explanation it would be really helpful if you can explain\
    \ why you changed it to `sort`. Thank you for the help!\n<|/ c |>\n<| c |>\nYour\
    \ solution is definitely cleaner but you still have a few bugs left to fix. You\
    \ should probably review your answer as the original one works fine and your solution\
    \ is just too complicated. I'll try to figure out what's wrong.\n<|/ c |>\n<|\
    \ c |>\nYeah, your answer is more concise than mine and works fine. My mistake\
    \ was thinking about it in terms of sorting, but actually your solution is more\
    \ efficient than mine.\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprl6zl7hz.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // write your code here\n    $array = array();\n    for($i=0; $i<count($arr);\
    \ $i++){\n        if($arr[$i] < 10){\n            $array[] = 'One';\n        }\n\
    \        elseif($arr[$i] < 100){\n            $array[] = 'Two';\n        }\n \
    \       elseif($arr[$i] < 1000){\n            $array[] = 'Three';\n        }\n\
    \        elseif($arr[$i] < 10000){\n            $array[] = 'Four';\n        }\n\
    \        elseif($arr[$i] < 100000){\n            $array[] = 'Five';\n        }\n\
    \        elseif($arr[$i] < 1000000){\n            $array[] = 'Six';\n        }\n\
    \        elseif($arr[$i] < 10000000){\n            $array[] = 'Seven';\n     \
    \   }\n        elseif($arr[$i] < 100000000){\n            $array[] = 'Eight';\n\
    \        }\n        elseif($arr[$i] < 1000000000){\n            $array[] = 'Nine';\n\
    \        }\n    }\n    return array_reverse($array);\n}\n</code>\n<|/ a dscore=2\
    \ tags=php,sorting,arrays |>\n<| a dscore=1 |>\nI have made some changes, now\
    \ it sorts correctly, and it is very clean\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2xflk45c.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = count($arr);\n  if ($len == 0) return [];\n  sort($arr);\n  $newArr\
    \ = array_reverse($arr);\n  foreach ($arr as $key => $val) {\n    if ($val > 9)\
    \ return [];\n    if ($val < 1) return [];\n    $newArr[$key] = $names[$val -\
    \ 1];\n  }\n  return $newArr;\n}\nprint_r(by_length([10, 4, 7, 5]));\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ytyhlsg.php:36\n\
    Stack trace:\n#0 /tmp/tmp_ytyhlsg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_ytyhlsg.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $result = array();\n  if (!empty($arr)) {\n    // sort arr\n    sort($arr);\n\
    \n    // reverse arr\n    $reversed = array_reverse($arr);\n\n    // replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    foreach ($reversed as\
    \ $key => $value) {\n      if ($value < 10) {\n        $result[] = array($value,\
    \ 'One');\n      }\n      elseif ($value < 100) {\n        $result[] = array(floor($value\
    \ / 10), 'Two');\n      }\n      elseif ($value < 1000) {\n        $result[] =\
    \ array(floor($value / 100), 'Three');\n      }\n      elseif ($value < 10000)\
    \ {\n        $result[] = array(floor($value / 1000), 'Four');\n      }\n     \
    \ elseif ($value < 100000) {\n        $result[] = array(floor($value / 10000),\
    \ 'Five');\n      }\n      elseif ($value < 1000000) {\n        $result[] = array(floor($value\
    \ / 100000), 'Six');\n      }\n      elseif ($value < 10000000) {\n        $result[]\
    \ = array(floor($value / 1000000), 'Seven');\n      }\n      elseif ($value <\
    \ 100000000) {\n        $result[] = array(floor($value / 10000000), 'Eight');\n\
    \      }\n      elseif ($value < 1000000000) {\n        $result[] = array(floor($value\
    \ / 100000000), 'Nine');\n      }\n      elseif ($value < 10000000000) {\n   \
    \     $result[] = array(floor($value / 1000000000), 'Ten');\n      }\n      elseif\
    \ ($value < 100000000000) {\n        $result[] = array(floor($value / 10000000000),\
    \ 'Eleven');\n      }\n      elseif ($value < 1000000000000) {\n        $result[]\
    \ = array(floor($value / 100000000000), 'Twelve');\n      }\n      elseif ($value\
    \ < 10000000000000) {\n        $result[] = array(floor($value / 1000000000000),\
    \ 'Thirteen');\n      }\n      elseif ($value < 100000000000000) {\n        $result[]\
    \ = array(floor($value / 10000000000000), 'Fourteen');\n      }\n      elseif\
    \ ($value < 1000000000000000) {\n        $result[] = array(floor($value / 100000000000000),\
    \ 'Fifteen');\n      }\n      elseif ($value < 10000000000000000) {\n        $result[]\
    \ = array(floor($value / 1000000000000000), 'Sixteen');\n      }\n      elseif\
    \ ($value < 100000000000000000) {\n        $result[]\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjfk50seu.php on line 79\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  // the array is empty\n  if(!$arr) return [];\n  // the array is not empty\n\
    \  if(!count($arr)) return [];\n\n  $new_arr = array_reverse($arr);\n  sort($new_arr);\n\
    \n  $len = count($new_arr);\n  $i = 0;\n  $arr = [];\n\n  while($i < $len) {\n\
    \    $arr[] = strlen($new_arr[$i]) < 2 ? $new_arr[$i] : $new_arr[$i].' '.$new_arr[$i+1];\n\
    \    $i += 2;\n  }\n\n  return $arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm907noff.php:44\n\
    Stack trace:\n#0 /tmp/tmpm907noff.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpm907noff.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    foreach ($arr as &$value) {\n        $value = str_pad($value, 11, '0',\
    \ STR_PAD_LEFT);\n    }\n    sort($arr);\n    $arr = array_reverse($arr);\n\n\
    \    foreach ($arr as &$value) {\n        $value = substr($value, 0, 1);\n   \
    \ }\n    reset($arr);\n\n    return array_values($arr);\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\nHere's another way to do it. This one assumes that all the numbers\
    \ have a length 10 or more. The function returns an array of strings of the form\
    \ \"010...011...\". The last digit is appended if it has a length less than or\
    \ equal to 9.\n<code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe8tq1lqa.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = [];\n    foreach ($arr as $n) {\n        $lengths[] = strlen($n);\n\
    \    }\n    asort($lengths);\n    return array_reverse($lengths);\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkj11q5tv.php:31\n\
    Stack trace:\n#0 /tmp/tmpkj11q5tv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkj11q5tv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = array_sum($arr);\n    if ($len === 0) return [];\n\n    $newArr\
    \ = [];\n    $sum = 0;\n    foreach ($arr as $a) {\n        $sum += $a;\n    }\n\
    \n    $length = (int) log10($sum + 1);\n    foreach ($arr as $a) {\n        $newArr[]\
    \ = ceil($a / pow($length + 1, $len));\n    }\n\n    return $newArr;\n}\n\n$result\
    \ = by_length([2, 1, 1, 4, 5, 8, 2, 3]);\n$result = by_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3]);\n$result = by_length([2, 1, 1, 4, 5, 8, 2, 3]);\n$result = by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]);\n$result = by_length([2, 1, 1, 4, 5, 8, 2, 3]);\n\nprint_r($result);\n\
    </code>\n<|/ a tags=sorting,php,arrays,algorithm dscore=3 |>\n<| c |>\nNot sure\
    \ what the question is asking for, but I used this and it seems to work. Thanks!\n\
    <|/ c |>\n<| a dscore=2 |>\nYou want to use a modified version of QuickSort. Instead\
    \ of swapping the elements, you can return the value of the element. The elements\
    \ are sorted in the following way:\n\nSort all elements that have value less than\
    \ the pivot in the first place\nSort elements that have value equal or bigger\
    \ than the pivot in the second place\nSort elements that have value equal to the\
    \ pivot in the last place\n<|/ a tags=sorting,php,arrays,algorithm |>\n<| a tags=sorting,php,arrays,algorithm\
    \ |>\nYou want a heap sort for this.\nSee http://en.wikipedia.org/wiki/Heapsort\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,php,arrays,algorithm |>\nYou can use a modified\
    \ quick sort.\nSort all elements that have value less than the pivot in the first\
    \ place\nSort elements that have value equal or bigger than the pivot in the second\
    \ place\nSort elements that have value equal to the pivot in the last place\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,php,arrays,algorithm |>\nI've realised that\
    \ my answer is somehow a solution to a different problem:\n<code>\n$array = [2,\
    \ 1, 1, 4, 5, 8, 2, 3];\n$sorted = array();\nforeach ($array as $key => $value)\
    \ {\n    $sorted[$key] = $value;\n}\n\nksort($array);\n\n$result = array();\n\
    foreach ($array as $key => $value) {\n    $result[] = $sorted[$key];\n}\n\nprint_r($result);\n\
    </code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_zjqogts.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = array();\n  for ($i = 0; $i < count($arr); $i++) {\n    $len[$i]\
    \ = strlen($arr[$i]);\n  }\n  return array_map(function($a) use ($len) { return\
    \ strlen($a) == $len[$a] ? $a : ''; }, $arr);\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp343f4sq3.php:30\n\
    Stack trace:\n#0 /tmp/tmp343f4sq3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp343f4sq3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  // reverse array because we are sorting from 1 to 9\n  array_reverse($arr);\n\
    \  $arr2 = array();\n  foreach($arr as $key => $val) {\n    if ($val >= 1 && $val\
    \ <= 9) {\n      $arr2[$val - 1] = $key;\n    }\n  }\n  return $arr2;\n}\n\n$numbers\
    \ = range(1, 9);\n$result = by_length($numbers);\n\n$numArray = array($result);\n\
    $arr2 = array_map('array_unique', $numArray);\n$arr2 = array_map('array_merge',\
    \ $arr2);\n$arr2 = array_map('array_map', create_function('$item', 'return \"\
    Nine\";', $arr2), $arr2);\n$arr2 = array_map('array_map', create_function('$item',\
    \ 'return \"Eight\";', $arr2), $arr2);\n$arr2 = array_map('array_map', create_function('$item',\
    \ 'return \"Seven\";', $arr2), $arr2);\n$arr2 = array_map('array_map', create_function('$item',\
    \ 'return \"Six\";', $arr2), $arr2);\n$arr2 = array_map('array_map', create_function('$item',\
    \ 'return \"Five\";', $arr2), $arr2);\n$arr2 = array_map('array_map', create_function('$item',\
    \ 'return \"Four\";', $arr2), $arr2);\n$arr2 = array_map('array_map', create_function('$item',\
    \ 'return \"Three\";', $arr2), $arr2);\n$arr2 = array_map('array_map', create_function('$item',\
    \ 'return \"Two\";', $arr2), $arr2);\n$arr2 = array_map('array_map', create_function('$item',\
    \ 'return \"One\";', $arr2), $arr2);\n\n$arr2 = array_map('array_unique', $arr2);\n\
    $arr2 = array_map('array_map', create_function('$item', 'return \"One\";', $arr2),\
    \ $arr2);\n\n$arr2 = array_map('array_flip', $arr2);\n$arr2 = array_map('array_reverse',\
    \ $arr2);\n$arr2 = array_map('array_merge', $arr2);\n\necho \"<pre>\";\nprint_r($arr2);\n\
    echo \"</pre>\";\n</code>\n<|/ a |>\n<| a dscore=3 |>\nI have found another way\
    \ to do this in php just by modifying code\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj74z5chy.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (! is_array($arr)) {\n    return [];\n  }\n  usort($arr, 'cmp_by_length');\n\
    \  $ret = [];\n  foreach ($arr as $num) {\n    if ($num > 9 || $num < 1) {\n \
    \     continue;\n    }\n    $ret[] = pow($num, 3) + $num;\n  }\n  return array_reverse($ret);\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp_by_length' not found or invalid function name in /tmp/tmpc06uiwaa.php on\
    \ line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc06uiwaa.php:37\n\
    Stack trace:\n#0 /tmp/tmpc06uiwaa.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpc06uiwaa.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (is_array($arr) && count($arr) > 0) {\n        sort($arr);\n     \
    \   reverse($arr);\n        $result = array();\n        foreach ($arr as $k =>\
    \ $v) {\n            if (is_numeric($v)) {\n                $result[] = ($v ==\
    \ 1) ? \"One\" : $v;\n            } else {\n                $result[] = '';\n\
    \            }\n        }\n        return $result;\n    } else {\n        return\
    \ array();\n    }\n}\n</code>\n<|/ a tags=sorting,php dscore=1 |>\n<| a tags=sorting,php\
    \ dscore=1 |>\nThe most simple answer to your question would be:\n<code>\n$input\
    \ = [1, -1, 55, 11, 2, -9, 10, 8, 7, -5, 6];\nvar_dump(by_length($input));\n</code>\n\
    Output:\n<code>\narray(6) {\n  [1]=>\n  string(3) \"One\"\n  [-1]=>\n  string(3)\
    \ \"One\"\n  [55]=>\n  string(3) \"One\"\n  [11]=>\n  string(3) \"One\"\n  [2]=>\n\
    \  string(3) \"One\"\n  [-9]=>\n  string(3) \"One\"\n  [10]=>\n  string(3) \"\
    One\"\n  [8]=>\n  string(3) \"One\"\n  [7]=>\n  string(3) \"One\"\n  [-5]=>\n\
    \  string(3) \"One\"\n  [6]=>\n  string(3) \"One\"\n}\n</code>\n<|/ a |>\n<| a\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj7hal56a.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = array_map(function ($el) {\n        return strlen($el);\n    },\
    \ $arr);\n    // sort ascending\n    usort($len, function ($a, $b) {\n       \
    \ return strlen($a) - strlen($b);\n    });\n    // reverse the array\n    $res\
    \ = array_reverse($len);\n    return array_map(function ($el) {\n        return\
    \ strlen($el) === 1 ? $el[0] : $el;\n    }, $res);\n}\n\n$arr = array(\n    1,\
    \ 55, 2, -1, 1, 55, 3, 88, 5, 7, 8, 9\n);\nprint_r(by_length($arr));\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$arr = array(\n    1, 55, 2, -1,\
    \ 1, 55, 3, 88, 5, 7, 8, 9\n);\n$len = sizeof($arr);\nfor($i = 0; $i < $len; $i++)\
    \ {\n    $arr[$i][$i] = $arr[$i][$i];\n}\n\narray_multisort($arr, SORT_ASC);\n\
    $arr = array_reverse($arr);\n</code>\n<|/ a tags=arrays,sorting,php,reverse |>\n\
    <| c |>\nThe first line does nothing, because $arr is still an array.\n<|/ c |>\n\
    <| c |>\nThis does not reverse the array, just sorts it. I know that the OP asked\
    \ for reversing it, but this is a bad answer. [See here](http://stackoverflow.com/questions/12585925/php-sort-array-by-length).\n\
    <|/ c |>\n<| c |>\nYou are right, the answer was just for reversing the array.\
    \ Sorry, I misread the question and didn't look closely enough at the example.\
    \ Though I deleted my comment.\n<|/ c |>\n<| a dscore=0 tags=arrays,sorting,php,reverse\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdyjct67t.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $min_length = min(array_map(function($v) { return strlen($v); }, $arr));\n\
    \    $max_length = max(array_map(function($v) { return strlen($v); }, $arr));\n\
    \    $sorted_arr = array_slice($arr, 0, $min_length);\n    array_walk(\n     \
    \   array('One','Two','Three','Four','Five','Six','Seven','Eight','Nine'),\n \
    \       function(&$v) use ($sorted_arr) {\n            $v = $sorted_arr[strpos($v,\
    \ $v) - 1];\n        }\n    );\n    array_walk(\n        $sorted_arr,\n      \
    \  function(&$v) use ($arr) {\n            $v = str_replace($arr, $arr[$v], $v);\n\
    \        }\n    );\n    return $arr;\n}\n$arr = array();\n$arr[] = '1';\n$arr[]\
    \ = '5';\n$arr[] = '2';\n$arr[] = '3';\n$arr[] = '8';\n$arr[] = '4';\n$arr[] =\
    \ '9';\n$arr[] = '6';\n$arr[] = '7';\n$arr[] = '0';\n$arr[] = '5';\n$arr[] = '1';\n\
    $arr[] = '6';\n$arr[] = '4';\n$arr[] = '7';\n$arr[] = '0';\n$arr[] = '4';\n$arr[]\
    \ = '5';\n$arr[] = '0';\n$arr[] = '4';\n$arr[] = '9';\n$arr[] = '1';\n$arr[] =\
    \ '3';\n$arr[] = '0';\n$arr[] = '8';\n$arr[] = '2';\n$arr[] = '2';\n$arr[] = '1';\n\
    $arr[] = '7';\n$arr[] = '6';\n$arr[] = '7';\n$arr[] = '8';\n$arr[] = '1';\n$arr[]\
    \ = '6';\n$arr[] = '7';\n$arr[] = '5';\n$arr[] = '5';\n$arr[] = '4';\n$arr[] =\
    \ '8';\n$arr[] = '6';\n$arr[] = '5';\n$arr[] = '1';\n$arr[] = '4';\n$arr[] = '8';\n\
    $arr[] = '3';\n$arr[] = '4';\n$arr[] = '2';\n$arr[] = '8';\n$arr[] = '0';\n$arr[]\
    \ = '5';\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Only variables can be passed by reference in /tmp/tmp1el864w8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $length = array_map(function ($num) {\n    return strlen($num);\n  }, $arr);\n\
    \  rsort($length);\n  return array_map(function ($num) {\n    return $num == 1\
    \ ? $num : str_replace(range(1, 9), '', $num);\n  }, $length);\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_go7_ro.php:33\n\
    Stack trace:\n#0 /tmp/tmpy_go7_ro.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpy_go7_ro.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sorted = sort($arr);\n    return array_reverse($sorted);\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, bool given\
    \ in /tmp/tmpsibbrahk.php on line 20\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpsibbrahk.php:28\nStack trace:\n#0 /tmp/tmpsibbrahk.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsibbrahk.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = array_map(\"strlen\", $arr);\n  sort($len, SORT_NUMERIC);\n  array_reverse($len);\n\
    \  $res = array_map(function ($i) use ($arr) {\n    $len = strlen($arr[$i]);\n\
    \    $res[$i] = \"One\";\n    return ($len <= 2 ? 'One' : $res);\n  }, $arr);\n\
    \  return array_filter($res);\n}\n\n$arr = array(1, -1, 1, 55, 44, 2, 1, 2, 3,\
    \ 44, 55);\n$arr2 = by_length($arr);\nprint_r($arr2);\n</code>\nOutput\n<code>\n\
    Array\n(\n    [0] => One\n    [1] => One\n    [2] => One\n    [3] => One\n   \
    \ [4] => One\n    [5] => One\n    [6] => One\n    [7] => One\n    [8] => One\n\
    \    [9] => One\n    [10] => One\n    [11] => One\n)\n</code>\n<|/ a |>\n<| a\
    \ dscore=2 tags=php,arrays |>\n<code>\narray_walk($arr, function(&$v){\n   if(is_numeric($v)){\n\
    \      if($v<1 || $v>9){\n         $v=0;\n      }\n   }\n});\n\narray_walk($arr,\
    \ function(&$v){\n   if(is_string($v)){\n      $v=strrev($v);\n   }\n});\n\nprint_r($arr);\n\
    </code>\n<|/ a |>\n<| c |>\nI did not see your answer but thank you anyway. I\
    \ am not sure if I can trust that input will be always numbers.\n<|/ c |>\n<|\
    \ c |>\nWell, you're welcome :) Yes, of course, check before using $v, and of\
    \ course before using strrev()... But your idea was very nice :)\n<|/ c |>\n<|\
    \ a tags=php,arrays |>\nIf your array contains only numeric or string, this code\
    \ may help:\n<code>\n$arr = ['string', 44, 55, '', 'string', 1];\n\n$newArr =\
    \ [];\n\n$arr = array_filter($arr);\n$arr = array_map(function($v) {\n    if (is_string($v)\
    \ || is_numeric($v)) {\n        $newArr[] = strrev($v);\n    }\n}, $arr);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\narray_filter will remove numbers, it will not change\
    \ type from string to number, only empty strings.\n<|/ c |>\n<| a |>\nIf you already\
    \ know your input array will only contain strings and numbers (and possibly possibly\
    \ \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8wp6e7mj.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$sorted_array = array();\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t\
    $arr[$i] = $arr[$i];\n\t}\n\n\tsort($arr);\n\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$sorted_array[] = $arr[$i];\n\t}\n\t\n\tarray_reverse($sorted_array);\n\
    \t\n\t$str = '';\n\tforeach ($sorted_array as $key => $value) {\n\t\t$str .= $arr[$key];\n\
    \t}\n\n\treturn $str;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6vyolx5.php:45\n\
    Stack trace:\n#0 /tmp/tmpj6vyolx5.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpj6vyolx5.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $length = array_map('strlen', $arr);\n  arsort($length);\n  $reversed =\
    \ array_reverse($length);\n  $result = array_map(function ($v, $k) {\n    return\
    \ substr($arr[$k], 0, 1);\n  }, $reversed, array_keys($length));\n  return empty($arr)\
    \ ? '' : implode(',', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gurt_3q.php:33\n\
    Stack trace:\n#0 /tmp/tmp9gurt_3q.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9gurt_3q.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr))\n        return [];\n    $len = count($arr);\n    $digit\
    \ = array_sum($arr) / $len;\n    $rev = array_reverse(array_slice($arr, 0, $len-1));\n\
    \    $result = [];\n    for ($i = 0; $i < $len; ++$i) {\n        $result[] = str_replace(\n\
    \            [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ],\n         \
    \   [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ],\n\
    \            floor($digit + $rev[$i])\n        );\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85ycrkw6.php:40\n\
    Stack trace:\n#0 /tmp/tmp85ycrkw6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp85ycrkw6.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!$arr || count($arr) < 2) {\n        return [];\n    }\n    sort($arr);\n\
    \    reverse($arr);\n    return array_replace($arr, array_keys($arr));\n}\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function reverse() in\
    \ /tmp/tmpqq9fegwn.php:23\nStack trace:\n#0 /tmp/tmpqq9fegwn.php(28): by_length(Array)\n\
    #1 /tmp/tmpqq9fegwn.php(32): candidate(Array)\n#2 /tmp/tmpqq9fegwn.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqq9fegwn.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Sort the array:\n    sort($arr);\n    // Reverse the array:\n    reverse($arr);\n\
    \    // Get the array keys:\n    $keys = array_keys($arr);\n    // If there's\
    \ only one number, return 'One':\n    if (count($arr) === 1) {\n        $keys\
    \ = array('One');\n    }\n    // For each of the keys, replace each number with\
    \ its name\n    foreach ($keys as $key) {\n        $arr[$key] = $key;\n    }\n\
    \    return $arr;\n}\n</code>\nThis solution works for the case where there are\
    \ no integers over 9 and sorts the array descending with the highest number first.\n\
    I believe that it could be done with less code but I don't think it's worth it.\n\
    <|/ a dscore=0 |>\n<| a |>\nAs far as I know, it can be done in PHP 7.2+ as follows:\n\
    <code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps4o7f9cy.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $length = array_map('strlen', $arr);\n  $length_sorted = array_sort($length,\
    \ 'cmp');\n\n  $reversed = array_reverse($arr);\n  $reversed = array_diff($reversed,\
    \ $length_sorted);\n\n  return array_map(function($el) use ($length_sorted) {\n\
    \    $i = array_search($el, $length_sorted);\n    return $i == -1 ? 'One' : $length_sorted[$i];\n\
    \  }, $reversed);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_sort()\
    \ in /tmp/tmpjpct25u_.php:20\nStack trace:\n#0 /tmp/tmpjpct25u_.php(32): by_length(Array)\n\
    #1 /tmp/tmpjpct25u_.php(36): candidate(Array)\n#2 /tmp/tmpjpct25u_.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjpct25u_.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) { return []; }\n    // Sort the array by ascending length\n\
    \    usort($arr, 'cmp');\n    // Reverse the array \n    $arr = array_reverse($arr);\n\
    \    // Iterate over the array\n    foreach ($arr as $key => $value) {\n     \
    \   // If it's not a digit or 0, add \"One\" to the array\n        if (!is_numeric($value)\
    \ || ($value == 0)) {\n            array_push($arr, \"One\");\n        }\n   \
    \     // Else, add its corresponding name from the \"Names\" array\n        else\
    \ {\n            array_push($arr, Names[$value]);\n        }\n    }\n    // Return\
    \ the resulting array\n    return $arr;\n}\n\n$names = by_length($names);\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmp1o6y1xb1.php on line 21\n\
    \nWarning: Use of undefined constant Names - assumed 'Names' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp1o6y1xb1.php on line 32\n\n\
    Warning: Use of undefined constant Names - assumed 'Names' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmp1o6y1xb1.php on line 32\n\nWarning:\
    \ Use of undefined constant Names - assumed 'Names' (this will throw an Error\
    \ in a future version of PHP) in /tmp/tmp1o6y1xb1.php on line 32\n\nWarning: Use\
    \ of undefined constant Names - assumed 'Names' (this will throw an Error in a\
    \ future version of PHP) in /tmp/tmp1o6y1xb1.php on line 32\n\nWarning: Use of\
    \ undefined constant Names - assumed 'Names' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmp1o6y1xb1.php on line 32\n\nWarning: Use of undefined\
    \ constant Names - assumed 'Names' (this will throw an Error in a future version\
    \ of PHP) in /tmp/tmp1o6y1xb1.php on line 32\n\nWarning: Use of undefined constant\
    \ Names - assumed 'Names' (this will throw an Error in a future version of PHP)\
    \ in /tmp/tmp1o6y1xb1.php on line 32\n\nWarning: Use of undefined constant Names\
    \ - assumed 'Names' (this will throw an Error in a future version of PHP) in /tmp/tmp1o6y1xb1.php\
    \ on line 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1o6y1xb1.php:46\n\
    Stack trace:\n#0 /tmp/tmp1o6y1xb1.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1o6y1xb1.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = array_map('strlen', $arr);\n  arsort($len);\n  $arr = array_reverse($arr);\n\
    \  $ret = array();\n  $i = 0;\n  while (count($arr)) {\n    $ret[] = $arr[$i];\n\
    \    $i++;\n  }\n  return $ret;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpco95q479.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return [];\n  }\n  sort($arr);\n  $revArr = array_reverse($arr);\n\
    \  foreach ($arr as $key => $value) {\n    if ($value == 1) {\n      return [$values[$key]];\n\
    \    }\n  }\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n\
    Here is a solution using array_filter():\n<code>\n<?php\n$array = [2, 1, 1, 4,\
    \ 5, 8, 2, 3];\n\n$filtered = array_filter($array, function($v){\n    return $v\
    \ != 1 && $v != -1 && $v != 55;\n});\n\n$reversed = array_reverse($filtered);\n\
    \n$filtered2 = array_filter($reversed, function($v){\n    return $v != 1 && $v\
    \ != -1 && $v != 55;\n});\n\n$result = array_map(function($v){\n    switch($v){\n\
    \        case 1:\n            return \"One\";\n        case 2:\n            return\
    \ \"Two\";\n        case 3:\n            return \"Three\";\n        case 4:\n\
    \            return \"Four\";\n        case 5:\n            return \"Five\";\n\
    \        case 6:\n            return \"Six\";\n        case 7:\n            return\
    \ \"Seven\";\n        case 8:\n            return \"Eight\";\n        case 9:\n\
    \            return \"Nine\";\n    }\n}, $filtered2);\n</code>\nThe code above\
    \ will filter the array to leave only those values which are not ones, negative\
    \ ones and 55.\nThe second array will then be reversed, and these are then filtered\
    \ again to leave only those values which are not ones, negative ones and 55.\n\
    Finally, the mapped array will be created and these values will be replaced with\
    \ their corresponding text.\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ dscore=0 |>\nI would create a function which takes an array of integers and\
    \ return the array filtered for 1, -1 (which you don't want), and 55.\n<code>\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw5qj8a5z.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return [];\n  }\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value <= 9) {\n      $arr[$key] = strval($value);\n    }\n  }\n\
    \  natsort($arr);\n  $reversed = array_reverse($arr);\n  return array_map(function\
    \ ($a) {\n    return isset($names[$a]) ? $names[$a] : 'One';\n  }, $reversed);\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nNice solution!\
    \ Can you add some explanation?\n<|/ c |>\n<| c |>\nThanks, explanation added.\n\
    <|/ c |>\n<| c |>\nThis solution does not work when the numbers are negative.\n\
    <|/ c |>\n<| c |>\nI do not see a reason why this would not work. Please provide\
    \ an example where this does not work.\n<|/ c |>\n<| c |>\nYou are right. After\
    \ reading your solution I have figured out that the negative numbers are treated\
    \ as non-existing keys and therefore not sorted. My fault. Thanks for spotting\
    \ this. I will change my answer\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\nYou can try this using array_multisort\n<code>\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd9eo9laq.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = count($arr);\n  if (!$len) return array();\n  if ($len < 3) return\
    \ array(array_shift($arr));\n  $arr = array_merge(array(1), $arr);\n  sort($arr);\n\
    \  $first = reset($arr);\n  $last = end($arr);\n  $last = $arr[$len - 1];\n  sort($arr);\n\
    \  sort($arr);\n  return array_reverse($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqim_nmix.php:37\n\
    Stack trace:\n#0 /tmp/tmpqim_nmix.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqim_nmix.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr))\n        return [];\n    $len = max($arr);\n    $temp\
    \ = [];\n    foreach ($arr as $item) {\n        if ($item > $len) {\n        \
    \    $temp[] = -1;\n        } else {\n            $temp[] = $item;\n        }\n\
    \    }\n    return array_reverse(array_merge($temp));\n}\n</code>\n<|/ a dscore=4\
    \ tags=arrays,php,sorting |>\n<| c |>\nGood one.  To make the code more readable,\
    \ I moved the definition of `$reverse_map` outside the function.  And moved `$temp\
    \ = []` to the top of the function since I didn't want to reinitialize it for\
    \ each loop, but rather just use it for the merge.\n<|/ c |>\n<| c |>\nIf you\
    \ need to reverse the array and preserve the original index, you can do this:\n\
    \n```$temp = array_keys($arr);\n$reverse_map = array_flip($temp);\n$reverse_map\
    \ = array_merge([-1], array_reverse($reverse_map));```\n<|/ c |>\n<| a tags=arrays,php,sorting\
    \ dscore=4 |>\nThis code works on PHP 5.3 and will work for both integer and string\
    \ arrays. \n<code>\n/**\n * Sort Array In Descending Order\n *\n * array $array\n\
    \ * bool\n */\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8w86hhjt.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!$arr) {\n        return array();\n    }\n\n    // if the array has\
    \ one number, return it\n    if (count($arr) == 1) {\n        return $arr;\n \
    \   }\n\n    // sort by length\n    sort($arr);\n\n    // reverse the array\n\
    \    $arr = array_reverse($arr);\n\n    // create an array of one character string\n\
    \    $arr = array_map(function ($value) {\n        return strval($value);\n  \
    \  }, $arr);\n\n    // remove all numbers from array\n    $arr = preg_replace('/\\\
    d/', '', $arr);\n\n    // return array with only character string\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl37wgau3.php:51\n\
    Stack trace:\n#0 /tmp/tmpl37wgau3.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpl37wgau3.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $one = \"One\";\n    $two = \"Two\";\n    $three = \"Three\";\n    $four\
    \ = \"Four\";\n    $five = \"Five\";\n    $six = \"Six\";\n    $seven = \"Seven\"\
    ;\n    $eight = \"Eight\";\n    $nine = \"Nine\";\n    \n    $lengths = array_count_values($arr);\n\
    \    ksort($lengths);\n    $reverse = array_reverse($lengths);\n    $length =\
    \ array_keys($lengths);\n    \n    $result = [];\n    foreach($length as $value){\n\
    \        if(isset($lengths[$value])){\n            foreach($lengths[$value] as\
    \ $k=>$v){\n                $result[] = $v . \" \" . $k[$value + 1];\n       \
    \     }\n        } else {\n            $result[] = $value;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmplk8jczi_.php\
    \ on line 37\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmplk8jczi_.php\
    \ on line 37\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmplk8jczi_.php\
    \ on line 37\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmplk8jczi_.php\
    \ on line 37\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmplk8jczi_.php\
    \ on line 37\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmplk8jczi_.php\
    \ on line 37\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk8jczi_.php:52\n\
    Stack trace:\n#0 /tmp/tmplk8jczi_.php(59): test()\n#1 {main}\n  thrown in /tmp/tmplk8jczi_.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr=array_map('intval', $arr);\n\tsort($arr);\n\tsort($arr, SORT_NUMERIC);\n\
    \t$arr=array_reverse($arr);\n\t$arr=array_map(function($i){\n\t\tswitch($i){\n\
    \t\t\tcase 1: return 'One';\n\t\t\tcase 2: return 'Two';\n\t\t\tcase 3: return\
    \ 'Three';\n\t\t\tcase 4: return 'Four';\n\t\t\tcase 5: return 'Five';\n\t\t\t\
    case 6: return 'Six';\n\t\t\tcase 7: return 'Seven';\n\t\t\tcase 8: return 'Eight';\n\
    \t\t\tcase 9: return 'Nine';\n\t\t\tdefault:\n\t\t\t\treturn $i;\n\t\t}\n\t},\
    \ $arr);\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4juluizq.php:48\n\
    Stack trace:\n#0 /tmp/tmp4juluizq.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4juluizq.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (count($arr) > 0) {\n        $min = min($arr);\n        $max = max($arr);\n\
    \        for ($i = $min; $i < $max; $i++) {\n            echo by_number($i).\"\
    \ \";\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function by_number() in\
    \ /tmp/tmpl143gsie.php:23\nStack trace:\n#0 /tmp/tmpl143gsie.php(29): by_length(Array)\n\
    #1 /tmp/tmpl143gsie.php(33): candidate(Array)\n#2 /tmp/tmpl143gsie.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl143gsie.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    if ($len === 0) {\n        return [];\n    }\n\
    \    if ($len === 1) {\n        return [chr($arr[0])];\n    }\n    $sorted = array_chunk($arr,\
    \ ceil(count($arr) / 2));\n    $reversed = array_map(function ($item) { return\
    \ array_reverse($item); }, $sorted);\n    $result = [];\n    foreach ($reversed\
    \ as $k => $vs) {\n        foreach ($vs as $v) $result[] = chr($v);\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80ekc9th.php:40\n\
    Stack trace:\n#0 /tmp/tmp80ekc9th.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp80ekc9th.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if(!is_array($arr) || empty($arr)) {\n        return array();\n    }\n\
    \    sort($arr);\n    $arr2 = array();\n    for($i=0;$i<count($arr);$i++) {\n\
    \        if($i>0 && $arr[$i] == $arr[$i-1]) {\n            $arr2[] = $arr[$i];\n\
    \        } else {\n            $arr2[] = ($arr[$i] > 9) ? $arr[$i]-10 . $arr[$i-1]\
    \ : $arr[$i];\n        }\n    }\n    array_reverse($arr2);\n    $arr2 = array_map('str_rot13',\
    \ $arr2);\n    return $arr2;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcz9gt_z.php:41\n\
    Stack trace:\n#0 /tmp/tmpkcz9gt_z.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkcz9gt_z.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  sort($arr);\n  $arr2 = array_reverse($arr);\n  foreach ($arr as $key =>\
    \ $value) {\n    $key = array_search($value, $arr2);\n    if ($key !== false)\
    \ {\n      unset($arr2[$key]);\n    }\n  }\n  $arr2 = array_reverse($arr2);\n\
    \  foreach ($arr2 as $key => $value) {\n    $key = array_search($value, $arr);\n\
    \    if ($key !== false) {\n      unset($arr[$key]);\n    }\n  }\n  if (count($arr)\
    \ == 0) {\n    return [];\n  }\n  $arr2 = array_fill(0, count($arr2), 0);\n  array_walk($arr2,\
    \ function (&$value) use ($arr) {\n    $value = $arr[$value];\n  });\n  return\
    \ array_values(array_filter(array_reverse($arr2)));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI really like this answer, since it sorts in-place and does not\
    \ create new arrays. However, it seems like a bad idea to rely on side-effects\
    \ of `array_walk`. The PHP documentation says it's supposed to \"remove and change\
    \ callback behavior of every element of array\". It says nothing about side effects\
    \ of `array_walk`'s callbacks modifying the array itself.\n<|/ c |>\n<| a tags=php,sorting,algorithm\
    \ |>\nYou can create a string from array and get sorted string. After that apply\
    \ str_replace to remove last two characters from sorted string\n<code>\n$numbers\
    \ = array(2,1,1,4,5,8,2,3);\n\nsort($numbers);\n\n$sortedString = implode(\"\"\
    ,$numbers);\n\n$sortedString = substr($sortedString,0,-1);\n\nprint_r(str_replace($sortedString,\"\
    \",$sortedString));\n</code>\nOutput\n<code>\nArray\n(\n    [0] => Eight\n   \
    \ [1] => Five\n    [2] => Four\n    [3] => Three\n    [4] => Two\n    [5] => Two\n\
    \    [6] => One\n    [7] => One\n)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like\
    \ the idea. But the OP's question was about sorting integers, not strings.\n<|/\
    \ c |>\n<| a dscore=0 |>\nYou can try this one:\n<code>\n$numbers = array(2,1,1,4,5,8,2,3);\n\
    $numbers = array_filter($numbers);\nsort($numbers);\n$numbers = array_reverse($numbers);\n\
    $final = array();\n\n$i = 0;\nforeach($numbers as $number\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgccs1nsd.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if(!is_array($arr)) return [];\n    usort($arr, 'sort_by_length');\n\
    \    return array_reverse(array_map(function($x) {\n        return substr($x,\
    \ 0, 1);\n    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_by_length' not found or invalid function name in /tmp/tmp55u8wpvb.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55u8wpvb.php:31\n\
    Stack trace:\n#0 /tmp/tmp55u8wpvb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp55u8wpvb.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $nums = array();\n    $arr = array_map('intval', array_reverse($arr));\n\
    \    array_walk($arr, function($a) use (&$nums) {\n        if($a==1) $nums[] =\
    \ $a;\n        elseif($a==-1) $nums[] = \"One\";\n        elseif($a>10) $nums[]\
    \ = \"Nine\";\n        elseif($a>9) $nums[] = \"Eight\";\n        elseif($a>8)\
    \ $nums[] = \"Seven\";\n        elseif($a>7) $nums[] = \"Six\";\n        elseif($a>6)\
    \ $nums[] = \"Five\";\n        elseif($a>5) $nums[] = \"Four\";\n        elseif($a>4)\
    \ $nums[] = \"Three\";\n        elseif($a>3) $nums[] = \"Two\";\n        elseif($a>2)\
    \ $nums[] = \"One\";\n    });\n    return $nums;\n}\n$arr = array(8, 5, 3, 4,\
    \ 2, 2, 1, 1);\n$arr = by_length($arr);\necho \"<pre>\";\nprint_r($arr);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI'm a bit confused at first glance about your solution.\
    \ Could you please explain what it does exactly? Thank you.\n<|/ c |>\n<| c |>\n\
    This solution is pretty basic, but it is also very efficient. Basically, it just\
    \ sorts the given array from lowest to highest value, then reverses the resulting\
    \ array, and then replaces each digit by the number from its position in the original\
    \ array.\n<|/ c |>\n<| c |>\nI understand why you used the if elseif chaining.\
    \ The issue is that I already have an array which has all possible values. The\
    \ only difference between my array and the original array is that some values\
    \ are missing. I think I did not explain my question clearly, but what I'm really\
    \ trying to do is create a function that will create an array with all the possible\
    \ values and then sort that array. I'll edit the question to reflect this.\n<|/\
    \ c |>\n<| c |>\nAhhh, I see. I've edited the answer, I think that is what you\
    \ need.\n<|/ c |>\n<| c |>\nThank you! This solution did exactly what I needed.\
    \ I appreciate the explanation you gave as well. Much appreciated.\n<|/ c |>\n\
    <| a dscore=1 tags=php,arrays |>\nThis isn't the cleanest solution ever, but I\
    \ thought it would be interesting to see a recursive solution using an array and\
    \ array_filter. This solution also uses a callback function which you could replace\
    \ with a custom \nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph2859vfz.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = count($arr);\n  $len2 = $len * 2;\n  $reversed_arr = [];\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    // find all numbers between 1 and 9 inclusive\n\
    \    $in_range = [];\n    for ($j = 1; $j <= 9; $j++) {\n      if ($arr[$i] ==\
    \ $j) {\n        $in_range[] = $j;\n      }\n    }\n    if ($in_range) {\n   \
    \   // sort them in descending order\n      rsort($in_range);\n      // reverse\
    \ them in descending order\n      rsort($in_range);\n      // replace each digit\
    \ by the name from $names\n      $reversed_arr[$i] = $names[count($in_range)-1];\n\
    \    } else {\n      $reversed_arr[$i] = $names[$i];\n    }\n  }\n  return $reversed_arr;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5kkt87y.php:48\n\
    Stack trace:\n#0 /tmp/tmpf5kkt87y.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf5kkt87y.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_count_values($arr);\n    arsort($lengths);\n    $keys\
    \ = array_keys($lengths);\n    $result = [];\n    foreach ($keys as $key) {\n\
    \        $result[$key] = $lengths[$key];\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0coscipa.php:33\n\
    Stack trace:\n#0 /tmp/tmp0coscipa.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0coscipa.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return array_reverse(array_map('by_strlen', array_reverse($arr)));\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map() expects parameter 1 to be a valid callback, function\
    \ 'by_strlen' not found or invalid function name in /tmp/tmp47uv3pl2.php on line\
    \ 19\n\nWarning: array_reverse() expects parameter 1 to be array, null given in\
    \ /tmp/tmp47uv3pl2.php on line 19\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp47uv3pl2.php:27\nStack trace:\n#0 /tmp/tmp47uv3pl2.php(34): test()\n\
    #1 {main}\n  thrown in /tmp/tmp47uv3pl2.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $len = array_map(function($n) {\n    return strlen($n);\n  }, $arr);\n\
    \  sort($len);\n  $r = array_reverse(array_keys($len));\n  return array_map(function($n)\
    \ use ($r) {\n    return $r[$n];\n  }, $arr);\n}\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp62tnhg1l.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  sort($arr);\n  for($i = 0; $i < count($arr); $i++) {\n    $arr[$i] = $arr[$i][0];\n\
    \  }\n  $arr2 = array_reverse($arr);\n  foreach($arr2 as $k => $v) {\n    array_push($arr[$k],\
    \ $arr[$k][0]);\n  }\n  $res = array();\n  foreach($arr as $key => $value) {\n\
    \    array_push($res, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\", $value);\n  }\n  return $res;\n}\n\n/**\n *\
    \ Given an array of strings, return the name of the largest word in the array\n\
    \ * as its corresponding English word.\n *\n * @return string\n *\n */\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_push() expects parameter 1 to be array, null given in\
    \ /tmp/tmpq4kf9kmp.php on line 25\n\nWarning: array_push() expects parameter 1\
    \ to be array, null given in /tmp/tmpq4kf9kmp.php on line 25\n\nWarning: array_push()\
    \ expects parameter 1 to be array, null given in /tmp/tmpq4kf9kmp.php on line\
    \ 25\n\nWarning: array_push() expects parameter 1 to be array, null given in /tmp/tmpq4kf9kmp.php\
    \ on line 25\n\nWarning: array_push() expects parameter 1 to be array, null given\
    \ in /tmp/tmpq4kf9kmp.php on line 25\n\nWarning: array_push() expects parameter\
    \ 1 to be array, null given in /tmp/tmpq4kf9kmp.php on line 25\n\nWarning: array_push()\
    \ expects parameter 1 to be array, null given in /tmp/tmpq4kf9kmp.php on line\
    \ 25\n\nWarning: array_push() expects parameter 1 to be array, null given in /tmp/tmpq4kf9kmp.php\
    \ on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4kf9kmp.php:46\n\
    Stack trace:\n#0 /tmp/tmpq4kf9kmp.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpq4kf9kmp.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // code here\n    if (!is_array($arr)) {\n        return [];\n    }\n\
    \    $newArr = array();\n    foreach ($arr as $val) {\n        if ($val >= 1 &&\
    \ $val <= 9) {\n            $newArr[] = str_repeat(chr(64+$val), 2);\n       \
    \ } elseif ($val > 9) {\n            continue;\n        } else {\n           \
    \ $newArr[] = $val;\n        }\n    }\n    array_reverse($newArr);\n    $result\
    \ = array();\n    foreach ($newArr as $value) {\n        $result[] = chr(64 +\
    \ array_search($value, range(0,9)));\n    }\n    return $result;\n}\n</code>\n\
    This code is more simpler, and it works on any type of array\n<|/ a tags=php,arrays,string,sorting,reverse\
    \ dscore=3 |>\n<| c |>\nThanks for the explanation. Your code works perfectly\
    \ fine. It also answers the question I asked.\n<|/ c |>\n<| a dscore=2 |>\nYou\
    \ could use array_filter and then sort with array_sort\n<code>\n$array = [2, 1,\
    \ 1, 4, 5, 8, 2, 3];\n\n$array = array_filter($array);\nsort($array);\n$array\
    \ = array_filter($array);\n\nvar_dump($array);\n</code>\nThis produces:\n<code>\n\
    array(9) { \n[0]=> int(8) \n[1]=> int(5) \n[2]=> int(4) \n[3]=> int(3) \n[4]=>\
    \ int(2) \n[5]=> int(2) \n[6]=> int(1) \n[7]=> int(1) \n[8]=> int(1) \n}\n</code>\n\
    <|/ a tags=php,arrays,string,sorting,reverse |>\n<| a tags=php,arrays,string,sorting,reverse\
    \ dscore=2 |>\nThis isn't a one-liner, but will do the trick. There are also some\
    \ nifty tricks involving preg_replace.\n<code>\n$numbers = array(1,2,1,4,5,8,2,3);\n\
    $orderedNumbers = array();\nforeach ($numbers as $num) {\n    $orderedNumbers[]\
    \ = $num;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpunt_kha2.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr2 = $arr;\n    asort($arr2);\n    $arr2 = array_reverse($arr2);\n\
    \    $arr2 = array_reduce($arr2, 'array_merge', array());\n    return $arr2;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$arr = array(12, 6, 4,\
    \ 10, 3, 9, 1, 7, 5, 2);\n\n$new = array();\n$pos = 0;\n\nforeach ($arr as $item)\
    \ {\n    $new[] = $pos;\n    $pos++;\n    if ($item == 10) {\n        break;\n\
    \    }\n}\n$new_keys = array_keys($new);\n\n$last = array_pop($new_keys);\n$new_keys[]\
    \ = $last;\n\n$new_values = array_values($new);\n\n$new_keys = array_combine($new_keys,\
    \ $new_values);\n\nprint_r($new_keys);\n</code>\nOutput:\n<code>\nArray\n(\n \
    \   [4] => 4\n    [8] => 8\n    [9] => 9\n    [10] => 10\n    [1] => 1\n    [2]\
    \ => 2\n    [3] => 3\n    [6] => 6\n    [7] => 7\n    [5] => 5\n)\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| c |>\nI actually like the result from your code, but\
    \ it does it by using the length of the array as a key, which isn't the most reliable\n\
    <|/ c |>\n<| a dscore=0 |>\nYou can do with array_slice and array_reverse \n<code>\n\
    $array = array(12, 6, 4, 10, 3, 9, 1, 7, 5, 2);\n\n$result = array_slice($array,1,count($array)-1,true)\
    \ + array_reverse($array);\n</code>\nDEMO\nOutput\n<code>\nArray\n(\n    [1] =>\
    \ 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n    [6] => 6\n  \
    \  [7] => 7\n    [8] => 8\n    [9] => 9\n    [10] => 10\n)\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\nYou can do it in one line. \n<code>\n<?php\n$array\
    \ = array(12, 6, 4, 10, 3, 9, 1, 7, 5, 2);\necho implode(array_slice($array,0,count($array)-1),\
    \ array_reverse($array));\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n\
    I wrote a recursive function which returns the desired result from the given array.\
    \ Works well for all kind of arrays. It will work irrespective of the array length\
    \ as it \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjraqtimf.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $result = [];\n  foreach ($arr as $val) {\n    $result[] = one($val);\n\
    \  }\n  $result = array_reverse($result);\n  foreach ($result as $val) {\n   \
    \ $result[] = two($val);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function one() in /tmp/tmpfwgmxs2o.php:21\n\
    Stack trace:\n#0 /tmp/tmpfwgmxs2o.php(31): by_length(Array)\n#1 /tmp/tmpfwgmxs2o.php(35):\
    \ candidate(Array)\n#2 /tmp/tmpfwgmxs2o.php(42): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpfwgmxs2o.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    return array_map(\n        function($num) { return 'One' . $num; },\n\
    \        array_filter(\n            array_reverse(\n                array_map(\n\
    \                    function($num) { return $num % 10; },\n                 \
    \   $arr\n                )\n            )\n        )\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhs3w3uq.php:37\n\
    Stack trace:\n#0 /tmp/tmpnhs3w3uq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnhs3w3uq.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $sorted_arr = sort($arr);\n  $sorted_arr2 = array_reverse($sorted_arr);\n\
    \  return array_map(function($v){\n    return sprintf(\"%s\", array_shift($sorted_arr2));\n\
    \  }, $sorted_arr2);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, bool given\
    \ in /tmp/tmp325xo0kz.php on line 20\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmp325xo0kz.php on line 23\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp325xo0kz.php:31\nStack trace:\n\
    #0 /tmp/tmp325xo0kz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp325xo0kz.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (count($arr) == 0)\n\t\treturn [];\n\tif (count($arr) > 9) {\n\t\t$arr\
    \ = array_slice($arr, 0, 9);\n\t\tarray_unshift($arr, '');\n\t\t$arr = array_reverse($arr);\n\
    \t\t$arr = array_map(function ($s) {\n\t\t\treturn strtoupper($s);\n\t\t}, $arr);\n\
    \t\treturn $arr;\n\t}\n\tsort($arr);\n\tarray_unshift($arr, '');\n\t$arr = array_reverse($arr);\n\
    \t$arr = array_map(function ($s) {\n\t\treturn strtoupper($s);\n\t}, $arr);\n\t\
    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5ki1ojq.php:43\n\
    Stack trace:\n#0 /tmp/tmpd5ki1ojq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd5ki1ojq.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tfor ($i = count($arr) - 1; $i >= 0; $i--) {\n\t\tif ($arr[$i] >= 1 && $arr[$i]\
    \ <= 9) {\n\t\t\t$arr[$i] = $i + 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tkrsort($arr);\n\
    \t$result = [];\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t$result[] = chr(64\
    \ + $arr[$i]);\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92wuoxvh.php:37\n\
    Stack trace:\n#0 /tmp/tmp92wuoxvh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp92wuoxvh.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) {\n    return [];\n  }\n  sort($arr);\n  foreach ($arr\
    \ as $key => $value) {\n    if ($key > 0 && $value < 10) {\n      $arr[$key] =\
    \ $value . \" \" . get_word_by_number($value);\n    }\n  }\n  array_reverse($arr);\n\
    \  return array_slice($arr, 0, 7);\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_word_by_number()\
    \ in /tmp/tmpqyl35qf4.php:25\nStack trace:\n#0 /tmp/tmpqyl35qf4.php(33): by_length(Array)\n\
    #1 /tmp/tmpqyl35qf4.php(37): candidate(Array)\n#2 /tmp/tmpqyl35qf4.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqyl35qf4.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sorted = array();\n    $reversed = array();\n    foreach ($arr as $num)\
    \ {\n        if ($num > 9) {\n            $reversed[$num - 10] = \"Nine\";\n \
    \       } else {\n            $reversed[$num] = \"One\";\n        }\n    }\n \
    \   ksort($reversed);\n    $reversed = array_reverse($reversed);\n    foreach\
    \ ($reversed as $key => $value) {\n        $sorted[] = $value;\n    }\n    return\
    \ $sorted;\n}\n\n/**\n * Count the number of times each letter is in a given string\n\
    \ * \n * @param string $string \n * \n * @return array \n */\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddhl69lt.php:48\n\
    Stack trace:\n#0 /tmp/tmpddhl69lt.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpddhl69lt.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return array();\n    }\n    $arr = array_map(function\
    \ ($val) {\n        return $val < 1 ? -1 : 1;\n    }, $arr);\n    array_multisort($arr,\
    \ $arr);\n    $arr = array_map(function ($val) {\n        return in_array($val,\
    \ $ones) ? $val - 1 : strlen($val);\n    }, $arr);\n    array_multisort($arr,\
    \ $arr);\n    return array_map('chr', $arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmpf0c6g0j_.php\
    \ on line 27\n\nWarning: in_array() expects parameter 2 to be array, null given\
    \ in /tmp/tmpf0c6g0j_.php on line 27\n\nWarning: in_array() expects parameter\
    \ 2 to be array, null given in /tmp/tmpf0c6g0j_.php on line 27\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpf0c6g0j_.php on line\
    \ 27\n\nWarning: in_array() expects parameter 2 to be array, null given in /tmp/tmpf0c6g0j_.php\
    \ on line 27\n\nWarning: in_array() expects parameter 2 to be array, null given\
    \ in /tmp/tmpf0c6g0j_.php on line 27\n\nWarning: in_array() expects parameter\
    \ 2 to be array, null given in /tmp/tmpf0c6g0j_.php on line 27\n\nWarning: in_array()\
    \ expects parameter 2 to be array, null given in /tmp/tmpf0c6g0j_.php on line\
    \ 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0c6g0j_.php:38\n\
    Stack trace:\n#0 /tmp/tmpf0c6g0j_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpf0c6g0j_.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if ($arr) {\n    $sorted = [];\n    array_walk($arr, function($value, $key)\
    \ {\n      $sorted[] = $value;\n    });\n    array_walk($sorted, function($value,\
    \ $key) {\n      $sorted[$key] = str_pad($value, 2, \"0\", STR_PAD_LEFT);\n  \
    \  });\n    $sorted = array_reverse($sorted);\n    array_walk($sorted, function($value,\
    \ $key) {\n      $sorted[$key] = array_replace($value, array(\"One\" => \"One\"\
    , \"Two\" => \"Two\", \"Three\" => \"Three\", \"Four\" => \"Four\", \"Five\" =>\
    \ \"Five\", \"Six\" => \"Six\", \"Seven\" => \"Seven\", \"Eight\" => \"Eight\"\
    , \"Nine\" => \"Nine\"));\n    });\n    return array_keys($sorted);\n  }\n  return\
    \ [];\n}\n</code>\n<|/ a tags=sorting,arrays,php |>\n<| c |>\nThe solution is\
    \ not working for me. Can you give an example with my array?\n<|/ c |>\n<| c |>\n\
    It works like a charm for me in php7.4 and 7.3. What version are you on? You probably\
    \ need to update it\n<|/ c |>\n<| c |>\nI am using php7.2\n<|/ c |>\n<| c |>\n\
    I made some changes to my code to handle empty arrays, this should work now\n\
    <|/ c |>\n<| a tags=sorting,arrays,php |>\nYou can do this with array_usort, with\
    \ some slight tweaking:\n<code>\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$sorted\
    \ = array_usort($arr, function($a, $b) {\n  $cmp = strlen($a) - strlen($b);\n\
    \  return $cmp ? $cmp : $a - $b;\n});\n</code>\nThe key is the comparison function,\
    \ which compares the lengths of both items, and returns -1 if $a is longer. If\
    \ the length are equal, it returns 0 if $a and $b are the same length, or 1 otherwise.\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,arrays,php |>\nI used the array_multisort\
    \ function and compared each value with each other and if they are equal then\
    \ I added them up and compared if the sum is higher or lower then move on to the\
    \ next number. \n<code>\n<?php\n    $array = [2, 1, 1, 4, 5, 8, 2, 3];\n    print_r($array);\n\
    \n    $array2 = ['eight', 'five', 'four', 'three', 'two', 'two', 'one', 'one'];\n\
    \    foreach ($array as \nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjjvk27i8.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $result = array();\n  if (count($arr)) {\n    // reverse sort by length\n\
    \    array_multisort(array_map('strlen', $arr), SORT_ASC, SORT_NUMERIC, $arr);\n\
    \    $arr = array_reverse($arr);\n    \n    // replace digits with its name\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n      $result[] = array('name' =>\
    \ $arr[$i], 'number' => $i);\n    }\n  }\n  return $result;\n}\n</code>\nDemo:\
    \ https://3v4l.org/q4ZYn\n<|/ a dscore=3 |>\n<| c |>\nYour answer seems to be\
    \ working for my tests. Thank you very much for your effort.\n<|/ c |>\n<| c |>\n\
    Nice and concise solution.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpizo8txw0.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (count($arr) < 1) return [];\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\
    \t$arr = array_map(function($v) { return $v === '' ? '' : $v . \"_\" }, $arr);\n\
    \treturn array_unique($arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgtkjl547.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  // check if arr is empty\n  if (empty($arr)) {\n    return [];\n  }\n \
    \ // check if arr is an array of int\n  if (!is_array($arr)) {\n    return [];\n\
    \  }\n\n  // sort arr\n  usort($arr, function($a, $b){\n    return strlen($a)\
    \ - strlen($b);\n  });\n\n  // reverse arr\n  $arr = array_reverse($arr);\n\n\
    \  // replace digit\n  $arr = array_map(function($val){\n    $val = str_pad($val,\
    \ 2, '0', STR_PAD_LEFT);\n    return chr(ord('0') + $val[0]);\n  }, $arr);\n\n\
    \  // return arr\n  return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcaraqk9a.php:50\n\
    Stack trace:\n#0 /tmp/tmpcaraqk9a.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpcaraqk9a.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $out = array_reverse(\n        array_map(\n            function($value)\
    \ {\n                return array(\n                    'name' => $value[1],\n\
    \                    'value' => $value[0]\n                );\n            },\n\
    \            array_filter(\n                array_slice(\n                   \
    \ array_chunk(\n                        array_map('intval', $arr),\n         \
    \               2\n                    ),\n                    1,\n          \
    \          true\n                ),\n                function($value) {\n    \
    \                return $value[0] != $value[1];\n                }\n         \
    \   )\n        )\n    );\n    return array_map(function($v) {\n        return\
    \ $v['name'];\n    }, $out);\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqrv9awy.php:52\n\
    Stack trace:\n#0 /tmp/tmpyqrv9awy.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpyqrv9awy.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arrLength = array_map(function($arr){\n        return strlen($arr);\n\
    \    }, $arr);\n    asort($arrLength);\n    return array_reverse($arrLength);\n\
    }\nprint_r(by_length($arr));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, null given\
    \ in /tmp/tmp_2_ceq5a.php on line 21\n\nWarning: asort() expects parameter 1 to\
    \ be array, null given in /tmp/tmp_2_ceq5a.php on line 22\n\nWarning: array_reverse()\
    \ expects parameter 1 to be array, null given in /tmp/tmp_2_ceq5a.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2_ceq5a.php:31\n\
    Stack trace:\n#0 /tmp/tmp_2_ceq5a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_2_ceq5a.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (empty($arr)) return array();\n  $tmp = array();\n  foreach ($arr as\
    \ $key => $val) {\n    if (is_numeric($val) && $val >= 1 && $val <= 9) {\n   \
    \   $tmp[$val] = $val;\n      unset($arr[$key]);\n    }\n  }\n  return array_reverse(array_reverse($arr),\
    \ true);\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d5n4tti.php:35\n\
    Stack trace:\n#0 /tmp/tmp_d5n4tti.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_d5n4tti.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr  = array_reverse($arr);\n    $names = array('One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n    $length = count($arr);\n\
    \    $reverse = array();\n    for ($i = 0; $i < $length; $i++) {\n        $reverse[]\
    \ = $names[$i];\n    }\n    return $reverse;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgt0jec4r.php:34\n\
    Stack trace:\n#0 /tmp/tmpgt0jec4r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgt0jec4r.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\tif (!is_array($arr)) {\n\t\treturn [];\n\t}\n\tusort($arr, function($a,\
    \ $b) {\n\t\treturn strlen($a) - strlen($b);\n\t});\n\tarray_walk($arr, function(&$el)\
    \ {\n\t\t$el = strrev($el);\n\t});\n\treturn array_filter(\n\t\t$arr, \n\t\tfunction($el)\
    \ {\n\t\t\treturn strlen($el) == 1;\n\t\t}\n\t);\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2llf_e5.php:40\n\
    Stack trace:\n#0 /tmp/tmpt2llf_e5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpt2llf_e5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // your code here\n    return [];\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfv5wgvfc.php:27\n\
    Stack trace:\n#0 /tmp/tmpfv5wgvfc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfv5wgvfc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (count($arr) === 0) return [];\n    if (count($arr) === 1) {\n   \
    \     return ['One'];\n    }\n    $first = array_shift($arr);\n    foreach ($arr\
    \ as $value) {\n        if ($value < 1 || $value > 9) {\n            return [];\n\
    \        }\n    }\n    $reverse = array_reverse($arr);\n    $first = array_shift($reverse);\n\
    \    foreach ($reverse as $value) {\n        if ($value < 1 || $value > 9) {\n\
    \            return [];\n        }\n    }\n    return array_merge([$first], $reverse);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYour question was how to reverse the array\
    \ and replace each number with the corresponding name, but the example you give\
    \ doesn't seem to be the case. Can you give an example where it fails?\n<|/ c\
    \ |>\n<| a |>\nMy solution is based on a custom comparison function that handles\
    \ edge cases:\n<code>\n<?php\n\n$input = array(6, 3, 1, 5, 4);\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsni5r449.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $str = \"\";\n    foreach ($arr as $value) {\n        $str .= $value;\n\
    \    }\n    return str_split($str);\n}\n\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0j6zufs.php:31\n\
    Stack trace:\n#0 /tmp/tmpo0j6zufs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpo0j6zufs.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    $min = min($arr);\n    $max = max($arr);\n \
    \   $return = [];\n    for ($i = 0; $i < $len; $i++) {\n        $return[] = $arr[$i];\n\
    \    }\n    arsort($return);\n    $return = array_reverse($return);\n    foreach\
    \ ($return as $value) {\n        $i = array_search($value, $arr);\n        $arr[$i]\
    \ = \"{$value}\";\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfz33nmoa.php:40\n\
    Stack trace:\n#0 /tmp/tmpfz33nmoa.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfz33nmoa.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$length = array_map('strlen', $arr);\n\tsort($length);\n\treturn array_reverse(array_slice($arr,\
    \ 0, count($length)));\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpex9n0neb.php:29\n\
    Stack trace:\n#0 /tmp/tmpex9n0neb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpex9n0neb.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    if (empty($arr)) {\n        return [];\n    }\n\n\
    \    $len = count($arr);\n    $reversed_arr = array_reverse($arr);\n\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $result[] = number_to_name($arr[$i]);\n\
    \    }\n\n    for ($i = 0; $i < $len; $i++) {\n        $result[] = number_to_name($reversed_arr[$i]);\n\
    \    }\n\n    return array_unique($result);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis solution fails on two cases (where one should be covered):\
    \ (1) when there are any negative numbers in the array (2) when there are duplicate\
    \ numbers in an array (e.g. (1,1,1)).\n<|/ c |>\n<| c |>\nThis solution doesn't\
    \ work for negative numbers. How would you do this for negative numbers?\n<|/\
    \ c |>\n<| c |>\nFor negative numbers just change the `number_to_name($x)` to\
    \ `abs($x)` and for the duplicate numbers just add another for loop to go through\
    \ the array of names.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\nI made some\
    \ modification to the previous solutions that worked great for me. \n<code>\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqwat5ph1.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjshcji0g.php:27\n\
    Stack trace:\n#0 /tmp/tmpjshcji0g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjshcji0g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (count($arr) > 0){\n        usort($arr, function($a, $b) {\n     \
    \       return strlen($a) - strlen($b);\n        });\n        for($i = count($arr);\
    \ $i--; ) {\n            $arr[$i] = \"One\" . str_repeat(\"0\", $i); \n      \
    \  }\n        return $arr;\n    }\n    return [];\n}\n</code>\n<|/ a |>\n<| a\
    \ dscore=0 tags=php |>\nA more general version of Jason Watts's answer.\n<code>\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_hpyykk8.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (!is_array($arr)) {\n    return;\n  }\n  if (empty($arr)) {\n    return\
    \ [];\n  }\n  return array_reverse($arr);\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcuvl4bdc.php:33\n\
    Stack trace:\n#0 /tmp/tmpcuvl4bdc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcuvl4bdc.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (is_array($arr)) {\n        sort($arr);\n        reset($arr);\n  \
    \      return array_reverse($arr);\n    }\n    return [];\n}\n\n$arr = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$arr = by_length($arr);\nprint_r($arr);\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 8\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 2\n    [6] => 1\n    [7] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvvl54e8u.php:36\nStack trace:\n#0 /tmp/tmpvvl54e8u.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvvl54e8u.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return [];\n    }\n\n    $len = array_sum($arr);\n\
    \n    sort($arr);\n    $r = array_reverse(array_slice($arr, 0, 0));\n    $res\
    \ = [];\n    $prev = 'One';\n    foreach ($r as $num) {\n        if ($num < 9)\
    \ {\n            $res[] = $prev;\n        } else {\n            $res[] = strval($num);\n\
    \        }\n        $prev = $num < 9 ? 'One' : 'Two';\n    }\n\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hr6cvng.php:46\n\
    Stack trace:\n#0 /tmp/tmp7hr6cvng.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp7hr6cvng.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$length = array();\n\t$return = array();\n\t\n\tforeach($arr as $value)\
    \ {\n\t\tif ($value < 1 || $value > 9) {\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t$length[]\
    \ = $value;\n\t}\n\t\n\tsort($length);\n\t\n\tforeach($length as $value) {\n\t\
    \tif ($value == 1) {\n\t\t\t$return[] = 'One';\n\t\t} else {\n\t\t\t$return[]\
    \ = array_search($value, $length) . 'Six';\n\t\t}\n\t}\n\t\n\treturn(array_reverse($return));\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2kdff_g4.php:48\n\
    Stack trace:\n#0 /tmp/tmp2kdff_g4.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2kdff_g4.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if(count($arr) <= 0) return [];\n    sort($arr);\n    $a = array_reverse($arr);\n\
    \    $i = 0;\n    foreach($arr as $num) {\n        $arr[$i] = $arr[$i] . ' ' .\
    \ getName($num);\n        $i++;\n    }\n    return array_slice($arr, 0, count($arr)\
    \ - 1);\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getName() in\
    \ /tmp/tmpwv_09o_h.php:24\nStack trace:\n#0 /tmp/tmpwv_09o_h.php(30): by_length(Array)\n\
    #1 /tmp/tmpwv_09o_h.php(34): candidate(Array)\n#2 /tmp/tmpwv_09o_h.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwv_09o_h.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return [];\n    }\n    $length = count($arr);\n\
    \    $temp = [];\n    for ($i = 0; $i < $length; $i++) {\n        if ($arr[$i]\
    \ <= 9) {\n            $temp[$i] = $arr[$i];\n        }\n    }\n    $sorted =\
    \ array_sort($temp);\n    $reversed = array_reverse($sorted);\n    $result = [];\n\
    \    foreach ($reversed as $value) {\n        $result[] = $values[$value];\n \
    \   }\n    return $result;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_sort()\
    \ in /tmp/tmpnrs61fak.php:29\nStack trace:\n#0 /tmp/tmpnrs61fak.php(38): by_length(Array)\n\
    #1 /tmp/tmpnrs61fak.php(42): candidate(Array)\n#2 /tmp/tmpnrs61fak.php(49): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnrs61fak.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$sorted = array_sort($arr, function($a, $b) {\n\t\treturn strlen($b) -\
    \ strlen($a);\n\t});\n\t\n\t$sorted = array_reverse($sorted);\n\t\n\tforeach($sorted\
    \ as $key => $value) {\n\t\tif($value > 9) {\n\t\t\t$sorted[$key] = \"Nine\";\n\
    \t\t} elseif($value >= 1 && $value <= 9) {\n\t\t\t$sorted[$key] = \"One\";\n\t\
    \t} elseif($value >= 10 && $value <= 19) {\n\t\t\t$sorted[$key] = \"Two\";\n\t\
    \t} elseif($value >= 20 && $value <= 29) {\n\t\t\t$sorted[$key] = \"Three\";\n\
    \t\t} elseif($value >= 30 && $value <= 39) {\n\t\t\t$sorted[$key] = \"Four\";\n\
    \t\t} elseif($value >= 40 && $value <= 49) {\n\t\t\t$sorted[$key] = \"Five\";\n\
    \t\t} elseif($value >= 50 && $value <= 59) {\n\t\t\t$sorted[$key] = \"Six\";\n\
    \t\t} elseif($value >= 60 && $value <= 69) {\n\t\t\t$sorted[$key] = \"Seven\"\
    ;\n\t\t} elseif($value >= 70 && $value <= 79) {\n\t\t\t$sorted[$key] = \"Eight\"\
    ;\n\t\t} elseif($value >= 80 && $value <= 89) {\n\t\t\t$sorted[$key] = \"Nine\"\
    ;\n\t\t}\n\t}\n\t\n\treturn $sorted;\n}\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_sort()\
    \ in /tmp/tmpa3pw6ov7.php:19\nStack trace:\n#0 /tmp/tmpa3pw6ov7.php(53): by_length(Array)\n\
    #1 /tmp/tmpa3pw6ov7.php(57): candidate(Array)\n#2 /tmp/tmpa3pw6ov7.php(64): test()\n\
    #3 {main}\n  thrown in /tmp/tmpa3pw6ov7.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  // 1. sort array\n  // 2. reverse array\n  // 3. replace array number\n\
    \  $result = array();\n  if (count($arr)) {\n    sort($arr);\n    $result[] =\
    \ array_reverse($arr);\n    array_walk(\n      $arr,\n      function(&$v) { \n\
    \        if (is_numeric($v)) {\n          $v = $v >= 10 ? $v - 10 . $v : $v;\n\
    \        }\n      }\n    );\n  }\n  return $result;\n}\n\n$arr = [2, 1, 1, 4,\
    \ 5, 8, 2, 3];\n$result = by_length($arr);\n\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  array(8) {\n    [0]=>\n    int(8)\n    [1]=>\n \
    \   int(5)\n    [2]=>\n    int(4)\n    [3]=>\n    int(3)\n    [4]=>\n    int(2)\n\
    \    [5]=>\n    int(2)\n    [6]=>\n    int(1)\n    [7]=>\n    int(1)\n  }\n}\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcy8y1bj.php:47\nStack\
    \ trace:\n#0 /tmp/tmppcy8y1bj.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppcy8y1bj.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    sort($arr);\n    for ($i = $len - 1; $i >= 0;\
    \ $i--) {\n        $arr[$i] = strval($arr[$i]);\n    }\n    reset($arr);\n   \
    \ return array_slice($arr, 0, 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_ykq8hm.php:33\n\
    Stack trace:\n#0 /tmp/tmpf_ykq8hm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf_ykq8hm.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_filter($arr);\n    return array_map(function ($elem) {\n\
    \        return $elem < 1 ?\n            0:\n            ($elem < 9 ?\n      \
    \          array_search($elem, range(1, 9)) :\n                array_search($elem,\
    \ range(1, 9)) < 9 ?\n                    $elem :\n                    array_search($elem,\
    \ range(1, 9)) < 10 ?\n                        'One' :\n                     \
    \   'Two' . array_search($elem, range(1, 9)) < 9 ?\n                         \
    \   'Three' :\n                            'Four' . array_search($elem, range(1,\
    \ 9)) < 9 ?\n                                'Five' :\n                      \
    \          'Six' . array_search($elem, range(1, 9)) < 9 ?\n                  \
    \                  'Seven' :\n                                    'Eight' . array_search($elem,\
    \ range(1, 9)) < 9 ?\n                                        'Nine' :\n     \
    \                                   array_search($elem, range(1, 9))\n       \
    \     ) :\n            ($elem < 99 ?\n                array_search($elem, range(1,\
    \ 99)) :\n                array_search($elem, range(1, 99)) < 99 ?\n         \
    \           $elem :\n                    array_search($elem, range(1, 99)) < 100\
    \ ?\n                        'One' :\n                        'Two' . array_search($elem,\
    \ range(1, 99)) < 99 ?\n                            'Three' :\n              \
    \              'Four' . array_search($elem, range(1, 99)) < 99 ?\n           \
    \                     'Five' :\n                                'Six' . array_search($elem,\
    \ range(1, 99)) < 99 ?\n                                    'Seven' :\n      \
    \                              'Eight' . array_search($elem, range(1, 99)) < 99\
    \ ?\n                                        'Nine' :\n                      \
    \                  array_search($elem, range(1, 99))\n            );\n    }, $arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz0jp542m.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = array_sum($arr);\n    arsort($arr);\n    $reversed = array_reverse($arr);\n\
    \    for ($i = 0, $j = count($arr) - 1; $i < $j; $i++, $j--) {\n        if ($arr[$i]\
    \ > $arr[$j]) {\n            $temp = $arr[$i];\n            $arr[$i] = $arr[$j];\n\
    \            $arr[$j] = $temp;\n        }\n    }\n    $final = [];\n    foreach\
    \ ($arr as $value) {\n        $final[] = array_search($value, range(1, 9));\n\
    \    }\n    return array_map(function ($i) { return $reversed[$i]; }, $final);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbr_qofi.php:41\n\
    Stack trace:\n#0 /tmp/tmpnbr_qofi.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpnbr_qofi.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  return array_reverse(\n    array_map(\n      function($num) { return $num\
    \ < 1 ? 'One' : $num < 9 ? 'Two' : $num < 99 ? 'Three' : $num < 999 ? 'Four' :\
    \ $num < 9999 ? 'Five' : $num < 99999 ? 'Six' : $num < 999999 ? 'Seven' : $num\
    \ < 9999999 ? 'Eight' : $num < 999999999 ? 'Nine' : $num; },\n      array_filter($arr,\
    \ function($num) { return !is_null($num); })));\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5irvnrl.php:30\n\
    Stack trace:\n#0 /tmp/tmpw5irvnrl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw5irvnrl.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (!is_array($arr)) {\n    return [];\n  }\n\n  return array_filter($arr,\
    \ function($v) {\n    return $v >= 1 && $v <= 9;\n  }, function($v){\n    return\
    \ $v - 1;\n  });\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 3 to be int, object given in\
    \ /tmp/tmpdjxqm37l.php on line 27\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpdjxqm37l.php:35\nStack trace:\n#0 /tmp/tmpdjxqm37l.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdjxqm37l.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $new_arr = array();\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value >= 1 && $value <= 9) {\n            $new_arr[$key] = \"One\";\n \
    \       } elseif ($value >= 10 && $value <= 99) {\n            $new_arr[$key]\
    \ = \"Two\";\n        } elseif ($value >= 100 && $value <= 999) {\n          \
    \  $new_arr[$key] = \"Three\";\n        } elseif ($value >= 1000 && $value <=\
    \ 9999) {\n            $new_arr[$key] = \"Four\";\n        } elseif ($value >=\
    \ 10000 && $value <= 99999) {\n            $new_arr[$key] = \"Five\";\n      \
    \  } elseif ($value >= 100000 && $value <= 999999) {\n            $new_arr[$key]\
    \ = \"Six\";\n        } elseif ($value >= 1000000 && $value <= 999999) {\n   \
    \         $new_arr[$key] = \"Seven\";\n        } elseif ($value >= 10000000 &&\
    \ $value <= 9999999) {\n            $new_arr[$key] = \"Eight\";\n        } elseif\
    \ ($value >= 100000000 && $value <= 99999999) {\n            $new_arr[$key] =\
    \ \"Nine\";\n        }\n    }\n\n    return $new_arr;\n}\n\n$arr = array();\n\
    for($i=1; $i<=100; $i++){\n    $arr[] = $i;\n}\necho \"<pre>\";\nprint_r($arr);\n\
    print_r(array_reverse($arr));\nprint_r(by_length($arr));\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    \    [4] => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n    [9]\
    \ => 10\n    [10] => 11\n    [11] => 12\n    [12] => 13\n    [13] => 14\n    [14]\
    \ => 15\n    [15] => 16\n    [16] => 17\n    [17] => 18\n    [18] => 19\n    [19]\
    \ => 20\n    [20] => 21\n    [21] => 22\n    [22] => 23\n    [23] => 24\n    [24]\
    \ => 25\n    [25] => 26\n    [26] => 27\n    [27] => 28\n    [28] => 29\n    [29]\
    \ => 30\n    [30] => 31\n    [31] => 32\n    [32] => 33\n    [33] => 34\n    [34]\
    \ => 35\n    [35] => 36\n    [36] => 37\n    [37] => 38\n    [38] => 39\n    [39]\
    \ => 40\n    [40] => 41\n    [41] => 42\n    [42] => 43\n    [43] => 44\n    [44]\
    \ => 45\n    [45] => 46\n    [46] => 47\n    [47] => 48\n    [48] => 49\n    [49]\
    \ => 50\n    [50] => 51\n    [51] => 52\n    [52] => 53\n    [53] => 54\n    [54]\
    \ => 55\n    [55] => 56\n    [56] => 57\n    [57] => 58\n    [58] => 59\n    [59]\
    \ => 60\n    [60] => 61\n    [61] => 62\n    [62] => 63\n    [63] => 64\n    [64]\
    \ => 65\n    [65] => 66\n    [66] => 67\n    [67] => 68\n    [68] => 69\n    [69]\
    \ => 70\n    [70] => 71\n    [71] => 72\n    [72] => 73\n    [73] => 74\n    [74]\
    \ => 75\n    [75] => 76\n    [76] => 77\n    [77] => 78\n    [78] => 79\n    [79]\
    \ => 80\n    [80] => 81\n    [81] => 82\n    [82] => 83\n    [83] => 84\n    [84]\
    \ => 85\n    [85] => 86\n    [86] => 87\n    [87] => 88\n    [88] => 89\n    [89]\
    \ => 90\n    [90] => 91\n    [91] => 92\n    [92] => 93\n    [93] => 94\n    [94]\
    \ => 95\n    [95] => 96\n    [96] => 97\n    [97] => 98\n    [98] => 99\n    [99]\
    \ => 100\n)\nArray\n(\n    [0] => 100\n    [1] => 99\n    [2] => 98\n    [3] =>\
    \ 97\n    [4] => 96\n    [5] => 95\n    [6] => 94\n    [7] => 93\n    [8] => 92\n\
    \    [9] => 91\n    [10] => 90\n    [11] => 89\n    [12] => 88\n    [13] => 87\n\
    \    [14] => 86\n    [15] => 85\n    [16] => 84\n    [17] => 83\n    [18] => 82\n\
    \    [19] => 81\n    [20] => 80\n    [21] => 79\n    [22] => 78\n    [23] => 77\n\
    \    [24] => 76\n    [25] => 75\n    [26] => 74\n    [27] => 73\n    [28] => 72\n\
    \    [29] => 71\n    [30] => 70\n    [31] => 69\n    [32] => 68\n    [33] => 67\n\
    \    [34] => 66\n    [35] => 65\n    [36] => "
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (empty($arr)) {\n        return [];\n    }\n\n    $max = 0;\n    foreach\
    \ ($arr as $value) {\n        $max = max($max, $value);\n    }\n\n    $result\
    \ = [];\n    for ($i = 1; $i <= $max; ++$i) {\n        $result[] = str_pad(pow($i,\
    \ $max), $i, '0', STR_PAD_LEFT);\n    }\n\n    array_walk($arr, function (&$item)\
    \ {\n        $item = intval($item);\n    });\n    array_reverse($arr);\n\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpju82ekjh.php:46\n\
    Stack trace:\n#0 /tmp/tmpju82ekjh.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpju82ekjh.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    sort($arr);\n    return array_reverse(array_replace(array_flip(range(10,\
    \ 0, -1)), 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'));\n\
    }\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n\
    $a = [\n    2 => 1, \n    1 => 1, \n    5 => 8,\n    8 => 5,\n    3 => 2,\n  \
    \  2 => 2\n];\n$result = [];\n\nforeach ($a as $k => $v) {\n    if ($v > 1 &&\
    \ $v < 10) {\n        $result[] = array(\n            'one' => 1,\n          \
    \  'two' => 2,\n            'three' => 3,\n            'four' => 4,\n        \
    \    'five' => 5,\n            'six' => 6,\n            'seven' => 7,\n      \
    \      'eight' => 8,\n            'nine' => 9,\n        );\n        $result[$k]\
    \ = $v;\n    } else {\n        continue;\n    }\n}\n\nprint_r(array_flip($result));\n\
    </code>\nhttps://3v4l.org/G6IJc\n<|/ a dscore=0 |>\n<| c |>\nThis is almost exactly\
    \ what i need. Is it possible to use it when the array is empty to return an empty\
    \ array?\n<|/ c |>\n<| c |>\nYes, it's possible, check my updated answer :)\n\
    <|/ c |>\n<| c |>\nThat works for the example in the question, but how about something\
    \ like this? https://3v4l.org/BVV4k\n<|/ c |>\n<| c |>\nThat example doesn't work\
    \ and returns an empty array. Can you explain how the code works?\n<|/ c |>\n\
    <| c |>\n`array_flip` just flips the array (ie, changes the keys to the values),\
    \ it doesn't sort.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$array =\
    \ array(\n    2 => 1, \n    1 => 1, \n    5 => 8,\n    8 => 5,\n    3 => 2,\n\
    \    2 => 2\n);\n$result = [];\n\nforeach($array as $key=>$value){\n    if($value>1\
    \ && $value<10){\n        foreach(array_flip([1=>'one',2=>'two',3=>'three',4=>'four',5=>'five',6=>'six',7=>'seven',8=>'eight',9=>'nine'])\
    \ as $key=>\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkih1m9hy.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$len = count($arr);\n\t$new_arr = array();\n\tfor($i = 0; $i < $len; $i++)\
    \ {\n\t\t$new_arr[] = array(\n\t\t\t'index' => $i,\n\t\t\t'val' => $arr[$i],\n\
    \t\t);\n\t}\n\tarray_multisort($new_arr, SORT_DESC);\n\t$last = array_pop($new_arr);\n\
    \tunset($new_arr[$last['index']]);\n\treturn array_map(function($v){\n\t\t$digit\
    \ = $v['val'];\n\t\t$name = array_key_exists($digit, array('One','Two','Three','Four','Five','Six','Seven','Eight','Nine'))\
    \ ? 'One' : '';\n\t\treturn $name . $digit;\n\t}, $new_arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9c91ul71.php:42\n\
    Stack trace:\n#0 /tmp/tmp9c91ul71.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp9c91ul71.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  // first check if array is empty\n  if (empty($arr)) return array();\n\
    \  // create empty array\n  $result = array();\n  // sort array\n  sort($arr);\n\
    \  // reverse array\n  rsort($arr);\n  // loop through array\n  for ($i=0; $i<count($arr);\
    \ $i++) {\n    // check if between 1-9\n    if ($arr[$i]>0 && $arr[$i]<=9) {\n\
    \      // loop through array again\n      for ($j=$i+1; $j<count($arr); $j++)\
    \ {\n        // check if current value is equal to next value\n        if ($arr[$j]!=$arr[$i])\
    \ break;\n        // if equal then replace with new value\n        $arr[$j] =\
    \ $arr[$i]; $i++; break;\n        // if greater than 9 ignore next value\n   \
    \     if ($arr[$j]>9) break;\n      }\n    }\n    // replace value with its name\n\
    \    $result[$i] = $arr[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wac69gh.php:51\n\
    Stack trace:\n#0 /tmp/tmp0wac69gh.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp0wac69gh.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (!is_array($arr)) {\n    trigger_error(\"arr is not an array\", E_USER_ERROR);\n\
    \  }\n  $len = count($arr);\n  if (!$len) {\n    return [];\n  }\n  $reverse =\
    \ [];\n  foreach ($arr as $a) {\n    if ($a > 9 || $a < 0) {\n      // invalid\
    \ input => ignore\n      continue;\n    }\n    $reverse[] = $a;\n  }\n  $reverse\
    \ = array_reverse($reverse);\n  for ($i = 0; $i < $len; $i++) {\n    $arr[$i]\
    \ = $reverse[$i];\n  }\n  $result = [];\n  foreach ($arr as $a) {\n    $result[]\
    \ = array_search($a, ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine']) ?\n                $a :\n                '?';\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkczdx028.php:52\n\
    Stack trace:\n#0 /tmp/tmpkczdx028.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkczdx028.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  if (is_array($arr) && !empty($arr)) {\n    usort($arr, function($a, $b)\
    \ {\n      return $a['length'] - $b['length'];\n    });\n    array_walk($arr,\
    \ function(&$v) use ($arr) {\n      $v = array_search($v, $arr);\n    });\n  \
    \  return array_reverse($arr);\n  }\n  return [];\n}\nprint_r(by_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3]));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 7\n    [1] => 0\n    [2] => 5\n    [3] => 4\n    [4]\
    \ => 3\n    [5] => 1\n    [6] => 1\n    [7] => 0\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpykba8m_n.php:36\nStack trace:\n#0 /tmp/tmpykba8m_n.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpykba8m_n.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $sortedArr = array_filter($arr, function($v) {\n        return $v >=\
    \ 1 && $v <= 9;\n    }); // remove any value not between 1 and 9\n\n    $sortedArr\
    \ = array_reverse($sortedArr);\n\n    $reverseArr = array_map(function($v){\n\
    \        return str_replace(array('One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'), array('Eight', 'Five', 'Four', 'Three', 'Two', 'Two',\
    \ 'One', 'One'), $v);\n    }, $sortedArr);\n\n    return array_filter($reverseArr);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code is a lot more compact, readable\
    \ and easy to understand than the other solutions.\n<|/ c |>\n<| a |>\nThis works:\n\
    <code>\n<?php\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd6glnzpt.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    // Write your code here\n    $length = count($arr);\n    if ($length\
    \ == 0) {\n        return [];\n    }\n    \n    $sorted = array();\n    foreach\
    \ ($arr as $value) {\n        if ($value >= 1 && $value <= 9) {\n            $sorted[]\
    \ = $value;\n        }\n    }\n    \n    $sorted = array_reverse($sorted);\n \
    \   \n    for ($i = 0; $i < $length; $i++) {\n        if ($i >= $length - 1) {\n\
    \            $sorted[$i] = \"$\" . str_pad($i, $length, 0, STR_PAD_LEFT);\n  \
    \      }\n    }\n    \n    return $sorted;\n}\n</code>\n<|/ a |>\n<| a dscore=2\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpppk0n1hx.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (!is_array($arr) || count($arr) == 0) {\n        return [];\n    }\n\
    \n    // Sort the array.\n    array_multisort($arr, SORT_NUMERIC, array_reverse($arr));\n\
    \n    // Return the names of the digits in ascending order.\n    $arrSize = count($arr);\n\
    \    $names = str_split($arrSize, 2);\n    return array_intersect_key($arr, $names);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lxgbr_v.php:37\n\
    Stack trace:\n#0 /tmp/tmp2lxgbr_v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2lxgbr_v.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_count_values($arr);\n    arsort($lengths);\n    $lengths\
    \ = array_reverse($lengths);\n    return array_flip($lengths);\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg758kfid.php:30\n\
    Stack trace:\n#0 /tmp/tmpg758kfid.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpg758kfid.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    if (count($arr) < 1) {\n        return [];\n    }\n    if (count($arr)\
    \ === 1) {\n        return array($arr[0]);\n    }\n    $sorted = array_merge(array_flip(array_slice($arr,\
    \ 0, 9)),\n        array_flip(array_slice($arr, 9, 1)));\n    $reversed = array_merge($sorted,\
    \ array_reverse($sorted));\n    return array_map(function ($value) {\n       \
    \ $digits = str_split($value);\n        $digits = array_map(function ($char) {\n\
    \            return str_pad($char, -strlen($char), '0', STR_PAD_LEFT);\n     \
    \   }, $digits);\n        $numbers = array_merge($digits, $reversed);\n      \
    \  return array_map(function ($number) {\n            return str_pad($number,\
    \ 8, '0', STR_PAD_LEFT);\n        }, $numbers);\n    }, $arr);\n}\n</code>\n<|/\
    \ a tags=numbers,algorithm,string,php,sorting |>\n<| a |>\nThis approach is pretty\
    \ straight forward, no extra functions or loops, just using PHP's str_replace\
    \ and concatenating strings to build the final result. I think this is a very\
    \ clean and readable solution:\n<code>\n$string = '10';\n$result = [];\n$digits\
    \ = str_split($string);\n\n$firstHalf = str_split(substr($string, 0, 9));\n$firstHalf\
    \ = array_merge(array_flip($firstHalf), array_flip(array_slice($firstHalf, 9,\
    \ 1)));\n$firstHalf = array_map(function ($value) {\n    return str_pad($value,\
    \ 8, '0', STR_PAD_LEFT);\n}, $firstHalf);\n\n$secondHalf = str_split(substr($string,\
    \ 9, 1));\n$secondHalf = array_merge($firstHalf, array_reverse($firstHalf));\n\
    $secondHalf = array_map(function ($value) {\n    return str_pad($value, 8, '0',\
    \ STR_PAD_LEFT);\n}, $secondHalf);\n\n$thirdHalf = array_merge($firstHalf, $secondHalf);\n\
    $result = array_merge($thirdHalf, $secondHalf);\n\n$resultString = implode('',$result);\n\
    \necho \"$resultString\\n\";\n</code>\n<|/ a tags=numbers,algorithm,string,php,sorting\
    \ dscore=0 |>\n<| a tags=numbers,algorithm,string,php,sorting |>\nThis might be\
    \ helpful to you\n<code>\n<?php\n$string = '10';\n\nfor($i=0;$i<strlen($string);$i++){\n\
    \    if($i%2==0){\n        $string[$i] = $string[$i];\n    }else{\n        $string[$i]\
    \ = substr(\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmdufpp4o.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $result = [];\n  $length = array_sum($arr);\n  foreach ($arr as $item)\
    \ {\n    if ($length < 8) {\n      $result[] = array($length, $item);\n    }\n\
    \    $length--;\n  }\n  krsort($result);\n  foreach ($result as $value) {\n  \
    \  $result[$value[1]] = $value[0];\n  }\n  return array_keys($result);\n}\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4v6sug2l.php:39\n\
    Stack trace:\n#0 /tmp/tmp4v6sug2l.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4v6sug2l.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $sorted = array();\n  usort($arr, 'sort_number_asc');\n  if ($arr == '')\
    \ {\n    return $sorted;\n  }\n  $reversed = array_reverse($arr);\n  foreach ($reversed\
    \ as $num) {\n    $found = false;\n    foreach ($sorted as $num2) {\n      if\
    \ ($num2 == $num) {\n        $found = true;\n        break;\n      }\n    }\n\
    \    if ($found == false) {\n      array_push($sorted, $num);\n    }\n  }\n  return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_number_asc' not found or invalid function name in /tmp/tmp2oi77du6.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2oi77du6.php:45\n\
    Stack trace:\n#0 /tmp/tmp2oi77du6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2oi77du6.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
