name: HumanEval_156_int_to_mini_roman
language: php
prompt: "<?php\n// Given a positive integer, obtain its roman numeral equivalent as\
  \ a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
  // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
  \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
  \ {\n"
tests: "function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $roman = '';\n\n    while ($number >= 1000) {\n        $roman .=\
    \ 'M';\n        $number -= 1000;\n    }\n\n    while ($number >= 100) {\n    \
    \    $roman .= 'C';\n        $number -= 100;\n    }\n\n    while ($number >= 10)\
    \ {\n        $roman .= 'D';\n        $number -= 10;\n    }\n\n    $roman .= 'L';\n\
    \    $number += 0;\n\n    if ($number > 0)\n    {\n        $roman .= 'X';\n  \
    \      $number -= 0;\n    }\n\n    while ($number > 0) {\n        if ($number\
    \ >= 1000)\n        {\n            $roman .= 'M';\n            $number -= 1000;\n\
    \        }\n        elseif ($number >= 100)\n        {\n            $roman .=\
    \ 'C';\n            $number -= 100;\n        }\n        elseif ($number >= 10)\n\
    \        {\n            $roman .= 'D';\n            $number -= 10;\n        }\n\
    \n        $roman .= 'L';\n        $number -= 0;\n    }\n\n    return strtolower($roman);\n\
    }\n", "    $nums = array(\n        1000, 'M',\n        900, 'CM',\n        500,\
    \ 'D',\n        400, 'CD',\n        100, 'C',\n        90, 'XC',\n        50,\
    \ 'L',\n        40, 'XL',\n        10, 'X',\n        9, 'IX',\n        5, 'V',\n\
    \        4, 'IV',\n        1, 'I',\n    );\n    $result = '';\n    for ($i = 2;\
    \ $i < $number; $i++) {\n        $result += $nums[$number % $i];\n        $number\
    \ /= $i;\n    }\n    return strtolower($result);\n}\n", "  if ($number < 1 ||\
    \ $number > 1000)\n    return \"\";\n\n  $roman = \"\";\n  $numeral = \"\";\n\n\
    \  for ($i = 0; $i < $number; $i++) {\n    $numeral = $numeral . \"I\";\n  }\n\
    \n  for ($i = 0; $i < 5; $i++) {\n    $roman = $roman . $numeral;\n  }\n\n  return\
    \ mb_strtolower($roman, \"UTF-8\");\n}\n", "  if ($number < 1 || $number > 3999)\
    \ {\n    throw new InvalidArgumentException('Invalid integer number');\n  }\n\
    \  $roman = '';\n  while (true) {\n    $roman_num = $number % 1000;\n    $number\
    \ = floor($number / 1000);\n    if ($number > 0) {\n      $roman .= roman_num_to_mini_roman($roman_num);\n\
    \    }\n    if ($number == 1) {\n      $roman = 'm' . $roman;\n      break;\n\
    \    }\n    if ($number == 3) {\n      $roman = 'cm' . $roman;\n      break;\n\
    \    }\n    if ($number == 4) {\n      $roman = 'd' . $roman;\n      break;\n\
    \    }\n    if ($number == 5) {\n      $roman = 'cd' . $roman;\n      break;\n\
    \    }\n    if ($number == 9) {\n      $roman = 'ix' . $roman;\n      break;\n\
    \    }\n    if ($number == 10) {\n      $roman = 'v' . $roman;\n      break;\n\
    \    }\n    if ($number == 40) {\n      $roman = 'iv' . $roman;\n      break;\n\
    \    }\n    if ($number == 90) {\n      $roman = 'iv' . $roman;\n      break;\n\
    \    }\n    if ($number == 400) {\n      $roman = 'lv' . $roman;\n      break;\n\
    \    }\n    if ($number == 500) {\n      $roman = 'l' . $roman;\n      break;\n\
    \    }\n    if ($number == 900) {\n      $roman = 'l' . $roman;\n      break;\n\
    \    }\n    if ($number == 5000) {\n      $roman = 'x' . $roman;\n      break;\n\
    \    }\n    if ($number == 10000) {\n      $roman = 'c' . $roman;\n      break;\n\
    \    }\n    if ($number == 20000) {\n      $roman = 'c' . $roman;\n      break;\n\
    \    }\n    if ($number == 40000) {\n      $roman = 'd' . $roman;\n      break;\n\
    \    }\n    if ($number == 80000) {\n      $roman = 'd' . $roman;\n      break;\n\
    \    }\n    if ($number == 160000) {\n      $roman = 'di' . $roman;\n      break;\n\
    \    }\n    if ($number == 320000) {\n      $roman = 'e' . $roman;\n      break;\n\
    \    }\n    if ($number == 640000) {\n      $roman = 'f' . $roman;\n      break;\n\
    \    }\n    if ($number == 1280000) {\n      $roman = 'g' . $roman", "  $int_to_roman\
    \ = array(\n    1 => 'I',\n    5 => 'V',\n    9 => 'X',\n    40 => 'D',\n    100\
    \ => 'C',\n    400 => 'CD',\n    1000 => 'M'\n  );\n\n  $roman = '';\n  foreach\
    \ ($int_to_roman as $key => $val) {\n    if ($number >= $key) {\n      $roman\
    \ .= $val;\n      $number = $number - $key;\n    }\n  }\n\n  return strtolower($roman);\n\
    }\n", "    static $mini_romans = array(\n        1 => 'i', 3 => 'ii', 5 => 'iii',\
    \ 7 => 'iv', 9 => 'v', 10 => 'vi', \n        40 => 'vii', 50 => 'viii', 60 =>\
    \ 'ix', 90 => 'ix', 100 => 'x' \n    );\n    $ret = $mini_romans[$number];\n \
    \   if (strlen($ret) > 1) {\n        return $ret;\n    }\n    return $mini_romans[floor($number\
    \ / 10)];\n}\n", "  // Limit our input to 0-999.\n  $number = max(1, $number);\n\
    \  $roman = '';\n  for ($i = 0; $i < 3; $i++) {\n    // For each of the three\
    \ parts, find the appropriate value in the\n    // roman_numerals array.\n   \
    \ $value = array_search($number, $roman_numerals[$i], true);\n    if ($value ===\
    \ false) {\n      // The value is not listed in roman_numerals, as we know it\
    \ should be.\n      // Return the whole array so that the function can still be\
    \ called for\n      // numbers in the range 0-999.\n      return $roman;\n   \
    \ }\n    $numeral = $roman_numerals[$i][$value];\n    // Now that we've found\
    \ the value, find the appropriate place in the\n    // remainder of the array\
    \ to cut it off.\n    $remainder = $number - $value;\n    $roman = substr($roman,\
    \ 0, strlen($roman) - 1) . $numeral . substr($roman, -1 * $remainder);\n  }\n\
    \  // If we only get here because $number < 1000, then we have too few values\n\
    \  // in roman_numerals to do anything interesting.\n  return $roman;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nHere is a simple solution to convert between\
    \ bases (10, 2, and 16) and a decimal number (decimal number is just a number\
    \ expressed in base 10)\n<code>", "  if (!is_numeric($number)) {\n    return false;\n\
    \  }\n  // Based on http://en.wikipedia.org/wiki/Roman_numerals#Numeral_system\n\
    \  $roman = '';\n  $remainder = $number;\n  // Each place where the remainder\
    \ >= 1000 needs its own entry in roman (except the highest spot)\n  while ($remainder\
    \ >= 1000) {\n    $roman = str_ireplace('M', 'MM', $roman);\n    $remainder -=\
    \ 1000;\n  }\n  if ($remainder >= 500) {\n    $roman = str_ireplace('D', 'DD',\
    \ $roman);\n    $remainder -= 500;\n  }\n  if ($remainder >= 100) {\n    $roman\
    \ = str_ireplace('C', 'CC', $roman);\n    $remainder -= 100;\n  }\n  if ($remainder\
    \ >= 50) {\n    $roman = str_ireplace('L', 'LL', $roman);\n    $remainder -= 50;\n\
    \  }\n  if ($remainder >= 10) {\n    $roman = str_ireplace('X', 'XX', $roman);\n\
    \    $remainder -= 10;\n  }\n  // Round anything below 10 to a single digit\n\
    \  if ($remainder < 1) {\n    $roman = str_ireplace('I', 'II', $roman);\n    $remainder\
    \ = 1;\n  }\n  $roman = str_ireplace('V', 'VV', $roman);\n  $roman = str_ireplace('I',\
    \ 'IV', $roman);\n  $roman = str_ireplace('X', 'XXX', $roman);\n  return str_pad($roman,\
    \ 3, '0', STR_PAD_LEFT);\n}\n", "    $roman = '';\n    $romanDigits = [1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for ($i = 0; $i < strlen($number);\
    \ $i++) {\n        $remainder = 0;\n        for ($j = 0; $j < count($romanDigits);\
    \ $j++) {\n            $remainder += $romanDigits[$j] * substr($number, $i, 1);\n\
    \            $i -= $romanDigits[$j];\n            if ($i == 0) {\n           \
    \     $roman = $remainder >= 5000\n                    ? substr($roman, 1) + '\
    \ ' . int_to_mini_roman($remainder - 5000)\n                    : substr($roman,\
    \ 1) + int_to_mini_roman($remainder);\n                break;\n            }\n\
    \        }\n    }\n\n    return $roman;\n}\n", "  if ($number < 1 || $number >\
    \ 1000) {\n    throw new Exception\\InvalidArgumentException(sprintf('Invalid\
    \ number %1$s', $number));\n  }\n  $roman_map = array(\n      1000 => 'M', //\
    \ 1000s\n      99 => 'CM', // 99s\n      98 => 'D', // 98s\n      97 => 'CD',\
    \ // 97s\n      96 => 'C', // 96s\n      95 => 'XC', // 95s\n      94 => 'L',\
    \ // 94s\n      93 => 'XL', // 93s\n      92 => 'X', // 92s\n      91 => 'IX',\
    \ // 91s\n      90 => 'V', // 90s\n      89 => 'IV', // 89s\n      88 => 'I',\
    \ // 88s\n  );\n\n  // Convert the number to a string, trimming any extra leading\
    \ zeros.\n  // Then, iterate over the string ignoring leading zeros in roman numerals\n\
    \  // and return the corresponding roman numeral.\n  return trim(str_pad((string)\
    \ $number, 8, '0', STR_PAD_LEFT))\n      . str_replace(array_keys($roman_map),\
    \ array_values($roman_map), str_pad('', 8, '0', STR_PAD_LEFT));\n}\n\n/**\n *\
    \ Given a positive integer, return its decimal equivalent as a string.\n * Restrictions:\
    \ 0 <= num <= 1000000\n * Examples:\n * >>> int_to_dec(19) == '19'\n * >>> int_to_dec(152)\
    \ == '152'\n * >>> int_to_dec(426) == '426'\n * >>> int_to_dec(421) == '421'\n\
    \ * >>> int_to_dec(1000) == '1,000'\n */", "  $int_convert = 10 ** floor(log10($number));\n\
    \  $digits = str_split($number, $int_convert);\n  $roman = \"\";\n  $index = 0;\n\
    \  foreach ($digits as $digit) {\n    if ($index == 1) {\n      $roman .= 'm';\n\
    \    }\n    if ($index == 2) {\n      $roman .= 'c';\n    }\n    if ($index ==\
    \ 15) {\n      $roman .= 'd';\n    }\n    if ($index == 16) {\n      $roman .=\
    \ 'x';\n    }\n    if ($index == 17) {\n      $roman .= 'l';\n    }\n    if ($index\
    \ == 18) {\n      $roman .= 'v';\n    }\n    if ($index == 19) {\n      $roman\
    \ .= 'c';\n    }\n    if ($index == 20) {\n      $roman .= 'd';\n    }\n    if\
    \ ($index == 21) {\n      $roman .= 'x';\n    }\n    if ($index == 22) {\n   \
    \   $roman .= 'l';\n    }\n    if ($index == 23) {\n      $roman .= 'v';\n   \
    \ }\n    if ($index == 24) {\n      $roman .= 'c';\n    }\n    if ($index == 25)\
    \ {\n      $roman .= 'd';\n    }\n    if ($index == 26) {\n      $roman .= 'x';\n\
    \    }\n    if ($index == 27) {\n      $roman .= 'l';\n    }\n    if ($index ==\
    \ 28) {\n      $roman .= 'v';\n    }\n    if ($index == 29) {\n      $roman .=\
    \ 'c';\n    }\n    if ($index == 30) {\n      $roman .= 'd';\n    }\n    if ($index\
    \ == 31) {\n      $roman .= 'x';\n    }\n    if ($index == 32) {\n      $roman\
    \ .= 'l';\n    }\n    if ($index == 33) {\n      $roman .= 'v';\n    }\n    if\
    \ ($index == 34) {\n      $roman .= 'c';\n    }\n    if ($index == 35) {\n   \
    \   $roman .= 'd';\n    }\n    if ($index == 36) {\n      $roman .= 'x';\n   \
    \ }\n    if ($index == 37) {\n      $roman .= 'l';\n    }\n    if ($index == 38)\
    \ {\n      $roman .= 'v';\n    }\n    if ($index == 39) {\n      $roman .= 'c';\n\
    \    }\n    if ($index == 40) {\n      $roman .= 'd';\n    }\n    if (", "  $roman\
    \ = '';\n  while (true) {\n    if ($number >= 1000) {\n      $roman .= str_repeat('c',\
    \ ceil(1000 / $number));\n      $number -= ceil(1000 / $number);\n    } else {\n\
    \      $roman .= str_repeat('x', $number);\n      break;\n    }\n  }\n  return\
    \ mb_strtolower($roman);\n}\n\n/**\n * Get the smallest unit for a number of seconds\n\
    \ * If seconds is less than 60 it will return seconds\n * If seconds is less than\
    \ 60 minutes and less than 60 hours it will return minutes\n * If seconds is less\
    \ than 24 hours and less than 60 hours it will return hours\n * If seconds is\
    \ less than 24 hours and less than 24 hours it will return days\n * Otherwise\
    \ it will return days\n */", "  $numeral_roman = '';\n  $denominators = array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n  foreach ($denominators as\
    \ $denominator) {\n    $numeral_roman .= $numeral / $denominator;\n    $numeral\
    \ = floor($numeral / $denominator);\n  }\n\n  return $numeral_roman;\n}\n", " \
    \   $roman = '';\n    while ($number > 0) {\n        $remainder = $number % 10;\n\
    \        $number -= $remainder;\n        $roman .= $letters[$remainder];\n   \
    \ }\n    return strtolower($roman);\n}\n", "\t$roman = '';\n\tdo {\n\t\t$roman\
    \ .= $alphabet[$number % 100];\n\t\t$number = floor($number / 100);\n\t} while\
    \ ($number > 0);\n\treturn strtolower($roman);\n}\n", "  if ($number < 1 || $number\
    \ > 1000)\n    return '';\n  if ($number == 100)\n    return ' ';\n  $numerals\
    \ = array('M' => 1000, 'CM' => 900, 'D' => 500, 'CD' => 400, 'C' => 100, 'XC'\
    \ => 90, 'XL' => 50, 'L' => 10, 'X' => 5, 'IX' => 10, 'V' => 5, 'IV' => 5, 'I'\
    \ => 1);\n  $numString = '';\n  for ($i = 0; $i < $number; $i++) {\n    $numString\
    \ .= $numerals[$i];\n  }\n  return $numString;\n}\n", "  $roman = '';\n  for ($i\
    \ = 0; $i < $number; ++$i) {\n    $roman .= roman_to_int($i);\n  }\n  return mb_strtolower($roman);\n\
    }\n", "  // Convert to an array containing a large lookup table.\n  $numerals\
    \ = array_combine(range(1,1000), array('', ));\n  foreach($numerals as $roman\
    \ => &$num) {\n    $num += $number/1000 * 100;\n    $number %= 1000;\n  }\n  //\
    \ Now we have the array:\n  // $numerals[1000] contains the most numerals\n  //\
    \ $numerals[999] contains the least numerals\n  // $numerals[1] is the single\
    \ numeral for 0\n\n  // We return in lowercase\n  return $numerals[$number+1];\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\npublic function intToRoman($num){\n   \
    \ $roman = \"\";\n    $i = 0;\n    while($num > 0){\n        $num -= (pow(10,\
    \ $i));\n        ++$i;\n    }\n\n    while(count($roman) < $i){\n        $roman\
    \ .= \"M\";\n    }\n\n    return $roman;\n}\n\necho intToRoman(1000);\n</code>\n\
    <|/ a dscore=2 tags=php,number-formatting,roman-numerals |>\n<| c |>\nThis should\
    \ be the accepted answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$i = 48;\n\
    \nwhile (true) {\n    if ($i == 10) break;\n    echo 'The Roman numeral for $i\
    \ is '.roman_numeral($i).'.';\n    $i -= 10;\n}\n", "    if ($number < 0 || $number\
    \ > 999) {\n        return false;\n    }\n\n    // Roman numerals must have at\
    \ least 4 characters.\n    if (strlen($roman =\n        array_reduce(range(3,\
    \ 9), 'chr', str_split($number)) .\n        array_reduce(range(10, 99), 'chr',\
    \ str_split($number / 10)) .\n        array_reduce(range(100, 999), 'chr', str_split($number\
    \ % 10))\n    ) < 4) {\n        return false;\n    }\n\n    return $roman;\n}",
  "  if ($number < 1 || $number > 1000)\n    return null;\n\n  $mini_roman = '';\n\
    \  for ($i = 1; $i <= $number; ++$i)\n    $mini_roman .= roman_number_to_letters($i);\n\
    \n  return strtolower($mini_roman);\n}\n", "  static $romans = array(\n    100\
    \  => 'M',\n    900  => 'CM',\n    500  => 'D',\n    400  => 'CD',\n    100  =>\
    \ 'C',\n    90   => 'XC',\n    50   => 'L',\n    40   => 'XL',\n    10   => 'X',\n\
    \    9    => 'IX',\n    5    => 'V',\n    4    => 'IV',\n    1    => 'I'\n  );\n\
    \  return $romans[$number];\n}\n", "  if ($number < 1 || $number > 1000) return\
    \ false;\n\n  $roman = '';\n  for ($i = 1; $i < $number; $i++) {\n    $roman .=\
    \ roman($i);\n  }\n\n  return strtolower($roman);\n}\n", "  if ($number < 1 ||\
    \ $number > 1000) {\n    return false;\n  }\n  $roman = '';\n  while ($number\
    \ >= 1000) {\n    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number\
    \ >= 900) {\n    $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >=\
    \ 500) {\n    $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400)\
    \ {\n    $roman .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n\
    \    $roman .= 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n   \
    \ $roman .= 'XC';\n    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman\
    \ .= 'L';\n    $number -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n\
    \    $number -= 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number\
    \ -= 10;\n  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n \
    \ while ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while\
    \ ($number >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n\
    }\n", "    $roman = array('M'=> 1000, 'CM' => 900, 'D' => 500, 'CD' => 400,\n\
    \                    'C' => 100, 'XC' => 90, 'XL' => 50, 'X' => 10,\n        \
    \            'IX' => 9, 'V' => 5, 'IV' => 4, 'I' => 1);\n    $str = '';\n    $n\
    \ = 0;\n    while (is_int($number) && $number > 0) {\n        $remainder = $number\
    \ % 10;\n        $number = floor($number / 10);\n        $str .= $roman[$remainder];\n\
    \    }\n    return $str;\n}\n", "  // We only need to deal with positive numbers.\n\
    \  if ($number <= 0) return '';\n  // Convert to roman numerals.\n  $numerals\
    \ = int_to_roman($number);\n  // Get the last numeral and delete it. We are assuming\
    \ that int_to_roman()\n  // will not return an empty string.\n  $last_numeral\
    \ = array_pop($numerals);\n  // Join the numerals and return the result.\n  return\
    \ implode('', $numerals);\n}\n", "  $numeral_map = {\n    1 => 'I',\n    3 =>\
    \ 'II',\n    4 => 'III',\n    9 => 'IV',\n    10 => 'V',\n    40 => 'XL',\n  \
    \  50 => 'L',\n    91 => 'XC',\n    92 => 'C'\n  };\n  return $numeral_map[$number];\n\
    }\n", "    if ($number < 1 || $number > 1000)\n        return 'Error';\n    if\
    \ ($number < 1000) {\n        $mini_roman = int_to_roman($number);\n        return\
    \ $mini_roman;\n    }\n    $roman = $mini_roman = array();\n    // Iterate over\
    \ every numeral from 2-999,\n    // except the number itself,\n    // which we\
    \ know is 1.\n    for ($i = 2; $i < $number; $i++)\n        // Convert the numeral\
    \ into binary (base 2)\n        array_push($roman, dechex(decbin($i)));\n    //\
    \ Replace 1 with the proper roman numeral\n    array_push($roman, '1');\n    //\
    \ Return roman numeral equivalent in lowercase\n    return strtolower(implode('',\
    \ $roman));\n}\n</code>\n<|/ a |>\n<| a tags=php,function,numbers,roman dscore=2\
    \ |>\nMy answer uses functions from the same library as others, but as I needed\
    \ a more complex solution (where I needed to add thousands to the string and also\
    \ handle prefixes as abbreviations), this was the simplest for me.  I first tested\
    \ the string with the following:\n<code>\n$str=\"2\";\n$str=str_split($str);\n\
    $result=str_repeat(\"X\",strlen($str));\n</code>\nThis gave me the string \"XXX\"\
    \ which I then repeated the number of times in the array.  The array itself is\
    \ converted into an array again by explode() but this time exploded on X's so\
    \ the array is now an array with 4 elements. \n<code>\n$result=explode(\"X\",$result);\n\
    </code>\nThis resulted in an array with 3 elements \"XX\", \"XX\" and \"XX\".\
    \  I then joined the first element with the remaining two elements and returned\
    \ the new string.  \n<code>", "  return mini_roman($number);\n}\n", "    $roman\
    \ = array();\n    foreach (int_to_roman_array($number) as $roman => $value) {\n\
    \        $roman[$value] = $roman;\n    }\n    return array_flip($roman);\n}\n\
    </code>\n<|/ a tags=php,math |>\n<| a dscore=1 |>\nI wrote this script for my\
    \ own personal use in the last few weeks\nIt's written in PHP, I use it for the\
    \ web\n<code>\n<?php", "    if ($number == 0) {\n        return '0';\n    }\n\n\
    \    $result = '';\n    $lookup = array('M' => 1000, 'CM' => 900, 'D' => 500,\
    \ 'CD' => 400, 'C' => 100, 'XC' => 90, 'XL' => 50, 'L' => 10, 'X' => 10, 'IX'\
    \ => 9, 'V' => 5, 'IV' => 4, 'I' => 1);\n    while (0 < $number) {\n        $rom\
    \    = $number % 100;\n        $result .= $lookup[$rom];\n        $number -= $rom;\n\
    \    }\n    return $result;\n}\n", "    if ($number < 0 || $number > 999) {\n\
    \        return false;\n    }\n\n    $roman = '';\n    while ($number >= 1000)\
    \ {\n        $roman .= 'M';\n        $number -= 1000;\n    }\n    while ($number\
    \ >= 900) {\n        $roman .= 'CM';\n        $number -= 900;\n    }\n    while\
    \ ($number >= 500) {\n        $roman .= 'D';\n        $number -= 500;\n    }\n\
    \    while ($number >= 400) {\n        $roman .= 'CD';\n        $number -= 400;\n\
    \    }\n    while ($number >= 100) {\n        $roman .= 'C';\n        $number\
    \ -= 100;\n    }\n    while ($number >= 90) {\n        $roman .= 'XC';\n     \
    \   $number -= 90;\n    }\n    while ($number >= 50) {\n        $roman .= 'L';\n\
    \        $number -= 50;\n    }\n    while ($number >= 40) {\n        $roman .=\
    \ 'XL';\n        $number -= 40;\n    }\n    while ($number >= 10) {\n        $roman\
    \ .= 'X';\n        $number -= 10;\n    }\n    while ($number >= 9) {\n       \
    \ $roman .= 'IX';\n        $number -= 9;\n    }\n    while ($number >= 5) {\n\
    \        $roman .= 'V';\n        $number -= 5;\n    }\n    while ($number >= 4)\
    \ {\n        $roman .= 'IV';\n        $number -= 4;\n    }\n    while ($number\
    \ >= 1) {\n        $roman .= 'I';\n        $number -= 1;\n    }\n    $roman .=\
    \ $number;\n\n    return $roman;\n}\n", "  static $romans = array(\n    1 => '',\n\
    \    5 => 'IV',\n    9 => 'IX',\n    40 => 'XL',\n    50 => 'L',\n    100 => 'XC',\n\
    \    500 => 'CD',\n    1000 => 'CM',\n    9999 => 'M',\n  );\n\n  $roman = $romans[$number];\n\
    \n  if (!$roman) {\n    $i = $number / 1000;\n    $f = $number / 10;\n    $o =\
    \ $number % 10;\n\n    $roman = int_to_mini_roman($i);\n    if ($o > 0) {\n  \
    \    $roman .= int_to_mini_roman($o);\n      $roman .= int_to_mini_roman($f);\n\
    \    }\n\n    $romans[$number] = $roman;\n  }\n\n  return $roman;\n}\n", "   \
    \ if (!is_numeric($number) || $number < 1 || $number > 1000)\n        return '';\n\
    \    $roman = \"\";\n    // Special case for 1.\n    if ($number == 1)\n     \
    \   $roman = 'x';\n    else\n    {\n        // Get the numeral equivalent of $number\
    \ using lookup.\n        $numeral_equivalent = lookup_roman($number);\n      \
    \  // Iterate through all possible length romans.\n        $length = mb_strlen($numeral_equivalent,\
    \ 'UTF-8');\n        for ($i = 0; $i < $length; $i++)\n        {\n           \
    \ $roman .= $numeral_equivalent[$i];\n            // Stop if we have enough.\n\
    \            if (mb_strlen($roman, 'UTF-8') == $number)\n                break;\n\
    \        }\n    }\n    return mb_strtolower($roman, 'UTF-8');\n}\n", "    if (!is_numeric($number))\
    \ {\n        throw new InvalidArgumentException(\"Argument '$number' is not a\
    \ number.\");\n    }\n\n    if ($number < 1 || $number > 1000) {\n        throw\
    \ new InvalidArgumentException(\"Argument '$number' is not between 1 and 1000.\"\
    );\n    }\n\n    if ($number == 1) {\n        return '';\n    }\n\n    $roman\
    \ = 'M';\n    $remainder = 1;\n    $min_roman = array_shift($roman_numerals);\n\
    \    foreach ($roman_numerals as $roman_numeral) {\n        $dividend = intval($number\
    \ / $remainder);\n        $remainder = $number - $dividend * $remainder;\n   \
    \     if ($dividend >= $min_roman) {\n            $roman .= $roman_numeral;\n\
    \        }\n    }\n\n    return $roman;\n}\n", "  $string = '';\n  while (true)\
    \ {\n    if ($number < 1000) {\n      $roman =\n        roman($number).\n    \
    \    substr($numerals[$number % 10], 0, 3);\n      $number /= 10;\n      if ($number\
    \ == 0) {\n        break;\n      }\n      $string .= $roman;\n    }\n    if ($number\
    \ == 0) {\n      break;\n    }\n    $roman =\n      roman($number).\n      substr($numerals[$number\
    \ % 10], 0, 3);\n    $number /= 10;\n    $string .= $roman;\n  }\n  return $string;\n\
    }", "  if ($number > 1000 || $number < 1) {\n    return \"?\";\n  }\n\n  $numStr\
    \ = dechex($number);\n\n  // Roman numeral is just a number\n  if (preg_match(\"\
    /^[0-9]*$/\", $numStr)) {\n    return $numStr;\n  }\n\n  // First add all hundreds\n\
    \  $numStr = str_pad($numStr, $number = 100, \"0\", STR_PAD_LEFT);\n  $numStr\
    \ = str_pad(substr($numStr, 0, 3), strlen($numStr), \"0\", STR_PAD_LEFT);\n  $numStr\
    \ = substr($numStr, 0, strlen($numStr) - 3);\n\n  // Then subtract all multiples\
    \ of 5\n  for ($i = 1; $i <= 9; ++$i) {\n    $numStr = str_pad(substr($numStr,\
    \ 0, 1), strlen($numStr), \"0\", STR_PAD_LEFT);\n    if ($numStr == substr($numStr,\
    \ 0, strlen($numStr) - 1)) {\n      return substr($numStr, 0, strlen($numStr)\
    \ - 1);\n    }\n  }\n\n  // Then subtract all multiples of 3\n  for ($i = 1; $i\
    \ <= 5; ++$i) {\n    $numStr = str_pad(substr($numStr, 0, 1), strlen($numStr),\
    \ \"0\", STR_PAD_LEFT);\n    if ($numStr == substr($numStr, 0, strlen($numStr)\
    \ - 1)) {\n      return substr($numStr, 0, strlen($numStr) - 1);\n    }\n  }\n\
    \n  // Finally, add the remaining single ones\n  for ($i = 1; $i <= 9; ++$i) {\n\
    \    $numStr = str_pad($numStr, $number, 0, STR_PAD_LEFT);\n    $numStr = substr($numStr,\
    \ 0, strlen($numStr) - 1);\n  }\n\n  return $numStr;\n}\n", "    if ($number <\
    \ 0 || $number > 999) {\n        return false;\n    }\n    $roman = '';\n    $suffix\
    \ = '';\n    $base = [\n        'M' => 1000,\n        'D' => 500,\n        'C'\
    \ => 100,\n        'L' => 50,\n        'X' => 10,\n        'V' => 5,\n       \
    \ 'I' => 1,\n    ];\n    $tens = [\n        1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1,\n    ];\n    $num = $number;\n    while ($num > 0) {\n \
    \       $roman .= $base[$num % 100];\n        $num = floor($num / 100);\n    }\n\
    \    while ($num > 0) {\n        $roman .= $suffix[$num % 10];\n        $num =\
    \ floor($num / 10);\n    }\n    return $roman;\n}\n", "  $result = '';\n  while\
    \ (true) {\n    $roman = int_to_roman($number);\n    $roman .= $result;\n    $number\
    \ = floor($number / 10);\n    $result = $roman;\n  }\n}\n", "  $roman = '';\n\
    \  if ($number < 1 || $number > 999) {\n    return '0';\n  }\n  $remainder = 1;\n\
    \  for ($i = 0; $i < strlen($number); ++$i) {\n    $remainder *= 10;\n    $remainder\
    \ %= 1000;\n    if ($remainder < $number - $i) {\n      $roman .= 'M';\n     \
    \ $remainder -= $number - $i;\n    }\n    $roman .= chr(($remainder % 1000) +\
    \ ($remainder < $number - $i ? 9 : 1));\n  }\n  return strtolower($roman);\n}\n",
  "    $roman = '';\n    if ($number < 1 || $number > 1000) {\n        return $roman;\n\
    \    }\n    $digits = str_split($number);\n    $roman = '';\n    $last_digit =\
    \ array_pop($digits);\n    $roman = ($last_digit == 0 || $last_digit > 4 ? ''\
    \ : $last_digit - 1) . array_pop($digits);\n    foreach ($digits as $digit) {\n\
    \        if ($digit > 0) {\n            $roman .= $digit;\n        }\n       \
    \ if ($roman == '' || $roman == strrev($roman)) {\n            if ($digit > 0)\
    \ {\n                $roman .= $digit;\n            }\n        }\n    }\n    return\
    \ $roman;\n}", "    if ($number < 1 || $number > 1000) {\n        return '';\n\
    \    }\n    $int_value = $number;\n    $str = '';\n    while (true) {\n      \
    \  if ($int_value % 1000 == 0) {\n            $str .= $int_value % 1000;\n   \
    \         $int_value = floor($int_value / 1000);\n        } else {\n         \
    \   if ($int_value > 0) {\n                $str .= $int_value % 10;\n        \
    \        $int_value = floor($int_value / 10);\n            } else {\n        \
    \        break;\n            }\n        }\n    }\n    return $str;\n}\n", "  $nums\
    \ = array_merge(range(1, 9), range(10, 27), range(28, 45), range(46, 69), range(70,\
    \ 103), range(104, 118), range(119, 134), range(135, 151), range(152, 169), range(170,\
    \ 193), range(194, 213), range(214, 233), range(234, 251), range(252, 273), range(274,\
    \ 293), range(294, 313), range(314, 333), range(334, 363), range(364, 393), range(394,\
    \ 421), range(422, 452), range(453, 474));\n  if ($number < 1 || $number > 1000)\n\
    \    die('Invalid number');\n\n  $output = '';\n  foreach ($nums as $num) {\n\
    \    // http://en.wikipedia.org/wiki/Roman's_numeral_system#Numeral_system\n \
    \   // http://www.lipsum.com/apagaeo/roman-numerals/\n    if ($num >= 1000 &&\
    \ $num <= 3999) {\n      $output .= $num;\n    } else {\n      $r = $num % 10;\n\
    \      $num = $num / 10;\n      $output .= roman_to_digit($r, $num);\n    }\n\
    \  }\n  return strtolower($output);\n}\n", "    $rom = '';\n    $rom_a = ['',\
    \ 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII',\
    \ 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXI', 'XXII', 'XXIII', 'XXIV',\
    \ 'XXV', 'XXVI', 'XXVII', 'XXVIII', 'XXIX'];\n    $rom_b = ['', 'XI', 'XX', 'XL',\
    \ 'L', 'LX', 'LXX', 'LXL', 'XC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM'];\n    $rom_c\
    \ = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII',\
    \ 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXI', 'XXII', 'XXIII',\
    \ 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII', 'XXIX'];\n    $rom_d = ['', 'M', 'MM',\
    \ 'MMM', 'MMMM'];\n\n    if ($number < 0 || $number > 1000) {\n        return\
    \ false;\n    }\n\n    while ($number >= 1000) {\n        $rom[] = int_to_mini_roman($number\
    \ % 1000);\n        $number = floor($number / 1000);\n    }\n    switch ($number)\
    \ {\n        case 100:\n            $rom[] = 'C';\n            break;\n      \
    \  case 200:\n            $rom[] = 'D';\n            break;\n        case 300:\n\
    \            $rom[] = 'E';\n            break;\n        case 400:\n          \
    \  $rom[] = 'F';\n            break;\n        case 500:\n            $rom[] =\
    \ 'G';\n            break;\n        case 600:\n            $rom[] = 'H';\n   \
    \         break;\n        case 700:\n            $rom[] = 'J';\n            break;\n\
    \        case 800:\n            $rom[] = 'K';\n            break;\n        case\
    \ 900:\n            $rom[] = 'L';\n            break;\n        case 1000:\n  \
    \          $rom[] = 'M';\n            break;\n    }\n    if ($rom) {\n       \
    \ return $rom_a[$rom[0]] . $rom_b[$rom[1]] . $rom_c[$rom[2]] . $rom_d[$rom[3]];\n\
    \    } else {\n        return false;\n    }\n}\n", "  $int_length = strlen($number);\n\
    \  $roman_num = '';\n  $roman_num_size = $int_length / 2 - 1;\n  for ($i = 0;\
    \ $i < $roman_num_size; $i++) {\n    $char = substr($number, $i * 2, 2);\n   \
    \ switch ($char) {\n      case 'M':\n        $roman_num .= 'MM';\n        break;\n\
    \      case 'D':\n        $roman_num .= 'DD';\n        break;\n      case 'C':\n\
    \        $roman_num .= 'CC';\n        break;\n      case 'L':\n        $roman_num\
    \ .= 'LL';\n        break;\n      default:\n        $roman_num .= $char;\n   \
    \ }\n  }\n  return strtolower($roman_num);\n}\n", "  // Sanitize input.\n  if\
    \ (!is_numeric($number)) {\n    throw new Exception(pht('Argument to %s must be\
    \ numeric.', 'int_to_mini_roman'));\n  }\n  if ($number < 1 || $number > 1000)\
    \ {\n    throw new Exception(\n      pht(\n        'Argument to %s must be between\
    \ 1 and 1000 inclusive. Received %d.',\n        'int_to_mini_roman',\n       \
    \ $number));\n  }\n\n  // First, convert our integer into an array of digits.\n\
    \  // This array has the form [thousands, hundreds, tens, ones, tens, ones].\n\
    \  $digits = str_split(str_repeat('0', $number % 1000));\n\n  // Then, assemble\
    \ the string from the digits in the reverse order.\n  // We do this because we\
    \ want to reverse the order of the digits so that each\n  // group of four digits\
    \ is reversed, then each group of three digits is\n  // reversed, then each group\
    \ of two digits is reversed, then each group of one\n  // digit is reversed.\n\
    \  foreach (array_reverse(array_chunk($digits, 4)) as $group) {\n    foreach (array_reverse(array_chunk($group,\
    \ 3)) as $digit) {\n      foreach (array_reverse(array_chunk($digit, 2)) as $digit)\
    \ {\n        foreach (array_reverse(array_chunk($digit, 1)) as $digit) {\n   \
    \       $roman[] = strtoupper(dechex($digit));\n        }\n      }\n    }\n  }\n\
    \n  // Finally, assemble the string from the Roman numerals and return it.\n \
    \ return implode('', $roman);\n}\n\n/**\n * Given a positive integer, convert\
    \ it into a Roman numeral equivalent string.\n *\n * @param int $number\n * @return\
    \ string Roman-equivalent of the integer $number.\n */", "  $roman = '';\n  while\
    \ (true) {\n    if ($number < 0 || $number > 3999) {\n      break;\n    }\n  \
    \  $remainder = $number % 10;\n    $roman .= $remainder == 0 ? '' : romanize($remainder);\n\
    \    $number = floor($number / 10);\n  }\n  return $roman;\n}\n", "  $result =\
    \ '';\n  if ($number < 1 || $number > 999) {\n    throw new InvalidArgumentException();\n\
    \  }\n  while ($number > 0) {\n    $remainder = $number % 100;\n    $number -=\
    \ $remainder;\n    $results[] = $remainder;\n  }\n  $results[] = 'M';\n  return\
    \ array_merge(array_slice($results, 0, 3), array_slice($results, 4));\n}\n", " \
    \   $result = '';\n    // Handle negative numbers specially, as they can never\
    \ be represented as a valid roman numeral\n    if ($number < 0) {\n        $number\
    \ = -$number;\n        $sign = '-';\n    } else {\n        $sign = '';\n    }\n\
    \    // Only deal with whole integers\n    if ($number % 1 === 0) {\n        //\
    \ Iterate through each of the thousands - 1, giving them all the\n        // 'thousands'\
    \ place value and then subtracting 1 from them all.\n        for ($i = 0; $i <\
    \ 3999; $i++) {\n            $number = floor($number / 1000);\n        }\n   \
    \     // Now deal with hundreds, thousands, millions, etc\n        if ($number\
    \ % 100 === 0) {\n            $number -= 100;\n            $result .= 'hundred\
    \ ';\n        } elseif ($number % 1000 === 0) {\n            $number -= 1000;\n\
    \            $result .= 'thousand ';\n        }\n        // Now deal with tens,\
    \ hundreds, thousands, millions, etc\n        if ($number % 1000 !== 0) {\n  \
    \          $number -= 10000;\n            $result .= 'million ';\n        }\n\
    \        // Now deal with ones\n        if ($number % 1000 !== 0) {\n        \
    \    $number -= 100000;\n            $result .= 'billion ';\n        }\n     \
    \   // And zeros\n        $result .= 'zero ';\n        $number -= 1;\n    }\n\
    \    // Now deal with the rest of the roman numerals using the number as a\n \
    \   // base\n    while (true) {\n        if ($number >= 1000) {\n            $result\
    \ .= $sign . intval(($number / 1000) & 0377) . ' hundred ';\n            $number\
    \ %= 1000;\n        } elseif ($number >= 100) {\n            $result .= $sign\
    \ . intval(($number / 100) & 037) . ' hundred ';\n            $number %= 100;\n\
    \        } elseif ($number >= 10) {\n            $result .= $sign . intval(($number\
    \ / 10) & 030) . ' ten ';\n            $number %= 10;\n        } elseif ($number\
    \ >= 1) {\n            $result .= $sign . intval($number & 077) . ' one ';\n \
    \           $number -= 1;\n        } else {\n            break;\n        }\n \
    \   }\n    // Now append the rest of the roman numerals\n    while ($number >\
    \ 0) {\n        if ($number >= 1000) {\n            $result .= $sign . intval(($number\
    \ / 1000) & 0377) . ' thousand ';\n            $number -= 1000;\n        } elseif\
    \ ($number >= 100) {\n            $result .= $sign . intval(($number / 100) &\
    \ 037) . ", "    $int_val = intval($number);\n    if ($int_val > 1000 || $int_val\
    \ < 0) {\n        throw new InvalidArgumentException(\"Int value out of range.\"\
    );\n    }\n    // Find the range of integer values that are possible input values.\n\
    \    $min = 0;\n    $max = 0;\n    if ($int_val > 0) {\n        // If the value\
    \ is positive, determine which range of integers we can\n        // represent.\n\
    \        $min = 1;\n        if ($int_val >= 100) {\n            // If the value\
    \ is greater than or equal to 100, find the smallest\n            // number that\
    \ can be represented that is a power of 10.\n            $max = $int_val / 100;\n\
    \        }\n        else {\n            // If the value is less than 100, determine\
    \ the largest number\n            // that can be represented.\n            $max\
    \ = $int_val;\n        }\n    }\n    else {\n        // If the value is negative,\
    \ determine the smallest number that is\n        // a power of 10.\n        $max\
    \ = 1;\n        if ($int_val < 0) {\n            $int_val = -$int_val;\n     \
    \   }\n        $int_val += 1;\n        while ($int_val > 0) {\n            $int_val\
    \ -= 10;\n            $max++;\n        }\n    }\n    // Now convert the input\
    \ number to the corresponding Roman numeral string.\n    $roman = '';\n    for\
    \ ($i = $min; $i <= $max; $i++) {\n        // Round to nearest even place and\
    \ use Roman numerals.\n        $roman .= roman_num_to_int($i);\n    }\n    return\
    \ $roman;\n}\n", "  $roman = '';\n  while (true) {\n    if ($number >= 1000) {\n\
    \      $roman .= 'M';\n      $number -= 1000;\n    }\n    if ($number >= 900)\
    \ {\n      $roman .= 'CM';\n      $number -= 900;\n    }\n    if ($number >= 500)\
    \ {\n      $roman .= 'D';\n      $number -= 500;\n    }\n    if ($number >= 400)\
    \ {\n      $roman .= 'CD';\n      $number -= 400;\n    }\n    if ($number >= 100)\
    \ {\n      $roman .= 'C';\n      $number -= 100;\n    }\n    if ($number >= 90)\
    \ {\n      $roman .= 'XC';\n      $number -= 90;\n    }\n    if ($number >= 50)\
    \ {\n      $roman .= 'L';\n      $number -= 50;\n    }\n    if ($number >= 40)\
    \ {\n      $roman .= 'XL';\n      $number -= 40;\n    }\n    if ($number >= 10)\
    \ {\n      $roman .= 'X';\n      $number -= 10;\n    }\n    if ($number >= 9)\
    \ {\n      $roman .= 'IX';\n      $number -= 9;\n    }\n    if ($number >= 5)\
    \ {\n      $roman .= 'V';\n      $number -= 5;\n    }\n    if ($number >= 4) {\n\
    \      $roman .= 'IV';\n      $number -= 4;\n    }\n    if ($number >= 1) {\n\
    \      $roman .= 'I';\n      $number -= 1;\n      break;\n    }\n  }\n  return\
    \ strtolower($roman);\n}\n", "    if ($number > 1000) {\n        return false;\n\
    \    }\n    $roman = '';\n    if ($number >= 100) {\n        $roman = str_split(int_to_mini_roman($number\
    \ / 100));\n        $roman[] = int_to_mini_roman($number % 100);\n        return\
    \ implode('', $roman);\n    }\n    // Only add numeral if it is a decimal between\
    \ 0 and 9.\n    if ($number >= 1) {\n        if ($number % 10 >= 5) {\n      \
    \      $roman[] = int_to_mini_roman($number % 10);\n        }\n        $roman[]\
    \ = chr((floor($number / 10) + 1) * 5);\n    }\n    return implode('', $roman);\n\
    }\n\n/**\n * Takes a string, trims it down to 70 characters, and returns a lowercase\
    \ ASCII string.\n *\n * @param string $string The string to trim.\n * @return\
    \ string\n */", "  if ($number < 1 || $number > 1000) return '';\n  if ($number\
    \ == 100) return 'c';\n  if ($number == 10) return 'd';\n  $roman = '';\n  $num\
    \ = $number;\n  for ($i = 1; ; $i += 1) {\n    $roman = ($num % 10) == 0 ? $roman\
    \ : '' . $roman;\n    $num = intval($num / 10);\n    if ($num == 0) break;\n \
    \ }\n  return strtolower($roman);\n}", "  $numeral = array();\n\n  for ($i = $number;\
    \ $i > 1; $i /= 10)\n    array_push($numeral, ($i % 10) + array('', ''));\n\n\
    \  return implode('', array_reverse(array_slice($numeral, 0, 4)));\n}\n", "  \
    \  if ($number < 1 || $number > 1000) {\n        return false;\n    }\n    $numerals\
    \ = array(\n        'I' => 1,\n        'II' => 2,\n        'III' => 3,\n     \
    \   'IV' => 4,\n        'V' => 5,\n        'VI' => 6,\n        'VII' => 7,\n \
    \       'VIII' => 8,\n        'IX' => 9,\n        'X' => 10,\n        'XI' =>\
    \ 11,\n        'XII' => 12,\n        'XIII' => 13,\n        'XIV' => 14,\n   \
    \     'XV' => 15,\n        'XVI' => 16,\n        'XVII' => 17,\n        'XVIII'\
    \ => 18,\n        'XIX' => 19,\n        'XX' => 20,\n        'XXI' => 21,\n  \
    \      'XXII' => 22,\n        'XXIII' => 23,\n        'XXIV' => 24,\n        'XXV'\
    \ => 25,\n        'XXVI' => 26,\n        'XXVII' => 27,\n        'XXVIII' => 28,\n\
    \        'XXIX' => 29,\n        'XXX' => 30,\n        'XXXI' => 31,\n        'XXXII'\
    \ => 32,\n        'XXXIII' => 33,\n        'XXXIV' => 34,\n        'XXXV' => 35,\n\
    \        'XXXVI' => 36,\n        'XXXVII' => 37,\n        'XXXVIII' => 38,\n \
    \       'XXXIX' => 39,\n        'XL' => 40,\n        'L' => 41,\n        'LI'\
    \ => 42,\n        'LX' => 43,\n        'LXI' => 44,\n        'LXII' => 45,\n \
    \       'LXIII' => 46,\n        'LXIV' => 47,\n        'LXV' => 48,\n        'LXVI'\
    \ => 49,\n        'LXVII' => 50,\n        'LXVIII' => 51,\n        'LXIX' => 52,\n\
    \        'LXX' => 53,\n        'LXXI' => 54,\n        'LXXII' => 55,\n       \
    \ 'LXXIII' => 56,\n        'LXXIV' => 57,\n        'LXXV' => 58,\n        'LXXVI'\
    \ => 59,\n        'LXXVII' => 60,\n        'LXXVIII' => 61,\n        'LXXIX' =>\
    \ 62,\n        'LXXX' => 63,\n        'LXXXI' => 64,\n        'LXXXII' => 65,\n\
    \        'LXXXIII' => 66,\n        'LXXXIV' => 67,\n        'LXXXV' => 68,\n \
    \       'LXXXVI' => 69,\n        'LXXXVII' => 70,\n        'L", "    $roman =\
    \ array('M'=>1000,'CM'=>900,'D'=>500,'CD'=>400,'C'=>100,'XC'=>90,'L'=>50,'XL'=>40,'X'=>10,'IX'=>9,'V'=>5,'IV'=>4,'I'=>1);\n\
    \    $result = '';\n    do {\n        $result += $roman[$number % 10];\n     \
    \   $number /= 10;\n    } while ($number > 0);\n    return $result;\n}\n", " \
    \ if ($number < 1 || $number > 3999) {\n    die(\"Invalid number: $number\");\n\
    \  }\n\n  $result = '';\n  $roman = array('m' => 1000, 'cm' => 900, 'd' => 500,\
    \ 'cd' => 400, 'xc' => 100,\n                 'l' => 50, 'xl' => 40, 'x' => 10,\
    \ 'ix' => 9, 'v' => 5, 'iv' => 4,\n                 'i' => 1);\n  for ($i = 0;\
    \ $i < $number; $i++) {\n    $result += $roman[$i];\n  }\n  return $result;\n\
    }\n", "  $roman = '';\n  $value = '';\n  $i = 0;\n\n  while (strlen($value) <\
    \ $number) {\n    $value[$i] = $number % 10;\n    $number /= 10;\n    $i++;\n\
    \  }\n\n  $i = $number - 1;\n  while ($i >= 0) {\n    $roman .= roman_number[$value[$i]];\n\
    \    $i--;\n  }\n\n  return $roman;\n}\n", "\t$numeral = '';\n\twhile ($number\
    \ > 0) {\n\t\t$hundreds = floor($number / 100);\n\t\t$next = mod($number, 100);\n\
    \t\t$numeral .= $hundreds == 0 ? 'M' : $hundreds . 'C';\n\t\t$number = $next;\n\
    \t}\n\n\tif ($number > 0) {\n\t\t$hundreds = floor($number / 10);\n\t\t$numeral\
    \ .= $hundreds == 0 ? 'M' : $hundreds . 'C';\n\t}\n\n\tif ($number >= 1) {\n\t\
    \t$numeral .= 'M';\n\t}\n\n\treturn strtolower($numeral);\n}\n", "    // Roman's\
    \ numerals vary from 1 to 1000 but we only need values up to 1000.\n    // Also\
    \ note that PHP's romanian alphabet is inconsistent in how numbers\n    // are\
    \ written (1 is I in roman but 1 is I and 2 in roman).\n    // This function converts\
    \ the number into a string and reverses the order\n    // to get a correctly ordered\
    \ romanian numeral.\n    // http://www.unicode.org/reports/tr35/tr35-29.html#RomAlphabet\n\
    \    // http://www.unicode.org/charts/PDF/UA0000.pdf\n    if ($number < 1 || $number\
    \ > 1000) {\n        return false;\n    }\n\n    $numerals = array(\n        'M'\
    \ => 1000,\n        'D' => 500,\n        'C' => 100,\n        'L' => 50,\n   \
    \     'X' => 10,\n        'V' => 5,\n        'I' => 1,\n    );\n    // This function\
    \ returns the roman numeral equivalent of a number\n    // given a particular\
    \ romanian numeral alphabet and an equivalent number.\n    // It assumes the number\
    \ passed is valid.\n    $return = '';\n    foreach ($numerals as $roman => $number)\
    \ {\n        if ($number <= $number) {\n            return $roman;\n        }\n\
    \    }\n}\n", "    $roman = '';\n    while($number >= 1000 && $number >= 900)\
    \ {\n        $roman .= 'm';\n        $number -= 100;\n    }\n    if($number >=\
    \ 500 && $number < 1000) {\n        $roman .= 'c';\n        $number -= 500;\n\
    \    }\n    if($number >= 1000 && $number < 500) {\n        $roman .= 'l';\n \
    \       $number -= 1000;\n    }\n    if($number >= 500) {\n        $roman .= 'x';\n\
    \        $number -= 5000;\n    }\n    while($number >= 100) {\n        $roman\
    \ .= 'c';\n        $number -= 100;\n    }\n    while($number >= 10) {\n      \
    \  $roman .= 'l';\n        $number -= 10;\n    }\n    while($number >= 1) {\n\
    \        $roman .= 'x';\n        $number -= 1;\n    }\n    return $roman;\n}\n",
  "\t$roman = '';\n\twhile ($number > 0) {\n\t\t$remainder = $number % 10;\n\t\t$roman\
    \ .= chr($remainder + 64);\n\t\t$number = floor($number / 10);\n\t}\n\treturn\
    \ strtolower($roman);\n}\n", "  $numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    20 => 'C',\n    50 => 'D',\n    100 => 'M',\n    1000 =>\
    \ 'M',\n    10000 => 'B',\n    100000 => 'B',\n    1000000 => 'M',\n    10000000\
    \ => 'G',\n    100000000 => 'T',\n    1000000000 => 'P',\n    1000000000000 =>\
    \ 'P',\n    10000000000000 => 'P',\n    1000000000000000 => 'P',\n    1000000000000000000\
    \ => 'P'\n  );\n\n  // Find the largest decimal place\n  $max_decimal_place =\
    \ count($numerals) - 1;\n  foreach ($numerals as $key => $value) {\n    if ($number\
    \ >= $value * 10) {\n      $max_decimal_place = $key;\n      break;\n    }\n \
    \ }\n  // Do the conversion up to that point\n  $number /= 10;\n  $roman =& $numerals[$max_decimal_place];\n\
    \n  // Roman numerals are normally not consecutive, and roman numerals\n  // are\
    \ normally in ascending order (for example, from I to IV).\n  // Therefore, iterate\
    \ over the numerals array in reverse order\n  for($i = (count($numerals) - 1);\
    \ $i > 0; $i--) {\n    $numeral_digit = floor($number % 10);\n    $number -= $numeral_digit\
    \ * 10;\n    $roman .= $numerals[$i] . $numeral_digit;\n  }\n  return strtolower($roman);\n\
    }\n", "  $roman = '';\n  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n", "  if (!is_int($number) || $number <\
    \ 1 || $number > 1000) {\n    return '';\n  }\n  $roman = '';\n  for ($i = 1;\
    \ $i <= $number; $i++) {\n    $nums = array(5, 3);\n    if ($number % $i == 0)\
    \ {\n      $nums[] = $i;\n    }\n    $roman .= roman($nums);\n  }\n  return $roman;\n\
    }\n</code>\n<|/ a tags=string,php,roman-numerals dscore=5 |>\n<| c |>\nThe author\
    \ of the question didn't mention performance so I don't think the benchmarks are\
    \ valid. I believe this answer can be improved if you include the comparison with\
    \ the other answers. But your answer deserves it.\n<|/ c |>\n<| c |>\nI added\
    \ the benchmarks to my answer. I think it is true that `str_split()` is slower\
    \ than `str_split()`, so I added a benchmark with `str_split()` too.\n<|/ c |>\n\
    <| c |>\nI did a benchmark and it turns out `str_split` is actually a little slower\
    \ than my answer. But I used an older PHP version which didn't support `str_split()`,\
    \ which makes `str_split()` slower (2.2 vs 5.3)\n<|/ c |>\n<| c |>\nI'm using\
    \ the version on PHP 5.5.9 and `str_split()` is faster (3 vs 1 second). http://codepad.org/5VsEk3Ls\n\
    <|/ c |>\n<| c |>\n`str_split()` takes around 1.25 \xB5s compared to `substr()`\
    \ which takes around 1.1 \xB5s.\n<|/ c |>\n<| a dscore=5 tags=string,php,roman-numerals\
    \ |>\nThis solution does not involve regular expressions, loops, or any other\
    \ PHP looping constructs.\nI suggest using the following formula:\n\nC = 100\n\
    M = 1000\nD = 500\nL = 40\nX = 10\nV = 5\nI = 1\n\nC = 100 - (100 - 1000 + 500\
    \ - 40 + 10 - 5 + 1 - 1)\nC = 100 - (100 - 100 + 500 - 40 + 10 - 5 + 1 + 0)\n\
    C = (100 - (100 - 100 + 500 - 40 + 10 - 5 + 1 + 0)) * 100\nC = 100 - (100 * 100\
    \ + 500 - 40 + 10 - 5 + 1 + 0)\nC = 100 * 100 * 100 + 500 - 40 + 10 - 5 + 1 +\
    \ 0\nC = 10000 * 100 + 500 - 40 + 10 - 5 + 1 + 0\nC = (1000000 * 100 + 500 - ",
  "  // Handle negative integers first.\n  $number = abs($number);\n  if ($number\
    \ < 1000) {\n    return int_to_mini_roman($number / 100) . substr(int_to_mini_roman($number\
    \ / 100), 0, 1);\n  }\n\n  // Otherwise, we'll need to use a recursive solution\
    \ to get the result.\n  // First, figure out how many whole units we'll need.\n\
    \  $whole_units = $number / 1000;\n  // Next, figure out how many fractional units\
    \ we'll need.\n  $fractional_units = (1000 - $whole_units) * 100;\n\n  // Now,\
    \ figure out which parts of the integer will be included in the roman\n  // numeral.\n\
    \  $whole = floor($whole_units);\n  $fractional = floor($fractional_units);\n\n\
    \  $mini_roman = '';\n  if ($whole > 0) {\n    $mini_roman .= int_to_mini_roman($whole);\n\
    \  }\n\n  if ($fractional > 0) {\n    // We need to add the hundreds digit.\n\
    \    if ($fractional_units > 1000) {\n      // There are too many fractional units,\
    \ so we only need the hundreds digit.\n      $fractional_units = $fractional_units\
    \ - 1000;\n    }\n    $mini_roman .= substr(int_to_mini_roman($fractional_units),\
    \ 0, 1);\n  }\n\n  return $mini_roman;\n}\n", "  $str = '';\n  while ($number\
    \ >= 1000) {\n    $str .= roman($number / 1000);\n    $number = $number % 1000;\n\
    \  }\n  return roman($number).$str;\n}\n", "    // Sanitize $number\n    if ($number\
    \ < 1 || $number > 1000) throw new RangeException('number must be between 1 and\
    \ 1000');\n    \n    // Initialize the alphabet\n    static $alphabet = 'MCMXCIV';\n\
    \n    // Find the minimum number of romans that can accomodate $number\n    $roman_numerals\
    \ = array_flip($alphabet);\n    $roman_numerals_len = count($roman_numerals);\n\
    \    $min_romans = min($roman_numerals_len, ceil($number / $roman_numerals_len));\n\
    \n    // Return the converted number\n    return $alphabet[($number - $min_romans\
    \ * $roman_numerals_len)]\n        . int_to_mini_roman($number - $min_romans *\
    \ $roman_numerals_len);\n}\n", "\trequire_once('gmp.class.php');\n\t$roman = array('M',\
    \ 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I');\n\tfor ($i\
    \ = count($roman); $i > 0; $i--) {\n\t\t$key = $roman[$i - 1];\n\t\tif ($number\
    \ >= $i) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ($number / $i) * $key . int_to_roman($number\
    \ % $i);\n}\n", "  if ($number < 1 || $number > 1000) die;\n  $nums = array(\"\
    \", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\");\n\
    \  foreach ($nums as $key => $value) {\n    if (($number >= ($key * 1000))) {\
    \ $number -= ($key * 1000); break;}\n  }\n  return $nums[$number % 10] . $number;\n\
    }\n", "  if ($number <= 0) return 'zero';\n  if ($number <= 20) return 'un';\n\
    \  if ($number <= 39) return 'da';\n  if ($number <= 99) return 'cho';\n  if ($number\
    \ <= 199) return 'set';\n  if ($number <= 499) return 'mix';\n  if ($number <=\
    \ 999) return 'exe';\n  if ($number <= 9999) return 'xxx';\n\n  $roman = '';\n\
    \  $num_string = $number;\n  $num_array = str_split($num_string);\n\n  // We start\
    \ with the largest possible number (9999) and decrement until we reach\n  // the\
    \ first two numbers (999 and 99), which become \"MMM\".\n  for ($i = 999; $i >=\
    \ 99; $i--) {\n    if (in_array($i, $num_array)) {\n      $roman .= $i;\n    \
    \  array_splice($num_array, array_search($i, $num_array), 1);\n    }\n  }\n\n\
    \  // Add remaining numbers in reverse order.\n  $num_string = implode('', array_reverse($num_array));\n\
    \n  // If the number string has three characters, add an \"ii\" to the end to\n\
    \  // indicate a number that should be interpreted as a thousand.\n  if (strlen($num_string)\
    \ >= 3) {\n    $roman .= 'ii';\n  }\n\n  // Return our final result.\n  return\
    \ $roman;\n}", "  if ($number < 1 || $number > 1000)\n    return false;\n\n  $arr\
    \ = \"IVXLCDM\";\n  $arr2 = array(\"\", \"I\", \"II\", \"III\", \"IV\", \"V\"\
    , \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\");\n  $arr3\
    \ = array(\"\", \"L\", \"XL\", \"XLI\", \"XLE\", \"XLV\", \"XLV\", \"XDL\", \"\
    XDLE\", \"XDLV\", \"XDLI\", \"XDLE\");\n  $str = \"\";\n  for ($i = $number -\
    \ 1; $i >= 0; $i--) {\n    $str .= $arr[$i];\n  }\n  return $str . \" \" . $arr2[$number]\
    \ . \" \" . $arr3[$number];\n}\n", "    // TODO: Think of a cleaner way to handle\
    \ invalid inputs.\n    // TODO: Consider adding a parameter to specify the minimal\
    \ roman\n    // number used and overriding this function with that.\n    if ($number\
    \ < 1 || $number > 1000) {\n        return 'ERROR';\n    }\n    $roman = '';\n\
    \    $num = $number;\n    while ($num > 0) {\n        $remainder = $num % 10;\n\
    \        $roman .= roman_number_to_lowercase($remainder);\n        $num = ($num\
    \ - $remainder) / 10;\n    }\n    return $roman;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ dscore=2 |>\n<| a tags=php,algorithm |>\nAn easy way to do this in PHP:\n<code>",
  "  $roman = '';\n  for ($i = 1; $i <= $number; $i++) {\n    $roman .= roman_numeral($i);\n\
    \  }\n\n  return mb_strtolower($roman);\n}\n", "    $roman = '';\n    foreach\
    \ (range(1, 1000) as $roman .= $numbers[$number]) {}\n    return $roman;\n}\n",
  "    $roman_number = array_filter(range(1000, 900));\n    $roman_number[] = 'M';\n\
    \    $roman_number[] = 'CM';\n    $roman_number[] = 'D';\n    $roman_number[]\
    \ = 'CD';\n    $roman_number[] = 'C';\n    $roman_number[] = 'XC';\n    $roman_number[]\
    \ = 'L';\n    $roman_number[] = 'XL';\n    $roman_number[] = 'X';\n    $roman_number[]\
    \ = 'IX';\n    $roman_number[] = 'V';\n    $roman_number[] = 'IV';\n    $roman_number[]\
    \ = 'I';\n\n    $result = '';\n    while ($number >= 1000) {\n        $number\
    \ -= 1000;\n        $result .= $roman_number[$number / 100];\n        $number\
    \ %= 100;\n    }\n    $result .= $roman_number[$number];\n\n    return strtolower($result);\n\
    }\n", "  $int_num = $number;\n  $intstr_array = [];\n  $intstr = '';\n  $int_num\
    \ = $int_num;\n\n  // first check for single digits\n  if ($int_num < 100) {\n\
    \    if ($int_num > 0) {\n      $intstr .= $int_num;\n    }\n  } else {\n    //\
    \ if the number has more than one hundred or greater, we must use a\n    // recursive\
    \ solution\n    $intstr_array[] = int_to_mini_roman($int_num / 100);\n    $int_num\
    \ = $int_num % 100;\n    if ($int_num < 10) {\n      $intstr .= $int_num;\n  \
    \  } else {\n      $intstr_array[] = $int_num;\n    }\n  }\n\n  // if we only\
    \ have a single digit, we need to deal with it as a\n  // special case to return\
    \ the correct string\n  if (count($intstr_array) == 1) {\n    $intstr = $intstr_array[0];\n\
    \  }\n  return $intstr;\n}\n", "  $roman = '';\n\n  while ($number >= 1000) {\n\
    \    $roman .= 'M';\n    $number -= 1000;\n  }\n\n  if ($number >= 900) {\n  \
    \  $roman .= 'CM';\n    $number -= 900;\n  }\n  if ($number >= 500) {\n    $roman\
    \ .= 'D';\n    $number -= 500;\n  }\n  if ($number >= 400) {\n    $roman .= 'CD';\n\
    \    $number -= 400;\n  }\n  if ($number >= 100) {\n    $roman .= 'C';\n    $number\
    \ -= 100;\n  }\n  if ($number >= 90) {\n    $roman .= 'XC';\n    $number -= 90;\n\
    \  }\n  if ($number >= 50) {\n    $roman .= 'L';\n    $number -= 50;\n  }\n  if\
    \ ($number >= 40) {\n    $roman .= 'XL';\n    $number -= 40;\n  }\n  if ($number\
    \ >= 10) {\n    $roman .= 'X';\n    $number -= 10;\n  }\n  if ($number >= 9) {\n\
    \    $roman .= 'IX';\n    $number -= 9;\n  }\n  if ($number >= 5) {\n    $roman\
    \ .= 'V';\n    $number -= 5;\n  }\n  if ($number >= 4) {\n    $roman .= 'IV';\n\
    \    $number -= 4;\n  }\n  if ($number >= 1) {\n    $roman .= 'I';\n    $number\
    \ -= 1;\n  }\n\n  return $roman;\n}\n</code>\n<|/ a tags=php,math dscore=5 |>\n\
    <| a tags=php,math |>\n<code>\n<?php\n    function miniRoman($num) {\n       \
    \ $roman = '';\n        while ($num >= 1000) {\n            $roman .= 'M';\n \
    \           $num -= 1000;\n        }\n        while ($num >= 900) {\n        \
    \    $roman .= 'CM';\n            $num -= 900;\n        }\n        while ($num\
    \ >= 500) {\n            $roman .= 'D';\n            $num -= 500;\n        }\n\
    \        while ($num >= 400) {\n            $roman .= 'CD';\n            $num\
    \ -= 400;\n        }\n        while ($num >= 100) {\n            $roman .= 'C';\n\
    \            $num -= 100;\n        }\n        while ($num >= 90) {\n         \
    \   $roman .= 'XC';\n            $num -= 90;\n        }\n        while ($num >=\
    \ 50) {\n            $roman .= 'L';\n            $num -= 50;\n        }\n    \
    \    while ($num >= ", "\t$roman = '';\n\tdo {\n\t\t$lastChar = $number % 10;\n\
    \t\t$roman = ($lastChar * 1000) + $roman;\n\t\t$number = floor($number / 10);\n\
    \t\t$number = ($number > 0) ? $number : 1;\n\t} while ($number > 0);\n\n\tfor\
    \ ($i = 0; $i < strlen($roman); $i++) {\n\t\t$roman = substr($roman, 0, $i) +\
    \ chr(ord($roman[$i]) - 1);\n\t}\n\n\t$roman = strtolower($roman);\n\treturn $roman;\n\
    }\n", "    $roman = array('M' => 1000, 'CM' => 900, 'D' => 500, 'CD' => 400,\n\
    \            'C' => 100, 'XC' => 90,\n            'L' => 50, 'XL' => 40,\n   \
    \         'X' => 10, 'IX' => 9,\n            'V' => 5, 'IV' => 4,\n          \
    \  'I' => 1, 'IV' => 4,\n            'N' => 1, 'II' => 1);\n    $roman = array_flip($roman);\n\
    \    $result = '';\n    foreach (str_split($number, 1) as $number => $letter)\
    \ {\n        if (isset($roman[$letter])) {\n            $result .= $letter;\n\
    \        } else {\n            $result .= $letter;\n            if ($number %\
    \ 10 !== 1) {\n                $result .= 'v';\n            }\n        }\n   \
    \ }\n    return strtolower($result);\n}\n", "  $roman = '';\n  $last_digit = floor($number\
    \ / 10) * 10;\n  $number      = $number % 10;\n\n  if ($number > 0) {\n    $roman\
    \ .= int_to_mini_roman($last_digit);\n  }\n\n  $roman .= array_search($number,\
    \ range(10, 100));\n\n  return $roman;\n}\n", "  return int_to_roman($number);\n\
    }", "  $roman = '';\n  while (true) {\n    if ($number >= 1000) {\n      $roman\
    \ .= 'M';\n      $number -= 1000;\n    }\n    if ($number >= 900) {\n      $roman\
    \ .= 'CM';\n      $number -= 900;\n    }\n    if ($number >= 500) {\n      $roman\
    \ .= 'D';\n      $number -= 500;\n    }\n    if ($number >= 400) {\n      $roman\
    \ .= 'CD';\n      $number -= 400;\n    }\n    if ($number >= 100) {\n      $roman\
    \ .= 'C';\n      $number -= 100;\n    }\n    if ($number >= 90) {\n      $roman\
    \ .= 'XC';\n      $number -= 90;\n    }\n    if ($number >= 50) {\n      $roman\
    \ .= 'L';\n      $number -= 50;\n    }\n    if ($number >= 40) {\n      $roman\
    \ .= 'XL';\n      $number -= 40;\n    }\n    if ($number >= 10) {\n      $roman\
    \ .= 'X';\n      $number -= 10;\n    }\n    if ($number >= 9) {\n      $roman\
    \ .= 'IX';\n      $number -= 9;\n    }\n    if ($number >= 5) {\n      $roman\
    \ .= 'V';\n      $number -= 5;\n    }\n    if ($number >= 4) {\n      $roman .=\
    \ 'IV';\n      $number -= 4;\n    }\n    if ($number >= 1) {\n      $roman .=\
    \ $number;\n      break;\n    }\n    $roman .= 'I';\n  }\n  return strtolower($roman);\n\
    }\n", "  if ($number < 1 || $number > 1000)\n    return \"\";\n  if ($number ==\
    \ 1)\n    return \"$number\";\n  $roman = \"\";\n  while ($number > 0) {\n   \
    \ $roman .= roman_to_mini_roman($number % 10);\n    $number /= 10;\n  }\n  return\
    \ strtolower($roman);\n}\n", "  $mini_roman = '';\n  while ($number >= 1000) {\n\
    \    $mini_roman .= int_to_mini_roman($number % 1000);\n    $number -= $number\
    \ % 1000;\n  }\n  $mini_roman .= int_to_mini_roman($number);\n  return strtolower($mini_roman);\n\
    }\n", "  $roman = '';\n  while (1000 < $number) {\n    $roman .= 'm';\n    $number\
    \ -= 1000;\n  }\n  while (100 < $number) {\n    $roman .= 'c';\n    $number -=\
    \ 100;\n  }\n  while (10 < $number) {\n    $roman .= 'l';\n    $number -= 10;\n\
    \  }\n  $roman .= 'x';\n  $number -= 1;\n  while ($number >= 1) {\n    $roman\
    \ .= 'v';\n    $number -= 1;\n  }\n  return strtolower($roman);\n}\n", "  $roman\
    \ = '';\n  while ($number >= 1000) {\n    $roman .= int_to_roman($number % 1000);\n\
    \    $number /= 1000;\n  }\n  return int_to_roman($number).$roman;\n}\n", "  if\
    \ ($number < 1 || $number > 1000) {\n    return FALSE;\n  }\n  $int_str = '';\n\
    \  while ($number >= 1000) {\n    $int_str .= $number % 1000;\n    $number /=\
    \ 1000;\n  }\n  return $int_str . $number;\n}\n", "  if ($number < 1 || $number\
    \ > 1000) return false;\n  $result = \"\";\n  while (1) {\n    if ($number >=\
    \ 1000) {\n      $result += int_to_mini_roman($number / 1000) * 1000;\n      $number\
    \ %= 1000;\n    } else {\n      $result += $number % 10;\n      if ($number >\
    \ 9) {\n        $result += (int_to_mini_roman($number / 10) % 10);\n      }\n\
    \      break;\n    }\n  }\n  return $result + chr(ord(\"I\") + $number - 1);\n\
    }\n", "  if ($number == 0 || $number == 1)\n    return 'i';\n  if ($number ==\
    \ 2 || $number == 3 || $number == 4 || $number == 5 || $number == 6)\n    return\
    \ 'i';\n  if ($number == 7)\n    return 'ix';\n  if ($number == 8)\n    return\
    \ 'v';\n  if ($number == 9)\n    return 'iv';\n  if ($number == 10)\n    return\
    \ 'i';\n  if ($number == 11)\n    return 'ii';\n  if ($number == 12)\n    return\
    \ 'iii';\n  if ($number == 13)\n    return 'iv';\n  if ($number == 14)\n    return\
    \ 'v';\n  if ($number == 15)\n    return 'vi';\n  if ($number == 16)\n    return\
    \ 'vii';\n  if ($number == 17)\n    return 'ix';\n  if ($number == 18)\n    return\
    \ 'x';\n  if ($number == 19)\n    return 'x';\n  if ($number == 20)\n    return\
    \ 'l';\n  if ($number == 21)\n    return 'l';\n  if ($number == 22)\n    return\
    \ 'm';\n  if ($number == 23)\n    return 'm';\n  if ($number == 24)\n    return\
    \ 'mm';\n  if ($number == 25)\n    return 'cm';\n  if ($number == 26)\n    return\
    \ 'c';\n  if ($number == 27)\n    return 'o';\n  if ($number == 28)\n    return\
    \ 'k';\n  if ($number == 29)\n    return 'k';\n  if ($number == 30)\n    return\
    \ 'k';\n  if ($number == 31)\n    return 'k';\n  if ($number == 32)\n    return\
    \ 'a';\n  if ($number == 33)\n    return 'aa';\n  if ($number == 34)\n    return\
    \ 'aa';\n  if ($number == 35)\n    return 'aaa';\n  if ($number == 36)\n    return\
    \ 'aaaa';\n  if ($number == 37)\n    return 'aaaaa';\n  if ($number == 38)\n \
    \   return 'aaaaaa';\n  if ($number == 39)\n    return 'aaaaaaa';\n  if ($number\
    \ == 40)\n    return 'aaaaaaaa';\n  if ($number == 41)\n    return 'aaaaaaaaa';\n\
    \  if ($number == 42)\n    return 'aaaaaaaaaa';\n  if ($number == 43)\n    return\
    \ 'aaaaaaaaaaa';\n  if ($number == 44)\n    return 'aaaaaaaaaaaa';\n  if ($number\
    \ == 45)\n    return 'aaaaaaaaaaaaa';\n  if ($number == 46)\n    return 'aaaaaaaaaaaaaa';\n\
    \  if ($number == 47)\n    return 'aaaaaaaaaaaaaaa';\n  if ($number == 48)\n \
    \   return 'aaaaaaaaaaaaaaaa';\n  if ($number == 49)\n", "\t$roman = '';\n\tif\
    \ ($number < 0 || $number > 999) {\n\t\treturn $roman;\n\t}\n\telse if ($number\
    \ < 3999) {\n\t\t$roman = 'x';\n\t\t$number %= 100;\n\t}\n\telse if ($number <\
    \ 5999) {\n\t\t$roman = 'l';\n\t\t$number %= 1000;\n\t}\n\telse if ($number <\
    \ 9999) {\n\t\t$roman = 'c';\n\t\t$number %= 1000;\n\t}\n\telse if ($number <\
    \ 15000) {\n\t\t$roman = 'd';\n\t\t$number %= 1000;\n\t}\n\telse if ($number <\
    \ 200000) {\n\t\t$roman = 'm';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 300000) {\n\t\t$roman = 'r';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 400000) {\n\t\t$roman = 'f';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 500000) {\n\t\t$roman = 'v';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 600000) {\n\t\t$roman = 'x';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 700000) {\n\t\t$roman = 'c';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 800000) {\n\t\t$roman = 'v';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 900000) {\n\t\t$roman = 'l';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 1000000) {\n\t\t$roman = 'm';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 1100000) {\n\t\t$roman = 'd';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 1200000) {\n\t\t$roman = 'h';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 1300000) {\n\t\t$roman = 'j';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 1400000) {\n\t\t$roman = 'q';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 1500000) {\n\t\t$roman = 'x';\n\t\t$number %= 1000;\n\t}\n\telse if ($number\
    \ < 1600000) {\n\t\t$roman = 's';\n\t\t$number %= 1000;\n\t}\n\t", "    $roman\
    \ = '';\n    for($counter = 1; $number >= 1000 && $counter < 1000; $counter++)\
    \ {\n        $roman .= 'M';\n        $number = ($number - $counter * 1000) % ($counter\
    \ + 1);\n    }\n    for($counter = 1; $number >= 100 && $counter < 100; $counter++)\
    \ {\n        $roman .= 'CM';\n        $number = ($number - $counter * 100) % ($counter\
    \ + 1);\n    }\n    for($counter = 1; $number >= 10 && $counter < 10; $counter++)\
    \ {\n        $roman .= 'D';\n        $number = ($number - $counter * 10) % ($counter\
    \ + 1);\n    }\n    for($counter = 1; $number >= 1 && $counter < 1; $counter++)\
    \ {\n        $roman .= 'C';\n        $number = ($number - $counter) % ($counter\
    \ + 1);\n    }\n    $roman .= $number;\n\n    return strtolower($roman);\n}\n",
  "    if ($number <= 0) { return false; }\n\n    static $lookup = array(\n      \
    \  1=> 'i', 1=> 'ii', 1=> 'iii', 2=> 'v', 2=> 'vi', 3=> 'vii', 3=> 'viii', 4=>\
    \ 'i',\n        4=> 'ii', 5=> 'iii', 6=> 'iiii', 7=> 'iv', 8=> 'vi', 8=> 'vii',\
    \ 9=> 'viii',\n        9=> 'i', 10=> 'ii', 11=> 'iii', 12=> 'iiii', 13=> 'iv',\
    \ 14=> 'vi', 15=> 'vii',\n        15=> 'viii', 16=> 'i', 17=> 'ii', 18=> 'iii',\
    \ 19=> 'iiii', 20=> 'iv', 21=> 'vi',\n        22=> 'vii', 23=> 'viii', 24=> 'i',\
    \ 25=> 'ii', 26=> 'iii', 27=> 'iiii', 28=> 'iv',\n        29=> 'vi', 30=> 'vii',\
    \ 31=> 'viii', 32=> 'i', 33=> 'ii', 34=> 'iii', 35=> 'iiii',\n        36=> 'iv',\
    \ 37=> 'vi', 38=> 'vii', 39=> 'viii', 40=> 'i', 41=> 'ii', 42=> 'iii',\n     \
    \   43=> 'iiii', 44=> 'iv', 45=> 'vi', 46=> 'vii', 47=> 'viii', 48=> 'i', 49=>\
    \ 'ii',\n        50=> 'iii', 51=> 'iiii', 52=> 'iv', 53=> 'vi', 54=> 'vii', 55=>\
    \ 'viii', 56=> 'i',\n        57=> 'ii', 58=> 'iii', 59=> 'iiii', 60=> 'iv', 61=>\
    \ 'vi', 62=> 'vii', 63=> 'viii',\n        64=> 'i', 65=> 'ii', 66=> 'iii', 67=>\
    \ 'iiii', 68=> 'iv', 69=> 'vi', 70=> 'vii',\n        71=> 'viii', 72=> 'i', 73=>\
    \ 'ii', 74=> 'iii', 75=> 'iiii', 76=> 'iv', 77=> 'vi',\n        78=> 'vii', 79=>\
    \ 'viii', 80=> 'i', 81=> 'ii', 82=> 'iii', 83=> 'iiii', 84=> 'iv',\n        85=>\
    \ 'vi', 86=> 'vii', 87=> 'viii', 88=> 'i', 89=> 'ii', 90=> 'iii', 91=> 'iiii',\n\
    \        92=> 'iv', 93=> 'vi', 94=> 'vii', 95=> 'viii', 96=> 'i', 97=> 'ii', 98=>\
    \ 'ii", "    $result = '';\n    // Start from the largest unit that is still smaller\
    \ than the given $number.\n    $unit = $number / 10;\n    $counter = 0;\n    while\
    \ ($unit > 0) {\n        // Add one to $counter and divide by 10 until the unit\
    \ remains.\n        $counter++;\n        $unit -= $number % 10;\n        $result\
    \ = substr($mini_roman, $counter, 1) . $result;\n    }\n    // Add one to the\
    \ largest unit in the range that is larger than the given $number.\n    $unit\
    \ += $number % 10;\n    $result .= substr($mini_roman, $counter, 1) . substr($mini_roman,\
    \ $unit);\n    return strtolower($result);\n}\n", "  $roman = '';\n  while ($number\
    \ > 0) {\n    $remainder = $number % 10;\n    $roman .= $remainder >= 4 ? chr($remainder\
    \ + 0x66) : chr($remainder + 0x90);\n    $number = floor($number / 10);\n  }\n\
    \  return strtolower($roman);\n}\n", "  if ($number < 1 || $number > 1000) {\n\
    \    return false;\n  }\n  if ($number < 3999) {\n    $roman = \"m\";\n  } elseif\
    \ ($number < 5000) {\n    $roman = \"cm\";\n  } elseif ($number < 8000) {\n  \
    \  $roman = \"d\";\n  } elseif ($number < 10000) {\n    $roman = \"cd\";\n  }\
    \ elseif ($number < 11000) {\n    $roman = \"cc\";\n  } elseif ($number < 12000)\
    \ {\n    $roman = \"xc\";\n  } elseif ($number < 13000) {\n    $roman = \"ix\"\
    ;\n  } elseif ($number < 14000) {\n    $roman = \"v\";\n  } elseif ($number <\
    \ 15000) {\n    $roman = \"vi\";\n  } elseif ($number < 16000) {\n    $roman =\
    \ \"i\";\n  } elseif ($number < 17000) {\n    $roman = \"i\";\n  } elseif ($number\
    \ < 18000) {\n    $roman = \"i\";\n  } elseif ($number < 19000) {\n    $roman\
    \ = \"i\";\n  } elseif ($number < 20000) {\n    $roman = \"i\";\n  } elseif ($number\
    \ < 21000) {\n    $roman = \"i\";\n  } elseif ($number < 22000) {\n    $roman\
    \ = \"i\";\n  } elseif ($number < 23000) {\n    $roman = \"i\";\n  } elseif ($number\
    \ < 24000) {\n    $roman = \"i\";\n  } elseif ($number < 25000) {\n    $roman\
    \ = \"i\";\n  } elseif ($number < 26000) {\n    $roman = \"i\";\n  } elseif ($number\
    \ < 27000) {\n    $roman = \"i\";\n  } elseif ($number < 28000) {\n    $roman\
    \ = \"i\";\n  } elseif ($number < 29000) {\n    $roman = \"i\";\n  } elseif ($number\
    \ < 30000) {\n    $roman = \"i\";\n  } elseif ($number < 31000) {\n    $roman\
    \ = \"i\";\n  } elseif ($number < 32000) {\n    $roman = \"i\";\n  } elseif ($number\
    \ < 33000) {\n    $roman = \"i\";\n  } elseif ($number < 34000) {\n    $roman\
    \ = \"i\";\n  } elseif ($number < 35000) {\n    $roman = \"i\";\n  } elseif ($number\
    \ < 36000) {\n", "  $roman = '';\n  // Set $i to 2 initially and increment it\
    \ by 2 for each iteration as we go\n  // through the loop\n  for ($i = 1; $i <=\
    \ $number; $i++) {\n    // Keep incrementing the $roman string until it fills\
    \ 4 characters or less.\n    // Every time we loop, we check if $roman already\
    \ has 4 characters\n    // or less, and if it does not, then add 'i' to the beginning\
    \ of the string.\n    if (strlen($roman) < 4) {\n      $roman .= 'i';\n    }\n\
    \    // Now concatenate 'ii' to the beginning of the string, thereby making\n\
    \    // $roman have a length of 5\n    $roman .= 'ii';\n  }\n  return strtolower($roman);\n\
    }\n", "    if ($number < 1 || $number > 1000) {\n        return 'err';\n    }\n\
    \n    $roman = '';\n    do {\n        $remainder = $number % 10;\n        $number\
    \  /= 10;\n        $roman .= $remainders[$remainder];\n    } while ($number >\
    \ 0);\n\n    return $roman;\n}\n", "    // Trim off any decimal point or minus\
    \ sign\n    $number = trim($number, \" - \");\n    $result = \"\";\n\n    // Convert\
    \ number into an array of single digits\n    $array = str_split($number);\n\n\
    \    // Loop through array of single digits\n    foreach($array as $value) {\n\
    \        // Check if current single digit is greater or equal to 5\n        if($value\
    \ >= 5) {\n            // Multiply current single digit by 5\n            $value\
    \ = $value * 5;\n            // Add next single digit to result\n            $result\
    \ = $result . $this->roman_numeral($value);\n        } else {\n            //\
    \ Add current single digit to result\n            $result = $result . $this->roman_numeral($value);\n\
    \        }\n    }\n\n    // Convert the result back into a string\n    return\
    \ strtolower($result);\n}\n</code>\nAnd finally, a full program that demonstrates\
    \ this functionality:\n<code>\n<?php\nclass RomanNumbers\n{\n    private $roman_numerals\
    \ = array(\n        \"\",\n        \"i\",\n        \"ii\",\n        \"iii\",\n\
    \        \"iv\",\n        \"v\",\n        \"vi\",\n        \"vii\",\n        \"\
    viii\",\n        \"ix\",\n        \"x\",\n        \"xi\",\n        \"xii\",\n\
    \        \"xiii\",\n        \"xiv\",\n        \"xv\",\n        \"xvi\",\n    \
    \    \"xvii\",\n        \"xviii\",\n        \"xix\",\n        \"xx\",\n      \
    \  \"xxi\",\n        \"xxii\",\n        \"xxiii\",\n        \"xxiv\",\n      \
    \  \"xxv\",\n        \"xxvi\",\n        \"xxvii\",\n        \"xxviii\",\n    \
    \    \"xxix\",\n        \"xxx\",\n        \"xxxi\",\n        \"xxxi\",\n     \
    \   \"xxxii\",\n        \"xxxiv\",\n        \"xxxv\",\n        \"xxxvi\",\n  \
    \      \"xxxvii\",\n        \"xxxviii\",\n        \"xxxix\",\n        \"xxxx\"\
    ,\n        \"xxxxi\",\n        \"xxxxii\",\n        \"xxxxiii\",\n        \"xxxxiv\"\
    ,\n        \"xxxxv\",\n        \"xxxxvi\",\n        \"xxxxvii\",\n        \"xxxxviii\"\
    ,\n        \"xxxxix\",\n        \"xxxxx\",\n        \"xxxxxi\",\n        \"xxxxxii\"\
    ,\n        \"xxxxxiii\",\n        \"xxxxxiv\",\n        \"xxxxxv\",\n        \"\
    xxxxxvi\",\n        \"xxxxxvii\",\n        \"xxxxxviii\",\n        \"xxxxxix\"\
    ,\n        \"xxxxxx\",\n        \"xxxxxxi\",\n        \"xxxxxxii\",\n        \"",
  "  $roman = '';\n\n  for ($i = 4; $i >= 0; $i--) {\n    $mini_rm = $number % 10;\n\
    \    $mini_rm *= 1000;\n    $roman .= int_to_roman($mini_rm);\n    $number -=\
    \ $mini_rm;\n  }\n\n  return $roman;\n}\n", "\t$roman = \"\";\n\t$last = \"\"\
    ;\n\t$exponent = 0;\n\t$numeral = 1;\n\twhile($numeral) {\n\t\t$last = \"\";\n\
    \t\twhile($numeral) {\n\t\t\t$numeral *= 10;\n\t\t\t$last = substr($numeral, -5);\n\
    \t\t\t$numeral = substr($numeral, 0, -5);\n\t\t}\n\t\t$roman .= $last;\n\t\tif($exponent\
    \ > 0)\n\t\t\t$roman .= pow(10, $exponent);\n\t\t$exponent++;\n\t}\n\treturn mb_strtolower($roman);\n\
    }", "  $roman = '';\n  while (100 * $number >= 100) {\n    $roman .= int_to_roman($number\
    \ / 100);\n    $number %= 100;\n  }\n  $roman .= int_to_roman($number);\n  return\
    \ $roman;\n}\n", "  $numerals = array(\n    array('','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    '),\n    array('','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307'),\n    array('','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    '),\n    array('','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307'),\n    array('','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    '),\n    array('','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307'),\n    array('','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    '),\n    array('','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307'),\n    array('','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    '),\n    array('','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307','i\u0307\
    ','i\u0307','i\u0307','i\u0307','i\u0307'),\n    array('','i\u0307','i\u0307','i\u0307\
    ','", "  if ($number < 1 || $number > 1000) {\n    return '';\n  }\n  // Limit\
    \ number at 1000 since it's so commonly used\n  $number = ($number > 1000) ? 1000\
    \ : $number;\n\n  // Initialize the array to hold the roman (string) representation\n\
    \  $roman = array('', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX');\n\
    \n  // Initialize the array to hold the remainder\n  $remainder = array('');\n\
    \n  // Loop through all the digits in the number\n  for ($i = 0; $i < $number;\
    \ $i++) {\n    // Get the remainder after dividing by 10 and mod it by 10\n  \
    \  $remainder[] = ($number % 10) % 10;\n\n    // Remove the last digit of the\
    \ number since it's been used\n    $number = floor($number / 10);\n  }\n\n  //\
    \ Convert the remainder array into its roman equivalent string\n  $roman = array_merge($roman,\
    \ $remainder);\n\n  // Return the roman equivalent string\n  return $roman;\n\
    }\n", "    // Round to the nearest multiple of 30 and return the resulting string\n\
    \    return int_to_mini_roman_helper($number, 30);\n}\n", "    $roman_num = '';\n\
    \    for ($i = 0; $i < 5; $i++) {\n        $numeral = $number % 10;\n        $roman_num\
    \ .= $numerals[$numeral];\n        $number = floor($number/10);\n    }\n    return\
    \ strrev($roman_num);\n}\n", "  if ($number < 1 || $number > 1000) {\n    return\
    \ \"\";\n  }\n\n  $roman = \"\";\n\n  for ($i = 1; $i <= 3; $i++) {\n    if ($number\
    \ >= (pow(10, $i))) {\n      $roman = str_pad($roman, strlen($roman) + 1, 0, STR_PAD_RIGHT);\n\
    \      $number = floor($number / pow(10, $i));\n    }\n  }\n\n  return $roman\
    \ . $number;\n}\n", "    $roman = '';\n    while ($number > 1000) {\n        $roman\
    \ .= 'M';\n        $number -= 1000;\n    }\n    while ($number > 100) {\n    \
    \    $roman .= 'C';\n        $number -= 100;\n    }\n    while ($number > 10)\
    \ {\n        $roman .= 'L';\n        $number -= 10;\n    }\n    while ($number\
    \ > 0) {\n        $roman .= 'X';\n        $number -= 1;\n    }\n    return $roman;\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a |>\n<code>", "  $roman = '';\n  for ($i =\
    \ 0; $i < $number; $i++) {\n    $roman .= roman_to_int($i);\n  }\n  return strtolower($roman);\n\
    }\n", "  $roman = '';\n  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return mb_strtolower($roman);\n}\n", "\t$roman = '';\n\tfor ($i = strlen($number);\
    \ $i > 0; $i--) {\n\t\t$roman .= roman_to_mini($number%10);\n\t\t$number = floor($number/10);\n\
    \t}\n\treturn $roman;\n}\n", "  $int_part = floor(abs($number));\n  $roman = '';\n\
    \  do {\n    $roman .= $number >= abs($int_part) ? 'V' : 'IV';\n    $number =\
    \ abs($number) - $int_part;\n    $int_part = floor(abs($number));\n  } while ($int_part\
    \ != 0);\n  return $roman;\n}\n", "  $roman = '';\n\n  for ($i = 0; $i < intval($number\
    \ / 1000); $i++) {\n    $roman .= 'M';\n  }\n\n  for ($i = 0; $i < intval($number\
    \ / 100); $i++) {\n    $roman .= 'D';\n  }\n\n  for ($i = 0; $i < intval($number\
    \ / 10); $i++) {\n    $roman .= 'C';\n  }\n\n  $roman .= intval($number % 10);\n\
    \n  return strtolower($roman);\n}\n", "    $roman = '';\n    $num = $number;\n\
    \    do {\n        $digit = $num % 10;\n        $roman .= str_repeat('M', $digit);\n\
    \        $num -= $digit;\n    } while ($num > 0);\n    return strtolower($roman);\n\
    }\n", "    $roman = '';\n    $number = abs($number);\n    if ($number < 0 || $number\
    \ > 1000) {\n        return '?';\n    }\n\n    while (true) {\n        if ($number\
    \ >= 1000) {\n            $roman .= 'M';\n            $number -= 1000;\n     \
    \   } elseif ($number >= 900) {\n            $roman .= 'CM';\n            $number\
    \ -= 900;\n        } elseif ($number >= 500) {\n            $roman .= 'D';\n \
    \           $number -= 500;\n        } elseif ($number >= 400) {\n           \
    \ $roman .= 'CD';\n            $number -= 400;\n        } elseif ($number >= 100)\
    \ {\n            $roman .= 'C';\n            $number -= 100;\n        } elseif\
    \ ($number >= 90) {\n            $roman .= 'XC';\n            $number -= 90;\n\
    \        } elseif ($number >= 50) {\n            $roman .= 'L';\n            $number\
    \ -= 50;\n        } elseif ($number >= 40) {\n            $roman .= 'XL';\n  \
    \          $number -= 40;\n        } elseif ($number >= 10) {\n            $roman\
    \ .= 'X';\n            $number -= 10;\n        } elseif ($number >= 9) {\n   \
    \         $roman .= 'IX';\n            $number -= 9;\n        } elseif ($number\
    \ >= 5) {\n            $roman .= 'V';\n            $number -= 5;\n        } elseif\
    \ ($number >= 4) {\n            $roman .= 'IV';\n            $number -= 4;\n \
    \       } elseif ($number >= 1) {\n            $roman .= 'I';\n            $number\
    \ -= 1;\n        } else {\n            break;\n        }\n    }\n\n    return\
    \ strtolower($roman);\n}\n", "  $number = (int) $number;\n  if ($number < 1 ||\
    \ $number > 3999) {\n    throw new InvalidArgumentException('number must be between\
    \ 1 and 3999');\n  }\n  // Add 'i' suffix for any number that ends with 3 or more\
    \ 0's (5 or more\n  // 0's would be left out).\n  $roman_number = '';\n  while\
    \ ($number >= 1000) {\n    $number -= 1000;\n    $roman_number .= 'm';\n  }\n\
    \  while ($number >= 500) {\n    $number -= 500;\n    $roman_number .= 'c';\n\
    \  }\n  while ($number >= 100) {\n    $number -= 100;\n    $roman_number .= 'l';\n\
    \  }\n  while ($number >= 50) {\n    $number -= 50;\n    $roman_number .= 'x';\n\
    \  }\n  while ($number >= 10) {\n    $number -= 10;\n    $roman_number .= 'v';\n\
    \  }\n  while ($number >= 5) {\n    $number -= 5;\n    $roman_number .= 'i';\n\
    \  }\n  return $roman_number . str_pad($number, 3, '0', STR_PAD_LEFT);\n}\n\n\
    /**\n * Return a roman numeral from a positive integer in lowercase roman numeral\n\
    \ * form.\n * Example:\n * >>> mini_to_int( 'XVI' ) == 19\n * True\n * >>> mini_to_int(\
    \ 'CLV' ) == 152\n * True\n * >>> mini_to_int( 'CCLVII' ) == 4286\n * True\n *\
    \ >>> mini_to_int( 'MCMXCIV' ) == 2412\n * True\n * >>> mini_to_int( 'III' ) ==\
    \ 1\n * True\n * >>> mini_to_int( 'VI' ) == 5\n * True\n * >>> mini_to_int( 'IV'\
    \ ) == 10\n * True\n * >>> mini_to_int( 'I' ) == 100\n * True\n * >>> mini_to_int(\
    \ '' ) == null\n * True\n * >>> mini_to_int( 'XXX' ) == null\n * False\n * >>>\
    \ mini_to_int( 'XXX' ) == 1\n * False\n * @param $mini_numeral\n * @return int|null\n\
    \ */", "  if (!is_numeric($number)) {\n    throw new Exception('$number must be\
    \ numeric');\n  }\n\n  if ($number <= 0 || $number >= 1000) {\n    throw new Exception('$number\
    \ must be greater than 0 and less than 1000');\n  }\n\n  // http://en.wikipedia.org/wiki/Roman_numerals#Numbering_systems\n\
    \  $roman = [\n    '',\n    'C',\n    'CC',\n    'CCC',\n    'CD',\n    'D',\n\
    \    'DC',\n    'DCC',\n    'DCCC',\n    'CM',\n  ];\n\n  // Get array of digits\
    \ (without leading zeros).\n  $digits = str_split(ltrim(strval($number), '.'));\n\
    \n  // Get array of individual letters in order of decreasing magnitude.\n  $letters\
    \ = array_reduce($digits, function($carry, $digit) {\n    return array_merge($carry,\
    \ str_split(strtoupper($digit)));\n  }, []);\n\n  // Sort letters in order of\
    \ decreasing magnitude.\n  usort($letters, function($a, $b) {\n    return strlen($b)\
    \ - strlen($a);\n  });\n\n  // Convert to roman numeral.\n  return implode('',\
    \ array_shift($letters)) . implode('', $letters);\n}\n", "    if ($number < 1\
    \ || $number > 3999) {\n        return false;\n    }\n    $result = '';\n    while\
    \ ($number >= 1000) {\n        $roman =  intval($number / 1000) + 1000;\n    \
    \    $remainder = $number - $roman * 1000;\n        $result = $roman_to_mini_roman($roman)\
    \ . $result;\n        $number = $remainder;\n    }\n    $result = $roman_to_mini_roman($number)\
    \ . $result;\n    return $result;\n}\n", "    $roman = '';\n    $num = abs($number);\n\
    \    $negative = $num < 0;\n    if ($negative) {\n        $num = -$num;\n    \
    \    $roman = '-';\n    }\n    $ints = str_split($num);\n    $intLength = count($ints);\n\
    \    if ($intLength > 3) {\n        $intLength = $intLength - 1;\n    }\n    for\
    \ ($i = 0; $i < $intLength; $i++) {\n        $roman = ($ints[$i] > 0 ? str_pad($ints[$i]\
    \ + $roman, 3, '0', STR_PAD_LEFT) : $roman);\n    }\n    if ($num > 0) {\n   \
    \     $roman = $roman . 'i';\n    } else {\n        $roman = $roman . 'm';\n \
    \   }\n    return $negative\n        ? '-' . trim($roman, '-')\n        . int_to_mini_roman_digit(abs($number\
    \ % 100));\n}\n", "    if ($number < 1 || $number > 1000) return \"\";\n\n   \
    \ $result = '';\n    while (0 < $number) {\n        $remainder = $number % 10;\n\
    \        $number = floor($number / 10);\n        $result .= MiniRoman::roman[$remainder];\n\
    \    }\n    return mb_strtolower($result);\n}\n", "\tif ($number < 1 || $number\
    \ > 1000) {\n\t\treturn false;\n\t}\n\t$roman = '';\n\tfor ($i = 1; $i <= $number;\
    \ $i++) {\n\t\t$roman .= roman_numeral($i);\n\t}\n\treturn mb_strtolower($roman,\
    \ 'UTF-8');\n}\n", "  if (!is_numeric($number)) {\n    throw new Exception('number\
    \ not numeric');\n  }\n\n  if (!in_array($number, range(1,1000))) {\n    throw\
    \ new Exception('number not within valid range');\n  }\n\n  // Create an array\
    \ containing each of McD, MeD, or McC in the correct order\n  $numerals = array('M','CM','D','CD','C','XC','L','XL','X','IX','V','IV','I');\n\
    \  $roman = '';\n  for ($i=0;$i<strlen($numerals);$i++) {\n    $nlen = strlen($numerals[$i]);\n\
    \    if ($i < $number && $number >= $nlen) {\n      $roman .= $numerals[$i];\n\
    \    } else if ($number == $nlen) {\n      // This is not a full roman, but a\
    \ full roman (McD, McC, etc.)\n      // If the next value is a McD, MeD, or McC,\
    \ we need to adjust the\n      // last one to match the previous roman\n     \
    \ if ($i+1 < strlen($numerals) && $numerals[$i+1] == 'M') {\n        $roman =\
    \ substr($roman, -1) + ($numerals[$i] == $numerals[$i+1] ? $numerals[$i] : $numerals[$i+1]);\n\
    \      }\n      // If the next value is an XcD, XeD, or XcC, we need to adjust\
    \ the\n      // last one to match the previous roman\n      if ($i+2 < strlen($numerals)\
    \ && $numerals[$i+2] == 'X') {\n        $roman = substr($roman, -1) + ($numerals[$i]\
    \ == $numerals[$i+2] ? $numerals[$i] : $numerals[$i+2]);\n      }\n      // Otherwise,\
    \ the value is an McXC, a full roman\n      else {\n        $roman .= $numerals[$i];\n\
    \      }\n    }\n  }\n\n  return strtolower($roman);\n}\n", "  if ($number < 1\
    \ || $number > 1000) {\n    throw new InvalidArgumentException(\n      sprintf('Integer\
    \ should be between 1 and 1000 but got %d.', $number)\n    );\n  }\n  $romans\
    \ = array(\n    array(1000, 'M'), array(900, 'CM'), array(500, 'D'), array(400,\
    \ 'CD'),\n    array(100, 'C'), array(90, 'XC'), array(50, 'L'), array(40, 'XL'),\n\
    \    array(10, 'X'), array(9, 'IX'), array(5, 'V'), array(4, 'IV'), array(1,\n\
    \      'I')\n  );\n  $roman = '';\n  $negative = false;\n  if ($number < 0) {\n\
    \    $negative = true;\n    $number = -$number;\n  }\n  foreach ($romans as $roman)\
    \ {\n    if ($roman[0] > $number) {\n      return $negative ? array_shift($roman)\
    \ : array_shift(array_pop($roman));\n    }\n  }\n  throw new InvalidArgumentException(\n\
    \    sprintf('Input number %d is too large for specified roman numeral.', $number)\n\
    \  );\n}\n", "\t$roman = '';\n\t$num = $number;\n\t$i = 1;\n\twhile ($num > 0)\
    \ {\n\t\t$lastDigit = intval($num % 10);\n\t\t$roman .= $digits[$lastDigit];\n\
    \t\t$num -= $lastDigit;\n\t\t$i++;\n\t}\n\treturn strtolower($roman);\n}\n", " \
    \   $int_str = dechex($number);\n    $output = $int_str[0];\n    for ($i = 1;\
    \ $i < strlen($int_str); $i++) {\n        $output .= $int_str[$i] . $int_str[($i\
    \ + 1)];\n    }\n    return $output;\n}\n", "  $roman = '';\n  while ($number\
    \ >= 1000) {\n    $roman .= intval($number / 1000).'M';\n    $number %= 1000;\n\
    \  }\n  $roman .= intval($number).'D';\n  return strtolower($roman);\n}\n", " \
    \   $roman = '';\n    $counter = 1;\n\n    while (counter <= $number) {\n    \
    \    $multiple = floor($number / $counter);\n        $roman = ($multiple == 1\
    \ ? $multiple : sprintf('%s%s', $roman, $multiple));\n        $number -= $counter\
    \ * $multiple;\n        $counter++;\n    }\n\n    return $roman;\n}\n", "    if\
    \ ($number < 1) {\n        trigger_error(\"Invalid number: $number\", E_USER_ERROR);\n\
    \    }\n\n    $roman = \"\";\n\n    do {\n        $roman = ($number % 1000) +\
    \ $roman;\n        $number = floor($number / 1000);\n    } while (!is_numeric($roman));\n\
    \n    $len = strlen($roman);\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($i > 0 && $roman[$i] == $roman[$i - 1]) {\n            $roman[$i] = $roman[$i\
    \ - 1];\n        }\n    }\n\n    return strtolower($roman);\n}\n", "\t$roman =\
    \ '';\n\n\twhile (true) {\n\t\t$remainder = $number % 10;\n\t\t$number = floor($number\
    \ / 10);\n\t\t$roman .= str_repeat('M', $remainder);\n\t}\n\n\treturn strtolower($roman);\n\
    }\n", "  $arr = [\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD'\
    \ => 400,\n    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n\
    \    'X' => 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4\n  ];\n\n  if ($number\
    \ < 1 || $number > 1000) {\n    return '';\n  }\n\n  $roman_arr = array();\n \
    \ foreach ($arr as $roman => $num) {\n    while ($number >= $num) {\n      $roman\
    \ .= 'M';\n      $number -= $num;\n    }\n    $roman .= 'M';\n    $roman_arr[]\
    \ = $roman;\n  }\n  return implode('', $roman_arr);\n}\n", "    $roman = '';\n\
    \    $number *= 1000;\n    $negative = ($number < 0);\n    if ($number <= 999)\
    \ {\n        $roman = $negative ? '-' : '+';\n        $number -= 1000;\n    }\n\
    \    if ($number <= 999999) {\n        $roman .= 'M';\n        $number -= 1000000;\n\
    \    }\n    if ($number <= 9999999) {\n        $roman .= 'CM';\n        $number\
    \ -= 100000000;\n    }\n    if ($number <= 99999999) {\n        $roman .= 'D';\n\
    \        $number -= 100000000;\n    }\n    if ($number <= 999999999) {\n     \
    \   $roman .= 'CD';\n        $number -= 1000000000;\n    }\n    if ($number <=\
    \ 99999999999) {\n        $roman .= 'C';\n        $number -= 1000000000;\n   \
    \ }\n    if ($number <= 9999999999999) {\n        $roman .= 'XC';\n        $number\
    \ -= 1000000000000;\n    }\n    if ($number <= 999999999999999) {\n        $roman\
    \ .= 'L';\n        $number -= 1000000000000;\n    }\n    if ($number <= 999999999999999999)\
    \ {\n        $roman .= 'XL';\n        $number -= 10000000000000000;\n    }\n \
    \   if ($number <= 99999999999999999) {\n        $roman .= 'X';\n        $number\
    \ -= 10000000000000000;\n    }\n    if ($number <= 9999999999999999999) {\n  \
    \      $roman .= 'IX';\n        $number -= 1000000000000000000;\n    }\n    if\
    \ ($number <= 999999999999999999999) {\n        $roman .= 'V';\n        $number\
    \ -= 1000000000000000000;\n    }\n    if ($number <= 99999999999999999) {\n  \
    \      $roman .= 'IV';\n        $number -= 100000000000000000000;\n    }\n   \
    \ if ($number <= 999999999999999999999) {\n        $roman .= 'I';\n        $number\
    \ -= 100000000000000000000;\n    }\n    return $roman;\n}\n", "    $roman = '';\n\
    \    $values = [];\n    // Iterate from highest to lowest\n    for ($number =\
    \ $number; $number >= 1; $number -= 1) {\n        $roman = $roman . 'x';\n   \
    \     $values[] = 'M'; // M=1000\n        if ($number % 10 !== 0) {\n        \
    \    $roman = $roman . $number % 10;\n            $values[] = 'C'; // C=100\n\
    \        }\n        if ($number % 100 !== 0) {\n            $roman = $roman .\
    \ $number % 100;\n            $values[] = 'D'; // D=10\n        }\n        if\
    \ ($number % 1000 !== 0) {\n            $roman = $roman . $number % 1000;\n  \
    \          $values[] = 'L'; // L=1\n        }\n    }\n    return $roman;\n}\n",
  "    if ($number < 1 || $number > 1000)\n        return null;\n\n    $roman = '';\n\
    \    $num = $number;\n    while ($num > 0) {\n        $roman .= $romnum[$num %\
    \ 10];\n        $num = $num / 10;\n    }\n\n    return strtolower($roman);\n}\n",
  "  // Make sure $number is in range 1..999\n  if (!is_numeric($number) || $number\
    \ < 1 || $number > 999) {\n    return false;\n  }\n\n  // Convert $number to an\
    \ array\n  $roman = array(\n    array(1000, 'M'), // 1000\n    array(900, 'CM'),\
    \ // 900\n    array(500, 'D'), // 500\n    array(400, 'CD'), // 400\n    array(100,\
    \ 'C'), // 100\n    array(90, 'XC'), // 90\n    array(50, 'L'), // 50\n    array(40,\
    \ 'XL'), // 40\n    array(10, 'X'), // 10\n    array(9, 'IX'), // 9\n    array(5,\
    \ 'V'), // 5\n    array(4, 'IV'), // 4\n    array(1, 'I'), // 1\n  );\n\n  //\
    \ Reverse array so highest value comes first\n  array_reverse($roman);\n\n  //\
    \ Convert integer value to roman numeral\n  $roman = '';\n  foreach ($roman as\
    \ $roman => $arabic) {\n    if ($number >= $arabic[0]) {\n      // Add roman numeral\
    \ equivalent of $number to roman\n      $roman .= $arabic[1];\n    }\n  }\n\n\
    \  // Return lowercase roman numeral\n  return strtolower($roman);\n}\n", "  \
    \  $roman = '';\n    while (true) {\n        $remainder = $number % 1000; // the\
    \ modulo operator\n        if ($remainder === 0) {\n            // number divisible\
    \ by 1000, done.\n            break;\n        }\n        $number = $remainder;\
    \ // remaining digits\n        $roman .= roman_numerals[$number];\n    }\n   \
    \ return $roman;\n}\n", "\t$roman_numeral = array();\n\tif ($number < 1 || $number\
    \ > 1000) {\n\t\treturn $roman_numeral;\n\t}\n\n\tdo {\n\t\t$last_digit = $number\
    \ % 10;\n\t\t$number = floor($number / 10);\n\t\t$roman_numeral[$last_digit] =\
    \ $last_digit;\n\t} while ($number > 0);\n\n\t$roman_numeral = array_reverse($roman_numeral);\n\
    \t$roman_numeral[0] = array_shift($roman_numeral);\n\t$roman_numeral = array_reverse($roman_numeral);\n\
    \n\t$mini_roman = '';\n\tforeach ($roman_numeral as $roman => $index) {\n\t\t\
    $mini_roman .= $roman;\n\t\tif ($index !== $roman) {\n\t\t\t$mini_roman .= $index;\n\
    \t\t}\n\t}\n\n\t$mini_roman = strtolower($mini_roman);\n\n\treturn $mini_roman;\n\
    }\n", "  if (!is_int($number)) {\n    throw new InvalidArgumentException();\n\
    \  }\n  if ($number < 1 || $number > 1000) {\n    throw new InvalidArgumentException();\n\
    \  }\n\n  // Limit our input value to sane values.\n  $mini_roman = '';\n  do\
    \ {\n    // Generate the next character.\n    $mini_roman .= roman($number);\n\
    \n    // Advance our number to the next larger number.\n    $number = floor($number\
    \ / 10);\n  } while ($number > 0);\n\n  // Return the result.\n  return mb_strtolower($mini_roman);\n\
    }\n", "    // assert($number >= 1 && $number <= 1000);\n    if ($number < 1) {\n\
    \        return '';\n    }\n    $roman = '';\n    $roman_length = 1;\n    while\
    \ ($number >= 1000) {\n        $number /= 1000;\n        $roman_length++;\n  \
    \  }\n    while ($number >= 100) {\n        $roman .= $roman_length;\n       \
    \ $number -= 100;\n        $roman_length++;\n    }\n    while ($number >= 10)\
    \ {\n        $roman .= $roman_length;\n        $number -= 10;\n        $roman_length++;\n\
    \    }\n    while ($number >= 1) {\n        $roman .= $roman_length;\n       \
    \ $number -= 1;\n        $roman_length++;\n    }\n    return $roman;\n}\n", " \
    \ $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman_numerals($i);\n\
    \  }\n  return strtolower($roman);\n}\n", "  // Write your code here\n  $roman\
    \ = 'I';\n  if ($number == 1)\n    return $roman;\n  if ($number > 1 && $number\
    \ <= 4)\n    $roman = 'V';\n  if ($number > 4 && $number <= 9)\n    $roman = 'X';\n\
    \  if ($number > 9)\n    $roman = 'C';\n  return $roman;\n}\n", "  // Limit input\
    \ to ensure it doesn't go above the limit, and also\n  // to ensure it is not\
    \ a float or an integer.\n  $number = intval($number);\n  if ($number <= 0 ||\
    \ $number > 1000) {\n    return null;\n  }\n\n  // Initialize the array to store\
    \ the results in.\n  $roman = array();\n\n  // Initialize a count of the numerals.\n\
    \  $count = 1;\n\n  // Loop through each digit in the input number and push it\
    \ to the\n  // array if the current number is divisible by the current numeral.\n\
    \  while ($number >= 10) {\n    $roman[] = $digits[$number % 10];\n    $number\
    \ -= $digits[$number % 10];\n    $count++;\n  }\n\n  // Push the remainder onto\
    \ the array.\n  $roman[] = $digits[$number];\n\n  // Loop through this last array\
    \ and push each value to the resulting\n  // array if that value is different\
    \ than the previous value.\n  for ($i = 0; $i < count($roman); $i++) {\n    if\
    \ ($roman[$i] != $roman[$i - 1]) {\n      $roman[$i] = $count;\n    }\n  }\n\n\
    \  // If the resulting array is empty, return the string \"Invalid input.\"\n\
    \  if (empty($roman)) {\n    return \"Invalid input.\";\n  }\n\n  // Otherwise,\
    \ the array is valid and can be returned.\n  return implode('', $roman);\n}\n\
    </code>\n<|/ a tags=numbers,php,math,algorithm |>\n<| c |>\nThis fails with any\
    \ number over `1000`, e.g. `int_to_mini_roman(1001)` returns `C` instead of `MCMXCIV`.\n\
    <|/ c |>\n<| a tags=numbers,php,math,algorithm dscore=3 |>\nBased on solution\
    \ I made a class that can easily be called from anywhere. Just copy the class\
    \ and then use it as such\n<code>\necho roman_to_int(34); // prints 23\n</code>\n\
    The class can be found here: https://gist.github.com/leonardo-mercado/1459589\n\
    It works on any numbers, from 0 up to 9999999.\n<|/ a |>\n<| c |>\nThe link to\
    \ leonardo-mercado's GitHub gists seems to be broken (it redirects to leonardo-mercado's\
    \ website)\n<|/ c |>\n<| a tags=numbers,php,math,algorithm |>\nYou might want\
    \ to take a look at the \"Roman to Integer\" article on Wikipedia:\n\nThe Roman\
    \ numeral system (Roman ", "  $roman = '';\n\n  // Get numeral characters only\
    \ (no spaces, no punctuation).\n  $numerals = str_split($number);\n\n  // Iterate\
    \ over numerals and collect numerals, skipping over any that are\n  // single\
    \ digits and do not yet have a roman numeral.\n  foreach ($numerals as $numeral)\
    \ {\n    // Check if current numeral is a single digit.\n    if (intval($numeral)\
    \ == $numeral) {\n      // Ignore single digits.\n      $roman = substr($roman,\
    \ 0, -1);\n      continue;\n    }\n\n    // If current numeral is less than five,\
    \ add a zero.\n    if (intval($numeral) < 5) {\n      $roman = str_pad($roman,\
    \ 5, '0', STR_PAD_BOTH);\n    }\n  }\n\n  // Return roman numeral in lowercase.\n\
    \  return strtolower($roman);\n}\n</code>\n<|/ a dscore=2 tags=php,roman-numerals,math\
    \ |>\n<| c |>\nI upvoted this answer because it works for the examples the OP\
    \ gave, but I'm really looking for a solution that is more general and less restrictive\
    \ than just 'five'.  That is why I gave the general answer, and then gave some\
    \ more specific hints as to how you can apply it to your use case.\n<|/ c |>\n\
    <| a dscore=2 |>\nI've used a dictionary to convert from int to roman numeral.\
    \ \nThe algorithm is simple:\n\nIterate through the integer in reverse order (so\
    \ 53 would become 5000)\nMultiply the integer by 1000 until the value does not\
    \ change\nAdd the result to the current roman numeral\nIf the next value is greater\
    \ than 5, subtract 5 from the current\nThe last roman numeral will be the final\
    \ result\n\nHere is an example implementation of a function for the integer 53\
    \ using an associative array:\n<code>", "  if ($number < 1 || $number > 1000)\
    \ throw new Exception('Invalid argument');\n  if ($number < 900) return 'C';\n\
    \  if ($number < 9000) return 'D';\n  if ($number < 90000) return 'M';\n  if ($number\
    \ < 900000) return 'Q';\n  if ($number < 9000000) return 'K';\n  if ($number <\
    \ 10000000) return 'B';\n  if ($number < 1000000000) return 'T';\n  if ($number\
    \ < 1000000000000) return 'P';\n  if ($number < 1000000000000000) return 'L';\n\
    \  if ($number < 1000000000000000000) return 'I'; // L'\n}\n", "  $roman = '';\n\
    \  $keys = [\n    // C, D, X\n    1000, 900, 500, 400,\n    100, 90, 50, 40,\n\
    \    10, 9, 5,\n    1, 2, 3\n  ];\n  $roman_values = [\n    // 1000:'M',\n   \
    \ 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX',\
    \ 5:'V', 4:'IV', 1:'I', 2:'II', 3:'III'\n  ];\n  $num = $number;\n  do {\n   \
    \ if ($num < 0) {\n      break;\n    }\n    $rem = $num % 10;\n    $roman .= $keys[$rem];\n\
    \    $num = ($num - $rem) / 10;\n  } while ($num > 0);\n  return $roman_values[$roman];\n\
    }\n", "    $roman = \"\";\n    $n = $number;\n    while (true) {\n        $remainder\
    \ = $n % 10;\n        if ($remainder == 0) {\n            $roman .= $remainder;\n\
    \            break;\n        } else {\n            $roman .= $remainder;\n   \
    \         $n = ($n - $remainder) / 10;\n        }\n    }\n    return mb_strtolower($roman);\n\
    }\n</code>\n<|/ a tags=php,function,loops |>\n<| a tags=php,function,loops |>\n\
    Just thought I'd share what I've got.  I was trying to do this exact thing for\
    \ a while...\n<code>\n$myNumber = \"789\";\n$myNumber = str_pad($myNumber, 4,\
    \ \"0\", STR_PAD_LEFT);\n$myNumber = \"0\".$myNumber;\n\n$myRoman = \"\";\n$myRoman\
    \ = str_split($myNumber);\n\nfor ($i=0; $i < count($myRoman); $i++)\n{\n    if\
    \ ($i % 2 == 0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 3 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 5 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 7 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 11 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 13 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 17 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 19 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 21 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 23 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 29 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 37 ==0)\n    {\n        $myRoman .= \"$myRoman[$i]\";\n    }\n    else\
    \ if ($i % 43 ==", "    // Sanitize input\n    $number = intval($number);\n  \
    \  $minval = 1000;\n    if ($number < $minval) return false;\n    $result = '';\n\
    \    while (0 < $number) {\n        if ($number >= $minval) {\n            $result\
    \ .= 'M';\n            $number -= $minval;\n        }\n        if ($number >=\
    \ 5000) {\n            $result .= 'CM';\n            $number -= 5000;\n      \
    \  }\n        if ($number >= 4000) {\n            $result .= 'D';\n          \
    \  $number -= 4000;\n        }\n        if ($number >= 3000) {\n            $result\
    \ .= 'CD';\n            $number -= 3000;\n        }\n        if ($number >= 2000)\
    \ {\n            $result .= 'C';\n            $number -= 2000;\n        }\n  \
    \      if ($number >= 1000) {\n            $result .= 'XC';\n            $number\
    \ -= 1000;\n        }\n        if ($number >= 500) {\n            $result .= 'L';\n\
    \            $number -= 500;\n        }\n        if ($number >= 400) {\n     \
    \       $result .= 'XL';\n            $number -= 400;\n        }\n        if ($number\
    \ >= 300) {\n            $result .= 'X';\n            $number -= 300;\n      \
    \  }\n        if ($number >= 200) {\n            $result .= 'IX';\n          \
    \  $number -= 200;\n        }\n        if ($number >= 100) {\n            $result\
    \ .= 'V';\n            $number -= 100;\n        }\n        if ($number >= 50)\
    \ {\n            $result .= 'IV';\n            $number -= 50;\n        }\n   \
    \     if ($number >= 40) {\n            $result .= 'I';\n            $number -=\
    \ 40;\n        }\n        if ($number >= 30) {\n            $result .= 'II';\n\
    \            $number -= 30;\n        }\n        if ($number >= 20) {\n       \
    \     $result .= 'III';\n            $number -= 20;\n        }\n        if ($number\
    \ >= 10) {\n            $result .= 'IV';\n            $number -= 10;\n       \
    \ }\n        if ($number >= 5) {\n            $result .= 'I';\n            $number\
    \ -= 5;\n        }\n        if ($number >= 4) {\n            $result .= 'II';\n\
    \            $number -= 4;\n        }\n        if ($number >= 3) {\n         \
    \   $result .= 'III';\n            $number -= 3;\n        }\n        if ($number\
    \ >= 2) {\n            $result .= 'IIII';\n            $number -= 2;\n       \
    \ }\n        if ($number >= 1) {\n            $result .= 'IV';\n            $number\
    \ -= 1;\n        }\n    }\n    return $result;\n}\n", "    $roman = '';\n\n  \
    \  // Iterate through the number from largest to smallest to calculate\n    //\
    \ the roman numeral equivalent of it.\n    for ($i = $number; $i >= 1; $i -= 1000)\
    \ {\n        list($next, $tens, $tens2) = str_split($i, 3);\n\n        // Multiply\
    \ the numerals.\n        $roman .= $tens2 . int_to_mini_roman($tens).'i';\n  \
    \  }\n\n    // Return the roman numeral equivalent of the number as a string.\n\
    \    return strtolower($roman);\n}\n</code>\n<|/ a tags=php,roman |>\n<| a tags=php,roman\
    \ dscore=4 |>\n<code>\n<?php", "  if ($number < 1 || $number > 1000) return false;\n\
    \  $roman = array('', array(\n    'M' => 1000, 'CM' => 900, 'D' => 500, 'CD' =>\
    \ 400, 'C' => 100, 'XC' => 90,\n    'L' => 50, 'XL' => 40, 'X' => 10, 'IX' =>\
    \ 9, 'V' => 5, 'IV' => 4, 'I' => 1,\n  ));\n  foreach ($roman as $roman => $count)\
    \ {\n    $int = $number;\n    while ($int >= $count) {\n      $int /= $count;\n\
    \      $roman .= $roman;\n    }\n  }\n  return strtolower($roman);\n}\n", "  $rom\
    \ = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $rom .= int_to_mini_roman_digit($number\
    \ % $i, $i, true);\n  }\n  return $rom;\n}\n", "    $roman = '';\n    for ($i\
    \ = 1; $i <= 100; $i++) {\n        $c = $number % $i;\n        $roman = roman_numeral($c)\
    \ . roman_numeral($i - $c) . $roman;\n        $number = floor($number / $i);\n\
    \    }\n    return $roman;\n}\n", "    if ($number > 1000 || $number < 1) {\n\
    \        throw new Exception(\"Bad $number: must be between 1 and 1000.\");\n\
    \    }\n\n    $mini_roman = '';\n    while ($number > 0) {\n        $remainder\
    \ = $number % 10;\n        $mini_roman .= $remainders[$remainder];\n        $number\
    \ /= 10;\n    }\n\n    return $mini_roman;\n}\n", "  $roman = '';\n  while (true)\
    \ {\n    if ($number >= 1000) {\n      return $roman;\n    }\n    // Limit $number\
    \ >= 10^3\n    // $number -= 10^3;\n    $roman .= mini_roman_to_word($number %\
    \ 100);\n    $number /= 100;\n  }\n}\n", "  $roman = '';\n  while (true) {\n \
    \   if ($number < 4000) {\n      $roman = $roman . 'M';\n      $number = $number\
    \ / 1000;\n    } else {\n      $roman = $roman . 'CM';\n      $number = $number\
    \ / 10000;\n    }\n    if ($number < 1000) {\n      $roman = $roman . 'D';\n \
    \     $number = $number / 100;\n    } else {\n      $roman = $roman . 'CD';\n\
    \      $number = $number / 10000;\n    }\n    if ($number < 100) {\n      $roman\
    \ = $roman . 'C';\n      $number = $number / 10;\n    } else {\n      $roman =\
    \ $roman . 'XC';\n      $number = $number / 100;\n    }\n    if ($number < 10)\
    \ {\n      $roman = $roman . 'L';\n      $number = $number / 1;\n    } else {\n\
    \      $roman = $roman . 'XL';\n      $number = $number / 10;\n    }\n    if ($number\
    \ == 0) {\n      break;\n    }\n  }\n  return strtolower($roman);\n}\n\n/**\n\
    \ * Given a decimal, return its decimal equivalent as a string.\n * Example: 0.45\
    \ returns \"x\"\n *\n * Restrictions:\n *   - decimal has only two digits precision\n\
    \ *   - decimal does not have a leading \"0\"\n *   - decimal can only represent\
    \ 0.45 <= x <= 0.46\n *   - decimal cannot represent 0.5 < x <= 5.5\n *   - decimal\
    \ cannot represent 0.55 < x <= 5.55\n *\n * Examples:\n * >>> decimal_to_decimal('1')\
    \ === 0.01\n * True\n * >>> decimal_to_decimal('2') === 0.02\n * True\n * >>>\
    \ decimal_to_decimal('3') === 0.03\n * True\n * >>> decimal_to_decimal('4') ===\
    \ 0.04\n * True\n * >>> decimal_to_decimal('5') === 0.05\n * True\n * >>> decimal_to_decimal('6')\
    \ === 0.06\n * True\n * >>> decimal_to_decimal('7') === 0.07\n * True\n * >>>\
    \ decimal_to_decimal('8') === 0.08\n * True\n * >>> decimal_to_decimal('9') ===\
    \ 0.09\n * True\n * >>> decimal_to_decimal('10') === 0.10\n * True\n * >>> decimal_to_decimal('11')\
    \ === 0.11\n * True\n * >>> decimal_to_decimal('12') === 0.12\n * True\n * >>>\
    \ decimal_to_decimal('13') === 0.13\n * True\n * >>> decimal_to_decimal('14')\
    \ === 0.14\n * True", "\tfor ($i = 0; $i < 3; $i++) {\n\t\t$roman_numerals[$i]\
    \ = \"M\";\n\t}\n\tfor ($i = 3; $i >= 0; $i--) {\n\t\t$roman_numerals[$i] = \"\
    CM\";\n\t}\n\tfor ($i = 6; $i >= 3; $i--) {\n\t\t$roman_numerals[$i] = \"D\";\n\
    \t}\n\tfor ($i = 9; $i >= 6; $i--) {\n\t\t$roman_numerals[$i] = \"CD\";\n\t}\n\
    \tfor ($i = 12; $i >= 9; $i--) {\n\t\t$roman_numerals[$i] = \"C\";\n\t}\n\tfor\
    \ ($i = 15; $i >= 12; $i--) {\n\t\t$roman_numerals[$i] = \"XC\";\n\t}\n\tfor ($i\
    \ = 18; $i >= 15; $i--) {\n\t\t$roman_numerals[$i] = \"L\";\n\t}\n\tfor ($i =\
    \ 21; $i >= 18; $i--) {\n\t\t$roman_numerals[$i] = \"XL\";\n\t}\n\tfor ($i = 24;\
    \ $i >= 21; $i--) {\n\t\t$roman_numerals[$i] = \"X\";\n\t}\n\tfor ($i = 27; $i\
    \ >= 24; $i--) {\n\t\t$roman_numerals[$i] = \"IX\";\n\t}\n\tfor ($i = 30; $i >=\
    \ 27; $i--) {\n\t\t$roman_numerals[$i] = \"V\";\n\t}\n\tfor ($i = 39; $i >= 30;\
    \ $i--) {\n\t\t$roman_numerals[$i] = \"IV\";\n\t}\n\tfor ($i = 42; $i >= 39; $i--)\
    \ {\n\t\t$roman_numerals[$i] = \"I\";\n\t}\n\tfor ($i = 45; $i >= 42; $i--) {\n\
    \t\t$roman_numerals[$i] = \"VI\";\n\t}\n\tfor ($i = 48; $i >= 45; $i--) {\n\t\t\
    $roman_numerals[$i] = \"I\";\n\t}\n\tfor ($i = 51; $i >= 48; $i--) {\n\t\t$roman_numerals[$i]\
    \ = \"II\";\n\t}\n\tfor ($i = 54; $i >= 51; $i--) {\n\t\t$roman_numerals[$i] =\
    \ \"III\";\n\t}\n\tfor ($i = 57; $i >= 54; $i--) {\n\t\t$roman_numer", "  $roman\
    \ = '';\n\n  // See http://en.wikipedia.org/wiki/Roman_numerals#Numeral_system\
    \ for examples\n  while ($number >= 1000) {\n    // Fifty (or 40) repeated\n \
    \   $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 500) {\n  \
    \  // Fifty (or 40) repeated\n    $roman .= 'D';\n    $number -= 500;\n  }\n \
    \ while ($number >= 100) {\n    // Fifty (or 40) repeated\n    $roman .= 'C';\n\
    \    $number -= 100;\n  }\n  while ($number >= 50) {\n    // Fifty (or 40) repeated\n\
    \    $roman .= 'L';\n    $number -= 50;\n  }\n  while ($number >= 10) {\n    //\
    \ Fifty (or 10) repeated\n    $roman .= 'X';\n    $number -= 10;\n  }\n  while\
    \ ($number >= 5) {\n    // Fifty (or 5) repeated\n    $roman .= 'V';\n    $number\
    \ -= 5;\n  }\n  while ($number >= 1) {\n    // One (or 1) repeated\n    $roman\
    \ .= 'I';\n    $number -= 1;\n  }\n\n  // Add the leftover number\n  $roman .=\
    \ $number;\n\n  return $roman;\n}\n\n/**\n * Convert a number to its Roman Numeral\
    \ equivalent.\n *\n * @param int $number Number to convert.\n * @param int $skip_zero\
    \ If true, the zero is stripped from the end of the\n *   returned string. Otherwise\
    \ it is added automatically.\n *\n * @return string The converted number.\n */",
  "\tsort($number);\n\t$roman = '';\n\tfor ($i = count($number); $i > 0; $i--) {\n\
    \t\t$numeral = $number[$i - 1];\n\t\tif ($numeral >= 5) {\n\t\t\t$numeral -= 5;\n\
    \t\t\t$roman .= 'M';\n\t\t} elseif ($numeral >= 4) {\n\t\t\t$numeral -= 4;\n\t\
    \t\t$roman .= 'CM';\n\t\t} elseif ($numeral >= 3) {\n\t\t\t$numeral -= 3;\n\t\t\
    \t$roman .= 'D';\n\t\t} elseif ($numeral >= 2) {\n\t\t\t$numeral -= 2;\n\t\t\t\
    $roman .= 'CD';\n\t\t} elseif ($numeral >= 1) {\n\t\t\t$numeral -= 1;\n\t\t\t\
    $roman .= 'C';\n\t\t}\n\t}\n\treturn $roman;\n}", "  if (!$number) {\n    return\
    \ '';\n  }\n\n  $arr = [\n    'M'   => 1000,\n    'CM'  => 900,\n    'D'   =>\
    \ 500,\n    'CD'  => 400,\n    'C'   => 100,\n    'XC'  => 90,\n    'L'   => 50,\n\
    \    'XL'  => 40,\n    'X'   => 10,\n    'IX'  => 9,\n    'V'   => 5,\n    'IV'\
    \  => 4,\n    'I'   => 1,\n  ];\n\n  foreach ($arr as $roman => $value) {\n  \
    \  while (--$number >= $value) {\n      $numeral = strtoupper($roman);\n     \
    \ break;\n    }\n  }\n\n  return $numeral;\n}\n</code>\n<|/ a dscore=5 tags=php,numbers,letters,roman\
    \ |>\n<| c |>\nIt should be noted that for very large numbers the code may run\
    \ into an infinite loop. I've changed it to return a string and terminated it\
    \ when $number is zero.\n<|/ c |>\n<| c |>\nGood point. I'm currently using it\
    \ for years and haven't seen an infinite loop, but good to know to make it safer.\n\
    <|/ c |>\n<| c |>\nThe function does not return a valid roman numeral for non-integer\
    \ values. e.g. 195 returns XVII\n<|/ c |>\n<| c |>\n- I actually just noticed\
    \ this. I edited my answer before reading yours. Thanks!\n<|/ c |>\n<| c |>\n\
    What should we do to handle special characters? Should we replace them by an equivalent\
    \ char, or just drop them ?\n<|/ c |>\n<| a dscore=4 |>\nI used the following\
    \ function to convert an integer into a roman numeral (i.e. \"I\" for 3, \"IV\"\
    \ for 4).\n<code>", "    $roman =\n        array('M' => 'MM', 'CM' => 'CC', 'C'\
    \ => 'XC', 'X' => 'XL', 'L' => 'X',\n              'D' => 'CD', 'D' => 'D', 'CM'\
    \ => 'CM', 'M' => 'M');\n    $n = floor($number);\n    $r = strlen($roman) - 1;\n\
    \    return $roman[$n] . $roman[$r];\n}\n", "  $numeral_table = array();\n  foreach\
    \ (range(1, 1000) as $key => $value) {\n    $numeral_table[$value] = $key > 9\
    \ ? $key : chr($key + 55);\n  }\n\n  $result = '';\n  while ($number > 0) {\n\
    \    $result += $numeral_table[(int)($number % 10)];\n    $number = floor($number\
    \ / 10);\n  }\n  return $result == '' ? '0' : $result;\n}\n</code>\n<|/ a dscore=2\
    \ tags=php |>\n<| c |>\nI used this as a base and have added the code to create\
    \ the other 4 cases (diamonds, hearts, clubs, spades)\n<|/ c |>\n<| c |>\nI ended\
    \ up using this code. One thing that was not mentioned in the question is how\
    \ to get \"Straight Flush\" into the same list as the other 5 cases. I wrote a\
    \ function that will add the 'Straight Flush' case to the list with all other\
    \ 5 cases. I also added a comment about it at the end of this function. I also\
    \ added a variable called $straight_flush to show you where to add this variable.\n\
    <|/ c |>\n<| c |>\nI modified the code to have the straight flush case at the\
    \ bottom of the list. The $straight_flush variable will show you where to add\
    \ the 'Straight Flush' case to the list. Here is a link to the [php sandbox code](https://3v4l.org/5MpOG).\
    \ I only added the 'straight flush' case to the bottom because it is easier to\
    \ add and compare the cases in php code than a word document.\n<|/ c |>\n<| a\
    \ |>\nJust to help anyone looking for a similar solution, here is my solution\
    \ that works for me:\n<code>", "  $roman = '';\n\n  // Validate $number\n  if\
    \ ($number < 1 || $number > 1000) {\n    // TODO: throw exception\n  }\n\n  //\
    \ Convert $number to binary (base 2)\n  $binary = '';\n  while ($number > 0) {\n\
    \    $remainder = $number % 10;\n    $binary .= $remainder;\n    $number = floor($number\
    \ / 10);\n  }\n\n  // Starting from the left, insert each binary digit\n  while\
    \ ($binary > '') {\n    $numeral = $binary{0};\n    if ($numeral < 'I') {\n  \
    \    $roman .= $numeral;\n    } else if ($numeral < 'V') {\n      $roman .= 'IV';\n\
    \    } else if ($numeral < 'X') {\n      $roman .= 'IX';\n    } else if ($numeral\
    \ < 'L') {\n      $roman .= 'XL';\n    } else if ($numeral < 'C') {\n      $roman\
    \ .= 'XC';\n    } else if ($numeral < 'D') {\n      $roman .= 'CD';\n    } else\
    \ if ($numeral < 'M') {\n      $roman .= 'CM';\n    }\n    $binary = substr($binary,\
    \ 1);\n  }\n  return $roman;\n}", "\tlist($num, $mod) = get_roman_numeral_conversion_parameters($number);\n\
    \t$roman = '';\n\twhile ($num >= 100) {\n\t\t$roman .= get_roman_numeral_conversion($mod);\n\
    \t\t$num -= 100;\n\t\t$mod += 100;\n\t}\n\tif ($num > 0) {\n\t\t$roman .= get_roman_numeral_conversion($mod);\n\
    \t}\n\treturn strtolower($roman);\n}\n", "\tif ($number < 1) {\n\t\tthrow new\
    \ \\InvalidArgumentException('Invalid integer: ' . $number);\n\t}\n\n\tif ($number\
    \ > 1000) {\n\t\tthrow new \\InvalidArgumentException('Integer too large: ' .\
    \ $number);\n\t}\n\n\t$roman = '';\n\twhile (true) {\n\t\t$remainder = $number\
    \ % 10;\n\t\t$roman .= str_repeat('x', $remainder);\n\n\t\t$number = floor($number\
    \ / 10);\n\t\tif (!$number) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn mb_strtolower($roman);\n\
    }\n\n/**\n * Converts a number to a roman numeral.\n *\n * @param int $number\
    \ The number of a number to convert.\n *\n * @return string The number in romanized\
    \ form, or null if the number cannot be\n *              represented in roman\
    \ numerals.\n */", "  $roman = '';\n  $index = 0;\n  $num_string = '';\n  while\
    \ ($number > 0) {\n    $result = int_to_roman($number);\n    $num_string .= substr($result,\
    \ 0, 1);\n    $number -= $result{0};\n    $index++;\n  }\n  $result = int_to_roman($number);\n\
    \  $num_string .= substr($result, 0, 1);\n  return $num_string{0};\n}", "  if\
    \ ($number < 1 || $number > 1000) {\n    return '';\n  }\n\n  $numerals = array('M',\
    \  'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV',\n            \
    \        'I');\n  $result   = '';\n\n  // Special case for roman numerals < 1000\
    \ where we return \"I\" rather than \"II\".\n  // This makes sense because we\
    \ at least have something to do when the number\n  // is less than 1000, whereas\
    \ \"II\" seems like it would just cause confusion.\n  $digits = str_pad('', $number,\
    \ '0', STR_PAD_RIGHT);\n  if (substr($digits, 0, 1) == 'I') {\n    return str_pad('',\
    \ $number, 'I', STR_PAD_RIGHT);\n  }\n\n  foreach ($numerals as $numeral) {\n\
    \    $roman_value = floor($number / $numeral);\n    $result     .= $numeral;\n\
    \    if ($roman_value == $number) {\n      break;\n    }\n    $result     .= $digits[$roman_value];\n\
    \    $number -= $roman_value;\n  }\n\n  return strtolower($result);\n}\n\n/**\n\
    \ * Maps an integer to a roman numeral character equivalent as a string. Useful\n\
    \ * for preparing a list of roman numerals for display. Not all roman numerals\n\
    \ * are actually used in some applications.\n *\n * Restrictions: 1 <= num <=\
    \ 1000\n *\n * @param int $number\n *\n * @return string\n */", "  $roman_map\
    \ = [\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1,\n  ];\n  $result\
    \ = '';\n  foreach (str_split($number) as $char) {\n    if (isset($roman_map[$char]))\
    \ {\n      $result += $char;\n      $result *= $roman_map[$char];\n    } else\
    \ {\n      continue;\n    }\n  }\n  return $result;\n}\n", "  $result = \"\";\n\
    \  while (true) {\n    $remainder = $number % 10;\n    $result = $roman[$remainder]\
    \ . $result;\n    if ($number >= 1000 && $number < 1000000) {\n      $result =\
    \ $roman[$number % 100] . $result;\n      $number = floor($number / 100);\n  \
    \  } else {\n      break;\n    }\n  }\n  return $result;\n}\n", "    if ($number\
    \ < 1 || $number > 1000)\n        return '';\n    $roman_numerals = array(\n \
    \       100  => 'M', // 100s\n        500  => 'D', // 500s\n        1000  => 'C',\
    \ // 1M\n        50000 => 'D', // 0.5M\n        100000 => 'C', // 10M\n      \
    \  1000000 => 'L', // 100M\n        5000000 => 'C', // 500M\n        10000000\
    \ => 'X', // 1G\n        50000000 => 'C', // 5G\n        100000000 => 'C', //\
    \ 10G\n        500000000 => 'L', // 500G\n        1000000000 => 'X', // 1T\n \
    \       5000000000 => 'C', // 5T\n        10000000000 => 'C', // 10T\n       \
    \ 50000000000 => 'L', // 500T\n        100000000000 => 'X', // 1P\n        500000000000\
    \ => 'C', // 5P\n        1000000000000 => 'C', // 10P\n        5000000000000 =>\
    \ 'L', // 500P\n        10000000000000 => 'X', // 1E\n        50000000000000 =>\
    \ 'C', // 5E\n        100000000000000 => 'C', // 10E\n        500000000000000\
    \ => 'L', // 500E\n        1000000000000000 => 'X', // 1E\n        5000000000000000\
    \ => 'C', // 5E\n        1000000000000000000 => 'C', // 10E\n        50000000000000000\
    \ => 'L', // 500E\n        10000000000000000000 => 'X', // 1E\n    );\n    foreach\
    \ ($roman_numerals as $roman => $letter) {\n        if ($number >= $roman) {\n\
    \            $result = ($roman - $number);\n            $result = $roman_numerals[$roman][$result];\n\
    \            return $result;\n        }\n    }\n}\n", "  if (!is_numeric($number)\
    \ || intval($number) != $number || $number < 1 || !is_int($number)) {\n    return\
    \ FALSE;\n  }\n  if ($number < 1000) {\n    return $number;\n  }\n  $roman = '';\n\
    \  $num   = intval($number);\n  for ($i = 0; $num > 0; $i++) {\n    $roman .=\
    \ $chars[$num % 100];\n    $num   = int($num / 100);\n  }\n  return $roman;\n}",
  "  $roman = '';\n  $base    = array('', 'c', 'x');\n  $numerals = array(1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n  foreach($numerals as $numeral)\
    \ {\n    if ($number >= $numeral) {\n      $roman .= $base[$numeral];\n      $number\
    \ = $number - $numeral;\n    }\n  }\n  return $roman;\n}", "  if ($number < 0\
    \ || $number > 1000) {\n    return false;\n  }\n  if ($number == 0) {\n    return\
    \ 'i';\n  }\n  $roman = '';\n  $negative = false;\n  if ($number < 0) {\n    $negative\
    \ = true;\n    $number = -$number;\n  }\n  while ($number > 0) {\n    $remainder\
    \ = $number % 10;\n    $roman .= str_repeat('x', $remainder);\n    $number -=\
    \ $remainder;\n  }\n  return $negative ? '-' : ''\n    .implode('', str_split($roman,\
    \ 1))\n    ;\n}\n", "    $roman = '';\n    $num = $number;\n    $max_int = mb_strlen($num,\
    \ 'UTF-8');\n    while ($num > 0) {\n        $roman_digits = roman($num);\n  \
    \      list($num, $last_digit) = explode('.', $roman_digits);\n        $roman\
    \ .= $last_digit;\n    }\n    return mb_strtolower($roman, 'UTF-8');\n}\n", " \
    \ $result = '';\n  $num_int = intval($number);\n  if ($num_int == 0) {\n    $result\
    \ = 'zero';\n  }\n  else if ($num_int > 0 && $num_int <= 400) {\n    $result =\
    \ 'i';\n  }\n  else if ($num_int >= 500 && $num_int <= 999) {\n    if ($num_int\
    \ % 100 == 0) {\n      $result = 'v';\n    }\n    else {\n      $result = 'vi';\n\
    \    }\n  }\n  else if ($num_int >= 1000 && $num_int <= 4999) {\n    if ($num_int\
    \ % 1000 == 0) {\n      $result = 'vii';\n    }\n    else {\n      $result = 'viii';\n\
    \    }\n  }\n  else if ($num_int >= 5000 && $num_int <= 9999) {\n    if ($num_int\
    \ % 10000 == 0) {\n      $result = 'ix';\n    }\n    else {\n      $result = 'xii';\n\
    \    }\n  }\n  else if ($num_int >= 10000 && $num_int <= 19999) {\n    if ($num_int\
    \ % 100000 == 0) {\n      $result = 'l';\n    }\n    else {\n      $result = 'li';\n\
    \    }\n  }\n  else if ($num_int >= 20000 && $num_int <= 49999) {\n    if ($num_int\
    \ % 1000000 == 0) {\n      $result = 'l';\n    }\n    else {\n      $result =\
    \ 'li';\n    }\n  }\n  else if ($num_int >= 50000 && $num_int <= 999999) {\n \
    \   if ($num_int % 1000000 == 0) {\n      $result = 'l';\n    }\n    else {\n\
    \      $result = 'li';\n    }\n  }\n  else if ($num_int >= 1000000 && $num_int\
    \ <= 1999999) {\n    if ($num_int % 100000 == 0) {\n      $result = 'l';\n   \
    \ }\n    else {\n      $result = 'li';\n    }\n  }\n  else if ($num_int >= 200000\
    \ && $num_int <= 4999999) {\n    if ($num_int % 1000000 == 0) {\n      $result\
    \ = 'l';\n    }\n    else {\n      $result = 'li';\n    }\n  }\n  else if ($num_int\
    \ >= 500000 && $num_int <= 9999999) {\n    if ($num_int % 100000 == 0) {\n   \
    \   $result = 'l';\n    }\n    else {\n      $result = 'li';\n    }\n  }\n  else\
    \ if ($num_int >= 10000000 && $num_int <= 199999999) {\n    if ($num_int % 100000\
    \ == 0) {\n      $result = 'l';\n    }\n    else {\n      $result = 'li';\n  \
    \  }\n  }\n  else if ($num_int >= 20000000 && $num_int <= 4999999999) {\n    if\
    \ ($", "  $number = intval($number);\n  $bases = [1, 2, 5, 10, 20, 40, 50, 100,\
    \ 200, 500, 1000];\n  if ($number < 1 || $number > 1000) {\n    return null;\n\
    \  }\n\n  $str = '';\n  $roman_number = $number / 1000;\n  $temp = $roman_number;\n\
    \  for ($i = 1; $i <= 6; $i++) {\n    $temp -= $bases[$i] * $roman_number;\n \
    \   if ($temp <= 0) {\n      break;\n    }\n    $str .= $bases[$i];\n  }\n\n \
    \ // If there are any left over digits, add them to the string\n  $str .= str_pad(base_convert($roman_number,\
    \ 10, 2), 3, '0', STR_PAD_LEFT);\n\n  return $str;\n}\n", "  static $conversions\
    \ = array();\n  if (!isset($conversions[$number])) {\n    // Generate the conversions\
    \ table on-demand, outside of int_to_roman().\n    for ($i = 2; $i < 1000; ++$i)\
    \ {\n      $digit = $number % $i;\n      $roman =\n        ($digit > 4 ? array('M',\
    \ 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'XV', 'IX', 'V')\n          : (($digit\
    \ > 3) ? array('C', 'D', 'XC', 'L', 'XL', 'XV', 'IX', 'V')\n            : (($digit\
    \ > 2) ? array('M', 'D', 'C', 'D', 'XC', 'L', 'XL', 'XV', 'IX', 'V')\n       \
    \       : array('M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'XV', 'IX', 'V'))))[$digit];\n\
    \      $conversions[$number][$i] = $roman;\n    }\n  }\n  return $conversions[$number][$number\
    \ < 1000 ? 0 : 1];\n}\n", "  $roman = '';\n  for ($i = 0; $i < $number / 10; $i++)\
    \ {\n    $roman .= $mini_roman[$i];\n  }\n  $number = $number % 10;\n  for ($i\
    \ = 0; $i < $number; $i++) {\n    $roman .= $mini_roman[$i];\n  }\n  return $roman;\n\
    }\n", "  $int_length = strlen($number);\n  if ($int_length < 1) {\n    return\
    \ '';\n  }\n  $roman = '';\n  for ($i = 1; $i < $int_length; $i++) {\n    // If\
    \ the given number has a large enough power of $i, round it up\n    // to the\
    \ nearest multiple of it.\n    if (($number / $i) % 1 == 0) {\n      $number =\
    \ floor($number / $i) * $i;\n    }\n    $roman .= $i;\n  }\n  return $roman;\n\
    }\n</code>\n<|/ a tags=php,numbers,roman |>\n<| a dscore=2 |>\nI wrote this PHP\
    \ Script which converts numbers to Roman Numbers. Hope it helps someone else.\n\
    <code>\n<?php\n$numbers_array = array('0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',\
    \ '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33',\
    \ '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46',\
    \ '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59',\
    \ '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72',\
    \ '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85',\
    \ '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98',\
    \ '99', '100');\n$roman_numbers = array('I', 'II', 'III', 'IV', 'V', 'VI', 'VII',\
    \ 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII',\
    \ 'XIX', 'XX', 'XXI', 'XXII', 'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII',\
    \ 'XXIX', 'XXX', 'XXXI', 'XXXII', 'XXXIII', 'XXXIV', 'XXXV', 'XXXVI', 'XXXVII',\
    \ 'XXXVIII', 'XXXIX', 'XXI', 'XXII', 'XXIII', 'XXIIII', 'XXIV', 'XXV', 'XXVI',\
    \ 'XXVII', 'XXVIII', 'XXIX', 'XXX', 'XXXI', 'XXXII', 'XXXIII', 'XXXIV', 'XXXV',\
    \ 'XXXV", "    // Extract the remainder after the decimal place (which is 0 or\
    \ 1)\n    $rest = $number % 1000;\n\n    // If we have no remainder, just return\
    \ an empty string\n    if ($rest == 0) {\n        return '';\n    }\n\n    //\
    \ Otherwise, keep working our way up through the 1000-ish range checks\n    //\
    \ and use those values to make up the numeral\n    $numeral = '';\n\n    do {\n\
    \        // Extract the last 3 digits\n        $last_3_digits = $number % 1000;\n\
    \n        // If we have 3 digits, use them\n        if ($last_3_digits == 0) {\n\
    \            $numeral .= $last_3_digits;\n\n        // Otherwise, add a new set\
    \ of 3 digits\n        } else {\n            $numeral .= int_to_roman($last_3_digits);\n\
    \        }\n\n        // Subtract the 3 digits from the number we've worked up\n\
    \        $number = floor($number / 1000);\n    } while ($number > 0);\n\n    //\
    \ Reverse the numeral\n    return strrev($numeral);\n}\n", "  $roman = array();\n\
    \n  if ($number >= 1000) {\n    $roman = array_merge(\n        array_map(\n  \
    \          create_function('$x', 'return substr($x, 0, 1) . \"'\";'),\n      \
    \      array_slice(roman($number), 0, -3)),\n        array_map(\n            create_function('$x',\
    \ 'return substr($x, 1, 1) . \"'\";'),\n            array_slice(roman($number),\
    \ -2, -1))\n    );\n  } else {\n    $roman[] = array_reduce(\n        roman($number),\n\
    \        create_function('$x, $c', 'return $x . $c'),\n        array(''),\n  \
    \      ''\n    );\n  }\n\n  return implode('', $roman);\n}\n", "    $base = [\n\
    \        \"\",\n        \"i\",\n        \"ii\",\n        \"iii\",\n        \"\
    iv\",\n        \"v\",\n        \"vi\",\n        \"vii\",\n        \"viii\",\n\
    \        \"ix\",\n        \"x\",\n        \"xi\",\n        \"xii\",\n        \"\
    xiii\",\n        \"xiv\",\n        \"xv\",\n        \"xvi\",\n        \"xvii\"\
    ,\n        \"xviii\",\n        \"xix\",\n        \"xx\",\n        \"xxx\",\n \
    \       \"xxxx\",\n        \"xxxxx\",\n    ];\n\n    $numeral = \"\";\n    while\
    \ ($number > 0) {\n        $numeral .= $base[$number % 10];\n        $number =\
    \ floor($number / 10);\n    }\n\n    return $numeral;\n}\n", "    if ($number\
    \ > 1000 || $number < 1) {\n        return '';\n    }\n\n    $num = strval($number);\n\
    \    $str = '';\n    $str_len = 0;\n\n    $i = 0;\n    while ($num > 0) {\n  \
    \      // Calculate the next power of ten to make the current number\n       \
    \ $power = (int) (log10($num));\n\n        // Only do calculations if the current\
    \ power is not zero\n        // and is not already in the string\n        if ($power\
    \ != 0 && $str_len != 0) {\n            // Add the new power of ten to the existing\
    \ string\n            $str = $num . $str . substr($num, 0, $power);\n\n      \
    \      // Add 'i', 'x', or 'v'\n            $str_len += (substr_count($str, 'i')\
    \ + substr_count($str, 'x') - 2 * substr_count($str, 'v'));\n\n            //\
    \ Remove the last digit\n            $num = floor($num / 10);\n        }\n   \
    \     else {\n            // Add a new digit\n            $str .= $num;\n\n  \
    \          // Add 'i', 'x', or 'v'\n            $str_len += substr_count($str,\
    \ 'i') + substr_count($str, 'x') - 2 * substr_count($str, 'v');\n\n          \
    \  // Remove the last digit\n            $num = floor($num / 10);\n        }\n\
    \    }\n\n    // Add the remaining number\n    if ($str != '') {\n        $str\
    \ = $str . $num;\n    }\n\n    // If no value was added, just return the number\
    \ as a string\n    if ($str == '') {\n        return $str;\n    }\n\n    // Add\
    \ the appropriate number of 'i's, 'x's, and 'v's to the string\n    for ($i =\
    \ 0; $i < $str_len; $i++) {\n        switch ($i) {\n            case 0:\n    \
    \            $str .= 'i';\n                break;\n            case 1:\n     \
    \           $str .= 'x';\n                break;\n            case 2:\n      \
    \          $str .= 'v';\n                break;\n        }\n    }\n\n    return\
    \ $str;\n}\n", "  $roman_numerals = array('M' => 'MM', 'CM' => 'CC', 'D' => 'DD',\
    \ 'CD' => 'CC',\n    'C' => 'XC', 'X' => 'XL', 'L' => 'XC', 'V' => 'IV', 'I' =>\
    \ 'II');\n  $roman_numerals_tmp = array_flip($roman_numerals);\n  return strtr($number,\
    \ $roman_numerals);\n}", "\tif ($number < 1 || $number > 1000) {\n\t\tthrow new\
    \ \\InvalidArgumentException('Given a number ' . $number . ' between 1 and 1000.');\n\
    \t}\n\n\t$roman = '';\n\tfor ($i = 1; ; $i++) {\n\t\t$roman = $roman . $roman_numbers[$number\
    \ % 10];\n\t\t$number = floor($number / 10);\n\t\tif ($number === 0) {\n\t\t\t\
    break;\n\t\t}\n\t}\n\treturn strtolower($roman);\n}", "    $roman = '';\n    $negative\
    \ = false;\n    if ($number < 0) {\n        $negative = true;\n        $number\
    \ = -$number;\n    }\n    for ($i = 1; $i < $number / 1000; $i++) {\n        $roman\
    \ .= 'M';\n    }\n    for ($i = 1; $i < $number / 100; $i++) {\n        if ($i\
    \ % 3 == 0 && $i % 5 == 0) {\n            $roman .= 'D';\n        } elseif ($i\
    \ % 3 == 0) {\n            $roman .= 'C';\n        } elseif ($i % 5 == 0) {\n\
    \            $roman .= 'L';\n        }\n    }\n    for ($i = 1; $i < $number /\
    \ 10; $i++) {\n        if ($i % 3 == 0) {\n            $roman .= 'X';\n      \
    \  } elseif ($i % 5 == 0) {\n            $roman .= 'V';\n        }\n    }\n  \
    \  if ($number % 10 > 0) {\n        $roman .= strtoupper(dechex($number % 10));\n\
    \    }\n    return $negative ? $roman = '-' . $roman : $roman;\n}\n</code>\n<|/\
    \ a dscore=4 tags=php,roman-numerals,number-theory |>\n<| c |>\nGreat answer,\
    \ especially the second part, about roman-to-integer. I've always wanted to know\
    \ how they did that, and this answer is just great.\n<|/ c |>\n<| c |>\nYes, this\
    \ answer is very good but i had to use some extra things to convert it to PHP\
    \ because some roman numerals do not have roman numeral equivalent in numbers\
    \ like \"CL\" i had to convert it to \"CCCC\" but then it started converting \"\
    CCL\" into \"CCCCCCL\" so i had to use array_unique to remove duplicate values\
    \ from array and then add all values which are not duplicates to new array and\
    \ finally implode array values by comma \",\"\n<|/ c |>\n<| c |>\nThe above comments\
    \ are actually helpful to understand what they do rather than just copy/paste.\
    \ Thanks for sharing the code snippet.\n<|/ c |>\n<| a |>\nI know this is an old\
    \ question, but I thought I'd offer this for anyone else who finds it useful.\n\
    I wanted to share how I implemented the answer by Glenn Taylor.  It was very helpful\
    \ and I felt like I should share it for anyone else who finds it.  It also uses\
    \ PHP's built in intval() function, which returns an integer that represents the\
    \ number.  I then used substr() to convert the integer to an Roman Numer", " \
    \   if (!is_numeric($number) || intval($number) < 1 || intval($number) > 1000)\n\
    \        return false;\n    $roman = '';\n    $counter = 1;\n    // Find the smallest\
    \ number of repeating digits necessary\n    while (true) {\n        $num_digits\
    \ = strlen($number) - strlen(ltrim($number, $roman));\n        if ($num_digits\
    \ > $counter) {\n            $counter = $num_digits;\n            $roman .= substr($number,\
    \ 0, $counter);\n        } else {\n            break;\n        }\n    }\n    //\
    \ Now find the smallest integer that will result from the concatenation\n    //\
    \ of roman and counter\n    $smallest_roman_digit = 1;\n    while (true) {\n \
    \       $temp = substr($roman, -1, 1) + substr($counter, -1, 1);\n        if ($temp\
    \ < $smallest_roman_digit) {\n            $smallest_roman_digit = $temp;\n   \
    \     }\n        if ($smallest_roman_digit > $counter) {\n            $roman =\
    \ $roman.substr($counter, 1);\n        } else {\n            break;\n        }\n\
    \    }\n    // Now we can convert the integer to the mini-roman representation\n\
    \    return $roman.$smallest_roman_digit;\n}\n", "  $roman = '';\n\n  for ($i\
    \ = 1, $n = $number; $i < 100; $i++, $n /= 10) {\n    $roman .= $this->{'roman_'\
    \ . strlen($roman)}[$n % 10];\n  }\n\n  return $roman;\n}", "  $roman = '';\n\
    \  $int_value = intval($number);\n  while ($int_value) {\n    $digit = $int_value\
    \ % 1000;\n    $int_value /= 1000;\n    if ($digit) {\n      $roman .= str_repeat('M',\
    \ floor($digit / 1000)) . 'C';\n    }\n  }\n\n  return strtolower($roman);\n}\n\
    </code>\n<|/ a dscore=2 tags=php,roman-numerals |>\n<| c |>\nThe above is just\
    \ an exercise for me. I need an algorithm to do the task\n<|/ c |>\n<| c |>\n\
    If you're looking for an algorithm, then you won't find one. It's a math problem,\
    \ not a programming question.\n<|/ c |>\n<| a dscore=1 |>\nHere is one I came\
    \ up with. \nIt uses the following algorithm to convert between Roman Numerals\
    \ and Decimals:\n\nSplit the number into two parts, a Roman Numeral and an Int.\n\
    For each digit, multiply the Roman Numeral by it\u2019s value.\nSum all the Roman\
    \ Numerals (i.e. convert the decimal to a Roman Numeral)\n\nIt also has a bunch\
    \ of useful functions like the one I made for converting Roman to Decimals and\
    \ back.\n<code>\n<?php\n", "  $roman = '';\n  for ($i = 1; $i < $number; $i++)\
    \ {\n    $roman .= chr(ord('A') + $i - 1);\n  }\n  return $roman;\n}\n", "   \
    \ $result = '';\n    $int_length = strlen($number);\n    $roman_length = array_sum(str_split(self::$roman_numerals));\n\
    \    $max_roman_length = min(strlen($roman_numerals), $int_length);\n    for ($i\
    \ = 0; $i < $max_roman_length; $i++) {\n        if ($int_length % 2 == 0 && $i\
    \ <= intval($int_length / 2)) {\n            $numeral_length = intval($int_length\
    \ / 2);\n            $result += substr($roman_numerals, 0, $numeral_length);\n\
    \            $int_length -= $numeral_length;\n        } else {\n            $result\
    \ += substr($roman_numerals, 0, 1);\n        }\n    }\n    $result += $number;\n\
    \    return strtolower($result);\n}\n", "    if ($number < 1 || $number > 999)\
    \ {\n        return \"$number\";\n    }\n\n    // Handle the special case when\
    \ $number is exactly 1,\n    // since 'i' already has a mini roman.\n    if ($number\
    \ == 1) {\n        return 'i';\n    }\n\n    $mini_roman = '';\n    // Loop over\
    \ all four letters of the roman numeral.\n    for ($i = 0; $i < strlen($number);\
    \ $i++) {\n        $numeral_char = substr($number, $i, 1);\n        if ($numeral_char\
    \ == '0' || $numeral_char == '1') {\n            $mini_roman .= $numeral_char;\n\
    \            continue;\n        }\n\n        // Get the value based on the numeral\
    \ char.\n        $numeral_index = intval(substr($numeral_char, 1)) - 1;\n    \
    \    $numeral_value = $numeral_chars[$numeral_index];\n        // Add the value\
    \ to the mini roman if the value is not zero.\n        if ($numeral_index != 0)\
    \ {\n            $mini_roman .= $numeral_value;\n        }\n    }\n\n    return\
    \ $mini_roman;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThank you. Your answer\
    \ lead me to this: https://github.com/jakubroztocil/php-roman/blob/master/roman.php\n\
    <|/ c |>\n<| a dscore=3 |>\nIf you're just looking to use romans to print out\
    \ numbers, this will work\n<code>", "  $ret = '';\n  if ($number < 1 || $number\
    \ > 1000)\n    return $ret;\n\n  for ($i = 0; $i < $number; $i++) {\n    $ret\
    \ .= mini_roman($i);\n  }\n  return strtolower($ret);\n}\n", "    $roman_array=array();\n\
    \    $roman_array['M']=1000;\n    $roman_array['CM']=100;\n    $roman_array['D']=10;\n\
    \    $roman_array['CD']=1;\n    $roman_array['C']=1;\n    $roman_array['XC']=10;\n\
    \    $roman_array['L']=5;\n    $roman_array['XL']=5;\n    $roman_array['X']=5;\n\
    \    $roman_array['IX']=1;\n    $roman_array['V']=1;\n    $roman_array['IV']=1;\n\
    \    $roman_array['I']=1;\n\n    $roman_array['IV']=12;\n    $roman_array['I']=12;\n\
    \n    while(true) {\n        $roman_array['V']=10;\n        $roman_array['IX']=10;\n\
    \        $roman_array['X']=10;\n        $roman_array['L']=5;\n        $roman_array['XL']=5;\n\
    \        $roman_array['XC']=10;\n        $roman_array['CM']=100;\n        $roman_array['D']=10;\n\
    \        $roman_array['CD']=1;\n        $roman_array['C']=1;\n        $roman_array['M']=100;\n\
    \        $roman_array['CD']=1;\n        $roman_array['M']=1000;\n        if($number%100==0)\n\
    \            $roman_array['M']=1000;\n        $number=floor($number/100);\n  \
    \      if($number==0)\n            break;\n    }\n    $roman_array['I']=floor(1000*($number/10)+($number%10));\n\
    \    foreach ($roman_array as $roman => $int) {\n        if($int>0) {\n      \
    \      $roman_array[$roman]=$int;\n        } else {\n            $roman_array[$roman]=1;\n\
    \        }\n    }\n\n    $mini_roman='';\n    foreach ($roman_array as $roman\
    \ => $int) {\n        if($int>0)\n            $mini_roman .= str_repeat($roman,$int);\n\
    \    }\n    return mb_strtolower($mini_roman);\n}\n</code>\n<|/ a tags=math,php\
    \ |>\n<| a tags=math,php dscore=1 |>\n<code>", "    $return = '';\n\n    while\
    \ ($number >= 1000) {\n        $return.=int_to_mini_roman($number - 1000);\n \
    \       $number -= 1000;\n    }\n\n    while ($number >= 100) {\n        $return.=int_to_mini_roman($number\
    \ - 100);\n        $number -= 100;\n    }\n\n    if ($number >= 10) {\n      \
    \  $return.=int_to_mini_roman($number);\n    }\n    else {\n        $return.=chr(ord('A')\
    \ + $number - 10);\n    }\n\n    return strtolower($return);\n}\n", "  $roman\
    \ = '';\n  $negative = false;\n  if ($number < 0) {\n    $negative = true;\n \
    \   $number = abs($number);\n  }\n  for ($i = 0; $i < strlen($number); $i++) {\n\
    \    $n = $number[$i];\n    $roman = $roman . roman_to_int('M', $n) . $n;\n  }\n\
    \  return ($negative) ? \"-\" . $roman : roman_to_int('M', substr($roman, 1));\n\
    }\n\n/**\n * Converts a string containing a roman numeral to an integer.\n * Restrictions:\
    \ Only roman numerals starting with 'I', 'V', or 'X'\n * will be converted.\n\
    \ * Examples:\n * >>> roman_to_int('viii') -> 44\n * >>> roman_to_int('VII') ->\
    \ 44\n * >>> roman_to_int('II') -> 23\n * >>> roman_to_int('XXVIII') -> 23\n *\
    \ >>> roman_to_int('XXXIII') -> 23\n * >>> roman_to_int('XC') -> 0\n * >>> roman_to_int('LVIII',\
    \ 1) -> 521\n * >>> roman_to_int('MCMXCIX') -> 2571\n * >>> roman_to_int('MMMMCMXCIX')\
    \ -> 2726\n * >>> roman_to_int('XXIV') -> 86\n * >>> roman_to_int('LXXXVII') ->\
    \ 958\n * >>> roman_to_int('MMMCMXCIX') -> 2426\n * >>> roman_to_int('CC') ->\
    \ 0\n * >>> roman_to_int('VX') -> 0\n * >>> roman_to_int('LXXVII') -> 1058\n *\
    \ >>> roman_to_int('II') -> 0\n * >>> roman_to_int('III') -> 0\n * >>> roman_to_int('VIII')\
    \ -> 0\n * >>> roman_to_int('LXXXVIII') -> 1058\n * >>> roman_to_int('MCMXCI')\
    \ -> 0\n * >>> roman_to_int('MMMCMXCII') -> 0\n * >>> roman_to_int('MMMMCMXCII')\
    \ -> 0\n * >>> roman_to_int('MM') -> 0\n * >>> roman_to_int('CM') -> 0\n * >>>\
    \ roman_to_int('M') -> 0\n * >>> roman_to_int('XXXI') -> 0\n * >>> roman_to_int('VXI')\
    \ -> 0", "  // Using roman-numerals algorithm:\n  //   http://en.wikipedia.org/wiki/Roman_numeral_system\n\
    \  //   http://en.wikipedia.org/wiki/Divisor_function\n  //   http://en.wikipedia.org/wiki/Addition_algorithm\n\
    \  //   http://en.wikipedia.org/wiki/Multiplication_algorithm\n  //   http://en.wikipedia.org/wiki/Modulus_operation\n\
    \  //\n  // We will use $number in place of the real number, and then convert\
    \ it to\n  // a standard roman numeral afterwards.\n  //\n  // We use an array\
    \ to hold the digits of the number, and then convert them to\n  // the roman numerals,\
    \ using a lookup table to find the correct roman-numeral.\n  // This has time\
    \ complexity of O(N), where N is the length of the input number.\n  // This algorithm\
    \ could be improved by using a prefix trie or a hashmap, but this\n  // would\
    \ complicate things, probably making it overly complicated.\n  //\n  // For each\
    \ number, we go through the following steps, using the lookup\n  // table as a\
    \ memory:\n  //\n  // First, we use the last digit to find the roman numeral in\
    \ the lookup table,\n  // and put it in $numeral (which is also the last digit\
    \ of the number).\n  //\n  // Then, for each succeeding digit, we add that value\
    \ to the number before\n  // the lookup in the lookup table.\n  //\n  // Finally,\
    \ the digits are converted to the roman numerals. There are three\n  // different\
    \ cases: if the number is divisible by 4, we just output the roman\n  // numeral,\
    \ as usual; otherwise, if the last digit is a 1, we prepend 'i' to\n  // the roman\
    \ numeral and add it to the number before the lookup in the lookup\n  // table;\
    \ otherwise, we prepend 'v', and add it to the number before the lookup\n  //\
    \ in the lookup table.\n  //\n  // This algorithm is linear in the size of the\
    \ input number, because we don't\n  // need to calculate each digit of the number\
    \ before doing arithmetic, we only\n  // need to calculate each digit of the number\
    \ before the lookup in the lookup\n  // table.\n  //\n  // As such, the algorithm\
    \ is O(N), where N is the length of the input number,\n  // since we need to do\
    \ each step of the algorithm for each digit, and each\n  // step of the algorithm\
    \ is O(1), since we need to look at just one digit at\n  // a time.\n\n  $numeral\
    \ = '';\n  $lookup = array(\n      1000, 'M',\n      900, 'CM',\n      500, 'D',\n\
    \      400, 'CD',\n      100, 'C', // 1\n      90, 'XC', // 9\n      50, 'L',\
    \ // 10\n      40, 'XL', // 50\n      10, 'X', // 100\n      9, '", "  $return\
    \ = \"\";\n  if ($number < 0 || $number > 1000) {\n    throw new InvalidArgumentException(\"\
    Invalid argument. Input must be between 0 and 1000.\");\n  }\n  if ($number <\
    \ 10) {\n    $return .= $number;\n  }\n  // $return = $number;\n  if ($number\
    \ >= 100) {\n    $return = \"M\";\n    // $return = substr($number, 0, 1);\n \
    \   // $return = $return[0].\"M\";\n  }\n  while ($number >= 1000) {\n    $return\
    \ = $return[0].$return[1];\n    // $return .= $return[0].\"M\";\n    $number =\
    \ $number / 100;\n  }\n  // $return = $return[0].$return[1].\"M\";\n  if ($number\
    \ > 100) {\n    // $return = $return[0].$return[1].$return[2];\n    $return =\
    \ $return[0].$return[1].substr($return[2], 1);\n  }\n  return $return;\n}\n",
  "\tstatic $romans;\n\t$romans[] = array();\n\t$romans[][] = 'M'; // 1000\n\t$romans[][]\
    \ = 'CM'; // 900\n\t$romans[][] = 'D'; // 500\n\t$romans[][] = 'CD'; // 400\n\t\
    $romans[][] = 'C'; // 100\n\t$romans[][] = 'XC'; // 90\n\t$romans[][] = 'L'; //\
    \ 50\n\t$romans[][] = 'XL'; // 40\n\t$romans[][] = 'X'; // 10\n\t$romans[][] =\
    \ 'IX'; // 9\n\t$romans[][] = 'V'; // 5\n\t$romans[][] = 'IV'; // 4\n\t$romans[][]\
    \ = 'I'; // 1\n\n\tif ($number < 1 || $number > 1000) {\n\t\tthrow new Exception(\"\
    invalid number\");\n\t}\n\t$roman = array_slice($romans, $number % 10, 1);\n\n\
    \treturn $roman[0];\n}\n", "    if ($number == 1) {\n        return str_split($number,\
    \ 1);\n    }\n    // Create a string representing the number in its full length\n\
    \    $number_string = str_split($number, 4);\n    foreach ($number_string as &$number_string)\
    \ {\n        // Find the highest power of the base (which is 10) and divide the\n\
    \        // number by that power to get the number of digits, which is the\n \
    \       // smallest power of ten less than the given number.\n        $number_string\
    \ = $number_string * 10;\n        // Then subtract that number from the given\
    \ number to get the number\n        // of the lowest power (which is 10).\n  \
    \      $number_string -= $number_string;\n    }\n    // Now we can use array_fill\
    \ to fill the missing numbers with '0's by\n    // using the last available power\
    \ of ten.\n    $mini_roman = array_fill(0, count($number_string), $number_string[$number_string\
    \ - 1]);\n    // Now we just need to reverse the order of the elements in $mini_roman\
    \ so\n    // that the least significant digit is at the front, and we can\n  \
    \  // implode the array to get the answer.\n    return implode('', array_reverse($mini_roman));\n\
    }\n", "    $mini_roman = '';\n    if ($number < 0 || $number > 999) {\n      \
    \  return $mini_roman;\n    }\n    $int = $number;\n    $tens = $int / 100;\n\
    \    if ($tens > 0) {\n        $mini_roman .= intval($tens);\n    }\n    $int\
    \ %= 100;\n    if ($int > 0) {\n        $mini_roman .= intval($int);\n    }\n\
    \    if (strlen($mini_roman) == 1) {\n        return $mini_roman;\n    }\n   \
    \ $mini_roman = '';\n    while ($mini_roman == '') {\n        $mini_roman .= strval($mini_roman[0]);\n\
    \    }\n    return strtolower($mini_roman);\n}\n", "  $roman = \"\";\n  if ($number\
    \ < 1 || $number > 1000) {\n    throw new \\InvalidArgumentException(\"The number\
    \ must be between 1 and 1000\");\n  }\n  while ($number > 1000) {\n    $roman\
    \ .= \"M\";\n    $number = $number - 1000;\n  }\n  while ($number > 0) {\n   \
    \ $roman .= \"CM\";\n    $number = $number - 100;\n  }\n  while ($number > 0)\
    \ {\n    $roman .= \"D\";\n    $number = $number - 10;\n  }\n  while ($number\
    \ > 0) {\n    $roman .= \"CD\";\n    $number = $number - 1;\n  }\n  $roman .=\
    \ \"C\";\n  return $roman;\n}\n", "    $int = (int)$number;\n    $roman = '';\n\
    \n    for ($i = 1; $i <= 1000; $i++) {\n        $remainder = $number % $i;\n \
    \       if ($i == $int) {\n            $roman .= 'M';\n        } else {\n    \
    \        $numeral = $i;\n            if ($remainder >= 10 && $remainder < 20)\
    \ {\n                $numeral++;\n            }\n            $roman .= mb_substr($numeral,\
    \ 0, 1, 'UTF-8');\n        }\n        $number = floor($number / $i);\n    }\n\
    \    return mb_strtolower($roman, 'UTF-8');\n}\n", "  $base = [ 'C', 'CD', 'D',\
    \ 'DC', 'CM' ];\n  $result = '';\n  $negative = false;\n  if ($number < 0) {\n\
    \    $negative = true;\n    $number = -$number;\n  }\n  // Handle divisibility\
    \ by 10 rules\n  if ($number < 10) {\n    return $negative ? '-' : '';\n  } else\
    \ if ($number < 100) {\n    return $negative ? '-' : '';\n  } else if ($number\
    \ < 1000) {\n    return $negative ? '-' : '';\n  } else if ($number < 10000) {\n\
    \    if ($number < 1000) {\n      $result = $negative ? '' : $base[0];\n    }\
    \ else if ($number < 100000) {\n      $result = $negative ? '' : $base[0];\n \
    \   } else if ($number < 1000000) {\n      $result = $negative ? '' : $base[1];\n\
    \    } else if ($number < 10000000) {\n      $result = $negative ? '' : $base[1];\n\
    \    } else if ($number < 100000000) {\n      $result = $negative ? '' : $base[2];\n\
    \    } else if ($number < 1000000000) {\n      $result = $negative ? '' : $base[2];\n\
    \    } else if ($number < 10000000000) {\n      $result = $negative ? '' : $base[3];\n\
    \    } else if ($number < 100000000000) {\n      $result = $negative ? '' : $base[3];\n\
    \    } else {\n      $result = $negative ? '' : $base[4];\n    }\n  }\n  // Handle\
    \ the remaining cases\n  // Represent each digit as [position] [symbol]\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($number); ++$i) {\n    $result .= $base[$number[$i]];\n\
    \  }\n  return $negative ? '-' : $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
