name: HumanEval_46_fib4
language: php
prompt: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
  \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  // Please write a function to efficiently compute the n-th element of the fib4 number\
  \ sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n\
  // >>> fib4(7)\n// 14\nfunction fib4($n) {\n"
tests: "function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $fib = 4;\n  for($i = 0; $i <= $n; $i++) {\n    $fib = $fib + $fib\
    \ + $fib + $fib;\n  }\n  return $fib;\n}\n", "\tif ($n <= 2) {\n\t\treturn 0;\n\
    \t} else if ($n <= 4) {\n\t\treturn 0;\n\t} else if ($n <= 6) {\n\t\treturn 2;\n\
    \t} else {\n\t\treturn 0;\n\t}\n}", "   if ($n === 0) {\n      return 0;\n   }\
    \ else if ($n === 1) {\n      return 1;\n   } else if ($n === 2) {\n      return\
    \ 2;\n   } else if ($n === 3) {\n      return 0;\n   } else if ($n === 4) {\n\
    \      return 4;\n   } else {\n      return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n   }\n}\n\n/**\n * fibo number sequence with 3 parameters\n\
    \ *\n * @param int|null $n - the index from which the fib3 sequence will be constructed\n\
    \ *\n * @return int\n */", "    $n--;\n    if($n===0) return 0;\n    if($n==1)\
    \ return 1;\n    return fib4($n-2) + fib4($n-3) + fib4($n-4); \n}\n", "    //\
    \ base cases\n    if ($n == 0)\n        return 0;\n    if ($n == 1)\n        return\
    \ 1;\n    if ($n == 2)\n        return 2;\n    if ($n == 3)\n        return 0;\n\
    \    if ($n == 4)\n        return 4;\n    // recursive case\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nIf I want to implement fib2() function in python, I need that fib4()\
    \ function, right?\n<|/ c |>\n<| c |>\nI think it should be fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4)\n<|/ c |>\n<| c |>\nYou might want to add\
    \ some additional checks in case the number is too large (to avoid infinite loop).\
    \ E.g. `if ($n > 9) throw new InvalidArgumentException();`\n<|/ c |>\n<| c |>\n\
    Good call on not using recursion!\n<|/ c |>\n<| c |>\nThe code is unreadable and\
    \ undebuggable. Stick to using recursion (for now) for a better understanding\
    \ and debugging. Also, try not to overdo recursion (which makes it really slow\
    \ on long inputs) because it's just not needed.\n<|/ c |>\n<| a tags=recursion,algorithm,php,python\
    \ |>\nIn Python, you can also implement it like so:\n<code>\ndef fib(n,a,b):\n\
    \    if n == 0:\n        return a\n    if n == 1:\n        return b\n    return\
    \ fib(n-1,b,a+b)\n\nprint(fib(3,0,1))\nprint(fib(4,0,1))\nprint(fib(5,0,1))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nNice solution! Although it might not be the\
    \ fastest if you use python's inbuilt recursion (as opposed to an explicit implementation)\n\
    <|/ c |>\n<| c |>\nYou might want to add some additional checks in case the number\
    \ is too large (to avoid infinite loop). E.g. `if (n > 9) throw new InvalidArgumentException();`\n\
    <|/ c |>\n<| a tags=recursion,algorithm,php,python |>\n<code>\ndef fib(n):\n \
    \  if n == 0:\n      return 0\n   if n == 1:\n      return 1\n   return fib(n-1)\
    \ + fib(n-2)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nIf I want to implement fib2()\
    \ function in python, I need that fib4() function, right?\n<|/ c |>\n<| c |>",
  "    if ($n == 0) return 0;\n    if ($n == 1) return 1;\n    if ($n == 2) return\
    \ 2;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n", "    $fib4 = 0;\n    if ($n < 3) {\n        $fib4 = $n;\n    } else {\n\
    \        $fib4 = fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    \    }\n    return $fib4;\n}\n", "  $n = intval($n);\n  if ($n <= 0) {\n    return\
    \ 0;\n  } else if ($n == 1) {\n    return 1;\n  } else {\n    return fib4($n -\
    \ 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}\n", "    $fib = array(0,0,2,0,0);\n\
    \    return $fib[$n];\n}", "    if ($n <= 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    if ($n == 2) return 1;\n    return fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}", "  if ($n < 1 || $n > 40) {\n    echo 'invalid input';\n    die();\n\
    \  }\n\n  if ($n == 3) {\n    return 1;\n  }\n\n  return fib_func($n) + fib_func($n-1)\
    \ + fib_func($n-2) + fib_func($n-3) + fib_func($n-4) + fib_func($n-5);\n}\n",
  "    if ($n<0) {\n        return -fib4(-$n);\n    }\n\n    if ($n<=1) {\n      \
    \  return 0;\n    }\n\n    if ($n===2) {\n        return 2;\n    }\n\n    if ($n===3)\
    \ {\n        return 0;\n    }\n\n    return fib4($n-1) + fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4); \n}", "  // Your code here\n  \n}\n\n$array = [1, 2, 3, 4, 5];\n\
    array_walk($array, fib4);\nprint_r($array);", "    if ($n < 0) {\n        return\
    \ 0;\n    }\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1)\
    \ {\n        return 1;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}", "    // Return the nth element of the Fibbonacci sequence.\n\
    \    return ($n <= 4) ? $n : $n*fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n", " \
    \   if ($n <= 1) return 0;\n    if ($n === 2) return 2;\n    return fib4($n -\
    \ 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "    // Your code here...\n\
    \    return $n;\n}\n", "  if ($n == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n\
    \    return 1;\n  }\n  if ($n == 2) {\n    return 2;\n  }\n  if ($n == 3) {\n\
    \    return 0;\n  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n", "  if ($n < 2)\n    return 0;\n  if ($n == 2)\n    return 2;\n\
    \  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", " \
    \   // base case: stop recursion when fib4(n) = n.\n    if($n === 0) return 0;\n\
    \    if($n === 1) return 1;\n    // otherwise, call fib4 recursively.\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}", "    return\
    \ $n == 0 ? 0 : $n == 1 ? 1 : fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n", "    if ($n < 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "    if ($n <= 0)\
    \ return 0;\n    if ($n == 1) return 0;\n    if ($n == 2) return 2;\n    if ($n\
    \ == 3) return 0;\n    if ($n == 4) return 0;\n    return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}", "  $fib = 0;\n  for ($i = 0; $i < $n;\
    \ $i++) {\n    $fib = $fib + 4;\n  }\n  return $fib;\n}\necho fib4(4);", "   \
    \ if($n >= 4) return $n;\n    return fib4(4) + fib4(3) + fib4(0) + fib4(1);\n}",
  "  if ($n < 1)\n    return 0;\n  if ($n == 1)\n    return 1;\n  return fib4($n -\
    \ 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "  $result = 0;\n  if\
    \ ($n==0) {\n    return 0;\n  }\n  else if ($n==1) {\n    return 1;\n  }\n  else\
    \ if ($n==2) {\n    return 2;\n  }\n  else if ($n==3) {\n    return 1;\n  }\n\
    \  else {\n    $result = fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n\
    \  }\n  return $result;\n}\n", "    if ($n == 0)\n        return 0;\n    if ($n\
    \ == 1)\n        return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n -\
    \ 3) + fib4($n - 4);\n}", "    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n\
    \    if ($n < 2) {\n        return $n;\n    }\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        $a = $a + $b;\n        $c = $c + $d;\n        $b = $c;\n        $d\
    \ = $a;\n    }\n    return $d;\n}\n", "    return ($n < 1) ? 0 : $fib4($n - 1)\
    \ + $fib4($n - 2) + $fib4($n - 3) + $fib4($n - 4);\n}\n", "    if ($n <= 1) return\
    \ 0;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}",
  "    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return\
    \ 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3)\
    \ {\n        return 0;\n    }\n    if ($n >= 4) {\n        return fib4($n - 1)\
    \ + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n    $result = fib4($n\
    \ - 1) + fib4($n - 2);\n    return $result;\n}", "    if ($n <= 2) {\n       \
    \ return $n;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n    }\n}\n", "  if ($n <= 1)\n    return 0;\n  if ($n\
    \ <= 2)\n    return 1;\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) +\
    \ fib4($n - 4);\n}\n", "    if ($n < 0) {\n        throw new Exception(\"fib4():\
    \ negative number $n\");\n    }\n    if ($n === 0) {\n        return 0;\n    }\n\
    \    if ($n === 1) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "    if ($n <= 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}", "  global $fib4;\n  return $fib4[$n];\n}\n\n$fib4[0] = 0;\n$fib4[1]\
    \ = 0;\n$fib4[2] = 1;\n$fib4[3] = 1;\n$fib4[4] = 1;\n$fib4[5] = 2;\n$fib4[6] =\
    \ 2;\n$fib4[7] = 3;\n$fib4[8] = 3;\n$fib4[9] = 5;\n", "    $fib=array(0,1,1,2,2);\n\
    \    if ($n==0){\n        return 0;\n    }\n    if ($n==1){\n        return 1;\n\
    \    }\n    if ($n==2){\n        return 2;\n    }\n    if ($n==3){\n        return\
    \ 0;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n",
  "  if ($n <= 0) {\n    return 0;\n  }\n  if ($n <= 2) {\n    return 0;\n  }\n  return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "\tif ($n\
    \ < 1) return 0;\n\tif ($n < 4) return $n;\n\treturn fib4($n - 1) + fib4($n -\
    \ 2) + fib4($n - 3) + fib4($n - 4);\n}", "    $fib4_cache = [];\n    for($i =\
    \ 0; $i < $n; $i++){\n        $fib4_cache[] = $fib4_cache[$i-1] + $fib4_cache[$i-2];\n\
    \    }\n    return $fib4_cache[$n-1];\n}\n", "    if ($n<3) {\n        return\
    \ $n;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4) ;\n\
    }\n", "    $fib = 4;\n    for ($i = 0; $i < $n; $i++) {\n        $fib += $fib\
    \ - $fib + $fib - $fib;\n    }\n    return $fib;\n}\n", "\t$fib = 4;\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$fib += $fib;\n\t}\n\treturn $fib;\n}\n", "\tif\
    \ ($n <= 0) {\n\t\treturn 0;\n\t}\n\tif ($n === 1) {\n\t\treturn 0;\n\t}\n\tif\
    \ ($n === 2) {\n\t\treturn 2;\n\t}\n\treturn fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}", "    if ($n===0 || $n===4) {\n        return 0;\n\
    \    }\n    return fib4($n-2) + fib4($n-3) + fib4($n-4) + fib4($n-1);\n}", " \
    \ if ($n < 4) {\n    return $n;\n  }\n\n  return fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n}\n\n/*\n * QUESTION 3\n * For this quiz, please\
    \ fill out your solution so that it passes all of the test cases.\n */\n", " \
    \ if ($n <= 3) {\n    return 0;\n  }\n  return fib4($n - 4) + fib4($n - 3) + fib4($n\
    \ - 2) + fib4($n - 1);\n}\n", "\tif ($n < 4) {\n\t\treturn $n;\n\t} elseif ($n\
    \ < 8) {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    \t} else {\n\t\treturn fib4($n - 8) + fib4($n - 7) + fib4($n - 6) + fib4($n -\
    \ 5) + fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1) + fib4($n);\n\
    \t}\n}", "    // Your code here\n    return $n;\n}\n\n/**\n * Print a table of\
    \ Fibonacci numbers, one per line.\n * \n * >>> fib_table(10)\n * 1   1   1  \
    \ 2   3   5   8   13  21  34  55  89\n */", "    if ($n==0) {\n        return\
    \ 0;\n    } else if ($n==1) {\n        return 1;\n    } else if ($n==2) {\n  \
    \      return 2;\n    } else if ($n==3) {\n        return 0;\n    } else {\n \
    \       $n1 = fib4($n-1);\n        $n2 = fib4($n-2);\n        $n3 = fib4($n-3);\n\
    \        return $n1+$n2+$n3+$n4;\n    }\n}\n</code>\n<|/ a dscore=0 tags=php,fibonacci,fibonacci-heap,fibonacci-stack\
    \ |>\n<| c |>\nThanks I will try this but I am pretty new to programming and I\
    \ understand how recursion works but I will try to get better at it :)\n<|/ c\
    \ |>\n<| c |>\nBy the way, you did not understand the question. There are two\
    \ sequences in the question that use the same fibonacci function. The first one\
    \ can be computed in O(2^n) time, while the second one needs O(n) time to compute.\
    \ In the fibonacci sequence, the fibonacci numbers are computed from the sequence\
    \ (1,1,2,3,5,8,13) and the numbers before are computed recursively, hence the\
    \ O(2^n) time complexity.\n<|/ c |>\n<| a tags=php,fibonacci,fibonacci-heap,fibonacci-stack\
    \ dscore=0 |>\nYou could use this:\n<code>\nclass Fib {\n    public $a;\n    public\
    \ $b;\n    public $c;\n    public $d;\n\n    public function __construct($num)\
    \ {\n        $this->a = $num;\n        $this->b = $num + 1;\n        $this->c\
    \ = $num + 2;\n        $this->d = $num + 3;\n    }\n\n    public function fib()\
    \ {\n        $result = $this->a;\n        $this->a = $this->b;\n        $this->b\
    \ = $this->c;\n        $this->c = $this->d;\n        $this->d = $result;\n\n \
    \       return $result;\n    }\n}\n\n$num = 10;\n$fib = new Fib($num);\n$fib_result\
    \ = $fib->fib();\n\necho $num;\n</code>\n<|/ a |>\n<| a tags=php,fibonacci,fibonacci-heap,fibonacci-stack\
    \ |>\n<code>\n$num = 5;\n$array1 = [0,1,1,2];\n$array2 = [0,1,2,3];\n$array3 =\
    \ [0,1,2,3];\n$array4 = [0,1,2,3];\n", "    if ($n < 0) {\n        return \"fib4($n)\
    \ error\";\n    }\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n ===\
    \ 1) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}", "  return fib3($n-1) + fib3($n-2) + fib3($n-3) + fib3($n-4);\n\
    }", "\tif ($n === 0) return 0;\n\tif ($n === 1) return 1;\n\treturn fib4($n -\
    \ 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "    return $n <= 2\
    \ ? $n : fib4($n-2) + fib4($n-3) + fib4($n-4) ;\n}", "  $s = $f;\n  for ($i =\
    \ 0; $i < $n; $i++){\n    $s = $s + $f;\n  }\n  return $s;\n}\n$fib4 = fib4(6);\n\
    print $fib4;", "    if ($n < 2) return 0;\n    if ($n < 4) return 1;\n    return\
    \ fib4(3*$n-1) + fib4(3*$n-2) + fib4(3*$n-3) + fib4(3*$n-4);\n}", "    if ($n\
    \ < 2) {\n        return $n;\n    } else {\n        return fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n    }\n}", "    if ($n < 4) return $n;\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}", "\t$n = intval($n);\n\
    \tif ($n == 0 || $n == 1)\n\t\treturn $n;\n\tif ($n == 4)\n\t\treturn $n;\n\t\
    $n4 = $n4 + $n4 - $n4 + $n4 - $n4;\n\treturn fib4($n4) + fib4($n4);\n}", "\tif\
    \ ($n == 0) {\n\t\treturn 0;\n\t} else if ($n <= 2) {\n\t\treturn $n;\n\t} else\
    \ {\n\t\treturn fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\t\
    }\n}\n", "    if ($n==0) {\n        return 0;\n    }\n    if ($n==1) {\n     \
    \   return 0;\n    }\n    if ($n==2) {\n        return 2;\n    }\n    if ($n==3)\
    \ {\n        return 0;\n    }\n    if ($n==4) {\n        return 0;\n    }\n  \
    \  $fib4=fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n    return $fib4;\n\
    }\n", "    if ($n <= 1)\n        return $n;\n    return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}", "    $a = 1;\n    $b = 1;\n    $c =\
    \ 1;\n    $d = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $a = $a + $b;\n\
    \        $b = $c + $d;\n        $c = $a - $b;\n        $d = $a - $c;\n    }\n\
    \    return $d;\n}\n", "    if ($n == 0) {\n        return 0;\n    } elseif ($n\
    \ == 1) {\n        return 1;\n    } elseif ($n == 2) {\n        return 2;\n  \
    \  } elseif ($n == 3) {\n        return 0;\n    } elseif ($n == 4) {\n       \
    \ return 0;\n    } elseif ($n == 5) {\n        return 4;\n    } elseif ($n ==\
    \ 6) {\n        return 8;\n    } elseif ($n == 7) {\n        return 14;\n    }\
    \ elseif ($n == 8) {\n        return 16;\n    } elseif ($n == 9) {\n        return\
    \ 21;\n    } elseif ($n == 10) {\n        return 34;\n    } elseif ($n == 11)\
    \ {\n        return 51;\n    } elseif ($n == 12) {\n        return 91;\n    }\
    \ elseif ($n == 13) {\n        return 131;\n    } elseif ($n == 14) {\n      \
    \  return 213;\n    } elseif ($n == 15) {\n        return 343;\n    } elseif ($n\
    \ == 16) {\n        return 573;\n    } elseif ($n == 17) {\n        return 963;\n\
    \    } elseif ($n == 18) {\n        return 1569;\n    } elseif ($n == 19) {\n\
    \        return 2579;\n    } elseif ($n == 20) {\n        return 4181;\n    }\
    \ elseif ($n == 21) {\n        return 6765;\n    } elseif ($n == 22) {\n     \
    \   return 10923;\n    } elseif ($n == 23) {\n        return 17719;\n    } elseif\
    \ ($n == 24) {\n        return 28657;\n    } elseif ($n == 25) {\n        return\
    \ 46363;\n    } elseif ($n == 26) {\n        return 75025;\n    } elseif ($n ==\
    \ 27) {\n        return 129623;\n    } elseif ($n == 28) {\n        return 196418;\n\
    \    } elseif ($n == 29) {\n        return 317811;\n    } elseif ($n == 30) {\n\
    \        return 514229;\n    } elseif ($n == 31) {\n        return 836213;\n \
    \   } elseif ($n == 32) {\n        return 1321199;\n    } elseif ($n == 33) {\n\
    \        return 2005111;\n    } elseif ($n == 34) {\n        return 3072179;\n\
    \    } elseif ($n == 35) {\n        return 4916291;\n    } elseif ($n == 36) {\n\
    \        return 6245783;\n    } elseif ($n == 37) {\n        return 9041819;\n\
    \    } elseif ($n == 38) {\n        return 12130899;\n    } elseif ($n == 39)\
    \ {\n        return 15481525;\n    } elseif ($n == 40) {\n        return 19",
  "    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return\
    \ 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3)\
    \ {\n        return 0;\n    }\n    if ($n === 4) {\n        return 1;\n    }\n\
    \    if ($n === 5) {\n        return 3;\n    }\n    if ($n === 6) {\n        return\
    \ 5;\n    }\n    if ($n === 7) {\n        return 9;\n    }\n    if ($n === 8)\
    \ {\n        return 13;\n    }\n    if ($n === 9) {\n        return 17;\n    }\n\
    \    if ($n === 10) {\n        return 21;\n    }\n    if ($n === 11) {\n     \
    \   return 25;\n    }\n    if ($n === 12) {\n        return 29;\n    }\n    if\
    \ ($n === 13) {\n        return 33;\n    }\n    if ($n === 14) {\n        return\
    \ 37;\n    }\n    if ($n === 15) {\n        return 41;\n    }\n}\n", "    // write\
    \ your function here\n    if ($n <= 1) return $n;\n    return fib4(4 * $n) - fib4(3\
    \ * $n - 1) + fib4(2 * $n - 2);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThanks\
    \ so much. You're a god among men.\n<|/ c |>\n<| a dscore=0 tags=php |>\n<code>",
  "    if ($n <= 0)\n        return 0;\n    if ($n <= 1)\n        return $n;\n   \
    \ if ($n == 2)\n        return 2;\n    if ($n == 3)\n        return 0;\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "  if ($n\
    \ < 4) {\n    return $n;\n  } else if ($n >= $n-3) {\n    return fib4($n-3) +\
    \ fib4($n-2) + fib4($n-1) + fib4($n);\n  } else {\n    return fib4($n-4) + fib4($n-3)\
    \ + fib4($n-2) + fib4($n-1) + fib4($n);\n  }\n}\n", "    if ($n < 0) {\n     \
    \   return 0;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n\
    \ == 1) {\n        return 1;\n    }\n    if ($n == 2) {\n        return 2;\n \
    \   }\n    $x = fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n \
    \   return $x;\n}", "    if ($n === 4) { return 0; }\n    if ($n === 5) { return\
    \ 1; }\n    if ($n === 6) { return 2; }\n    return fib4(4 - $n) + fib4(5 - $n)\
    \ + fib4(6 - $n) + fib4(7 - $n);\n}", "    if ($n <= 1)\n        return $n;\n\
    \    return fib4(fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4));\n\
    }\n", "    $x = 1;\n    $y = 1;\n    $z = 1;\n    for($i = $n; $i > 0; $i--) {\n\
    \        $x = $x + $y;\n        $y = $y + $z;\n        $z = $z + $i;\n    }\n\
    \    return $x;\n}\n$fib = array(1,2,3,4,5);\n$fib2 = array();\nfor($i = 1; $i\
    \ <= count($fib); $i++) {\n    $fib2[] = fib4($i);\n}", "  $n = abs($n);\n  $sum\
    \ = 0;\n  for ($i = 5; $i <= $n; $i++) {\n    $sum += $i;\n  }\n  return $sum;\n\
    }\n", "    if ($n < 2) return $n;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}", "  if ($n === 4) return 0;\n  if ($n === 5) return\
    \ 4;\n  if ($n === 6) return 8;\n  if ($n === 7) return 14;\n}", "    if ($n <\
    \ 4) return $n;\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n\
    }\n", "    if($n<0) return 0;\n    return fib4($n-1)+fib4($n-2)+fib4($n-3)+fib4($n-4);\
    \ // Write your code here\n}", "\treturn 0;\n}\n\n/**\n * fib5\n *\n * Compute\
    \ the last element of the Fibbonacci number sequence\n * fib5(0) should return\
    \ 0\n * fib5(1) should return 0\n * fib5(2) should return 1\n * fib5(3) should\
    \ return 1\n * fib5(n) should return fib5(n-1) + fib5(n-2) + fib5(n-3)\n * that\
    \ is, fib5(n) = fib5(n-1) + fib5(n-2) + fib5(n-3)\n * fib5(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3)\n * fib5(n) = fib3(n-1) + fib3(n-2) + fib3(n-3)\n * fib5(n) = fib2(n-1)\
    \ + fib2(n-2) + fib2(n-3)\n * fib5(n) = fib1(n-1) + fib1(n-2) + fib1(n-3)\n *\
    \ fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2)\
    \ + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1)\
    \ + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n *\
    \ fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2)\
    \ + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1)\
    \ + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n *\
    \ fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2)\
    \ + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1)\
    \ + fib0(n-2) + fib0(n-3)\n * fib5(n) = fib0(n-1) + fib0(n-2) + fib0(n-3)\n *\
    \ fib5(n) = fib0(n", "    $fib = 0;\n    if ($n == 0) $fib = 0;\n    if ($n ==\
    \ 1) $fib = 0;\n    if ($n == 2) $fib = 2;\n    if ($n == 3) $fib = 0;\n    if\
    \ ($n == 4) $fib = 2;\n    if ($n == 5) $fib = 4;\n    if ($n == 6) $fib = 8;\n\
    \    if ($n == 7) $fib = 14;\n    return $fib;\n}\n", "    if ($n <= 2) {\n  \
    \      return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3)\
    \ + fib4($n - 4);\n}\n", "    if ($n === 0) {\n        return 0;\n    }\n    if\
    \ ($n === 1) {\n        return 1;\n    }\n    return fib4($n - 1) + fib4($n -\
    \ 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\nThe above example is quite simple,\
    \ but it's also quite easy to extend to any other sequence you want. For example,\
    \ here's how you could compute fibonacci using the Fibbonacci sequence:\n<code>",
  "  if ($n<=1) {\n    return 0;\n  }\n  if ($n===3) {\n    return 1;\n  }\n  if ($n===6)\
    \ {\n    return 4;\n  }\n  return fib4($n-2) + fib4($n-3) + fib4($n-4); \n}\n",
  "\tif ($n < 5) {\n\t\treturn $n;\n\t}\n\t$fib4 = fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n\treturn $fib4;\n}\n$result = fib4(4); // fib4(4)\necho\
    \ $result;", "  $x = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $x += $i;\n  }\n\
    \  return $x;\n}\n", "  return $n % 2 === 0 ? 0 : $n % 3 === 0 ? fib4(3*$n - 1)\
    \ +  fib4(3*$n - 2) +  fib4(3*$n - 3) + fib4(3*$n - 4) : fib4(3*$n - 2) + fib4(3*$n\
    \ - 3) + fib4(3*$n - 4) + fib4(3*$n - 5);\n}\n", "\tif ($n === 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n === 1) {\n\t\treturn 1;\n\t} else if ($n === 2) {\n\t\t\
    return 2;\n\t} else if ($n === 3) {\n\t\treturn 1;\n\t} else if ($n === 4) {\n\
    \t\treturn 1;\n\t} else if ($n === 5) {\n\t\treturn 4;\n\t} else if ($n === 6)\
    \ {\n\t\treturn 8;\n\t} else if ($n === 7) {\n\t\treturn 14;\n\t} else {\n\t\t\
    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\t}\n}", " \
    \ // write your code in PHP7\n  return $n;\n}\n", "    if ($n==0 || $n==1 || $n==2\
    \ || $n==3)\n      return $n;\n    else\n      return fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4);\n}", "  $res = $n;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $res = $res + $i;\n  }\n  return $res;\n}\n", "    if ($n===0) {\n  \
    \      return 0;\n    }\n    if ($n===1) {\n        return 0;\n    }\n    if ($n===2)\
    \ {\n        return 2;\n    }\n    return fib4($n-1) + fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4);\n}\n", "    if ($n === 0) return 0;\n    if ($n === 1) return\
    \ 0;\n    if ($n === 2) return 2;\n    if ($n === 3) return 0;\n    if ($n ===\
    \ 4) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}", "  return fib3($n) + fib2($n) + fib1($n);\n}\n", "\treturn $n <=\
    \ 3 ? $n : $fib4(n - 1) + $fib4(n - 2) + $fib4(n - 3) + $fib4(n - 4);\n}", " \
    \   if ($n <= 4) return $n;\n    else return fib4($n - 4) + fib4($n - 3) + fib4($n\
    \ - 2) + fib4($n - 1);\n}", "  if ($n < 2) {\n    return 0;\n  }\n  if ($n < 4)\
    \ {\n    return fib4($n-1) + fib4($n-2);\n  }\n  return fib4($n-3) + fib4($n-4);\n\
    }\n", "  if ($n == 0) return 0;\n  if ($n == 1) return 0;\n  if ($n == 2) return\
    \ 2;\n  if ($n == 3) return 0;\n  return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}", "\tif ($n < 0) throw new Exception(\"fib4 number sequence\
    \ start at 0\");\n\tif ($n === 0) return 0;\n\tif ($n === 1) return 0;\n\tif ($n\
    \ === 2) return 2;\n\tif ($n === 3) return 0;\n\tif ($n === 4) return 4;\n\t\n\
    \treturn fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n", "   if ($n\
    \ === 0)\n      return 0;\n   if ($n === 1)\n      return 1;\n   if ($n === 2)\n\
    \      return 2;\n   if ($n === 3)\n      return 0;\n   if ($n === 4)\n      return\
    \ 1;\n   return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}",
  "  if ($n < 2) return $n;\n  return fib4(fib4($n-1) + fib4($n-2)) + fib4($n-3) +\
    \ fib4($n-4) ;\n}\n", "    if ($n == 0) {\n        return 0;\n    }\n\n    if\
    \ ($n == 1) {\n        return 0;\n    }\n\n    if ($n == 2) {\n        return\
    \ 2;\n    }\n\n    if ($n == 3) {\n        return 0;\n    }\n\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you so much, my friend, for the very clear and helpful explanation!\
    \ I really appreciate it!\n<|/ c |>\n<| a tags=functional-programming,php,recursion\
    \ |>\nAnother possible solution:\n<code>\n<?php", "\tif ($n == 0)\n\t\treturn\
    \ 0;\n\tif ($n == 1)\n\t\treturn 1;\n\tif ($n == 2)\n\t\treturn 2;\n\tif ($n ==\
    \ 3)\n\t\treturn 0;\n\tif ($n > 3)\n\t\treturn fib4($n - 4) + fib4($n - 3) + fib4($n\
    \ - 2) + fib4($n - 1);\n}\n", "    if ($n === 0) {\n        return 0;\n    }\n\
    \n    if ($n === 1) {\n        return 0;\n    }\n\n    if ($n === 2) {\n     \
    \   return 2;\n    }\n\n    if ($n === 3) {\n        return 0;\n    }\n\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "  if ($n===0)\
    \ return 0;\n  if ($n===1) return 1;\n  if ($n===2) return 2;\n  return fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}", "    if ($n === 0) {\n        return\
    \ 0;\n    } else if ($n === 1) {\n        return 1;\n    } else if ($n === 2)\
    \ {\n        return 2;\n    } else if ($n === 3) {\n        return 0;\n    } else\
    \ if ($n % 2 === 0) {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n -\
    \ 3) + fib4($n - 4);\n    } else if ($n % 2 === 1) {\n        return fib4($n -\
    \ 1) + fib4($n - 3) + fib4($n - 4);\n    }\n}", "    $fib = 4;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $fib += $fib + ($fib + ($fib + ($fib + ($fib -\
    \ 1)))));\n    }\n    return $fib;\n}\n", "    if ($n === 0) {\n        return\
    \ 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2)\
    \ {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe fibbonacci\
    \ sequence is defined as: `fib(0) = 0`, `fib(1) = 1`, `fib(2) = 1`, `fib(3) =\
    \ 2`, `fib(n) = 2^n - fib(n - 1)`, where `n` > 0. For a large `n`, this will run\
    \ into an infinite loop if you call it recursively, e.g. `fib(100)` will never\
    \ end for n = 100. You need to change the function to take a parameter and use\
    \ that parameter instead.\n<|/ c |>\n<| c |>\nI edited my answer to include the\
    \ fibonacci sequence definition.\n<|/ c |>\n<| a tags=php,algorithm dscore=1 |>\n\
    In PHP you can use the following code to get the first n fibonacci numbers:\n\
    <code>", "    $num = 0;\n    for($i = $n; $i >= 1; $i--){\n        $num += $i;\n\
    \    }\n    return $num;\n}\n", "\tif ($n < 4) return 0;\n\tif ($n == 0) return\
    \ 0;\n\tif ($n == 1) return 1;\n\treturn fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n", "\tif ($n == 0 || $n == 1) {\n\t\treturn $n;\n\t\
    } else if ($n == 2) {\n\t\treturn 2;\n\t} else if ($n == 3) {\n\t\treturn 0;\n\
    \t} else {\n\t\treturn fib4(4) + fib4(5) + fib4(6) + fib4(7);\n\t}\n}\n", "  \
    \  if ($n < 1) {\n        return 0;\n    }\n    if ($n < 2) {\n        return\
    \ 0;\n    }\n    if ($n < 3) {\n        return 2;\n    }\n    if ($n < 4) {\n\
    \        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n -\
    \ 3) + fib4($n - 4);\n}\n", "    if ($n < 4) {\n        return 0;\n    } else\
    \ {\n        return fib4($n - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n\
    \    }\n}\n", "    if ($n < 4) {\n        return $n;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\nAnd here's the\
    \ solution:\n<code>", "    if ($n <= 0) {\n        return 0;\n    }\n    if ($n\
    \ <= 3) {\n        return 0;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n}\n</code>\nSolution 2:\n<code>\n<?php", "    if ($n <=\
    \ 0) return 0;\n    if ($n === 1) return 0;\n    if ($n === 2) return 2;\n   \
    \ return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n</code>\n\
    Solution II: Recursion\nIf you look at the code above you'll see that it's essentially\
    \ the same as the fibbonaci function defined above.  But here's a recursive solution\
    \ because fibbonaci involves calling itself, which can be very useful in writing\
    \ recursive solutions.  \n<code>\n<?php", "    $fib = array();\n    $fib[0] =\
    \ 0;\n    $fib[1] = 0;\n    $fib[2] = 2;\n    $fib[3] = 0;\n    for ($i = 0; $i\
    \ <= $n; $i++) {\n        $fib[$i + 4] = $fib[$i] + $fib[$i - 2] + $fib[$i - 3]\
    \ + $fib[$i - 4];\n    }\n    return $fib[$n];\n}\n", "    // BASE CASE\n    if\
    \ ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return\
    \ 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n\n    // Recursive\
    \ Case\n    $result = fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    \n    return $result;\n}\n</code>\nThe result of the fib4 function above is cached\
    \ by PHP's garbage collector, so there is no need for you to write code that caches\
    \ it.  You can run the above code in a browser without installing any additional\
    \ modules.\n<|/ a tags=php,php-internals,php-extension dscore=1 |>\n<| c |>\n\
    Thanks! I didn't know that PHP's garbage collector would take care of such situation.\
    \ I was also able to see that $fib4 variable holds reference to fib4 function,\
    \ which I did not know about and I thought PHP garbage collector would take care\
    \ of it.\n<|/ c |>\n<| a dscore=0 |>\nI was able to do this by implementing fib4\
    \ function in C, as described in this post: http://codereview.stackexchange.com/questions/17205/fibonacci-number-in-php-without-using-recursion.\
    \ \nI then added fib4 function to my PHP-FPM module in PHP-FPM's php.ini file,\
    \ as follows:\n<code>\nextension=php-fpm.so\n</code>\nAnd I compiled PHP 5.5.9\
    \ with --enable-fib4 option (my module name is php-fib4).\nThen I created my fib4\
    \ function as follows:\n<code>\n<?php\n", "    // Return the fib4 number sequence\
    \ value for the n'th element in the Fibbonacci sequnece.\n    if ($n < 4) {\n\
    \        return 0;\n    }\n    if ($n === 4) {\n        return 4;\n    }\n   \
    \ if ($n === 5) {\n        return 4;\n    }\n    return fib4($n - 4) + fib4($n\
    \ - 3) + fib4($n - 2) + fib4($n - 1);\n}\n", "    if ($n <= 1)\n        return\
    \ $n;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n", "    if ($n <= 0) return 0;\n    if ($n <= 2) return $n;\n    return fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}", "\t$result = 1;\n\tfor ($i = 0;\
    \ $i <= $n; $i++) {\n\t\t$result = $result + $i;\n\t}\n\treturn $result;\n}\n",
  "    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return\
    \ 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4);\n}\n", "\t$a = 1;\n\t$b = 2;\n\t$c = 3;\n\t$d = 4;\n\t$result = $n;\n\t\
    for ($i = 0; $i <= $n; $i++) {\n\t\t$result = $a + $b + $c + $d;\n\t\t$c = $d;\n\
    \t\t$d = $b;\n\t\t$b = $a;\n\t\t$a = $result;\n\t}\n\treturn $result;\n}\n", " \
    \ return fib5($n, 0);\n}\n", "  return ($n == 1) ? 0 : ($n == 2) ? 1 : fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}", "  if ($n == 0) {\n    return 0;\n\
    \  } else if ($n == 1) {\n    return 1;\n  } else if ($n == 2) {\n    return 2;\n\
    \  } else if ($n == 3) {\n    return 0;\n  } else {\n    return fib4($n - 1) +\
    \ fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}", "    if ($n<=1) return\
    \ 0;\n    return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}", "   \
    \ if ($n === 0) {\n        return 0;\n    } elseif ($n === 1) {\n        return\
    \ 1;\n    } elseif ($n === 2) {\n        return 2;\n    } elseif ($n === 3) {\n\
    \        return 0;\n    } elseif ($n === 4) {\n        return 4;\n    } elseif\
    \ ($n === 5) {\n        return 0;\n    } elseif ($n === 6) {\n        return 8;\n\
    \    } elseif ($n === 7) {\n        return 14;\n    } else {\n        return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n", "    if ($n\
    \ <= 1) {\n        return 0;\n    }\n    return fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n}\n", "  if ($n <= 1) return $n;\n  $fib4 = fib4($n\
    \ - 1);\n  return $fib4 + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}", " \
    \ if ($n == 0) {\n    return 0;\n  } else if ($n == 1) {\n    return 0;\n  } else\
    \ if ($n == 2) {\n    return 2;\n  } else if ($n == 3) {\n    return 0;\n  } else\
    \ if ($n == 4) {\n    return 4;\n  } else if ($n == 5) {\n    return 8;\n  } else\
    \ if ($n == 6) {\n    return 14;\n  } else if ($n == 7) {\n    return 28;\n  }\
    \ else if ($n == 8) {\n    return 56;\n  } else if ($n == 9) {\n    return 90;\n\
    \  } else if ($n == 10) {\n    return 144;\n  } else if ($n == 11) {\n    return\
    \ 210;\n  } else if ($n == 12) {\n    return 296;\n  } else if ($n == 13) {\n\
    \    return 464;\n  } else if ($n == 14) {\n    return 672;\n  } else if ($n ==\
    \ 15) {\n    return 928;\n  } else if ($n == 16) {\n    return 1212;\n  } else\
    \ if ($n == 17) {\n    return 1560;\n  } else if ($n == 18) {\n    return 1908;\n\
    \  } else if ($n == 19) {\n    return 2324;\n  } else if ($n == 20) {\n    return\
    \ 2784;\n  } else if ($n == 21) {\n    return 3260;\n  } else if ($n == 22) {\n\
    \    return 3728;\n  } else if ($n == 23) {\n    return 4180;\n  } else if ($n\
    \ == 24) {\n    return 4684;\n  } else if ($n == 25) {\n    return 5144;\n  }\
    \ else if ($n == 26) {\n    return 5680;\n  } else if ($n == 27) {\n    return\
    \ 6168;\n  } else if ($n == 28) {\n    return 6752;\n  } else if ($n == 29) {\n\
    \    return 8164;\n  } else if ($n == 30) {\n    return 9872;\n  } else if ($n\
    \ == 31) {\n    return 12748;\n  } else if ($n == 32) {\n    return 15840;\n \
    \ } else if ($n == 33) {\n    return 19060;\n  } else if ($n == 34) {\n    return\
    \ 23228;\n  } else if ($n == 35) {\n    return 27828;\n  } else if ($n == 36)\
    \ {\n    return 33560;\n  } else if ($n == 37) {\n    return 41384;\n  } else\
    \ if ($n == 38) {\n    return 48880;\n  } else if ($n == 39) {\n    return 55344;\n\
    \  } else if ($n == 40) {\n    return 61208;\n  } else if ($n == 41) {\n    return\
    \ 67616;\n  } else if ($n == 42) {\n    return 82784;\n  } else if ($n == 43)\
    \ {\n    return 99424;\n  } else if ($n == 44) {\n    return 122084;\n  } else\
    \ if ($n == 45) {\n    return 156704;\n  } else if ($n == 46) {\n    return 193516;\n\
    \  } else if ($n == 47) {\n    return 237692;\n  } else if ($n == 48) {\n    return\
    \ 282100;;\n", "\tif ($n < 4) {\n\t\treturn $n;\n\t}\n\t$fib4 = array(\n\t\t0\
    \ => 0,\n\t\t1 => 0,\n\t\t2 => 2,\n\t\t3 => 0\n\t);\n\t$fib4[$n] = fib4($n-1)\
    \ + fib4($n-2)+fib4($n-3)+fib4($n-4);\n\treturn $fib4[$n];\n}\n", "\tif ($n ==\
    \ 0) {\n\t\treturn 0;\n\t} else if ($n == 1) {\n\t\treturn 0;\n\t} else if ($n\
    \ == 2) {\n\t\treturn 2;\n\t} else if ($n == 3) {\n\t\treturn 0;\n\t}\n\treturn\
    \ fib4($n-1) + fib4($n-2)+ fib4($n-3) + fib4($n-4);\n}", "    // Return an empty\
    \ string if n is 0 or less.\n    if ($n < 1) {\n        return '';\n    }\n  \
    \  if ($n === 1) {\n        return '0';\n    }\n    $a = fib4($n - 1);\n    $b\
    \ = fib4($n - 2);\n    $c = fib4($n - 3);\n    $d = fib4($n - 4);\n    return\
    \ $a . $b . $c . $d;\n}\n", "    if ($n === 0) {\n        return 0;\n    }\n\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n", "  \
    \  return $n>4?$n-4-fib4($n-3)-fib4($n-2)-fib4($n-1):0;\n}\n</code>\n<|/ a tags=php,fibonacci\
    \ dscore=4 |>\n<| c |>\nNice! But I suppose that recursion is faster than looping\
    \ ;)\n<|/ c |>\n<| c |>\n+1 but I think you should fix your return statements,\
    \ in PHP < 5.3 it returns a double and you should be returning a float.\n<|/ c\
    \ |>\n<| a tags=php,fibonacci |>\nHere's another solution with recursive function\
    \ call.\n<code>\n<?php\n", "    if ($n < 3) {\n        return $n;\n    }\n\n \
    \   return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n/**\n\
    \ * Fibonacci number in linear time\n */", "    return fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4); \n}\n</code>\n<|/ q tags=php,algorithm,fibonacci\
    \ |>\n<| c |>\nTry it on smaller numbers. Maybe it's just too slow to calculate\
    \ all numbers up to some million?\n<|/ c |>\n<| c |>\nThe answer will only be\
    \ correct for numbers up to a million. Try it on smaller numbers: fib4(5) is 4.\n\
    <|/ c |>\n<| c |>\nYeah I'm just guessing but maybe it is just too slow to calculate\
    \ all numbers. You can run it on paper with some smaller numbers and see if it\
    \ calculates all in under a second. Maybe the number sequence is too large to\
    \ be calculated quickly with PHP but a good compiler could probably optimize it\
    \ for you.\n<|/ c |>\n<| c |>\nYour recursive approach seems a bit strange. I\
    \ wouldn't expect this to work as intended, but if you run it on paper with small\
    \ numbers, it should work fine. You're not actually calling the function recursively,\
    \ you're just assigning values to variables.\n<|/ c |>\n<| c |>\nHave you considered\
    \ using a faster function? [link](http://stackoverflow.com/questions/43981/fib4-sequence-in-php)\n\
    <|/ c |>\n<| a dscore=2 |>\nI tested the code with PHP's microtime function, and\
    \ it works as expected:\n<code>\n$start = microtime(true);\nfib4(100);\necho \"\
    took \".(microtime(true)-$start).\" seconds\\n\";\n</code>\nResults:\n<code>\n\
    took 0.061379 seconds\n</code>\nPHP Version 5.3.2\nEDIT\nI modified the code as\
    \ follows, it works much faster.\n<code>\n<?php\nclass Fib4 {\n    public static\
    \ function fib($n) {\n        if ($n < 2) return $n;\n        $r0 = self::fib($n-2);\n\
    \        $r1 = self::fib($n-1);\n        return $r0 + $r1 + $n;\n    }\n}\n\n\
    echo \"The 100th number is \".Fib4::fib(100);\necho \"\\n\";\necho \"The 1000th\
    \ number is \".Fib4::fib(1000);\necho \"\\n\";\necho \"The 10000th number is \"\
    .Fib4::fib(10000);\necho \"\\n\";\necho \"The 100000th number is \".Fib4::fib(100000);\n\
    echo \"\\n\";\necho \"The 1000000th number is \".Fib4::fib(1000000);\necho \"\\\
    n\";\necho \"The 10000005th number is ", "  if ($n <= 0) {\n    return 0;\n  }\
    \ else if ($n === 1) {\n    return 1;\n  } else if ($n === 2) {\n    return 2;\n\
    \  } else if ($n === 3) {\n    return 0;\n  } else {\n    return fib4($n - 1)\
    \ + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}", "    if ($n < 3) {\n\
    \        return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n -\
    \ 3) + fib4($n - 4);\n}\n", "    if ($n < 4) return 0;\n    return fib4($n - 1)\
    \ + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nclass Fib6 {\n    function\
    \ fib6($n) {\n        if ($n < 4) return 0;\n        if ($n == 1) return 1;\n\
    \        return fib6($n - 1) + fib6($n - 2) + fib6($n - 3) + fib6($n - 4) + fib6($n\
    \ - 5);\n    }\n}\n", "\treturn $n>1 ? fib4($n-1) + fib4($n-2)+fib4($n-3) + fib4($n-4)+fib4($n-5)\
    \ : $n;\n}\n", "    if ($n < 4) return $n;\n    return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}", "    if ($n === 0) return 0;\n    if\
    \ ($n === 1) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3)\
    \ + fib4($n - 4);\n}", "    return $n <= 4 ? $n : fib4($n - 1) + fib4($n - 2)\
    \ + fib4($n - 3) + fib4($n - 4);\n}\n\n/**\n * Calculate the nth term of the Fibbonacci\
    \ sequence\n * fib(n) -> fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n * n: the\
    \ number we want to compute\n * return: the nth term of the Fibbonacci sequence\n\
    \ */", "    return $n <= 1 ? $n : $fib4($n - 1) + $fib4($n - 2) + $fib4($n - 3)\
    \ + $fib4($n - 4);\n}", "    if ($n < 3) {\n        return $n;\n    }\n\n    $fib4\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $fib4 += $i;\n    }\n\n   \
    \ return $fib4;\n}\n", "    // Your code here\n    if($n == 0){\n        return\
    \ 0;\n    }\n\n    if($n == 1){\n        return 0;\n    }\n\n    if($n == 2){\n\
    \        return 2;\n    }\n\n    if($n == 3){\n        return 0;\n    }\n\n  \
    \  if($n == 4){\n        return 4;\n    }\n\n    if($n == 5){\n        return\
    \ 8;\n    }\n\n    if($n == 6){\n        return 10;\n    }\n\n    if($n == 7){\n\
    \        return 16;\n    }\n\n    if($n == 8){\n        return 20;\n    }\n\n\
    \    if($n == 9){\n        return 32;\n    }\n\n    if($n == 10){\n        return\
    \ 40;\n    }\n\n    if($n == 11){\n        return 52;\n    }\n\n    if($n == 12){\n\
    \        return 64;\n    }\n\n    if($n == 13){\n        return 81;\n    }\n\n\
    \    if($n == 14){\n        return 100;\n    }\n\n    if($n == 15){\n        return\
    \ 121;\n    }\n\n    if($n == 16){\n        return 144;\n    }\n\n    if($n ==\
    \ 17){\n        return 168;\n    }\n\n    if($n == 18){\n        return 193;\n\
    \    }\n\n    if($n == 19){\n        return 216;\n    }\n\n    if($n == 20){\n\
    \        return 241;\n    }\n\n    if($n == 21){\n        return 264;\n    }\n\
    \n    if($n == 22){\n        return 281;\n    }\n\n    if($n == 23){\n       \
    \ return 300;\n    }\n\n    if($n == 24){\n        return 323;\n    }\n\n    if($n\
    \ == 25){\n        return 346;\n    }\n\n    if($n == 26){\n        return 371;\n\
    \    }\n\n    if($n == 27){\n        return 394;\n    }\n\n    if($n == 28){\n\
    \        return 418;\n    }\n\n    if($n == 29){\n        return 443;\n    }\n\
    \n    if($n == 30){\n        return 467;\n    }\n\n    if($n == 31){\n       \
    \ return 492;\n    }\n\n    if($n == 32){\n        return 517;\n    }\n\n    if($n\
    \ == 33){\n        return 542;\n    }\n\n    if($n == 34){\n        return 566;\n\
    \    }\n\n    if($n == 35){\n        return 591;\n    }\n\n    if($n == 36){\n\
    \        return 616;\n    }\n\n    if($n == 37){\n        return 637;\n    }\n\
    \n    if($n == 38){\n        return 660;\n    }\n\n    if($n == 39){\n       \
    \ return 684;\n    }\n\n    if($n == 40){\n        return 708;\n    }\n\n    if($n\
    \ == 41){\n        return 732;\n    }\n\n    if($n == 42){", "  return $n == 4\
    \ ? 0 : $n == 3 ? 2 : ($n == 4 ? 0 : $n == 4 ? 2 : fib4($n - 1) + fib4($n - 2)\
    \ + fib4($n - 3) + fib4($n - 4));\n}\n", "    if ($n == 0) {\n        return 0;\n\
    \    }\n    if ($n == 1) {\n        return 1;\n    }\n    return fib4($n-1) +\
    \ fib4($n-2) + fib4($n-3) + fib4($n-4);\n}", "  if ($n < 2) {\n    return $n;\n\
    \  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n",
  "  if ($n === 0) {\n    return 0;\n  }\n  if ($n === 1) {\n    return 1;\n  }\n\
    \  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", " \
    \ if ($n <= 0) return 0;\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3)\
    \ + fib4($n - 4);\n}\n", "\tif ($n<=3) return $n;\n\telse return fib4($n-1) +\
    \ fib4($n-2) + fib4($n-3) + fib4($n-4);\n}", "    if ($n <= 2) {\n        return\
    \ 0;\n    }\n\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n", "  if ($n === 0) {\n    return 0;\n  } else if ($n === 1) {\n \
    \   return 1;\n  } else if ($n === 2) {\n    return 2;\n  } else if ($n === 3)\
    \ {\n    return 0;\n  } else {\n    $fib = fib4($n - 1);\n    return $fib + $fib\
    \ + $fib;\n  }\n}", "    if ($n == 0) return 0;\n    if ($n == 1) return 1;\n\
    \    if ($n == 2) return 2;\n    if ($n == 3) return 0;\n    if ($n == $n - 1)\
    \ return fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "  // Make sure the\
    \ number passed is valid\n  if ($n < 0 || $n > 9) {\n    return false;\n  }\n\
    \  // If n < 4, return 0\n  if ($n < 4) {\n    return 0;\n  }\n  // If n is greater\
    \ than 4, return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  return fib4($n\
    \ - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n}\n", "    // TODO: Your\
    \ code here\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n\
    \        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if\
    \ ($n == 3) {\n        return 0;\n    } else if ($n == 4) {\n        return 1;\n\
    \    }\n\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n", "\tif ($n < 4) return $n;\n\telseif ($n % 2 == 0) return fib4($n-1) + fib4($n-3);\n\
    \telseif ($n % 3 == 0) return fib4($n-2) + fib4($n-5);\n\telsereturn fib4($n-1)\
    \ + fib4($n-3) + fib4($n-5);\n}\n", "    if ($n === 0)\n        return 0;\n  \
    \  if ($n === 1)\n        return 1;\n    if ($n === 2)\n        return 2;\n  \
    \  if ($n === 3)\n        return 0;\n    return fib4($n - 1) + fib4($n - 2) +\
    \ fib4($n - 3) + fib4($n - 4);\n}", "    $fib4Array = array(0,0,0,0,0,0,0,0,0,0);\n\
    \    if($n<0) return $fib4Array[abs($n)];\n    if($n==0) return 0;\n    if($n==1)\
    \ return 1;\n    if($n==2) return 2;\n    for($i=3;$i<=$n;$i++)\n    {\n     \
    \   $fib4Array[]=$fib4Array[$i-1]+$fib4Array[$i-2]+$fib4Array[$i-3]+$fib4Array[$i-4];\n\
    \    }\n    return $fib4Array[$n];\n}", "\tif ($n === 0) {\n\t\treturn 0;\n\t\
    } else if ($n === 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n\t}\n}\n", "    if ($n < 4) return $n;\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n", "  \
    \  return $n==0 ? 0 : fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4) ;\n}\n\
    echo fib4(5), \"\\n\";\necho fib4(6), \"\\n\";\necho fib4(7), \"\\n\";\n</code>\n\
    This was a fun problem to write as I wasn't too sure how to use the recursive\
    \ function I was given.\nNow that you have the function, how do you compute it?\
    \ Well, first we need to know what that function does mathematically. Here's an\
    \ example:\n<code>", "    return $n == 0 ? 0 : fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n}\n", "  if ($n === 0) {\n    return 0;\n  }\n  if ($n\
    \ === 1) {\n    return 1;\n  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n", "    return $n==0?0:$n==1?1:fib4($n-2) + fib4($n-3)\
    \ + fib4($n-4) ;\n}\n", "  if ($n == 0) return 0;\n  return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n}", "    if ($n == 0)\n        return 0;\n\
    \    if ($n == 1)\n        return 1;\n    if ($n == 2)\n        return 2;\n  \
    \  if ($n == 3) {\n        return 3;\n    }\n    if ($n == 4)\n        return\
    \ 4;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nclass Fib4 {\n    public function __construct($n) {\n        $this->n = $n;\n\
    \    }\n\n    public function fib4() {\n        return fib4($this->n);\n    }\n\
    }\n\n$fib = new Fib4(5);\necho $fib->fib4(); // 4\n", "    if ($n == 0)\n    \
    \    return 0;\n    if ($n == 1)\n        return 0;\n    return fib4($n - 1) +\
    \ fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n$fibo = $fib4($n);\necho \"\
    $fibo\\n\";", "    if ($n <= 4) {\n        return $n;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}", "  if ($n < 2) {\n \
    \   return 0;\n  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n", "\t$numbers = array(1,2,4,8);\n\tfor ($i = $n; $i > 1; $i--) {\n\
    \t\t$numbers[] = $numbers[$i-1] + $numbers[$i-2] + $numbers[$i-3] + $numbers[$i-4];\n\
    \t}\n\treturn $numbers[$n-1];\n}\n", "    if ($n < 2) return 0;\n    if ($n <\
    \ 4) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}", "    return $n == 4 ? $n : $n + fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n", "    if ($n < 4) {\n        return 0;\n    } elseif\
    \ ($n <= 2) {\n        return 1;\n    } elseif ($n <= 6) {\n        return 2;\n\
    \    } elseif ($n <= 8) {\n        return 3;\n    } else {\n        return fib4($n\
    \ - 4) + fib4($n - 3) + fib4($n - 2) + fib4($n - 1);\n    }\n}\n", "    return\
    \ ($n > 1) ? fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4) : $n;\n\
    }", "    if ($n == 0) {\n        return 0;\n    } elseif ($n == 1) {\n       \
    \ return 1;\n    } else {\n        return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n    }\n}\n", "    $fib=array(\n        0=>0,\n       \
    \ 1=>0,\n        2=>0,\n        3=>0,\n    );\n    for($i=4;$i<=$n;$i++)\n   \
    \     $fib[$i]=$fib[$i-1]+$fib[$i-2]+$fib[$i-3]+$fib[$i-4];\n    return $fib[$n];\n\
    }\n", "    $a = $b = 1;\n    $fib4_array = array(0);\n    for ($i = 0; $i < $n;\
    \ ++$i) {\n        $temp = $a + $b;\n        $fib4_array[] = $temp;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    return $fib4_array[$n];\n}\n</code>\n\
    <|/ a tags=php,fibonacci,math,fibonacci-number,algorithm |>\n<| c |>\nYour code\
    \ is in Python, not PHP\n<|/ c |>\n<| c |>\nWhat do you mean by *not PHP*?  That\
    \ Python code is a snippet from his question and appears to produce correct results.\
    \  And yes, this is in Python too.\n<|/ c |>\n<| c |>\nThe OP specified *not*\
    \ using recursion.\n<|/ c |>\n<| c |>\nI'm sorry, I missed that. Removed my comment\
    \ to not confuse anybody.\n<|/ c |>\n<| c |>\nNo problem, I was just making a\
    \ point of saying that it was easy to adapt this python code to a php version.\n\
    <|/ c |>\n<| a tags=php,fibonacci,math,fibonacci-number,algorithm |>\n<code>",
  "    if ($n==0) return 0;\n    if ($n==1) return 0;\n    if ($n==2) return 2;\n\
    \    return fib4($n-1) + fib4($n-2) + fib4($n-3)+ fib4($n-4);\n}\n", "    if ($n===0)\
    \ {\n        return 0;\n    }\n    if ($n===1) {\n        return 1;\n    }\n \
    \   return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}", "  if ($n <\
    \ 0) throw new Exception(\"Negative numbers are not allowed in this program.\"\
    );\n  $fibArray = array();\n  \n  // if n is less than or equal to 0 then return\
    \ 0 as the fib4 number sequence starts at 0.\n  if ($n < 1) return 0;\n  \n  //\
    \ if n is greater than or equal to 3 then return 0 as the fib4 number sequence\
    \ starts at 0.\n  if ($n >= 4) return 0;\n  \n  // If n is between 2 and 4 then\
    \ call the fib4 function with $n - 1 as the argument and save its returned value\n\
    \  // in the array and return the sum of the values in the array.\n  foreach (array($n\
    \ - 2, $n - 3, $n - 4) as $k) {\n    $fibArray[] = fib4($k);\n  }\n  \n  // Return\
    \ the sum of the values in the array\n  return $fibArray[0] + $fibArray[1] + $fibArray[2]\
    \ + $fibArray[3];\n}", "    if ($n < 3) {\n        return $n;\n    }\n    return\
    \ fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n}", "    return ($n < 4)\
    \ ? $n : (fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4));\n}\n", " \
    \ if ($n <= 1) {\n    return $n;\n  } else {\n    return fib4($n - 1) + fib4($n\
    \ - 2) + fib4($n - 3) + fib4($n - 4);\n  }\n}\n", "    if ($n == 0){\n       \
    \ return 0;\n    }\n    if ($n == 1){\n        return 0;\n    }\n    if ($n ==\
    \ 2){\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    if ($n == 4) {\n        return 4;\n    }\n    return fib4($n-1) + fib4($n-2)\
    \ + fib4($n-3) + fib4($n-4);\n}\necho \"fib4 number: \", fib4(10), \"\\n\";",
  "  return ($n<=1)?$n:fib4($n-2) + fib4($n-3) + fib4($n-4);\n}\n", "    if ($n ==\
    \ 0) return 0;\n    if ($n == 1) return 1;\n    if ($n == 2) return 2;\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n", "    if ($n\
    \ === 0) {\n        return 0;\n    } elseif ($n === 1) {\n        return 0;\n\
    \    } elseif ($n === 2) {\n        return 2;\n    } else {\n        return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n}\n", "    $a = 1;\n\
    \    $b = 2;\n    $c = 1;\n    $d = 1;\n    for ($i = 0; $i <= $n; $i++) {\n \
    \       echo \"$a $b $c $d $n\\n\";\n        $a = $b;\n        $b = $c;\n    \
    \    $c = $d;\n        $d = $a + $b + $c + $d;\n    }\n    return $d;\n}\n", " \
    \   if ($n <= 3) {\n        return $n;\n    } elseif ($n <= 5) {\n        return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\n$n = 7;\necho\
    \ fib4($n);", "    return $n == 0 ? 0 : $n == 1 ? 1 : fib4($n - 1) + fib4($n -\
    \ 2) + fib4($n - 3) + fib4($n - 4);\n}", "    for($i = 0, $sum = 0; $i < $n; $i++,\
    \ $sum = $sum + $i);\n    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "\tif ($n <= 0) {\n\t\treturn 0;\n\t} else if ($n <= 1) {\n\t\t\
    return 1;\n\t} else {\n\t\treturn fib4($n - 1) + fib4($n - 2);\n\t}\n}", "   \
    \ if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return\
    \ 1;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n -\
    \ 4);\n}\n", "    $a = 0;\n    $b = 1;\n    $sum = 0;\n    while ($n >= 0) {\n\
    \        $sum += $a;\n        $a = $b;\n        $b = $n;\n        $n--;\n    }\n\
    \    return $sum;\n}\n\n/**\n * Compute a factorial recursively\n *\n * @param\
    \ int $n\n * @return int\n */", "  if($n <= 0) {\n    return 0;\n  }\n  if($n\
    \ <= 3) {\n    return $n;\n  }\n  return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n", "   if ($n <= 2) return $n;\n   return fib4($n -\
    \ 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
