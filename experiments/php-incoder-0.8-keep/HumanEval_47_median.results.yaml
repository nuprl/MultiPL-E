name: HumanEval_47_median
language: php
results:
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$l = array_map('abs', $l);\n\tsort($l);\n\t$n = count($l);\n\
    \tif ($n%2 == 0) {\n\t\treturn $l[($n-1)/2];\n\t} else {\n\t\treturn ($l[($n-1)/2]\
    \ + $l[($n-1)/2 - 1])/2;\n\t}\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppq16gaum.php:22\n\
    Stack trace:\n#0 /tmp/tmppq16gaum.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppq16gaum.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  $d = 0.0;\n  foreach ($l as $x) { $d += $x;\
    \ }\n  return $d / $n;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxl0dqgmg.php:18\n\
    Stack trace:\n#0 /tmp/tmpxl0dqgmg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxl0dqgmg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    if (count($l) < 2) return $l[0];\n    $n =\
    \ count($l);\n    $m = floor(count($l) / 2);\n    return ($n % 2 ? $l[$m] : ($l[$m-1]\
    \ + $l[$m]) / 2);\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx62z_ys7.php:20\n\
    Stack trace:\n#0 /tmp/tmpx62z_ys7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpx62z_ys7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) % 2 === 0) {\n    // Even number of elements\n\
    \    return $l[count($l) / 2 - 1];\n  }\n  return $l[count($l) / 2];\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkve08fcy.php:20\n\
    Stack trace:\n#0 /tmp/tmpkve08fcy.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkve08fcy.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if ($l == 0) {\n        return 0;\n    }\n    $n = count($l);\n\
    \    $m = ($n % 2 == 0) ? (($n + 1) / 2) : ($n / 2);\n    if ($n % 2 == 1) {\n\
    \        return $l[$m];\n    }\n    return $l[intval($m + ($m / 2)) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81155ywb.php:24\n\
    Stack trace:\n#0 /tmp/tmp81155ywb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp81155ywb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[count($l)/2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4tqjgdk3.php:16\n\
    Stack trace:\n#0 /tmp/tmp4tqjgdk3.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4tqjgdk3.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!$l) return null;\n  $count = count($l);\n  if ($count &\
    \ 1) return $l[(count($l)/2)];\n  else return (count($l) -1)/2*(array_pop($l)\
    \ + $l[(count($l)/2)]);\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkr9w3qms.php:18\n\
    Stack trace:\n#0 /tmp/tmpkr9w3qms.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpkr9w3qms.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2) return $l[($n\
    \ + 1) / 2];\n    else return ($l[($n - 1) / 2] - $l[($n - 2) / 2];\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpzi3colpe.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[count($l)/2] ?? $l[0]; // use 0 as default value\
    \ if empty\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jqpk9aa.php:16\n\
    Stack trace:\n#0 /tmp/tmp5jqpk9aa.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5jqpk9aa.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (is_null($l)) {\n        return NULL;\n    }\n    return\
    \ array_sum($l) / count($l);\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9v1gg_ei.php:19\n\
    Stack trace:\n#0 /tmp/tmp9v1gg_ei.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9v1gg_ei.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Find how many elements are in l.\n    $n = count($l);\n\
    \n    // If we have an odd number of elements, median is just the\n    // average\
    \ of the two middle elements.\n    if ($n % 2) {\n        $mid = floor($n/2);\n\
    \        return ($l[$mid-1] + $l[$mid]) / 2;\n    }\n\n    // If the number of\
    \ elements is an even number, then\n    // the median is just the first middle\
    \ element.\n    return $l[floor($n/2)];\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6o4rldxh.php:28\n\
    Stack trace:\n#0 /tmp/tmp6o4rldxh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6o4rldxh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $count       = count($l);\n    $middle     = floor($count\
    \ / 2);\n    $is_median = $count == 1 || $count == 0;\n\n    return ($is_median\
    \ ? $l[0] : (isset($l[$middle]) ? $l[$middle] : median($l)));\n}\n</code>\n<|/\
    \ a tags=php |>\n<| c |>\nThis doesn't appear to work on a list (e.g. `median([1,5,2,3,4,5])`\
    \ will return `2` instead of `3`).\n<|/ c |>\n<| c |>\n- It does work on arrays,\
    \ I tested it before posting. But a comment was made saying that it doesnt work\
    \ with \"stdClass objects\" so here is an updated version of my function to work\
    \ with stdClass objects. [https://3v4l.org/t8LpP](https://3v4l.org/t8LpP)\n<|/\
    \ c |>\n<| c |>\nYeah, I commented on that. My test array had numbers, not objects,\
    \ so I thought it wasn't working. I tested on [phpfiddle](https://phpfiddle.org/main/code/yjyd-9qz6)\
    \ with the array in your link, and it didn't work. `stdClass Object` didn't exist\
    \ when I wrote that comment. Thanks for testing with that.\n<|/ c |>\n<| a dscore=1\
    \ tags=php |>\nThis works for me in PHP7 (I did test it in PHPfiddle and it is\
    \ working just fine):\n<code>\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp85jy5ipc.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  return $l[count($l) / 2]; }\n\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd654s6ie.php:16\n\
    Stack trace:\n#0 /tmp/tmpd654s6ie.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpd654s6ie.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\tif ($l == 0) return 0;\n\treturn ($l[count($l)/2-1]\
    \ + $l[count($l)/2]) / 2;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8tfem0w1.php:17\n\
    Stack trace:\n#0 /tmp/tmp8tfem0w1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8tfem0w1.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = $l ? $l : array();\n    sort($l);\n    if (count($l)\
    \ % 2 == 0) {\n        return $l[(count($l) / 2) - 1];\n    } else {\n       \
    \ return ($l[(count($l) / 2)] + $l[count($l) / 2 - 1]) / 2;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphmqr_ldi.php:22\n\
    Stack trace:\n#0 /tmp/tmphmqr_ldi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphmqr_ldi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    return $l[count($l)/2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0l_hd6p.php:18\n\
    Stack trace:\n#0 /tmp/tmps0l_hd6p.php(24): test()\n#1 {main}\n  thrown in /tmp/tmps0l_hd6p.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = is_array($l) ? $l : array();\n  asort($l);\n  $count =\
    \ count($l);\n  if ($count === 0) {\n    return 0;\n  }\n  if ($count === 1) {\n\
    \    return $l[0];\n  }\n  $middle = $count >> 1;\n  if ($middle & 1) {\n    return\
    \ $l[$middle];\n  }\n  return ($l[$middle - 1] + $l[$middle]) / 2.0;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nI wonder why this isn't the default.  And if you use\
    \ an anonymous function, why not just use array_map?\n<|/ c |>\n<| a tags=php,arrays,function\
    \ |>\nYou can try this :\n<code>\n$array = array(1, 3, 5, 7, 11, 13);\n\n$max\
    \ = max($array);\n$min = min($array);\n\n$average = array_sum($array)/count($array);\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThat is the wrong way around. `array_sum`\
    \ isn't guaranteed to return the correct results. See [this answer](http://stackoverflow.com/a/10268591/4288043).\n\
    <|/ c |>\n<| c |>\narray_sum will work only if the array is associative array..\
    \ so if the array is having numeric keys then it will not work..\n<|/ c |>\n<|\
    \ a |>\n<code>\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpgb5zz89l.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  foreach ($l as $v) $i = floor($l/2);\n  return\
    \ ($l[$i] + $l[$i - 1]) / 2;\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp8ubhpki9.php:9\n\
    Stack trace:\n#0 /tmp/tmp8ubhpki9.php(14): median(Array)\n#1 /tmp/tmp8ubhpki9.php(18):\
    \ candidate(Array)\n#2 /tmp/tmp8ubhpki9.php(25): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp8ubhpki9.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Make sure we have an array.\n    if (is_array($l)) {\n\
    \        // Calculate the median.\n        $m = null;\n        $n = count($l);\n\
    \        if ($n > 0)\n            $m = floor($n / 2);\n        else\n        \
    \    return null;\n\n        // Sort and return the median.\n        ksort($l);\n\
    \        return isset($l[$m]) ? $l[$m] : null;\n    } else {\n        // A scalar,\
    \ return it.\n        return $l;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjm_xsid0.php:32\n\
    Stack trace:\n#0 /tmp/tmpjm_xsid0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjm_xsid0.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Sort the list.\n  sort($l);\n  // If the list is empty, return\
    \ null.\n  if (count($l) === 0) {\n    return null;\n  }\n  // Return the list\
    \ length if there is an odd number of elements.\n  if (count($l) % 2 !== 0) {\n\
    \    return count($l) / 2;\n  }\n  // Find the midpoint of the list\n  $mid =\
    \ array_search((count($l) / 2), $l);\n  // Find the median using binary search.\n\
    \  return isset($l[$mid]) ? $l[$mid] : median($l, $mid - 1, $mid);\n}\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tmz_uy_.php:28\n\
    Stack trace:\n#0 /tmp/tmp7tmz_uy_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7tmz_uy_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    return $l[count($l)-1];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpl2_3expo.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpl2_3expo.php:16\nStack trace:\n#0 /tmp/tmpl2_3expo.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl2_3expo.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) == 0) {\n    return 0;\n  }\n  sort($l);\n  \n\
    \  // Find the middle of the list\n  $middle = ceil(count($l) / 2);\n  \n  //\
    \ Return median if even number of items\n  if (count($l) % 2 == 0) {\n    return\
    \ $l[$middle];\n  }\n  \n  // Return the average of the middle two numbers\n \
    \ return (number_format((($l[$middle-1] + $l[$middle]) / 2), 0, '.', ''));\n}\n\
    \nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzhczgty.php:30\n\
    Stack trace:\n#0 /tmp/tmpxzhczgty.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxzhczgty.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $s = $l = array_count_values($l);\n    arsort($s);\n    $n\
    \ = count($s);\n    if ($n % 2)\n        return $s[$n/2];\n    return ($s[($n\
    \ - 1) / 2] + $s[($n - 2) / 2]) / 2.0;\n}\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10zrogzb.php:20\n\
    Stack trace:\n#0 /tmp/tmp10zrogzb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp10zrogzb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return ($l[count($l)/2] + $l[count($l)/2 - 1]) / 2.0;\n}\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ejx2jyd.php:15\n\
    Stack trace:\n#0 /tmp/tmp0ejx2jyd.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0ejx2jyd.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    $middle = ceil($n/2);\n    if ($n % 2\
    \ == 0) {\n        return $l[$middle];\n    } else {\n        return (array_pop($l)\
    \ + array_pop($l))/2;\n    }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ytecogb.php:21\n\
    Stack trace:\n#0 /tmp/tmp0ytecogb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0ytecogb.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  if ($n < 2) {\n    throw new Exception(\"\
    median requires at least two elements\");\n  }\n\n  sort($l);\n\n  $midpoint =\
    \ floor($n / 2);\n  $a = $l[$midpoint];\n  $b = $l[($midpoint + 1 )];\n\n  return\
    \ $a + $b / 2;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0x_njx2b.php:27\n\
    Stack trace:\n#0 /tmp/tmp0x_njx2b.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0x_njx2b.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $sortedArray = sort($l);\n  $sortedArrayCount = count($sortedArray);\n\
    \  if ($sortedArrayCount % 2 == 0) {\n    return $sortedArray[$sortedArrayCount\
    \ / 2 - 1];\n  } else {\n    return (isset($sortedArray[$sortedArrayCount / 2]))\
    \ ? $sortedArray[$sortedArrayCount / 2] : $sortedArray[$sortedArrayCount / 2 -\
    \ 1];\n  }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpnghgg6nm.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnghgg6nm.php:21\nStack trace:\n#0 /tmp/tmpnghgg6nm.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnghgg6nm.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = sort($l);\n  return $l[count($l)/2];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpgygu8sj3.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgygu8sj3.php:16\nStack trace:\n#0 /tmp/tmpgygu8sj3.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgygu8sj3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  return $l[count($l)/2];\n}\n$median = median($data);\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmppghb8lvq.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppghb8lvq.php:16\nStack trace:\n#0 /tmp/tmppghb8lvq.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppghb8lvq.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = sizeof($l);\n  if ($n < 1) {\n    return 0;\n  }\n  $half\
    \ = $n / 2;\n  if ($n % 2 == 0) {\n    return $l[$half];\n  }\n  else {\n    return\
    \ ($l[$half - 1] + $l[$half]) / 2;\n  }\n}\nfunction candidate(...$args) {\n \
    \   return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptivv4fmp.php:25\n\
    Stack trace:\n#0 /tmp/tmptivv4fmp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptivv4fmp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = array_filter($l);\n    $n = count($l) - 1;\n    return\
    \ $n & 1 ? $l[$n/4] : (($n-$n%2) / 2)+$l[$n/4];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqcxehbz.php:18\n\
    Stack trace:\n#0 /tmp/tmpzqcxehbz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzqcxehbz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tif (count($l) % 2 == 0) {\n\t\treturn ((count($l) / 2) * $l[count($l)\
    \ / 2]);\n\t} else {\n\t\t$middle = count($l) / 2;\n\t\treturn array_sum($l) /\
    \ $middle;\n\t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3w_f2yx.php:21\n\
    Stack trace:\n#0 /tmp/tmpj3w_f2yx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpj3w_f2yx.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n-1]\
    \ + $l[$n/2])/2;\n    } else {\n        return $l[$n/2];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyc9n72x2.php:20\n\
    Stack trace:\n#0 /tmp/tmpyc9n72x2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyc9n72x2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  return $l[floor(($l[0]+$l[count($l)-1])/2)];\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0a3pi55u.php:17\n\
    Stack trace:\n#0 /tmp/tmp0a3pi55u.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0a3pi55u.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (!is_array($l)) {\n        throw new Exception('Not an\
    \ array');\n    }\n\n    $n = count($l);\n    if ($n === 0) {\n        throw new\
    \ Exception('No elements');\n    }\n\n    if ($n === 1) {\n        return $l[0];\n\
    \    }\n\n    // Return average of the middle two numbers in the list.\n    //\
    \ >>> median([3, 1, 2, 4, 5])\n    // 3\n    // >>> median([3, 1, 2, 4, 5])\n\
    \    // 2.5\n    $l = array_slice($l, ceil($n / 2), ceil(2 * $n / 2));\n    return\
    \ $l[count($l) - 1];\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpov4133ae.php:34\n\
    Stack trace:\n#0 /tmp/tmpov4133ae.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpov4133ae.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $num = count($l);\n  if ($num < 2) { return NULL; }\n  $sorted\
    \ = array_values($l);\n  sort($sorted);\n  return $sorted[(count($sorted) - 1)\
    \ / 2];\n}\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbz7skjq.php:20\n\
    Stack trace:\n#0 /tmp/tmpvbz7skjq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvbz7skjq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$size = sizeof($l);\n\tif ($size % 2 == 0) {\n\t\t// even\n\t\
    \treturn $l[($size / 2) - 1];\n\t}\n\telse {\n\t\t// odd\n\t\treturn ($l[($size\
    \ / 2) - 1] + $l[($size / 2)]);\n\t}\n}\n\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80r1cj8w.php:25\n\
    Stack trace:\n#0 /tmp/tmp80r1cj8w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp80r1cj8w.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $l = $l[count($l)/2];\n  if ($l<0) {\n    $l =\
    \ -$l;\n  }\n  return $l;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bmfsdgm.php:21\n\
    Stack trace:\n#0 /tmp/tmp9bmfsdgm.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9bmfsdgm.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if ($l){\n        return array_sum($l)/count($l);\n    } else\
    \ {\n        return NULL;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp745zkpd6.php:20\n\
    Stack trace:\n#0 /tmp/tmp745zkpd6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp745zkpd6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[sizeof($l)/2];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnbbscxn.php:15\n\
    Stack trace:\n#0 /tmp/tmprnbbscxn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprnbbscxn.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!is_array($l)) return null;\n  if ($l == array()) return\
    \ null;\n  $l = array_slice($l, array_search((array_sum($l) / count($l)), $l));\n\
    \  $l = array_filter($l);\n  if (count($l) >= 2) $l = $l[0] + $l[1];\n  return\
    \ $l;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5pknw38.php:20\n\
    Stack trace:\n#0 /tmp/tmp_5pknw38.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_5pknw38.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Sort $l in place so that it can be passed to quickselect().\n\
    \    sort($l);\n\n    // Partition into three parts around median of $l.\n   \
    \ $l1 = array_slice($l, 0, ceil(count($l) / 2));\n    $l2 = array_slice($l, ceil(count($l)\
    \ / 2));\n    $l3 = array_slice($l, 0, count($l) - ceil(count($l) / 2));\n\n \
    \   // Find the median of $l1, $l2, and $l3.\n    $med = ($l1[count($l1) / 2]\
    \ + $l2[count($l2) / 2] + $l3[count($l3) / 2]) / 3;\n\n    // Quickselect to find\
    \ median of three sorted lists.\n    return $med;\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoflhqulc.php:28\n\
    Stack trace:\n#0 /tmp/tmpoflhqulc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpoflhqulc.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $count = count($l);\n    if ($count === 0) {\n        trigger_error(\"\
    median requires a non-empty array\", E_USER_ERROR);\n    }\n    $sorted = $l;\n\
    \    sort($sorted);\n    return $sorted[(count($sorted) - 1) / 2];\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nI've written a PHP function to find the median of\
    \ an array of integers.\n<code>\n/**\n * Function to find the median of an array\
    \ of integers\n *\n * integer $arr The array to find the median of\n *\n * integer\
    \ The median of the array\n */\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp2r_tb8c7.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $count = count($l);\n    if ($count == 0) {\n        return\
    \ NULL;\n    }\n\n    $sorted = array_merge([$l[0]], $l);\n    sort($sorted);\n\
    \    $sorted = array_slice($sorted, 0, $count/2);\n\n    return $sorted[count($sorted)-1];\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=1 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpfbe4fne2.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    $m = floor(($n +\
    \ 1.0) / 2);\n    if ($n % 2) {\n        return $l[$m];\n    }\n    $k = array_keys($l,\
    \ $l[$m]);\n    return $l[$k[0]];\n}\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp_dy9not3.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_dy9not3.php:22\nStack trace:\n#0 /tmp/tmp_dy9not3.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_dy9not3.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Return median of list.\n  if (!is_array($l)) {\n    trigger_error(\"\
    Input must be an array\", E_USER_ERROR);\n  }\n  return $l[count($l) / 2 - 1];\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqamq_de.php:20\n\
    Stack trace:\n#0 /tmp/tmpyqamq_de.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyqamq_de.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!empty($l)) {\n    return ($l[sizeof($l)/2 - 1] + $l[sizeof($l)/2])\
    \ / 2;\n  }\n  return false;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppb3zzyb2.php:18\n\
    Stack trace:\n#0 /tmp/tmppb3zzyb2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppb3zzyb2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    $mid = $len / 2;\n \
    \   return $l[$mid];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzp8a9i0z.php:20\n\
    Stack trace:\n#0 /tmp/tmpzp8a9i0z.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzp8a9i0z.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  if ($n <= 1) return $l[0];\n\n  // Choose\
    \ median as average of three middle elements.\n  $l = array_slice($l, 0, ($n -\
    \ 1) / 2);\n  $m = array_slice($l, ($n - 1) / 2);\n  $k = array_slice($l, $n -\
    \ 1);\n  return ($m[0] + $k[0]) / 2;\n}\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbo4hqf4.php:22\n\
    Stack trace:\n#0 /tmp/tmpxbo4hqf4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxbo4hqf4.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[count($l)/2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt_iykgp.php:16\n\
    Stack trace:\n#0 /tmp/tmplt_iykgp.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplt_iykgp.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!empty($l)) {\n    $l = array_reverse($l);\n    return $l[count($l)\
    \ / 2] / 2;\n  }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstv7lx10.php:18\n\
    Stack trace:\n#0 /tmp/tmpstv7lx10.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpstv7lx10.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    return $l[(count($l) - 1) / 2];\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nNice, though it's not exactly O(n).\n<|/ c |>\n<|\
    \ c |>\n: You're right, it isn't O(n), but O(n log n) for a list. I've edited\
    \ my post to include a sorting algorithm that is O(n log n).\n<|/ c |>\n<| c |>\n\
    : Oh okay, I misunderstood you, I thought you were just referring to \"sort\"\
    .\n<|/ c |>\n<| c |>\nSort can be O(n log n). You just have to sort twice. The\
    \ first time takes O(n), the second time is O(n log n).\n<|/ c |>\n<| c |>\nI\
    \ guess, if you're looking for O(n) solutions then the answer is \"No\".\n<|/\
    \ c |>\n<| a dscore=4 |>\nI wrote a javascript solution to do this in O(n).\n\
    <code>\nvar median = function (arr) {\n  var mid = arr.length >> 1;\n  var left\
    \ = arr.slice(0, mid);\n  var right = arr.slice(mid, arr.length);\n  if (left.length\
    \ && right.length) \n    return (arr[mid] - arr[mid - 1] + arr[mid] - arr[mid])\
    \ / 4;\n  else if (left.length)\n    return arr[mid - 1];\n  else if (right.length)\n\
    \    return arr[mid];\n  else return NaN;\n};\n</code>\n<|/ a tags=sorting,algorithm,median,javascript\
    \ |>\n<| a dscore=3 |>\nA Python solution:\n<code>\ndef median(lst):\n    lst\
    \ = sorted(lst)\n    n = len(lst)\n    if n % 2 == 0:\n        return (lst[n//2-1]\
    \ + lst[n//2]) / 2\n    else:\n        return lst[n//2]\n</code>\n<|/ a tags=sorting,algorithm,median,javascript\
    \ |>\n<| a tags=sorting,algorithm,median,javascript dscore=3 |>\nHere's a Python\
    \ version. It returns either a value from the list or None:\n<code>\ndef median(l):\n\
    \    n = len(l)\n    if n % 2 == 0:\n        return l[n//2]\n    else:\n     \
    \   return (l[n//2-1] + l[n//2]) / 2.0\n</code>\n<|/ a |>\n<| c |>\nFor me this\
    \ returns `None` for uneven lists. `l = [1,2,3]; l[2::2]; print median(l)` returns\
    \ `None` while `l = [1,2,3]; print \nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0ar1hqm3.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $count = count($l);\n    if ($count === 0) return null;\n\
    \    $sorted_array = sort($l);\n    $mid = (int) ($count / 2);\n    if ($mid ===\
    \ $count) {\n        return $sorted_array[0];\n    }\n    return ($sorted_array[$mid\
    \ + 0] + $sorted_array[$mid]) / 2;\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp911efv_4.php:23\n\
    Stack trace:\n#0 /tmp/tmp911efv_4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp911efv_4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = array_values($l);\n  sort($l);\n  return $l[count($l) /\
    \ 2]; // Python sort\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaj1k0a7j.php:18\n\
    Stack trace:\n#0 /tmp/tmpaj1k0a7j.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpaj1k0a7j.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n % 2 === 0) {\n        // even\n\
    \        return ($l[intval(($n + 1) / 2)]);\n    }\n    else {\n        // odd\n\
    \        $m1 = $l[intval(($n - 1) / 2)];\n        $m2 = $l[intval(($n - 2) / 2)];\n\
    \        return ($m1 + ($m2 - $m1) / ($n - 1));\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpavn584w_.php:26\n\
    Stack trace:\n#0 /tmp/tmpavn584w_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpavn584w_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    return $l[count($l)/2];\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp_7ew2it4.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_7ew2it4.php:17\nStack trace:\n#0 /tmp/tmp_7ew2it4.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_7ew2it4.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tif (count($l) % 2) {\n\t\treturn $l[(count($l) / 2) - 1];\n\t\
    } else {\n\t\t$middle = count($l) / 2 - 1;\n\t\treturn ($l[$middle] + $l[$middle\
    \ - 1]) / 2.0;\n\t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi0onrdd2.php:21\n\
    Stack trace:\n#0 /tmp/tmpi0onrdd2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpi0onrdd2.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $sorted = $l;\n  sort($sorted);\n  $len = count($sorted);\n\
    \  if($len == 1) {\n    return $sorted[0];\n  }\n  return ($len % 2) ? ($sorted[$len\
    \ / 2 - 1] + $sorted[$len / 2]) / 2 : (($sorted[$len / 2] + $sorted[$len / 2 -\
    \ 1]) / 2);\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpu4d193.php:22\n\
    Stack trace:\n#0 /tmp/tmpfpu4d193.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfpu4d193.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = array_sort($l);\n    return $sorted[count($sorted)\
    \ / 2 - (count($sorted) % 2)];\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_sort()\
    \ in /tmp/tmpint1t_bo.php:8\nStack trace:\n#0 /tmp/tmpint1t_bo.php(13): median(Array)\n\
    #1 /tmp/tmpint1t_bo.php(17): candidate(Array)\n#2 /tmp/tmpint1t_bo.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpint1t_bo.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = array_filter($l);\n  if (count($l) == 0) return NULL;\n\
    \  $sorted = $l;\n  sort($sorted);\n  $l = array_slice($sorted, 0, count($l) /\
    \ 2);\n  return $l[count($l) / 2];\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupuugceh.php:21\n\
    Stack trace:\n#0 /tmp/tmpupuugceh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpupuugceh.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $size = sizeof($l) / 2;\n    return $size %\
    \ 2 == 0 ? $l[$size/2] : $l[($size-1)/2]; \n}\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1gaf02d.php:17\n\
    Stack trace:\n#0 /tmp/tmpi1gaf02d.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpi1gaf02d.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $s = count($l);\n  if ($s < 2) return $s[0];\n  sort($l);\n\
    \  $half = $s / 2;\n  $m1 = $l[$half];\n  $m2 = $l[--$half];\n  while ($m1 + $m2\
    \ > $midpoint($l, $half)) {\n    $m1 = $l[$half++];\n    $m2 = $l[--$half];\n\
    \  }\n  return $m1;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpk651op6d.php:14\n\
    Stack trace:\n#0 /tmp/tmpk651op6d.php(21): median(Array)\n#1 /tmp/tmpk651op6d.php(25):\
    \ candidate(Array)\n#2 /tmp/tmpk651op6d.php(32): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpk651op6d.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $count = count($l);\n  if ($count == 0) {\n    return;\n  }\n\
    \  if ($count % 2 == 0) {\n    return ($l[$count / 2 - 1] + $l[$count / 2]) /\
    \ 2;\n  }\n  return $l[$count / 2];\n}\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv90x5uaf.php:22\n\
    Stack trace:\n#0 /tmp/tmpv90x5uaf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpv90x5uaf.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $mid = count($l)/ 2;\n  if ($l[$mid] == ($mid+1)/2)\
    \ { // average of two medians\n    return $mid;\n  } else {\n    return $l[$mid];\n\
    \  }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp94hwn62f.php:22\n\
    Stack trace:\n#0 /tmp/tmp94hwn62f.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp94hwn62f.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = array_sort($l);\n    $median = $sorted[count($sorted)/2];\n\
    \    return $median;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_sort()\
    \ in /tmp/tmpj26wz_e9.php:8\nStack trace:\n#0 /tmp/tmpj26wz_e9.php(14): median(Array)\n\
    #1 /tmp/tmpj26wz_e9.php(18): candidate(Array)\n#2 /tmp/tmpj26wz_e9.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj26wz_e9.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // If l is empty return 0.\n  if (!$l)\n    return 0;\n  //\
    \ Return the median of l.\n  elseif (count($l) / 2 == 1) {\n    return $l[0];\n\
    \  }\n  // Return the middle element.\n  else {\n    return ($l[0] + $l[count($l)\
    \ / 2]) / 2;\n  }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjp6znf6.php:25\n\
    Stack trace:\n#0 /tmp/tmpwjp6znf6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwjp6znf6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Sort the list before computing median.\n  $l = $l ?? [];\n\
    \  sort($l);\n  if (count($l) < 2) {\n    return 0;\n  }\n  return $l[(count($l)\
    \ - 1) /\n      2];\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=php |>\nAnother\
    \ way of doing this is using array_search to get the current array key that contains\
    \ the median and then array_slice to get the item from that key to the end.\n\
    <code>\n$array = [\n    0 => 1,\n    1 => 2,\n    2 => 2,\n    3 => 3,\n    4\
    \ => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n   \
    \ 10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n    15\
    \ => 15,\n    16 => 16,\n];\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpiif_q_9l.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    $m = $n % 2 ? $n/2 : 1;\n\
    \    return ($l[$m-1] + $l[$m]) / 2.0;\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymd9qmix.php:19\n\
    Stack trace:\n#0 /tmp/tmpymd9qmix.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpymd9qmix.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[count($l)/2];\n}\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6e3a1lb3.php:15\n\
    Stack trace:\n#0 /tmp/tmp6e3a1lb3.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp6e3a1lb3.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) === 0) {\n    return 0;\n  }\n\n  // Keep a sorted\
    \ list of all the elements.\n  $s = array();\n  for ($i = 0; $i < count($l); $i++)\
    \ {\n    $s[] = $l[$i];\n  }\n\n  // Find the midpoints of those elements.\n \
    \ $midpoint = 0;\n  for ($i = 1; $i < count($s); $i++) {\n    $midpoint += $s[($i\
    \ - 1)];\n  }\n\n  // Then find the median of this midpoint.\n  return ($midpoint\
    \ + ($s[count($s) >> 1] / 2)) / 2.0;\n}\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqepj1m_l.php:32\n\
    Stack trace:\n#0 /tmp/tmpqepj1m_l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqepj1m_l.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) < 2) return $l[0];\n  $n = count($l) / 2;\n  return\
    \ $l[$n] + ($l[$n + 1] - $l[$n]) / 2;\n}\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lf7m9gd.php:18\n\
    Stack trace:\n#0 /tmp/tmp6lf7m9gd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6lf7m9gd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = sort($l);\n  return $l[floor(count($l) / 2)];\n}\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpgt71cion.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgt71cion.php:16\nStack trace:\n#0 /tmp/tmpgt71cion.php(23):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgt71cion.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$l = sort($l);\n\tif ($l[0] == 0) return 0;\n\tif ($l[0] ==\
    \ -1) return count($l)/2;\n\tif ($l[count($l)-1] == -1) return count($l)/2+1;\n\
    \tif ($l[0] < 0) return $l[count($l)-1] + $l[0];\n\treturn $l[(count($l)-1)/2];\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzild8wlc.php:20\n\
    Stack trace:\n#0 /tmp/tmpzild8wlc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzild8wlc.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $l = array_reverse($l);\n    return $l[floor(count($l)\
    \ / 2)];\n}\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_rpv3ym3.php:18\n\
    Stack trace:\n#0 /tmp/tmp_rpv3ym3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_rpv3ym3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[count($l)%2];\n}\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4b6wj29.php:15\n\
    Stack trace:\n#0 /tmp/tmph4b6wj29.php(22): test()\n#1 {main}\n  thrown in /tmp/tmph4b6wj29.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!$l) return null;\n  $l = array_reverse($l);\n  usort($l,\
    \ function($a, $b) {\n    return ($a - $b) / abs($b);\n  });\n  return $l[0];\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4ondsc9.php:20\n\
    Stack trace:\n#0 /tmp/tmpn4ondsc9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpn4ondsc9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\treturn $l[count($l) / 2] if @is_array($l) and $l and count($l)\
    \ % 2; // $l[count($l) / 2]\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpxswl5cfh.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $length = count($l);\n  if ($length % 2) { // even\n    $m =\
    \ ($l[$length / 2 - 1] + $l[$length / 2]) / 2;\n  } else { // odd\n    $m = $l[$length\
    \ / 2];\n  }\n  if ($m < 0) {\n    $m = 0;\n  }\n  return $m;\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5ui4dm6.php:24\n\
    Stack trace:\n#0 /tmp/tmpn5ui4dm6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpn5ui4dm6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!is_array($l)) {\n    throw new Exception('Input must be\
    \ a list');\n  }\n  $l = array_filter($l);\n  if (empty($l)) {\n    return null;\n\
    \  }\n  $n = count($l);\n  if ($n <= 1) {\n    return $l[0];\n  }\n  $half = $n/2;\n\
    \  $l[0] = $l[$half];\n  $l[$half] = $l[$n-1];\n  $l[$n-1] = $l[$n-2];\n  $l[$n-2]\
    \ = $l[0];\n  return ($l[0]+$l[$n-1]+$l[$n-2])/3;\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24ohmbjb.php:32\n\
    Stack trace:\n#0 /tmp/tmp24ohmbjb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp24ohmbjb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!count($l)) {\n    return 0;\n  }\n  sort($l);\n  return\
    \ $l[count($l)/2];\n}\n</code>\n<|/ a tags=arrays,algorithm,php dscore=2 |>\n\
    <| a |>\nThe other answers fail on edge cases. \n<code>\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplq9fv1ii.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) % 2 == 0) {\n    return ($l[count($l) / 2] + $l[count($l)\
    \ / 2 - 1]) / 2.0;\n  }\n  else {\n    return $l[count($l) / 2 - 1];\n  }\n}\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1saagwjp.php:20\n\
    Stack trace:\n#0 /tmp/tmp1saagwjp.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1saagwjp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  arsort($l);\n  return $l[count($l)/2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_j4za1ed.php:17\n\
    Stack trace:\n#0 /tmp/tmp_j4za1ed.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_j4za1ed.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2) return $l[($n/2)-1];\n\
    \    return ($l[($n/2)-1] + $l[($n/2)]) / 2;\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvkzl21x.php:18\n\
    Stack trace:\n#0 /tmp/tmpxvkzl21x.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxvkzl21x.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$l = $l ?: array_merge(array(0), $l);\n\tif (count($l) % 2)\
    \ {\n\t\treturn (end($l) + end($l)) / 2;\n\t}\n\treturn $l[floor(count($l) / 2)];\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0lxvwww.php:19\n\
    Stack trace:\n#0 /tmp/tmpg0lxvwww.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpg0lxvwww.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // sort ascending\n  sort($l);\n  // get middle value from sorted\
    \ list\n  $median = floor(($l[0] + $l[1]) / 2);\n  // return sorted list if it's\
    \ only 1 value\n  return count($l) == 1 ? $median : $l;\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4zw5ss5.php:20\n\
    Stack trace:\n#0 /tmp/tmpa4zw5ss5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa4zw5ss5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Return median of list.\n  // >>> median([3, 1, 2, 4, 5])\n\
    \  // 3\n  // >>> median([-10, 4, 6, 1000, 10, 20])\n  // 15.0\n  // >>> median([-10,\
    \ 4, 6, 1000, 10, 20], True)\n  // -10\n\n  // Sort list into ascending order\
    \ before finding the median.\n  // This saves time if the list has a lot of similar\
    \ values.\n  usort($l, 'cmp');\n\n  // Get sorted list of values.\n  $l = array_values($l);\n\
    \n  if ($l[0] > 0) {\n    return $l[0]; // Return the first item.\n  }\n\n  $ls\
    \ = $l; // Alias for readability.\n  return $ls[count($ls) - 1]; // Return the\
    \ last item.\n}\n\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmpnbi85t7a.php on line 18\n\
    \nWarning: usort() expects parameter 2 to be a valid callback, function 'cmp'\
    \ not found or invalid function name in /tmp/tmpnbi85t7a.php on line 18\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpnbi85t7a.php:38\nStack trace:\n\
    #0 /tmp/tmpnbi85t7a.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnbi85t7a.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    asort($l);\n    return count($l) ? ($l[count($l)/2] + $l[count($l)/2\
    \ - 1]) / 2 : false;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmra6k1vb.php:17\n\
    Stack trace:\n#0 /tmp/tmpmra6k1vb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmra6k1vb.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $n = count($l);\n  if ($n%2==1) {\n    return $l[($n+1)/2];\n\
    \  } else {\n    return ($l[($n-1)/2] + $l[($n-2)/2])/2;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqdr_c53.php:22\n\
    Stack trace:\n#0 /tmp/tmpuqdr_c53.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpuqdr_c53.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    return $l[count($l)/2];\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpl5t6ybby.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpl5t6ybby.php:17\nStack trace:\n#0 /tmp/tmpl5t6ybby.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl5t6ybby.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!$l) return null;\n  $m = $l[0];\n  for ($i = 1; $i < count($l);\
    \ $i++) {\n    if ($m+$l[$i] > $m) $m = $m+$l[$i];\n  }\n  return $m;\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybss7fth.php:21\n\
    Stack trace:\n#0 /tmp/tmpybss7fth.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpybss7fth.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  usort($l, \"cmp\");\n  if(sizeof($l) % 2 == 0) return $l[sizeof($l)/2];\n\
    \  else return (ceil($l[sizeof($l)/2+1] - $l[sizeof($l)/2]) / 2.0) + $l[sizeof($l)/2];\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmp7b5nfbdj.php on line 8\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7b5nfbdj.php:17\nStack\
    \ trace:\n#0 /tmp/tmp7b5nfbdj.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp7b5nfbdj.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n <= 1) {\n        return $l[0];\n\
    \    }\n\n    $middle = floor(($n + 1) / 2);\n\n    if ($n%2 == 0) {\n       \
    \ $center = $middle+1;\n        return $l[$center-1];\n    } else {\n        $left\
    \ = $middle-1;\n        $right = $middle;\n        if ($l[$left] > $l[$right])\
    \ {\n            $right = $left;\n        }\n        return $l[$right];\n    }\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtwd4rnb.php:32\n\
    Stack trace:\n#0 /tmp/tmpjtwd4rnb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjtwd4rnb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = array_values($l);\n    if (count($sorted) % 2 ===\
    \ 1) {\n        // even\n        return (array_sum($sorted) / count($sorted));\n\
    \    } else {\n        // odd\n        return array_sum($sorted) / count($sorted)\
    \ / 2.0;\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7w15zj1.php:24\n\
    Stack trace:\n#0 /tmp/tmpc7w15zj1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc7w15zj1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Sort l and copy it into temporary array, then sort the copy\
    \ and return\n  // the median.\n  $arr = $l;\n  sort($arr);\n  return $arr[sizeof($arr)\
    \ / 2 - 1];\n}\n\n$num_files = scandir($directory);\n$num_files_in_directory \
    \ = count($num_files);\n\nfor ($i=0; $i < $num_files_in_directory; $i++) {\n \
    \ $file = $num_files[$i];\n  echo (\"Processing file $file...\\n\");\n  $file_arr\
    \ = explode(\".\", $file);\n  $file_ext = $file_arr[1];\n  // skip non-files by\
    \ checking the extension\n  if ($file_ext != \"txt\") {\n    continue;\n  }\n\
    \  $file_name = $file_arr[0];\n  \n  echo \"Processing file $file_name...\";\n\
    \n  // open the file\n  $myfile = fopen(\"$directory/$file\", \"r\") or die(\"\
    Unable to open file!\");\n\n  // read the file's contents\n  $filecontents = fread($myfile,\
    \ filesize(\"$directory/$file\"));\n\n  // close the file\n  fclose($myfile);\n\
    \n  // split out the lines from the file contents\n  $lines = explode(\"\\n\"\
    , $filecontents);\n\n  // for each line, split it by spaces\n  foreach ($lines\
    \ as $line) {\n    // trim whitespace from each line and store into array\n  \
    \  $line_arr = explode(\" \", $line);\n    // echo out contents of array\n   \
    \ print_r($line_arr);\n    \n    // get the index of the last item in the array\n\
    \    $last = sizeof($line_arr) - 1;\n    \n    // find the median and store it\
    \ as the index at which it is in $line_arr\n    \n    $median = median($line_arr);\n\
    \    \n    // echo out median value\n    echo $median . \" \";\n    \n    // add\
    \ a new key to the associative array $lines\n    // with the value being the median\
    \ from the previous step\n    $lines[$last]=$median;\n  }\n\n  // echo out the\
    \ new array with the medians\n  foreach ($lines as $line) {\n    print_r($line);\n\
    \    echo \" \";\n  }\n  echo \"\\n\";\n  \n  \n  \n  // open a new file for writing\
    \ and write the lines to the file\n  $myfile = fopen(\"$directory/$file_name_median\"\
    , \"w\") or die(\"Unable to open file!\");\n\n  // for each line, write a line\
    \ to the new file\n  foreach ($lines as $line) {\n    fwrite($myfile, $line);\n\
    \  }\n\n  // close myfile\n  fclose($myfile);\n\n  \n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: scandir(): Directory name cannot be empty in /tmp/tmp_dzn2gxm.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp_dzn2gxm.php on line 16\nProcessing file ...\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dzn2gxm.php:93\nStack\
    \ trace:\n#0 /tmp/tmp_dzn2gxm.php(100): test()\n#1 {main}\n  thrown in /tmp/tmp_dzn2gxm.php\
    \ on line 93\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[count($l)/2 - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvcf97ec.php:16\n\
    Stack trace:\n#0 /tmp/tmpwvcf97ec.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpwvcf97ec.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$l = is_array($l) ? $l : array($l);\n\tsort($l);\n\tif (count($l)\
    \ % 2 == 0) {\n\t\treturn $l[count($l) / 2 - 1];\n\t} else {\n\t\treturn ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2.0;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsel5dy8c.php:22\n\
    Stack trace:\n#0 /tmp/tmpsel5dy8c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsel5dy8c.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  return $l[(count($l) - 1) / 2];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo16ber5t.php:17\n\
    Stack trace:\n#0 /tmp/tmpo16ber5t.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpo16ber5t.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = array_reverse($l);\n  $n = count($l);\n  sort($l);\n  if\
    \ ($n % 2) {\n    return $l[$n/4];\n  } else {\n    return ($l[$n/2-1] + $l[$n/2])\
    \ / 2;\n  }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_hehivr.php:23\n\
    Stack trace:\n#0 /tmp/tmps_hehivr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmps_hehivr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Sort and find median.\n  usort($l);\n  return $l[count($l)/2];\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: usort() expects exactly 2 parameters, 1 given in /tmp/tmpfv4kus9z.php\
    \ on line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfv4kus9z.php:18\n\
    Stack trace:\n#0 /tmp/tmpfv4kus9z.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfv4kus9z.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) < 1) return 0;\n    $n = count($l);\n    $m\
    \ = $l[$n / 2];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($l[$i] >= $m)\
    \ $m = $l[$i];\n    }\n    return $m;\n}\n\nfunction candidate(...$args) {\n \
    \   return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2akm7zv6.php:22\n\
    Stack trace:\n#0 /tmp/tmp2akm7zv6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2akm7zv6.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = array_filter($l);\n    return $l[count($l) / 2 - 1];\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tetpeyw.php:16\n\
    Stack trace:\n#0 /tmp/tmp2tetpeyw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2tetpeyw.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  return $l[(count($l) - 1) / 2];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe917xif_.php:17\n\
    Stack trace:\n#0 /tmp/tmpe917xif_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpe917xif_.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Get the list of elements in sorted order and then\n  // return\
    \ the middle element as the median.\n  return $l[(count($l)/2)];\n}\n</code>\n\
    <|/ a tags=php,algorithm,sorting,performance dscore=3 |>\n<| c |>\nThis should\
    \ be the accepted answer.  The accepted answer doesn't provide the expected output\
    \ of this function and has some overhead that would slow it down and create more\
    \ problems for the server.  Also, for me, the accepted answer doesn't work in\
    \ the context of array_map() so I didn't even try it.  So I felt this answer was\
    \ more direct to the question.\n<|/ c |>\n<| c |>\nI'm going to test this in php,\
    \ with some random numbers between 0 and 100000000 and compare the performance\
    \ to using array_map() and array_reduce().\n<|/ c |>\n<| a tags=php,algorithm,sorting,performance\
    \ dscore=3 |>\nOk, i found a better way using array_reduce, this is really quick\n\
    <code>\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp_wj2f427.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[count($l)/2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0k43qln1.php:16\n\
    Stack trace:\n#0 /tmp/tmp0k43qln1.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp0k43qln1.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  asort($l);\n  $n = sizeof($l) / 2;\n  if ($n % 2) {\n    return\
    \ $l[$n];\n  }\n  else {\n    return ($l[$n] + $l[($n - 1)/ 2])/2;\n  }\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpno9jun82.php:23\n\
    Stack trace:\n#0 /tmp/tmpno9jun82.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpno9jun82.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!count($l)) {\n    return 0;\n  }\n  $count = count($l);\n\
    \  if ($count % 2) {\n    $median = $l[($count - 1) / 2];\n  } else {\n    $median\
    \ = $l[($count - 2) / 2];\n  }\n  $l[$count / 2] = 0;\n  return $median;\n}\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ruf2cm1.php:25\n\
    Stack trace:\n#0 /tmp/tmp1ruf2cm1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1ruf2cm1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = $l ? $l : array();\n  sort($l);\n  if (count($l) === 0)\
    \ {\n    return NULL;\n  }\n  else {\n    return $l[count($l) / 2 - 1];\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7hcdsi_.php:23\n\
    Stack trace:\n#0 /tmp/tmpa7hcdsi_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpa7hcdsi_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    return isset($l[(count($l)-1)/2]) ? $l[(count($l)-1)/2]\
    \ : $l[(count($l)-2)/2];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9s5fs9jy.php:18\n\
    Stack trace:\n#0 /tmp/tmp9s5fs9jy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9s5fs9jy.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  if ($n & 1)\n    $l = array_slice($l, ceil($n/2.0));\n\
    \  $m = array_sum($l);\n  if ($m & 1)\n    return ($l[count($l)>>1] + $l[count($l)>>1])/2;\n\
    \  else\n    return $l[count($l)>>1];\n}\n\nfunction candidate(...$args) {\n \
    \   return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtqemeoc.php:23\n\
    Stack trace:\n#0 /tmp/tmpbtqemeoc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbtqemeoc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = $l ? $l : [];\n    return $l[0] + ($l[count($l) - 1]\
    \ - $l[0]) / 2;\n}\n\n/**\n * Generate an array of all permutations of an array.\
    \ \n * \n * >>> perm([1,2,3,4])\n * [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4],\
    \ [1, 2, 3, 4]]\n * >>> perm([])\n * []\n * \n * @see http://en.wikipedia.org/wiki/Permutation\n\
    \ * \n * @param array $l A list of elements.\n * @return array An array of all\
    \ permutations.\n * @link http://en.wikipedia.org/wiki/Permutation#Generation_in_lexicographic_order\n\
    \ */\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmlf1os_o.php:31\n\
    Stack trace:\n#0 /tmp/tmpmlf1os_o.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmlf1os_o.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (!$l) return null;\n    $l = array_filter($l);\n    return\
    \ $l[count($l)/2];\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like the way you\
    \ used the filter function but that does not work when $l is empty or null. \n\
    return $l ?: null; will work\n<|/ c |>\n<| a |>\nIf you don't care about readability\
    \ or performance, here's an ugly one-liner:\n<code>\n$median = array_filter(array_map(function\
    \ ($value) { \n    return $value%2==0?$value-1:$value; \n}, $array), function\
    \ ($value) {return $value==count($array)/2;});\n</code>\nI tested it with array\
    \ sizes up to ~20, and it works.\n<|/ a dscore=1 tags=arrays,php,algorithm |>\n\
    <| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmptxvpw1no.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // If the list is empty, return null.\n    if (empty($l))\
    \ {\n        return null;\n    }\n    $sorted = array_sort($l);\n    return $sorted[floor(count($sorted)\
    \ / 2)];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_sort()\
    \ in /tmp/tmp4iz367nq.php:12\nStack trace:\n#0 /tmp/tmp4iz367nq.php(17): median(Array)\n\
    #1 /tmp/tmp4iz367nq.php(21): candidate(Array)\n#2 /tmp/tmp4iz367nq.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4iz367nq.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $n = count($l);\n  if ($n%2 == 0) {\n    return\
    \ ($l[($n-1)/2] + $l[$n/2]) / 2.0;\n  } else {\n    return $l[($n-1)/2];\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  return $l[count($l) / 2 - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75k3z6a2.php:16\n\
    Stack trace:\n#0 /tmp/tmp75k3z6a2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp75k3z6a2.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  return (($l[0]+$l[3])/2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyhbzr7w.php:17\n\
    Stack trace:\n#0 /tmp/tmpeyhbzr7w.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpeyhbzr7w.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n < 2) {\n        throw new InvalidArgumentException(\n\
    \            sprintf('Cannot compute median from an empty list.'));\n    }\n \
    \   $sortFunc = function($a,$b) use ($n) {\n        return $a <=> $b;\n    };\n\
    \    uasort($l, $sortFunc);\n    if ($n & 1) {\n        return $l[(count($l)/2)];\n\
    \    }\n    else {\n        $n /= 2;\n        return $l[(count($l)/2) - floor($n)];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q3bnoe9.php:31\n\
    Stack trace:\n#0 /tmp/tmp2q3bnoe9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2q3bnoe9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) == 0) return false;\n    if (count($l) == 1)\
    \ return $l[0];\n    $sorted_l = $l;\n    sort($l);\n    return ($l[count($l)/2]\
    \ > $l[(count($l)/2) - 1]) ? $l[count($l)/2] : $l[(count($l)/2)-1];\n}\n</code>\n\
    <|/ a tags=php,median |>\n<| c |>\nThe accepted answer doesn't work for the median\
    \ of an array of negative numbers. It will return the middle element instead of\
    \ the median of the array.\n<|/ c |>\n<| c |>\n: If you have negative elements,\
    \ you just need to sort the array in descending order before finding the median\
    \ element. Otherwise, it will return the middle element instead of the median.\n\
    <|/ c |>\n<| c |>\nYou do need to sort in descending order because otherwise the\
    \ median element will be the largest element and not the median element.\n<|/\
    \ c |>\n<| a tags=php,median dscore=5 |>\nThe median of 3 elements a, b and c\
    \ is simply (a + b + c)/2.\n<|/ a |>\n<| c |>\nThis doesn't work when all three\
    \ are equal, returns 0\n<|/ c |>\n<| c |>\nIt will return the middle element if\
    \ the three elements are equal.\n<|/ c |>\n<| a |>\nJust for completeness, I thought\
    \ I'd add a python version since I've used it before and I thought I would post\
    \ it here. The code also has the advantage of being easy to implement:\n<code>\n\
    def median(lst):\n    n = len(lst)\n    if n == 0:\n        return None\n    if\
    \ n % 2 == 0:\n        return lst[n//2]\n    else:\n        return (lst[n//2]\
    \ + lst[n//2 - 1])/2\n</code>\n<|/ a dscore=5 tags=php,median |>\n<| c |>\nI like\
    \ this solution as it's very easy!  I used this in combination with [`usort()`](http://www.php.net/manual/en/function.usort.php)\
    \ and [`array_search()`](http://www.php.net/manual/en/function.array-search.php)\
    \ so I could easily find the median of an array of unknown length.\n<|/ c |>\n\
    <| c |>\nI didn't realize I could do that, but that's fantastic. Thanks!\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp5upewxnl.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $n = count($l);\n  if ($n <= 1)\n    return $l[0];\n\
    \  $mid = intval(floor(($n - 1) / 2));\n  return $l[$mid];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrtl88bz.php:21\n\
    Stack trace:\n#0 /tmp/tmpkrtl88bz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkrtl88bz.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  return $l[count($l) / 2]; // short-cut for median(array_slice($l,\
    \ 0, -1))\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34jwd1uw.php:16\n\
    Stack trace:\n#0 /tmp/tmp34jwd1uw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp34jwd1uw.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = array();\n    foreach ($l as $key => $val) {\n \
    \       $sorted[] = $val;\n    }\n    natsort($sorted);\n    return $sorted[(count($sorted)-1)/2];\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptlgw2jvs.php:21\n\
    Stack trace:\n#0 /tmp/tmptlgw2jvs.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptlgw2jvs.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) < 2) {\n        return $l[0];\n    }\n    $sort\
    \ = $l;\n    sort($sort);\n    \n    return ($sort[floor(count($sort) / 2)] +\
    \ $sort[ceil(count($sort) / 2) - 1]) / 2;\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdxtkiz5.php:23\n\
    Stack trace:\n#0 /tmp/tmppdxtkiz5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppdxtkiz5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $count = $l;\n  if (count($l) % 2 == 0) {\n   \
    \ $count++;\n  }\n  $count = count($l) / 2;\n  return $l[intval($count)];\n}\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp385acpj6.php:22\n\
    Stack trace:\n#0 /tmp/tmp385acpj6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp385acpj6.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (empty($l)) {\n    return null;\n  }\n\n  $l = array_unique($l);\n\
    \  if (count($l) == 1) {\n    return $l[0];\n  }\n\n  $midpoint = floor(($l[0]\
    \ + $l[1]) / 2);\n  return $l[$midpoint];\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6615akgb.php:26\n\
    Stack trace:\n#0 /tmp/tmp6615akgb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6615akgb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    if (count($l) % 2 == 1) {\n        return ($l[count($l)/2]\
    \ + $l[count($l)/2-1]) / 2;\n    } else {\n        return $l[count($l)/2];\n \
    \   }\n}\n\n$a = array(1,5,2,4,8,9);\n$b = array(2,4,6,8,9);\n$c = array(1,2,5,8);\n\
    $d = array(1,2,5,8,7,9,10);\n$e = array(1,2,5,8,7,9,10,11);\n$f = array(1,2,5,8,7,9,10,11,12,13,14,15);\n\
    $g = array(1,2,5,8,7,9,10,11,12,13,14,15,16);\n$h = array(1,2,5,8,7,9,10,11,12,13,14,15,16,17);\n\
    \necho \"Arrays\\n\";\necho \"min\\n\";\nvar_dump(min($a));\necho \"max\\n\";\n\
    var_dump(max($b));\necho \"mean\\n\";\nvar_dump($c);\necho \"median\\n\";\nvar_dump($d);\n\
    echo \"$h\\n\";\nvar_dump($h);\necho \"$e\\n\";\nvar_dump($e);\necho \"$g\\n\"\
    ;\nvar_dump($g);\necho \"$f\\n\";\nvar_dump($f);\necho \"$a\\n\";\nvar_dump($a);\n\
    echo \"$b\\n\";\nvar_dump($b);\n\necho \"\\n\";\n\necho \"\\nArrays\\n\";\necho\
    \ \"min\\n\";\nvar_dump(min($a));\necho \"max\\n\";\nvar_dump(max($b));\necho\
    \ \"mean\\n\";\nvar_dump($c);\necho \"median\\n\";\nvar_dump($d);\necho \"$h\\\
    n\";\nvar_dump($h);\necho \"$e\\n\";\nvar_dump($e);\necho \"$g\\n\";\nvar_dump($g);\n\
    echo \"$f\\n\";\nvar_dump($f);\necho \"$a\\n\";\nvar_dump($a);\necho \"$b\\n\"\
    ;\nvar_dump($b);\n\necho \"\\n\";\n\necho \"\\nArrays\\n\";\necho \"min\\n\";\n\
    var_dump(min($a));\necho \"max\\n\";\nvar_dump(max($b));\necho \"mean\\n\";\n\
    var_dump($c);\necho \"median\\n\";\nvar_dump($d);\necho \"$h\\n\";\nvar_dump($h);\n\
    echo \"$e\\n\";\nvar_dump($e);\necho \"$g\\n\";\nvar_dump($g);\necho \"$f\\n\"\
    ;\nvar_dump($f);\necho \"$a\\n\";\nvar_dump($a);\necho \"$b\\n\";\nvar_dump($b);\n\
    \necho \"\\n\";\n\necho \"\\nArrays\\n\";\necho \"min\\n\";\nvar_dump(min($a));\n\
    echo \"max\\n\";\nvar_dump(max($b));\necho \"mean\\n\";\nvar_dump($c);\necho \"\
    \nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp6gp65tdz.php on line 110\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$n = count($l);\n\tif ($n < 1)\n\t\treturn $n;\n\t$p = array_keys($l);\n\
    \t$len = count($p);\n\tif ($len % 2)\n\t\treturn $l[($len / 2) - 1];\n\telse {\n\
    \t\t$i = $len / 2;\n\t\t$j = array_keys($l, $i);\n\t\t$m = $j[($j[0] - 1)];\n\t\
    \tif ($m == $l[$i]) {\n\t\t\t$i = $i;\n\t\t}\n\t\treturn $m;\n\t}\n}\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1dqdbbv.php:30\n\
    Stack trace:\n#0 /tmp/tmpt1dqdbbv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpt1dqdbbv.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) === 0) {\n        return null;\n    }\n    $count\
    \ = count($l);\n    if ($count % 2 === 1) {\n        return $l[($count - 1)/2];\n\
    \    }\n    $keys = array_keys($l);\n    sort($keys);\n    $mid = array_sum($keys)\
    \ / 2;\n    return $l[$mid];\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpel1zkun5.php:26\n\
    Stack trace:\n#0 /tmp/tmpel1zkun5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpel1zkun5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  return $l[count($l)/2 - 1];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8v0525y.php:15\n\
    Stack trace:\n#0 /tmp/tmph8v0525y.php(22): test()\n#1 {main}\n  thrown in /tmp/tmph8v0525y.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  foreach ($l as $k=>$v) {\n    $sorter[] = $v;\n  }\n  natcasesort($sorter);\n\
    \  return $sorter[count($sorter)/2];\n}\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2w5978x.php:19\n\
    Stack trace:\n#0 /tmp/tmpr2w5978x.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr2w5978x.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!is_array($l)) {\n    throw new \\InvalidArgumentException('median\
    \ takes a list as its argument');\n  }\n  // Sort list numerically (using sort())\
    \ so that the median is a\n  // monotonically decreasing function.\n  sort($l);\n\
    \  $n = count($l);\n\n  // Check whether number of elements is an odd number.\n\
    \  $n = $n % 2;\n  if ($n === 0) {\n    // If number of elements is an even number,\
    \ there's an equal chance\n    // of getting an element with median as (middle\
    \ - 1).\n    return ($l[$n / 2] + $l[($n - 1) / 2) / 2];\n  }\n\n  return $l[$n\
    \ / 2];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpn4jjmiwc.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (empty($l)) {\n    return null;\n  }\n  return $l[count($l)\
    \ / 2 - 1];\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpim1_dzqj.php:18\n\
    Stack trace:\n#0 /tmp/tmpim1_dzqj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpim1_dzqj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$s = sort($l);\n\tif (count($s)%2==1) return $s[count($s)/2];\n\
    \treturn (isset($s[count($s)/2])?$s[count($s)/2-1]:$s[0])+($s[count($s)/2+1]-$s[0])/2;\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp32xffd8y.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmp32xffd8y.php on\
    \ line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32xffd8y.php:17\n\
    Stack trace:\n#0 /tmp/tmp32xffd8y.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp32xffd8y.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  return $l[(count($l) / 2)];\n}\n</code>\n<|/ a\
    \ tags=median,algorithm,php |>\n<| c |>\nI dont think this is what he is looking\
    \ for...  He asked for a PHP solution and this one appears to be for Python.\n\
    <|/ c |>\n<| a dscore=4 |>\nAs already pointed by others, the median of a set\
    \ of values is the value that divides all the values by two. However, the median\
    \ (median) is only defined if all the values have a weight of one unit:\n\nIf\
    \ all the weights are equal, then the median is the same as the value\n  itself,\
    \ which doesn't give any information. \nIf all the weights are equal, then the\
    \ median is halfway between\n  the two middle values. \nIf all the weights are\
    \ different, the median is defined to be\n  the value that is the closest to the\
    \ middle value.\n<|/ a tags=median,algorithm,php |>\n<| c |>\nThis answer should\
    \ be marked as correct. The selected answer is a little ambiguous about what the\
    \ median is defined for. Also note that this answer was written more than 7 years\
    \ ago.\n<|/ c |>\n<| a dscore=4 tags=median,algorithm,php |>\nTo find the median,\
    \ you should use the median of medians algorithm. This algorithm is efficient\
    \ because it finds the median of the medians and uses it instead of the median\
    \ of the original list. \n<code>\nmedianOfMedians (List listOfNumbers)\n{\n  \
    \  int medianIndex = (int)(listOfNumbers.size() / 2.0);\n\n    if (listOfNumbers.size\
    \ % 2 == 0)\n       return listOfNumbers.get(medianIndex);\n\n    int median =\
    \ (listOfNumbers.get(medianIndex) + listOfNumbers.get((listOfNumbers.size() -\
    \ 1) -  medianIndex)) / 2;\n\n    return median;\n}\n</code>\n<|/ a |>\n<| a tags=median,algorithm,php\
    \ dscore=4 |>\nThe following algorithm is O(n), and in python:\n<code>\ndef median(arr):\n\
    \   length = len(arr)\n   if length % 2 == 1:\n       return arr[length/2]\n \
    \  else:\n       left_median = arr[length/2-1]\n       right_median = arr[length/2]\n\
    \       return (left_median + right_median) // 2\n</code>\n<|/ a |>\n<| a tags=median,algorithm,php\
    \ dscore=4 |>\nTo calculate the median:\n<code>\ndef median(a):\n    n = len(a)\n\
    \    if n % 2 == 1:\n        return a[n // 2]\n    else:\n        return (a[n//2]\
    \ + a[n//2 - 1]) // 2\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpz2a8mj21.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Sort the list so smallest is first.\n  sort($l);\n  return\
    \ $l[floor(count($l)/2)];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpde78oxyy.php:19\n\
    Stack trace:\n#0 /tmp/tmpde78oxyy.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpde78oxyy.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = array_values($l);\n  if (count($l) < 2) {\n    throw new\
    \ Exception('median() not applicable for the list ' . count($l));\n  }\n  return\
    \ $l[count($l) / 2];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0xpngza.php:20\n\
    Stack trace:\n#0 /tmp/tmpc0xpngza.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpc0xpngza.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (empty($l)) {\n    return 0.0;\n  }\n  sort($l);\n  return\
    \ $l[count($l) / 2]; // median\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_xrtt90.php:21\n\
    Stack trace:\n#0 /tmp/tmpa_xrtt90.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa_xrtt90.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  return $l[count($l)-1 / 2] ?? $l[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46w3q6nt.php:16\n\
    Stack trace:\n#0 /tmp/tmp46w3q6nt.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp46w3q6nt.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) < 1) {\n    return 0;\n  }\n  $mid = count($l)\
    \ / 2;\n  sort($l);\n  if (count($l) % 2 == 1) {\n    // Even number of elements\n\
    \    return $l[$mid];\n  }\n  // Odd number of elements\n  return ($l[$mid - 1]\
    \ + $l[$mid]) / 2.0;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    if (sizeof($l) % 2 == 0) {\n        return\
    \ $l[floor(sizeof($l) / 2)];\n    }\n    return ($l[floor(sizeof($l) / 2) - 1]\
    \ + $l[floor(sizeof($l) / 2)]) / 2.0;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Nice! I like this one better than the `median()` function since it can handle\
    \ negative numbers also. I think it's much more readable too.\n<|/ c |>\n<| a\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpk73rwtlj.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $this->medianIndex($l);\n}\n\n/**\n * Return the median\
    \ of an indexed array of numbers\n *\n * @param array $arr The indexed array\n\
    \ * @return float\n */\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmpkt0e7ep0.php:8\nStack trace:\n#0 /tmp/tmpkt0e7ep0.php(18): median(Array)\n\
    #1 /tmp/tmpkt0e7ep0.php(22): candidate(Array)\n#2 /tmp/tmpkt0e7ep0.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkt0e7ep0.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n -\
    \ 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1])\
    \ / 2;\n  }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wh5lvef.php:22\n\
    Stack trace:\n#0 /tmp/tmp2wh5lvef.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2wh5lvef.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    return $l[(count($l) / 2) - 1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0rz5pu_.php:17\n\
    Stack trace:\n#0 /tmp/tmps0rz5pu_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmps0rz5pu_.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $num = count($l);\n  if ($num == 1) {\n    return\
    \ $l[0];\n  }\n  return ($num % 2) ? $l[($num - 1) / 2] : ($l[$num / 2 - 1] +\
    \ $l[$num / 2]) / 2;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphha82c4z.php:21\n\
    Stack trace:\n#0 /tmp/tmphha82c4z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmphha82c4z.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = array_reverse($l);\n    sort($l);\n    return $l[count($l)/2];\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihfhc1dy.php:19\n\
    Stack trace:\n#0 /tmp/tmpihfhc1dy.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpihfhc1dy.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if ($l == array()) return NULL;\n    $l = array_reverse($l);\n\
    \    return (float) ($l[0] + $l[1])/2;\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_15g7xd9.php:18\n\
    Stack trace:\n#0 /tmp/tmp_15g7xd9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_15g7xd9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = $l ? $l : [];\n    $f = null;\n    foreach ($l as $e)\
    \ {\n        if ($f === null) {\n            $f = $e;\n        } elseif ($e >\
    \ $f) {\n            $f = $e;\n        }\n    }\n    return $f;\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjd8a8f3.php:25\n\
    Stack trace:\n#0 /tmp/tmpdjd8a8f3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdjd8a8f3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Only return median if the list has at least three elements.\n\
    \    if (count($l) >= 3) {\n        // Store the median in $median.\n        $median\
    \ = array_pop($l) . '.' . array_pop($l) . '.' . array_pop($l);\n        // Sort\
    \ the list.\n        sort($l);\n        // Return the median as the final result.\n\
    \        return $median;\n    }\n    // Return null if the list does not have\
    \ three elements.\n    return null;\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvktucv_.php:26\n\
    Stack trace:\n#0 /tmp/tmpzvktucv_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzvktucv_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  return $l[count($l)%2];\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3c79rvv.php:16\n\
    Stack trace:\n#0 /tmp/tmpg3c79rvv.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg3c79rvv.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return\
    \ ($l[0] + $l[1]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n  }\n}\n</code>\n\
    <|/ a dscore=0 tags=arrays,php |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp77khup47.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $l = array_slice($l, count($l)/2, count($l)/2);\n\
    \    if ($l[0] < $l[1])\n        return $l[0];\n    else\n        return $l[1];\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaz7u7l5y.php:21\n\
    Stack trace:\n#0 /tmp/tmpaz7u7l5y.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpaz7u7l5y.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!is_array($l)) {\n    return $l;\n  }\n  sort($l);\n  $len\
    \ = count($l);\n  return $len % 2\n    ? $l[(($len - 1) / 2)]\n    : ($l[$len\
    \ / 2 - 1] + $l[$len / 2]) / 2;\n}\n\n/**\n * Get the difference between the maximum\
    \ and minimum values in the list\n * @param $l an array\n * @return float\n */\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn72d1pfn.php:29\n\
    Stack trace:\n#0 /tmp/tmpn72d1pfn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn72d1pfn.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n & 1) {\n        return $l[(count($l)/2)-1];\n\
    \    }\n    else {\n        $m = $n / 2;\n        return ($l[$m-1] + $l[$m]) /\
    \ 2;\n    }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6gxlp2tj.php:22\n\
    Stack trace:\n#0 /tmp/tmp6gxlp2tj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6gxlp2tj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Sort $l to make sure that\n  // a) all numbers are positive\n\
    \  // b) there are no NaNs or Infs\n  // c) $l is already ordered\n  $l2 = array_reverse($l);\n\
    \  sort($l2);\n\n  foreach ($l2 as $key => $val) {\n    if ($val < $l2[$key-1])\
    \ {\n      return $val;\n    }\n  }\n\n  return $l2[$key-1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3zuibmvz.php:29\n\
    Stack trace:\n#0 /tmp/tmp3zuibmvz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3zuibmvz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return ($l[0] + ($l[0] + $l[1])/2) / 2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv01mjea1.php:16\n\
    Stack trace:\n#0 /tmp/tmpv01mjea1.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpv01mjea1.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = sort($l);\n  foreach ($l as $k => $v) {\n    if ($k % 2\
    \ === 0) {\n      return $v;\n    }\n  }\n  $l = array_slice($l, count($l) / 2);\n\
    \  $l = sort($l);\n  return $l[0];\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp6g_j7bs7.php\
    \ on line 9\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp6g_j7bs7.php on line 14\n\nWarning: array_slice()\
    \ expects parameter 1 to be array, bool given in /tmp/tmp6g_j7bs7.php on line\
    \ 14\n\nWarning: sort() expects parameter 1 to be array, null given in /tmp/tmp6g_j7bs7.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6g_j7bs7.php:24\n\
    Stack trace:\n#0 /tmp/tmp6g_j7bs7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6g_j7bs7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $ln = count($l);\n    if ($ln % 2) { // odd\n\
    \        return (is_numeric(array_pop($l))) ? $l[(count($l) / 2)] : false;\n \
    \   }\n    // even\n    return (is_numeric($l[$ln - 1])) ? $l[($ln - 1) / 2] :\
    \ $l[($ln - 1) / 2 - 1];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppli4lvr8.php:23\n\
    Stack trace:\n#0 /tmp/tmppli4lvr8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppli4lvr8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = sort($l);\n  $l = $l[count($l) / 2 - 1];\n  sort($l);\n\
    \  $l = $l[count($l) / 2];\n  return $l;\n}\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp9vpd1uef.php on line 9\n\nWarning: sort() expects parameter\
    \ 1 to be array, null given in /tmp/tmp9vpd1uef.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp9vpd1uef.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vpd1uef.php:19\n\
    Stack trace:\n#0 /tmp/tmp9vpd1uef.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9vpd1uef.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\treturn $l[intval(count($l) / 2)];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98cr7chx.php:15\n\
    Stack trace:\n#0 /tmp/tmp98cr7chx.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp98cr7chx.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) === 0) return null;\n  $half = count($l) / 2;\n\
    \  if ($half === 0) return $l[0];\n  return ($l[0] + $l[($half - 1)]) / 2;\n}\n\
    \nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nwmggdr.php:19\n\
    Stack trace:\n#0 /tmp/tmp4nwmggdr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4nwmggdr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    return $l[(count($l) / 2)];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwog8e0e.php:17\n\
    Stack trace:\n#0 /tmp/tmpqwog8e0e.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpqwog8e0e.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  if ($n % 2 == 0) {\n    $f = $l[($n - 1)\
    \ / 2];\n    $l = $l;\n    $l[$n - 1] = $f;\n  }\n  else {\n    $f = $l[($n -\
    \ 1) / 2];\n    $l = $l;\n    $l[($n - 1) / 2] = $f;\n  }\n  return $f;\n}\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20yd1xd0.php:26\n\
    Stack trace:\n#0 /tmp/tmp20yd1xd0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp20yd1xd0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // $l = (array)$l;\n    // $l = array_filter($l);\n    //\
    \ $ln = count($l);\n    // if ($ln == 0) {\n    //     return NULL;\n    // }\n\
    \    // if ($ln == 1) {\n    //     return $l[0];\n    // }\n    // $median =\
    \ 0;\n    // foreach ($l as $ll) {\n    //     // $median_l = $median_l + $ll;\n\
    \    //     $median_l = $ll + ($ll / 2);\n    //     // if ($median_l < 0){\n\
    \    //     //     $median_l = 0;\n    //     // } else if ($median_l > $median)\
    \ {\n    //     //     $median_l = $median;\n    //     // }\n    //     if ($median_l\
    \ < 0){\n    //         $median_l = 0;\n    //     } else if ($median_l > $median)\
    \ {\n    //         $median_l = $median;\n    //     }\n    //     $median = $median_l;\n\
    \    // }\n    // return $median;\n    $l = (array)$l;\n    $l = array_filter($l);\n\
    \    $ln = count($l);\n    if ($ln == 0) {\n        return NULL;\n    }\n    if\
    \ ($ln == 1) {\n        return $l[0];\n    }\n    $median = 0;\n    foreach ($l\
    \ as $ll) {\n        $median_l = $ll + ($ll / 2);\n        if ($median_l < 0){\n\
    \            $median_l = 0;\n        } else if ($median_l > $median) {\n     \
    \       $median_l = $median;\n        }\n        $median = $median_l;\n    }\n\
    \    return $median;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfvdl3q5.php:60\n\
    Stack trace:\n#0 /tmp/tmpnfvdl3q5.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpnfvdl3q5.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $count = count($l);\n    if ($count < 2) {\n\
    \        return $l[0];\n    }\n    return ($count % 2) ? $l[($count - 1) / 2]\
    \ : $l[($count - 1) / 2] + $l[$count / 2];\n}\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7ifzxf9.php:21\n\
    Stack trace:\n#0 /tmp/tmpd7ifzxf9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpd7ifzxf9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  return $l[sizeof($l)/2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcqd43ni.php:16\n\
    Stack trace:\n#0 /tmp/tmpmcqd43ni.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmcqd43ni.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!count($l)) {\n    return 0;\n  }\n  sort($l);\n  return\
    \ $l[count($l)/2];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0ocw05h.php:21\n\
    Stack trace:\n#0 /tmp/tmpn0ocw05h.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpn0ocw05h.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  foreach ($l as $k=>$v) {\n    if ($k%2 == 1) $l[$k]\
    \ = $v/2.0;\n    else $l[$k] = $v - $l[$k-1];\n  }\n  return $l[count($l)-1];\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp790dt9s_.php:20\n\
    Stack trace:\n#0 /tmp/tmp790dt9s_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp790dt9s_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    $l = $l[$n-1];\n    $count = count($l);\n\
    \    $median = 0;\n    for($i=$n/2; $i>=0; $i--) {\n        $sum += $l[$i];\n\
    \        $count--;\n        if($count > 0) {\n            $median = ($sum + $median)\
    \ / $count;\n        }\n    }\n    return $median;\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpb_9h6_ld.php on line 10\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpb_9h6_ld.php:27\nStack trace:\n#0 /tmp/tmpb_9h6_ld.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb_9h6_ld.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = array_sort($l);\n    return $sorted[count($sorted)/2];\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is a really good example of the use\
    \ of the `return` keyword to control the flow of code.\n<|/ c |>\n<| a tags=php,sorting\
    \ dscore=4 |>\nThe easiest way is to use usort(). For example, if we want to sort\
    \ the array by an element, say 'age', just do:\n<code>\nusort($array, function($a,\
    \ $b) { \n    return $a['age'] - $b['age']; \n});\n</code>\n<|/ a |>\n<| c |>\n\
    I believe this is wrong. `array_sort` returns an array of the same structure as\
    \ the input array, so in this case it sorts by a numeric index, which is unlikely\
    \ to be useful.\n<|/ c |>\n<| c |>\nYou're right. I've fixed the answer accordingly.\
    \ Thanks!\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp267hefi6.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!$l) return $l; // for empty list, return itself\n  $n =\
    \ count($l);\n  foreach ($l as $key => $value) if ($n % 2 == 1) $median = $value;\n\
    \  foreach ($l as $key => $value) if ($n % 2 == 0) $median = $value;\n  return\
    \ $median;\n}\n\n$x = array('a', 'b', 'c', 'd', 'e');\n$y = array('w', 'x', 'y',\
    \ 'z');\n$z = array('c', 'd', 'e');\n$arr = array($x, $y, $z);\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pc5o7ly.php:25\n\
    Stack trace:\n#0 /tmp/tmp8pc5o7ly.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8pc5o7ly.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  \n  if(count($l) == 0) {\n    return -1;\n  }\n\
    \n  if($l[count($l) / 2] < 0) {\n    $l[0] *= -1;\n  }\n\n  return $l[count($l)\
    \ / 2];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0aoakrvh.php:27\n\
    Stack trace:\n#0 /tmp/tmp0aoakrvh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0aoakrvh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Return median of array.\n    $n = sizeof($l);\n    if ($n\
    \ % 2) return $l[($n - 1) / 2];\n\n    // Sort array and find median.\n    $a\
    \ = $l;\n    sort($a);\n    return $a[$n / 2];\n}\n\n/**\n * A function that takes\
    \ two arguments, x and y, and returns \"x\" when x < y and \"y\" when x > y.\n\
    \ * It's useful for sorting lists of strings so that \"x\" is less than \"y\"\
    \ when sorted as strings, and vice\n * versa.\n *\n * @param $x First value.\n\
    \ * @param $y Second value.\n * @return $x when $x < $y, $y when $x > $y, $x when\
    \ $x == $y.\n */\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn189o0ca.php:32\n\
    Stack trace:\n#0 /tmp/tmpn189o0ca.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpn189o0ca.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (empty($l)) {\n    return 0;\n  }\n  sort($l);\n  return\
    \ $l[count($l)/ 2];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7y0hz5x.php:21\n\
    Stack trace:\n#0 /tmp/tmpx7y0hz5x.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpx7y0hz5x.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return array_sum($l) / count($l);\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjhtjx3c.php:17\n\
    Stack trace:\n#0 /tmp/tmphjhtjx3c.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphjhtjx3c.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[array_slice($l, -1)/2]\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\n$array = array(3, 1, 2, 4, 5);\n\n$median = median($array);\n\
    \nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpp3wo18ds.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $count = count($l);\n  if ($count == 0) {\n    return 0;\n \
    \ }\n\n  $median = array_shift($l);\n\n  for ($i = 0; $i < $count; $i++) {\n \
    \   if ($l[$i] <= $median) {\n      $median = array_shift($l);\n    }\n  }\n\n\
    \  return $median;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0v5ku2mt.php:28\n\
    Stack trace:\n#0 /tmp/tmp0v5ku2mt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0v5ku2mt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $this->_median($l, $this->_key);\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmpafkde8yl.php:8\nStack trace:\n#0 /tmp/tmpafkde8yl.php(12): median(Array)\n\
    #1 /tmp/tmpafkde8yl.php(16): candidate(Array)\n#2 /tmp/tmpafkde8yl.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmpafkde8yl.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $l = array_slice($l, ceil(count($l) / 2));\n\
    \    if (count($l) < 2) {\n        return $l[0];\n    }\n    return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2.0;\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9qoq7dhw.php:21\n\
    Stack trace:\n#0 /tmp/tmp9qoq7dhw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9qoq7dhw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$l = array_values($l);\n\tif (count($l) < 2) { return (float)\
    \ 0; }\n\tsort($l);\n\t$n = count($l);\n\t$m = $n % 2 ? ($n % 4 ? ceil($n / 4)\
    \ : floor($n / 2)) : floor($n / 2);\n\treturn $l[$m];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp650_1fq3.php:21\n\
    Stack trace:\n#0 /tmp/tmp650_1fq3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp650_1fq3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!is_array($l)) return null;\n  sort($l);\n  if (count($l)\
    \ % 2 == 0) {\n    $r = $l[count($l) / 2 - 1];\n  } else {\n    $r = $l[count($l)\
    \ / 2];\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbci3k_lc.php:24\n\
    Stack trace:\n#0 /tmp/tmpbci3k_lc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbci3k_lc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  \n  if (count($l) % 2) {\n    return $l[(count($l)\
    \ / 2) - 1];\n  }\n  \n  \n  return ($l[(count($l) / 2) - 1] + $l[count($l) /\
    \ 2]) / 2.0;\n}\n\n/**\n * Find peaks in an array.\n * \n * @param  array $array\n\
    \ * @param  mixed $value\n * @param  mixed $compare\n * @return array\n */\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5amtmg28.php:31\n\
    Stack trace:\n#0 /tmp/tmp5amtmg28.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5amtmg28.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return $l[count($l)/2 - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4tlovf62.php:16\n\
    Stack trace:\n#0 /tmp/tmp4tlovf62.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4tlovf62.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    return $l[count($l) / 2 | 0];\n}\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08c1hwlx.php:17\n\
    Stack trace:\n#0 /tmp/tmp08c1hwlx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp08c1hwlx.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = array_reverse($l);\n    sort($sorted);\n    return\
    \ $sorted[floor(count($sorted)/2)];\n}\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzf9y_bxy.php:18\n\
    Stack trace:\n#0 /tmp/tmpzf9y_bxy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzf9y_bxy.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = sizeof($l);\n  if ($n == 0) {\n    return 0;\n  }\n  foreach\
    \ ($l as $e) {\n    if ($n % 2 == 0) {\n      return $e;\n    }\n    $n = $n /\
    \ 2;\n  }\n  return ($l[($n + 1) / 2] - $l[$n]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2fdqa21.php:26\n\
    Stack trace:\n#0 /tmp/tmpb2fdqa21.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb2fdqa21.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$n = count($l);\n\tif ($n & 1)\n\t\treturn ($l[($n-1)/2]\
    \ + ($n/2) * ($l[($n-1)/2+1]-$l[($n-1)/2]))/($n);\n\telse\n\t\treturn $l[($n-1)/2];\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkj52jflk.php:21\n\
    Stack trace:\n#0 /tmp/tmpkj52jflk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkj52jflk.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  if ($n % 2) return $l[$n / 2];\n  sort($l);\n\
    \  return $l[($n - 1) / 2];\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpns24xjvr.php:18\n\
    Stack trace:\n#0 /tmp/tmpns24xjvr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpns24xjvr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) % 2 === 0) {\n        return $l[(count($l) /\
    \ 2) - 1];\n    }\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bx0z25f.php:18\n\
    Stack trace:\n#0 /tmp/tmp2bx0z25f.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2bx0z25f.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    return $l[(count($l) - 1) / 2];\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmplvix9u5p.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplvix9u5p.php:17\nStack trace:\n#0 /tmp/tmplvix9u5p.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplvix9u5p.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = $l ? $l : array();\n\n    sort($l);\n\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[($n + 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] - $l[($n - 1) / 2 + 1]) / 2;\n}\n</code>\n<|/ a tags=php,sorting |>\n\
    <| c |>\nGood answer.  However you may want to use `rsort($l)` instead in case\
    \ there are multiple values that are equally high within the array.\n<|/ c |>\n\
    <| c |>\nThis solution returns wrong results when there are three or more elements\
    \ with the same median. For example, if you have this array `[2, 3, 5, 5, 10,\
    \ 20]` it should return `5`, but returns `10`.\n<|/ c |>\n<| c |>\n, I don't think\
    \ this solution will work. `rsort()` sorts them in ascending order, so if you\
    \ have `[2, 3, 5, 5, 10, 20]` it will return `[10, 5, 20, 3, 2]`.\n<|/ c |>\n\
    <| c |>\nI've tested it, and you are right. Sorry about that. I'll edit my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nIt took me a while to understand how it works,\
    \ but the code is pretty clear, thank you very much!\n<|/ c |>\n<| a dscore=5\
    \ tags=php,sorting |>\n<code>\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp1o5_lrdv.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l = sort($l);\n  if($l[0] > $l[count($l)-1]) {\n    return\
    \ $l[(count($l)/2)-1];\n  } else {\n    return $l[(count($l)/2)];\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp45pqjs9n.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmp45pqjs9n.php on\
    \ line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45pqjs9n.php:20\n\
    Stack trace:\n#0 /tmp/tmp45pqjs9n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp45pqjs9n.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) % 2) {\n        // medians = [median(l_1), median(l_2)]\n\
    \        $medians = array($l[count($l) / 2 - 1], $l[count($l) / 2]);\n    } else\
    \ {\n        // medians = [median(l_1), median(l_2)] with l_1 <= l_2\n       \
    \ $medians = array($l[count($l) / 2], $l[count($l) / 2 - 1]);\n    }\n\n    return\
    \ $medians;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4ujk1u6.php:24\n\
    Stack trace:\n#0 /tmp/tmpo4ujk1u6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpo4ujk1u6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = $l ? $l : array();\n    $n = count($l);\n    if ($n &\
    \ 1) return $l[($n - 1) / 2];\n    $f = array_count_values($l);\n    $k = $f[$n];\n\
    \    $l = array_slice($l, ($n / 2) + ($k & 1 ? 1 : 0), $k);\n    return $f[$n]\
    \ ? $l[($n / 2) + ($k & 1 ? 1 : 0)]\n                   : median($l);\n}\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1n39bfl.php:22\n\
    Stack trace:\n#0 /tmp/tmpr1n39bfl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpr1n39bfl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $n = count($l);\n  return $n <= 1 || $n % 2 ==\
    \ 0\n    ? $l[floor($n / 2)]\n    : ($l[(count($l) / 2) - 1] + $l[count($l) /\
    \ 2]) / 2;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6tcthfrk.php:19\n\
    Stack trace:\n#0 /tmp/tmp6tcthfrk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp6tcthfrk.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  \n  // Get middle index.\n  $len       = count($l);\n\
    \  $middle    = ceil($len / 2);\n\n  // Return median of left and right halves.\n\
    \  return isset($l[$middle]) ? $l[$middle] : max($l[$middle - 1], $l[$middle]);\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gn59wed.php:22\n\
    Stack trace:\n#0 /tmp/tmp3gn59wed.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3gn59wed.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n & 1) return $l[($n+1)/2];\n\
    \    return ($l[$n/2] + $l[($n+1)/2]) / 2;\n}\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl96aoyk2.php:18\n\
    Stack trace:\n#0 /tmp/tmpl96aoyk2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpl96aoyk2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) % 2 === 1) {\n        sort($l);\n    }\n   \
    \ return $l[(count($l) - 1) /2 ];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php\
    \ dscore=0 |>\nYou can use below function \n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0rdbprw0.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\tif (count($l) % 2 == 0) {\n\t\treturn $l[(count($l)\
    \ / 2)];\n\t} else {\n\t\treturn ($l[($l[count($l) / 2] + 1)] +  $l[(count($l)\
    \ / 2) - 1]) / 2;\n\t}\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tozgdco.php:20\n\
    Stack trace:\n#0 /tmp/tmp3tozgdco.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3tozgdco.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    if (empty($l)) return \"NA\";\n    $median\
    \ = $l[count($l)/2];\n    for ($i = 0; $i < count($l); $i++) {\n        if ($l[$i]\
    \ != $median) break;\n    }\n    return $i==count($l)-1 ? $median : $l[$i];\n\
    }\n</code>\n<|/ a tags=median,php,arrays |>\n<| c |>\nThis is not correct. median\
    \ of [-10, 4, 6, 1000, 10, 20] is 10, while expected value is 15.\n<|/ c |>\n\
    <| a |>\nThis doesn't really answer the question, but it's better than nothing:\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp8fzs0dmq.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n < 2)\n        return\
    \ $l[0];\n    return ($l[($n-1)/2] + $l[$n/2]) / 2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6atq12_f.php:21\n\
    Stack trace:\n#0 /tmp/tmp6atq12_f.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6atq12_f.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  ksort($l);\n  $n = count($l);\n  $half = ceil($n/2);\n  return\
    \ $l[($half-1)];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2r3lfu35.php:19\n\
    Stack trace:\n#0 /tmp/tmp2r3lfu35.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2r3lfu35.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$n = count($l);\n\tif ($n & 1) return ($l[($n -\
    \ 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n\telse return $l[($n - 1) / 2];\n}\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepm5jhnb.php:18\n\
    Stack trace:\n#0 /tmp/tmpepm5jhnb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpepm5jhnb.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
