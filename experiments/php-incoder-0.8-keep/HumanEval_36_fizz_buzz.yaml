name: HumanEval_36_fizz_buzz
language: php
prompt: "<?php\n// Return the number of times the digit 7 appears in integers less\
  \ than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
  // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz($n) {\n"
tests: "function candidate(...$args) {\n    return fizz_buzz(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(50) !== 0) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(78) !== 2) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(79) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(100) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(200)\
  \ !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4000) !==\
  \ 192) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10000) !==\
  \ 639) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100000) !==\
  \ 8026) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $count = 0;\n  for ($i = 1; $i <= $n; ++$i) {\n    if ($i % 11 ==\
    \ 0 || $i % 13 == 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n</code>\n\
    In action:\n<code>\n$ php fizz_buzz.php\n0\n2\n3\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks Sven, I will study this and try to understand the concepts better. Your\
    \ answer was very helpful\n<|/ c |>\n<| c |>\nThanks again. I just saw your new\
    \ answer. Your answer doesn't use recursion.\n<|/ c |>\n<| c |>\n: Yes, it doesn't.\
    \ But it's a very simple solution that doesn't rely on recursion and therefore\
    \ is more efficient.\n<|/ c |>\n<| a tags=php,algorithm,recursion dscore=1 |>\n\
    <code>\n<?php\n$count=0; \n$n=0;\n$count=0; \n$n=1;\n$count=1; \n$n=2;\n$count=3;\
    \ \n$n=4;\n$count=6; \n$n=8;\n$count=9;\n$n=11;\n$count=10;\n$n=13;\n$count=12;\n\
    $n=14;\n$count=15;\n$n=17;\n$count=18;\n$n=19;\n$count=20;\n$n=21;\n$count=22;\n\
    $n=25;\n$count=27;\n$n=29;\n$count=30;\n$n=32;\n$count=33;\n$n=37;\n$count=41;\n\
    $n=45;\n$count=49;\n$n=51;\n$count=53;\n$n=57;\n$count=60;\n$n=68;\n$count=66;\n\
    $n=72;\n$count=77;\n$n=84;\n$count=90;\n$n=96;\n$count=100;\n$n=105;\n$count=111;\n\
    $n=129;\n$count=128;\n$n=136;\n$count=140;\n$n=157;\n$count=158;\n$n=166;\n$count=174;\n\
    $n=181;\n$count=192;\n$n=203;\n$count=207;\n$n=215;\n$count=221;\n$n=243;\n$count=253;\n\
    $n=273;\n$count=288;\n$n=305;\n$count=322;\n$n=347;\n$count=369;", "    if ($n\
    \ % 11 == 0 || ($n % 13 == 0 && $n != 11 && $n != 13)) {\n        return 0;\n\
    \    }\n    return $n > 79 ? 2 : 3;\n}\n\n/**\n * Returns the number of digits\
    \ in $n that follow the given digit.\n * >>> number_digits(123)\n * 2\n * >>>\
    \ number_digits(123456789)\n * 6\n * >>> number_digits(1234567890)\n * 7\n * >>>\
    \ number_digits(111111111111111111111)\n * 9\n * >>> number_digits(1234567890123)\n\
    \ * 11\n */", "  if ($n < 11) return 1;\n  if ($n < 13) return 2;\n  if ($n %\
    \ 11 === 7 || $n % 13 === 7) return 3;\n  return 0;\n}\n", "    $n = intval($n);\n\
    \    $counter = 0;\n    $is_divisible_by_11 = $is_divisible_by_13 = false;\n \
    \   // For each number from 1 to n\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   // If this number is divisible by 11\n        if ($i % 11 == 0) {\n      \
    \      $is_divisible_by_11 = true;\n            $counter++;\n        }\n     \
    \   // If this number is divisible by 13\n        else if ($i % 13 == 0) {\n \
    \           $is_divisible_by_13 = true;\n            $counter++;\n        }\n\
    \        // If this number is neither divisible by 11 or 13\n        else {\n\
    \            $counter++;\n        }\n    }\n    // Return number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13\n  \
    \  if ($is_divisible_by_11 == true) {\n        $counter++;\n    }\n    if ($is_divisible_by_13\
    \ == true) {\n        $counter++;\n    }\n    return $counter;\n}", "    if ($n\
    \ <= 0) {\n        throw new InvalidArgumentException('n must be an integer greater\
    \ than zero');\n    }\n\n    $count = 0;\n\n    do {\n        if ($n % 11 == 0\
    \ && $n % 13 == 0) {\n            $count++;\n        }\n\n        $n = $n / 11;\n\
    \    } while (true);\n\n    return $count;\n}", "  // Count the number of times\
    \ that digit 7 appears in the integers between n and n+11, or n+13 and n+17.\n\
    \  // >>> fizz_buzz(50)\n  // 0\n  // >>> fizz_buzz(78)\n  // 2\n  // >>> fizz_buzz(79)\n\
    \  // 3\n  // >>> fizz_buzz(81)\n  // 3\n  $count = 0;\n  for($i = $n; $i >= $n+11\
    \ && $i <= $n+17; $i += 11) {\n    $count += substr_count($i, '7');\n  }\n\n \
    \ // If count equals 0, the number must be divisible by 11, otherwise it's divisible\
    \ by 13.\n  // >>> fizz_buzz(25)\n  // 1\n  // >>> fizz_buzz(78)\n  // 3\n  //\
    \ >>> fizz_buzz(79)\n  // 3\n  // >>> fizz_buzz(81)\n  // 3\n  return $count ?\
    \ $count : 0;\n}\n</code>\n<code>\n<?php", "    // Write your code here.\n   \
    \ if($n<100){\n        if($n%11==0){\n            return 1;\n        }else{\n\
    \            if($n%13==0){\n                return 2;\n            }else{\n  \
    \              return 0;\n            }\n        }\n    }\n}\n</code>\n<|/ a tags=php,fizzbuzz\
    \ |>\n<| c |>\nThank you but I don't want to use any loop for this.\n<|/ c |>\n\
    <| c |>\nThis is what I actually did but just want to know a better way. Thank\
    \ you for your answer.\n<|/ c |>\n<| c |>\nWhat do you mean by \"better\"?\n<|/\
    \ c |>\n<| c |>\nIt's easier to read and understand.\n<|/ c |>\n<| c |>\nYour\
    \ code has a bug, when $n is equal to 9, you return 0 instead of 2 when $n%11==0\
    \ but you return 1 when $n%13==0. I will suggest you to change your code to this:\
    \ ```if($n<100){\n        if($n%11==0){\n            return 2;\n        }else{\n\
    \            if($n%13==0){\n                return 3;\n            }else{\n  \
    \              return 0;\n            }\n        }\n    }```\n<|/ c |>\n<| a dscore=2\
    \ tags=php,fizzbuzz |>\n<code>", "    return count(array_filter($range(fmod($n,\
    \ 11), 13), 'is_natural_num'));\n}\n</code>\n<|/ a dscore=2 tags=fizzbuzz,php,math\
    \ |>\n<| c |>\nYes, but I don't want to use an external library\n<|/ c |>\n<|\
    \ c |>\n: Why do you want to avoid an external library?\n<|/ c |>\n<| c |>\nI'm\
    \ curious! I like how you think, and it's fun to try new things, but I hate how\
    \ you think too!\n<|/ c |>\n<| c |>\n: It's a shame that they don't have this\
    \ functionality in PHP.  It would have saved me some time, and I'd like to hear\
    \ what people think of it.\n<|/ c |>\n<| c |>\nIt's a shame, because I don't believe\
    \ that I'd be writing any of this code for production just to learn how it works.\
    \  It seems like something that should be part of the language, but I find that\
    \ hard to believe.\n<|/ c |>\n<| a dscore=2 |>\nI like how they use array_search\
    \ to find the first instance of 7 in the given range. This way we avoid searching\
    \ every number in the given range, which could potentially be long.\n<code>",
  "  $num = ($n % 11 == 0) ? '11' : ($n % 13 == 0) ? '13' : $n;\n  return substr($num,\
    \ strpos($num, \"7\") + 1);\n}", "  $count = 0;\n  if ($n % 11 == 0 && $n % 13\
    \ == 0) {\n    $count++;\n  }\n  $result = $n;\n  while ($n % 10 == 0 && $n %\
    \ 5 == 0) {\n    $count += 1;\n    $result = $result / 10;\n  }\n  return $count;\n\
    }", "  return $n % 11 == 0 ? 0 : $n % 13 == 0 ? 2 : 1;\n}", "  return is_int_less_than_n_divisible_by_11($n)\
    \ || is_int_less_than_n_divisible_by_13($n) ? 0 : 2;\n}", "    if ($n % 11 ==\
    \ 0 && $n % 13 == 0) {\n        return 1;\n    }\n    if ($n % 11 == 0 && $n %\
    \ 13 != 0) {\n        return 2;\n    }\n    if ($n % 11 != 0 && $n % 13 == 0)\
    \ {\n        return 3;\n    }\n    if ($n % 11 != 0 && $n % 13 != 0) {\n     \
    \   return 4;\n    }\n    return 0;\n}", "    if ($n <= 0) {\n        return 0;\n\
    \    }\n    $n = (string) $n;\n    $count = 0;\n    $divider = $n % 11;\n    if\
    \ ($divider === 0) {\n        $count += 1;\n        $divider = $n % 13;\n    }\n\
    \    if ($divider === 0) {\n        $count += 1;\n        $divider = $n % 11;\n\
    \    }\n    return $count;\n}\n</code>\n<|/ a |>\n<| c |>\nGreat idea to reuse\
    \ divider variable. Thanks!\n<|/ c |>\n<| a tags=php,fizzbuzz |>\nI wrote a recursive\
    \ function which works:\n<code>", "    $count = 0;\n\n    // Iterate over all\
    \ integers less than or equal to n, which is divisible by 11 or 13.\n    foreach\
    \ (range($n) as $integer) {\n        if ($integer % 11 == 0 ||\n            $integer\
    \ % 13 == 0) {\n            $count++;\n        }\n    }\n\n    return $count;\n\
    }\n", "    if ($n < 7) return $n;\n    if ($n % 11 == 0) return $n;\n    if ($n\
    \ % 13 == 0) return $n + 1;\n}\n", "    if ($n<=0) return 0;\n    $count = 0;\n\
    \    while ($n>0) {\n        if ($n%11==0 && $n%13==0) $count++;\n        $n =\
    \ ($n/10) + ($n%10);\n    }\n    return $count;\n}", "  $count = 0;\n  if ($n\
    \ < 10) {\n    if ($n % 10 == 7) {\n      $count++;\n    }\n  }\n  if ($n < 100)\
    \ {\n    if ($n % 10 == 7 || $n % 10 == 15) {\n      $count++;\n    }\n  }\n \
    \ if ($n < 1000) {\n    if ($n % 10 == 7 || $n % 10 == 15 || $n % 10 == 23) {\n\
    \      $count++;\n    }\n  }\n  if ($n < 10000) {\n    if ($n % 10 == 7 || $n\
    \ % 10 == 15 || $n % 10 == 23 || $n % 10 == 29 || $n % 10 == 31) {\n      $count++;\n\
    \    }\n  }\n  if ($n < 100000) {\n    if ($n % 10 == 7 || $n % 10 == 15 || $n\
    \ % 10 == 23 || $n % 10 == 29 || $n % 10 == 31 || $n % 10 == 37) {\n      $count++;\n\
    \    }\n  }\n  return $count;\n}", "  // return 0 when $n is divisible by 11\n\
    \  if($n % 11 === 0) return 0;\n\n  // count the number of times digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13\n  if($n % 11 === 0\
    \ || $n % 13 === 0) return 2;\n  if($n % 13 === 0) return 3;\n\n  // return count\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 7\n  return 4;\n}\n", "  $x = intval($n);\n  $count = 1;\n  for ($i = 1; $i\
    \ < $x; ++$i) {\n    if ($i % 11 == 0 && $i % 13 == 0) {\n      $count++;\n  \
    \  }\n  }\n  return $count;\n}\n</code>\nNow that we have our function let's make\
    \ a nice little page to call that function from. Our little page would look something\
    \ like this:\n<code>\n<?php\n$count = (int) fizz_buzz($_POST['n']);\nprint \"\
    There were $count Fizz Buzz numbers.\\n\";", "    $i = 1;\n    while($i <= $n)\
    \ {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            echo ($i + 1) .\
    \ \"\\n\";\n            $i += 1;\n        }\n        $i += 1;\n    }\n}\n</code>\n\
    <|/ a |>\n<| a |>\nI have some code which can do it.\n<code>\n$ints = range(1,$n);\n\
    $n1 = $ints[0];\n$n2 = $ints[count($ints)-1];\n\n$a = [0 => '1', 1 => '2', 2 =>\
    \ '3', 3 => '4', 4 => '5', 5 => '6', 6 => '7', 7 => '8', 8 => '9', 9 => '.'];\n\
    $b = array_fill(0,11,'.');\n$c = array_fill(0,13,'.');\n\n$n3 = $n1 % 11;\n$n4\
    \ = $n3 % 10;\n\nif($n4 != 0) {\n    $c1 = '0' . $a[$n4];\n} else {\n    $c1 =\
    \ $a[1];\n}\n\n$n5 = $n3 % 13;\n\nif($n5 == 0) {\n    $c2 = '0' . $b[$n5];\n}\
    \ else {\n    $c2 = $b[$n5];\n}\n\n$n6 = $n3 % 10;\n\nif($n6 == 0) {\n    $c3\
    \ = '0' . $c[$n6];\n} else {\n    $c3 = $c[$n6];\n}\n\n$n7 = $n3 % 11;\n\nif($n7\
    \ == 0) {\n    $c4 = '0' . $a[0];\n} else {\n    $c4 = $a[0];\n}\n\n$n8 = $n7\
    \ % 10;\n\nif($n8 == 0) {\n    $c5 = '0' . $c[0];\n} else {\n    $c5 = $c[0];\n\
    }\n\n$n9 = $n7 % 13;\n\nif($n9 == 0) {\n    $c6 = '0' . $b[0];\n} else {\n   \
    \ $c6 = $b[0];\n}\n\n$result = $n1 . $c1 . $n2 . $c2 . $n3 . $c3 . $n4 . $c4 .\
    \ $n5 . $c5 . $n6 . $c6 . $n7 . $c7 . $n8 . $c8 . $n9 . $c9;\necho $result;\n\
    </code>\n<|/ a dscore=0 tags=php,fizzbuzz,fizzbuzz-algorithm |>\n<| a tags=php,fizzbuzz,fizzbuzz-algorithm\
    \ |>\n<code>\n<?php\nfor ($i=1; $i<=100; $i++) {\n    if ($i%11==0 || $i%13==0)\
    \ {\n", "    $count = 0; // number of times 7 appears in the numbers\n    // count\
    \ up all the integers less than n\n    while ($n < 1000) {\n        $n++;\n  \
    \      $count += ($n % 11 == 0) ? 1 : 0;\n        $count += ($n % 13 == 0) ? 1\
    \ : 0;\n    }\n    return $count;\n}\n", "  return ($n & 7) + fizz_buzz($n/11)\
    \ * 13 + fizz_buzz($n/37) * 37;\n}\n", "    $count = 0;\n    while ($n >= 11 ||\
    \ $n >= 13) {\n        if ($n % 11 == 0) $count++;\n        if ($n % 13 == 0)\
    \ $count++;\n        $n = ($n - $n%11) / 10;\n    }\n    return $count;\n}\n",
  "  if ($n < 11) return 0;\n  if ($n < 13) return 1;\n  $count = 0;\n  for ($i =\
    \ 11; $i > $n; $i--) {\n    if ($n % $i == 0 || $n % ($i + 1) == 0) {\n      $count++;\n\
    \    }\n  }\n  return $count;\n}\n</code>\n<|/ a tags=fizzbuzz,python,php |>\n\
    <| a tags=fizzbuzz,python,php |>\nIf you wanna do it in python you can do\n<code>\n\
    def fizz_buzz(n):\n    if n%11==0 and n%13==0: \n       return \"FizzBuzz\"\n\
    \    if n%11==0: \n       return \"Fizz\"\n    if n%13==0: \n       return \"\
    Buzz\"\n    return str(n)\n</code>\n<|/ a dscore=3 |>\n<| c |>\nYour answer is\
    \ also correct. But this one shows how to do it in Python. Thanks for your effort!\n\
    <|/ c |>\n<| a |>\nIn Java:\n<code>\npublic class FizzBuzz {\n\npublic static\
    \ void main(String[] args) {\n    FizzBuzz fbuzz = new FizzBuzz();\n    fbuzz.run();\n\
    }\n\nvoid run() {\n    int count = 1;\n\n    for (Integer i = 1; i * i < 100;\
    \ i++) {\n        if (i % 11 == 0 && i % 13 == 0) {\n            System.out.println(\"\
    FizzBuzz\");\n        } else if (i % 11 == 0) {\n            System.out.println(\"\
    Fizz\");\n        } else if (i % 13 == 0) {\n            System.out.println(\"\
    Buzz\");\n        } else {\n            System.out.println(count.toString());\n\
    \            count++;\n        }\n    }\n}\n</code>\n}\n<|/ a dscore=2 tags=fizzbuzz,python,php\
    \ |>\n<| a dscore=2 tags=fizzbuzz,python,php |>\nIn PHP:\n<code>\n<?php\n", " \
    \   return intval($n / 11) * intval($n / 13) + intval($n % 11);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis fails e.g. for 50. Try `fizz_buzz(55)` vs `fizz_buzz(51)`\n\
    <|/ c |>\n<| c |>\n`fizz_buzz(51)` gives 2 not 3 because `fizz_buzz(50)` returns\
    \ `2` for the first 5 numbers, `1` for the remainder of those 5 and `0` for the\
    \ remainder after those 5\n<|/ c |>\n<| c |>\nYes, you are right, I missed the\
    \ division in the first place.  You are also correct, thank you for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nThis code does not seem to work for the question stated.\
    \ For example, fizz_buzz(50) gives 2 when it should be 3.\n<|/ c |>\n<| c |>\n\
    Thanks for your efforts. But this does not work too.\n<|/ c |>\n<| a |>\nHere\
    \ is a solution written in Python. The function fizz_buzz has two arguments. One\
    \ is the number of digits you want to check. And the second is the number of digits\
    \ you want. The function returns the number of digits that fizzbuzz should be\
    \ applied to. So for fizz_buzz(100, 11), it should return 11. \n<code>\ndef fizz_buzz(n,\
    \ k):\n   if n % k == 0:\n      return 0\n   else:\n      return (n/k) * fizz_buzz(n,k)\
    \ + 1\n\ndef fizz_buzz_2(n):\n    return fizz_buzz(n, 10)\n</code>\n<|/ a dscore=2\
    \ tags=algorithm,dynamic-programming,language-agnostic,fizzbuzz |>\n<| a dscore=1\
    \ tags=algorithm,dynamic-programming,language-agnostic,fizzbuzz |>\nThis is the\
    \ best approach I have found (for small numbers) so far.  It's O(k) time and O(1)\
    \ space.  It doesn't use any language constructs that would make it harder to\
    \ read; it just goes from left to right and keeps track of the result (so no recursion).\n\
    <code>\ndef fizz_buzz(number):\n    final = number\n    current = 0\n    digits\
    \ = 0\n\n    while current <= number:\n        if current % 10 == 0:\n       \
    \     digits += 1\n        if digits == 3:\n            final += number\n    \
    \    current += 1\n", "    return ($n % 11 == 0 || $n % 13 == 0) ? 0 : 1 + (($n\
    \ % 11) == 0 && $n % 13 == 0) ? 2 : 3;\n}\n\n$primesUpTo = 100000;\n$primes =\
    \ range(2, $primesUpTo);\n", "  for ($i = 0; $i < $n; $i++) {\n    if ($i % 11\
    \ == 0 && $i % 13 == 0) {\n      echo \"$i\\n\";\n    }\n    else {\n      echo\
    \ \"$i \";\n    }\n  }\n}", "    if ($n >= 100 || $n < 0) {\n        return 0;\n\
    \    }\n    if ($n % 11 == 0) {\n        if ($n % 13 == 0) {\n            return\
    \ 2;\n        }\n        return 1;\n    }\n    if ($n % 13 == 0) {\n        return\
    \ 1;\n    }\n    return 0;\n}\n</code>\n<|/ a dscore=4 |>\n<| a |>\nJust want\
    \ to share my solution:\n<code>", "  $sum = 0;\n  for($i = 1; $i <= $n; $i++)\n\
    \    if($i % 11 == 0 || $i % 13 == 0) {\n      if($i % 11 == 0)\n        $sum\
    \ += $i;\n      if($i % 13 == 0)\n        $sum += $i;\n    }\n  return $sum;\n\
    }\n", "    if ($n < 11 || $n % 11 == 0 || $n % 13 == 0)\n        return 0;\n \
    \   else\n        return 2;\n}\n", "  $count = 0; // Counts how many times the\
    \ digit 7 appears\n  $num = $n;\n  if ($num == 0) return 0;\n  if ($num > 0 &&\
    \ $num % 11 == 0 || $num > 0 && $num % 13 == 0) $count++;\n  while (--$num >=\
    \ 0) {\n    if ($num % 11 == 0) $count++;\n    if ($num % 13 == 0) $count++;\n\
    \  }\n  return $count;\n}", "    $counter = 0;\n    while ($n >= 11 || $n >= 13)\
    \ {\n        if ($n % 11 == 0 && $n % 13 == 0) {\n            $counter++;\n  \
    \      } else if ($n % 11 == 0) {\n            $counter++;\n        } else if\
    \ ($n % 13 == 0) {\n            $counter++;\n        } else {\n            $counter++;\n\
    \        }\n        $n = $n / 11;\n    }\n    return $counter;\n}\n</code>\n<|/\
    \ a tags=fizzbuzz,php dscore=1 |>\n<| a |>\nI wrote my own answer before seeing\
    \ the answers above. The code below works.\n<code>", "  $n = (int) $n;\n  if ($n\
    \ <= 0) {\n    return 0;\n  }\n  $result = 0;\n  for ($i = 1; $i <= $n; ++$i)\
    \ {\n    if (($i % 11) == 0) {\n      $result ++;\n    }\n    if (($i % 13) ==\
    \ 0) {\n      $result ++;\n    }\n  }\n  return $result;\n}\n", "  $result = 0;\n\
    \  $nums = range($n, 0, -1);\n  foreach ($nums as $n) {\n    if ($n % 11 == 0\
    \ || $n % 13 == 0) {\n      $result ++;\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,fizzler,fizzler-buzz,php |>\n<| c |>\nYour code does not return\
    \ the correct amount of Fizz and Buzz instances, as it returns \"Fizz\" when $n\
    \ % 3 == 0, \"Buzz\" when $n % 5 == 0, \"FizzBuzz\" when $n % 3 == 0, \"Buzz\"\
    \ when $n % 5 == 0, and \"FizzBuzz\" when $n % 3 == 0, \"Fizz\" when $n % 5 ==\
    \ 0, \"Fizz\" when $n % 3 == 0, \"Buzz\" when $n % 5 == 0, \"Buzz\" when $n %\
    \ 3 == 0, \"FizzBuzz\" when $n % 3 == 0, \"Fizz\" when $n % 5 == 0, \"Buzz\" when\
    \ $n % 5 == 0, \"Buzz\" when $n % 3 == 0, \"FizzBuzz\" when $n % 5 == 0, \"Fizz\"\
    \ when $n % 3 == 0, \"Fizz\" when $n % 5 == 0, \"Buzz\" when $n % 5 == 0, \"Buzz\"\
    \ when $n % 5 == 0, \"FizzBuzz\" when $n % 3 == 0, \"Fizz\" when $n % 5 == 0,\
    \ \"Fizz\" when $n % 3 == 0, \"Buzz\" when $n % 5 == 0, \"Buzz\" when $n % 5 ==\
    \ 0, \"FizzBuzz\"\n<|/ c |>\n<| c |>\nApologies, I misunderstood what the question\
    \ was asking - I thought the point was to identify which numbers had a specific\
    \ amount of FizzBuzz instances; I believe this code is correct and does do that.\
    \ As mentioned, it is unnecessarily complicated and doesn't do what you need it\
    \ to do.\n<|/ c |>\n<| c |>\nThanks. It's been a long day. Just thought I'd share\
    \ my solution, maybe it helps someone...\n<|/ c |>\n<| a tags=fizzbuzz,fizzler,fizzler-buzz,php\
    \ |>\nI thought I would post my solution to this problem which I found to be a\
    \ little cleaner. I believe that this is what is being asked in the question:\n\
    \"Identify which numbers have the most FizzBuzz instances\"\n<code>", "  for ($i\
    \ = 0; $i < $n; ++$i) {\n    if ($i % 11 == 0 || $i % 13 == 0) {\n      echo $i\
    \ . \" \";\n    }\n  }\n}", "    if ($n % 11 == 0 || $n % 13 == 0) {\n       \
    \ if ($n % 11 == 0) {\n            return 0;\n        }\n        if ($n % 13 ==\
    \ 0) {\n            return 2;\n        }\n        return 1;\n    }\n    return\
    \ 0;\n}\n", "    if ($n % 11 == 0)\n        return $n + 1;\n    if ($n % 13 ==\
    \ 0)\n        return $n + 2;\n    return $n;\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis is awesome. I didn't know you could define functions like that.\
    \ Thanks!\n<|/ c |>\n<| c |>\nWhat is the meaning of this `return ($n % 11 ==\
    \ 0)` ?\n<|/ c |>\n<| c |>\n.Wanare Yes this conditional statement returns true\
    \ if $n is divisible by 11 and false otherwise. `return (condition) ? \"Y\" :\
    \ \"N\"` can be shortened to `return $n % 11 == 0;`. So the whole conditional\
    \ statement returns `true` or `false` which is then converted to `\"Y\"` or `\"\
    N\"` for `$return`.\n<|/ c |>\n<| a dscore=4 |>\nHere's a way to do it with only\
    \ two functions:\n<code>", "  return (int)ceil(($n % 11) == 0 || $n % 13 == 0)\
    \ ? 0 : $n;\n}\n</code>\n<|/ a dscore=3 tags=php,fizzbuzz,algorithm,loops |>\n\
    <| a tags=php,fizzbuzz,algorithm,loops dscore=2 |>\nHere is my solution:\n<code>\n\
    <?php", "    $count = 0;\n    do {\n        if ($n % 11 == 0) $count += 1;\n \
    \       if ($n % 13 == 0) $count += 1;\n        $n /= 11;\n        $n /= 13;\n\
    \    } while ($n > 0);\n    return $count;\n}\n", "    $count = 0;\n    if ($n\
    \ % 11 == 0 || $n % 13 == 0) {\n        $count++;\n    }\n    while ($n != 0)\
    \ {\n        if ($n % 10 == 7) {\n            $count++;\n        }\n        $n\
    \ = (int)($n/10);\n    }\n    return $count;\n}", "  $result = 1;\n  for ($i =\
    \ 1; $i < $n; $i++) if ($i % 11 == 0 || $i % 13 == 0) {\n    if ($i % 11 == 0)\
    \ $result ++;\n    if ($i % 13 == 0) $result ++;\n  }\n  return $result;\n}",
  "    $count = 0;\n    while ($n > 0 || $n >= 10) {\n        if ($n % 11 == 0 ||\
    \ $n % 13 == 0) {\n            $count++;\n        }\n        $n = $n / 11;\n \
    \   }\n    return $count;\n}", "    if ($n % 11 == 0 && $n % 13 == 0) {\n    \
    \    return 0;\n    } elseif ($n % 11 == 0) {\n        return 1;\n    } elseif\
    \ ($n % 13 == 0) {\n        return 2;\n    } else {\n        return 3;\n    }\n\
    }", "  $count = 0;\n  for ($i = 1; $i < $n; $i += 11) {\n    if ($i % 11 == 0)\
    \ $count++;\n  }\n  for ($i = 1; $i < $n; $i += 13) {\n    if ($i % 13 == 0) $count++;\n\
    \  }\n  return $count;\n}\n", "  return ($n % 11 == 0 && ($n % 13 == 0) ? ($n\
    \ % 5 == 0 ? 0 : ($n % 7 == 0 ? 1 : ($n % 11 == 0 ? 2 : 3))) : 3);\n}\n", "  \
    \  $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if (($i % 11) == 0\
    \ || ($i % 13) == 0) {\n            $result++;\n        }\n    }\n    return $result;\n\
    }\n", "  return preg_match('/7/i', \"$n\") ? ($n % 11) == 0 ? ($n % 13) ? 0 :\
    \ 2 : 1 : -1;\n}\n</code>\n<|/ a dscore=1 tags=php,function |>\n<| a |>\n<code>",
  "    if($n<1){\n        return 0;\n    }\n    if($n%11==0){\n        return 1;\n\
    \    }\n    if($n%13==0){\n        return 2;\n    }\n    return fizz_buzz($n/11);\n\
    }", "  return (int)($n % 11 == 0 || $n % 13 == 0) ? 0 : $n + fizz_buzz($n+1);\n\
    }", "  if ($n<7) return 0;\n  if ($n>50) return 3;\n  $s=0;\n  for ($i=1; $i<=$n;\
    \ $i+=11) {\n    $s += ($i % 11 == 0 ? 1 : 0);\n  }\n  for ($i=1; $i<=$n; $i+=13)\
    \ {\n    $s += ($i % 13 == 0 ? 1 : 0);\n  }\n  return $s;\n}\n</code>\n<|/ a tags=algorithm,php,dynamic-programming\
    \ |>\n<| c |>\nHow does this deal with prime numbers?\n<|/ c |>\n<| c |>\nI see\
    \ that your code doesn't handle prime numbers, like 5, 7, 11, 13, 17, 19\n<|/\
    \ c |>\n<| c |>\n- Fixed it! :)\n<|/ c |>\n<| c |>\n- I tested all numbers up\
    \ to 1000. If you want to test with larger numbers, change the 'for' loops in\
    \ 'fizz_buzz()' to 'for' loops that iterate through all numbers that are <= the\
    \ argument, since this function is only defined for integers <= 1000 or larger.\
    \ Since fizz_buzz(78) returns 3, the code was never getting entered for numbers\
    \ <= 78. I hope this helps!\n<|/ c |>\n<| c |>\nThat would only work if you were\
    \ starting with a prime number. Say you start with 17, fizz_buzz(78) returns 3,\
    \ not 2. I don't think it matters much since it's trivial to fix the code with\
    \ is_prime function.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$total=0;\n\n\
    $arr=array();\n\nfor($i=2;$i<=1000;$i++){\n  if(fizz_buzz($i)==3){\n    $total++;\n\
    \    array_push($arr, $i);\n  }\n}\necho \"$total numbers found\";\nprint_r($arr);",
  "    if ($n % 11 === 0 || $n % 13 === 0) {\n        return $n;\n    } else {\n \
    \       return fizz_buzz($n - 1) + fizz_buzz($n - 13);\n    }\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=algorithm,php |>\nA PHP implementation using recursion:\n\
    <code>", "    if ($n % 11 == 0 && $n % 13 == 0) {\n        return 0;\n    }\n\
    \    if ($n % 11 == 0 && $n % 13 != 0) {\n        return 1;\n    }\n    if ($n\
    \ % 11 != 0 && $n % 13 == 0) {\n        return 2;\n    }\n    if ($n % 11 != 0\
    \ && $n % 13 != 0) {\n        return 3;\n    }\n}\n", "  $i = 0;\n  while ($n\
    \ > 2) {\n    if ($i % 11 == 0) return $i;\n    if ($i % 13 == 0) return $i;\n\
    \    $i++;\n    $n -= 1;\n  }\n  return $i;\n}\n</code>\nThe main benefit of my\
    \ solution is that the code is much more readable than the other solutions, since\
    \ it is quite easy to read and understand. I've also rewritten the loop condition\
    \ into the while loop, which makes code more readable. I think this makes the\
    \ code even more readable.\n<|/ a tags=php,fizzbuzz dscore=1 |>\n<| a tags=php,fizzbuzz\
    \ |>\n<code>\n<?php", "  if($n % 11 == 0)\n    return ceil($n/11);\n  if($n %\
    \ 13 == 0)\n    return ceil($n/13);\n  return 0;\n}", "  if ($n < 100) return\
    \ ($n % 11 === 0 ? 0 : $n % 13 === 0 ? 2 : 1);\n  if ($n < 111) return ($n % 11\
    \ === 0 ? 0 : $n % 13 === 0 ? 2 : 1);\n  return ($n % 11 === 0 ? 0 : ($n % 13\
    \ === 0 ? 2 : 1));\n}", "  return (int)ceil(log10($n));\n}\n", "    $arr = str_split($n);\n\
    \    $count = 0;\n    foreach ($arr as $key => $value) {\n        if ($value ==\
    \ \"7\") {\n            $count++;\n        }\n    }\n\n    return $count;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nHi Jason, thanks for your help. I did think\
    \ of using a while loop but I was told a while loop wouldn't be efficient for\
    \ large numbers. I've added my code above for further clarification.\n<|/ c |>\n\
    <| a dscore=0 |>\nIt sounds like you just want the number of times 7 appears in\
    \ an integer.  You could do this pretty simply with a while loop like so:\n<code>\n\
    <?php\n", "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $divisor = 11\
    \ + $i % 13;\n    if ($i % $divisor) {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThe OP mentioned \"I thought\
    \ of using arrays to store the values of divisible by numbers\"\n<|/ c |>\n<|\
    \ c |>\nThat is true, and I thought of that, but I was trying to find a faster\
    \ way to do it.\n<|/ c |>\n<| c |>\nI added a version that does not use arrays.\n\
    <|/ c |>\n<| c |>\nI am sorry about not mentioning that my teacher wants us to\
    \ do it using a for-loop that counts up from 1 up to $n.\n<|/ c |>\n<| a tags=php\
    \ |>\nYou can do it like that:\n<code>\n<?php", "  $nmod = $n % 11;\n  $nmod_div\
    \ = $n % 13;\n  if($nmod_div <= 2) {\n    return 0;\n  }\n  else {\n    if($nmod\
    \ === 7 || ($nmod === 11 && $nmod_div === 1)) {\n      return 2;\n    }\n    else\
    \ {\n      return 3;\n    }\n  }\n}", "  return (int)$n - (int)$n % 11 == 0 ?\n\
    \    (int)$n % 11 == 0 ?\n      (int)$n % 13 == 0 ?\n        (int)$n % 17 == 0\
    \ ?\n          (int)$n % 19 == 0 ? 0 :\n          (int)$n % 19 == 0 ? 1 :\n  \
    \        (int)$n % 17 == 0 ? 2 :\n          (int)$n % 13 == 0 ? 3 :\n        \
    \  (int)$n % 11 == 0 ? 4 :\n          (int)$n % 7 == 0 ? 5 :\n          (int)$n\
    \ % 5 == 0 ? 6 :\n          (int)$n % 3 == 0 ? 7 :\n          (int)$n % 3 == 0\
    \ ? 8 :\n          (int)$n % 1 == 0 ? 9 :\n          (int)$n % 1 == 0 ? 10 :\n\
    \          (int)$n % 1 == 0 ? 11 :\n          (int)$n % 1 == 0 ? 12 :\n      \
    \    (int)$n % 1 == 0 ? 13 :\n          (int)$n % 1 == 0 ? 14 :\n          (int)$n\
    \ % 1 == 0 ? 15 :\n          (int)$n % 1 == 0 ? 16 :\n          (int)$n % 1 ==\
    \ 0 ? 17 :\n          (int)$n % 1 == 0 ? 18 :\n          (int)$n % 1 == 0 ? 19\
    \ :\n          (int)$n % 1 == 0 ? 20 :\n          (int)$n % 1 == 0 ? 21 :\n  \
    \        (int)$n % 1 == 0 ? 22 :\n          (int)$n % 1 == 0 ? 23 :\n        \
    \  (int)$n % 1 == 0 ? 24 :\n          (int)$n % 1 == 0 ? 25 :\n          (int)$n\
    \ % 1 == 0 ? 26 :\n          (int)$n % 1 == 0 ? 27 :\n          (int)$n % 1 ==\
    \ 0 ? 28 :\n          (int)$n % 1 == 0 ? 29 :\n          (int)$n % 1 == 0 ? 30\
    \ :\n          (int)$n % 1 == 0 ? 31 :\n          (int)$n % 1 == 0 ? 32 :\n  \
    \        (int)$n % 1 == 0 ? 33 :\n          (int)$n % 1 == 0 ? 34 :\n        \
    \  (int)$n % 1 == 0 ? 35 :\n          (int)$n % 1 == 0 ? 36 :\n          (int)$n\
    \ % 1 == 0 ? 37 :\n          (int)$n % 1 == 0 ? 38 :\n          (int)$n % 1 ==\
    \ 0 ? 39 :\n          (int)$n % 1 == 0 ? 40 :\n          (int)$n % 1 == 0 ? 41\
    \ :\n          (int)$n % 1 == 0 ? 42 :\n          (int)$n % 1 == 0 ? 43 :\n  \
    \        (int)$n % 1 == 0 ? 44 :\n          (int)$n % 1 == 0 ? 45 :\n        \
    \  (int)$n % 1 == 0 ? 46 :\n          (int)$n % 1 == 0 ? 47 :\n          (int)$n\
    \ % 1 == 0 ? 48 :\n          (int)$n % 1 == 0 ? 49 :\n          (int)$n % 1 == ",
  "    $num = $n / 11;\n    $rem = ($n % 11);\n    if ($rem == 0) {\n        return\
    \ 0;\n    }\n\n    return ($num + fizz_buzz($num + 1));\n}\n", "  if($n % 11 ==\
    \ 0 || $n % 13 == 0) {\n    return 0;\n  }\n  return fizz_buzz(fizz_buzz($n/11)\
    \ + fizz_buzz($n/13));\n}\n", "  for ($i = 0; $i < $n; $i++) {\n    if ($i % 11\
    \ == 0 || $i % 13 == 0) {\n      echo 0;\n    } else {\n      echo 1;\n    }\n\
    \  }\n}\n</code>\n<|/ a dscore=0 tags=math,php,algorithm,fizzbuzz |>\n<| a dscore=0\
    \ |>\nI took a different approach. \n<code>", "  return ($n & 7 ? 0 : 2) + ($n\
    \ & 9 ? 1 : 3) + ($n & 13 ? 2 : 0);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for\
    \ the answer! This is what I thought the problem was, but I'm still a beginner\
    \ so I didn't really understand what was going on in the code.  I appreciate the\
    \ explanation though.\n<|/ c |>\n<| a |>\nI wrote a more compact version of your\
    \ original code that seems to work for me.  I suspect that there are some errors\
    \ in your version, and that is why the function is not working.\n<code>", "  \
    \  $count = 0;\n    do {\n        if ($n%11==0 || $n%13==0) $count++;\n      \
    \  $n = $n+1;\n    } while ($n%11==0 || $n%13==0);\n    return $count;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=buzz-words,php dscore=2 |>\nA more efficient method\
    \ would be using a binary search instead of a do-while loop.\n<code>", "  if ($n\
    \ < 0 || $n % 11 == 0 or  $n % 13 == 0) {\n    return 0;\n  }\n  $a = $n % 11;\n\
    \  $b = $n % 13;\n  if ($a === $b) return 2;\n  return $a + fizz_buzz($b);\n}",
  "\treturn (int)floor((pow($n, 3) + $n) / pow(11, 2));\n}", "  for ($i = 0; $n <\
    \ $i; ++$i) {\n    if ($i % 11 == 0 && $i % 13 == 0) return $i;\n  }\n}\n</code>\n\
    I suggest you take a look at the following videos which contain many examples\
    \ and explanations (and more explanations) about PHP loops (and recursion):\n\n\
    https://www.youtube.com/watch?v=wNXWZwl9D4s\nhttps://www.youtube.com/watch?v=D4VjS8jlLnI\n\
    https://www.youtube.com/watch?v=YZqM3YjQo3M\nhttps://www.youtube.com/watch?v=gTq9zgFsZfM\n\
    https://www.youtube.com/watch?v=2W8KyK3YlEw\n\nHere is a very simple example of\
    \ what you can do with a loop and recursion (I used the term recursion loosely\
    \ since loops can be thought of as recursion).\n<code>", "  return count(array_filter(range($n),\
    \ function ($x) { return $x % 11 == 0 || $x % 13 == 0; }));\n}\n</code>\n<|/ a\
    \ dscore=2 tags=algorithm,php,big-o,fizzbuzz |>\n<| c |>\nI agree, this is an\
    \ optimal solution (although not as simple as I thought)\n<|/ c |>\n<| c |>\n\
    Your solution is indeed the fastest, and simplest one. Btw, thanks for sharing\
    \ your solution, it reminded me of those fizzbuzz challenges\n<|/ c |>\n<| a dscore=1\
    \ |>\nYou can use the following simple logic:\n<code>\n<?php", "\tif ($n < 11)\
    \ {\n\t\treturn 0;\n\t} elseif ($n < 13) {\n\t\treturn 1;\n\t}\n\tfor ($i = 1;\
    \ $i < $n; $i++) {\n\t\tif ($i % 11 == 0 && $i % 13 == 0) {\n\t\t\treturn $i;\n\
    \t\t}\n\t}\n\treturn 0;\n}\n", "    $count = 0;\n    for($i = 1; $i <= $n; ++$i)\
    \ {\n        if($i % 11 == 0 && $i % 13 == 0) {\n            $count += 1;\n  \
    \      }\n    }\n    return $count;\n}", "  echo fizz_buzz($n, 0) . \"\\n\";\n\
    }\n", "    return ($n % 11 == 0 || $n % 13 == 0) ? 1 : 0;\n}", "    return (int)((int)$n%(13*11+1)/13)\
    \ - ((int)$n%(11*13+1)/11);\n}", "    $i = 0;\n    $return = 0;\n    while ($i\
    \ < $n) {\n        if ($i % 11 == 0 && $i % 13 == 0) {\n            $return +=\
    \ 1;\n        }\n        $i++;\n    }\n    return $return;\n}\n</code>\nEDIT 2\n\
    A more complex solution using an anonymous function in which you can pass an arbitrary\
    \ function that takes a value as an argument and returns a value to be tested\
    \ for being divisible by 11 or 13:\n<code>\n<?php\n", "    if ($n < 0) return\
    \ 0;\n    if ($n < 11) return $n;\n    if ($n < 13) return 3;\n    return 5;\n\
    }", "  return ($n <= 13) ? $n%11 == 1 ?  $n%13 == 1 ?  $n : 0;\n}", "  $nToDiv\
    \ = 10 * $n % 19;\n  $nToDiv += 5 * $n % 19;\n  $nToDiv += 3 * $n % 19;\n  return\
    \ $nToDiv > 11;\n}", "    $count = 0; //count the numbers that are divisible by\
    \ 11\n    for($i = 1; $i <= $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 ==\
    \ 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n", " \
    \   $counter = 0;\n    $num = 0;\n    while ($n < 1000) {\n        $num = $num\
    \ * 10 + $n;\n        $n++;\n        if ($num % 11 == 0 || $num % 13 == 0) {\n\
    \            $counter++;\n        }\n    }\n    return $counter;\n}\n</code>\n\
    <|/ a dscore=0 tags=php |>\n<| c |>\nIt works like a charm. Thanks for the help.\
    \ Sorry that I didn't post any of my attempts. Your code is awesome, I'll take\
    \ it for future reference. Cheers.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php",
  "  // Using a loop to test each of the numbers from 1 to $n.\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    // A variable that holds the remainder of the current number\
    \ divided by 11.\n    $remainder = $i % 11;\n    // If the remainder is 0 or 5,\
    \ it is divisible by 11.\n    if ($remainder == 0 || $remainder == 5) {\n    \
    \  // The remainder is 0 and 5; it is divisible by 11.\n      $num_divisible =\
    \ $remainder;\n    }\n    // If the remainder is 1, 2, 3, 4, 6, 8, or 9, it is\
    \ divisible by 13 and not divisible by 11.\n    elseif (in_array($remainder, [1,\
    \ 2, 3, 4, 6, 8, 9])) {\n      $num_divisible = $remainder;\n    }\n    // If\
    \ the remainder is 10, it is divisible by 11.\n    elseif ($remainder == 10) {\n\
    \      $num_divisible = $remainder;\n    }\n    // The remainder is not divisible\
    \ by 11, 13, or 10.\n    else {\n      // A variable that holds the remainder\
    \ of the current number divided by 13.\n      $remainder = $i % 13;\n      //\
    \ If the remainder is 1, 3, 7, or 9, it is divisible by 13 and not divisible by\
    \ 11.\n      if (in_array($remainder, [1, 3, 7, 9])) {\n        $num_divisible\
    \ = $remainder;\n      }\n      // If the remainder is 2, 6, 10 or 12, it is divisible\
    \ by 13 and not divisible by 11.\n      elseif (in_array($remainder, [2, 6, 10,\
    \ 12])) {\n        $num_divisible = $remainder;\n      }\n      // The remainder\
    \ is not divisible by 13, 11, or 12.\n      else {\n        $num_divisible = 0;\n\
    \      }\n    }\n\n    // If $num_divisible is 1, 3, 7, or 9, it is the answer.\n\
    \    if (in_array($num_divisible, [1, 3, 7, 9])) {\n      $answer[] = $num_divisible;\n\
    \    }\n    // If $num_divisible is 2, 6, 10 or 12, it is the answer.\n    elseif\
    \ (in_array($num_divisible, [2, 6, 10, 12])) {\n      $answer[] = $num_divisible;\n\
    \    }\n  }\n  // Return the answer array.\n  return $answer;\n}", "    if ($n\
    \ < 10)\n        return $n;\n    if ($n < 100)\n        return $n % 10 === 7 ?\
    \ $n : fizz_buzz($n / 10);\n    if ($n < 1000)\n        return $n % 100 === 7\
    \ || $n % 100 === 11 ? $n : fizz_buzz($n / 100);\n    if ($n < 10000)\n      \
    \  return $n % 100 === 7 || $n % 100 === 11 || $n % 100 === 13 ? $n : fizz_buzz($n\
    \ / 1000);\n    return $n % 100 === 7 || $n % 100 === 11 || $n % 100 === 13 ||\
    \ $n % 100 === 15 ? $n : fizz_buzz($n / 10000);\n}\n", "    $fizz_buzz = array(\n\
    \        \"0\" => 0,\n        \"1\" => 1,\n        \"2\" => 1,\n        \"3\"\
    \ => 1,\n        \"4\" => 1,\n        \"5\" => 2,\n        \"6\" => 2,\n     \
    \   \"7\" => 3,\n        \"8\" => 3,\n        \"9\" => 3\n    );\n    return isset($fizz_buzz[$n])\
    \ ? $fizz_buzz[$n] : 0;\n}", "    return preg_match('/(?:11|13)$/', $n) ? $n :\
    \ 3;\n}\n</code>\n<|/ a tags=php,function dscore=3 |>\n<| c |>\nYeah I like this\
    \ one. I'd use two if-statements though, since it's only one return statement\
    \ to worry about.\n<|/ c |>\n<| c |>\nThanks, I agree with you on this, but in\
    \ my case i also need to return 3 if there are more than 3 fizz buzz numbers.\
    \ So, I think using a switch is not the best way to solve this issue. Your code\
    \ is the best one for this situation.\n<|/ c |>\n<| c |>\nI changed it to a switch\
    \ statement, so it returns 3 if there's more than 3 fizz buzz numbers as well.\n\
    <|/ c |>\n<| c |>\nThanks! It works, but i think i'll use my own solution, because\
    \ it is not so complicated and easier to read and understand\n<|/ c |>\n<| c |>\n\
    I agree, it works fine, but I think it could be better to use `if ($n > 0) return\
    \ $n;` to make it more readable.\n<|/ c |>\n<| a |>\n<code>\n<?php\n", "  return\
    \ $n % 11 == 0 || $n % 13 == 0 ? 0 : $n % 9 == 0 ? 1 : 2;\n}\n", "\t$n--;\n\t\
    // Set up the variables\n\t$n1 = $n%11;\n\t$n2 = $n%13;\n\t$n3 = $n%17;\n\t$n4\
    \ = $n%20;\n\t$n5 = $n%25;\n\t$n6 = $n%30;\n\t$n7 = $n%37;\n\t$n8 = $n%42;\n\t\
    $n9 = $n%49;\n\t$n10 = $n%57;\n\t$n11 = $n%64;\n\t$n12 = $n%71;\n\t$n13 = $n%82;\n\
    \t$n14 = $n%93;\n\t$n15 = $n%103;\n\t$n16 = $n%113;\n\t$n17 = $n%123;\n\t$n18\
    \ = $n%135;\n\t$n19 = $n%145;\n\t$n20 = $n%157;\n\t$n21 = $n%171;\n\t$n22 = $n%181;\n\
    \t$n23 = $n%193;\n\t$n24 = $n%203;\n\t$n25 = $n%213;\n\t$n26 = $n%223;\n\t$n27\
    \ = $n%233;\n\t$n28 = $n%243;\n\t$n29 = $n%253;\n\t$n30 = $n%263;\n\t$n31 = $n%273;\n\
    \t$n32 = $n%283;\n\t$n33 = $n%295;\n\t$n34 = $n%307;\n\t$n35 = $n%321;\n\t$n36\
    \ = $n%341;\n\t$n37 = $n%373;\n\t$n38 = $n%395;\n\t$n39 = $n%411;\n\t$n40 = $n%433;\n\
    \t$n41 = $n%453;\n\t$n42 = $n%467;\n\t$n43 = $n%491;\n\t$n44 = $n%523;\n\t$n45\
    \ = $n%545;\n\t$n46 = $n%567;\n\t$n47 = $n%591;\n\t$n48 = $n%623;\n\t$n49 = $n%645;\n\
    \t$n50 = $n%677;\n\t$n51 = $n%691;\n\t$n52 = $n%723;\n\t$n53 = $n%745;\n\t$n54\
    \ = $n%777;\n\t$n55 = $n%791;\n\t$", "    $count = 0;\n    while ($n % 11 == 0\
    \ || $n % 13 == 0) {\n        $n++;\n        $count++;\n    }\n    return $count;\n\
    }\n", "    $divisors = array('11', '13');\n    if (in_array($n % $divisors, $divisors))\
    \ {\n        return 0;\n    }\n    return 2 * fizz_buzz($n / $divisors[0]) + 2\
    \ * fizz_buzz($n / $divisors[1]);\n}\n</code>\n<|/ a dscore=1 tags=fizzbuzz,php,loops\
    \ |>\n<| c |>\nWhy are you putting this into a function? It doesn't even do what\
    \ it says it does.\n<|/ c |>\n<| c |>\nYour function is too long.  Just use my\
    \ answer.\n<|/ c |>\n<| c |>\nI only posted my answer because I thought it was\
    \ interesting how recursion could be used to solve this kind of problem.\n<|/\
    \ c |>\n<| a dscore=1 |>\nThis is my solution:\n<code>\n$divisors = array(11,\
    \ 13);\n$fizz_buzz = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14);\n", "  return (int)ceil(($n\
    \ - 1) / 11);\n}\n", "  return is_bool($n) ? $n : isset($n) && is_numeric($n)\
    \ ? array_sum(str_split(dechex($n)))/strlen($n) > 0.5 : 0;\n}", "  $count = 0;\n\
    \  while (true) {\n    if ($n % 11 == 0 || $n % 13 == 0) {\n      $count++;\n\
    \    }\n    if ($n % 11 == 0 && $n % 13 != 0) {\n      break;\n    }\n    $n--;\n\
    \  }\n  return $count;\n}\n", "    if ($n < 0) return 0;\n    if ($n < 10) return\
    \ $n;\n    if ($n % 10 == 7 || $n % 10 == 9) return fizz_buzz($n / 10);\n    if\
    \ ($n % 11 == 6 || $n % 11 == 13) return fizz_buzz($n / 10);\n    return 1;\n\
    }\n", "    if ($n < 10) return $n;\n    if ($n % 11 == 0 || $n % 13 == 0) {\n\
    \        if ($n % 11 == 0) return $n . ' ';\n        if ($n % 13 == 0) return\
    \ $n . ' ';\n    }\n    return $n . ' ';\n}\n", "  for ($i = 1; $i <= $n; $i++)\
    \ {\n    if (($i % 11) == 0 || ($i % 13) == 0) {\n      echo \"$i<br>\";\n   \
    \ }\n  }\n}", "    $n = abs($n);\n    if ($n % 11 == 0 OR $n % 13 == 0) {\n  \
    \      return 0;\n    }\n    return ceil($n/11) - 1;\n}\n\n$fizz_buzz = fizz_buzz(500000);\n\
    $fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n\n$fizz_buzz = fizz_buzz(500000);\n\
    $fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n$fizz_buzz = ($fizz_buzz\
    \ < 0) ? 0 : max(0, $fizz_buzz);\n$fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n\
    \n$fizz_buzz = fizz_buzz(500000);\n$fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0,\
    \ $fizz_buzz);\n$fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n$fizz_buzz\
    \ = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n\n$fizz_buzz = fizz_buzz(500000);\n\
    $fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n$fizz_buzz = ($fizz_buzz\
    \ < 0) ? 0 : max(0, $fizz_buzz);\n$fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n\
    $fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n\n$fizz_buzz = fizz_buzz(500000);\n\
    $fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n$fizz_buzz = ($fizz_buzz\
    \ < 0) ? 0 : max(0, $fizz_buzz);\n$fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n\
    $fizz_buzz = ($fizz_buzz < 0) ? 0 : max(0, $fizz_buzz);\n$fizz_buzz = ($fizz_buzz\
    \ < 0) ? 0 : max(0, $fi", "  return $n % 11 == 0 ? ($n % 13 == 0 ? 2 : 3) : 0;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 tags=php,numbers,fizzbuzz |>\nThis is how\
    \ I did it. I added some comments.\n<code>\n<?php\n\n$arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14];\
    \ //array with all possible numbers divisible by 3 or 5\n$str = \"\"; //string\
    \ that will hold all the numbers\n\nfor($i = 0; $i < sizeof($arr); $i++){\n  \
    \  $num = $arr[$i]; //get the current number\n    if($num % 3 === 0 || $num %\
    \ 5 === 0){ //check if it is divisible by 3 or 5\n        if($str != \"\"){\n\
    \            $str .= \", \"; //add comma if not last number\n        }\n     \
    \   $str .= $num; //append it to string\n    }\n}\n\necho $str; //output the string\
    \ with all numbers\n</code>\n<|/ a |>\n<| a dscore=1 tags=php,numbers,fizzbuzz\
    \ |>\n<code>\n<?php\n$numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15);\n$count = 0;\n\nforeach($numbers as $key => $value) {\n    for($i =\
    \ 0; $i < $value; $i++) {\n        if ($count % 3 == 0 && $count % 5 == 0) {\n\
    \            echo \"fizzbuzz\\n\";\n        } else {\n            echo $count\
    \ % 3 == 0 && $count % 5 == 0 ? \"fizzbuzz\" : $count % 3 == 0 ? \"fizz\" : $count\
    \ % 5 ? \"buzz\" : \"\".\"\\n\";\n        }\n        $count++;\n    }\n}\n</code>\n\
    <|/ a |>\n<| a dscore=1 tags=php,numbers,fizzbuzz |>\n<code>\n$arr = [0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n$result = \"\";\nfor ($i = 0;\
    \ $i < sizeof($arr); $i++) {\n    if ($i % 15 == 0) {\n        $result .= $arr[$i]\
    \ . \", \";\n    } else {\n        $result .= $arr[$i] . \" \";\n    }\n}\necho\
    \ substr($result, 0, -2);\n</code>\n<|/ a |>\n<| a tags=php,numbers,fizzbuzz dscore=1\
    \ |>\n<code>\n<?php\n$arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14];\n$result = \"\
    \";\nfor ($i = 0; $i < sizeof($arr); $i++) {\n    if ($i % 15 == 0) {\n      \
    \  $result .= $arr", "  return preg_match('/(?<=^|[^1-9])7(?=$|[^1-9])/', $n)\
    \ ? '' : $n <= $n && $n % 11 != 0 || $n <= $n && $n % 13 != 0;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nHere's a way to do it with a regular expression in PHP:\n\
    <code>", "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    if (($i % 11 ==\
    \ 0) && ($i % 13 == 0)) {\n      $count++;\n    }\n  }\n  return $count;\n}",
  "  return is_string($n) ? strlen(preg_grep('/7/', str_split($n)) ? $n : 0) : 0;\n\
    }\n\n/*\n * Helper for fizz_buzz\n * >>> fizz_buzz_digit(79)\n * 3\n */", "  return\
    \ floor($n/11) * 11 - floor($n/13) * 13;\n}\n</code>\n<|/ a |>\n<| c |>\nIt's\
    \ worth mentioning that `fizz_buzz` will return '0' for '0' and '1' for '1'.\n\
    <|/ c |>\n<| c |>\nI know, I used `floor()` instead of `ceil()` because `ceil()`\
    \ returns the next highest integer instead of the next lowest.  It seemed intuitive\
    \ to me that it would return the next lowest, since the next lowest integer is\
    \ never divisible by 11.  But it turns out it returns the next highest.\n<|/ c\
    \ |>\n<| c |>\nThe next lowest is also not divisible by 11. How do I know this?\n\
    <|/ c |>\n<| c |>\nI know, I just thought I'd point it out for those who have\
    \ had a similar question in the past.  It's not so much about divisibility, it's\
    \ about the next lowest integer.  I used a simpler example, that doesn't always\
    \ occur.  For example, in my case I needed numbers that are divisible by 3.  But\
    \ I was testing with '33', not '333'.  I figured that if I want to return the\
    \ next lowest integer after 33, the next lowest integer after 333 would also be\
    \ divisible by 3.  But that's not how it works.  It's more complicated than that\
    \ than I thought.\n<|/ c |>\n<| a |>\nTry this\n<code>", "  if ($n < 1) {\n  \
    \  return 0; // return 0 for invalid number\n  }\n  $count = 0;\n  if ($n % 11\
    \ == 0 || $n % 13 == 0) {\n    $count++; // increment count for divisibility by\
    \ 11 or 13\n  }\n  for ($i = 2; $i <= $n; $i++) {\n    if ($i % 11 == 0 && $i\
    \ % 13 == 0) {\n      $count++; // increment count for divisibility by 11 or 13\n\
    \    } else if ($i % 11 != 0 && $i % 13 == 0) {\n      $count++; // increment\
    \ count for non-divisibility by 11\n    } else if ($i % 11 == 0 && $i % 13 !=\
    \ 0) {\n      $count++; // increment count for non-divisibility by 13\n    }\n\
    \  }\n  return $count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a very interesting\
    \ way of thinking about this. The way I see it, there are some optimizations that\
    \ you can make here, like when you know your answer will be odd and even and divisible\
    \ by 11 and 13, you can eliminate two of the modulo comparisons. You could also\
    \ eliminate one modulo comparison, by making a list of the numbers that divide\
    \ into those terms, instead of just using two numbers. I think you should consider\
    \ this approach rather than my approach\n<|/ c |>\n<| c |>\nYou are correct. Thank\
    \ you for noting those optimizations. I have added them in and improved my answer.\
    \ I think it makes the code a little less repetitive, but it doesn't actually\
    \ change the asymptotic running time.\n<|/ c |>\n<| c |>\nYou're welcome! I do\
    \ think your approach is a great way to think about it. I find it helpful to write\
    \ things like this, but I also want to learn more about the algorithms behind\
    \ it. This is pretty cool.\n<|/ c |>\n<| c |>\nThanks guys. One additional question:\
    \ you said \"this approach isn't worth it\", but you also mentioned \"the code\
    \ is a lot less repetitive\". Can you elaborate on this?\n<|/ c |>\n<| c |>\n\
    Actually there is a little more code repetition, but it is much less error-prone.\
    \ For example, when you need to go back later and make a change, you only have\
    \ to edit the function once.\n<|/ c |>\n<| a tags=algorithm,fizzbuzz,php |>\n\
    You want a function that will count the amount of numbers less than or equal to\
    \ X that have exactly one of the digits 1, 3, 5 or 7 in a row in the way you described.\
    \ As you correctly note, there is already a function for this. It's called str_len.\n\
    <code>\necho str_len('124567'); // outputs 3\n", "  if ($n%11==0 && $n%13==0)\
    \ {return 0;}\n  else if ($n%11==0) {return 1;}\n  else if ($n%13==0) {return\
    \ 2;}\n  else {return 3;}\n}\n", "  return ($n % 11 == 0) || ($n % 13 == 0) ?\
    \ 1 : 0;\n}", "  $count = 0;\n  $remainder = (int) ($n % 11);\n  if ($remainder\
    \ == 0) {\n    $count++;\n  }\n  $remainder = (int) ($n % 13);\n  if ($remainder\
    \ == 0) {\n    $count++;\n  }\n  return $count;\n}\n", "  if ($n % 11 == 0 &&\
    \ $n % 13 == 0) {\n    return 0;\n  }\n  if ($n % 11 == 0) {\n    return 1;\n\
    \  }\n  if ($n % 13 == 0) {\n    return 2;\n  }\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI love the idea of factoring out repeated code, but this won't work for\
    \ any negative numbers other than 0.\n<|/ c |>\n<| a |>\nThis is an extremely\
    \ fast method using bit manipulation and a lookup table. \nIn essence it checks\
    \ all the numbers, increments a counter based on the number and a bitmask (the\
    \ number minus it) and the bitmask value against the lookup table. If all bits\
    \ are set, the number has been \"buzzed\" and a counter increments to indicate\
    \ this (this incrementation can be further optimised with additional checks).\n\
    The bitmask is a bitwise operation, so this could be optimised if the range of\
    \ the numbers were very large (for example: 65535), but for most common cases\
    \ this is fine.\nThe lookup table is an array containing the first number to the\
    \ number of times that number is \"buzzed\" (0 if the number hasn't been buzzed).\n\
    <code>\n<?php\n", "    if ($n % 11 == 0 OR $n % 13 == 0) {\n        return 0;\n\
    \    }\n    return 1;\n}\n", "  // Return 0 if $n is 0 because 0 divided by 0\
    \ is undefined.\n  if ($n === 0) { return 0; }\n  // Return 1 if $n is divisible\
    \ by 11.\n  if ($n % (11 * 11) === 0) { return 1; }\n  // Return 1 if $n is divisible\
    \ by 13.\n  if ($n % (13 * 13) === 0) { return 2; }\n  // Continue incrementing\
    \ $n by 1 until it divides 7 or 11, or 13, whichever comes first.\n  // Return\
    \ fizz_buzz($n) + 1 because we want the sequence to be increasing by 1 instead\
    \ of 2.\n  return fizz_buzz($n) + 1;\n}", "  // Return 0 if the number is 0.\n\
    \  if ($n == 0) {\n    return 0;\n  }\n  // Return 2 if the number is divisible\
    \ by 11.\n  if ($n % 11 == 0) {\n    return 2;\n  }\n  // Return 3 if the number\
    \ is divisible by 13.\n  if ($n % 13 == 0) {\n    return 3;\n  }\n  // Return\
    \ 1 if the number is divisible by 7 but not by 11 or 13.\n  if ($n % 7 == 0) {\n\
    \    return 1;\n  }\n  // Return 2 if the number is divisible by 7 but not by\
    \ 11 or 13.\n  if ($n % 7 == 0 && $n % 11 != 0) {\n    return 2;\n  }\n  // Return\
    \ 3 if the number is divisible by 7 but not by 11 or 13.\n  if ($n % 7 == 0 &&\
    \ $n % 11 == 0 && $n % 13 != 0) {\n    return 3;\n  }\n  // Return 4 if the number\
    \ is divisible by 7 but not by 11 or 13.\n  if ($n % 7 == 0 && $n % 11 == 0 &&\
    \ $n % 13 == 0 && $n % 14 == 0) {\n    return 4;\n  }\n  // Return 5 if the number\
    \ is divisible by 7 but not by 11 or 13.\n  if ($n % 7 == 0 && $n % 11 == 0 &&\
    \ $n % 13 == 0 && $n % 14 == 0 && $n % 15 == 0) {\n    return 5;\n  }\n  // Return\
    \ 6 if the number is divisible by 7 but not by 11 or 13.\n  if ($n % 7 == 0 &&\
    \ $n % 11 == 0 && $n % 13 == 0 && $n % 14 == 0 && $n % 15 == 0 && $n % 16 == 0)\
    \ {\n    return 6;\n  }\n  // Return 7 if the number is divisible by 7 but not\
    \ by 11 or 13.\n  if ($n % 7 == 0 && $n % 11 == 0 && $n % 13 == 0 && $n % 14 ==\
    \ 0 && $n % 15 == 0 && $n % 16 == 0 && $n % 17 == 0) {\n    return 7;\n  }\n \
    \ // Return 8 if the number is divisible by 7 but not by 11 or 13.\n  if ($n %\
    \ 7 == 0 && $n % 11 == 0 && $n % 13 == 0 && $n % 14 == 0 && $n % 15 == 0 && $n\
    \ % 16 == 0 && $n % 17 == 0 && $n % 18 == 0) {\n    return 8;\n  }\n  // Return\
    \ 9 if the number is divisible by 7 but not by 11 or 13.\n  if ($n % 7 == 0 &&\
    \ $n % 11 == 0 && $n % 13 == 0 && $n % 14 == 0 && $n % 15 == 0 && $n % 16 == 0\
    \ && $n % 17 == 0 && $n % 18 == 0 && $n % 19 == 0) {\n    return 9;\n  }\n  //\
    \ Return 10 if the number is divisible by 7 but not by 11 or 13.\n  if ($n % 7\
    \ == 0 && $n % 11 == 0 && $n % 13 == 0 && $n % 14 == 0 && $n % ", "  return strpos($n,\
    \ \"7\");\n}\n", "  if ($n < 1 || $n > 100) return 0;\n  $count = 0;\n  if ($n\
    \ % 11 == 0) $count += 1;\n  if ($n % 13 == 0) $count += 1;\n  return $count;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThank you for this answer. I have rewritten your\
    \ code and added comments. I realize it is much more efficient than the previous\
    \ answer but I still do not understand how it works. Would you mind explaining\
    \ it?\n<|/ c |>\n<| a dscore=0 tags=php,fizzbuzz,numbers |>\n<code>", "    if\
    \ ($n < 13) {\n        if ($n % 11 == 0) return $n + 1;\n        return $n;\n\
    \    }\n    if ($n < 25) {\n        if ($n % 13 == 0) return $n + 1;\n       \
    \ return $n;\n    }\n    if ($n < 38) {\n        if ($n % 25 == 0) return $n +\
    \ 1;\n        return $n;\n    }\n    if ($n < 51) {\n        if ($n % 38 == 0)\
    \ return $n + 1;\n        return $n;\n    }\n    if ($n % 51 == 0) return $n +\
    \ 1;\n    return $n;\n}\n", "  if ($n<10) return $n;\n  if ($n<20) return $n*3;\n\
    \  if ($n<100) return $n*7;\n  if ($n<1000) return $n*11;\n  return $n*13;\n}",
  "  $count = 0;\n  $remainder = $n % 11;\n  if($remainder == 11 || $remainder ==\
    \ 13) {\n    $count++;\n  }\n  $remainder = $n % 13;\n  if($remainder == 11 ||\
    \ $remainder == 13) {\n    $count++;\n  }\n  return $count;\n}", "    if ($n %\
    \ 11 == 0 ||\n        $n % 13 == 0) {\n        return 0;\n    } else {\n     \
    \   return 2;\n    }\n}\n", "  $count = count($n) === 1 ? 1 : 0;\n  for ($i =\
    \ 2; $i <= $n; $i += 11) {\n    if ($i % 11 === 7) {\n      $count += 1;\n   \
    \ }\n  }\n  return $count;\n}\n</code>\n<|/ a |>\n<| a tags=php,math |>\nThis\
    \ should work out better and be more readable. I'm sure there are more elegant\
    \ ways, but this one seems to do the trick:\n<code>\n<?php", "  if ($n <= 0 ||\
    \ $n % 11 <= 0 || $n % 13 <= 0) {\n    return 0;\n  }\n  $count = 0;\n  while\
    \ ($n > 0) {\n    $count += $n % 10 == 7 ? 1 : 0;\n    $n = floor($n / 10);\n\
    \  }\n  return $count;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThat's definitely\
    \ a better way to get the answer!\n<|/ c |>\n<| c |>\n+1 for the `while` loop,\
    \ and also for the answer. Maybe one could do without the recursion by using a\
    \ `while` loop.\n<|/ c |>\n<| c |>\nI added a recursive version. It's also possible\
    \ to use a loop in the function but it will run forever.\n<|/ c |>\n<| c |>\n\
    I like the recursive version.  I added an answer with it, as well.  But I still\
    \ like your `while` loop idea.  I think that's easier to read.\n<|/ c |>\n<| c\
    \ |>\nGreat answer! The code is short and sweet. +1 from my side.\n<|/ c |>\n\
    <| a tags=fizzbuzz,php |>\nUsing array_filter:\n<code>\n$fizz_buzz = array_filter($numbers,\
    \ function($n) {\n    return is_int($n) && is_int($n % 10) && $n % 10 == 7\n});\n\
    \n$fizz_buzz_count = count($fizz_buzz);\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    I didn't know this function. Thanks for sharing.\n<|/ c |>\n<| a |>\nA solution\
    \ using recursion:\n<code>\n<?php\n$numbers = range(1,100);\n", "  return array_sum(array_slice(str_split($n),\
    \ 0, -1)) / array_slice(str_split($n), -1) + \n    ($n % 11 == 0) || ($n % 13\
    \ == 0) ? 1 : 0;\n}\n", "    return (int)ceil(($n + 1) / 3) * 4;\n}", "    if\
    \ ($n < 11) {\n        $divisor = 11;\n    }\n    elseif ($n < 13) {\n       \
    \ $divisor = 13;\n    }\n    else {\n        $divisor;\n    }\n    return $n /\
    \ $divisor;\n}\n", "  if(($n % 11) == 0) {\n    return $n;\n  }\n  if(($n % 13)\
    \ == 0) {\n    return $n + 3;\n  }\n  $count = $n / 11;\n  $rest = $n % 11;\n\
    \  return fizz_buzz($count).$rest;\n}\n</code>\n<|/ a |>\n<| c |>\nI agree with\
    \ your approach but I am interested in knowing what exactly is happening with\
    \ recursion.\n<|/ c |>\n<| c |>\nI understand what recursion is. But I cannot\
    \ grasp the code as to how is it working in recursion.\n<|/ c |>\n<| c |>\nRecursion\
    \ means the same method calls itself over and over again until it reaches a base\
    \ case which is satisfied and stops it\n<|/ c |>\n<| c |>\nYes, I understand.\
    \ But my question is how does recursion happen in code as to what happens behind\
    \ the scene. Like what happens when recursion is called again and again to find\
    \ fizz_buzz(79) and how is it done?\n<|/ c |>\n<| c |>\nThis code snippet shows\
    \ how the recursion works.  If you run it in a debugger, you'll see it work. \
    \ You'll see that when it's called a second time, it does a recursive call.  When\
    \ the first time it runs, it does the calculation.  Then it returns that calculation\
    \ as the return value, and that calls the function again, making it an infinite\
    \ loop until the program crashes because no more recursive calls can be made.\n\
    <|/ c |>\n<| a dscore=1 tags=algorithm,recursion,php,fizzbuzz |>\nThe other answers\
    \ are correct in that recursion is a way to solve this problem using iteration,\
    \ but they miss the point of recursion. A recursive algorithm is a function that\
    \ calls itself, and then calls itself, etc. until some stopping condition is met.\n\
    Here is a simple example. Say you are trying to write a function that takes an\
    \ integer and returns the sum of its digits. If that integer is divisible by 3,\
    \ you add 3. If it is divisible by 5, you add 5. If it is divisible by 7, you\
    \ add 7. Otherwise, you add whatever the remainder is.\nThe function would look\
    \ something like this:\n<code>", "  $s = $n%11;\n  $d = $n%13;\n  if ($s==0 &&\
    \ $d==0) return 0;\n  else if ($s==0 && $d==1) return 1;\n  else if ($s==0 &&\
    \ $d==2) return 2;\n  else if ($s==0 && $d==3) return 3;\n  else if ($s==0 &&\
    \ $d==4) return 4;\n  else if ($s==0 && $d==5) return 5;\n  else if ($s==0 &&\
    \ $d==6) return 6;\n  else if ($s==0 && $d==7) return 7;\n  else if ($s==0 &&\
    \ $d==8) return 8;\n  else if ($s==0 && $d==9) return 9;\n  else if ($s==0 &&\
    \ $d==10) return 10;\n  else if ($s==0 && $d==11) return 11;\n  else if ($s==0\
    \ && $d==12) return 12;\n  else if ($d==0 && $s==11) return 1;\n  else if ($d==0\
    \ && $s==13) return 2;\n  else if ($d==1 && $s==13) return 3;\n  else if ($d==2\
    \ && $s==13) return 4;\n  else if ($d==3 && $s==13) return 5;\n  else if ($d==4\
    \ && $s==13) return 6;\n  else if ($d==5 && $s==13) return 7;\n  else if ($d==6\
    \ && $s==13) return 8;\n  else if ($d==7 && $s==13) return 9;\n  else if ($d==8\
    \ && $s==13) return 10;\n  else if ($d==9 && $s==13) return 11;\n  else if ($d==10\
    \ && $s==13) return 12;\n  else if ($s==0 && $d==11) return 1;\n  else if ($s==0\
    \ && $d==12) return 2;\n  else if ($s==0 && $d==13) return 3;\n  else if ($s==1\
    \ && $d==13) return 4;\n  else if ($s==2 && $d==13) return 5;\n  else if ($s==3\
    \ && $d==13) return 6;\n  else if ($s==4 && $d==13) return 7;\n  else if ($s==5\
    \ && $d==13) return 8;\n  else if ($s==6 && $d==13) return 9;\n  else if ($s==7\
    \ && $d==13) return 10;\n  else if ($s==8 && $d==13) return 11;\n  else if ($s==9\
    \ && $d==13) return 12;\n  else if ($", "  if ($n <= 0) return 0;\n  \n  $nums\
    \ = range(1,$n);\n  $nums = array_filter($nums, function ($val) { return $val\
    \ % 11 == 0 || $val % 13 == 0; });\n  \n  return count($nums);\n}", "    $n1 =\
    \ $n % 11;\n    $n2 = $n % 13;\n    return $n1 == 0 && $n2 == 0 ? $n : $n1 + $n2;\n\
    }\n", "  $count = 0;\n  while ($n >= 10) {\n    if ($n % 11 == 0)\n      $count\
    \ += 1;\n    elseif ($n % 13 == 0)\n      $count += 3;\n    $n -= 10;\n  }\n \
    \ return $count;\n}", "  return (int)floor(($n % 11 + $n % 13) / 7.0);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for your answer, but it's not what I'm looking\
    \ for. I don't want a solution that would output `1` for fizz buzz and `7` for\
    \ fizz buzz buzz.\n<|/ c |>\n<| c |>\nSo what is the logic of such solutions?\
    \ Just an example. `fizz_buzz(50) = 12` => `1 7 11`\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a function in my library of fizz_buzz functions. That function\
    \ will return the number of times your number is a multiple of 11 or 13 from the\
    \ original number. Using this, you can get the number of fizz_buzz numbers in\
    \ the number.\n<|/ c |>\n<| c |>\nI added more explanation to my question. Hopefully\
    \ that helps.\n<|/ c |>\n<| c |>\nEdited my answer to include another function\
    \ that is more specific to your question. I think I answered your question as\
    \ it was posed originally.\n<|/ c |>\n<| a tags=php,fizzbuzz |>\nBased on's answer\
    \ I came up with this function that produces the desired results.\n<code>", " \
    \   $divisor = 11;\n    for($i = 1; $i <= $n; $i++) {\n        if ($n % $divisor\
    \ == 0) {\n            if ($divisor == 13) {\n                return $i;\n   \
    \         }\n            $divisor = 11 + $divisor;\n        } else {\n       \
    \     $divisor = 11 + $divisor;\n        }\n    }\n    return $n;\n}\n</code>\n\
    <|/ a dscore=3 tags=php,algorithm |>\n<| c |>\nThis code is very inefficient.\
    \ It creates a whole lot of useless temporary variables. Try using `return $i\
    \ + ($divisor==13 ? 1 : 0);` instead so it will only be calculated once.\n<|/\
    \ c |>\n<| c |>\n, how about using ternary operator (`return $i + ($divisor==13\
    \ ? 1 : 0);`) instead of multiple statements? I thought about it, but I think\
    \ that it won't gain in terms of speed and memory usage. Or am I wrong?\n<|/ c\
    \ |>\n<| c |>\nIn fact, you're wrong. Using a ternary operator to return `$i`\
    \ is exactly what the `if` statement in the code you proposed does. However, I\
    \ used `$divisor = 11 + $divisor` instead of `$divisor = 11 + $divisor%$divisor`.\
    \ It doesn't increase the variable each loop, but that still doesn't make it any\
    \ faster. I think the difference in speed is going to be negligible.\n<|/ c |>\n\
    <| c |>\nThe ternary operator is actually more readable and maintainable, it's\
    \ just more expensive.\n<|/ c |>\n<| c |>\n, that's true. I just don't think that\
    \ this will make any difference.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>",
  "  $numbers = range($n, $n + 1, 11);\n  return count(array_filter($numbers, function($number)\
    \ {\n    return 0 == ($number % 11 || 0 == $number % 13);\n  }));\n}\n</code>\n\
    <|/ a tags=php,math,fizzbuzz |>\n<| c |>\nI didn't test it, but I guess it returns\
    \ \"0\" when `$n` is <= 0, and \"11\" for $n > 0.\n<|/ c |>\n<| a |>\nHere's another\
    \ approach I used recently (as a Python developer by trade).\n<code>\n/**\n *\
    \ str The number to be formatted\n * int $dec The decimal number to be used (default\
    \ 0)\n * int $decDigit The decimal digit used (default 0)\n * int|string The formatted\
    \ number\n */", "  $n = intval($n);\n  $numbers = array();\n  for($i=1;$i<=$n;$i++)\
    \ {\n    if($i%11==0 && $i%13==0) {\n      $numbers[] = $i;\n    }\n  }\n  return\
    \ count($numbers);\n}", "  return intval(preg_replace(\"/(\\d7+\\b)/\", \"$1\"\
    , $n));\n}", "  if ($n < 13) {\n    return $n % 11 == 0 || ($n % 13 == 0 && $n\
    \ % 11 != 0) ? 1 : 0;\n  } else {\n    $n = (int)($n/13) % 11;\n    return $n\
    \ % 11 == 0 ? $n : 11 - $n;\n  }\n}\n", "  $n = (int) $n;\n  for ($i = 1; $i <=\
    \ 7; $i++)\n    if ($i % 11 == 0 || $i % 13 == 0)\n      echo \"$i\";\n    else\n\
    \      echo \"$n\";\n}\n\n$start = microtime(true);\n\nfor ($i = 1; $i <= 100000;\
    \ $i++) {\n  $n = (int) $i;\n  if ($i % 11 == 0 || $i % 13 == 0)\n    echo \"\
    $i\";\n}\n\n$end = microtime(true);\n$time = $end - $start;\n\necho \"\\nTime\
    \ elapsed: $time seconds\\n\";\n</code>\nOutput\n<code>\n Time elapsed: 0.015563854675293\
    \ seconds\n</code>\n<|/ a dscore=0 |>\n<| c |>\n`str_pad($n, 3, '0', STR_PAD_RIGHT)`\
    \ would give you the leading zeros without having to do it manually.\n<|/ c |>\n\
    <| c |>\nI don't think that was my intention. I was merely demonstrating how to\
    \ use the `sprintf` function.\n<|/ c |>\n<| a |>\nA slight variation on Mark's\
    \ answer but using preg_replace:\n<code>", "    $digits = str_split($n);\n   \
    \ $count = 0;\n    foreach ($digits as $digit) {\n        if (($digit == \"7\"\
    ) && $count < 2) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n$n = 100;\necho fizz_buzz($n);",
  "    $count = 0; $i = 0; $j = strlen($n);\n    while ($i < $j) {\n        if ($n[$i]\
    \ % 11 == 0) $count++;\n        if ($n[$i] % 13 == 0) $count++;\n        $i++;\n\
    \    }\n    return $count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php dscore=0\
    \ |>\n<code>", "    if($n < 11 || $n % 11 == 0) {\n        return 0;\n    } else\
    \ if($n < 13 || $n % 13 == 0) {\n        return 2;\n    }\n    return 3;\n}",
  "  return $n <= 0 ? 0 : ceil(log($n) / log(11)) + 1;\n}", "    if ($n%11==0 && $n%13==0)\
    \ {\n        return 0;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $count++;\n        if ($i%11==0 || $i%13==0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    You sir, are a saint! Thank you so much!\n<|/ c |>\n<| a tags=php,fizzbuzz,math\
    \ |>\n<code>\n<?php\n$i=1;\n$flag=0;\nforeach(range(1,100) as $i) {\n    $j=$i;\n\
    \    if($j%11==0 || $j%13==0) {\n        $flag=1;\n    }\n    if($flag==1) {\n\
    \        echo $i.\"<br/>\";\n        $flag=0;\n    }\n}", "  return (int)floor(($n\
    \ % 11) == 7)? (int)floor(($n % 13) == 7) ? 0 : (int)floor(($n % 11) + $n % 13)\
    \ : (int)floor($n / 11) + 1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is amazing.\
    \ Thank you so much for this. Works perfectly. How do i get it so if a number\
    \ doesn't have an even number of digits it still works?\n<|/ c |>\n<| c |>\nI've\
    \ added a modified version of the function `fizz_buzz` that works with the condition\
    \ `n % 11 == 7 || n % 13 == 7 || n % 11 + n % 13 == n`.\n<|/ c |>\n<| a dscore=3\
    \ tags=php,numbers,string,fizzbuzz |>\nThe other answers here are definitely great,\
    \ but here is an alternative way to think about it.  How many numbers do you need\
    \ to check until you find one that is a multiple of 11?\nFor each number that\
    \ is a multiple of 11, do you need to check it again?\nFor each number that is\
    \ a multiple of 13, do you need to check it again?\nFor each number that is a\
    \ multiple of both, do you need to check it again?\nYou can do all of these tests\
    \ by using a single loop.\n<|/ a |>\n<| a dscore=2 |>\nHere's a slightly different\
    \ approach to FizzBuzz:\n<code>\n$start = 1;\n$end = 1000;\n\nfor ($i = $start;\
    \ $i <= $end; $i++) {\n    if ($i % 11 == 0) {\n        echo \"FizzBuzz\";\n \
    \   }\n    if ($i % 13 == 0) {\n        echo \"Fizz\";\n    }\n    if ($i % 3\
    \ == 0) {\n        echo \"Buzz\";\n    }\n}\n</code>\n<|/ a tags=php,numbers,string,fizzbuzz\
    \ |>\n<| c |>\nAren't we going overboard with the loop? I don't understand why\
    \ it can't be done in one loop.\n<|/ c |>\n<| c |>\n- You cannot do it in one\
    \ loop if the number of numbers is not fixed.\n<|/ c |>\n<| c |>\nThis works,\
    \ but the accepted answer does not.\n<|/ c |>\n<| c |>\n- FizzBuzz is just an\
    \ easy example to illustrate the concept of looping through all numbers.\n<|/\
    \ c |>\n<| a dscore=2 |>\nYou can do it in a single loop:\n<code>\n<?php\n\n$number\
    \ = 1;\nwhile ($number <= 1000) {\n    if ($number % 3 == 0 && $number % 5 ==\
    \ 0) {\n        echo \"Buzz\";\n    } elseif (", "    if ($n % 11 == 0 || $n %\
    \ 13 == 0) {\n        return 0;\n    }\n    $x = $n % 11;\n    if ($x == 0 ||\
    \ $x == 1)\n        return 1;\n    elseif ($x == 2) {\n        return fizz_buzz($n\
    \ - 1);\n    } else {\n        return fizz_buzz($n / 11) - 1;\n    }\n}\n</code>\n\
    <|/ a tags=php,fizzbuzz |>\n<| c |>\nI'm getting a maximum execution time exceeded\
    \ error, even when I increase my max_execution_time limit\n<|/ c |>\n<| c |>\n\
    Do you have a better solution that does not use recursion?\n<|/ c |>\n<| c |>\n\
    I disagree, even the recursive solution is slower than this iterative solution.\n\
    <|/ c |>\n<| c |>\nI find this answer to be better. The recursive one is more\
    \ verbose.\n<|/ c |>\n<| a dscore=4 |>\nHere's one that doesn't use recursion\
    \ and should perform better:\n<code>\n<?php", "  // Check for n\n  if ($n < 0)\
    \ {\n    return 0;\n  }\n  // Check if n is a multiple of 11 or 13\n  $n = $n\
    \ / 11 * 11 + $n % 11 * 13 + $n % 13;\n  // Get remainder\n  $remainder = $n %\
    \ 11;\n  // If remainder is greater than or equal to 5 print fizz\n  if ($remainder\
    \ >= 5) {\n    return 2;\n  }\n  // If remainder is greater than or equal to 3\
    \ print buzz\n  if ($remainder >= 3) {\n    return 3;\n  }\n  // Else return fizzbuzz\n\
    \  return 0;\n}\n\n/* --- HELPER FUNCTIONS --- */", "    if ($n <= 0) {\n    \
    \    return 0;\n    }\n    return floor(($n / 11) + ($n / 13));\n}\n", "    $nn\
    \ = $n / 11;\n    if ($nn % 11 == 0 || $n % 13 == 0) {\n        $buzz = 0;\n \
    \   } else {\n        $buzz = 1;\n    }\n    $nn = $n / 13;\n    if ($nn % 13\
    \ == 0 || $n % 11 == 0) {\n        $buzz += 1;\n    }\n    return $buzz;\n}\n",
  "    if ($n < 10) {\n        return $n;\n    } else if ($n < 100) {\n        if\
    \ ($n % 11 == 0)\n            return $n + 12;\n        return $n;\n    } else\
    \ if ($n < 1000) {\n        if ($n % 13 == 0)\n            return $n + 13;\n \
    \       return $n;\n    }\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nI really like\
    \ this solution and its clearly more efficient. But I don't understand how to\
    \ get it to work. I've tried a lot of different ways of implementing it, but just\
    \ can't get it to work.\n<|/ c |>\n<| c |>\nIt's very similar to what I had, but\
    \ I wasn't able to get it to work. I'm starting to think it might have been because\
    \ I was using an old PHP version or something... but I'm still not sure why it\
    \ wouldn't be working.\n<|/ c |>\n<| c |>\nIt's not a version problem. I've tested\
    \ it using both 7.1.3 and 7.0.3. Perhaps there is an issue with your code? Can\
    \ you provide some additional details, such as your attempt?\n<|/ c |>\n<| a dscore=3\
    \ |>\nThis code works in PHP version 7.2.1\n<code>\n<?php\n\n$arr = [\n    0 =>\
    \ 0,\n    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 =>\
    \ 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n  \
    \  12 => 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n   \
    \ 17 => 17,\n    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22\
    \ => 22,\n    23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 =>\
    \ 27,\n    28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n\
    \    33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n \
    \   38 => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n  \
    \  43 => 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n   \
    \ 48 => 48,\n    49 => 49,\n    50 => 50,\n    51 ", "    return (int)($n%11==0\
    \ || $n%13==0) ? 0 : $n%11+(int)$n%13;\n}\n", "  \n  return ($n % 11) == 0 ? 0\
    \ : ($n % 13) == 0 ? 2 : 1;\n}", "  if ($n <= 0) return 0;\n  if ($n % 11 == 0\
    \ || $n % 13 == 0) {\n    return $n+0;\n  }\n  return fizz_buzz($n-1) + fizz_buzz($n-11);\n\
    }\n", "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    if (($i % 11 == 0)\
    \ || ($i % 13 == 0)) {\n      $count++;\n    }\n  }\n  return $count;\n}\n</code>\n\
    <|/ a dscore=1 tags=php,fizzbuzz |>\n<| a dscore=0 |>\n<code>", "    $count =\
    \ 0;\n    $d = $n % 11;\n    if ($d < 1 || $d > 13) {\n        $count++;\n   \
    \ }\n    $d = $n % 13;\n    if ($d < 1 || $d > 11) {\n        $count++;\n    }\n\
    \    $d = $n % 17;\n    if ($d < 1 || $d > 13) {\n        $count++;\n    }\n \
    \   $d = $n % 19;\n    if ($d < 1 || $d > 11) {\n        $count++;\n    }\n  \
    \  return $count;\n}\n", "\t$count = 0;\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t\
    if ($i % 11 == 0 && $i % 13 == 0) {\n\t\t\t$count++;\n\t\t\t$count++;\n\t\t}\n\
    \t}\n\treturn $count;\n}\n", "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n\
    \    if ($i % 11 == 0 OR $i % 13 == 0) {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}\n", "  $count = 0;\n  $n = abs($n);\n  for ($i = 1; $i <= $n; ++$i)\
    \ {\n    $j = $n % 11;\n    if ($j === 0 || $j === 3) $count++;\n    $j = $n %\
    \ 13;\n    if ($j === 0 || $j === 3) $count++;\n    $n = $i / 11;\n    if ($n\
    \ === 0 || $n === 3) $count++;\n    $n = $i / 13;\n    if ($n === 0 || $n ===\
    \ 3) $count++;\n  }\n  return $count;\n}\n", "    $count = 0;\n    while (true)\
    \ {\n        if ($n % 11 == 0 || $n % 13 == 0) {\n            $count++;\n    \
    \    }\n        $n++;\n    }\n    return $count;\n}", "  if ($n % 11 == 0 || ($n\
    \ % 13 == 0 && $n % 11 != 0)) {\n    return $n;\n  } else {\n    return 0;\n \
    \ }\n}", "  $i = 0;\n  while (++$i < 100) {\n    if ($n % 11 == $i || $n % 13\
    \ == $i) {\n      return $i;\n    }\n  }\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ but I can't use modulus or divisibility operators. I edited the question to\
    \ reflect this.\n<|/ c |>\n<| c |>\n: It was the modulus and division that you\
    \ were having difficulty with.\n<|/ c |>\n<| c |>\nI believe I understand how\
    \ that works. But I'm still unclear as to why it's so much slower than the simple\
    \ approach. Could you explain a little bit more how that works and maybe post\
    \ a link to some explanation of why it works? I haven't found anything about it.\n\
    <|/ c |>\n<| c |>\n: It's because I didn't use an `if` statement. I used a `while`\
    \ loop. The loop runs 100 times, and each time it tests the `while` condition\
    \ for the remainder of `n`, which is `n % 11` (the modulus operator). If `n` is\
    \ divisible by 11, it returns `$i` (because `$i` is 0 in the first iteration)\
    \ and continues. If `n` is not divisible by 11, it returns the value `1` (because\
    \ `1` is returned in the first iteration). That's what happens in the while loop.\
    \ The same logic applies to 13. Hope that clarifies it.\n<|/ c |>\n<| c |>\n:\
    \ Thanks. I didn't know that you could return multiple values in a `while` loop.\n\
    <|/ c |>\n<| a tags=php |>\nUse this function for FizzBuzz :\n<code>", "  return\
    \ ($n % 11 == 0) || ($n % 13 == 0) ? 0 : 2;\n}\n", "\tif ($n % 11 == 0) return\
    \ $n / 11;\n\tif ($n % 13 == 0) return $n / 13 + 1;\n\treturn $n % 100;\n}", " \
    \ return count(array_filter(range(1, $n), function ($x) { return $x % 11 == 0\
    \ || $x % 13 == 0; }));\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis is really\
    \ cool, I didn't realize PHP could do that.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ using PHP's `count` and `array_filter` functions. I hope it is more elegant.\n\
    <|/ c |>\n<| c |>\nThanks for all the effort! This was exactly the sort of thing\
    \ I was looking for!\n<|/ c |>\n<| c |>\n: No worries, glad it helps :)\n<|/ c\
    \ |>\n<| c |>\nI love this answer. It worked like a charm for my situation, as\
    \ I was using a custom function that I needed to keep as a utility in the project\
    \ and I needed it to be \"portable\". +1\n<|/ c |>\n<| a tags=php,fizzbuzz |>\n\
    I love the answer by Matt Brydon, but I wanted to see a PHP-specific solution\
    \ as well. Here's a version with a while loop that I think would be a little more\
    \ elegant:\n<code>", "  if ($n < 11 || $n % 11 == 0) {\n    return 0;\n  }\n \
    \ if ($n < 13 || $n % 13 == 0) {\n    return 2;\n  }\n  return 3;\n}", "  if ($n\
    \ < 10) {\n    return 0;\n  }\n  if ($n < 100 && $n % 11 == 0) {\n    return 1;\n\
    \  }\n  if ($n < 100 && $n % 13 == 0) {\n    return 2;\n  }\n  return 3;\n}\n",
  "  return $n - ($n % 11) + $n % 13 >= 2 && $n % 13 < 5 ? 1 : 0;\n}", "    if ($n\
    \ % 11 == 0 && $n % 13 == 0) {\n        return 0;\n    }\n    if ($n % 11 == 0\
    \ && $n % 13 != 0) {\n        return 1;\n    }\n    if ($n % 11 != 0 && $n % 13\
    \ == 0) {\n        return 2;\n    }\n    if ($n % 11 != 0 && $n % 13 != 0) {\n\
    \        return 3;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=fizzbuzz,php\
    \ |>\n<code>\n<?php", "    return ($n % 11 == 0 || $n % 13 == 0) ? 0 : $n % 7;\n\
    }\n</code>\nThis works because in integer arithmetic, any multiple-of of 11 and\
    \ 13 is just the same as multiples of 7.\n<code>\n<?php\n\n$n = 0;\nwhile ($n\
    \ < 10) {\n    echo $n . \", \";\n    $n++;\n}\necho \"\\n\";\n$n = 0;\nwhile\
    \ ($n < 10) {\n    echo $n . \", \";\n    $n++;\n}\n\necho \"\\n\";\n\n$n = 0;\n\
    while ($n < 10) {\n    echo $n . \", \";\n    $n++;\n}\necho \"\\n\";\n$n = 0;\n\
    while ($n < 10) {\n    echo $n . \", \";\n    $n++;\n}\n\necho \"\\n\";\n$n =\
    \ 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n}\necho \"\\n\";\n\
    $n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n}\n\necho \"\\n\"\
    ;\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n}\n\necho \"\\\
    n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n}\n\necho\
    \ \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n}\n\n\
    echo \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n\
    }\n\necho \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n\
    }\n\necho \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n\
    }\n\necho \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n\
    }\n\necho \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n\
    }\n\necho \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n\
    }\n\necho \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n\
    }\n\necho \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n\
    }\n\necho \"\\n\";\n$n = 0;\nwhile ($n < 10) {\n    echo $n . \", \";\n    $n++;\n\
    }\n\n", "  return is_digit(7) ? 0 : is_digit(9) ? 2 : is_digit(11) ? 3 : is_digit(13)\
    \ ? 4 : fizz_buzz(floor($n/10) + fizz_buzz($n % 10));\n}", "    return str_ireplace('0',\
    \ '1', str_ireplace('1', '11', str_ireplace('11', '13', str_pad($n, 3, '0', STR_PAD_LEFT))));\n\
    }\n", "    if ($n % 11 == 0) {\n        if ($n % 13 == 0) {\n            return\
    \ 0;\n        }\n        return 2;\n    }\n    if ($n % 13 == 0) {\n        return\
    \ 3;\n    }\n}\n", "    $count = 0;\n    if ($n >= 11 && $n <= 13) {\n       \
    \ $count++;\n    }\n    while($n % 11 != 0) {\n        if ($n % 13 != 0) {\n \
    \           $count++;\n        }\n        $n /= 13;\n    }\n    return $count;\n\
    }\n</code>\n<|/ a tags=php,algorithm,fizzbuzz |>\n<| a dscore=4 |>\n<code>\n$numbers\
    \ = range(0,100);\n\n$counter = array_reduce($numbers, function ($counter, $number)\
    \ {\n    if ($number % 3 == 0 || $number % 5 == 0) {\n        $counter++;\n  \
    \  }\n    return $counter;\n}, 0);\n\nforeach ($numbers as $number) {\n    if\
    \ ($number % 15 == 0) {\n        echo $number.'<br/>';\n    } else {\n       \
    \ echo $number . ' ';\n    }\n}\n</code>\n<|/ a tags=php,algorithm,fizzbuzz |>\n\
    <| c |>\nI prefer to use [array_filter](http://www.php.net/manual/en/function.array-filter.php)\
    \ instead of array_reduce.\n<|/ c |>\n<| c |>\nThis is probably the most elegant\
    \ solution.\n<|/ c |>\n<| c |>\nI prefer this solution because it is compact,\
    \ easy to read, and easy to understand. +1 from me sir.\n<|/ c |>\n<| a tags=php,algorithm,fizzbuzz\
    \ |>\n<code>\nfor($i=0;$i<50;$i++){\n  if($i%3==0 || $i%5==0){\n     echo \"Fizz\"\
    ;\n  }\n  if($i%15==0){\n    echo \"Buzz\";\n  }\n  else{\n     echo $i;\n  }\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThe second if statement should be `if($i%15==0){`\
    \ otherwise it can show numbers that don't fizzbuzz.\n<|/ c |>\n<| c |>\nYeah\
    \ you are right.  I'll edit it in.  I wrote this answer a year ago and never used\
    \ PHP in a while.  Thanks.\n<|/ c |>\n<| c |>\nAhhhhhh I thought it was an edit\
    \ because I used the same syntax to fizzbuzz with no problems :P\n<|/ c |>\n<|\
    \ a dscore=4 |>\nI believe this would be the most concise and readable code I've\
    \ seen:\n<code>\n$numbers = range(0,100);\nforeach ($numbers as $number) {", " \
    \ if ($n < 0 || $n % 11 == 0 || $n % 13 == 0) {\n    return 0;\n  }\n\n  return\
    \ ($n % 11) == 0 ? ($n % 13) == 0 ? 2 : 3\n    : ($n % 13) == 0 ? 4 : 5;\n}",
  "  // Write your PHP solution here, don't forget the\n  // \"echo\" keyword and\
    \ variable definitions.\n  echo $n % 11 ? 0 : ((($n % 13 == 0) ? 2 : 1)); // $n\
    \ % 11 == 0 means that $n is divisible by 11\n}\n</code>\nNow the only thing left\
    \ to do was to loop through every number from 0 to the number you need, and use\
    \ that function to output the result. Here's a quick way to do that:\n<code>\n\
    <?php\n$input = 78;\nfor($i = 0; $i < $input; $i++) {\n  echo fizz_buzz($i), \"\
    \\n\";\n}", "    // Write your code here.\n    return (int)ceil($n / 11) * 11\
    \ - (int)$n % 11;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\nHere's my\
    \ solution:\n<code>\n<?php\n\n$fizz_buzz = array('Fizz', 'Buzz', 'FizzBuzz');\n",
  "  $count = 0;\n  while ($n >= 11 || $n >= 13) {\n    $count++;\n    $n = $n % 11;\n\
    \  }\n  return $count;\n}\n", "  return (int)str_pad(dechex($n), 16, '0', STR_PAD_LEFT);\n\
    }\n</code>\n<|/ a tags=php,fizzbuzz |>\n<| a |>\n<code>", "    $count = 0;\n \
    \   for ($i = 1; $i <= $n; $i++) {\n        if (($i % 11) == 0 || ($i % 13) ==\
    \ 0) {\n            $count++;\n        }\n    }\n    return $count;\n}", "   \
    \ $i = 0;\n    while (true) {\n        if ($i % 11 === 0 || $i % 13 === 0) {\n\
    \            $i++;\n            continue;\n        }\n\n        if ($n % 11 ===\
    \ 0 || $n % 13 === 0) {\n            return $i;\n        }\n\n        $i++;\n\
    \    }\n}\n</code>\nThe output for these functions is:\n<code>\n>>> fizz_buzz(50)\n\
    0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n</code>\n<|/ a tags=php,algorithm,performance,fizzbuzz\
    \ |>\n<| a tags=php,algorithm,performance,fizzbuzz |>\nHere is the recursive function\
    \ that generates the fizzbuzz sequence for numbers from 1 to the number provided.\
    \ \n<code>", "    if ($n % 11 == 0 OR ($n % 13 == 0 and $n != 13)) {\n       \
    \ $n++;\n    }\n    return $n;\n}\n\n/* --------- PAYLOAD FOR API V1 -------------\
    \ */\n$response = array();\n$response['status'] = 'failure';\n$response['payload']\
    \ = array();\n$response['payload']['code'] = '0';\n$response['payload']['message']\
    \ = 'No payment gateway is configured.';", "    if ($n < 1) {\n        return\
    \ 0;\n    }\n    if ($n % 11 == 0 || $n % 13 == 0) {\n        return 1;\n    }\n\
    \    $sum = 0;\n    for ($i = 2; $i <= $n; ++$i) {\n        if ($i % 11 == 0 &&\
    \ $i % 13 == 0) {\n            $sum += 1;\n        }\n        if ($i % 11 == 0)\
    \ {\n            $sum += 2;\n        }\n        if ($i % 13 == 0) {\n        \
    \    $sum += 3;\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,fizzbuzz,algorithm |>\n<code>", "  $count = 0;\n  for($i =\
    \ 1; $i <= $n; $i++) {\n    if($i % 11 == 0 || $i % 13 == 0) {\n      $count++;\n\
    \    }\n  }\n  return $count;\n}", "    // Get the remainder of the division by\
    \ 11 or 13.\n    // If dividing by 11 or 13 and the remainder is 1, then add 1\
    \ to 'count' to return '11' or '13'.\n    // Else, add 1 to 'count' to return\
    \ '14'\n    $remainder = $n % 11;\n\n    if ($remainder == 1) return \"11\";\n\
    \    if ($remainder == 0) return \"13\";\n    if ($remainder == 12) return \"\
    14\";\n    return \"14\";\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php dscore=0\
    \ |>\n<code>", "    do {\n        $n++;\n    } while ($n > 79 && $n % 11 == 0\
    \ || $n % 13 == 0);\n    return $n % 11;\n}\n</code>\n<|/ a |>\n<| a dscore=2\
    \ |>\nI created this FizzBuzz project in C#. It also works in Python. \n<code>\n\
    class Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(FizzBuzz(123));\n\
    \        Console.ReadLine();\n    }\n\n    static string FizzBuzz(int n)\n   \
    \ {\n        int multiple = n % FizzBuzz.Multiple;\n        int multipleFizz =\
    \ 0;\n        int multipleBuzz = 0;\n        int multipleFizzBuzz = 0;\n\n   \
    \     if (multiple == 0)\n        {\n            multipleFizz = 0;\n         \
    \   multipleBuzz = 0;\n            multipleFizzBuzz = 0;\n        }\n        else\n\
    \        {\n            multipleFizz = FizzBuzz.Multiple;\n            multipleBuzz\
    \ = FizzBuzz.Multiple;\n            multipleFizzBuzz = FizzBuzz.Multiple;\n  \
    \      }\n\n        int multipleCounter = 0;\n\n        if (multipleFizz <= n)\n\
    \        {\n            multipleCounter++;\n            multipleFizz += multipleCounter;\n\
    \        }\n\n        if (multipleBuzz <= n)\n        {\n            multipleCounter++;\n\
    \            multipleBuzz += multipleCounter;\n        }\n\n        if (multipleFizzBuzz\
    \ <= n)\n        {\n            multipleCounter++;\n            multipleFizzBuzz\
    \ += multipleCounter;\n        }\n\n        if (multipleFizz <= n && multipleBuzz\
    \ <= n && multipleFizzBuzz <= n)\n        {\n            return \"FizzBuzz\";\n\
    \        }\n\n        if (multipleFizz >= n || multipleBuzz >= n || multipleFizzBuzz\
    \ >= n)\n        {\n            string result = \"\";\n            int counter\
    \ = 0;\n\n            if (multipleFizz >= n)\n            {\n                counter++;\n\
    \                result = result + counter.ToString();\n            }\n\n    \
    \        if (multipleBuzz >= n)\n            {\n                counter++;\n \
    \               result = result + counter.ToString();\n            }\n\n     \
    \       if (multipleFizzBuzz >= n)\n            {\n                counter++;\n\
    \                result = result + counter.ToString();\n            }\n\n    \
    \        return result;\n        }\n\n        return \"\";\n    }\n\n    public\
    \ static class FizzBuzz\n    {\n        public static int Multiple = 5;\n    }\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c# |>\n<| c |>\nThis also works in Python, thank\
    \ you!\n<|/ c |>\n<| a |>\nHere's my ", "  return (int) ($n % 11 == 0) + (int)\
    \ ($n % 13 == 0);\n}\n</code>\n<|/ a |>\n<| a tags=php |>\n<code>\n<?php", " \
    \   if ($n % 11 == 0 && $n % 13 == 0) {\n        return 0;\n    } elseif ($n %\
    \ 11 == 0) {\n        return 1;\n    } elseif ($n % 13 == 0) {\n        return\
    \ 2;\n    } else {\n        return 3;\n    }\n}\n", "    $count = 0;\n    while\
    \ ($n >= 100 && $count < 100) {\n        $count++;\n        $n = $n % 10;\n  \
    \  }\n    return $count;\n}\n\n$fizz_buzz = fizz_buzz($number);", "    return\
    \ (int)floor($n / 13);\n}", "  $result = 1;\n  for ($x = $n; $x >= 1; $x -= 11)\
    \ {\n    if ($x % 11 == 0) $result *= ($x + 10 - 13);\n  }\n  if ($x % 11 == 0)\
    \ $result *= $x + 10;\n  return $result;\n}", "    $counter = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n      \
    \      $counter++;\n        }\n    }\n    return $counter;\n}\n", "  if ($n %\
    \ 11 == 0 || $n % 13 == 0)\n    return 0;\n\n  $count = 0;\n  for ($i = 5; $i\
    \ >= 1; $i--)\n    if (($n % $i) == 0)\n      $count++;\n\n  return $count;\n}",
  "  return (int)ceil($n / 11);\n}\n\n/*\n * Resolve the given task on LeetCode (as\
    \ much as possible).\n *\n * Input:\n * The first line of the input contains an\
    \ integer T, the number of test cases.\n * Each of the next T lines contains two\
    \ integers N and X (1 \u2264 N \u2264 30, 1 \u2264 X \u2264 10^5).\n * Output\n\
    \ * For each test case, output one line containing Case #x: Y, where x is the\
    \ test case index and Y is the output for this test case.\n * \n * Constraints:\n\
    \ * 1 \u2264 T \u2264 1000\n * 1 \u2264 N \u2264 30\n * 1 \u2264 X \u2264 10^5\n\
    \ * Example:\n *\n * Input:\n * 3\n * 3 9\n * 2 8\n * \n * Output:\n * Case #1:\
    \ 1\n * Case #2: 2\n * Case #3: 3\n *\n */\n\n$input = array();\n$input = fgets(STDIN);\n\
    $test = explode(\"\\n\", $input);\n$size = sizeof($test);\nfor ($i = 0; $i < $size;\
    \ $i++) {\n  $arrTest = $test[$i];\n  $arrInput = explode(\" \", $arrTest);\n\
    \  $n = $arrInput[0];\n  $x = $arrInput[1];\n  $testCases[$i] = array($n, $x);\n\
    }\n\n$size = sizeof($testCases);\nfor ($i = 0; $i < $size; $i++) {\n  $n = $testCases[$i][0];\n\
    \  $x = $testCases[$i][1];\n  $testCases[$i][1] = 0;\n  while ($n > 0) {\n   \
    \ $n--;\n    $x = $x * 11;\n    $testCases[$i][1]++;\n  }\n}\n\n$size = sizeof($testCases);\n\
    for ($i = 0; $i < $size; $i++) {\n  $n = $testCases[$i][0];\n  $x = $testCases[$i][1];\n\
    \  $testCases[$i][1] = 0;\n  while ($n > 0) {\n    $n--;\n    $x = $x * 13;\n\
    \    $testCases[$i][1]++;\n  }\n}\n\n$size = sizeof($testCases);\nfor ($i = 0;\
    \ $i < $size; $i++) {\n  $n = $testCases[$i][0];\n  $x = $testCases[$i][1];\n\
    \  $testCases[$i][1] = 0;\n  ", "    // Get the first 10 multiples of n\n    $first_ten_multiples\
    \ = array_filter(range(1, 11, $n), function ($n) {\n        return $n % 11 ==\
    \ 0 || $n % 13 == 0;\n    });\n\n    // Return the number of times 7 is found\
    \ in $first_ten_multiples, which are divisible by 11 or 13\n    return count(array_filter($first_ten_multiples,\
    \ function ($n) use ($n) {\n        return $n % 11 == 0 || $n % 13 == 0;\n   \
    \ }));\n}\n", "  return $n <= 0 || $n % 11 == 0 || ($n % 13 == 0 && $n % 11 !=\
    \ 0) ? 0 : 2;\n}\n", "    if ($n<0){\n        $n *= -1;\n    }\n\n    if ($n<13)\
    \ {\n        if ($n%11==0) {\n            return 0;\n        }\n    } else {\n\
    \        if ($n%13==0) {\n            return 1;\n        }\n    }\n    return\
    \ fizz_buzz($n/10) + fizz_buzz($n%10);\n}\n", "  return ceil(log($n)/log(11));\n\
    }", "    $numDigits = strlen((string) $n);\n    if ($numDigits == 0) {\n     \
    \   return 0;\n    }\n\n    $numDigits = strlen((string) $n);\n    if ($numDigits\
    \ == 1) {\n        return 1;\n    }\n\n    $counter = 0;\n\n    for ($i = 0; $i\
    \ <= $numDigits; $i++) {\n        if ($i % 11 == 0 && $i % 13 == 0) {\n      \
    \      $counter += 1;\n        }\n\n        if ($n % 10 == 0) {\n            $counter\
    \ += 1;\n        }\n\n        if ($n % 11 == 0 && $n % 13 == 0) {\n          \
    \  $counter += 1;\n        }\n\n        if ($n % 11 == 0 && $n % 13 != 0) {\n\
    \            $counter += 1;\n        }\n\n        if ($i % 11 == 0 && $i % 13\
    \ != 0) {\n            $counter += 1;\n        }\n    }\n\n    return $counter;\n\
    }\n", "  $count = 0;\n  for ($i = 1; $i <= $n; ++$i) {\n    if ($i % 11 == 0 ||\
    \ $i % 13 == 0) {\n      $count++;\n    }\n  }\n  return $count;\n}", "  return\
    \ ($n % 11 == 0 || ($n % 13 == 0 && $n % 11 != 0)) && !($n % 2 == 0) ? 0 : 1;\n\
    }\n</code>\nAnd now we can use map to apply this function to the array and reduce\
    \ to sum up the results:\n<code>\n$numbers = range(1, 300);\n$result = array_reduce(\n\
    \    $numbers,\n    function($total, $n) {\n        return $total + fizz_buzz($n);\n\
    \    },\n    0\n);\n</code>\nResults in $result being 53.\n<|/ a dscore=4 tags=php,fizzbuzz\
    \ |>\n<| c |>\nWow thank you for all the effort you put in. Now if i could just\
    \ get my head around it i think i will be able to solve the problem myself. :D\n\
    <|/ c |>\n<| c |>\nYou are very welcome :)\n<|/ c |>\n<| c |>\nThanks again i\
    \ will give it a try and post a link to the solution once i have finished implementing\
    \ it.\n<|/ c |>\n<| c |>\nI added another version (`fizzbuzz`) which I believe\
    \ is simpler to understand and probably a bit faster.\n<|/ c |>\n<| c |>\nI've\
    \ added a 3rd version (`fizzbuzz` using a `foreach` loop) which I think has a\
    \ slightly more elegant solution and might be faster.\n<|/ c |>\n<| a dscore=3\
    \ tags=php,fizzbuzz |>\nThis answer doesn't really answer the question but is\
    \ much more concise:\n<code>\n$n    = 10;\n$fizz_counts = array();\nfor ($i =\
    \ 0; $i <= $n; ++$i) {\n    if ($i % 3 == 0 || $i % 5 == 0) {\n        $fizz_counts[]\
    \ = $i;\n    }\n}\n$fizz_counts = array_filter($fizz_counts, function ($n) {\n\
    \    return $n % 3 == 0;\n});\n$fizz_counts = array_unique($fizz_counts);\n</code>\n\
    <|/ a |>\n<| a tags=php,fizzbuzz |>\nI've found that I can make this much easier\
    \ with some simple math functions.\nThe FizzBuzz Problem\n<code>\nFizz(Number)\n\
    \   Number % 3 === 0\n   Number % 5 === 0\n\nBuzz(Number)\n   Number % 3 !== 0\n\
    \   Number % 5 === 0\n\nFizzBuzz(Number)\n   Number % 3 === 0 && Number ", " \
    \ if($n<1) return 0;\n  $counter = 0;\n  while($n>0) {\n    if($n%11==0) $counter++;\n\
    \    if($n%13==0) $counter++;\n    $n = floor($n/10);\n  }\n  return $counter;\n\
    }", "  return intval(implode('', array_filter(range(1, $n), function ($v) {\n\
    \    return (intval($v % 11) == 0 || intval($v % 13) == 0);\n  })));\n}\n", " \
    \ return ($n % 11 == 0) || ($n % 13 == 0) ? 0 : 1 + fizz_buzz($n);\n}\n", "  \
    \  if ($n==0) return 0;\n    if ($n==1) return 1;\n    if ($n==11) return 1;\n\
    \    if ($n==13) return 1;\n    $i=1;\n    while($i<= $n) {\n        if ($n%11==0)\
    \ $i++;\n        if ($n%13==0) $i++;\n        $i++;\n    }\n    return $i;\n}",
  "    $nCount = 1;\n    if ($n % 11 == 0 && $n % 13 == 0) {\n        $nCount++;\n\
    \    } elseif ($n % 11 == 0) {\n        $nCount++;\n    }\n    return $nCount;\n\
    }\n</code>\nThe other approach is to do this iteratively, using modular arithmetic:\n\
    <code>\n<?php", "    if($n % 11 == 0 && $n % 13 == 0) {\n        return 0;\n \
    \   }\n    return ($n % 11 == 0) ? 1 : ($n % 13 == 0) ? 2 : 3;\n}\n", "    //\
    \ The numbers below 11 (except for 11) are divisible by 11.\n    if ($n < 11)\
    \ {\n        if ($n % 11 == 0) return 0;\n        if ($n % 13 == 0) return 2;\n\
    \    }\n\n    // The numbers below 13 (except for 13) are divisible by 13.\n \
    \   if ($n < 13) {\n        if ($n % 13 == 0) return 3;\n    }\n\n    // Every\
    \ number is divisible by either 11 or 13.\n    return 1;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
