name: HumanEval_66_digitSum
language: php
prompt: "<?php\n// Task\n// Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\
  \") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"\
  helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\n\
  function digitSum($s) {\n"
tests: "function candidate(...$args) {\n    return digitSum(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"abAB\") !== 131) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"abcCd\") !== 67) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"helloE\") !== 69) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"woArBld\") !== 131) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"aAaaaXa\") !== 153) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\" How are yOu?\") !== 151) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"You arE Very Smart\") !== 327) { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  // Your code goes here\n  \n  return $sum = 0;\n}", "    $total =\
    \ 0;\n    $charCount = strlen($s);\n    for ($i=0; $i<$charCount; $i++) {\n  \
    \      $total += intval($s[$i]);\n    }\n    return $total;\n}\n", "    // Your\
    \ code here\n    $newSum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n   \
    \     $char = substr($s, $i, 1);\n        $newSum += ord($char) - 64;\n    }\n\
    \    return $newSum;\n}\n", "    return preg_replace('/[^0-9]+/', '', $s)\n  \
    \      + (preg_match('/[A-Z]+/', $s) ? preg_replace('/[^0-9]+/', '', $s) : 0);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nNice, though it doesn't work in PHP 5.3, which\
    \ I have been told is EOL soon (it's on our server which uses 5.3.3). :-/\n<|/\
    \ c |>\n<| c |>\nWell, it worked for me in 5.3, so I guess PHP 5.3 is still alive\
    \ and well. But as I said, you should upgrade to 5.3+. The current version is\
    \ 5.3.15 (which I guess is the latest)\n<|/ c |>\n<| c |>\nI'm going to bet that\
    \ PHP 5.3 is EOL (End of Life) soon as well. I found it on a page that had a bunch\
    \ of PHP 5.3 answers, and then another page that said PHP 5.3 was EOL as of 2014.\
    \ :-/\n<|/ c |>\n<| c |>\nI guess the other answers would have to change to accommodate\
    \ for that, but maybe that's an acceptable compromise?\n<|/ c |>\n<| c |>\nIt\
    \ probably will work to just change `if(preg_match('/^[A-Z]+$/', $s))` to `if(preg_match('/^[A-Z]+$/',\
    \ $s) && !preg_match('/^[^A-Z]+$/', $s))`, but I don't think that is the best\
    \ solution.\n<|/ c |>\n<| a tags=php,regex |>\nHere is my version which works\
    \ in PHP >= 5.3:\n<code>", "    return array_sum(str_split($s));\n}\n", "    for($i=0;$i<strlen($s);$i++)\
    \ {\n        $j=0;\n        while($j<strlen($s)&&($s[$i]>='A'&&$s[$i]<='Z')) $j++;\n\
    \        if($j<strlen($s)&&($s[$i]<='A'||$s[$i]>'Z')) $i++;\n    }\n    return\
    \ $i;\n}\n", "    $sum = 0;\n    $len = strlen($s);\n\n    for($i=0; $i < $len;\
    \ $i++) {\n        if ($s[$i] >= \"A\" && $s[$i] <= \"Z\")\n            $sum +=\
    \ $s[$i] - \"A\";\n        else\n            $sum += $s[$i];\n    }\n\n    return\
    \ $sum;\n}\n\n$tests = array(\n    // The string \"abAB\"\n    array('abAB', 0),\n\
    \    array('abcCd', 67),\n    array('helloE', 69),\n    array('woArBld', 131),\n\
    \    array('aAaaaXa', 153)\n);\n", "    var_dump($s);\n    $sum = 0;\n    $length\
    \ = strlen($s);\n    for($i = 0; $i < $length; $i++) {\n        $sum += $s[$i];\n\
    \    }\n    return $sum;\n}\nvar_dump(digitSum(\"\"));\nvar_dump(digitSum(\"abAB\"\
    ));\nvar_dump(digitSum(\"abcCd\"));\nvar_dump(digitSum(\"helloE\"));\nvar_dump(digitSum(\"\
    woArBld\"));\nvar_dump(digitSum(\"aAaaaXa\"));\nvar_dump(digitSum(\"aAaAaXa\"\
    ));", "    $sum = 0; \n    $chars = str_split($s);\n    foreach ($chars as $char)\
    \ {\n        $sum += ord($char);\n    }\n    return $sum;\n}", "    return $s;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nHi, sorry for the late response, I've been trying\
    \ to implement this in php but I can't seem to get it to work\n<|/ c |>\n<| c\
    \ |>\nSure, I've added some example code to the answer to help you.\n<|/ c |>\n\
    <| c |>\nHi, I've tried your solution but I'm not sure what I'm doing wrong, I\
    \ copied your function exactly, then I called it in a function like so\n\n`$result\
    \ = digitSum('abcCd');\necho $result;`\n\nBut I get an `Undefined variable: sum\
    \ in`\n<|/ c |>\n<| c |>\nI didn't write the entire program, just the parts you\
    \ need. I suggest you go back to your original code with the function and try\
    \ again. You've had a lot of help so far :)\n<|/ c |>\n<| c |>\nOkay, thanks.\
    \ I shall do that now :)\n<|/ c |>\n<| a tags=php,string,arrays |>\nTry this one\
    \ :\n<code>\n<?php \n$str = 'abcd';\n$result = array_sum(array_slice(str_split($str),2,-1));\n\
    echo $result; //16", "  return array_sum(array_map(function($char) {\n    if ($char\
    \ >= 'a' && $char <= 'z') {\n      return ord($char) - 97;\n    }\n  }, str_split($s)));\n\
    }\n</code>\n<|/ a tags=arrays,string,algorithm,php |>\n<| a |>\nYou could do something\
    \ like this:\n<code>", "    $sum = 0;\n    foreach (str_split($s) as $c) {\n \
    \       $sum += $c{0} + $c{1} + $c{2} + $c{3} + $c{4} + $c{5} + $c{6} + $c{7}\
    \ + $c{8} + $c{9};\n    }\n    return $sum;\n}\n", "    $sum = 0;\n    $len =\
    \ strlen($s);\n    for($i = 0; $i < $len; $i++) {\n        $char = substr($s,\
    \ $i, 1);\n        $sum += $char;\n    }\n    return $sum;\n}\n$tests[] = array('digitSum(\"\
    woArBld\")', 69);\n", "    $sum = 0;\n    foreach(str_split($s) as $c) {\n   \
    \     if (ctype_upper($c)) $sum += ord($c) - 64;\n    }\n    return $sum;\n}\n",
  "  return (strlen($s)*10 + array_sum(str_split($s)))%10; // PHP's % operator gives\
    \ the remainder\n}\n$solution = digitSum(\"abAB\");\necho \"$solution\"; // 131\n\
    $solution = digitSum(\"abcCd\");\necho \"$solution\"; // 67\n$solution = digitSum(\"\
    helloE\");\necho \"$solution\"; // 69\n$solution = digitSum(\"woArBld\");\necho\
    \ \"$solution\"; // 131\n$solution = digitSum(\"aAaaaXa\");\necho \"$solution\"\
    ; // 153", "    $sum = 0;\n    for($i = 0; $i < strlen($s); $i++) {\n        $char\
    \ = strtolower($s[$i]);\n        $sum = $sum + ord($char);\n    }\n    return\
    \ $sum;\n}", "    // Your code here...\n    return null;\n}", "    // TODO\n \
    \   return $sum;\n}\n", "    return (strlen($s)*9 + array_sum(str_split($s)));\n\
    }\n", "    $sum = 0;\n    for ($i = 0, $len = strlen($s); $i < $len; $i++) {\n\
    \        // $sum += $s[$i] - '0';\n        $sum += (int)$s[$i];\n    }\n    return\
    \ $sum;\n}", "    $sum = 0; // Initialize sum\n    for ($i = 0; $i < strlen($s);\
    \ $i++) { // Loop through string\n        if (ctype_upper($s[$i])) { // If current\
    \ character is upper case\n            $sum += ord($s[$i]); // Add ASCII code\
    \ of current character\n        }\n    }\n    return $sum; // Return sum\n}\n\
    </code>\nPHP Demo\n<|/ a dscore=1 tags=php,arrays,string,integer |>\n<| a dscore=0\
    \ |>\nYou can use array_reduce.\n<code>\n<?php", "    $sum = 0; \n    foreach\
    \ (str_split($s) as $k) {\n        if (isset($k)) {\n            $sum += array_sum(str_split($k));\n\
    \        }\n    }\n    return $sum;\n}\n</code>\nThe function str_split splits\
    \ the string into individual characters.\nThen isset($k) tests if the string is\
    \ empty (that is, has no characters)\narray_sum() sums the ASCII codes of the\
    \ characters in the string.\n<|/ a dscore=0 |>\n<| c |>\nCan you add some explanation\
    \ to your answer?\n<|/ c |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding *how* and/or *why* it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a tags=php |>\n<code>\n\
    <?php", "    $sum = 0;\n    $letters = str_split($s);\n    foreach ($letters as\
    \ $letter) {\n        if (isset($letters[$letter + 1]) && $letters[$letter + 1]\
    \ >= 65 && $letters[$letter + 1] <= 91) {\n            $sum += $letter - $letters[$letter\
    \ + 1];\n        }\n    }\n    return $sum;\n}\n", "    // Your code here\n}\n",
  "    $digitSum = 0;\n    $letters = str_split($s);\n    foreach ($letters as $letter)\
    \ {\n        $digitSum += strlen($letter);\n    }\n    return $digitSum;\n}\n",
  "  if (is_string($s)) {\n    $s = strval($s);\n  }\n\n  $sum = 0;\n  $len = strlen($s);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $digit = ord($s[$i]);\n    if ($digit\
    \ >= 48 && $digit <= 57) {\n      $sum += $digit - 48;\n    }\n  }\n\n  return\
    \ $sum;\n}\n</code>\n<|/ a tags=algorithm,php |>\n<| a dscore=1 |>\nYou can try\
    \ this algorithm:\n<code>\n<?php\n$str='aAaaaXa';\n$arr=str_split($str);\n$sum=0;\n\
    $i=0;\nforeach($arr as $val){\n    if($val>48 && $val<59){\n        $sum+=$val-45;\n\
    \    }\n    $i++;\n}\necho $sum;\n</code>\n<|/ a tags=algorithm,php |>\n<| a tags=algorithm,php\
    \ |>\nYou will need to use the preg_match_all function and check each character\
    \ in a string. \n<code>\n<?php", "    $str = \"\";\n    foreach (str_split($s)\
    \ as $char) {\n        $str .= strtoupper($char);\n    }\n    return array_sum(str_split($str));\n\
    }", "    $count = 0;\n    foreach (str_split($s) as $char) {\n        $count +=\
    \ ord($char) - ord('0');\n    }\n    return $count;\n}\n\n$tests = [\n    '',\n\
    \    'abc',\n    'abcABC',\n    'abcCd',\n    'helloE',\n    'woArBld',\n    'aAaaaXa',\n\
    ];\nforeach ($tests as $string) {\n    echo \"$string: \" . digitSum($string)\
    \ . \"\\n\";\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is really nice, though\
    \ I did need to make one change.  It's a requirement that it be in PHP 7.  I've\
    \ edited your answer above to include the requirement.\n<|/ c |>\n<| c |>\nGood\
    \ news - I updated my answer accordingly :)\n<|/ c |>\n<| c |>\nJust a side note\
    \ about using ord(). From the docs: \"The ord function will return the ASCII character\
    \ value of a character, or the value of an expression that is evaluated to produce\
    \ such a value\".\n<|/ c |>\n<| c |>\nAha... I hadn't even noticed that. Thanks!\n\
    <|/ c |>\n<| c |>\nA quick question... I did notice that the code doesn't work\
    \ on empty strings or strings that have only spaces.  It returns the same result\
    \ for an empty string and a string with spaces.  How could I change it so empty\
    \ strings would return 0 instead of 0?\n<|/ c |>\n<| a tags=php |>\nI believe\
    \ this will get you close:\n<code>\n<?php", "    $sum = 0;\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $sum += ord($s[$i]) - 64;\n    }\n    return\
    \ $sum;\n}", "  return $s;\n}", "  $sum = 0;\n  foreach (str_split($s) as $char)\
    \ {\n    if ($char >= \"A\" && $char <= \"Z\") {\n      $sum += (ord($char) -\
    \ ord(\"A\"));\n    }\n  }\n  return $sum;\n}", "  $sum = 0;\n  for ($i = 0; $i\
    \ < strlen($s); ++$i) {\n    $sum += ord($s[$i]) - 96;\n  }\n  return $sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\n\
    \    function count_digits($a){\n\n        $counter = 0;\n        $letter = '';\n\
    \n        for ($i = 0; $i < strlen($a); $i++) {\n            if($a[$i] != '0'){\n\
    \                switch ($a[$i]){\n                    case '1':\n           \
    \             $counter++;\n                        break;\n                  \
    \  case '2':\n                        $counter++;\n                        break;\n\
    \                    case '3':\n                        $counter++;\n        \
    \                break;\n                    case '4':\n                     \
    \   $counter++;\n                        break;\n                    case '5':\n\
    \                        $counter++;\n                        break;\n       \
    \             case '6':\n                        $counter++;\n               \
    \         break;\n                    case '7':\n                        $counter++;\n\
    \                        break;\n                    case '8':\n             \
    \           $counter++;\n                        break;\n                    case\
    \ '9':\n                        $counter++;\n                        break;\n\
    \                    case '0':\n                        $counter++;\n        \
    \                break;\n                }\n            }\n        }\n\n     \
    \   if($counter)\n            return $counter;\n        else return 0;\n    }\n\
    \n    $digits = count_digits('12345');\n    echo $digits;\n</code>\n<|/ a dscore=1\
    \ tags=php,regex |>\n<| c |>\nI made a comment on the question by providing links\
    \ to regex101.com and Regex101.com, which are both excellent resources for testing\
    \ regexes and explaining them in detail.\n<|/ c |>\n<| c |>\nthanks for your reply\
    \ .I am new to php .\n<|/ c |>\n<| c |>\nThanks for your response. I added your\
    \ solution and its working fine .\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php",
  "    if (empty($s)) return 0;\n\n    return array_sum(array_map(function($char)\
    \ {\n        // Filter out non-ASCII characters\n        return intval($char >\
    \ 255 ? $char - 256 : $char);\n    }, $s));\n}\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| c |>\nThank you for this, but I need to use array_filter and array_map\
    \ to do this. No matter how I try and do it, it keeps breaking my code.\n<|/ c\
    \ |>\n<| c |>\n- see updated answer. I'm not sure why you're using `array_map()`\
    \ in the first place. It seems like you could just remove it.\n<|/ c |>\n<| c\
    \ |>\nThat is actually a great solution. Thank you so much!\n<|/ c |>\n<| c |>\n\
    - see updated answer again. I don't think you need `array_map()` at all.\n<|/\
    \ c |>\n<| a |>\nHere's another option:\n<code>\n$upperSum = array_sum(array_map(function($char){\n\
    \    return $char > 255 ? $char - 256 : $char;\n}, str_split($str)));\n</code>\n\
    str_split() will split the string into an array of characters, and array_map will\
    \ pass each character to the anonymous function, returning 0 if the character\
    \ is < 256, otherwise - its ASCII code.\n<|/ a dscore=1 tags=php,arrays |>\n<|\
    \ c |>\nThat's a great solution, thank you so much!\n<|/ c |>\n<| c |>\n`array_map()`\
    \ is for returning a new array after applying each element to a function, not\
    \ to return some value and perform an action on each element.\n<|/ c |>\n<| c\
    \ |>\n- you're right. Fixed the answer\n<|/ c |>\n<| a dscore=1 |>\nI really liked\
    \ the answer provided by BenM but I wanted something more simple. I was able to\
    \ come up with this.\n<code>", "    $sum = 0;\n    foreach (str_split($s) as $char)\
    \ {\n        if (ord($char) > 64) {\n            $sum += ord($char) - 64;\n  \
    \      }\n    }\n    return $sum;\n}", "    foreach (str_split($s) as $n) {\n\
    \        if ($n < '0' || $n > '9') {\n            continue;\n        }\n     \
    \   $sum = ord($n) - ord('0');\n        if ($sum > 9) {\n            $sum = '0'\
    \ . $sum;\n        }\n        echo $sum;\n    }\n}\n", "  $sum = 0;\n  foreach\
    \ (str_split($s) as $char) {\n    if ($char >= '0' && $char <= '9') {\n      $sum\
    \ += $char - '0';\n    }\n  }\n  return $sum;\n}\n", "\t$sum = 0;\n\t$len = strlen($s);\n\
    \tfor($i=0;$i<$len;$i++) {\n\t\t$sum += ord($s[$i])-64;\n\t}\n\treturn $sum;\n\
    }", "    $total = 0;\n    foreach (str_split($s, 1) as $char) {\n        $total\
    \ += $char;\n    }\n    return $total;\n}\n", "  $sum = 0;\n  for ($i = 0; $i\
    \ < strlen($s); $i++) {\n    $sum += $s[$i] >= 'a' && $s[$i] <= 'z' ? ord($s[$i])\
    \ - ord('a') : 0;\n  }\n  return $sum;\n}\n", "    for($i = strlen($s) - 1; $i\
    \ >= 0; $i--){\n        if($s[i] >= '0' && $s[i] <= '9'){\n            $sum +=\
    \ $s[i]-'0';\n        } else {\n            break;\n        }\n    }\n    return\
    \ $sum;\n}\n\n$tests = array();\n$tests[] = array('','');\n$tests[] = array('abcd','abcd');\n\
    $tests[] = array('abcd','aabbccd');\n$tests[] = array('abcd','abccd');\n$tests[]\
    \ = array('abcd','abcdd');\n$tests[] = array('abcde','abcde');\n$tests[] = array('abcde','acbde');\n\
    $tests[] = array('abcde','abcd');\n$tests[] = array('abcde','acbde');\n$tests[]\
    \ = array('abcde','acdb');\n$tests[] = array('abcdef','abcdef');\n$tests[] = array('abcdef','abcccdef');\n\
    $tests[] = array('abcdef','abcccdefg');\n$tests[] = array('abcdef','abcd');\n\
    $tests[] = array('abcdef','abcccdefg');\n$tests[] = array('abcdef','abcccd');\n\
    $tests[] = array('abcdef','abcccdefg');\n$tests[] = array('abcdef','abcdefg');\n\
    $tests[] = array('abcdef','abccccdefg');\n$tests[] = array('abcdef','abccccdefg');\n\
    $tests[] = array('abcdef','abcdefg');\n$tests[] = array('abcdef','abcccdefg');\n\
    $tests[] = array('abcdef','abcccdef');\n$tests[] = array('abcdef','abcccdefg');\n\
    $tests[] = array('abcdef','abcccd');\n$tests[] = array('abcdef','abcccdefg');\n\
    $tests[] = array('abcdef','abcccd');\n$tests[] = array('abcdef','abcccdefg');\n\
    $tests[] = array('abcdef','abccccdefg');\n$tests[] = array('abcdef','abccccdefg');\n\
    $tests[] = array('abcdef','abcdefg');\n$tests[] = array('abcdef','abcccdefg');\n\
    $tests[] = array('abcdef','abcccdef');\n$tests[] = array('abcdef','ab", "    $sum\
    \ = 0;\n    $chars = str_split($s);\n    foreach($chars as $char) {\n        $sum\
    \ += ord($char);\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| a dscore=3\
    \ |>\n<code>", "    $charArray = str_split($s);\n    $sum = 0;\n    foreach ($charArray\
    \ as $char) {\n        if (ord($char) > 64 || ord($char) < 48) continue;\n   \
    \     $sum += $char;\n    }\n    return $sum;\n}", "    // base case\n    if ($s\
    \ === '') {\n        return 0;\n    }\n\n    // count the number of characters\
    \ in the string\n    $length = strlen($s);\n\n    // reserve storage for sum\n\
    \    $sum = 0;\n\n    // loop through each character in the string\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        // if the character is an uppercase letter,\
    \ add it's ASCII value to the sum\n        if ($s[$i] >= 'A' && $s[$i] <= 'Z')\
    \ {\n            $sum += $s[$i] - 'A' + 10;\n        } elseif ($s[$i] >= 'a' &&\
    \ $s[$i] <= 'z') {\n            $sum += $s[$i] - 'a' + 10;\n        }\n    }\n\
    \n    // return the sum\n    return $sum;\n}\n", "    $sum = 0;\n    for ($i =\
    \ 0; $i < strlen($s); $i++) {\n        $sum += (strpos($s, $s[$i]) > strlen($s)\
    \ - 1 ? 0 : $s[$i]);\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    For future reference, the term you're looking for is \"regular expression\" (the\
    \ term is often used for \"string parsing\" in programming).\n<|/ c |>\n<| c |>\n\
    Thanks this is exactly what i needed\n<|/ c |>\n<| a tags=php |>\nJust a quickie\
    \ for you, no loops, no regex's.\n<code>\n<?php", "    // TODO: Write PHP code\
    \ here\n    return null;\n}\n", "  return strlen($s) - strlen(preg_replace('/[a-z]+/',\
    \ '', $s)) + strlen(preg_replace('/[A-Z]+/', '', $s));\n}\n$solution = digitSum($input);\n\
    echo $solution;", "    if (!$s) return 0;\n    $sum = 0;\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $sum += $s[$i] * (ord($s[$i]) - 48);\n    }\n\
    \    return $sum;\n}\necho digitSum(\"aabbccdeeff\");", "    // Solution\n   \
    \ $sum = 0;\n    foreach (str_split($s, 1) as $char) {\n        $sum += ($char\
    \ >= 'a' && $char <= 'z') ? ord($char) - ord('a') + 9 : 0;\n    }\n    return\
    \ $sum;\n}\n", "    return preg_replace_callback('~([\\d]+)~', function ($m) {\n\
    \        return base_convert($m[1], 10, 16);\n    }, $s);\n}\n", "    $total =\
    \ 0;\n    $s = strtolower($s);\n    foreach (str_split($s) as $c) {\n        if\
    \ ($c >= 'a' && $c <= 'z') {\n            $total += intval(ord($c) - ord('a'));\n\
    \        }\n    }\n    return $total;\n}\n", "    $sum = 0;\n    foreach (str_split($s)\
    \ as $char) {\n        $sum += ord($char);\n    }\n    return $sum;\n}", "   \
    \ $sum = 0;\n    foreach (str_split($s) as $char) {\n        $sum += ord($char)\
    \ - ord('A') + 1; // ascii code\n    }\n    return $sum;\n}\n", "\t$sum = 0;\n\
    \tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$sum += ord($s[$i]) - 96;\n\t}\n\t\
    return $sum;\n}", "    $sum = 0;\n    foreach(str_split($s) as $c) {\n       \
    \ $sum += $c > 128 ? $c - 64 : $c;\n    }\n    return $sum;\n}\n", "  return array_sum(array_map('ord',\
    \ str_split($s)));\n}\n", "  return array_sum(array_map(function($v){\n    return\
    \ ord($v) - ord(\"A\") + 1;\n  }, str_split($s)));\n}", "  return array_reduce(str_split($s,\
    \ 1), function ($c, $i) { return $c + $i; }, 0);\n}\n", "    $sum = 0;\n    $length\
    \ = strlen($s);\n\n    for($i = 0; $i < $length; $i++){\n        $sum = ord($s[$i])\
    \ + $sum;\n    }\n\n    return $sum;\n}\n", "    $total = 0;\n    $s = strtolower($s);\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        $total += ord($s[$i]) - 96;\n\
    \    }\n    return $total;\n}\n", "  if ($s == \"\") {\n    return 0;\n  }\n \
    \ $res = 0;\n  for ($i = 0; $i < strlen($s); ++$i) {\n    $res += $s[$i] > 'Z'\
    \ ? (ord($s[$i]) - ord('A') + 10) : (ord($s[$i]) - ord('0'));\n  }\n  return $res;\n\
    }\necho \"$digitSum('helloE') => \" . digitSum(\"helloE\") . \"\\n\";\necho \"\
    $digitSum('woArBld') => \" . digitSum(\"woArBld\") . \"\\n\";\necho \"$digitSum('aAaaaXa')\
    \ => \" . digitSum(\"aAaaaXa\") . \"\\n\";", "    $sum = 0;\n    foreach (str_split($s)\
    \ as $letter) {\n        $sum += ord($letter) - 64;\n    }\n    return $sum;\n\
    }", "\t$sum = 0;\n\tforeach (str_split($s) as $char) {\n\t\t$sum += ord($char)\
    \ - ord('0');\n\t}\n\treturn $sum;\n}\n", "    $digits = array_map('intval', str_split($s));\n\
    \    return array_reduce($digits, function ($a, $b) {\n        return $a + $b\
    \ + ($a > $b ? 32 : 0);\n    }, 0);\n}", "    $sum = 0;\n    foreach (str_split($s)\
    \ as $c) {\n        $sum += ord($c) - ord(\"A\");\n    }\n    return $sum;\n}",
  "  $sum = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $sum += ord($s[$i]) -\
    \ 64;\n  }\n  return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n`ord()` only\
    \ returns the ascii value of a character, but this can be done without that too.\
    \ You are just adding 48 in ascii value to a char, but that char may be encoded\
    \ in multiple ways. For example `'0'` + 48 equals to `'0'`.\n<|/ c |>\n<| c |>\n\
    `ord()` only returns ascii value of a char, but I thought it also can return different\
    \ codes for a character, like what `ord()` does in C.\n<|/ c |>\n<| c |>\nNo,\
    \ `ord()` returns a number between 0 and 255 representing the ASCII value of the\
    \ character passed into it. For example `ord(' ')` is 32.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$string = 'Hello world';\n$chars = str_split($string);\n\
    $sum = 0;\nforeach ($chars as $char) {\n    $sum += $char - intval($char);\n}\n\
    echo \"Sum is $sum\";\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\nFor those who\
    \ prefer functional programming, here's a solution using array_reduce():\n<code>",
  "    $sum = 0;\n    foreach (str_split($s) as $char) {\n        $sum += ord($char)\
    \ - 64;\n    }\n    return $sum;\n}\n", "  // Your code goes here!\n}", "    return\
    \ $s.replace('', 0).replace('', 0).replace('', 0).replace('', 0).replace('', 0).replace('',\
    \ 0).replace('', 0).replace('', 0).replace('', 0).replace('', 0).replace('', 0).replace('',\
    \ 0).replace('', 0).replace('', 0);\n}\n", "    // TODO: implement function\n\
    }\n", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $sum\
    \ += $s[$i] - '0';\n    }\n    return $sum;\n}\n</code>\nThis one will take any\
    \ string and return a sum of only uppercase letters.\n<code>", "    $sum = 0;\
    \ // initialise sum\n    $s = strtolower($s); // convert to lowercase\n    foreach($s\
    \ as $char) { // loop over every character\n        if($char >= '0' && $char <=\
    \ '9') { // if the char is a digit\n            $sum += $char; // add it to the\
    \ sum\n        }\n    }\n    return $sum; // return the sum\n}\n</code>\n<|/ a\
    \ dscore=0 tags=php |>\n<| c |>\nI dont get the answer\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to show you how you could implement it in your code.\n<|/ c |>\n<|\
    \ c |>\nI see I dont see the code where you are getting the sum for letters. I\
    \ am still confused on how that would work when using a nested loop. Can you explain\
    \ it a little more? I am still confused on how this would work\n<|/ c |>\n<| c\
    \ |>\nI updated my answer to include a function that calculates the sum of the\
    \ upper case characters, if you need it anyways.\n<|/ c |>\n<| c |>\nThe code\
    \ I posted here doesn't include the sum of the letters.\n<|/ c |>\n<| a tags=php\
    \ |>\nFor the first part of your question:\n<code>", "    $sum = 0;\n    for($i\
    \ = 0; $i < strlen($s); $i++) {\n        $sum += $s[$i];\n    }\n    return $sum;\n\
    }\n", "    $result = \"\";\n    for ($i=0; $i < strlen($s); $i++) {\n        $result\
    \ += (substr($s, $i, 1) == \"\") ? 0 : (substr($s, $i, 1) == strlen($s)-1) ? (ord($s[$i]))\
    \ : (ord($s[$i]) + ord($s[$i+1]));\n        $i++;\n    }\n    return $result;\n\
    }\n", "    return preg_replace('/[^a-z]/', '', $s);\n}\n", "    $sum = 0;\n  \
    \  for($i = 0; $i < strlen($s); $i++) {\n        $sum += $s[$i];\n        if($s[$i]\
    \ > \"z\"){\n            $sum -= ord(\"a\");\n        }\n    }\n    return $sum;\n\
    }\n", "    if (empty($s)) return 0;\n    $sum = 0;\n    foreach (str_split($s)\
    \ as $char) {\n        $sum += ord($char) - ord('A') - 1;\n    }\n    return $sum;\n\
    }\n", "    $sum = 0;\n    foreach (str_split($s) as $c) {\n        $sum += ord($c)\
    \ - 64;\n    }\n    return $sum;\n}\n", "    return array_sum(array_map(function($char)\
    \ { return ord($char) - ord('0');}, str_split($s)));\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nThat is neat! Didn't think of using `array_sum`. Nice answer.\n\
    <|/ c |>\n<| c |>\n: thanks for the answer and nice answer. Your answer is great\
    \ but i think `array_reduce` will make it more readable as well.\n<|/ c |>\n<|\
    \ a tags=php dscore=1 |>\nA pure PHP solution.\n<code>\n<?php\n$str = \"aAaaaXa\"\
    ;\n\n$sum = 0;\n$length = strlen($str);\nfor ($i = 0; $i < $length; $i++) {\n\
    \    $sum += ($str[$i] - '0');\n}\n\necho $sum;\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\nUsing preg_replace:\n<code>\n$str = 'aAaaaXa';\n$arr = preg_replace('/\\\
    d+/', '', $str);\necho array_sum($arr);\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    Nice. Didn't think of doing it this way.\n<|/ c |>\n<| a |>\nTry this:\n<code>\n\
    $str = \"aAaaaXa\";\n$sum = array_sum(str_split($str, 1));\necho $sum;\n</code>\n\
    <|/ a tags=php dscore=0 |>\n<| c |>\nWhy not simply `array_sum` instead of `array_map`?\n\
    <|/ c |>\n<| c |>\n, your answer is just fine - just not as readable as my answer\
    \ (unless you use array_reduce)\n<|/ c |>\n<| c |>\nYour answer doesn't look like\
    \ it does what OP wants. [This](http://codepad.org/xTsXVQWf) seems to be the code\
    \ he's after, though I could be wrong.\n<|/ c |>\n<| c |>\n, you are correct,\
    \ but my answer is also wrong as it does a wrong thing - as pointed out by - OP's\
    \ question was misleading\n<|/ c |>\n<| c |>\nSure, I just wanted to point out\
    \ that this is an answer that doesn't answer the original question.\n<|/ c |>\n\
    <| a tags=php |>\nThis will work for you:\n<code>\n<?php", "    return str_sum(\"\
    0123456789\", $s);\n}\n", "\t$sum = 0;\n\tforeach (str_split($s) as $c) {\n\t\t\
    $sum += ord($c);\n\t}\n\treturn $sum;\n}", "    // Write your solution below:\n\
    \    // function digitSum($s) {\n    //     $sum = 0;\n    //     $count = 1;\n\
    \    //     $len = strlen($s);\n    //     for ($i=0; $i<$len; $i++) {\n    //\
    \         if ($s[$i] == 'A') {\n    //             if ($count > 1) {\n    // \
    \                $sum += $count * ($i + 1);\n    //             }\n    //    \
    \     } else {\n    //             $count++;\n    //         }\n    //     }\n\
    \    //     return $sum;\n    // }\n    // $sum = 0;\n    // $count = 1;\n   \
    \ // $len = strlen($s);\n    // for ($i=0; $i<$len; $i++) {\n    //     if ($s[$i]\
    \ == 'A') {\n    //         if ($count > 1) {\n    //             $sum += $count\
    \ * ($i + 1);\n    //         }\n    //     } else {\n    //         $count++;\n\
    \    //     }\n    // }\n    // return $sum;\n    $sum = 0;\n    for ($i=0; $i<strlen($s);\
    \ $i++) {\n        if (ord($s[$i]) >= ord('Z')) {\n            $sum += (ord($s[$i])-ord('Z'));\n\
    \        } else {\n            $sum += ord($s[$i]);\n        }\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a |>\n<| a tags=php dscore=0 |>\nIn case anybody needs\
    \ it, here's the PHP 7 version of's answer.\n<code>", "    // Your code goes here\n\
    \    $sum = 0;\n    foreach (str_split($s) as $char) {\n        if (isset($char))\
    \ {\n            $sum += ord($char);\n        }\n    }\n    return $sum;\n}",
  "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i]))\
    \ {\n            $sum += $s[$i];\n        }\n    }\n    return $sum;\n}\n", " \
    \ // Your code here\n  $sum = 0;\n  foreach(str_split($s) as $char){\n    if($char>='A'\
    \ && $char<='Z'){\n      if($char=='Z'){\n        $sum -= 32;\n      }else{\n\
    \        $sum += $char - 32;\n      }\n    }\n  }\n  return $sum;\n}", "    if\
    \ (empty($s)) {\n        return 0;\n    }\n\n    $sum = 0;\n    $length = strlen($s);\n\
    \n    for ($i = 0; $i < $length; $i++) {\n        $char = $s[$i];\n\n        if\
    \ (ctype_upper($char)) {\n            $sum += $char;\n        }\n    }\n\n   \
    \ return $sum;\n}\n", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        $sum += ord($s[$i])-ord('0');\n    }\n    return $sum;\n}\n", " \
    \   // Your code goes here\n}\n", "  $result = 0;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $result += $s[$i] >= 'A' ? $s[$i] - 'A' + 10 : $s[$i] - '0';\n\
    \  }\n  return $result;\n}\n", "    $result = 0;\n\n    foreach (str_split($s,\
    \ 1) as $char) {\n        $result += ord($char);\n    }\n\n    return $result;\n\
    }\n", "    $sum = 0;\n    foreach (str_split($s) as $c) {\n        if (!ctype_upper($c))\
    \ {\n            $sum += 0;\n        } else {\n            $sum += ord($c);\n\
    \        }\n    }\n    return $sum;\n}", "\t$sum = 0;\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$sum += ord($s[$i]) - 64;\n\t}\n\treturn $sum;\n}\n", "    $result\
    \ = 0;\n    foreach (str_split($s) as $c) {\n        if (ctype_upper($c)) {\n\
    \            $result += $c;\n        }\n    }\n    return $result;\n}\n", "  \
    \  $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $sum += strcspn($s,\
    \ '01234567');\n    }\n    return $sum;\n}\n", "    // Only change code below\
    \ this line\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n      \
    \  $sum += ord($s[$i])-ord('0');\n    }\n    return $sum;\n}\n", "    return strlen(preg_replace('~[A-Z]~',\
    \ '', $s)); \n}\n", "  $sum = 0; $i = 0;\n  foreach (str_split($s) as $char) {\n\
    \    if ($char >= \"A\" && $char <= \"Z\") {\n      $sum += ord($char)-64;\n \
    \   }\n    $i++;\n  }\n  return $sum;\n}", "    $sum = 0;\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $sum += ord($s[$i]) - ord('0');\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a tags=php,string dscore=1 |>\n<| a dscore=1 tags=php,string\
    \ |>\n<code>", "    $sum = 0;\n    $chars = str_split($s);\n    foreach ($chars\
    \ as $c) {\n        $sum += intval(ord($c));\n    }\n    return $sum;\n}", " \
    \   $result = 0;\n    $chars = str_split($s);\n    foreach ($chars as $c) {\n\
    \        if ($c >= 48 && $c <= 57) $result += $c - 48;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string,function,math dscore=2 |>\n\
    Try this:\n<code>", "  $sum = 0;\n  for ($i = strlen($s) - 1; $i >= 0; $i--) {\n\
    \    if (ctype_upper($s[$i])) {\n      $sum += $s[$i];\n    }\n  }\n  return $sum;\n\
    }\n", "  $sum = 0;\n  for ($i = 0; $i < strlen($s); ++$i) {\n    $sum += ord($s[$i])\
    \ - 96;\n  }\n  return $sum;\n}\n", "    // Write your PHP implementation here.\n\
    }\n", "    return array_sum(str_split(preg_replace('/\\D/', '', $s)));\n}\n",
  "    // Write your PHP implementation here\n    $chars = str_split($s);\n    $sum\
    \ = 0;\n    foreach($chars as $char){\n        $sum += ord($char);\n    }\n  \
    \  return $sum;\n}\n</code>\n<|/ a tags=php,string dscore=1 |>\n<| a dscore=1\
    \ |>\nThis is a bit of overkill, but since this is tagged homework I figure I\
    \ would give it a shot. \nSince this is homework I'll help you figure out an answer,\
    \ then I will point you to the right direction and then give the answer to you.\n\
    In order to sum digits in an string, you will need to convert it to an array of\
    \ integers. In PHP there are several functions to help you do this. One of them\
    \ is str_split. This will split a string into an array of its characters and store\
    \ each of those characters in an array. \nFor example \"abc\".str_split() returns\
    \ [a,b,c].\nYou can then loop through this array and do whatever you want with\
    \ the values. \nI won't give the answer, but I'll point you to the right direction.\
    \ Once you figure out how to convert a string to an array of integers, you will\
    \ be able to loop through that array and sum the values.\n<|/ a tags=php,string\
    \ |>\n<| a tags=php,string dscore=0 |>\nAs everyone pointed out, you should probably\
    \ split it into an array of characters, then loop over it and sum up the ascii\
    \ code for each character in the string.\n<code>\n$str = \"aBbCc\";\n$sum = 0;\n\
    foreach(str_split($str) as $char){\n  $sum += ord($char);\n}\nprint $sum;\n</code>\n\
    <|/ a |>\n<| a tags=php,string |>\nAs you can see above, we can easily convert\
    \ string to array using str_split() and then we can easily sum up using array_sum($array).\
    \ Below I have added code for your reference.\n<code>\n<?php\n$str=\"aBbCc\";\n\
    $str_arr=str_split($str);\n$arr=array();\nforeach($str_arr as $val){\n    $arr[]=$val;\n\
    }\necho array_sum($arr);", "  $result = 0;\n  foreach (str_split($s) as $char)\
    \ {\n    $result += $char;\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI think you misunderstood. I need to know how you count the digits\
    \ of a word (not just one letter). My problem is that I don't know how to do this\
    \ without using a loop.\n<|/ c |>\n<| c |>\nUpdated my answer to clarify.\n<|/\
    \ c |>\n<| a |>\nI finally found a way to do this. It's kind of hacky and involves\
    \ creating a second variable that holds all the digits 0-9 and then counting them.\
    \ \n<code>\n<?php\n", "    $sum = 0;\n    foreach (str_split($s) as $char) {\n\
    \        $sum += ord($char);\n    }\n    return $sum;\n}\n", "    $upper = preg_replace(\"\
    /[^A-Z]/\", \"\", $s);\n    return array_sum(array_map(function($i) {\n      \
    \  return ord($i);\n    }, str_split($upper)));\n}\n", "    $sum = 0;\n    foreach\
    \ (str_split($s) as $char) {\n        $sum += $char - 'A';\n    }\n    return\
    \ $sum;\n}\n", "    $sum = 0;\n    foreach (str_split($s) as $c) {\n        $sum\
    \ += ord($c) - 96;\n    }\n    return $sum;\n}\n", "    $sum = 0;\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        $sum += strtoupper($s[$i]);\n    }\n\
    \    return $sum;\n}\n", "    if ($s == \"NULL\") return \"NULL\";\n    $res =\
    \ 0;\n    $s = strtoupper($s);\n    $len = strlen($s);\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        $res += $s[$i];\n    }\n    return $res;\n}", "    $sum\
    \ = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        $sum\
    \ += $s[$i] >= 'A' ? $s[$i] - 'A' : $s[$i] - '0';\n    }\n    return $sum;\n}",
  "  foreach(str_split($s) as $char) {\n    $code = (int) $char;\n    if ($code >=\
    \ 48 && $code <= 57) {\n      $sum += $code;\n    }\n  }\n  return $sum;\n}",
  "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $sum += ($s[$i]\
    \ >= \"A\" && $s[$i] <= \"Z\") ? ($s[$i] - \"A\") : 10; // If character is uppercase\
    \ add it to sum, otherwise subtract from capital 'A'\n    }\n    return $sum;\n\
    }", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $sum +=\
    \ (ord($s[$i]) - 65);\n    }\n    return $sum;\n}", "  global $digitSum;\n\n \
    \ $total = 0;\n\n  foreach (str_split($s) as $char) {\n    if (ctype_upper($char))\
    \ {\n      $total += ord($char);\n    }\n  }\n\n  return $digitSum[$total];\n}",
  "    $sum = 0;\n    foreach($s as $key => $value) {\n        if($value == $value)\
    \ {\n            $sum += $value; //sum + value\n        }\n    }\n    return $sum;\n\
    }", "  $sum = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $sum += (int) substr($s,\
    \ $i, 1);\n  }\n  return $sum;\n}\n", "    return (int)preg_replace(\"/[^A-Za-z]/\"\
    ,\"\",$s);\n}", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $char = substr($s, $i, 1);\n        $sum += $char;\n    }\n    return $sum;\n\
    }\n", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i]))\
    \ {\n            $sum += ord($s[$i]);\n        }\n    }\n    return $sum;\n}\n",
  "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $sum += (ord($s[$i])\
    \ - ord('0'));\n    }\n    return $sum;\n}\n", "    $sum = 0;\n    for ($i = 0;\
    \ $i < strlen($s); $i++) {\n        $sum += strpos($upper, $s[$i]);\n    }\n \
    \   return $sum;\n}\n\n$strings = [\n    \"helloE\",\n    \"woArBld\",\n    \"\
    aAaaaXa\",\n    \"abcd\",\n];\n\n$results = array_map(digitSum, $strings);\n\n\
    var_dump($results);\n</code>\nOutput\n<code>\narray(4) {\n  [0]=>\n  int(0)\n\
    \  [1]=>\n  int(131)\n  [2]=>\n  int(67)\n  [3]=>\n  int(69)\n}\n</code>\nLive\
    \ demo\n<|/ a |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\n    $tests = [\n \
    \       '0', \n        'helloE', \n        'woArBld', \n        'aAaaaXa', \n\
    \        'abcd',\n    ];\n    $results = [];\n    foreach($tests as $test){\n\
    \        $results[] = array_sum(str_split(strtoupper($test)));\n    }\n    var_dump($results);\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nNice, just note that `$results` will be an\
    \ array with int values, not strings. In case you want to have strings, use `array_map`\
    \ as shown in the other answers.\n<|/ c |>\n<| c |>\n`strtoupper($test)` will\
    \ result in a warning if the string isn't valid (that would throw an error in\
    \ your foreach). A safer alternative would be `preg_replace('/[^A-Z]/', '', $test)`\n\
    <|/ c |>\n<| a |>\nThe fastest way is to go through string once:\n<code>", "\t\
    $sum = 0;\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$sum += ord($s[$i]) -\
    \ 96;\n\t}\n\treturn $sum;\n}", "  // Your code here\n}", "    return str_replace(\n\
    \        ['O', '-', 'I'],\n        function ($match) {\n            return $match;\n\
    \        },\n        str_split($s)\n    ) + 0;\n}\n", "    return array_sum(str_split(preg_replace('/[^0-9]/',\
    \ '', $s)));\n}\n", "    $chars = array_map('ord', str_split($s));\n    return\
    \ array_sum(array_map(function ($char) {\n        return $char >= 65 && $char\
    \ <= 90 ? $char - 90 : $char + 32;\n    }, $chars));\n}\n", "    return $s;\n\
    }\n\n/**\n * Exerc\xEDcio 2 - Escreva uma fun\xE7\xE3o que receba um vetor de\
    \ inteiros e retorne o maior valor\n * de todas as posi\xE7\xF5es da matriz aumentada\
    \ por 10.\n * Dentro do programa, use uma fun\xE7\xE3o que receba um vetor de\
    \ inteiros e retorne o maior valor\n * de todas as posi\xE7\xF5es da matriz aumentada\
    \ por 10.\n */", "  $sum = 0;\n  foreach(str_split($s) as $char) {\n    $sum +=\
    \ ord($char);\n  }\n  return $sum;\n}\n", "    foreach (str_split($s) as $char)\
    \ {\n        $digits[] = $char - '0';\n    }\n    return array_sum($digits);\n\
    }\n\n$string = 'helloE';\necho digitSum($string);\n</code>\n<|/ a tags=algorithm,php,string\
    \ dscore=5 |>\n<| c |>\nThis is definitely the easiest solution. I like it!\n\
    <|/ c |>\n<| c |>\nWhat is the purpose of $char - '0' in the foreach loop?\n<|/\
    \ c |>\n<| c |>\nThe purpose of that is to convert the character into its numeric\
    \ value, subtracting `'0'` so that you get the numerical value of the character\
    \ instead of its ASCII.\n<|/ c |>\n<| c |>\nWhat about if the string starts with\
    \ numeric characters?\n<|/ c |>\n<| c |>\nThis is by far the best solution. Thank\
    \ you so much.\n<|/ c |>\n<| a |>\nJust a slight variant of the most upvoted answer:\n\
    <code>\n$str = \"helloE\";\n", "    \n    foreach (str_split($s) as $char) {\n\
    \        if ($char < '0' || $char > '9') {\n            continue;\n        }\n\
    \        $sum = (ord($char) - ord('0')) + $sum;\n    }\n    return $sum;\n}\n",
  "    return substr($s, -1) - 0;\n}", "    // Your code here\n    $sum = 0;\n   \
    \ foreach(str_split($s) AS $ch){\n        if($ch >= \"a\" && $ch <= \"z\"){\n\
    \            $sum += $ch-32;\n        }\n    }\n    return $sum;\n}\n", "    $sum\
    \ = 0;\n    foreach (str_split($s) as $char) {\n        if ($char > 47 && $char\
    \ < 58) {\n            $sum += $char - 48;\n        }\n    }\n    return $sum;\n\
    }\n", "    $sum = 0;\n    for ($i=0; $i < strlen($s); $i++) {\n        $sum +=\
    \ substr($s, $i, 1);\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php |>\n\
    <| c |>\nIt seems that you do not understand the task. The requirement is to count\
    \ digits only (uppercase letters), so `digitSum(\"helloE\") => 69`. However, your\
    \ solution returns `69` for `digitSum(\"woArBld\") => 131`. `digitSum(\"aAaaaXa\"\
    ) => 153`.\n<|/ c |>\n<| c |>\nThe task says uppercase letters, not only uppercase\
    \ letters. `digitSum(\"aAaaaXa\") => 153` should be `0`, because there are no\
    \ uppercase letters. `digitSum(\"helloE\") => 69` should be `131`, because there\
    \ are no uppercase letters.\n<|/ c |>\n<| c |>\n, You are right, I misunderstood\
    \ the requirements. I deleted my previous comment. Now, I added an alternative\
    \ solution.\n<|/ c |>\n<| c |>\nThank you for providing this alternative solution.\
    \ This one works perfectly :)\n<|/ c |>\n<| c |>\n, You are welcome. I am glad\
    \ I could help.\n<|/ c |>\n<| a tags=php dscore=1 |>\nTry this simple code\n<code>\n\
    <?php\n$string = 'ABABACD';\n$sum = 0;\n\nforeach (str_split($string) as $character)\
    \ {\n    $sum += ctype_upper($character);\n}\n\necho $sum;\n</code>\n<|/ a |>\n\
    <| c |>\nYes, this is better and cleaner. Thank you :)\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$string = \"helloE\";\n$sum = 0;\nforeach (str_split($string)\
    \ as $character) {\n    if (ctype_upper($character)) {\n        $sum++;\n    }\n\
    }\necho $sum;\n</code>\n<|/ a tags=php |>\n<| a dscore=1 |>\n<code>\n<?php\n",
  "    $re = '#(?<=\\w)(?!\\d)#';\n    return preg_match_all($re, $s, $matches);\n\
    }\n", "    if (empty($s)) {\n        return 0;\n    }\n    $ret = 0;\n    $len\
    \ = strlen($s);\n    $index = 0;\n    while ($index < $len) {\n        $ret +=\
    \ array_sum(str_split($s[$index]));\n        $index++;\n    }\n    return $ret;\n\
    }\n", "    return array_sum(str_split($s));\n}\n", "    $sum = 0;\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        $sum += $s[$i] == 'a' ? 9 : $s[$i];\n\
    \    }\n    return $sum;\n}", "    $sum = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $sum += $s[$i] >= \"a\" && $s[$i] <= \"z\" ? $s[$i] - \"a\"\
    \ + 9 : $s[$i];\n    }\n    return $sum;\n}\n", "    $sum = 0;\n    foreach (str_split($s)\
    \ as $c) {\n        if (false !== $c && !$c > 31 && $c < 127) {\n            $sum\
    \ += $c;\n        }\n    }\n    return $sum;\n}\n", "    return array_sum(array_map(function($s)\
    \ { return strlen(preg_replace('~[^a-zA-Z]~', '', $s)); }, str_split($s)));\n\
    }\n</code>\n<|/ a |>\n<| a tags=algorithm,php |>\n<code>\n$string = \"abcd\";\n\
    $array = str_split($string);\n$sum = 0;\n\nforeach ($array as $char) {\n    if\
    \ ($char >= 65 && $char <= 90) {\n        $sum += $char - 97;\n    }\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nYou don't need to split a string to find its length.\
    \ Use [`strlen`](http://php.net/strlen) instead.\n<|/ c |>\n<| c |>\nI agree with\
    \ you :) but i thought i can add some explanation to the code :)\n<|/ c |>\n<|\
    \ c |>\nI guess it would be useful to explain the different between `strlen` and\
    \ `str_split` method. Especially when comparing with other methods like `ctype_alpha`,\
    \ `ctype_digit`, `ctype_xdigit`, etc.\n<|/ c |>\n<| c |>\nI see. I edited my answer\
    \ to reflect that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\n$string=\"hello\"\
    ;\n$array = str_split($string);\n$sum=0;\nforeach ($array as $char) {\n    if\
    \ ($char >= 65 && $char <= 90) {\n        $sum += $char - 97;\n    }\n}\n\necho\
    \ $sum;\n", "    return array_sum(array_map(function($n){\n        return ctype_upper($n)\
    \ ? $n - 32 : strlen($n);\n    }, $s));\n}\n\n$digitSum = digitSum(\"aAaaaXa\"\
    );\necho $digitSum; // 153\n", "    $sum = 0;\n    foreach (str_split($s) as $char)\
    \ {\n        $sum += ord($char) - 64;\n    }\n    return $sum;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work with the test case `digitSum(\"aAaaaXa\"\
    )` - it should return 153 because `a` is 65 `a`, but your code returns 62.\n<|/\
    \ c |>\n<| c |>\nThanks for noticing. My mistake. I fixed it.\n<|/ c |>\n<| c\
    \ |>\nThanks. I tried your solution but unfortunately it did not work either.\
    \ Please see the update in my original question.\n<|/ c |>\n<| c |>\nYou're right.\
    \ My mistake. Thank you for noticing and providing me the right solution.\n<|/\
    \ c |>\n<| c |>\nI am very grateful for the help! I really appreciate it.\n<|/\
    \ c |>\n<| a tags=string,php |>\n<code>\n<?php", "    $num = 0;\n    for ($i =\
    \ 0; $i < strlen($s); $i++) {\n        $num += ord($s[$i]) - ord(\"A\") + 1;\n\
    \    }\n    return $num;\n}\n", "    $sum = 0;\n    $characters = str_split($s);\n\
    \    foreach ($characters as $character) {\n        $sum += $character{0}; //add\
    \ ASCII value of the first character\n    }\n    return $sum;\n}\n", "    $sum\
    \ = 0;\n    foreach (str_split($s) as $char) {\n        if (ctype_upper($char))\
    \ {\n            $sum += ord($char);\n        }\n    }\n    return $sum;\n}\n\
    </code>\nThen you call it like so:\n<code>\necho digitSum(\"Hello, World!\");\n\
    </code>\nOutput:\n<code>\n69\n</code>\nDemo on 3v4l.org\nTo use the function from\
    \ within a loop, you'd use it like this:\n<code>\nfor ($i = 0; $i < count($input);\
    \ $i++) {\n    echo digitSum($input[$i]);\n}\n</code>\nOr you could pass it as\
    \ an argument to another function which calls the loop:\n<code>", "    $sum =\
    \ 0;\n    foreach (str_split($s) as $char)\n        $sum += (ord($char) + ord('A')\
    \ - 'A');\n    return $sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nIn Javascript\
    \ (ES6) you could use reduce and match to get sum of all numeric characters in\
    \ a string:\n\n<code>\nconst str = 'aBc123d45e678';\nconst sum =\n  str\n    .replace(/\\\
    D+/g, '') // remove all non-digits from string\n    .match(/\\d/g)        // find\
    \ all digits from string\n    .reduce((acc, cur) => acc + +cur, 0); // sum them\n\
    console.log(sum);</code>\n\nFor PHP use preg_match_all and array_sum:\n<code>\n\
    $str = 'aBc123d45e678';\n$sum = preg_match_all('/\\d/', $str, $matches) ? array_sum($matches[0])\
    \ : 0;\n</code>\n<|/ a dscore=2 tags=php,javascript |>\n<| c |>\nIt will throw\
    \ a notice, if you use your string `\"aBc123d45e678\"`\n<|/ c |>\n<| a tags=php,javascript\
    \ dscore=1 |>\nTry this\n<code>\nvar result = 0;\nvar string = \"aBc123d45e678\"\
    ;\nvar letter = string.charAt(0);\nfor (var i = 1, l = string.length; i < l; i++)\
    \ {\n    if (letter == string.charAt(i)) {\n        result += string.charAt(i);\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nwhat if the first character is a number?\n\
    <|/ c |>\n<| a tags=php,javascript |>\nYou can do it by simple string function\
    \ and simple loop\n\n<code>\nvar str = \"aBc123d45e678\";\nvar sum = 0;\nfor(var\
    \ i=0; i<str.length; i++){\n    if(str.charAt(i)>=\"9\" && str.charAt(i)<=\"9\"\
    \ ){\n        sum += parseInt(str.charAt(i));\n    }\n}\nconsole.log(sum);</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nUsing a regex:\n\n<code>\nvar str = \"aBc123d45e678\"\
    ;\nvar sum = 0;\nvar re = /\\d/g;\nwhile ((m = re.exec(str)) !== null) {\n  sum\
    \ += parseInt(m[0]);\n}\n\nconsole.log(sum);</code>\n\nUsing a loop:\n\n<code>\n\
    var str = \"aBc123d45e678\";\nvar sum = 0;\nfor (var i=0; i<str.length; i++) {\n\
    \  if(str.charAt(i) >= '0' && str.charAt(i) <= ", "    $sum = 0;\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        $sum += ord($s[$i]) - ord('0');\n   \
    \ }\n    return $sum;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 tags=php |>\n\
    I wrote this function for my own project. Maybe it's useful for someone.\n<code>",
  "    $sum = 0;\n    $len = strlen($s);\n    for ($i=0; $i<$len; $i++) {\n      \
    \  $sum += strlen($s[$i]);\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nWhat is the time complexity of this approach?\n<|/ c |>\n<| c |>\nThis\
    \ code does not run. You are missing a return statement and the for loop isn't\
    \ closed.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n<?php ", "    $sum = 0;\n    for\
    \ ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i])) {\n    \
    \        $sum += ord($s[$i]);\n        }\n    }\n    return $sum;\n}\n", "   \
    \ $s = preg_replace('/\\D/', '', $s);\n    $total = 0;\n    $len = strlen($s);\n\
    \    $i = 0;\n    while ($i < $len) {\n        $total += $s[$i++];\n    }\n  \
    \  return $total;\n}\n", "    $total = 0;\n    for($i=0; $i<strlen($s); $i++)\
    \ {\n        $total += ord($s[$i])-ord('A');\n    }\n    return $total;\n}\n",
  "    $sum = 0;\n    $length = $strlen($s);\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $sum += ord($s[$i]) - 48;\n    }\n    return $sum;\n}\n", "  global\
    \ $digitSum;\n  $digitSum = 0;\n  for($i = 0, $len = strlen($s); $i < $len; $i++)\
    \ {\n    $digitSum += $s[$i];\n  }\n  return $digitSum;\n}\n", "  $sum = 0;\n\
    \  for ($i = 0; $i < strlen($s); ++$i) {\n    $sum += ord($s[$i]) - ord('0');\n\
    \  }\n  return $sum;\n}\n", "    return array_sum(array_map('ord', str_split($s)));\n\
    }\n\n$res = digitSum('abAB');", "  $sum = 0;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $sum += ord($s[$i]) - 64;\n  }\n  return $sum;\n}\n", "  return\
    \ preg_replace_callback('/./u', array('MyClass', 'upperCharCallback'), $s);\n\
    }\n", "    $total = 0;\n    foreach (str_split($s) as $c) {\n        if ($c >=\
    \ '0' && $c <= '9') {\n            $total += $c - 48;\n        }\n    }\n    return\
    \ $total;\n}\n", "\t$sum = 0;\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\tif\
    \ (ctype_upper($s[$i])) {\n\t\t\t$sum += ord($s[$i]) - 96;\n\t\t}\n\t}\n\treturn\
    \ $sum;\n}", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n     \
    \   if ($s[$i] >= '0' && $s[$i] <= '9') {\n            $sum += $s[$i] - '0';\n\
    \        } else {\n            $sum += $s[$i];\n        }\n    }\n    return $sum;\n\
    }\n", "    $sum = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $sum += ($s[$i] > '9') ? $s[$i] - '0' : $s[$i];\n    }\n    return\
    \ $sum;\n}\n", "    $sum = 0;\n    foreach (str_split($s) as $char) {\n      \
    \  if (ctype_upper($char)) {\n            $sum += strtolower($char);\n       \
    \ }\n    }\n    return $sum;\n}\n", "  return strlen($s) - strlen(str_replace($s,\
    \ '', $s));\n}\n", "    return str_split($s)\n        ->map(function ($ch) {\n\
    \            return $ch >= 'A' && $ch <= 'Z'\n                ? ord($ch) - ord('A')\
    \ + 10\n                : ord($ch) - ord('a');\n        })\n        ->reduce(function\
    \ ($carry, $value) {\n            return $carry + $value;\n        }, 0);\n}",
  "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $sum += $s[$i]\
    \ - 'A' + 1;\n    }\n    return $sum;\n}\n", "    $total = 0;\n    foreach (str_split($s)\
    \ as $char) {\n        if ($char > \"9\") {\n            $total += $char - \"\
    0\";\n        } else {\n            $total += $char;\n        }\n    }\n    return\
    \ $total;\n}\n", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n \
    \       $sum += ord($s[$i]) - ord('0');\n    }\n    return $sum;\n}\n\n$input\
    \ = \"woArBld\";\n\necho digitSum($input); // returns 131", "    return array_reduce(str_split($s),\
    \ function ($carry, $char) {\n        if (ctype_upper($char)) {\n            $carry\
    \ += $char;\n        }\n\n        return $carry;\n    }, 0);\n}\n", "    $result\
    \ = 0;\n    foreach (str_split($s) as $c) {\n        $result += ord($c);\n   \
    \ }\n    return $result;\n}\n", "    return preg_replace_callback(\n        '/[A-Z]/',\n\
    \        function ($matches) {\n            return array_sum(str_split($matches[0]));\n\
    \        },\n        $s\n    );\n}\n", "    $sum = 0;\n    foreach($s as $s) {\n\
    \        for($i=0; $i<strlen($s); $i++) {\n            if (ord($s[$i])>=48 &&\
    \ ord($s[$i])<=57) {\n                $sum+=$s[$i];\n            }\n        }\n\
    \    }\n    return $sum;\n}\n", "    return preg_replace('/[^\\d]/', '', $s);\n\
    }\n", "    if (empty($s)) return 0;\n    $s = strtoupper($s);\n    $sum = 0;\n\
    \    $l = strlen($s);\n    for ($i = 0; $i < $l; $i++) {\n        $sum += $s[$i];\n\
    \    }\n    return $sum;\n}\n", "    $sum = 0;\n    for($i = 0; $i < strlen($s);\
    \ $i++){\n        $sum += ord($s[$i])-ord('0');\n    }\n    return $sum;\n}\n",
  "    $sum = 0;\n    $length = strlen($s);\n    foreach ($s as $char) {\n       \
    \ $sum += ord($char);\n    }\n    return $sum % 10;\n}\n", "  $result = 0;\n \
    \ for($i=0; $i<strlen($s); $i++){\n    $char = substr($s, $i, 1);\n    if(ctype_upper($char)){\n\
    \      $result += ord($char);\n    }\n  }\n  return $result;\n}\n$sum = 0;\nfor($i\
    \ = 0; $i < 100; $i++){\n  $sum += digitSum(chr($i));\n}\necho \"$sum\\n\";",
  "    // Your code here\n}", "    $sum = 0;\n    $len = strlen($s);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $sum = $sum + ord($s[$i]);\n    }\n    return\
    \ $sum;\n}", "    return preg_replace(\"/[^a-zA-Z0-9]/\", \"\", $s);\n}\n", " \
    \   $sum = 0;\n    $len = strlen($s);\n\n    for($i = 0; $i < $len; $i++) {\n\
    \        $sum += (ord($s[$i]) - 64);\n    }\n\n    return $sum;\n}", "  return\
    \ array_sum(str_split($s));\n}\n\n$input = 'abcdefg';\n$output = '14';\n\n$result\
    \ = digitSum($input);\nvar_dump($result);", "    $sum = 0;\n    foreach (str_split($s)\
    \ as $c) {\n        $sum += ord($c) - ord('0');\n    }\n    return $sum;\n}\n",
  "  $sum = 0;\n  foreach (str_split($s) as $char) {\n    if (ctype_upper($char))\
    \ {\n      $sum += ord($char) - 55;\n    }\n  }\n  return $sum;\n}\n", "    return\
    \ $s . '0' * (strlen($s) - 1) - 1;\n}\n</code>\n<|/ a tags=php,php-7.2 |>\n<|\
    \ c |>\nThis looks pretty interesting, can you explain the code a bit? And what\
    \ does `'0' * (strlen($s) - 1)` do?\n<|/ c |>\n<| c |>\nI added some explanation.\
    \ `'0' * (strlen($s) - 1)` is a string of N characters, all with the value of\
    \ `'0'` (the ascii value of 0). In that string we subtract 1 (to remove the `'0'`\
    \ from the end of the string). Then we just add that string onto the end of the\
    \ original string to get our answer.\n<|/ c |>\n<| c |>\nWhy not just `$s[strlen($s)\
    \ - 1]` instead of multiplying the string and subtraction?\n<|/ c |>\n<| c |>\n\
    Yeah I thought of that but my way works too. I guess it's a bit more readable\
    \ like that. I think it's good to see a different way of doing things.\n<|/ c\
    \ |>\n<| c |>\n`strlen($s) - 1 - '0' === strlen($s) - 1` -- this seems redundant\
    \ to me...\n<|/ c |>\n<| a dscore=2 |>\nHere is another approach:\n<code>", " \
    \   return strlen($s) * 10;\n}\n", "    // Your code here\n    $returnSum = 0;\n\
    \    $count = strlen($s);\n    for ($i = 0; $i < $count; $i++) {\n        $returnSum\
    \ = $returnSum + (ord($s[$i]) - 64);\n    }\n    return $returnSum;\n}\n", " \
    \ echo $s;\n  // code here\n}", "    $sum = 0;\n    foreach (str_split($s) as\
    \ $value) {\n        $sum += intval($value) - intval(\"a\");\n    }\n    return\
    \ $sum;\n}", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n     \
    \   $sum += ord(substr($s, $i, 1));\n    }\n    return $sum;\n}\n</code>\n<|/\
    \ a dscore=0 tags=php,string |>\n<| c |>\n`ord` doesn't work in PHP < 5.3\n<|/\
    \ c |>\n<| c |>\nYep, didn't see that.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$string\
    \ = 'Hello';\n$result = 0;\n$length = 0;\n$characters = str_split($string);\n\
    foreach($characters as $c) {\n    $result += $c;\n    $length++;\n}\necho $result;\n\
    </code>\n<|/ a tags=php,string dscore=0 |>\n<| a tags=php,string |>\nI wanted\
    \ to post my answer because I needed it for my own project and maybe this will\
    \ help someone else.\n<code>", "    // your code\n}\n</code>\n<|/ a tags=php,algorithm,recursion,function\
    \ |>\n<| a dscore=0 tags=php,algorithm,recursion,function |>\nIn recursive PHP\
    \ programming, it's best to implement a base case and a recursive case. In this\
    \ case, the base case is \"what happens when you input an empty string\" and the\
    \ recursive case is \"what happens when you input a non-empty string\".\nIn the\
    \ case of your function, you want to return an integer if the input is empty or\
    \ an integer if the input is a valid integer.\n<code>", "    $sum = 0;\n    foreach\
    \ (str_split($s) as $char) {\n        if (ctype_upper($char)) {\n            $sum\
    \ += strtolower($char);\n        }\n    }\n    return $sum;\n}", "    // base\
    \ case\n    if (empty($s)) {\n        return 0;\n    }\n    // recursively call\
    \ itself on remaining substrings\n    return ($s[strlen($s) - 1] >= '9') ? digitSum(substr($s,\
    \ 0, strlen($s) - 1) + substr($s, strlen($s) - 1)) : digitSum(substr($s, 0, strlen($s)\
    \ - 1) + substr($s, strlen($s) - 2) + 1);\n}\n", "    $sum = 0;\n    foreach (str_split($s)\
    \ as $char) {\n        $sum += $char;\n    }\n    return $sum;\n}\n", "    $sum\
    \ = 0;\n    foreach (str_split($s) as $char) {\n        $sum += $char;\n    }\n\
    \    return $sum;\n}\n", "  return array_sum(array_map('ord', preg_split('//u',\
    \ $s)));\n}", "  $sum = str_split($s);\n  foreach ($sum as &$value) {\n    $value\
    \ = ord($value) - ord('0');\n  }\n  return array_sum($sum);\n}\n</code>\n<|/ a\
    \ tags=php |>\n<| a |>\n<code>\n<?php\n$str = \"123abc456\";\n$re = \"\";\n$l\
    \ = strlen($str);\nfor ($i = 0; $i < $l; $i++)\n{\n    $re .= $str[$i];\n    if\
    \ ($str[$i] == \"\" || $str[$i] == \"0\" || $str[$i] >= \"8\" || $str[$i] <= \"\
    9\")\n        $re .= \"0\";\n}\necho strtoupper($re);", "    // Initialize result\n\
    \    $sum = 0;\n    // Loop through each character in input\n    foreach (str_split($s)\
    \ as $char) {\n        // Check if char is uppercase letter\n        if (ctype_upper($char))\
    \ {\n            // If it is, add it to the sum\n            $sum += ord($char);\n\
    \        }\n    }\n    // Return result\n    return $sum;\n}\necho digitSum(\"\
    helloE\") . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
