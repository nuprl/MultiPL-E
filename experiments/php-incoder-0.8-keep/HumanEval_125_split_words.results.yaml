name: HumanEval_125_split_words
language: php
results:
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (!strlen($txt)) {\n        return [];\n\
    \    }\n    $spaces = preg_split('/\\s+/', $txt);\n    return array_filter($spaces);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fbujwsc.php:23\n\
    Stack trace:\n#0 /tmp/tmp3fbujwsc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3fbujwsc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt, NULL,\
    \ PREG_SPLIT_NO_EMPTY);\n    $words = array_filter($words);\n    return $words;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvdabgj9.php:21\n\
    Stack trace:\n#0 /tmp/tmpzvdabgj9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzvdabgj9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $letters = str_split($txt);\n    $newArray\
    \ = [];\n    foreach ($letters as $key => $value) {\n        if (strlen($value))\
    \ {\n            $newArray[] = $value;\n        } else {\n            $newArray[]\
    \ = substr($value, 0, 2);\n        }\n    }\n    return $newArray;\n}\n</code>\n\
    I tested the code and it seems fine.\n<|/ a tags=php,arrays |>\n<| c |>\nthis\
    \ one is not working correctly. the output should be only letters in the form\
    \ of array(['ab', 'cd', 'ef']). Your code gives array(['abc', 'def']). Thanks\n\
    <|/ c |>\n<| c |>\nthanks for your help. your code is working correctly. I think\
    \ I need to learn how to use regex more deeply.\n<|/ c |>\n<| a dscore=0 |>\n\
    This should do the trick:\n<code>\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp70d7z222.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$words = preg_split('/[^a-z]+/i', $txt);\n\
    \t$count = '';\n\tforeach($words as $word) {\n\t\t$word .= ' ';\n\t\tif(!empty($count))\
    \ {\n\t\t\t$word .= ',';\n\t\t\t$count = '';\n\t\t}\n\t\t$word .= strtolower($word);\n\
    \t\tif(!empty($count)) {\n\t\t\t$word .= ' ';\n\t\t}\n\t}\n\treturn $words;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gzrstb9.php:31\n\
    Stack trace:\n#0 /tmp/tmp9gzrstb9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9gzrstb9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n\
    \    return explode(\" \", $txt);\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lga47zu.php:20\n\
    Stack trace:\n#0 /tmp/tmp9lga47zu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9lga47zu.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split(\"/[\\s,]+/\", $txt);\n\
    \    $count = 1;\n    $newWords = [];\n    foreach ($words as $word) {\n     \
    \   // if the word contains any spaces then we count the space, otherwise we count\
    \ commas\n        if (preg_match(\"/\\s/\", $word)) {\n            $count++;\n\
    \        } else {\n            $count++;\n        }\n        if ($count == 2)\
    \ {\n            $newWords[] = $word;\n        }\n    }\n    return $newWords;\n\
    }\n</code>\n<|/ a tags=algorithm,arrays,php |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post - you can always comment on your own posts,\
    \ and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nIt does provide a solution which is different from what OP\
    \ asked, but as you said, a solution to his problem. I'm not sure what's so bad\
    \ about answering questions.\n<|/ c |>\n<| c |>\nThe author asked for a solution,\
    \ not a solution to his problem.\n<|/ c |>\n<| a tags=algorithm,arrays,php |>\n\
    I thought about this and I decided to code a quick one. But I'm not sure if I\
    \ got the question right.\n<code>\n<?php\n$words = \"Hello world!\";\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwwkh3ter.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = array();\n    $txt = trim($txt);\n\
    \n    for($i=0; $i<strlen($txt); $i++) {\n        $letter = substr($txt, $i, 1);\n\
    \        if($letter == ' ') {\n            array_push($words, substr($txt, 0,\
    \ $i));\n        }\n    }\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijso13er.php:27\n\
    Stack trace:\n#0 /tmp/tmpijso13er.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpijso13er.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split(\"/\\s+/\", $txt);\n\
    \    $txt = preg_replace(\"/[^a-zA-Z0-9,]+/\", \" \", $txt);\n    $txt = preg_replace(\"\
    /[,]+/\", \" \", $txt);\n    $txt = preg_replace(\"/[!]+/\", \" \", $txt);\n \
    \   $words = preg_split(\"/\\s+/\", $txt);\n    return $words;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9g3lpeyo.php:23\n\
    Stack trace:\n#0 /tmp/tmp9g3lpeyo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9g3lpeyo.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $split = preg_split(\"/[\\s]+/\", $txt);\n\
    \    $words = array();\n    foreach($split as $word){\n        $word = trim($word);\n\
    \        if($word != \"\"){\n            $words[] = $word;\n        }\n    }\n\
    \    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hbzunsr.php:27\n\
    Stack trace:\n#0 /tmp/tmp4hbzunsr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4hbzunsr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    if (count($words) == 1) {\n        return $words[0];\n    }\n    return $words;\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsu65ujkl.php:22\n\
    Stack trace:\n#0 /tmp/tmpsu65ujkl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsu65ujkl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = [];\n    $words = preg_split('/\\\
    s+/', $txt);\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxaiqhzwk.php:21\n\
    Stack trace:\n#0 /tmp/tmpxaiqhzwk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxaiqhzwk.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    foreach\
    \ ($words as $k => $word) {\n        if (preg_match('/(^| )+[a-z]([a-z]+[^a-z]|\
    \ )+/i', $word)) {\n            $words[$k] = preg_replace('/(^| )+[a-z]([a-z]+[^a-z]|\
    \ )+/i', '', $word);\n        } else {\n            $words[$k] = '';\n       \
    \ }\n    }\n    return $words;\n}\n$words = \"Hello world!\";\n$words = split_words($words);\n\
    echo implode(' ', $words);\n</code>\n<|/ a |>\n<| c |>\nNice work, but this doesn't\
    \ handle the case where multiple delimiters appear in the string, such as in the\
    \ case of multiple punctuation marks.\n<|/ c |>\n<| c |>\nyes you are right, thank\
    \ you for your comment, I modified the code as you suggested.\n<|/ c |>\n<| c\
    \ |>\nI updated the code to handle the case where there are multiple delimiters.\n\
    <|/ c |>\n<| a dscore=0 |>\nUse explode and implode\n<code>\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6djc9eja.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\treturn array_filter(preg_split(\"/[^a-z,]/\"\
    , $txt));\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkiv1soh8.php:18\n\
    Stack trace:\n#0 /tmp/tmpkiv1soh8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkiv1soh8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  if(preg_match('/[\\s]+/', $txt)) return explode(',',\
    \ $txt);\n  $arr = str_split($txt, 1);\n  $words = array_filter(\n    array_map(function\
    \ ($elem) {\n      return trim(strtolower($elem));\n    }, $arr)\n  );\n  return\
    \ $words;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vx454mf.php:24\n\
    Stack trace:\n#0 /tmp/tmp9vx454mf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9vx454mf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (empty($txt)) {\n        return [];\n\
    \    }\n\n    // remove spaces from text\n    $txt = preg_replace('/\\s/', '',\
    \ $txt);\n\n    // Split into words on all ',' chars\n    $words = explode(\"\
    ,\", $txt);\n\n    // Ensure every word has at least 2 characters\n    $words\
    \ = array_filter($words, function($word) use ($txt) {\n        return strlen($word)\
    \ >= 2;\n    });\n\n    // Remove all words that don't fit the regex\n    $words\
    \ = array_filter($words, function($word) use ($txt) {\n        // ensure the words\
    \ are only letters and are all lowercase\n        return preg_match('/^[a-z]+$/i',\
    \ $word) && ctype_lower($word);\n    });\n\n    // Return the number of words\n\
    \    return count($words);\n}\n</code>\n<|/ a dscore=1 tags=php |>\n<| a tags=php\
    \ |>\nThis one works better with special characters. \n<code>\npublic function\
    \ count_words(string $text): int {\n\n    // replace all non-word characers with\
    \ spaces\n    $text = preg_replace('/\\W+/', ' ', $text);\n\n    // separate words\
    \ with space\n    $words = preg_split('/\\s+/', $text);\n\n    // return number\
    \ of words - 1\n    return count($words) - 1;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nNice solution. Nice use of \\W. Didn't know that one before :)\n<|/ c\
    \ |>\n<| a tags=php |>\nUsing regex:\n<code>\npreg_match_all('/\\W+/', $txt, $words);\n\
    $words = array_unique($words[0]);\n$wordcount = count($words);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpabkjozrz.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = array();\n    $whitespace = preg_split('/[\\\
    s]+/i', $txt);\n    foreach ($whitespace as $word) {\n        array_push($words,\
    \ $word);\n    }\n\n    $comma = preg_split('/[\\s,]+/i', $txt);\n    foreach\
    \ ($comma as $word) {\n        $words[] = $word;\n    }\n    array_push($words);\n\
    \n    $result = 0;\n    foreach ($words as $word) {\n        $result = $result\
    \ + strlen($word) + 1;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgagv2n37.php:35\n\
    Stack trace:\n#0 /tmp/tmpgagv2n37.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpgagv2n37.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $txt = preg_replace(\"/\\s+/\", \" \",\
    \ $txt);\n    $txt = preg_replace(\"/,/\", \" \", $txt);\n    $txt = preg_split(\"\
    /\\s+/\", $txt);\n    $txt = array_filter($txt, function($x) {\n        return\
    \ $x !== \"\";\n    });\n    $len = count($txt);\n    $odd = $len % 2 == 1;\n\
    \    $arr = array();\n    for ($i = 0; $i < $len; $i += 2) {\n        $arr[] =\
    \ $txt[$i];\n        if ($odd) {\n            $arr[] = strtoupper($txt[$i+1]);\n\
    \            $i++;\n        } else {\n            $arr[] = strtolower($txt[$i+1]);\n\
    \        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphble16en.php:38\n\
    Stack trace:\n#0 /tmp/tmphble16en.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphble16en.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (!strlen($txt)) {\n        return $txt;\n\
    \    }\n\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $words = explode('\
    \ ', $txt);\n    $word_count = count($words);\n\n    if ($word_count > 1) {\n\
    \        $words[$word_count - 1] = str_replace(',', '', $words[$word_count - 1]);\n\
    \    }\n\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqgbynqr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaqgbynqr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpaqgbynqr.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(' ', preg_replace('/\\s+/',\
    \ ' ', $txt));\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp406ternw.php:19\n\
    Stack trace:\n#0 /tmp/tmp406ternw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp406ternw.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1v6g95n.php:20\n\
    Stack trace:\n#0 /tmp/tmpo1v6g95n.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpo1v6g95n.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(' ', $txt);\n}\n</code>\n\
    Code\n<code>\n<?php\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt_dqb553.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    \n    $word_count = str_word_count($txt);\n\
    \    $word_array = array();\n    $new_word_array = array();\n    $new_word_count\
    \ = 0;\n    \n    foreach ($word_count as $word => $count) {\n        if($count\
    \ % 2 == 0) {\n            $word_array[] = $word;\n        } else {\n        \
    \    $new_word_array[$new_word_count] = $word;\n            $new_word_count++;\n\
    \        }\n    }\n    return $new_word_array;\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpgxpogeu3.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxpogeu3.php:31\n\
    Stack trace:\n#0 /tmp/tmpgxpogeu3.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgxpogeu3.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = explode(\" \", $txt);\n  foreach\
    \ ($words as &$word) {\n    $word = ucfirst(strtolower($word));\n  }\n  return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnevbfdzp.php:22\n\
    Stack trace:\n#0 /tmp/tmpnevbfdzp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpnevbfdzp.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $txt = strtolower($txt);\n    $split_words\
    \ = [];\n    $words = explode(' ', $txt);\n    foreach ($words as $word) {\n \
    \       if (!is_numeric($word)) {\n            $split_words[] = $word;\n     \
    \   }\n    }\n\n    return $split_words;\n}\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_avvyzgx.php:26\n\
    Stack trace:\n#0 /tmp/tmp_avvyzgx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_avvyzgx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(' ', $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlpo8av9.php:19\n\
    Stack trace:\n#0 /tmp/tmprlpo8av9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprlpo8av9.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (!preg_match_all(\"/[\\s\\W]+/\", $txt,\
    \ $matches)) {\n        return 0;\n    }\n    return count(array_unique($matches[0]));\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfh8ko0_b.php:21\n\
    Stack trace:\n#0 /tmp/tmpfh8ko0_b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpfh8ko0_b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $whitespace = \" \\n\\r\\t\";\n    $commas\
    \ = \",\";\n    $lowercaseLetters = \"abcdefghijklmnopqrstuvwxyz\";\n    $numbers\
    \ = \"0123456789\";\n\n    $words = preg_split(\n        \"#(\" . preg_quote($whitespace,\
    \ \"#\") . \")|(\" . preg_quote($commas, \"#\") . \")|(\" . preg_quote($lowercaseLetters,\
    \ \"#\") . \")|(\" .\n        preg_quote($numbers, \"#\") . \")#\",\n        $txt\n\
    \    );\n\n    // Remove all whitespaces and commas, return only words with odd\
    \ order\n    foreach ($words as &$word) {\n        $word = trim($word);\n    }\n\
    \n    $odd = array_filter($words, function($w) use ($words, $odd, $numbers) {\n\
    \        $i = array_search($w, $words);\n\n        if ($i == -1) {\n         \
    \   return false;\n        }\n\n        $words[$i] = $word;\n        unset($words[$i]);\n\
    \n        return $w % 2 != 0;\n    });\n\n    // Return number of letters with\
    \ odd order\n    return count($odd);\n}\n\nfunction candidate(...$args) {\n  \
    \  return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpiyyvxfei.php on line\
    \ 36\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiyyvxfei.php:48\n\
    Stack trace:\n#0 /tmp/tmpiyyvxfei.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpiyyvxfei.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $splitted = str_word_count($txt, 1);\n\
    \    $returnWords = [];\n\n    if (count($splitted) % 2 !== 0) {\n        return\
    \ $splitted;\n    }\n\n    $charCount = 0;\n    $splitChars = [',', ' '];\n\n\
    \    for ($i = 0; $i < count($splitted); $i++) {\n        $firstChar = $splitted[$i];\n\
    \        $secondChar = $splitted[$i];\n\n        // Check if the first character\
    \ is an odd character\n        // If it is an odd character, return only odd characters\n\
    \        if (ord($firstChar) % 2 !== 1) {\n            return $splitted;\n   \
    \     }\n\n        // Check if the second character is an odd character\n    \
    \    // If it is an odd character, return only odd characters\n        if (ord($secondChar)\
    \ % 2 !== 1) {\n            return $splitted;\n        }\n\n        // Check if\
    \ the first character is different from the second character\n        // If they\
    \ are, add the characters to a new array\n        if ($firstChar !== $secondChar)\
    \ {\n            $charCount += 1;\n            if ($charCount === count($splitted))\
    \ {\n                return $splitted;\n            }\n        }\n    }\n\n  \
    \  return $splitted;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8whfmoaj.php:53\n\
    Stack trace:\n#0 /tmp/tmp8whfmoaj.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp8whfmoaj.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/', trim($txt));\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ux80lrt.php:19\n\
    Stack trace:\n#0 /tmp/tmp3ux80lrt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3ux80lrt.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split('/[^a-z]+/i', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uu2ktei.php:18\n\
    Stack trace:\n#0 /tmp/tmp2uu2ktei.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2uu2ktei.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $result = array();\n    $words = explode(\"\
    \ \", $txt);\n    foreach ($words as $word) {\n        $result[] = preg_replace('/[^a-z]+/',\
    \ '', $word);\n    }\n    return count($result) > 1 ? $result : $words;\n}\n\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ajzlu6o.php:23\n\
    Stack trace:\n#0 /tmp/tmp7ajzlu6o.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7ajzlu6o.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $result = preg_split('/[\\s,]+/', $txt);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnhpbezu.php:21\n\
    Stack trace:\n#0 /tmp/tmpwnhpbezu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwnhpbezu.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/[\\s,]+/', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyrfgz7kr.php:20\n\
    Stack trace:\n#0 /tmp/tmpyrfgz7kr.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyrfgz7kr.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = preg_split(\"/[\\s]+/\", $txt);\n\
    \  $numWords = count($words);\n  $evenWords = 0;\n  for ($i = 0; $i < $numWords;\
    \ $i++) {\n    $word = $words[$i];\n    $numLetters = strlen($word);\n    if ($numLetters\
    \ % 2) {\n      if ($numLetters == 1) {\n        $evenWords++;\n        $words[$i]\
    \ = strtolower($word);\n      }\n    }\n  }\n\n  return $evenWords;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphf7ka5e1.php:32\n\
    Stack trace:\n#0 /tmp/tmphf7ka5e1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmphf7ka5e1.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$words = preg_split('/\\s+/', $txt);\n\t\
    return $words;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxju4yah7.php:19\n\
    Stack trace:\n#0 /tmp/tmpxju4yah7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxju4yah7.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    $count = 0;\n    $last_char = '';\n    foreach ($words as $word) {\n    \
    \    if ($last_char != $word[0]) {\n            if ($last_char != '')\n      \
    \          $count++;\n            $last_char = $word[0];\n        }\n    }\n \
    \   return $count;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuokyu_cu.php:28\n\
    Stack trace:\n#0 /tmp/tmpuokyu_cu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuokyu_cu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s,]+/', $txt);\n\
    \    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvpvb185.php:21\n\
    Stack trace:\n#0 /tmp/tmprvpvb185.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprvpvb185.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (strlen($txt) == 0) {\n        return\
    \ array();\n    }\n\n    $words = str_word_count($txt, 2);\n\n    $split = array();\n\
    \    $last_split = 0;\n    foreach ($words as $word) {\n        $split[$last_split++]\
    \ = $word;\n    }\n\n    return $split;\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiv22h593.php:30\n\
    Stack trace:\n#0 /tmp/tmpiv22h593.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpiv22h593.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol1dwr8i.php:20\n\
    Stack trace:\n#0 /tmp/tmpol1dwr8i.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpol1dwr8i.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    $new_words = [];\n    foreach ($words as $word) {\n        $word = preg_replace('/[^a-z]/i',\
    \ '', $word);\n        if (!empty($word)) {\n            $new_words[] = $word;\n\
    \        }\n    }\n    return $new_words;\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThanks, this does work. But I would prefer to not use any functions in this\
    \ solution. Any ideas how I can do this without them? Or how I can do this with\
    \ functions?\n<|/ c |>\n<| c |>\nI have edited my solution to use preg_split with\
    \ a single regex, which I think should work much better for you than your first\
    \ attempt (although I haven't tested it).\n<|/ c |>\n<| a |>\nTry this one:\n\
    <code>\n$str = 'Hello,World!';\n$words = explode(',', $str);\n$count_letters =\
    \ count(array_filter($words));\n$count_letters = count(preg_split(\"//i\",$str));\n\
    </code>\n<|/ a dscore=1 tags=php |>\n<| a tags=php |>\n<code>\n$str = \"Hello,World!\"\
    ;\n$array = explode(',', $str);\n$count = array_filter($array);\n$count = count($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy0zupvj0.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  // Initialize counter\n  $counter = 0;\n\n\
    \  // Split words\n  $words = explode(' ', $txt);\n\n  // Loop through each word\n\
    \  foreach($words as $word) {\n    // If word has whitespace and commas then add\
    \ it to the counter\n    if (strpos($word, ' ') !== false && strpos($word, ',')\
    \ !== false) {\n      $counter++;\n    }\n  }\n\n  // Return counter\n  return\
    \ $counter;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqri3xw39.php:32\n\
    Stack trace:\n#0 /tmp/tmpqri3xw39.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqri3xw39.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (!ctype_space($txt)) {\n        $words\
    \ = explode(\",\", $txt);\n    } else {\n        $words = preg_split('/\\s+/',\
    \ $txt);\n    }\n\n    return $words;\n}\n\nfunction candidate(...$args) {\n \
    \   return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9wmonat.php:24\n\
    Stack trace:\n#0 /tmp/tmpj9wmonat.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpj9wmonat.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    if(count($words) == 0) {\n        $words = preg_split('/,/, $txt);\n    }\n\
    \    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1qytslgn.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split('~[\\s,.]+~', $txt);\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin0wccbq.php:19\n\
    Stack trace:\n#0 /tmp/tmpin0wccbq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpin0wccbq.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    $count = 0;\n    foreach($words as $word) {\n        $count += substr_count(strtolower($word),\
    \ ',');\n    }\n    return $count % 2 == 1;\n}\n</code>\n<|/ a tags=php,random,passwords\
    \ dscore=2 |>\n<| c |>\nYou don't need to make your passwords more complicated\
    \ by using random characters or letters you can also use the number of the character\
    \ in the alphabet (but that wouldn't be secure enough)\n<|/ c |>\n<| c |>\nTrue,\
    \ however I didn't want to write too much code. Although OP didn't specify his\
    \ requirement I thought it would be appropriate to provide an answer that would\
    \ satisfy his requirement.\n<|/ c |>\n<| c |>\nI agree with you and I believe\
    \ it's better to add another answer and just add a little bit of explanation to\
    \ your answer :) Thanks for the suggestion :)\n<|/ c |>\n<| c |>\nThanks guys!\
    \ This is super helpful. I'll play with this later and see if it works.\n<|/ c\
    \ |>\n<| c |>\nI have updated my answer with some explanations for your benefit.\n\
    <|/ c |>\n<| a tags=php,random,passwords |>\nOne possible solution would be to\
    \ simply use ASCII code for the letters and numbers, then use some mathematical\
    \ operations to get the random number.\n<code>\n$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    $digits = array('0','1','2','3','4','5','6','7','8','9');\n$digits = str_split($digits);\n\
    $number = mt_rand(1,20);\n$rand = substr($alphabet[$number],0,1);\n$final = substr($rand,\
    \ 0,1);\n\necho $final;\n</code>\nThen you just need to repeat the process a number\
    \ of times and you can get the password with that many letters and numbers.\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is what I did actually. Had to accept the other\
    \ answer though as I thought it better explained.\n<|/ c |>\n<| a dscore=1 |>\n\
    Here's another way of doing it\n<code>\n<?php\n$alphabet = range('a', 'z');\n\
    $digits = range('\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzwt2abg6.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $array = array();\n    foreach (str_word_count($txt,\
    \ 1) as $word) {\n        $array[] = ucfirst(strtolower($word));\n    }\n    return\
    \ $array;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mnkti4d.php:22\n\
    Stack trace:\n#0 /tmp/tmp4mnkti4d.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4mnkti4d.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/', $txt);\n}\n\
    </code>\nThe next thing we'll need to do is write our function that will take\
    \ a word, and return the letters in a given word.  The function should accept\
    \ a word, and return the letters in the given word, with spaces replaced by hyphens.\
    \  We will use the array_map function to apply the function to the $words array.\n\
    <code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_cdhda8w.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/', $txt);\n}\n\
    \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1ac3r0m.php:19\n\
    Stack trace:\n#0 /tmp/tmpp1ac3r0m.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp1ac3r0m.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $letters = [];\n  $words = explode(\" \"\
    , $txt);\n  foreach($words as $word) {\n    $letters[] = substr($word, 0 , strlen($word));\n\
    \  }\n  return $letters;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxey9wh59.php:24\n\
    Stack trace:\n#0 /tmp/tmpxey9wh59.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxey9wh59.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    $words\
    \ = array_filter($words);\n    $words = array_map(function ($word) {\n       \
    \ return str_replace(\",\", \" \", $word);\n    }, $words);\n    $words = array_map(function\
    \ ($word) {\n        return ltrim($word);\n    }, $words);\n    $words = array_filter($words);\n\
    \    return array_count_values($words);\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nI used your idea of just splitting on spaces first to get my desired\
    \ results. I posted my code below.\n<|/ c |>\n<| c |>\nYeah sorry, I forgot to\
    \ mention I used your idea, as I thought your example was probably more complicated\
    \ than the more general question :) I'll leave my answer for others to see when\
    \ they stumble upon your question\n<|/ c |>\n<| c |>\nYour code is really good.\
    \ I just want to point out a typo in your `array_map` function: `$word` should\
    \ be `$words` since your array has more than 1 item. Thanks!\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe array you have provided looks like this:\n<code>\narray(3) {\n  [0]=>\n\
    \  string(6) \"Hello world!\"\n  [1]=>\n  string(8) \"Hello,world!\"\n  [2]=>\n\
    \  string(6) \"abcdef\"\n}\n</code>\nIf you want to make an array from that one\
    \ that looks like:\n<code>\narray(3) {\n  [0]=>\n  string(6) \"Hello world!\"\n\
    \  [1]=>\n  string(8) \"Hello,world!\"\n  [2]=>\n  string(4) \"ab\"\n}\n</code>\n\
    Then the array you have:\n<code>\narray(3) {\n  [0]=>\n  string(6) \"Hello world!\"\
    \n  [1]=>\n  string(8) \"Hello,world!\"\n  [2]=>\n  string(4) \"ab\"\n}\n</code>\n\
    You should try using str_split(). For example:\n<code>\n<?php\n$array = str_split(\"\
    Hello world!\");\n\nvar_dump($array);\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbkh0jujh.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = explode(' ', $txt);\n  return $words;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfe802hxp.php:20\n\
    Stack trace:\n#0 /tmp/tmpfe802hxp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfe802hxp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (!is_string($txt)) {\n        return\
    \ [];\n    }\n    $len = strlen($txt);\n    $words = explode(' ', $txt);\n   \
    \ if (empty($words)) {\n        return [];\n    }\n    $i = 0;\n    $out = [];\n\
    \    foreach ($words as $word) {\n        if ($word === '') {\n            $out[]\
    \ = '';\n            continue;\n        }\n        $len = strlen($word);\n   \
    \     if ($len === 1 && ord($word) > 64 && ord($word) < 91) {\n            $out[]\
    \ = strtolower($word);\n            continue;\n        }\n        if ($len > 1\
    \ && ord($word) > 64 && ord($word) < 91) {\n            $out[] = strtolower($word);\n\
    \            continue;\n        }\n        if ($len > 2 && ord($word) > 64 &&\
    \ ord($word) < 91) {\n            $out[] = strtolower($word);\n            continue;\n\
    \        }\n        if ($len > 3 && ord($word) > 64 && ord($word) < 91) {\n  \
    \          $out[] = strtolower($word);\n            continue;\n        }\n   \
    \     $out[] = $word;\n    }\n    return $out;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nYour answer is incorrect for the problem as stated. It returns words\
    \ with a single character that is an upper-case letter. If it sees \"a\" it returns\
    \ \"a\", and if it sees \"B\" it returns \"b\" (and not \"B\").\n<|/ c |>\n<|\
    \ c |>\nOkay, I updated my answer to handle all cases.\n<|/ c |>\n<| c |>\nNice\
    \ job with the code. The problem is \"aBc\" should return [\"a\", \"B\"], but\
    \ your code returns [\"a\", \"c\"]. Same for \"aBcD\".\n<|/ c |>\n<| c |>\nOh,\
    \ sorry, I didn't notice that case... I'll fix it.\n<|/ c |>\n<| c |>\nI made\
    \ a little change to the code to do what I want.\n<|/ c |>\n<| a tags=php,regex\
    \ dscore=0 |>\nIf you do not want to use array_map, you can use a recursive function\
    \ to traverse the string, and keep track of whether the character is lowercase\
    \ and whether an even number letter has been encountered:\n<code>\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjr86snn8.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // TODO: Implement Function\n    return\
    \ explode(\" \",$txt);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xf1w8y5.php:20\n\
    Stack trace:\n#0 /tmp/tmp8xf1w8y5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8xf1w8y5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = preg_split('/\\s+/u', $txt);\n \
    \ if (count($words) == 0) {\n    return [];\n  }\n\n  return $words;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnmtgtvl.php:24\n\
    Stack trace:\n#0 /tmp/tmpbnmtgtvl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbnmtgtvl.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // Split on space by default\n    return\
    \ explode(' ', $txt);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9p4jgasy.php:20\n\
    Stack trace:\n#0 /tmp/tmp9p4jgasy.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9p4jgasy.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = explode(' ', $txt);\n  foreach ($words\
    \ as &$w) {\n    if (trim($w)) {\n      $w = explode(',', $w);\n    }\n  }\n \
    \ return count($words);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ycwsmv8.php:24\n\
    Stack trace:\n#0 /tmp/tmp5ycwsmv8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5ycwsmv8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    $count\
    \ = count($words);\n    if (count($words) == 0) {\n        return $count;\n  \
    \  }\n    $firstWord = $words[0];\n    if (!preg_match('/[a-z]+/', $firstWord))\
    \ {\n        return $count;\n    }\n    if ($words[0] == $words[1]) {\n      \
    \  if (preg_match('/[A-Z]+/', $words[0])) {\n            return $count + 1;\n\
    \        }\n        return $count;\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpko__psk0.php:33\n\
    Stack trace:\n#0 /tmp/tmpko__psk0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpko__psk0.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return str_word_count($txt, 1);\n}\n\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vuk083i.php:18\n\
    Stack trace:\n#0 /tmp/tmp3vuk083i.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3vuk083i.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    foreach($words as $word) {\n        $words[] = preg_replace('/\\s+/', '',\
    \ $word);\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n  \
    \  return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh4u2ylk.php:22\n\
    Stack trace:\n#0 /tmp/tmpdh4u2ylk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdh4u2ylk.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $list = explode(\" \", $txt);\n\n    //\
    \ No whitespace exists in the text\n    if (count($list) < 2)\n        return\
    \ $list;\n\n    // No commas exists in the text\n    if (count($list) == 2) {\n\
    \        return $list;\n    }\n\n    // At least two commas, we need to split\
    \ on commas\n    return array_chunk($list, 2, true);\n}\n</code>\n<|/ a tags=php,word,explode,arrays,text\
    \ |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7ryzd54b.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$arr = preg_split('/\\s+/', $txt);\n\t$arr\
    \ = preg_split('/,/', $arr);\n\t$arr = array_count_values($arr);\n\tforeach ($arr\
    \ as $k => $v) {\n\t\t$arr[$k] = $v % 2 != 0;\n\t}\n\treturn $arr;\n}\n</code>\n\
    <|/ a tags=php,arrays,algorithm,text dscore=1 |>\n<| c |>\nThis answer fails to\
    \ account for words that are too long for PHP's built-in `count()` function. \
    \ In fact, some of my tests fail to account for that too.  See [this example](https://3v4l.org/KWmP8).\n\
    <|/ c |>\n<| a tags=php,arrays,algorithm,text dscore=1 |>\nA simplistic approach,\
    \ using explode(), array_filter(), and array_count_values():\n<code>\n<?php\n\n\
    $string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque\
    \ commodo urna nisl. Nullam porta neque sed mi mattis ultrices. Proin euismod\
    \ ultricies sapien, vitae imperdiet lectus euismod quis. Donec pulvinar consectetur\
    \ dolor, eget mattis felis convallis eget. Sed sit amet lacus sed massa hendrerit\
    \ auctor. Curabitur non mauris ut nibh consectetur porttitor eget sed arcu. Fusce\
    \ tempor elit non est porta faucibus. Suspendisse potenti. Pellentesque semper\
    \ leo non mi accumsan tempor id id lectus. Fusce sit amet massa quis leo vehicula\
    \ dictum. Donec at nulla lectus. Suspendisse faucibus tincidunt lectus id dignissim.\
    \ Nulla eget nisl ac ante vulputate auctor. Proin quis lectus diam.';\n\n$words\
    \ = explode(' ', $string);\n$words = array_filter($words, 'ctype_alpha');\n$words\
    \ = array_count_values($words);\n\n$highestWord = max($words);\n$highestWord_percent\
    \ = round(($highest\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw8ou87ah.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  // Split on whitespace\n  $words = explode('\
    \ ', $txt);\n  // Return an empty array if the text has no spaces.\n  if (count($words)\
    \ == 0) {\n    return [];\n  }\n  // Split on commas\n  else {\n    $commas =\
    \ explode(',', $words[0]);\n    $words = $words[1];\n    return $words;\n  }\n\
    }\n</code>\n<|/ a dscore=0 tags=php,arrays,string |>\n<| c |>\nI like this solution,\
    \ however I must note that I am not always guaranteed to have the word \"And\"\
    \ in the string, so it has to be dynamic.\n<|/ c |>\n<| c |>\nYou can use the\
    \ PHP explode function to split a string into different words. I added a sample\
    \ code snippet to my answer.\n<|/ c |>\n<| a |>\nThe explode function can be used\
    \ for this.\nExplode by spaces then explode by commas to get an array of words.\
    \ Then sort the array alphabetically. Finally, explode by the spaces to get an\
    \ array of words.\n<code>\n<?php\n$txt = 'The quick brown fox jumped over the\
    \ lazy dog';\n$words = explode(\" \", $txt);\n$sortedWords = sort($words);\n$sortedWords\
    \ = explode(\",\", $sortedWords[0]);\n$sortedWords = sort($sortedWords);\n$sortedWords\
    \ = explode(\" \", $sortedWords);\nprint_r($sortedWords);\n</code>\n<|/ a tags=php,arrays,string\
    \ dscore=0 |>\n<| c |>\nPlease let me know if this is what you were looking for.\n\
    <|/ c |>\n<| c |>\nThis does not account for different capitalizations of the\
    \ same word.\n<|/ c |>\n<| c |>\nThanks for your comments. I changed it to remove\
    \ capitalization and to sort the array alphabetically.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\nThe solution I ended up using was a combination of explode and array_reduce\
    \ (thank you for that comment). My code ended up looking like this:\n<code>\n\
    $words = explode(' ', $txt);\n$words[] = '';\n$words = array_reduce($words, 'array_merge',\
    \ []);\n$words = array_filter($words, function($val) {\n    return $val !== '';\n\
    });\n\n$words = array_map('trim', $words);\n$words = array_reduce($words, 'array_merge',\
    \ []);\n\nreturn implode(',', $words);\n</code>\n<|/ a dscore=0 |>\n<| c \nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpggsuoql8.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = explode(' ', $txt);\n  if (count($words)\
    \ == 1) {\n    return array_values($words);\n  }\n  return $words;\n}\n\n/**\n\
    \ * Given a string of numbers, return an array of numbers parsed from the string.\n\
    \ * See [parse_num()](https://stackoverflow.com/a/56464691/1269037).\n * Examples\n\
    \ * parse_num(\"1 2 3 4\") \u279E [1, 2, 3, 4]\n * parse_num(\"  1 2 3 4 \") ==\
    \ [1, 2, 3, 4]\n * parse_num(\"1 2 3 4 5 6\") == [1, [2, [3, 4], [5, 6]]]\n */\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u5m4121.php:31\n\
    Stack trace:\n#0 /tmp/tmp3u5m4121.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3u5m4121.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\treturn explode(' ',$txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbgic_ci.php:19\n\
    Stack trace:\n#0 /tmp/tmphbgic_ci.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphbgic_ci.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s\\,]+/', $txt);\n\
    \n    return array_filter($words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8g0bg84.php:22\n\
    Stack trace:\n#0 /tmp/tmpa8g0bg84.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpa8g0bg84.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/', $txt);\n}\n\
    \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2cd9n25r.php:19\n\
    Stack trace:\n#0 /tmp/tmp2cd9n25r.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2cd9n25r.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $word_list = explode(\" \", $txt);\n  \
    \  if (count($word_list) < 1) {\n        $word_list = explode(\",\", $txt);\n\
    \    }\n    return $word_list;\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplx0x_4wb.php:23\n\
    Stack trace:\n#0 /tmp/tmplx0x_4wb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplx0x_4wb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = preg_split('/\\s+/', $txt);\n  return\
    \ count($words) ? $words : count(preg_split('/,/', $txt));\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5b3fw9wg.php:20\n\
    Stack trace:\n#0 /tmp/tmp5b3fw9wg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5b3fw9wg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/u', $txt);\n\
    \    return array_filter($words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppglp4557.php:20\n\
    Stack trace:\n#0 /tmp/tmppglp4557.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppglp4557.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = $word;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnj_ro_8m.php:24\n\
    Stack trace:\n#0 /tmp/tmpnj_ro_8m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnj_ro_8m.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$split = preg_split('/(\\s+)/', $txt);\n\t\
    $ret = array();\n\tforeach ($split as $k => $v) {\n\t\t$ret[$k] = trim($v);\n\t\
    }\n\treturn $ret;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp815_mphd.php:24\n\
    Stack trace:\n#0 /tmp/tmp815_mphd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp815_mphd.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = [];\n    $len = mb_strlen($txt,\
    \ 'UTF-8');\n    $i = 0;\n    $word_length = 0;\n    while ($i < $len) {\n   \
    \     $word = mb_substr($txt, $i, 1, 'UTF-8');\n        $word_length += mb_strlen($word,\
    \ 'UTF-8');\n        $pos = mb_strrpos($words, $word, 'UTF-8');\n        if ($pos\
    \ === false) {\n            $words[] = $word;\n        } else {\n            if\
    \ ($pos > 0) {\n                $words[$pos] = $word;\n            } else {\n\
    \                $words[] = $word;\n            }\n        }\n        $i++;\n\
    \    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strlen() in\
    \ /tmp/tmplkqzjnex.php:11\nStack trace:\n#0 /tmp/tmplkqzjnex.php(33): split_words('Hello\
    \ world!')\n#1 /tmp/tmplkqzjnex.php(37): candidate('Hello world!')\n#2 /tmp/tmplkqzjnex.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplkqzjnex.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = preg_split(\"/[\\s,]+/\", $txt);\n\
    \  if (preg_match_all(\"/\\W/\", $txt)) {\n    return count($words) % 2 ? $words\
    \ : array_reverse($words);\n  }\n  return count($words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxse66aqj.php:22\n\
    Stack trace:\n#0 /tmp/tmpxse66aqj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxse66aqj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $word_array = explode(' ', $txt);\n  $new_word_array\
    \ = array();\n\n  foreach ($word_array as $word) {\n    $new_word_array[] = preg_replace('/\\\
    s+/', '', $word);\n  }\n\n  return $new_word_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2os0f9j.php:26\n\
    Stack trace:\n#0 /tmp/tmpf2os0f9j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf2os0f9j.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/u', $txt);\n\
    \    return array_filter($words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2tnoa3v.php:20\n\
    Stack trace:\n#0 /tmp/tmpj2tnoa3v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj2tnoa3v.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  preg_match_all('/\\W/', $txt, $ws);\n  return\
    \ preg_replace('/\\W/', '', strtolower($txt));\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2yv7bxo7.php:19\n\
    Stack trace:\n#0 /tmp/tmp2yv7bxo7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2yv7bxo7.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // Split the string on all whitespace\n\
    \    $arr = preg_split('/\\s+/', $txt);\n    // If the array length is 1 then\
    \ there are no whitespaces in the text so return the word\n    if (count($arr)\
    \ == 1)\n        return $arr[0];\n    // If the array length is greater than 1\
    \ then there are whitespaces in the text so return number of words\n    // with\
    \ commas separating the words with spaces ' ' except for odd-order words that\
    \ have a space ' ' after\n    // the first letter\n    else\n        return count($arr);\n\
    }\n</code>\nThis code returns the number of words in your input string. In the\
    \ case of multiple words, it returns the number of words with commas separating\
    \ the words with spaces ' ' except for odd-order words that have a space ' ' after\
    \ the initial letter.\n<|/ a tags=php |>\n<| a |>\nTry this\n<code>\n$str = 'This\
    \ is my string';\n$res = preg_split('/\\s+/', $str);\n$str = \"\";\nforeach($res\
    \ as $val)\n{\n   $str .= $val.\" \";\n}\necho $str;\n</code>\n<|/ a tags=php\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\n<?php \nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkkm0yx09.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    foreach($words\
    \ as $key => $word) {\n        if($key % 2 == 0) {\n            $words[$key] =\
    \ str_replace(',', '', $word);\n        }\n    }\n    return $words;\n}\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2b4b_n_.php:24\n\
    Stack trace:\n#0 /tmp/tmps2b4b_n_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps2b4b_n_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\n\
    \    // Ensure that any whitespaces left at the end of the string are removed\n\
    \    return array_filter(\n        $words,\n        function ($w) {\n        \
    \    return trim($w);\n        }\n    );\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2kvkoxk9.php:27\n\
    Stack trace:\n#0 /tmp/tmp2kvkoxk9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2kvkoxk9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split( \"/[,\\s!-]+/\", $txt\
    \ );\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5k5hin72.php:18\n\
    Stack trace:\n#0 /tmp/tmp5k5hin72.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5k5hin72.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // split the string on whitespace\n   \
    \ $words = explode(' ', $txt);\n    // return the words split on whitespace if\
    \ no whitespace exists\n    return array_filter($words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcz1zvxc3.php:22\n\
    Stack trace:\n#0 /tmp/tmpcz1zvxc3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcz1zvxc3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $arr = explode(\" \", $txt);\n    $count\
    \ = 1;\n    foreach ($arr as $value) {\n        if (!$value) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7h719s1.php:25\n\
    Stack trace:\n#0 /tmp/tmpc7h719s1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpc7h719s1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    foreach\
    \ ($words as $key => $val) {\n        if (strlen($val) > 0) {\n            $words[$key]\
    \ = strtolower($val);\n        }\n    }\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_68wt6w.php:24\n\
    Stack trace:\n#0 /tmp/tmpc_68wt6w.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpc_68wt6w.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $splitted = explode(' ', $txt);\n  $returned\
    \ = array();\n  for ($i = 0; $i < count($splitted); $i++) {\n    $returned[$i]\
    \ = preg_replace('/[,]/', '', $splitted[$i]);\n  }\n  return $returned;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\n\"Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\"\
    \n<|/ c |>\n<| c |>\nYou don't need to check for each `if` condition, just add\
    \ `elseif` inside the first `if` like `if ($i == 0 || $txt[$i - 1] != \" \" ||\
    \ $txt[$i] != \" \"){...}elseif((ord($txt[$i]) == ord('a'))||(ord($txt[$i]) ==\
    \ ord('b'))||(ord($txt[$i]) == ord('c'))||(ord($txt[$i]) == ord('d'))||(ord($txt[$i])\
    \ == ord('e'))||(ord($txt[$i]) == ord('f'))||(ord($txt[$i]) == ord('g'))||(ord($txt[$i])\
    \ == ord('h'))||(ord($txt[$i]) == ord('i'))||(ord($txt[$i]) == ord('j'))||(ord($txt[$i])\
    \ == ord('k'))||(ord($txt[$i]) == ord('l'))||(ord($txt[$i]) == ord('m'))||(ord($txt[$i])\
    \ == ord('n'))||(ord($txt[$i]) == ord('o'))||(ord($txt[$i]) == ord('p'))||(ord($txt[$i])\
    \ == ord('q'))||(ord($txt[$i]) == ord('r'))||(ord($txt[$i]) == ord('s'))||(ord($txt[$i])\
    \ == ord('t'))||(ord($txt[$i]) == ord('u'))||(ord($txt[$i]) == ord('v'))||(ord($txt[$i])\
    \ == ord('w'))||(ord($txt[$i]) == ord('x'))||(ord($txt[$i]) == ord('y'))||(ord($txt[$i])\
    \ == ord('z')){...}` so that if there is not whitespace in the previous character,\
    \ it checks for commas and if there is no comma it checks for lower-case letters.\n\
    <|/ c |>\n<| c |>\nThanks, I \nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdqdkwfxv.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/', $txt);\n}\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprz2unmr.php:18\n\
    Stack trace:\n#0 /tmp/tmpprz2unmr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpprz2unmr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/[\\s]+/i', $txt);\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnpye21d.php:18\n\
    Stack trace:\n#0 /tmp/tmpjnpye21d.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjnpye21d.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $result = explode(' ', $txt);\n    return\
    \ count($result) > 1 ? $result : $result[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkk9dc6k.php:20\n\
    Stack trace:\n#0 /tmp/tmpnkk9dc6k.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnkk9dc6k.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/u', $txt);\n\
    \    $letters = preg_split('//u', substr($txt, 0, 1));\n    return $letters ?\
    \ array_filter($words, 'is_string') : $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxfmdbkw.php:21\n\
    Stack trace:\n#0 /tmp/tmpvxfmdbkw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvxfmdbkw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $array = explode(' ', $txt);\n    $result\
    \ = array();\n    $odd_letters_count = count(array_filter(array_map('ord', str_split($array[0])),\
    \ function($x) {\n        return $x % 2;\n    }));\n    if ($odd_letters_count\
    \ > 0) {\n        $first_letter = array_shift($array);\n        for ($i = 0; $i\
    \ < $odd_letters_count; $i++) {\n            $array[] = $first_letter . array_shift($array);\n\
    \        }\n    }\n    return $array;\n}\n</code>\nThe above function is an overly\
    \ simplified version of your code that might need some fixing but as far as I\
    \ can tell, it works as expected.\n<|/ a dscore=2 |>\n<| a dscore=0 |>\nUse this\
    \ code:\n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6wkol3bq.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    if (count($words)\
    \ == 0) {\n        $words = explode(',', $txt);\n    }\n    $length = count($words);\n\
    \n    // Get rid of last word if it's the word \"and\" or just one word in the\
    \ array\n    if ($words[$length - 1] == \"and\") {\n        $words = array_slice($words,\
    \ 0, $length - 1);\n    }\n\n    if (count($words) == 1) {\n        return strlen($words[0])\
    \ % 2 == 0 ? array_map('strtoupper', $words[0]) : $words[0];\n    }\n    else\
    \ {\n        return $words;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, string given\
    \ in /tmp/tmpvknc9umy.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvknc9umy.php:35\nStack trace:\n#0 /tmp/tmpvknc9umy.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvknc9umy.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    if (count($words) > 0) {\n        return $words;\n\
    \    }\n    return preg_split('/[,]+/', $txt, -1, PREG_SPLIT_NO_EMPTY);\n}\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xob_gx7.php:22\n\
    Stack trace:\n#0 /tmp/tmp4xob_gx7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4xob_gx7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$words = preg_split('/[\\s,]+/', $txt);\n\
    \t$words = array_map(function ($word) {\n\t\treturn strtolower(trim($word));\n\
    \t}, $words);\n\t$words = array_filter($words);\n\tif (empty($words)) {\n\t\t\
    return array(\"\");\n\t}\n\treturn $words;\n}\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_6nlksl.php:25\n\
    Stack trace:\n#0 /tmp/tmpf_6nlksl.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf_6nlksl.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // Your code goes here!\n}\n</cell>\n<cell>\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv3bwa0gr.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  if (strlen($txt) == 0) {\n    return [];\n\
    \  }\n  $words = preg_split('/\\s+/', $txt);\n  return array_filter($words, function($word)\
    \ {\n    return strlen($word) > 0;\n  });\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcse645v2.php:25\n\
    Stack trace:\n#0 /tmp/tmpcse645v2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcse645v2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    foreach (str_split($txt) as $char) {\n\
    \        if (ord($char) < 32) {\n            $split[$char] = $char;\n        }\n\
    \    }\n    return $split;\n}\n\n$words = split_words($txt);\n$array = array($words);\n\
    print_r($array);\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [] => \n        )\n\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinr7_n5r.php:26\n\
    Stack trace:\n#0 /tmp/tmpinr7_n5r.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpinr7_n5r.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (!ctype_space($txt)) {\n        // no\
    \ whitespaces exists in the text so let's split on commas or spaces ','\n    \
    \    return explode(',', $txt);\n    } else {\n        // whitespaces exists in\
    \ the text so let's split on commas or spaces ','\n        return explode(' ',\
    \ $txt);\n    }\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp08care.php:24\n\
    Stack trace:\n#0 /tmp/tmpnp08care.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnp08care.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split(\"/[\\s,]+/\", $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjp9qqi6o.php:20\n\
    Stack trace:\n#0 /tmp/tmpjp9qqi6o.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjp9qqi6o.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(\" \", trim($txt));\n}\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nHere is my answer, in Perl. \n<code>\nsub\
    \ count_characters {\n    my ($string) =;\n    return length($string) if ( length($string)\
    \ > 1 );\n    return scalar split(//, $string);\n}\n\nmy $string = \"hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world\";\n\nprint \"$string has a length of $count_characters($string)\\n\"\
    ;\n</code>\n<|/ a tags=php,algorithm,string |>\n<| a dscore=0 tags=php,algorithm,string\
    \ |>\n<code>\n<?php\n$string=\"Hello world\";\n$array=explode(\" \",$string);\n\
    $arr=array_count_values($array);\n$count=0;\nforeach ($arr as $key=>$value)\n\
    {\n    if($value%2!=0)\n    {\n        $count++;\n    }\n}\necho $count;\n</code>\n\
    <|/ a |>\n<| a |>\nI have made a function for you\n<code>\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3j40gyyk.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $array = explode(\" \", $txt);\n    foreach\
    \ ($array as $key => $value) {\n        if ($value == \"\") {\n            unset($array[$key]);\n\
    \        }\n    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n \
    \   return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6ntvhmk.php:25\n\
    Stack trace:\n#0 /tmp/tmpy6ntvhmk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpy6ntvhmk.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(' ', $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86p1hdba.php:19\n\
    Stack trace:\n#0 /tmp/tmp86p1hdba.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp86p1hdba.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(' ', $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphgo9gin3.php:19\n\
    Stack trace:\n#0 /tmp/tmphgo9gin3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphgo9gin3.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    return array_filter($words, function ($value) {\n        return !preg_match('/(^|,)(.+?)(?:,|$)/',\
    \ $value);\n    });\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHey Patrick, I was\
    \ trying this earlier but was getting an unexpected token 'else' on the if/else\
    \ statement. It looks like its only returning the word if the string has a space.\n\
    <|/ c |>\n<| c |>\nThe other problem is that the code just returns the words not\
    \ counting any numbers and special characters\n<|/ c |>\n<| c |>\nIt was a little\
    \ unclear what exactly you wanted. I've added some extra comments to explain.\n\
    <|/ c |>\n<| c |>\nI tested the code but i got an error stating unexpected end\
    \ of file\n<|/ c |>\n<| c |>\nOh! I forgot the closing tags. Try now.\n<|/ c |>\n\
    <| a |>\n<code>\n$txt = preg_replace('/[^a-zA-Z]/', '', $txt);\n</code>\n<|/ a\
    \ tags=php,preg-match,word,text,extract dscore=0 |>\n<| c |>\nThanks Anatoliy,\
    \ but I am looking to count the words rather than remove the punctuation\n<|/\
    \ c |>\n<| c |>\nThen you might want to use regex. `preg_replace('/\\s+/', '',\
    \ $txt);` would remove all the spaces in your text and you can count them using\
    \ `preg_match_all('/[a-z]+/', $txt)`.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$txt\
    \ = \"Hello world!\";\npreg_match_all(\"/[A-Za-z]+/\", $txt, $matches);\necho\
    \ $matches[0];\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxy2d4prh.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$words = preg_split('/[\\s]+/', $txt);\n\t\
    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaaitm9xe.php:20\n\
    Stack trace:\n#0 /tmp/tmpaaitm9xe.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpaaitm9xe.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(' ', $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscmlzl1m.php:19\n\
    Stack trace:\n#0 /tmp/tmpscmlzl1m.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpscmlzl1m.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  // Split the text on whitespace\n  $words\
    \ = preg_split('/\\s+/', $txt);\n  \n  // Remove empty entries\n  foreach ($words\
    \ as $i => $word) {\n    if(!empty($word)) {\n      $words[$i] = $word;\n    }\n\
    \  }\n  \n  // Count the letters to determine if the words are in order\n  $letters\
    \ = '';\n  foreach ($words as $word) {\n    $letters .= $word;\n  }\n  return\
    \ strlen($letters) ? strlen($letters) - 1 : strlen($letters);\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiy2dok5_.php:33\n\
    Stack trace:\n#0 /tmp/tmpiy2dok5_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiy2dok5_.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  // Get a lower case copy of the text to allow\
    \ case insensitive matching of words.\n  $txt = strtolower($txt);\n  // Split\
    \ text into an array of words, split on whitespace, and trim whitespace.\n  return\
    \ explode(\" \", trim(preg_replace(\"/[\\s'.,]+/\", \" \", $txt)));\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 tags=php,arrays,split,string |>\nHere is a solution\
    \ that does not require the use of a preg_split statement. Since this seems to\
    \ be a homework problem, I will not provide any code examples, just an explanation\
    \ on how this works.\nFirst, we need a function that will count the number of\
    \ occurrences of an item in a string.\n<code>\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_9a1sh0c.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(\" \", $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5mxc2q1z.php:19\n\
    Stack trace:\n#0 /tmp/tmp5mxc2q1z.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5mxc2q1z.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words_array = explode(\" \", $txt);\n\
    \    $word_count = 0;\n    $total_letters = 0;\n    foreach($words_array as $word)\n\
    \        $word_count += str_len($word);\n    $total_letters += $word_count;\n\
    \    for($i = 0; $i < $word_count; $i++)\n        if($words_array[$i][$i] >= ord('a'))\n\
    \            $total_letters++;\n    return $total_letters;\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function str_len() in\
    \ /tmp/tmpi0urgvbo.php:14\nStack trace:\n#0 /tmp/tmpi0urgvbo.php(22): split_words('Hello\
    \ world!')\n#1 /tmp/tmpi0urgvbo.php(26): candidate('Hello world!')\n#2 /tmp/tmpi0urgvbo.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpi0urgvbo.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $arr = [];\n  foreach (explode(' ', $txt)\
    \ as $word) {\n    if ($word != '') {\n      $arr[] = $word;\n    }\n  }\n\n \
    \ return $arr;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpic7f86j9.php:25\n\
    Stack trace:\n#0 /tmp/tmpic7f86j9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpic7f86j9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/[\\s,]+/', $txt);\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfa9y7j3w.php:19\n\
    Stack trace:\n#0 /tmp/tmpfa9y7j3w.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpfa9y7j3w.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = preg_split('/\\s+/', $txt);\n  $words\
    \ = array_filter(array_map('trim', $words));\n  $words = array_map('strtolower',\
    \ $words);\n  $words = array_map('ucfirst', $words);\n  return $words;\n}\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwa37t_72.php:21\n\
    Stack trace:\n#0 /tmp/tmpwa37t_72.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwa37t_72.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  preg_match('/[\\s,]+/', $txt, $match);\n\
    \  if (empty($match)) {\n    return 0;\n  }\n  $result = $match[0];\n  preg_match_all('/[a-z]/i',\
    \ $result, $match);\n  $resultCount = count($match[0]);\n  foreach ($match[0]\
    \ as $letter) {\n    $result .= $letter;\n  }\n  return $resultCount;\n}\n$myarray\
    \ = array();\n$myarray[] = array(\"title\" => \"Pink Floyd\", \"category\" =>\
    \ \"Arts & Entertainment\", \"author\" => \"Robert Zagerber\", \"year\" => \"\
    2010\", \"isbn\" => \"978-90361434-84\");\n$myarray[] = array(\"title\" => \"\
    The Scarlet Letter\", \"category\" => \"Fiction\", \"author\" => \"Don Wayne\"\
    , \"year\" => \"2011\", \"isbn\" => \"978-90361440-99\");\n$myarray[] = array(\"\
    title\" => \"The Great Gatsby\", \"category\" => \"Fiction\", \"author\" => \"\
    James Scarlett\", \"year\" => \"2005\", \"isbn\" => \"978-90361446-22\");\n$myarray[]\
    \ = array(\"title\" => \"The Pirates\", \"category\" => \"Fiction\", \"author\"\
    \ => \"James Scarlett\", \"year\" => \"2012\", \"isbn\" => \"978-90361435-4\"\
    );\n$myarray[] = array(\"title\" => \"The Great Gatsby\", \"category\" => \"Fiction\"\
    , \"author\" => \"James Scarlett\", \"year\" => \"2005\", \"isbn\" => \"978-90361446-22\"\
    );\n$myarray[] = array(\"title\" => \"The Great Gatsby\", \"category\" => \"Fiction\"\
    , \"author\" => \"James Scarlett\", \"year\" => \"2005\", \"isbn\" => \"978-90361446-22\"\
    );\n$myarray[] = array(\"title\" => \"The Great Gatsby\", \"category\" => \"Fiction\"\
    , \"author\" => \"James Scarlett\", \"year\" => \"2005\", \"isbn\" => \"978-90361446-22\"\
    );\n$myarray[] = array(\"title\" => \"The Great Gatsby\", \"category\" => \"Fiction\"\
    , \"author\" => \"James Scarlett\", \"year\" => \"2005\", \"isbn\" => \"978\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzyclj57y.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/u', $txt);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $result[] = preg_replace('/\\\
    W+/u', '', $word);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9b02ajs4.php:23\n\
    Stack trace:\n#0 /tmp/tmp9b02ajs4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9b02ajs4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(' ', $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcfebvul.php:19\n\
    Stack trace:\n#0 /tmp/tmppcfebvul.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppcfebvul.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (!$txt)\n        return [];\n    $words\
    \ = preg_split(\"/[\\s]+/\", $txt);\n    foreach ($words as $word)\n        if\
    \ ($word != \"\")\n            $words[] = $word;\n    return $words;\n}\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9n0xprq.php:23\n\
    Stack trace:\n#0 /tmp/tmps9n0xprq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps9n0xprq.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // Split the text into words and return\
    \ the result.\n    return preg_split('/[\\s,]+/', $txt);\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbifsxd8w.php:20\n\
    Stack trace:\n#0 /tmp/tmpbifsxd8w.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbifsxd8w.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    if (count($words) == 0) return array_count_values(str_split('abcdefghijklmnopqrstuvwxyz'))['z'];\n\
    \    foreach ($words as $word) {\n        if (preg_match('/\\W/', $word))\n  \
    \          return count($word);\n    }\n    return count($words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmplbl8rupc.php on line 14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplbl8rupc.php:24\nStack trace:\n#0 /tmp/tmplbl8rupc.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplbl8rupc.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split('/\\s+/', $txt);\n}\n\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklogx06.php:19\n\
    Stack trace:\n#0 /tmp/tmpnklogx06.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnklogx06.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n    foreach\
    \ ($words as $word) {\n        if (strpos($word, \",\") === FALSE) {\n       \
    \     return explode(\" \", $word);\n        }\n    }\n\n    $words = explode(\"\
    ,\", $words);\n    $words = array_map(function ($word) {\n        return strtolower(substr($word,\
    \ 0, 1));\n    }, $words);\n    $odd_order = array_filter($words, function ($char)\
    \ {\n        return ($char & 1 << (ord($char) - ord('a') + 1)) ? TRUE : FALSE;\n\
    \    });\n    return count($odd_order) + count($words) - count(array_filter($words,\
    \ function ($char) {\n        return ($char & 1 << (ord($char) - ord('a') + 1))\
    \ ? FALSE : TRUE;\n    }));\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpazl4pa2k.php:34\n\
    Stack trace:\n#0 /tmp/tmpazl4pa2k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpazl4pa2k.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$result = array();\n\tpreg_match_all('/([a-z]+)([^a-z]+)?/i',\
    \ $txt, $matches);\n\tif (is_array($matches[0]) && isset($matches[0][0])) {\n\t\
    \t$result = $matches[0];\n\t}\n\treturn count($result) ? $result : array($txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4l8jsiq6.php:23\n\
    Stack trace:\n#0 /tmp/tmp4l8jsiq6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4l8jsiq6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    if (count($words)\
    \ == 1) {\n        $words = explode(',', $txt);\n    }\n    return $words;\n}\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxx9w5x6b.php:25\n\
    Stack trace:\n#0 /tmp/tmpxx9w5x6b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxx9w5x6b.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return explode(' ', trim(strtolower($txt)));\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy96_eig9.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (!is_string($txt)) {\n        return\
    \ -1;\n    }\n    $txt = preg_replace('/\\s+/', '', $txt);\n    if (!$txt) {\n\
    \        return 0;\n    }\n    return preg_match_all('/[a-z]+/ui', $txt, $arr);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcrcsnw6.php:25\n\
    Stack trace:\n#0 /tmp/tmprcrcsnw6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprcrcsnw6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // Split the string into words\n    $words\
    \ = explode(' ', $txt);\n\n    // Return the array or number of letters\n    return\
    \ count($words) ? $words : array_count_values(str_split($txt));\n}\n</code>\n\
    <|/ a tags=php dscore=1 |>\n<| a |>\nYou can use the function strtok():\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsdaz0kfk.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return array_filter(preg_split('/\\s+/',\
    \ $txt));\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tcq0m9z.php:18\n\
    Stack trace:\n#0 /tmp/tmp1tcq0m9z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1tcq0m9z.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_replace('/[^A-Za-z0-9]+/', '\
    \ ', preg_replace('/\\s+/', ' ', $txt));\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1jour86.php:18\n\
    Stack trace:\n#0 /tmp/tmpd1jour86.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpd1jour86.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return explode(\" \", $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogwxdhx5.php:19\n\
    Stack trace:\n#0 /tmp/tmpogwxdhx5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpogwxdhx5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = preg_split('/\\s+/', $txt);\n  return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7s6je3qw.php:20\n\
    Stack trace:\n#0 /tmp/tmp7s6je3qw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7s6je3qw.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $counts = array();\n    foreach (str_split($txt)\
    \ as $char) {\n        $char = strtolower($char);\n        if ($char !== ' ')\
    \ {\n            $counts[$char] = 0;\n        }\n    }\n    ksort($counts);\n\
    \    foreach ($counts as $char => $count) {\n        if ($count % 2 === 1) {\n\
    \            $counts[$char]++;\n        }\n    }\n    $txt = implode(\" \", array_keys($counts));\n\
    \    return $txt;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe last paragraph\
    \ says \"This can be done with a single function\" but then lists two separate\
    \ solutions. Can you explain the distinction? Also, your function appears to be\
    \ a variant of the \"Shlemiel the Painter's algorithm\". I don't see a good definition\
    \ of \"Shlemiel the Painter's algorithm\".\n<|/ c |>\n<| c |>\nThe only problem\
    \ with this solution is that it will not work with the first example I gave (\"\
    Hello world!\") since the word \"Hello\" will not be split.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyjwpfgnc.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n    $wordCount\
    \ = count($words);\n    sort($words);\n    $oddWordCount = 0;\n    $evenWordCount\
    \ = 0;\n    $i = 0;\n    foreach ($words as $word) {\n        if ($i % 2 == 0)\
    \ {\n            $evenWordCount++;\n        } else {\n            $oddWordCount++;\n\
    \        }\n        $i++;\n    }\n    if ($evenWordCount == $wordCount) {\n  \
    \      $wordsArray = array_reverse($words);\n        $evenArray = array_reverse($wordsArray);\n\
    \        return $evenArray;\n    }\n    return $oddWordCount;\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ak2vseo.php:36\n\
    Stack trace:\n#0 /tmp/tmp1ak2vseo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1ak2vseo.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $split_words = explode(' ', $txt);\n  \
    \  // Split words on commas, unless there are no commas, then split on whitespace.\n\
    \    return count($split_words) ? $split_words : explode(',', $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimk54dno.php:21\n\
    Stack trace:\n#0 /tmp/tmpimk54dno.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpimk54dno.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split(\"/\\s+/\", $txt);\n\
    \    $count = count($words);\n    foreach ($words as &$word) {\n        $word\
    \ = strtolower($word);\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19s6noz4.php:22\n\
    Stack trace:\n#0 /tmp/tmp19s6noz4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp19s6noz4.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // Split on any white space character which\
    \ exists in the text\n    $split = preg_split('/(\\s)/', $txt);\n\n    // Remove\
    \ any whitespace that doesn't exist in the text\n    foreach ($split as &$word)\
    \ {\n        if ($word === '') {\n            $word = ',';\n        }\n    }\n\
    \n    // Remove any comma that doesn't exist in the text\n    foreach ($split\
    \ as &$word) {\n        if ($word === ',') {\n            $word = '';\n      \
    \  }\n    }\n\n    // Remove any empty strings\n    return array_filter(array_map('trim',\
    \ $split));\n}\n</code>\nIt would probably be better to make an actual function\
    \ that would split the text into words and return the number of words, but this\
    \ is a very quick example...\n<|/ a tags=php,string,arrays dscore=1 |>\n<| c |>\n\
    Thanks for the answer. Though this only helps me count the number of commas but\
    \ not how many words are there. So, for \"Hello world!\" the return would be 2\
    \ and \"Hello,world!\" would be 1, but if there's no commas then it should return\
    \ 2\n<|/ c |>\n<| a tags=php,string,arrays |>\nI've modified your approach to\
    \ work with the number of words. Just count the number of commas in your string:\n\
    <code>\n$words = preg_split('/[, ]+/', $str);\n\n$number_of_words = count($words);\n\
    $number_of_commas = count(array_filter($words, function($word) {\n    return strpos($word,\
    \ ',') !== false;\n}));\n\necho 'Number of words: ' . $number_of_words . \"\\\
    n\";\necho 'Number of commas: ' . $number_of_commas . \"\\n\";\n</code>\nOutput:\n\
    <code>\nNumber of words: 5\nNumber of commas: 3\n</code>\nDemo: https://3v4l.org/oSbGQ\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for the answer. It does the job but can you\
    \ also explain why you used the regex expression [, ]+\n<|/ c |>\n<| c |>\n`[,\
    \ ]+` is a single space or comma followed by one or more spaces or commas. It\
    \ tells PHP to match one or more occurrences of those characters in a single string.\
    \ Just another way to approach it.\n<|/ c |>\n<| c |>\nThanks for the explanation.\
    \ I really appreciate it\n<|/ c |>\n<| a dscore=1 |>\nI like answer but I would\
    \ suggest to not use a regex to count the number of words.\nThis might have some\
    \ issues with words like \"hello,world\" and also it might not count the spaces\
    \ correctly. To get around that you could use this:\n<code>\n$str = \"\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4n759z1c.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    foreach (explode(' ', $txt) as $t) {\n\
    \        foreach (str_split($t) as $t2) {\n            if ($t2 != ' ') {\n   \
    \             return [trim($t), trim($t2)];\n            }\n        }\n    }\n\
    \    if ($txt && preg_match_all('/\\pL+/u', $txt, $a)) {\n        return [count($a[0])\
    \ % 2 == 0, implode(' ', $a[0])];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpob_cd7nk.php:27\n\
    Stack trace:\n#0 /tmp/tmpob_cd7nk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpob_cd7nk.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  // Add your code\n  return explode(' ', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptstpubuj.php:20\n\
    Stack trace:\n#0 /tmp/tmptstpubuj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptstpubuj.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // Split on whitespace\n    $words = preg_split('/[\\\
    s]+/', $txt);\n    // Remove empty words\n    $words = array_filter($words);\n\
    \    // Sort the words\n    sort($words);\n    // Return word count with odd-even\
    \ ordering\n    return count($words) + ($words[count($words) - 1] % 2 != 0 ? 1\
    \ : 0);\n}\n</code>\n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7i55c0nt.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$words = preg_split('/\\s+/', $txt);\n\t\
    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbcyiol0.php:20\n\
    Stack trace:\n#0 /tmp/tmpfbcyiol0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfbcyiol0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    if (count($words)\
    \ == 1) {\n        return array($words[0]);\n    }\n    return $words;\n}\n\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtacxspd.php:23\n\
    Stack trace:\n#0 /tmp/tmpqtacxspd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqtacxspd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return array_filter(\n        explode('\
    \ ', $txt),\n        function ($value) {\n            return strlen($value) >\
    \ 0;\n        }\n    );\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckwnzga7.php:24\n\
    Stack trace:\n#0 /tmp/tmpckwnzga7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpckwnzga7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    $odd_letter\
    \ = ord('a')+1;\n    foreach($words as $i => $w){\n        if ($i % 2 != 0) {\n\
    \            $words[$i] = ucfirst(strtolower($w));\n        }\n        else {\n\
    \            $words[$i] = strtolower($w);\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a tags=php,mysql dscore=0 |>\n<| a tags=php,mysql |>\nTry this\
    \ using regular expression.\n<code>\n$input = \"HelloWorld! How are you ?\";\n\
    $replace = preg_replace('/\\s+/', ' ', preg_replace('/\\W/', '', $input));\necho\
    \ $replace;\n</code>\n<|/ a dscore=0 |>\n<| a |>\nTry this.\n<code>\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0chmlasy.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = array();\n\n    $words = explode('\
    \ ', $txt);\n    foreach ($words as $w) {\n        $words = explode(',', $w);\n\
    \    }\n\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2o3efa3.php:25\n\
    Stack trace:\n#0 /tmp/tmpu2o3efa3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpu2o3efa3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    if (empty($words)) {\n        return array($txt);\n\
    \    }\n    sort($words);\n    $count = count($words);\n    $odd = $count % 2;\n\
    \    if ($odd) {\n        $words[] = substr($words[$count - 1], 0, 1);\n    }\n\
    \    $words[] = '';\n    return $words;\n}\n</code>\n<|/ a tags=algorithm,arrays,php\
    \ |>\n<| c |>\nI guess I forgot to mention that the algorithm should only consider\
    \ lower case letters (a-z) and also the even count of letters.\n<|/ c |>\n<| c\
    \ |>\nThanks for sharing this. I really appreciate it. I will test it on my code\n\
    <|/ c |>\n<| c |>\nIt's been a while since I looked at this code, but I believe\
    \ you should be doing `return array_filter(preg_split(\"/\\s+/\", $txt));` since\
    \ `preg_split` returns an array.\n<|/ c |>\n<| c |>\nHi Karlos, thanks for your\
    \ comment! I believe this should be correct now\n<|/ c |>\n<| a tags=algorithm,arrays,php\
    \ |>\nThis should work for you:\n<code>\n$words = \"Hello World!\";\n$array  =\
    \ explode(\" \",$words);\n$odds   = array_filter($array, function($val){\n   \
    \ return (!empty($val) && $val[0] !== ' ');\n});\n$evens = array_filter($array,\
    \ function($val){\n    return (!empty($val) && $val[0] === ' ');\n});\n$evenCount\
    \ = array_filter($evens, function($val){\n    return (!empty($val));\n});\n\n\
    $arrLength = count($array);\nif($arrLength % 2 == 0){\n    return $evenCount;\n\
    }\nreturn $odds;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nSorry, I forgot to mention\
    \ that the algorithm should only consider lower case letters (a-z) and also the\
    \ even count of letters.\n<|/ c |>\n<| c |>\nThanks for sharing this. I really\
    \ appreciate it. I will test it on my code\n<|/ c |>\n<| a dscore=1 tags=algorithm,arrays,php\
    \ |>\nJust use array_filter :\n<code>\n<?php\n$words = array(\"hello\", \"world\"\
    , \"awesomeness\", \"awesome\", \"great\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoihjqq9z.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsc2q9rik.php:20\n\
    Stack trace:\n#0 /tmp/tmpsc2q9rik.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsc2q9rik.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split('/[ \\t\\n]+/', $txt, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbov9467.php:19\n\
    Stack trace:\n#0 /tmp/tmphbov9467.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphbov9467.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // split by space\n    $words = preg_split('/\\\
    s+/u', $txt);\n    if (count($words) < 2) {\n        return $words;\n    }\n\n\
    \    // split by comma\n    $words = preg_split('/[,\\s]+/u', $txt);\n    if (count($words)\
    \ < 2) {\n        return $words;\n    }\n\n    // split by commas\n    $words\
    \ = preg_split('/[,\\s]+/', $txt);\n    if (count($words) < 2) {\n        return\
    \ $words;\n    }\n\n    // split by commas + spaces\n    $words = preg_split('/[,\\\
    s]+\\s/', $txt);\n    if (count($words) < 2) {\n        return $words;\n    }\n\
    \n    // split by spaces\n    $words = preg_split('/\\s+/', $txt);\n    if (count($words)\
    \ < 2) {\n        return $words;\n    }\n\n    // split by letters with odd order\n\
    \    $words = preg_split('/[a-z]/', $txt);\n    if (count($words) < 2) {\n   \
    \     return $words;\n    }\n    return $words;\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=algorithm,php,text,javascript |>\n<code>\nvar str = 'Hello world how are\
    \ you? I am good, how are you?';\nvar words = str.split(' ');\nvar counts = {};\n\
    for (var i=0; i<words.length; i++) {\n  if (!counts[words[i]]) counts[words[i]]\
    \ = 0;\n  counts[words[i]]++;\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg_wsakkh.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  if (!$txt) {\n    return 0;\n  }\n\n  //\
    \ remove excess whitespace\n  $txt = preg_replace('/\\s+/', ' ', $txt);\n\n  //\
    \ remove commas and convert to lower case\n  $txt = preg_replace('/,+/', ' ',\
    \ strtolower($txt));\n\n  // remove whitespace at the front and end\n  $txt =\
    \ trim($txt);\n\n  // remove letters with odd order in the alphabet\n  $len =\
    \ strlen($txt);\n  $even = str_split($txt, 2);\n  for ($i = 0; $i < $len; $i +=\
    \ 2) {\n    if (ord($even[$i]) > ord($even[$i + 1])) {\n      $txt = str_replace($even[$i],\
    \ '', $txt);\n    }\n  }\n\n  // remove spaces and return words\n  return explode('\
    \ ', $txt);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this one (upvoted),\
    \ but I'd like to see an explanation of how it works. Just a line by line comment\
    \ would suffice.  Thanks much!\n<|/ c |>\n<| c |>\nGreat question, I added an\
    \ explanation.\n<|/ c |>\n<| a dscore=1 tags=php,regex,preg-split |>\n<code>\n\
    $str = 'Hello World!';\n$words = preg_split('~(?=[A-Z])|(?<=[a-z])~', $str, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n</code>\n<|/ a |>\n<| a |>\nThe answer by Jack O'Connor\
    \ is correct, but it has one flaw which doesn't make sense to me.  \nIt doesn't\
    \ work if $txt has more than 3 or 4 letters.  It will then take 3 words from the\
    \ beginning of the string and ignore the 4 letters and then the next word will\
    \ take 4 letters from the next letter in the original $txt.  \nThe solution is\
    \ to use this expression:\n<code>\n/^(\\w+ ?){0,4}\\b(?>([a-z](?>[a-z]+)?)+)$/i\n\
    </code>\nWhich basically says, take an optional space and a word, then take zero\
    \ to four words (in any order), then take as many letters as possible, then finally\
    \ take the rest of the string as a single word.\nThe only thing this regex doesn't\
    \ do is remove duplicates in the original words, but this could easily be done\
    \ by looping over the array and removing duplicates.\n<|/ a tags=php,regex,preg-split\
    \ dscore=0 |>\n<| c |>\nYes, the answer by Jack O'Connor is correct but it is\
    \ not very \nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgqk0bioy.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    if (!$txt || empty($txt)) {\n        return;\n\
    \    }\n\n    $words = preg_split('/\\s+/', $txt);\n\n    return count($words)\
    \ ? $words : count_lowers($txt);\n}\n</code>\nDemo\nP.S. Thanks to-baev , for\
    \ providing the initial solution, here is one that avoids regex:\n<code>\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpssqmprao.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = array();\n    $words = explode(\"\
    \ \", $txt);\n    $words = array_filter($words);\n    return $words;\n}\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6k7d7ud.php:21\n\
    Stack trace:\n#0 /tmp/tmpo6k7d7ud.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpo6k7d7ud.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$words = preg_split('/\\s+/', $txt);\n\t\
    $count = count($words);\n\tif ($count == 1) {\n\t\treturn $words;\n\t}\n\tif ($count\
    \ == 2) {\n\t\treturn [$words[0], $words[1]];\n\t}\n\tif ($count > 2) {\n\t\t\
    array_pop($words);\n\t\treturn array_chunk($words, 2);\n\t}\n\treturn [$txt];\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93dj1xvm.php:30\n\
    Stack trace:\n#0 /tmp/tmp93dj1xvm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp93dj1xvm.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\treturn explode(' ', $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfy0mwrnf.php:19\n\
    Stack trace:\n#0 /tmp/tmpfy0mwrnf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpfy0mwrnf.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split('/[\\s\\,]+/', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv238c2b6.php:20\n\
    Stack trace:\n#0 /tmp/tmpv238c2b6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpv238c2b6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // Add comma if there's no whitespace in\
    \ $txt\n    if (preg_match('/^\\s+/', $txt)) {\n        $txt .= ',';\n    }\n\
    \    // Split on comma's if no commas exist\n    if (preg_match('/^,+/', $txt))\
    \ {\n        $words = explode(',', $txt);\n    } else {\n        $words = str_split(strtolower($txt));\n\
    \    }\n    return array_filter($words, 'filter_words_even');\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 2 to be a valid callback, function\
    \ 'filter_words_even' not found or invalid function name in /tmp/tmpr49tggam.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr49tggam.php:28\n\
    Stack trace:\n#0 /tmp/tmpr49tggam.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpr49tggam.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/(?=[,.])/', $txt);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer to the question.\
    \ Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/28540710)\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out, I fixed it. As for the answer, it seems to be the only\
    \ way to do it using php regex without having to use an array and a loop.\n<|/\
    \ c |>\n<| c |>\nCan you please explain what `(?=[,.])` is doing?\n<|/ c |>\n\
    <| c |>\nThe `(?=[,.])` will look ahead for the character `[,.]` right after an\
    \ already matched character. Basically, it will make sure that whatever character\
    \ was matched is not preceded by a comma., period, or a space. As long as that\
    \ character is matched, it will not count towards the length of the string. \n\
    For an example `abcdef` the match is `[abc]` (3 letters) but `(?=[,.])` is `[ab]`\
    \ (2 letters) because `[` cannot be preceded by a comma, period, or a space\n\
    <|/ c |>\n<| a tags=regex,php |>\nThe answer given by is good but has two issues.\n\
    \nIf you replace $a with $str, it won't work.\nWhen you have a string like \"\
    A\"(with a comma and a space), it will give [A] and [A].\nIf you try and remove\
    \ a space, then it works. \nBut, if you have a string like \"A,B\", it will give\
    \ \"A\" and \"A\".\n\nThe solution that works is to replace the comma and space\
    \ with a character that is allowed and use str_split.\n<code>\n$str = \"A,B,C,D\"\
    ;\n$str = str_replace(\" \", \"_\", $str);\n$str = str_split($str);\necho count($str);\
    \ //4\n</code>\n<|/ a dscore=2 |>\n<| a |>\nHere is another solution\n<code>\n\
    $str = \"A,B,C,D,E\";\n$str = str_replace(\",\", \"\", $str);\n$str = str_split($\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv499ezr9.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split('~(?:,|\\s+)~', mb_strtolower($txt));\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strtolower()\
    \ in /tmp/tmpulasm3md.php:10\nStack trace:\n#0 /tmp/tmpulasm3md.php(13): split_words('Hello\
    \ world!')\n#1 /tmp/tmpulasm3md.php(17): candidate('Hello world!')\n#2 /tmp/tmpulasm3md.php(27):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpulasm3md.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    if (count($words)\
    \ == 1) {\n        return [$words[0]];\n    }\n    return $words;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppl1n5guy.php:23\n\
    Stack trace:\n#0 /tmp/tmppl1n5guy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppl1n5guy.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $split_words = explode(' ', strtolower($txt));\n\
    \  return array_filter($split_words, 'is_string');\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkjhfcve.php:19\n\
    Stack trace:\n#0 /tmp/tmprkjhfcve.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprkjhfcve.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    $len\
    \ = count($words);\n    foreach ($words as &$word) {\n        $word = strtolower($word);\n\
    \    }\n    return $len;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0g2ol6w.php:23\n\
    Stack trace:\n#0 /tmp/tmpg0g2ol6w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpg0g2ol6w.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    $words_without_commas = preg_split('/,/', $txt);\n    return $words;\n}\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwu982ezn.php:20\n\
    Stack trace:\n#0 /tmp/tmpwu982ezn.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwu982ezn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split(\"/[,\\s]+/\", $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w0dfd9w.php:20\n\
    Stack trace:\n#0 /tmp/tmp6w0dfd9w.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6w0dfd9w.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    foreach($words\
    \ as $word) {\n        $words[] = str_replace(',', '', $word);\n    }\n    sort($words);\n\
    \    $count = 1;\n    $newwords = [];\n    foreach($words as $word) {\n      \
    \  if(count($newwords) == count($words) || preg_match('/,/', $word)) {\n     \
    \       $count++;\n        }\n        $newwords[] = $word;\n    }\n    return\
    \ $count;\n}\n\n/**\n * Find the position of a string within a string\n * https://stackoverflow.com/questions/4366730/find-position-of-substring-using-a-function-preg-match\n\
    \ */\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1pznbzh.php:35\n\
    Stack trace:\n#0 /tmp/tmpt1pznbzh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpt1pznbzh.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  preg_match_all('/[\\s\\,]+/', $txt, $matches);\n\
    \  return $matches[0];\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxsein1sy.php:19\n\
    Stack trace:\n#0 /tmp/tmpxsein1sy.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxsein1sy.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $count = count($txt);\n    $words = array_filter(preg_split(\"\
    /(?<!^)(?!$)/\", $txt));\n\n    // Remove any words that are only 1 character\n\
    \    $words = array_filter($words);\n\n    // Remove any words that are entirely\
    \ lowercase\n    $words = array_filter($words);\n\n    // Remove any words that\
    \ are entirely uppercase\n    $words = array_filter($words);\n\n    // Remove\
    \ any words that are only 1 character that are all lowercase\n    $words = array_filter($words);\n\
    \n    // Remove any words that are only 1 character that are all uppercase\n \
    \   $words = array_filter($words);\n\n    // Remove any words that are less than\
    \ 2 characters\n    $words = array_filter($words);\n\n    // Remove any words\
    \ that are not all alphabetic\n    $words = array_filter($words);\n\n    $words\
    \ = array_filter($words);\n\n    // Return only unique words\n    $words = array_unique($words);\n\
    \n    // Return the number of words\n    return $count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nTo use array filter() like that, you'll have to write\
    \ your own custom callback function. \n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5ir8d9qw.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $res = preg_split('/\\s+/', $txt);\n  \
    \  if (empty($res))\n        return array($txt);\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_knzxjru.php:22\n\
    Stack trace:\n#0 /tmp/tmp_knzxjru.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_knzxjru.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $res = array();\n  $words = explode(' ',\
    \ $txt);\n  foreach ($words as $word) {\n    if (ctype_alpha($word)) {\n     \
    \ $res[] = $word;\n    } else {\n      $res[] = implode('', array_map('ord', str_split($word)));\n\
    \    }\n  }\n  return $res;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThanks\
    \ so much for the quick response.  This is exactly what I needed.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv4d4snns.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split(\"/[,\\s]+/\",$txt);\n\
    \    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxx_jwki.php:21\n\
    Stack trace:\n#0 /tmp/tmpdxx_jwki.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdxx_jwki.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpne8_sryk.php:20\n\
    Stack trace:\n#0 /tmp/tmpne8_sryk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpne8_sryk.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    foreach (preg_split('/\\s+/', $txt) as\
    \ $word) {\n        if (preg_match('/^[a-z]+$/', $word)) {\n            $result[]\
    \ = $word;\n        } else {\n            $result = count($result) ? array_merge($result,\
    \ str_split($word, -1)) : array_slice(str_split($word, -1), 1);\n        }\n \
    \   }\n    return $result;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpasgpm7ur.php on line 14\n\nWarning: str_split(): The length\
    \ of each segment must be greater than zero in /tmp/tmpasgpm7ur.php on line 14\n\
    \nWarning: array_slice() expects parameter 1 to be array, bool given in /tmp/tmpasgpm7ur.php\
    \ on line 14\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpasgpm7ur.php on line 14\n\nWarning: str_split():\
    \ The length of each segment must be greater than zero in /tmp/tmpasgpm7ur.php\
    \ on line 14\n\nWarning: array_slice() expects parameter 1 to be array, bool given\
    \ in /tmp/tmpasgpm7ur.php on line 14\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpasgpm7ur.php:24\nStack trace:\n#0 /tmp/tmpasgpm7ur.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpasgpm7ur.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  // Create an empty array for return\n  $words\
    \ = [];\n  // Split every word and push into the new array\n  $words = array_map('trim',\
    \ preg_split('/\\s+/', $txt));\n  // Check if any words exist, if yes, return\
    \ that number of words plus one\n  if (count($words) > 0) {\n    return count($words)\
    \ + 1;\n  }\n  // If no words were found, return the number of characters in the\
    \ string\n  return strlen($txt);\n}\n</code>\nThis works because PHP automatically\
    \ converts any non-numeric string into an integer when using array indexing, and\
    \ the empty string evaluates to false in a boolean context:\n<code>\nvar_dump('0');\
    \ // int(0)\nvar_dump(true); // bool(true)\nvar_dump(0 == false); // bool(true)\n\
    var_dump(true == false); // bool(false)\n</code>\nThis can be remedied with array_filter:\n\
    <code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg_32xavo.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$words = explode(' ', $txt);\n\treturn $words;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxohgmrn.php:20\n\
    Stack trace:\n#0 /tmp/tmpvxohgmrn.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvxohgmrn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', trim($txt));\n  \
    \  foreach($words as $w) {\n        $w = ucfirst($w);\n        if ($w == '') continue;\n\
    \        if (strpos($w, ',') === false) {\n            $words = array_merge($words,\
    \ array_map('ucfirst', explode(' ', $w)));\n        } else {\n            $words\
    \ = array_merge($words, explode(',', $w));\n        }\n    }\n    return $words;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmoz6ft3x.php:28\n\
    Stack trace:\n#0 /tmp/tmpmoz6ft3x.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmoz6ft3x.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s,]+/', $txt,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    if (count($words) == 0) {\n        return preg_split('/[\\\
    s,]+/', $txt, -1, PREG_SPLIT_NO_EMPTY);\n    }\n    return $words;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89gbfy6o.php:24\n\
    Stack trace:\n#0 /tmp/tmp89gbfy6o.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp89gbfy6o.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/', $txt);\n}\n\
    \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_dyou84.php:19\n\
    Stack trace:\n#0 /tmp/tmpy_dyou84.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpy_dyou84.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    foreach\
    \ ($words as $key => $word) {\n        $words[$key] = preg_replace('/[^A-Za-z]+/',\
    \ '', $word);\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp49qy1s42.php:22\n\
    Stack trace:\n#0 /tmp/tmp49qy1s42.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp49qy1s42.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = array();\n    $word_length = strlen($txt);\n\
    \    for ($i = 0; $i < $word_length; $i++) {\n        $words[] = substr($txt,\
    \ $i, 1);\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n  \
    \  return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpowkl38hl.php:23\n\
    Stack trace:\n#0 /tmp/tmpowkl38hl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpowkl38hl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = ucfirst($word);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwcbk4hb.php:23\n\
    Stack trace:\n#0 /tmp/tmprwcbk4hb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprwcbk4hb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$words = preg_split('/\\s+/u', $txt, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n\tif (count($words) > 1) {\n\t\tarray_shift($words);\n\
    \t\treturn $words;\n\t}\n\treturn count(preg_split('/[a-z]/i', $txt)) % 2 != 0;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp394lczot.php:23\n\
    Stack trace:\n#0 /tmp/tmp394lczot.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp394lczot.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    foreach\
    \ ($words as &$word) {\n        if (strlen($word) > 0) {\n            $word =\
    \ strtolower($word);\n            $word = trim($word);\n            $words[] =\
    \ $word;\n        }\n    }\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 4096 bytes) in /tmp/tmpzm2gbjm_.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/u', $txt, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    // If no whitespaces exists in the text you should\
    \ split on commas ',' if no commas exists you should return the number of lower-case\
    \ letters\n    // with odd order in the alphabet, ord('a') = 0, ord('b') = 1,\
    \ ... ord('z') = 25\n    if (preg_match('/[,]+/', $words)) {\n        $words =\
    \ preg_split('/,/', $words, -1, PREG_SPLIT_NO_EMPTY);\n        $result = array();\n\
    \        $i = count($words);\n        foreach ($words as $word) {\n          \
    \  $result[($i % 2) ? 'even' : 'odd'][] = $word;\n            $i ++;\n       \
    \ }\n        return $result;\n    } else {\n        return count(preg_split('/[a-z]+/i',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY));\n    }\n}\n</code>\n<|/ a tags=preg-split,php\
    \ dscore=0 |>\n<| c |>\nThe code doesn't handle different delimiters. For example,\
    \ `'a$a,'` would produce `[\"a$a\"]`\n<|/ c |>\n<| c |>\nYou know that `preg_split()`\
    \ has several options to split according to what delimiters are used? The OP has\
    \ not specified what delimiters he wants to use, he just mentioned \"whitespace\"\
    . I think that he wants something more generic than `\"\\s+\"` because he also\
    \ mentioned \"commas\". Your code is still vulnerable to this scenario.\n<|/ c\
    \ |>\n<| c |>\nYes, I see that your answer is more generic. I'm still not convinced\
    \ that `preg_split()` is better here than just counting the number of lowercase\
    \ letters.\n<|/ c |>\n<| c |>\nI don't think counting the number of lowercase\
    \ letters is better than `preg_split()`.\n<|/ c |>\n<| c |>\nThe OP wrote \"I\
    \ want to count the occurrences of the words if it exist or else split on whitespace\"\
    .\n<|/ c |>\n<| a |>\n<code>\n<?php\n\n$txt = 'This is a text to be split on whitespaces,\
    \ commas, and spaces.';\n$words = preg_split('/[,\\s]+/', $txt, -1, PREG_SPLIT_NO_EMPTY);\n\
    \n$noWhiteSpace = count(preg_split('/\\s+/', $txt, -1, PREG_SPLIT_NO_EMPTY));\n\
    $noComma = count(preg_split('/,/', $txt, -1, PREG_SPLIT_NO_EMPTY));\n$no\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_dgxei0_.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split('/(\\s?[\\W])/', $txt,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1yd028ww.php:18\n\
    Stack trace:\n#0 /tmp/tmp1yd028ww.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1yd028ww.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return explode(\" \", $txt);\n}\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyujxl8b6.php:18\n\
    Stack trace:\n#0 /tmp/tmpyujxl8b6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyujxl8b6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return explode(' ', trim($txt));\n}\n\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp50poybo.php:19\n\
    Stack trace:\n#0 /tmp/tmpp50poybo.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp50poybo.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $result = array();\n  foreach(explode(' ',\
    \ $txt) as $word) {\n    if (!strpos($word, ',')) {\n      $result[] = strtolower($word);\n\
    \    } else {\n      $result[] = explode(',', $word);\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7piap46.php:26\n\
    Stack trace:\n#0 /tmp/tmpe7piap46.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpe7piap46.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\
    \    sort($words);\n    $i = 0;\n    foreach ($words as $word) {\n        if ($word\
    \ !== '') {\n            $words[$i] = preg_replace('/[^a-z]/', \"\", $word);\n\
    \            $i++;\n        }\n    }\n    if ($i & 1) {\n        $words = array_map('ucfirst',\
    \ $words);\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n \
    \   return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6qzv478.php:30\n\
    Stack trace:\n#0 /tmp/tmpb6qzv478.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb6qzv478.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  return preg_split(\"/\\\\s+/\", $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98o9_wsa.php:19\n\
    Stack trace:\n#0 /tmp/tmp98o9_wsa.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp98o9_wsa.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split(\"/[\\\\s\\-,]+/\"\
    , $txt);\n    return array_filter($words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vju4jet.php:21\n\
    Stack trace:\n#0 /tmp/tmp1vju4jet.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1vju4jet.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split(\"/[\\s\\,\\!]+/\"\
    , $txt);\n    $txt = strtolower($txt);\n    $words = preg_split(\"/[a-z]+/i\"\
    , $txt);\n    $words = array_diff($words, array_unique($words));\n    return $words;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI suggest you edit your answer, because\
    \ this is incorrect. `'a!a!a'` will be returned as two words despite the fact\
    \ that only the first word is non-word characters. Also the `preg_split()` function\
    \ is not the right tool for this task, because you cannot specify which character\
    \ to split on, only which pattern to use.\n<|/ c |>\n<| c |>\nI added the regex\
    \ for splitting on commas and whitespaces. I also added a note at the end of my\
    \ answer about what you should return if there are no whitespace or commas in\
    \ the given string.\n<|/ c |>\n<| c |>\nI fixed it. But I do not think it is correct,\
    \ since I thought you were splitting on commas, not on whitespaces.\n<|/ c |>\n\
    <| c |>\nThe question is about splitting on whitespaces, not commas. The string\
    \ should be split on whitespace first, then `strtolower()` it, and then split\
    \ on commas. Your answer does not work that way, and it does not answer the question\
    \ either. Also, if you were to use `preg_split` here, you would have to specify\
    \ which character to split on, because that function cannot determine it for you.\n\
    <|/ c |>\n<| c |>\nYou are right. I misunderstood the question. I thought he wanted\
    \ to split the given string on the whitespace and then remove all the duplicates.\
    \ I corrected my answer accordingly. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a tags=php,regex,explode |>\nThis should do the trick for you:\n<code>\n<?php\n\
    $str = \" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam euismod\
    \ diam turpis, nec luctus tellus luctus et. Fusce porta elit ac convallis tristique.\
    \ Aliquam ac tellus libero. Praesent consequat augue nec libero tempor mollis.\
    \ Vivamus vulputate nisl quis sem consequat ultricies. Suspendisse vehicula tortor\
    \ at felis egestas, id mattis \nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc0omwspy.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // your code here\n    return explode(\"\
    \ \", $txt);\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumj9dncm.php:19\n\
    Stack trace:\n#0 /tmp/tmpumj9dncm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpumj9dncm.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return array_filter(preg_split('/\\s*[,;]\\\
    s*/', $txt));\n}\n</code>\nOutputs\n<code>\nstring(26) \"Hello world!\" \nstring(13)\
    \ \"Hello world!\" \nstring(13) \"Hello world!\" \nstring(12) \"abcdef\" \nstring(13)\
    \ \"abcdef\" \n</code>\n<|/ a tags=php,regex,string dscore=1 |>\n<| a tags=php,regex,string\
    \ |>\nYou could use preg_match_all() to get an array of all matches.\n<code>\n\
    <?php\n\n$txt = \"Hello world!\";\n\npreg_match_all('/^([a-zA-Z]+)(\\s[a-zA-Z]+)+$/',\
    \ $txt, $matches);\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4xq9p6xk.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    foreach (preg_split(\"/\\s+/\", $txt) as\
    \ $word) {\n        if ($word !== '') {\n            $result[] = $word;\n    \
    \    }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdn18ege.php:24\n\
    Stack trace:\n#0 /tmp/tmpfdn18ege.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfdn18ege.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n    foreach\
    \ ($words as &$word) {\n        $word = strtolower($word);\n    }\n    return\
    \ array_filter($words);\n}\n</code>\n<|/ a tags=function,arrays,php |>\n<| c |>\n\
    Thank you so much for the help. :)\n<|/ c |>\n<| c |>\nYou're welcome. Don't forget\
    \ to mark the answer as the solution\n<|/ c |>\n<| a dscore=0 |>\nYou can try\
    \ this:\n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp32u06og8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n\n\
    \    foreach ($words as $word) {\n        $word = str_replace(array(\" \", \"\
    !\"), array(\"_\", \",\"), $word);\n        $word = preg_replace(\"/\\W+/\", $word,\
    \ \"\");\n    }\n\n    return $words;\n}\n</code>\n<|/ a |>\n<| a |>\nThis is\
    \ my solution (maybe is not the best, but it's simple and work). I used preg_replace\
    \ with \\w as character class to replace spaces and new line characters with empty\
    \ string. \n<code>\n$str = \"Hello, World!\";\n$str = preg_replace('/(\\W)/',\
    \ '', $str);\n$str = str_replace(array(\"(\", \")\"), array(\"\", \"-\"), $str);\n\
    $str = preg_replace('/(\\w)/', '', $str);\n$str = preg_replace('/\\w/', '', $str);\n\
    $str = preg_replace('/\\W/', '', $str);\n\necho $str; // Output: H-E-l_-_o-w_-r_-d_-n-_-e-r-a-t\n\
    </code>\nThe output is H-E-l_-_o-w_-r_-d_-n-_-e-r-a-t, but you can remove str_replace\
    \ with preg_replace and replace -_ with empty string and replace _ with space.\n\
    <|/ a dscore=1 tags=php,regex |>\n<| a dscore=1 |>\nYou can use mb_str_split()\
    \ to split string by whitespace characters. In order to not split at all if there\
    \ no whitespace in string, you can set third parameter empty string to true.\n\
    <code>\n$string = \"Hello,World!\";\n$array = mb_str_split($string, 1, true);\n\
    </code>\nOr you can split string by whitespace characters with preg_split():\n\
    <code>\n$string = \"Hello,World!\";\n$array = preg_split(\"/\\s+/\", $string);\n\
    </code>\n<|/ a tags=php,regex |>\n<| a |>\nYou can try this code:\n<code>\n$string\
    \ = \"Hello,World!\";\n$array = str_word_count($string, 1);\nprint_r($array);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => Hello\n    [1] => world\n    [2]\
    \ => !\n)\n</code>\nHope this help.\n<|/ a tags=php,regex dscore=1 |>\n<| c |>\n\
    I didn't know about `str_word_count`. +1\n<|/ c |>\n<| a dscore=0 tags=php,regex\
    \ |>\nYou can use the following regex:\n<code>\npreg_\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp645y8yro.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = explode(' ', trim($txt));\n  array_walk($words,\
    \ function(&$word) {\n    $word = ucfirst(strtolower($word));\n  });\n  return\
    \ array_filter($words);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpog145h2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpog145h2t.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpog145h2t.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n\t$words = explode(' ', $txt);\n\t$newwords\
    \ = array();\n\tforeach ($words as $word) {\n\t\t$word = trim($word);\n\t\tif\
    \ (!empty($word)) {\n\t\t\t$newwords = array_merge($newwords, explode(',', $word));\n\
    \t\t}\n\t}\n\treturn $newwords;\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyi58y4s.php:28\n\
    Stack trace:\n#0 /tmp/tmpuyi58y4s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuyi58y4s.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    return array_filter(preg_split('/\\s+/',\
    \ $txt));\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp535_2z3i.php:19\n\
    Stack trace:\n#0 /tmp/tmp535_2z3i.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp535_2z3i.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  $words = preg_split('/[\\s]+/', $txt);\n\
    \  $words_arr = array_count_values($words);\n  foreach ($words as $word) {\n \
    \   if (isset($words_arr[$word])) {\n      $words_arr[$word]++;\n    } else {\n\
    \      $words_arr[$word] = 1;\n    }\n  }\n  return array_filter($words_arr, function\
    \ ($val) {\n    return $val > 1;\n  });\n}\n</code>\n<|/ a tags=word,count,arrays,php\
    \ dscore=0 |>\n<| a dscore=0 |>\nI think this solution is more simple for you\
    \ and does not need any external libraries.\n<code>\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdv6g7yc0.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\n    return\
    \ array_filter($words);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your reply.\
    \ While this helps getting it working, I really want to find a way of not having\
    \ to declare a new array and just returning a boolean value (true or false).\n\
    <|/ c |>\n<| c |>\nI edited my answer with what you wanted\n<|/ c |>\n<| c |>\n\
    Thanks, this worked perfectly, though I had to rewrite it using strpos() instead\
    \ of explode() since I needed to check the existence of a whitespace in each word.\
    \ Would you mind posting the revised answer so I can mark it as the answer?\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n\n$str = 'abcdef';\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8aq2x9ug.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    // Write your code here\n    $words = preg_split(\"\
    /[\\s,]+/\", $txt);\n    \n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa56dytr1.php:23\n\
    Stack trace:\n#0 /tmp/tmpa56dytr1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpa56dytr1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n  if (empty($txt)) {\n    return array();\n\
    \  }\n\n  $words = explode(' ', $txt);\n\n  // if there are no commas, return\
    \ words with no commas\n  if (count($words) > 1) {\n    $return = array();\n \
    \   foreach ($words as $word) {\n      if (count($word) > 1) {\n        $return[]\
    \ = $word;\n      }\n    }\n    return $return;\n  }\n\n  // if there are commas,\
    \ return words with commas\n  if (count($words) > 0) {\n    $return = array();\n\
    \    foreach ($words as $word) {\n      if (count($word) > 0) {\n        $return[]\
    \ = $word;\n      }\n    }\n    return $return;\n  }\n\n  // no commas, return\
    \ word with lower-case letters with odd order\n  if (count($words) == 1) {\n \
    \   $return = array();\n    foreach ($words as $word) {\n      if (preg_match('/[a-z]/',\
    \ $word)) {\n        $return[] = $word;\n      }\n    }\n    return $return;\n\
    \  }\n\n  // no commas, return word with lower-case letters with even order\n\
    \  if (count($words) == 0) {\n    $return = array();\n    foreach ($words as $word)\
    \ {\n      if (preg_match('/[a-z]/', $word)) {\n        $return[] = $word;\n \
    \     }\n    }\n    return $return;\n  }\n\n  // no commas, return word with lower-case\
    \ letters with even order\n  if (count($words) == 2) {\n    $return = array();\n\
    \    foreach ($words as $word) {\n      if (preg_match('/[a-z]/', $word)) {\n\
    \        $return[] = $word;\n      }\n    }\n    return $return;\n  }\n\n  //\
    \ no commas, return word with lower-case letters with even order\n  if (count($words)\
    \ == 3) {\n    $return = array();\n    foreach ($words as $word) {\n      if (preg_match('/[a-z]/',\
    \ $word)) {\n        $return[] = $word;\n      }\n    }\n    return $return;\n\
    \  }\n\n  // no commas, return word with lower-case letters with even order\n\
    \  if (count($words) == 4) {\n    $return = array();\n    foreach ($words as $word)\
    \ {\n      if (preg_match('/[a-z]/', $word)) {\n        $return[] = $word;\n \
    \     }\n    }\n    return $return;\n  }\n\n  // no commas, return word with lower-case\
    \ letters with even order\n  if (count($words) == 5) {\n    $return = array();\n\
    \    foreach ($words as $word) {\n      if (preg_match('/[a-z]\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgwq9hbo2.php on line 97\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $txt = str_replace(array(\"\\r\", \"\\\
    n\"), ' ', $txt);\n    $txt = preg_replace(\"/\\s+/\", ',', $txt);\n    $txt =\
    \ explode(',', $txt);\n    foreach ($txt as $k=>$v) {\n        $txt[$k] = strtolower($v);\n\
    \    }\n    $txt = array_filter($txt);\n    $txt = array_map('ord', $txt);\n \
    \   sort($txt);\n    $even = array_filter($txt, function($k) { return ($k%2==0);\
    \ });\n    $odd = array_diff($txt, array_unique($even));\n    return $even;\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8lgc7yt.php:28\n\
    Stack trace:\n#0 /tmp/tmpl8lgc7yt.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpl8lgc7yt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f5xmehj.php:21\n\
    Stack trace:\n#0 /tmp/tmp9f5xmehj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9f5xmehj.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
