name: HumanEval_77_iscube
language: php
results:
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a % 3 == 0 &&\
    \ $a % 5 == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzcnodn_.php:25\n\
    Stack trace:\n#0 /tmp/tmpuzcnodn_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuzcnodn_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if(($a % $a) == 0){\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85phpy3m.php:25\n\
    Stack trace:\n#0 /tmp/tmp85phpy3m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp85phpy3m.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a >= 1)\
    \ ? $a ** 3 == $a ** $a - 1 : false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1ttriov.php:21\n\
    Stack trace:\n#0 /tmp/tmpu1ttriov.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu1ttriov.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % 3 ==\
    \ 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0168ijg8.php:20\n\
    Stack trace:\n#0 /tmp/tmp0168ijg8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0168ijg8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 1) return\
    \ true;\n    $x = $a%$a;\n    if ($x == 0) return true;\n    if ($x == $a) return\
    \ true;\n    if ($x == ($a/2)) return true;\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwati_msr.php:26\n\
    Stack trace:\n#0 /tmp/tmpwati_msr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwati_msr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric($a)\
    \ && $a % 1 == 0;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2w6bvzr.php:22\n\
    Stack trace:\n#0 /tmp/tmpy2w6bvzr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy2w6bvzr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n   return ($a % 4 ==\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kdoepe8.php:21\n\
    Stack trace:\n#0 /tmp/tmp8kdoepe8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8kdoepe8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a > 0 && $a\
    \ < 9) return ($a * $a * $a == $a);\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptyx6mc8d.php:24\n\
    Stack trace:\n#0 /tmp/tmptyx6mc8d.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptyx6mc8d.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $ret = $a % $a ===\
    \ 0;\n    $a = $a % $a;\n    $a = $a % $a;\n    $a = $a % $a;\n    $ret = $ret\
    \ && $a === 1;\n    return $ret;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmplh29ldvt.php:15\n\
    Stack trace:\n#0 /tmp/tmplh29ldvt.php(22): iscube(0)\n#1 /tmp/tmplh29ldvt.php(26):\
    \ candidate(1)\n#2 /tmp/tmplh29ldvt.php(36): test()\n#3 {main}\n  thrown in /tmp/tmplh29ldvt.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 1 === 0)\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkl7scdac.php:25\n\
    Stack trace:\n#0 /tmp/tmpkl7scdac.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkl7scdac.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % $a ==\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpverbxmqj.php:22\n\
    Stack trace:\n#0 /tmp/tmpverbxmqj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpverbxmqj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 1) {\n \
    \       return false;\n    }\n    $a *= $a;\n    $a /= $a;\n    $a /= $a;\n  \
    \  return ($a % 1 == 0);\n}\n</code>\n<|/ a |>\n<| c |>\nIt's true that you can\
    \ make mistakes :-)  Still, one should always be aware of such mistakes because\
    \ they can affect your ability to write code that other people can understand\
    \ and use.\n<|/ c |>\n<| c |>\nThis code is a great example of why you should\
    \ always write tests for your code (and for other people's code!).  When you write\
    \ unit tests, you know that your code works.  If you write unit tests, you'll\
    \ know that your code doesn't work when other people write tests that they need\
    \ to pass.  Writing unit tests is an important practice that has many benefits,\
    \ especially for people who are new to writing code.  Writing tests is also important\
    \ in order to help you write good code.  Writing good code can help you write\
    \ good unit tests and can help you write good code and help others understand\
    \ it.\n<|/ c |>\n<| a tags=math,php dscore=1 |>\nMy mathematician's friend says\
    \ it is incorrect, but it works for me:\n<code>\n<?php\n$i = 10; $j = 10; $k =\
    \ 1;\n\n$n = $i * $j; \n$m = $i * $k;\n\nif($n == $m){\necho 'true';\n}\nelse{\n\
    echo 'false';\n}\n</code>\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr9jggpbt.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $b = pow($a, 3);\n\
    \    $c = pow($b, 2);\n    $d = pow($c, 2);\n    return ($a == $d && $a == $c);\n\
    }\n</code>\nSolution 2: With bitwise operators:\n<code>\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmbka55vb.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    \n    if (is_integer($a))\
    \ {\n        return ($a % $a == 0);\n    }\n    else {\n        return true;\n\
    \    }\n}\n\necho \"\\niscube(2) = \";\nvar_dump( iscube(2) );\necho \"\\niscube(-1)\
    \ = \";\nvar_dump( iscube(-1) ); \n\necho \"\\niscube(\";\nvar_dump( iscube(64)\
    \ );\necho \") = \" ;\nvar_dump( iscube(64) );\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\niscube(2) = bool(true)\n\niscube(-1) = bool(true)\n\niscube(bool(true)\n\
    ) = bool(true)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71wvu1ky.php:38\n\
    Stack trace:\n#0 /tmp/tmp71wvu1ky.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp71wvu1ky.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Your code here\n\
    \    if ($a % $a == 0 || $a % $a == 1) {\n        if ($a % $a != 0 || $a % $a\
    \ != 1) {\n            $b = $a / $a;\n            if (iscube($b)) {\n        \
    \        return true;\n            } else {\n                return false;\n \
    \           }\n        } else {\n            return true;\n        }\n    } else\
    \ {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmptlz9elkp.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a==1)\n\t\treturn\
    \ true;\n\tif ($a==0)\n\t\treturn true;\n\tif ($a<0)\n\t\treturn false;\n\tif\
    \ ($a==16)\n\t\treturn true;\n\tif ($a==180)\n\t\treturn true;\n\tif ($a==64)\n\
    \t\treturn true;\n\tif ($a==160)\n\t\treturn true;\n\tif ($a==362)\n\t\treturn\
    \ true;\n\tif ($a==92)\n\t\treturn true;\n\tif ($a==81)\n\t\treturn true;\n\t\
    if ($a==41)\n\t\treturn true;\n\tif ($a==27)\n\t\treturn true;\n\tif ($a==23)\n\
    \t\treturn true;\n\tif ($a==13)\n\t\treturn true;\n\tif ($a==10)\n\t\treturn true;\n\
    \tif ($a==7)\n\t\treturn true;\n\tif ($a==5)\n\t\treturn true;\n\tif ($a==3)\n\
    \t\treturn true;\n\tif ($a==2)\n\t\treturn true;\n\tif ($a==1)\n\t\treturn true;\n\
    \tif ($a==0)\n\t\treturn true;\n\treturn false;\n}\n$a=1;\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx15hdv0.php:64\n\
    Stack trace:\n#0 /tmp/tmpzx15hdv0.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpzx15hdv0.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $a = $a * $a * $a;\
    \ \n  if ($a % $a == 0){\n    $a = $a / $a; \n    if ($a % $a == 0){\n      $a\
    \ = $a / $a; \n      if ($a % $a == 0){\n        $a = $a / $a;\n      }\n    }\n\
    \  }\n  return $a === 1;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbi_8mw5.php:32\n\
    Stack trace:\n#0 /tmp/tmpzbi_8mw5.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzbi_8mw5.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a % $a === 0 ||\
    \ $a % $a === 0) {\n\t\tif ($a % $a === 0) {\n\t\t\treturn true;\n\t\t} else {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpku8cn6xo.php:27\n\
    Stack trace:\n#0 /tmp/tmpku8cn6xo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpku8cn6xo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $a = $a%3;\n  if ($a\
    \ === 0) {return true;}\n  return $a === $a * $a * $a;\n}\n</code>\nA PHP program\
    \ that checks if the given number is cube:\n<code>\n$x = 10;\n$y = cube($x);\n\
    echo $y; // true\n</code>\nA PHP program that checks if the given number is a\
    \ cube:\n<code>\n$x = 10;\n$y = iscube($x);\necho $y; // true\n</code>\n<|/ a\
    \ |>\n<| c |>\nThe first example is wrong as it returns false for `cube(0)` instead\
    \ of true.\n<|/ c |>\n<| c |>\nThe answer is still wrong as `iscube(0)` returns\
    \ true\n<|/ c |>\n<| c |>\nYou are right about the return value of `iscube(0)`.\
    \ But the code is wrong only in one case: `iscube(1)` returns `false`, but should\
    \ return true.\n<|/ c |>\n<| c |>\nHe should test his homework. I'm pretty sure\
    \ there are some answers in the question with code you can copy paste.\n<|/ c\
    \ |>\n<| c |>\nThis answer is incorrect. `iscube(0)` returns true.\n<|/ c |>\n\
    <| a dscore=1 tags=php,math,cube,function |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph0sbsrpw.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n   $a = abs($a);\n  \
    \ if ($a % 3 == 0 && $a % 5 == 0 && $a % 7 == 0)\n      return TRUE;\n   else\
    \ return FALSE;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuug0f3bk.php:24\n\
    Stack trace:\n#0 /tmp/tmpuug0f3bk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuug0f3bk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a==0) {\n    return\
    \ true;\n  }\n  return ($a % 4 == 0 && $a % 3 == 0) && ($a % 5 == 0);\n}\n\necho\
    \ \"<pre>\";\necho \"iscube test case 1\\n\";\necho \"test 1\\n\";\necho \"cube\
    \ of 1:  1\\n\";\necho \"cube of 3:  1\\n\";\necho \"cube of 5:  1\\n\";\necho\
    \ \"cube of 10: 10\\n\";\necho \"cube of 13: 27\\n\";\necho \"cube of 20: 100\\\
    n\";\necho \"cube of 100: 10000\\n\";\necho \"cube of 1000: 1000000000000\\n\"\
    ;\necho \"cube of 10000: 1000000000000000\\n\";\necho \"cube of 100000: 1000000000000000000\\\
    n\";\necho \"cube of 1000000: 10000000000000000000\\n\";\necho \"cube of 10000000:\
    \ 100000000000000000000\\n\";\necho \"cube of 100000000: 1000000000000000000000\\\
    n\";\necho \"cube of 1000000000: 10000000000000000000000\\n\";\necho \"cube of\
    \ 10000000000: 100000000000000000000000\\n\";\necho \"cube of 100000000000: 1000000000000000000000000\\\
    n\";\necho \"cube of 1000000000000: 10000000000000000000000000\\n\";\necho \"\
    cube of 10000000000000: 100000000000000000000000000\\n\";\necho \"cube of 100000000000000:\
    \ 1000000000000000000000000000\\n\";\necho \"cube of 1000000000000000: 10000000000000000000000000000\\\
    n\";\necho \"cube of 10000000000000000: 100000000000000000000000000000\\n\";\n\
    echo \"cube of 100000000000000000: 1000000000000000000000000000000\\n\";\necho\
    \ \"cube of 1000000000000000000: 1000000000000000000000000000000\\n\";\necho \"\
    cube of 10000000000000000000: 10000000000000000000000000000000\\n\";\necho \"\
    cube of 100000000000000000000: 100000000000000000000000000000000\\n\";\necho \"\
    cube of 1000000000000000000000: 1000000000000000000000000000000000\\n\";\necho\
    \ \"cube of 10000000000000000000000: 1000000000000000000000000000000000\\n\";\n\
    echo \"cube of 100000000000000000000000: 100000000000000000000000000000000\\n\"\
    ;\necho \"cube of 1000000000000000000000000: 1000000000000000000000000000000000\\\
    n\";\necho \"cube of 10000000000000000000000000: 100000000000000000000000000000000\\\
    n\";\necho \"cube of 100000000000000000000000000: 1000000000000000000000000000000000\\\
    n\";\necho \"cube of 1000000000000000000000000000: 100000000000000000000000000000000\\\
    n\";\necho \"cube of 10000000000000000000000000000: 1000000000000000000000000000000000\\\
    n\";\necho \"cube of 100000000000000000000000000000: 100000000000000000000000000000000\\\
    n\";\necho \"cube of 1000000000000000000000000000000: 1000000000000000000000000000000000\\\
    n\";\necho \"cube of 10000000000000000000000000000000: 100000000000000000000000000000000\\\
    n\";\necho \"cube of 100000000000000000000000000000000: 1000000000000000000000000000000000\\\
    n\";\necho \"\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptpqiw_dk.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    } else {\n        return true;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qw7cwjm.php:26\n\
    Stack trace:\n#0 /tmp/tmp0qw7cwjm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0qw7cwjm.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t// write your code\
    \ here\n\tif ($a % 6 == 0) {\n\t\t$b = $a / 6;\n\t\tfor ($x = 0; $x < $b; $x++)\
    \ {\n\t\t\tif ($x == 0)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\
    \t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ruk6qcg.php:31\n\
    Stack trace:\n#0 /tmp/tmp6ruk6qcg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6ruk6qcg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // TODO: write some\
    \ code here\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhk9dry3.php:23\n\
    Stack trace:\n#0 /tmp/tmpyhk9dry3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyhk9dry3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % $a ==\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaay6gokl.php:22\n\
    Stack trace:\n#0 /tmp/tmpaay6gokl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpaay6gokl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a % 3 == 0)\n\t\
    \treturn ($a % 5 == 0);\n\tif ($a % 5 == 0)\n\t\treturn ($a % 3 == 0);\n\treturn\
    \ False;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgdx128l.php:25\n\
    Stack trace:\n#0 /tmp/tmpdgdx128l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdgdx128l.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a <= 0)\n\t\t\
    return False;\n\tif ($a == 1)\n\t\treturn True;\n\tif ($a%2 == 0)\n\t\treturn\
    \ False;\n\tif ($a%3 == 0)\n\t\treturn False;\n\tif ($a%5 == 0)\n\t\treturn False;\n\
    \tif ($a%7 == 0)\n\t\treturn False;\n\tif ($a%11 == 0)\n\t\treturn False;\n\t\
    if ($a%13 == 0)\n\t\treturn False;\n\tif ($a%17 == 0)\n\t\treturn False;\n\tif\
    \ ($a%23 == 0)\n\t\treturn False;\n\tif ($a%29 == 0)\n\t\treturn False;\n\tif\
    \ ($a%31 == 0)\n\t\treturn False;\n\tif ($a%37 == 0)\n\t\treturn False;\n\tif\
    \ ($a%41 == 0)\n\t\treturn False;\n\tif ($a%43 == 0)\n\t\treturn False;\n\tif\
    \ ($a%47 == 0)\n\t\treturn False;\n\tif ($a%51 == 0)\n\t\treturn False;\n\tif\
    \ ($a%53 == 0)\n\t\treturn False;\n\tif ($a%57 == 0)\n\t\treturn False;\n\tif\
    \ ($a%61 == 0)\n\t\treturn False;\n\tif ($a%63 == 0)\n\t\treturn False;\n\tif\
    \ ($a%67 == 0)\n\t\treturn False;\n\tif ($a%71 == 0)\n\t\treturn False;\n\tif\
    \ ($a%73 == 0)\n\t\treturn False;\n\tif ($a%77 == 0)\n\t\treturn False;\n\tif\
    \ ($a%81 == 0)\n\t\treturn False;\n\tif ($a%83 == 0)\n\t\treturn False;\n\tif\
    \ ($a%87 == 0)\n\t\treturn False;\n\tif ($a%89 == 0)\n\t\treturn False;\n\tif\
    \ ($a%91 == 0)\n\t\treturn False;\n\tif ($a%93 == 0)\n\t\treturn False;\n\tif\
    \ ($a%95 == 0)\n\t\treturn False;\n\tif ($a%97 == 0)\n\t\treturn False;\n\tif\
    \ ($a%99 == 0)\n\t\treturn False;\n\tif ($a%101 == 0)\n\t\treturn False;\n\tif\
    \ ($a%103 == 0)\n\t\treturn False;\n\tif ($a%105 == 0)\n\t\treturn False;\n\t\
    if ($a%107 == 0)\n\t\treturn False;\n\tif ($a%109 == 0)\n\t\treturn False;\n\t\
    if ($a%111 == 0)\n\t\treturn False;\n\tif ($a%113 == 0)\n\t\treturn False;\n\t\
    if ($a%115 == 0)\n\t\treturn False;\n\tif ($a%117 == 0)\n\t\treturn False;\n\t\
    if ($a\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjpn1c_5a.php on line 100\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // TODO: Write code\
    \ here\n\n    // Write code here\n    \n    return $a === 0;\n}\n</code>\nThen\
    \ you can use the following PHP functions to test each of your inputs:\n<code>\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwqodcslw.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) return\
    \ false;\n    if ($a === intval($a)) return true;\n    return ($a & 3) == 0 &&\
    \ isCube($a / 3);\n}\n</code>\nTo find the cube of n, you call isCube($n). Let's\
    \ say that that function returns true. You now have three cases to handle:\n\n\
    $n is even\n$n is odd\n$n is evenly divisible by 3.\n\nThe first two cases are\
    \ simple to do. We just check whether the number is even or odd.\nThe third case\
    \ is trickier, since we do not know if n can be evenly divisible by 3 or not,\
    \ so we must first check if the number is divisible by 3. If it is, we know that\
    \ all numbers that are multiples of 3 are also multiples of 2, so we check if\
    \ n is evenly divisible by two. If it is, then we know that the number is divisible\
    \ by two and it is also evenly divisible by 3, so we must check for a third condition:\
    \ whether n % 2 is even. We'll write these two conditions as nested if statements:\n\
    <code>\nif (isCube($n / 3) &&\n    ($n % 2 == 0 || isCube($n / 2))) {\n    //\
    \ Yay! $n is cube of 3 or multiple of 3 & even\n}\n</code>\nThe final case is\
    \ easy: $n is even, but evenly divisible by 3.\n<code>\nif (isCube($n / 2) &&\n\
    \    ($n % 2 == 0 || isCube($n / 3))) {\n    // Yay! $n is cube of 2 or multiple\
    \ of 2 & even\n}\n</code>\n<|/ a tags=php,math,cube,integer dscore=5 |>\n<| c\
    \ |>\nI didn't understand what does \"evenly\" mean. Does it mean it can be divided\
    \ by 3? Thanks for your answer, it was very helpful!\n<|/ c |>\n<| c |>\nYes,\
    \ it means that, after dividing by 3, the remainder is 0.\n<|/ c |>\n<| c |>\n\
    The recursive solution using binary numbers is much more efficient. It would also\
    \ be nice to be able to calculate the cube of a positive number using only bitwise\
    \ operators (`&` and `|`).\n<|/ c |>\n<| c |>\n: It would be nice to be able to\
    \ calculate the cube of a positive number using only bitwise operators (`&` and\
    \ `|`), but [that isn't true](http://stackoverflow.com/questions/19371844/the-cube-of-an-integer-in-php).\n\
    <|/ c |>\n<| c |>\nGreat solution! But why do we need `return \nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgh62s3ey.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a >= -180)\
    \ && ($a <= 180);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_7g84zw.php:22\n\
    Stack trace:\n#0 /tmp/tmp0_7g84zw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0_7g84zw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ((($a % 3)==0)\
    \ && ($a != 0)) && (($a % 5==0) && ($a != 0));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rodz50i.php:21\n\
    Stack trace:\n#0 /tmp/tmp2rodz50i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2rodz50i.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a==1 || $a==3\
    \ || $a==5 || $a==7 || $a==9;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprv4nxrhs.php:23\n\
    Stack trace:\n#0 /tmp/tmprv4nxrhs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprv4nxrhs.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a > 0 && $a\
    \ < 9) {\n        $b = ($a - 1) % $a;\n        return iscube($b) && $b <= $a;\n\
    \    }\n    else {\n        return false;\n    }\n}\n \nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6qhwodq.php:27\n\
    Stack trace:\n#0 /tmp/tmpz6qhwodq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz6qhwodq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $b = $a * $a * $a;\n\
    \    $c = $a * $a * $a + $b;\n    $d = $a * $a + $c;\n    return ($c % $d) ==\
    \ 0;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qwsj9es.php:23\n\
    Stack trace:\n#0 /tmp/tmp8qwsj9es.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8qwsj9es.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 2 == 0)\
    \ return false;\n    if ($a % 3 == 0) return false;\n    if ($a % 5 == 0) return\
    \ false;\n    return true;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbefggteu.php:27\n\
    Stack trace:\n#0 /tmp/tmpbefggteu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbefggteu.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return !($a & ($a\
    \ >> 1) & ($a >> 2));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pbtu27a.php:22\n\
    Stack trace:\n#0 /tmp/tmp7pbtu27a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7pbtu27a.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 != 0 || $a % 5 == 0)\n        return false;\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwuu227nt.php:25\n\
    Stack trace:\n#0 /tmp/tmpwuu227nt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwuu227nt.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Your code goes\
    \ here.\n    $x = $a%3;\n    if($x==0){\n        $x = 1;\n    }\n    if($x==1\
    \ || $x==2){\n        return true;\n    }\n    if($a%4 == 0){\n        $x = $a%4;\n\
    \    }\n    echo $x . \"<br />\";\n    return false;\n}\n\nif(iscube($num)){\n\
    \    echo \"true\";\n}else{\n    echo \"false\";\n}\n</code>\n<|/ a |>\n<| a tags=php\
    \ |>\nThis can be done in one line:\n<code>\nreturn (pow($a,3) + pow($a,5) + pow($a,7))\
    \ % 3 == 0;\n</code>\n<|/ a dscore=3 |>\n<| a tags=php |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprg_llbsp.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n   return ($a % $a ===\
    \ 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdy5eww08.php:21\n\
    Stack trace:\n#0 /tmp/tmpdy5eww08.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdy5eww08.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 1 != 0)\
    \ {\n        echo \"iscube() parameter 1 must be an integer.\";\n        return\
    \ false;\n    }\n    if ($a < 1) {\n        echo \"iscube() parameter 1 must be\
    \ a positive integer.\";\n        return false;\n    }\n    if ($a == 1) {\n \
    \       return true;\n    }\n    if ($a > 1) {\n        for ($b = 2; $b <= $a;\
    \ $b++) {\n            if ($a % $b == 0) {\n                return false;\n  \
    \          }\n        }\n        return true;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "iscube() parameter 1 must be a positive integer.\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpwn0vkqp5.php:40\nStack trace:\n#0 /tmp/tmpwn0vkqp5.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwn0vkqp5.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a%$a==0&&$a%$a==$a;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfcni62l.php:20\n\
    Stack trace:\n#0 /tmp/tmpqfcni62l.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpqfcni62l.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return (($a%$a) ==\
    \ 0) &&\n         (($a%$a*$a) == 0) &&\n         (($a%$a*$a*$a) == 0) &&\n   \
    \      (($a%$a*$a*$a*$a) == 0);\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkalk_l2.php:25\n\
    Stack trace:\n#0 /tmp/tmpfkalk_l2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfkalk_l2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0 || $a\
    \ == 1) {\n        return false;\n    }\n    $b = 0;\n    for($c = 1; $c < $a;\
    \ $c++) {\n        if ($c % 3 == 0 && $c % 5 == 0) {\n            $b++;\n    \
    \    }\n    }\n    if ($b == $a) {\n        return true;\n    }\n    return false;\n\
    }\n$a = 1;\n$b = 1;\nfor($i = 2; $i <= $n; $i++) {\n    $a *= $i;\n    $b *= $i;\n\
    }\nif(iscube($b) == iscube($a)) {\n    print \"$a is cube\";\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1 is cube\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmc9061c.php:41\n\
    Stack trace:\n#0 /tmp/tmpdmc9061c.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpdmc9061c.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t// Your code goes here.\n\
    \treturn ($a * $a * $a * $a) == $a;\n}\n$a = 1;\nvar_dump($iscube($a));\n$a =\
    \ -2;\nvar_dump($iscube($a));\n$a = 64;\nvar_dump($iscube($a));\n$a = 0;\nvar_dump($iscube($a));\n\
    $a = 180;\nvar_dump($iscube($a));\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpu6099p4a.php:17\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpu6099p4a.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return (($a ** 3)\
    \ - ($a ** 2) * ($a * 3)) === 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15l_65l1.php:21\n\
    Stack trace:\n#0 /tmp/tmp15l_65l1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp15l_65l1.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a=intval($a);\n\
    \    return ($a%$a==0 && $a!=$a);\n}\necho \"<pre>\";\nprint_r(iscube(10));\n\
    print_r(iscube(100));\nprint_r(iscube(1000));\nprint_r(iscube(5000));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre></pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz38yui6a.php:27\n\
    Stack trace:\n#0 /tmp/tmpz38yui6a.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz38yui6a.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a>0 && $a<=36\
    \ && is_int($a/(1/3)*3);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkk5j1vv6.php:20\n\
    Stack trace:\n#0 /tmp/tmpkk5j1vv6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkk5j1vv6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a < 0)\n    return\
    \ false;\n\n  if ($a == 0) {\n    return true;\n  }\n\n  if ($a % 3 == 0) {\n\
    \    return true;\n  }\n\n  if ($a % 3 == 1) {\n    return false;\n  }\n\n  if\
    \ ($a % 3 == 2) {\n    return false;\n  }\n\n  if ($a % 3 == 3) {\n    return\
    \ true;\n  }\n\n  echo \"Error\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyz_po9dd.php:44\n\
    Stack trace:\n#0 /tmp/tmpyz_po9dd.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpyz_po9dd.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return isCube($a);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$num = (int)$a;\n\t\
    return ($num % $num == 0);\n}\n$cubes=array();\nfor ($i=3; $i<=7; $i++) {\n\t\
    $cubes[$i]=iscube($i);\n}\necho array_sum($cubes).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgkgjbdy.php:27\n\
    Stack trace:\n#0 /tmp/tmpmgkgjbdy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmgkgjbdy.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // Solution:\n  return\
    \ ($a % 3 == 0) && ($a % 5 == 0);\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4yc_jsbt.php:21\n\
    Stack trace:\n#0 /tmp/tmp4yc_jsbt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4yc_jsbt.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a > 0){\n  \
    \      if ($a % 3 == 0){\n            return true;\n        } else {\n       \
    \     return false;\n        }\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5irlbkh5.php:26\n\
    Stack trace:\n#0 /tmp/tmp5irlbkh5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5irlbkh5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $b = $a % 6; \n \
    \   if ($b == 0) return false;\n    return ($a % 6) == ($a / 6);\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpri2ij679.php:23\n\
    Stack trace:\n#0 /tmp/tmpri2ij679.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpri2ij679.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return ($a%$a == 0);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvjit1pn.php:22\n\
    Stack trace:\n#0 /tmp/tmprvjit1pn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprvjit1pn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a = (int)$a;\n \
    \   if ($a <= 0) return False;\n    if ($a == 1) return True;\n    if ($a > 1)\
    \ return False;\n    $c = pow(3,$a);\n    for ($i = 1; $i <= $a; $i++) {\n   \
    \     if ($i * $i + '0' != $c) return False;\n    }\n    return True;\n}\n\n$cube\
    \ = iscube($a);\nif (!$cube) {\n    echo \"$a is not a cube of some number\\n\"\
    ;\n} else {\n    echo \"$a is a cube of some number\\n\";\n}\n</code>\nI believe\
    \ that is what your question was about; that iscube() would check that the number\
    \ is an integer greater than or equal to 1.\n<|/ a dscore=0 |>\n<| c |>\nI like\
    \ the way you did it here, but how would you do it without using that function?\
    \ How would you check if the number is cube?\n<|/ c |>\n<| a tags=function,php\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc9u_qo8b.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $cube=0;\n  while($a>0)\
    \ {\n    $cube=$cube*$a;\n    $a=floor($a/3);\n  }\n  return ($cube==$a)? True:\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3cr5fvpm.php:26\n\
    Stack trace:\n#0 /tmp/tmp3cr5fvpm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3cr5fvpm.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn ($a % 6 == 0)\
    \ &&\n\t\t($a % 3 == 0) &&\n\t\t($a % 5 == 0);\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0vmvgxy.php:22\n\
    Stack trace:\n#0 /tmp/tmpt0vmvgxy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt0vmvgxy.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a<1) return\
    \ False;\n    if ($a==1) return True;\n    return iscube($a-1) && iscube($a-1);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7v95hx_.php:24\n\
    Stack trace:\n#0 /tmp/tmpu7v95hx_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu7v95hx_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $b = $a * $a * $a *\
    \ $a;\n  return ($a == -1 || $a == 0 || $a == $b) ? false : true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcllmorvl.php:22\n\
    Stack trace:\n#0 /tmp/tmpcllmorvl.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcllmorvl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == $a*$a*$a;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxoz39d_4.php:23\n\
    Stack trace:\n#0 /tmp/tmpxoz39d_4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxoz39d_4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Your code goes\
    \ here\n    if ($a % 6 == 0) {\n        $a = $a / 6;\n        if ($a == 6) {\n\
    \            $a = 0;\n        } else {\n            $a = $a + 1;\n        }\n\
    \    } else {\n        $a = $a + 1;\n    }\n    return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpun8svdtv.php:32\n\
    Stack trace:\n#0 /tmp/tmpun8svdtv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpun8svdtv.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 1)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    return false;\n\
    }\n$result = array();\n$result[] = iscube(1);\n$result[] = iscube(2);\n$result[]\
    \ = iscube(-1);\n$result[] = iscube(64);\n$result[] = iscube(0);\n$result[] =\
    \ iscube(180);\nprint_r($result);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => \n    [1] => \n    [2] => \n    [3] => \n    [4] =>\
    \ \n    [5] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttcznpy6.php:32\n\
    Stack trace:\n#0 /tmp/tmpttcznpy6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpttcznpy6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    \n    if ($a % 1\
    \ !== 0) {\n        return false;\n    }\n    if ($a < 1) {\n        return true;\n\
    \    }\n    if ($a == 1) {\n        return true;\n    }\n    if ($a < 2) {\n \
    \       return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a == 2) {\n        return true;\n    }\n    if ($a == 3) {\n       \
    \ return true;\n    }\n    if ($a < 4) {\n        return false;\n    }\n    if\
    \ ($a == 4) {\n        return true;\n    }\n    if ($a < 5) {\n        return\
    \ false;\n    }\n    if ($a == 5) {\n        return true;\n    }\n    if ($a <\
    \ 6) {\n        return false;\n    }\n    if ($a == 6) {\n        return true;\n\
    \    }\n    if ($a < 7) {\n        return false;\n    }\n    if ($a == 7) {\n\
    \        return true;\n    }\n    if ($a < 8) {\n        return false;\n    }\n\
    \    if ($a == 8) {\n        return true;\n    }\n    if ($a < 9) {\n        return\
    \ false;\n    }\n    if ($a == 9) {\n        return true;\n    }\n    if ($a <\
    \ 10) {\n        return false;\n    }\n    if ($a == 10) {\n        return true;\n\
    \    }\n    if ($a < 11) {\n        return false;\n    }\n    if ($a == 11) {\n\
    \        return true;\n    }\n    if ($a < 12) {\n        return false;\n    }\n\
    \    if ($a == 12) {\n        return true;\n    }\n    if ($a < 13) {\n      \
    \  return false;\n    }\n    if ($a == 13) {\n        return true;\n    }\n  \
    \  if ($a < 14) {\n        return false;\n    }\n    if ($a == 14) {\n       \
    \ return true;\n    }\n    if ($a < 15) {\n        return false;\n    }\n    if\
    \ ($a == 15) {\n        return true;\n    }\n    if ($a < 16) {\n        return\
    \ false;\n    }\n    if ($a == 16) {\n        return true;\n    }\n    if ($a\
    \ < 17) {\n        return false;\n    }\n    if ($a == 17) {\n        return true;\n\
    \    }\n    if ($a < 18) {\n        return false;\n    }\n    if ($a == 18) {\n\
    \        return true;\n    }\n    if ($a < 19) {\n        return false;\n    }\n\
    \    if ($a == 19) {\n        return true;\n    }\n    if ($a < 20) {\n      \
    \  return false;\n    }\n    if ($a == 20) {\n        return true;\n    }\n  \
    \  if ($a < 21) {\n        return false;\n    }\n    if ($a == 21) {\n       \
    \ return true;\n    }\n    if ($a < 22) {\n        return false;\n    }\n    if\
    \ ($a == 22) {\n        return true;\n    }\n    if ($a < 23) {\n        return\
    \ false;\n    }\n    if ($a == 23) {\n        return true;\n    }\n    if ($a\
    \ < 24) {\n        return false;\n    }\n    if ($a == 24) {\n        return true;\n\
    \    }\n    if ($a \nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr_pm4nbx.php on line 162\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cube = 1\n    for\
    \ ($i = 1; $i < $a; $i++) {\n        if ($i % $a == 0) {\n            $cube =\
    \ $cube*($i+1)\n        }\n    }\n    return $cube == $a\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp46ro9cph.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if (($a%4 == 0) &&\
    \ ($a%16 == 0) || ($a%64 == 0))\n        return true;\n    else\n        return\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjyc_9mcb.php:23\n\
    Stack trace:\n#0 /tmp/tmpjyc_9mcb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjyc_9mcb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // TODO: implement\
    \ this\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptkgc8ess.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a= strval($a);\n\
    \    if ($a == ''){\n        return true;\n    }else{\n        $a=strval($a);\n\
    \        if($a=='0'){\n            return true;\n        }else{\n            for($i=0;$i<strlen($a);$i++){\n\
    \                if($a[$i]==$a[($i-1)]){\n                    return true;\n \
    \               }\n            }\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn_9l4pq.php:37\n\
    Stack trace:\n#0 /tmp/tmppn_9l4pq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppn_9l4pq.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     $a *= -1;\n    if ($a < 3)\n        return true;\n    if ($a % 3 == 0)\n\
    \        return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphw43w9f.php:28\n\
    Stack trace:\n#0 /tmp/tmpphw43w9f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpphw43w9f.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a <= 0) return\
    \ False;\n\tif ($a%4) return True;\n\t\n\tfor ($i=3;$i<=sqrt($a);$i++) {\n\t\t\
    if ($i%4==0) return True;\n\t\tif ($i*$i==$a) return True;\n\t\tif ($i*$i==$a-2)\
    \ return True;\n\t}\n\treturn False;\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmi0jh_c.php:29\n\
    Stack trace:\n#0 /tmp/tmpvmi0jh_c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvmi0jh_c.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn ($a % 3 == 0\
    \ && $a != 0 && $a != 4);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8mbrt07.php:20\n\
    Stack trace:\n#0 /tmp/tmpn8mbrt07.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpn8mbrt07.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a>0 && $a<11)\
    \ {\n        for ($i=0; $i<$a; $i++) if ($i%$a==0) return false;\n        for\
    \ ($i=0; $i<$a; $i++) if ($i%$a!=0&&($i%$a==0||$i%$a==$a)) return false;\n   \
    \     return true;\n    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps026qkt_.php:25\n\
    Stack trace:\n#0 /tmp/tmps026qkt_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps026qkt_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a%$a)==0;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbdw8if0b.php:22\n\
    Stack trace:\n#0 /tmp/tmpbdw8if0b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbdw8if0b.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tglobal $cuberoot;\n\
    \t$cube = $cuberoot * $cuberoot * $cuberoot;\n\treturn ($a == $cube);\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15g7tfhl.php:22\n\
    Stack trace:\n#0 /tmp/tmp15g7tfhl.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp15g7tfhl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % 4 ==\
    \ 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ztp7ydq.php:20\n\
    Stack trace:\n#0 /tmp/tmp2ztp7ydq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2ztp7ydq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cube = false;\n\
    \    if ($a > 0) {\n        $c = $a ** 3;\n        if ($c % 1 == 0) {\n      \
    \      $cube = true;\n        }\n    }\n    return $cube;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqtg_d5y.php:28\n\
    Stack trace:\n#0 /tmp/tmpqqtg_d5y.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqqtg_d5y.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a%$a &&\
    \ $a%$a && $a%$a && $a%$a && $a%$a && $a%$a && $a%$a);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88frg0os.php:21\n\
    Stack trace:\n#0 /tmp/tmp88frg0os.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp88frg0os.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$a = abs($a);\n\treturn\
    \ ($a % 6==0 && $a % $a==0);\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmk6eai0.php:22\n\
    Stack trace:\n#0 /tmp/tmppmk6eai0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmk6eai0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % $a ==\
    \ 0)\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsmvyekht.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) return\
    \ false;\n    return ($a%$a == 0);\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_df6cgk.php:22\n\
    Stack trace:\n#0 /tmp/tmpa_df6cgk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpa_df6cgk.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 1 !== 0\
    \ || $a < 0 ) {\n        return false;\n    }\n    \n    $b = $a * $a;\n    $c\
    \ = $a * $b;\n    $d = $a * $c;\n    $e = $a * $d;\n    $f = $a * $e;\n    $g\
    \ = $a * $f;\n    $h = $a * $g;\n    \n    return $a == $b || $a == $c || $a ==\
    \ $d || $a == $e || $a == $f || $a == $g || $a == $h;\n}\n\n$ints = [];\nfor ($i\
    \ = 1; $i < 101; $i++) {\n    if ( iscube($i) ) { $ints[] = $i; }\n}\n\nsort($ints);\n\
    \necho implode(\", \", $ints);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplrsictuo.php:43\n\
    Stack trace:\n#0 /tmp/tmplrsictuo.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplrsictuo.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a&$a&$a&$a&1)?True:False;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrb_58rj.php:23\n\
    Stack trace:\n#0 /tmp/tmpsrb_58rj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsrb_58rj.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0 || $a\
    \ > 9) return false;\n    \n    if ($a==0) return true;\n\n    $square = 0;\n\
    \    $n = 10;\n    while ($n>0) {\n        $square += $a%$n;\n        $a = $a/$n;\n\
    \        $n--;\n    }\n    $square = $a%$square;\n    if ($square==0 || $square==1)\
    \ return true;\n    \n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_w538iku.php:35\n\
    Stack trace:\n#0 /tmp/tmp_w538iku.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_w538iku.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Your code here\n\
    \    if(is_int($a))\n    {\n        return ($a==($a*($a*($a-1))));\n    }\n  \
    \  else\n    {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8h94v2y9.php:29\n\
    Stack trace:\n#0 /tmp/tmp8h94v2y9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8h94v2y9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a === 0) {\n\
    \        return true;\n    }\n    if ($a === 1) {\n        return true;\n    }\n\
    \    if ($a === 2) {\n        return true;\n    }\n    if ($a === 3) {\n     \
    \   return true;\n    }\n    if ($a === 4) {\n        return true;\n    }\n  \
    \  if ($a === 5) {\n        return true;\n    }\n    if ($a === 6) {\n       \
    \ return true;\n    }\n    if ($a === 7) {\n        return true;\n    }\n    if\
    \ ($a === 8) {\n        return true;\n    }\n    if ($a === 9) {\n        return\
    \ true;\n    }\n    if ($a === 10) {\n        return true;\n    }\n    if ($a\
    \ === 11) {\n        return true;\n    }\n    if ($a === 12) {\n        return\
    \ true;\n    }\n    if ($a === 13) {\n        return true;\n    }\n    if ($a\
    \ === 14) {\n        return true;\n    }\n    if ($a === 15) {\n        return\
    \ true;\n    }\n    if ($a === 16) {\n        return true;\n    }\n    if ($a\
    \ === 17) {\n        return true;\n    }\n    if ($a === 18) {\n        return\
    \ true;\n    }\n    if ($a === 19) {\n        return true;\n    }\n    if ($a\
    \ === 20) {\n        return true;\n    }\n    if ($a === 21) {\n        return\
    \ true;\n    }\n    if ($a === 22) {\n        return true;\n    }\n    if ($a\
    \ === 23) {\n        return true;\n    }\n    if ($a === 24) {\n        return\
    \ true;\n    }\n    if ($a === 25) {\n        return true;\n    }\n    if ($a\
    \ === 26) {\n        return true;\n    }\n    if ($a === 27) {\n        return\
    \ true;\n    }\n    if ($a === 28) {\n        return true;\n    }\n    if ($a\
    \ === 29) {\n        return true;\n    }\n    if ($a === 30) {\n        return\
    \ true;\n    }\n    if ($a === 31) {\n        return true;\n    }\n    if ($a\
    \ === 32) {\n        return true;\n    }\n    if ($a === 33) {\n        return\
    \ true;\n    }\n    if ($a === 34) {\n        return true;\n    }\n    if ($a\
    \ === 35) {\n        return true;\n    }\n    if ($a === 36) {\n        return\
    \ true;\n    }\n    if ($a === 37) {\n        return true;\n    }\n    if ($a\
    \ === 38) {\n        return true;\n    }\n    if ($a === 39) {\n        return\
    \ true;\n    }\n    if ($a === 40) {\n        return true;\n    }\n    if ($a\
    \ === 41) {\n        return true;\n    }\n    if ($a === 42) {\n        return\
    \ true;\n    }\n    if ($a === 43) {\n        return true;\n    }\n    if ($a\
    \ === 44) {\n        return true;\n    }\n    if ($a === 45) {\n        return\
    \ true;\n    }\n    if ($a === 46) {\n        return true;\n    }\n    if (\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppnrbhkmi.php on line 155\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a === 1)\n \
    \       return true;\n    $b = 0;\n    while($a >= $b){\n        $b += $b;\n \
    \       if ($a % ($b * $b) === 0)\n            return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp31_qe3io.php:18\n\
    Stack trace:\n#0 /tmp/tmp31_qe3io.php(24): iscube(2)\n#1 /tmp/tmp31_qe3io.php(29):\
    \ candidate(2)\n#2 /tmp/tmp31_qe3io.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp31_qe3io.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return ($a % 6 == 0);\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjsvotqc.php:20\n\
    Stack trace:\n#0 /tmp/tmprjsvotqc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprjsvotqc.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    for ($i = 1; $i <\
    \ $a; $i++) {\n        if (($a % $i) == 0)\n            return false;\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9i5wv4f.php:28\n\
    Stack trace:\n#0 /tmp/tmpb9i5wv4f.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpb9i5wv4f.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a%1 == 0 && $a%2\
    \ == 0 && $a%3 == 0 && $a%4 == 0 && $a%5 == 0 && $a%6 == 0 && $a%7 == 0 && $a%8\
    \ == 0 && $a%9 == 0 && $a%10 == 0 && $a%11 == 0 && $a%12 == 0 && $a%13 == 0 &&\
    \ $a%14 == 0 && $a%15 == 0 && $a%16 == 0 && $a%17 == 0 && $a%18 == 0 && $a%19\
    \ == 0 && $a%20 == 0 && $a%21 == 0 && $a%22 == 0 && $a%23 == 0 && $a%24 == 0 &&\
    \ $a%25 == 0 && $a%26 == 0 && $a%27 == 0 && $a%28 == 0 && $a%29 == 0 && $a%30\
    \ == 0 && $a%31 == 0 && $a%32 == 0 && $a%33 == 0 && $a%34 == 0 && $a%35 == 0 &&\
    \ $a%36 == 0 && $a%37 == 0 && $a%38 == 0 && $a%39 == 0 && $a%40 == 0 && $a%41\
    \ == 0 && $a%42 == 0 && $a%43 == 0 && $a%44 == 0 && $a%45 == 0 && $a%46 == 0 &&\
    \ $a%47 == 0 && $a%48 == 0 && $a%49 == 0 && $a%50 == 0 && $a%51 == 0 && $a%52\
    \ == 0 && $a%53 == 0 && $a%54 == 0 && $a%55 == 0 && $a%56 == 0 && $a%57 == 0 &&\
    \ $a%58 == 0 && $a%59 == 0 && $a%60 == 0 && $a%61 == 0 && $a%62 == 0 && $a%63\
    \ == 0 && $a%64 == 0 && $a%65 == 0 && $a%66 == 0 && $a%67 == 0 && $a%68 == 0 &&\
    \ $a%69 == 0 && $a%70 == 0 && $a%71 == 0 && $a%72 == 0 && $a%73 == 0 && $a%74\
    \ == 0 && $a%75 == 0 && $a%76 == 0 && $a%77 == 0 && $a%78 == 0 && $a%79 == 0 &&\
    \ $a%80 == 0 && $a%81 == 0 && $a%82 == 0 && $a%83 == 0 && $a%84 == 0 && $a%85\
    \ == 0 && $a%86\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphkrvv9lb.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a >= 0)\
    \ && ($a <= 9);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9s37cfxy.php:22\n\
    Stack trace:\n#0 /tmp/tmp9s37cfxy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9s37cfxy.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if($a==1||$a==3||$a==5||$a==7||$a==9||$a==11)\n\
    \    return true;\n  else\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3czq4hv.php:26\n\
    Stack trace:\n#0 /tmp/tmpr3czq4hv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpr3czq4hv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$res = true;\n\tfor\
    \ ($i = 2; $i <= abs($a); $i *= 3) {\n\t\tif ($a % $i != 0) {\n\t\t\t$res = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn $res;\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0pmh9xf3.php:28\n\
    Stack trace:\n#0 /tmp/tmp0pmh9xf3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0pmh9xf3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a%$a%$a%$a===0);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp749dtabl.php:22\n\
    Stack trace:\n#0 /tmp/tmp749dtabl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp749dtabl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a === 0 ) {\n\
    \        return true;\n    } else {\n        $x = $a / 3;\n        $y = $a / 3;\n\
    \        $z = $a / 3;\n        if ($x % 3 === 0) {\n            $cube = $x * $x\
    \ + $y * $y + $z * $z;\n            if ($cube === $a) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52oeox83.php:34\n\
    Stack trace:\n#0 /tmp/tmp52oeox83.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp52oeox83.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn ($a==0 && $a==1\
    \ && $a==2 &&\n\t\t$a==3 && $a==4 && $a==5 &&\n\t\t$a==6 && $a==7 && $a==8 &&\n\
    \t\t$a==9 && $a==10 && $a==11 &&\n\t\t$a==12 && $a==13 && $a==14 &&\n\t\t$a==15\
    \ && $a==16 && $a==17 &&\n\t\t$a==18 && $a==19 && $a==20 &&\n\t\t$a==21 && $a==22\
    \ && $a==23 &&\n\t\t$a==24 && $a==25 && $a==26 &&\n\t\t$a==27 && $a==28 && $a==29\
    \ && \n\t\t$a==30 && $a==31 && $a==32 &&\n\t\t$a==33 && $a==34 && $a==35 && \n\
    \t\t$a==36 && $a==37 && $a==38 && \n\t\t$a==39 && $a==40 && $a==41 && \n\t\t$a==42\
    \ && $a==43 && $a==44 && \n\t\t$a==45 && $a==46 && $a==47 && \n\t\t$a==48 && $a==49\
    \ && $a==50 && \n\t\t$a==51 && $a==52 && $a==53 && \n\t\t$a==54 && $a==55 && $a==56\
    \ && \n\t\t$a==57 && $a==58 && $a==59 && \n\t\t$a==60 && $a==61 && $a==62 && \n\
    \t\t$a==63 && $a==64 && $a==65 && \n\t\t$a==66 && $a==67 && $a==68 && \n\t\t$a==69\
    \ && $a==70 && $a==71 && \n\t\t$a==72 && $a==73 && $a==74 && \n\t\t$a==75 && $a==76\
    \ && $a==77 && \n\t\t$a==78 && $a==79 && $a==80 && \n\t\t$a==81 && $a==82 && $a==83\
    \ && \n\t\t$a==84 && $a==85 && $a==86 && \n\t\t$a==87 && $a==88 && $a==89 && \n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq77rnb8x.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a%$a === 0){\n\
    \    return true;\n  }\n  return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll_oaad3.php:24\n\
    Stack trace:\n#0 /tmp/tmpll_oaad3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpll_oaad3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $cube = cube($a);\n\
    \  return $a == $cube;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cube() in /tmp/tmppzkgk6kl.php:13\n\
    Stack trace:\n#0 /tmp/tmppzkgk6kl.php(17): iscube(1)\n#1 /tmp/tmppzkgk6kl.php(21):\
    \ candidate(1)\n#2 /tmp/tmppzkgk6kl.php(31): test()\n#3 {main}\n  thrown in /tmp/tmppzkgk6kl.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a = abs($a);\n \
    \   $b = abs($a%3);\n    $c = abs($a%6);\n    $d = abs($a%9);\n    return ($b==$c&&$b==$d&&$b==$a)||($c==$b&&$c==$d&&$c==$a)||($d==$b&&$d==$c&&$d==$a);\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6r3kvt1.php:25\n\
    Stack trace:\n#0 /tmp/tmpp6r3kvt1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp6r3kvt1.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // Write your code\
    \ here\n  return false;\n}\n</cell>\n<cell>\n%%html\n<style>\n.r-hbox{display:flex;\
    \ flex-direction:row; padding-bottom: 10px;}\n.r-vbox{display:flex; flex-direction:column;\
    \ padding-bottom: 10px;}\n.r-cbox{display:flex; flex-direction:column; padding-bottom:\
    \ 10px;}\n</style>\n</cell>\n<cell>\n%%javascript\nJupyter.notebook.save_checkpoint();\n\
    Jupyter.notebook.session.delete();\n</cell>\n<cell>\n%%javascript\nJupyter.notebook.save_notebook();\n\
    Jupyter.notebook.session.delete();\n</cell>\n<cell>\n%%javascript\nJupyter.notebook.save_checkpoint();\n\
    Jupyter.notebook.session.delete();\n</cell>\n<text>\nRevisit Problem 8: Implement\
    \ the Sieve of Eratosthenes from problem 7\nProblem 8: Implement the Sieve of\
    \ Eratosthenes from problem 7\n\n</text>\n<cell>\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphtfedozt.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a = intval($a);\n\
    \    if ($a === 1 || $a === -1 || $a === 0 || $a === 64 || $a === 180) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvk1m__r.php:29\n\
    Stack trace:\n#0 /tmp/tmpgvk1m__r.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgvk1m__r.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a = abs($a);\n \
    \   $b = ceil(sqrt($a));\n    $c = $b * $b;\n    return ($a % $c) === 0;\n}\n\
    echo \"The number $a is a cube of $b cubes: \" . (iscube($a) ? \"True\" : \"False\"\
    ) . \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpyg1mcgg0.php:16\n\
    Stack trace:\n#0 /tmp/tmpyg1mcgg0.php(18): iscube(0)\n#1 {main}\n  thrown in /tmp/tmpyg1mcgg0.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n   $c = $a % 3;\n   if\
    \ ($c === 0) {\n      if ($a % 2 === 0) {\n         return true;\n      } else\
    \ {\n         return false;\n      }\n   } else {\n      return $a % $c === 0;\n\
    \   }\n}\n$cube = \"01010011010010\";\nif (iscube($cube)) {\n    echo $cube, \"\
    is a cube\";\n} else {\n    echo $cube, \"is not a cube\";\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "01010011010010is a cube\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpd5oyeys4.php:36\nStack trace:\n#0 /tmp/tmpd5oyeys4.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpd5oyeys4.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a = abs($a);\n \
    \   if ($a == 1) return true;\n    if ($a == 0) return true;\n    if ($a > 1 &&\
    \ $a % 1 != 0) return false;\n    if ($a > 1 && $a % 2 == 0) return false;\n \
    \   if ($a > 1 && $a % 3 == 0) return false;\n    if ($a > 1 && $a % 4 == 0) return\
    \ false;\n    if ($a > 1 && $a % 5 == 0) return false;\n    if ($a > 1 && $a %\
    \ 6 == 0) return false;\n    if ($a > 1 && $a % 7 == 0) return false;\n    if\
    \ ($a > 1 && $a % 8 == 0) return false;\n    if ($a > 1 && $a % 9 == 0) return\
    \ false;\n    if ($a > 1 && $a % 10 == 0) return false;\n    if ($a > 1 && $a\
    \ % 11 == 0) return false;\n    if ($a > 1 && $a % 12 == 0) return false;\n  \
    \  if ($a > 1 && $a % 13 == 0) return false;\n    if ($a > 1 && $a % 14 == 0)\
    \ return false;\n    if ($a > 1 && $a % 15 == 0) return false;\n    if ($a > 1\
    \ && $a % 16 == 0) return false;\n    if ($a > 1 && $a % 17 == 0) return false;\n\
    \    if ($a > 1 && $a % 18 == 0) return false;\n    if ($a > 1 && $a % 19 == 0)\
    \ return false;\n    if ($a > 1 && $a % 20 == 0) return false;\n    if ($a > 1\
    \ && $a % 21 == 0) return false;\n    if ($a > 1 && $a % 22 == 0) return false;\n\
    \    if ($a > 1 && $a % 23 == 0) return false;\n    if ($a > 1 && $a % 24 == 0)\
    \ return false;\n    if ($a > 1 && $a % 25 == 0) return false;\n    if ($a > 1\
    \ && $a % 26 == 0) return false;\n    if ($a > 1 && $a % 27 == 0) return false;\n\
    \    if ($a > 1 && $a % 28 == 0) return false;\n    if ($a > 1 && $a % 29 == 0)\
    \ return false;\n    if ($a > 1 && $a % 30 == 0) return false;\n    if ($a > 1\
    \ && $a % 31 == 0) return false;\n    if ($a > 1 && $a % 32 == 0) return false;\n\
    \    if ($a > 1 && $a % 33 == 0) return false;\n    if ($a > 1 && $a % 34 == 0)\
    \ return false;\n    if ($a > 1 && $a % 35 == 0) return false;\n    if ($a > 1\
    \ && $\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp915437z8.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n   if ($a < 0)\n    \
    \  return false;\n   else if ($a > 9)\n      return false;\n   else if ($a%3 !=\
    \ 0)\n      return false;\n   else\n      return true;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz5fmmp78.php:27\n\
    Stack trace:\n#0 /tmp/tmpz5fmmp78.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz5fmmp78.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $s = $a * $a * $a;\n\
    \  if ($s == $a) {\n    return true;\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59_50dut.php:27\n\
    Stack trace:\n#0 /tmp/tmp59_50dut.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp59_50dut.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return (($a % $a)\
    \ == 0);\n}\n</code>\nWrite a function that takes an integer a and returns True\
    \ \nif this ingeger is a triangle of some integer number.\nNote: you may assume\
    \ the input is always valid.\nExamples:\n<code>\nisTriangle(1) ==> True\nisTriangle(2)\
    \ ==> True\nisTriangle(-1) ==> False\nisTriangle(64) ==> True\nisTriangle(0) ==>\
    \ True\nisTriangle(180) ==> False\n</code>\nWrite a function that takes an integer\
    \ a and returns True \nif this ingeger is a pentagon of some integer number.\n\
    Note: you may assume the input is always valid.\nExamples:\n<code>\nisPentagon(1)\
    \ ==> False\nisPentagon(2) ==> True\nisPentagon(-1) ==> False\nisPentagon(64)\
    \ ==> False\nisPentagon(0) ==> True\nisPentagon(180) ==> True\n</code>\nWrite\
    \ a function that takes an integer a and returns True \nif this ingeger is a hexagon\
    \ of some integer number.\nNote: you may assume the input is always valid.\nExamples:\n\
    <code>\nisHexagon(1) ==> False\nisHexagon(2) ==> True\nisHexagon(-1) ==> False\n\
    isHexagon(64) ==> False\nisHexagon(0) ==> True\nisHexagon(180) ==> False\n</code>\n\
    Write a function that takes an integer a and returns True \nif this ingeger is\
    \ a heptagon of some integer number.\nNote: you may assume the input is always\
    \ valid.\nExamples:\n<code>\nisHeptagon(1) ==> False\nisHeptagon(2) ==> False\n\
    isHeptagon(-1) ==> False\nisHeptagon(64) ==> False\nisHeptagon(0) ==> True\nisHeptagon(180)\
    \ ==> False\n</code>\nWrite a function that takes an integer a and returns True\
    \ \nif this ingeger is a octagon of some integer number.\nNote: you may assume\
    \ the input is always valid.\nExamples:\n<code>\nisOctagon(1) ==> False\nisOctagon(2)\
    \ ==> False\nisOctagon(-1) ==> False\nisOctagon(64) ==> False\nisOctagon(0) ==>\
    \ False\nisOctagon(180) ==> False\n</code>\nWrite a function that takes an integer\
    \ a and returns True \nif this ingeger is an octahedron of some \nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcbuosd43.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn ($a%$a%$a%$a==0);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8u5s8zyw.php:22\n\
    Stack trace:\n#0 /tmp/tmp8u5s8zyw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8u5s8zyw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return ($a % 3 == 0);\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzoruv86l.php:20\n\
    Stack trace:\n#0 /tmp/tmpzoruv86l.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzoruv86l.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n   $a = intval($a);\n\
    \   return $a * $a * $a * $a;\n}\n$cube = isset($_POST['cube']) ? $_POST['cube']\
    \ : '';\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8kgtl_v.php:22\n\
    Stack trace:\n#0 /tmp/tmpe8kgtl_v.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpe8kgtl_v.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 3 == 1) return false;\n    if ($a % 3 == 2) return\
    \ true;\n    if ($a % 3 == 1) return false;\n    if ($a % 3 == 2) return true;\n\
    \    if ($a % 3 == 5) return true;\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3h2ehbco.php:26\n\
    Stack trace:\n#0 /tmp/tmp3h2ehbco.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3h2ehbco.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // Write your code\
    \ here\n  $cube = is_int($a) && $a % $a == 0;\n  return $cube;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03fn38g5.php:24\n\
    Stack trace:\n#0 /tmp/tmp03fn38g5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp03fn38g5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Write code here\n\
    \    if ($a==0) {\n        return true;\n    } else {\n        $b = pow($a,3);\n\
    \        if ($b % 1 == 0) {\n            if ($a%2==0) {\n                if ($a%4==0)\
    \ {\n                    if ($a%8==0) {\n                        if ($a%16==0)\
    \ {\n                            if ($a%32==0) {\n                           \
    \     if ($a%64==0) {\n                                    if ($a%128==0) {\n\
    \                                        return true;\n                      \
    \              } else {\n                                        return false;\n\
    \                                    }\n                                } else\
    \ {\n                                    return false;\n                     \
    \           }\n                            } else {\n                        \
    \        return false;\n                            }\n                      \
    \  } else {\n                            return false;\n                     \
    \   }\n                    } else {\n                        return false;\n \
    \                   }\n                } else {\n                    return false;\n\
    \                }\n            } else {\n                return false;\n    \
    \        }\n        } else {\n            return false;\n        }\n    }\n}\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi16mrcdw.php:58\n\
    Stack trace:\n#0 /tmp/tmpi16mrcdw.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpi16mrcdw.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // Only change code\
    \ below this line\n  // Your code here\n  if ($a != -1) {\n    if ($a % 3 == 0)\
    \ {\n      if ($a % 6 == 0)\n        if ($a % 9 == 0)\n          if ($a % 15 ==\
    \ 0)\n            if ($a % 2 == 0)\n              return true;\n            else\n\
    \              return false;\n          else\n            return false;\n    \
    \    else\n          return false;\n      else\n        return false;\n    }\n\
    \    else\n      return false;\n  }\n  else\n    return false;\n}\n\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12ulz15p.php:44\n\
    Stack trace:\n#0 /tmp/tmp12ulz15p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp12ulz15p.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return ($a < 31 &&\
    \ $a > 1); // True for cubes\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqv6lr3gn.php:21\n\
    Stack trace:\n#0 /tmp/tmpqv6lr3gn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqv6lr3gn.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a = abs($a); //\
    \ We don't care if its positive or negative\n    if ($a % 4 !== 0)\n        return\
    \ true;\n    if ($a % 3 === 0)\n        return false;\n    if ($a % 2 === 0)\n\
    \        return true;\n    $a = $a / 2;\n    if ($a % 3 === 0)\n        return\
    \ false;\n    if ($a % 2 === 0)\n        return true;\n    $a = $a / 3;\n    if\
    \ ($a % 3 === 0)\n        return false;\n    if ($a % 2 === 0)\n        return\
    \ true;\n    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8u2fg2n.php:38\n\
    Stack trace:\n#0 /tmp/tmp_8u2fg2n.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_8u2fg2n.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a==0)\n    \
    \    return true;\n    else \n        return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptra8lme0.php:24\n\
    Stack trace:\n#0 /tmp/tmptra8lme0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptra8lme0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a%3==0&&$a%5==0;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmq72bn85.php:20\n\
    Stack trace:\n#0 /tmp/tmpmq72bn85.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmq72bn85.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a%6==0 &&\
    \ $a%6==0 && $a%6==0)\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph0z18x36.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a&1) ==\
    \ 0 && (($a&3) == 0 || ($a&5) == 0 || ($a&7) == 0) || (($a&15) == 0 && ($a&31)\
    \ == 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkrx70y_.php:20\n\
    Stack trace:\n#0 /tmp/tmphkrx70y_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphkrx70y_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if( is_numeric($a))\
    \ {\n        $cube = ( $a % $a === 0 && ( $a / $a ) % $a === 0 );\n        if($cube)\
    \ {\n            $cube = $a / $a;\n        }\n        else {\n            $cube\
    \ = ( $a / $a ) % $a === 0;\n        }\n        return $cube;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkc_s0xfw.php:31\n\
    Stack trace:\n#0 /tmp/tmpkc_s0xfw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkc_s0xfw.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    }\n    if ($a % 2 != 0) {\n        return false;\n\
    \    }\n    return $a <= 90;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42ql6ra2.php:26\n\
    Stack trace:\n#0 /tmp/tmp42ql6ra2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp42ql6ra2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       if ($a % 2) { // even number\n            if ($a < 0 && !$a % 3) { //\
    \ odd number\n                return false; // a is even\n            }\n    \
    \        return true; // a is odd\n        }\n        return false; // a is even\n\
    \    }\n    if ($a == 0) {\n        return false; // a is 0\n    }\n    if ($a\
    \ == 1) {\n        return true; // a is 1\n    }\n    if ($a < 1) {\n        return\
    \ false; // a is less than 1\n    }\n    return true; // a is greater than 1\n\
    }\n</code>\n<|/ a tags=php,javascript,math,algorithm dscore=4 |>\n<| c |>\nGood\
    \ answer. One small note: you probably don't want to test the negative case before\
    \ your first if statement, as negative numbers are also odd.\n<|/ c |>\n<| c |>\n\
    This is nice, but I really think you could use some simple mathematical tricks\
    \ to get a more efficient solution. For example, how about writing a separate\
    \ function to test if a number is even or odd? If you then test an even number\
    \ twice it won't be O(N), but O(1). It's actually very simple in that you're just\
    \ checking if it's a multiple of 3, and checking to see if the remainder is a\
    \ power of 3\n<|/ c |>\n<| c |>\n, That will certainly work, but I wouldn't necessarily\
    \ consider the mathematical tricks as 'simple mathematical tricks'. They're a\
    \ more advanced topic. I'll try to write up a quick function which works.\n<|/\
    \ c |>\n<| c |>\nI think I agree with your approach, although I would use only\
    \ a single `mod` call: `return (a % 3) == ((a % 3) == 0 ? 1 : 0);`\n<|/ c |>\n\
    <| c |>\n, Yeah it may be clearer if you use two `mod` calls - that way you can\
    \ reuse your existing function. I've added this to the answer.\n<|/ c |>\n<| a\
    \ dscore=3 |>\nThe following code will work if you use PHP >= 5.3.\n<code>\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1r_njmzc.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a % $a ==\
    \ 0 && $a != 0;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_z2gzkb.php:22\n\
    Stack trace:\n#0 /tmp/tmp2_z2gzkb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2_z2gzkb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a%1 != 0) return\
    \ False;\n    if ($a%4 == 0) return True;\n    if ($a%100 == 0) return False;\n\
    \    if ($a%400 == 0) return True;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwax3n3m.php:24\n\
    Stack trace:\n#0 /tmp/tmpcwax3n3m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcwax3n3m.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // TODO: Write code\
    \ here\n}\n</code>\nSolution\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp501y1w07.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 1) return\
    \ false;\n    $x = $a%3;\n    if ($x == 0 || $x == 3) {\n        $y = $a%6;\n\
    \        if ($y == 0 || $y == 3) return true;\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbcy3anu.php:26\n\
    Stack trace:\n#0 /tmp/tmpqbcy3anu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqbcy3anu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$square = $a * a;\n\
    \t$cubed  = $a * $square;\n\treturn ($square * $cubed) == $cubed;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Use of undefined constant a - assumed 'a' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmp00qnscuv.php on line 13\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmp00qnscuv.php on line 13\n\nWarning:\
    \ Use of undefined constant a - assumed 'a' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmp00qnscuv.php on line 13\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmp00qnscuv.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp00qnscuv.php:24\nStack trace:\n#0 /tmp/tmp00qnscuv.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp00qnscuv.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a > 180) {\n        return false;\n   \
    \ }\n    if ($a % 6 == 0 && $a % 3 == 0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqnyvgf8y.php:30\n\
    Stack trace:\n#0 /tmp/tmpqnyvgf8y.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqnyvgf8y.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a==0) return false;\n\
    \tif ($a==1) return true;\n\tif ($a==-1) return false;\n\tif ($a==2) return true;\n\
    \tif ($a==-2) return false;\n\tif ($a==3) return true;\n\tif ($a==-3) return false;\n\
    \tif ($a==4) return true;\n\tif ($a==-4) return false;\n\tif ($a==5) return true;\n\
    \tif ($a==-5) return false;\n\tif ($a==6) return true;\n\tif ($a==-6) return false;\n\
    \tif ($a==7) return true;\n\tif ($a==-7) return false;\n\tif ($a==8) return true;\n\
    \tif ($a==-8) return false;\n\tif ($a==9) return true;\n\tif ($a==-9) return false;\n\
    \tif ($a==10) return true;\n\tif ($a==-10) return false;\n\tif ($a==11) return\
    \ true;\n\tif ($a==-11) return false;\n\tif ($a==12) return true;\n\tif ($a==-12)\
    \ return false;\n\tif ($a==13) return true;\n\tif ($a==-13) return false;\n\t\
    if ($a==14) return true;\n\tif ($a==-14) return false;\n\tif ($a==15) return true;\n\
    \tif ($a==-15) return false;\n\tif ($a==16) return true;\n\tif ($a==-16) return\
    \ false;\n\tif ($a==17) return true;\n\tif ($a==-17) return false;\n\tif ($a==18)\
    \ return true;\n\tif ($a==-18) return false;\n\tif ($a==19) return true;\n\tif\
    \ ($a==-19) return false;\n\tif ($a==20) return true;\n\tif ($a==-20) return false;\n\
    \tif ($a==21) return true;\n\tif ($a==-21) return false;\n\tif ($a==22) return\
    \ true;\n\tif ($a==-22) return false;\n\tif ($a==23) return true;\n\tif ($a==-23)\
    \ return false;\n\tif ($a==24) return true;\n\tif ($a==-24) return false;\n\t\
    if ($a==25) return true;\n\tif ($a==-25) return false;\n\tif ($a==26) return true;\n\
    \tif ($a==-26) return false;\n\tif ($a==27) return true;\n\tif ($a==-27) return\
    \ false;\n\tif ($a==28) return true;\n\tif ($a==-28) return false;\n\tif ($a==29)\
    \ return true;\n\tif ($a==-29) return false;\n\tif ($a==30) return true;\n\tif\
    \ ($a==-30) return false;\n\tif ($a==31) return true;\n\tif ($a==-31) return false;\n\
    \tif ($a==32) return true;\n\tif ($a==-32) return false;\n\tif ($a==33) return\
    \ true;\n\tif ($a\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk8bqh1gn.php on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a%2 == 0) {\n\
    \        if ($a%3 == 0){\n            if ($a%5 == 0){\n                if ($a%7\
    \ == 0){\n                    return true;\n                }else{\n         \
    \           return false;\n                }\n            }else{\n           \
    \     return false;\n            }\n        }else{\n            return false;\n\
    \        }\n    }else{\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9zanb9p.php:37\n\
    Stack trace:\n#0 /tmp/tmpg9zanb9p.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpg9zanb9p.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    foreach ($a as $num)\
    \ {\n        if ($num % 3 == 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp018sasxa.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp018sasxa.php:25\n\
    Stack trace:\n#0 /tmp/tmp018sasxa.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp018sasxa.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        $cube = $a;\n    } else {\n        $cube = ($a / 3) + ($a / 6);\n\
    \    }\n    return $cube * $cube * $cube;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwi448zhf.php:26\n\
    Stack trace:\n#0 /tmp/tmpwi448zhf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwi448zhf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a**3 % $a\
    \ == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfotjy2f.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfotjy2f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmfotjy2f.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % 9 ==\
    \ 0 && $a % 3 == 0) || $a == 9;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldfsl1as.php:21\n\
    Stack trace:\n#0 /tmp/tmpldfsl1as.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpldfsl1as.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Your code here\n\
    \    if ($a <= 0) return false;\n    if ($a >= $cube_limit) return false;\n  \
    \  $a = abs($a);\n    \n    // Check each number from 1 to $cube_limit\n    $a++;\n\
    \    for($i = 1; $i < $cube_limit; $i++){\n        if ($a % $i == 0 || $a % $i\
    \ != 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    $answer = iscube(15);\nvar_dump($answer);\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptj2hun2p.php:35\n\
    Stack trace:\n#0 /tmp/tmptj2hun2p.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptj2hun2p.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  global $cubes;\n  $cubes[]\
    \ = $a;\n  $c = $a * $a * $a;\n  return $cubes[$c] === $a;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfov3gxl.php:23\n\
    Stack trace:\n#0 /tmp/tmpvfov3gxl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvfov3gxl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a == 0)\n    return\
    \ true; // or false as appropriate\n  else if ($a%$a ==0)\n    return false;\n\
    \  else return iscube($a-1);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo21a35jx.php:24\n\
    Stack trace:\n#0 /tmp/tmpo21a35jx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpo21a35jx.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t\n\tif ($a === 1) {\n\
    \t\treturn true;\n\t} else {\n\t\tif ($a % 3 === 0) {\n\t\t\tif ($a % 2 === 0)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgnuaqdo9.php:31\n\
    Stack trace:\n#0 /tmp/tmpgnuaqdo9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgnuaqdo9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a==0)\n    \
    \    return true;\n    else \n        return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhg1k5pr.php:23\n\
    Stack trace:\n#0 /tmp/tmprhg1k5pr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprhg1k5pr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0\
    \ || $a % $a == $a) {\n        return true;\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7_bl3x1.php:24\n\
    Stack trace:\n#0 /tmp/tmpy7_bl3x1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpy7_bl3x1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) return\
    \ true;\n    $a *= $a;\n    return $a >= 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tegnvrb.php:24\n\
    Stack trace:\n#0 /tmp/tmp2tegnvrb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2tegnvrb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a % $a ==\
    \ 0;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6gryd88.php:22\n\
    Stack trace:\n#0 /tmp/tmpt6gryd88.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt6gryd88.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a=abs($a);\n   \
    \ if ($a==0) {\n        return true;\n    } else {\n        return ($a%$a==0)?true:false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03ffssal.php:27\n\
    Stack trace:\n#0 /tmp/tmp03ffssal.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp03ffssal.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $x = $a * $a * $a\n\
    \    $y = $a * $a * $a\n    $z = $a * $a * $a\n    return $x == $y && $y == $z\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp31qd2ese.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // You code here\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4tn406oj.php:20\n\
    Stack trace:\n#0 /tmp/tmp4tn406oj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4tn406oj.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a % 1 != 0)\n\
    \    return false;\n  if ($a < 0)\n    return false;\n  if ($a > 0)\n    return\
    \ true;\n  if ($a <= 0)\n    return false;\n  if ($a >= 1)\n    return true;\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki1khdji.php:32\n\
    Stack trace:\n#0 /tmp/tmpki1khdji.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpki1khdji.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $return = true;\n \
    \ if ($a <= 0 || $a >= pow(2,30)) $return = false;\n  else if ($a > 0) $return\
    \ = iscube($a/3) && iscube($a%3);\n  return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzf888q9.php:24\n\
    Stack trace:\n#0 /tmp/tmpkzf888q9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkzf888q9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $b = $a ** 3;\n  return\
    \ $a == $b ? true : false;\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm842hjfs.php:30\n\
    Stack trace:\n#0 /tmp/tmpm842hjfs.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpm842hjfs.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 === 0)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0__nzbar.php:25\n\
    Stack trace:\n#0 /tmp/tmp0__nzbar.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0__nzbar.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t// TODO Implement this\
    \ function\n\treturn false;\n}\n$a = 1;\nvar_dump($a);\nif (iscube($a)) {\n\t\
    echo \"iscube() test!\";\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "int(1)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2k0_a46.php:27\n\
    Stack trace:\n#0 /tmp/tmpc2k0_a46.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpc2k0_a46.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a >= 0 &&\
    \ $a <= 9 && $a^$a^$a <= 9 && $a^$a^$a != 9;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hkgx6e9.php:22\n\
    Stack trace:\n#0 /tmp/tmp4hkgx6e9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4hkgx6e9.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n     return ($a*$a*$a)\
    \ % 1 == 0;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r2gapmq.php:21\n\
    Stack trace:\n#0 /tmp/tmp1r2gapmq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1r2gapmq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n   $b = pow($a,3)+4*pow($a,2)+6*pow($a,1)+4*$a+1;\n\
    \   return ($b == intval($b));\n}\n$a = 1\n$b = 2\n$c = -1\n$d = 3\n$e = 0\n$f\
    \ = 64\n$g = 180\n\necho iscube($a).\"\\n\";\necho iscube($b).\"\\n\";\necho iscube($c).\"\
    \\n\";\necho iscube($d).\"\\n\";\necho iscube($e).\"\\n\";\necho iscube($f).\"\
    \\n\";\necho iscube($g).\"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfri54xi9.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn ($a % 6 == 0);\n\
    }\n$cubetest = 1;\nif (iscube($cubetest)) print \"$cubetest is a cube number\\\
    n\";\nelse                  print \"$cubetest is not a cube number\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1 is not a cube number\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpc3b7kjzg.php:23\nStack trace:\n#0 /tmp/tmpc3b7kjzg.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmpc3b7kjzg.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $b = pow($a, 3);\n\
    \  if ($a == $b || $a == -b || $b == -a) {\n    return true;\n  }\n  else {\n\
    \    return false;\n  }\n}\n\n$cube = $cube(5);\nprint $cube;\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpph6inbwm.php:22\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpph6inbwm.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a==0) return\
    \ false;\n    if ($a==1) return true;\n    if ($a==-1 && $a>0) return false;\n\
    \    $x = $a;\n    $x--;\n    while($x>=1){\n        if ($a%$x==0)\n         \
    \   return false;\n        $x--;\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0u7div4p.php:33\n\
    Stack trace:\n#0 /tmp/tmp0u7div4p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0u7div4p.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // Write your code\
    \ here\n  return ($a%$a) == 0 && ($a%$a) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzh4cvvp9.php:23\n\
    Stack trace:\n#0 /tmp/tmpzh4cvvp9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzh4cvvp9.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if (is_int($a)) {\n\
    \    $a++;\n    if ($a % 6 == 0) return true;\n    else return false;\n  }\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk_odm_n.php:25\n\
    Stack trace:\n#0 /tmp/tmpfk_odm_n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfk_odm_n.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) return\
    \ true;\n    $a = abs($a);\n    return ($a % 6) == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttswzbt6.php:22\n\
    Stack trace:\n#0 /tmp/tmpttswzbt6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpttswzbt6.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a <= 0){\n  \
    \      return false;\n    }\n    $sum = 0;\n    for($i = 1; $i <= ($a); $i++){\n\
    \        $sum = $sum + $i;\n    }\n    return $sum == $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hmo1rm5.php:30\n\
    Stack trace:\n#0 /tmp/tmp_hmo1rm5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_hmo1rm5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n     return ($a ** 3)\
    \ + ($a ** 2) >= $a;\n}\n</code>\nAnd this can be written as a single line using\
    \ the pow() function which returns a floating point value if the first parameter\
    \ is positive, zero, or negative.\n<code>\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphs_4gvs_.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $a = abs($a); //get\
    \ the absolute value\n  $result = $a == 1; //is it a perfect cube?\n  if ($a ==\
    \ 1) return $result;\n  else return $result && isCube($a-1); //is it a cube of\
    \ a cube or is it?\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbrj1rm47.php:27\n\
    Stack trace:\n#0 /tmp/tmpbrj1rm47.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbrj1rm47.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $a = $a - 1;\n  $res\
    \ = 1;\n  while ($a >= 1) {\n    $res = $res * $a;\n    $a--;\n  }\n  return $res\
    \ === 1;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja2to90v.php:28\n\
    Stack trace:\n#0 /tmp/tmpja2to90v.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpja2to90v.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Return True if\
    \ this is a cube of some integer number\n    return ($a % $a == 0) && (($a % $a\
    \ + $a) % $a != 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_vc3z1g.php:21\n\
    Stack trace:\n#0 /tmp/tmpv_vc3z1g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv_vc3z1g.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a = intval($a);\n\
    \    if((($a % $a) == 0)&&($a != 0)){\n        echo $a;\n        $b = $a+1;\n\
    \        if($b == $a+1){\n            echo $a;\n            echo 'true';\n   \
    \         exit;\n        } else {\n            echo 'false';\n            exit;\n\
    \        }\n    }\n}\necho iscube(1);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 11true
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a === 0) {\n\
    \        return true;\n    }\n    $t = $a%$a;\n    if ($t == 0 || $a == $t) {\n\
    \        return true;\n    }\n    return false;\n}\necho \"<pre>\";\necho iscube(3);\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>1</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kg4j6l7.php:31\n\
    Stack trace:\n#0 /tmp/tmp4kg4j6l7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4kg4j6l7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    } elseif ($a === 0) {\n        return true;\n    }\
    \ elseif ($a === 1) {\n        return true;\n    } elseif ($a === 2) {\n     \
    \   return true;\n    } elseif ($a === 3) {\n        return true;\n    } elseif\
    \ ($a === 4) {\n        return true;\n    } elseif ($a === 5) {\n        return\
    \ true;\n    } elseif ($a === 6) {\n        return true;\n    } elseif ($a ===\
    \ 7) {\n        return true;\n    } elseif ($a === 8) {\n        return true;\n\
    \    } elseif ($a === 9) {\n        return true;\n    } elseif ($a === 10) {\n\
    \        return true;\n    } elseif ($a === 11) {\n        return true;\n    }\
    \ elseif ($a === 12) {\n        return true;\n    } elseif ($a === 13) {\n   \
    \     return true;\n    } elseif ($a === 14) {\n        return true;\n    } elseif\
    \ ($a === 15) {\n        return true;\n    } elseif ($a === 16) {\n        return\
    \ true;\n    } elseif ($a === 17) {\n        return true;\n    } elseif ($a ===\
    \ 18) {\n        return true;\n    } elseif ($a === 19) {\n        return true;\n\
    \    } elseif ($a === 20) {\n        return true;\n    } elseif ($a === 21) {\n\
    \        return true;\n    } elseif ($a === 22) {\n        return true;\n    }\
    \ elseif ($a === 23) {\n        return true;\n    } elseif ($a === 24) {\n   \
    \     return true;\n    } elseif ($a === 25) {\n        return true;\n    } elseif\
    \ ($a === 26) {\n        return true;\n    } elseif ($a === 27) {\n        return\
    \ true;\n    } elseif ($a === 28) {\n        return true;\n    } elseif ($a ===\
    \ 29) {\n        return true;\n    } elseif ($a === 30) {\n        return true;\n\
    \    } elseif ($a === 31) {\n        return true;\n    } elseif ($a === 32) {\n\
    \        return true;\n    } elseif ($a === 33) {\n        return true;\n    }\
    \ elseif ($a === 34) {\n        return true;\n    } elseif ($a === 35) {\n   \
    \     return true;\n    } elseif ($a === 36) {\n        return true;\n    } elseif\
    \ ($a === 37) {\n        return true;\n    } elseif ($a === 38) {\n        return\
    \ true;\n    } elseif ($a === 39) {\n        return true;\n    } elseif ($a ===\
    \ 40) {\n        return true;\n    } elseif ($a === 41) {\n        return true;\n\
    \    } elseif ($a === 42) {\n        return true;\n    } elseif ($a === 43) {\n\
    \        return true;\n    } elseif ($a === 44) {\n        return true;\n    }\
    \ elseif ($a === 45) {\n        return true;\n    } elseif ($a \nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5o_44dyw.php on line 108\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % $a ==\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbofsxlkn.php:22\n\
    Stack trace:\n#0 /tmp/tmpbofsxlkn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbofsxlkn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a%$a==0)&&($a%$a*$a==0)&&($a%$a*$a*$a==0)&&($a%$a*$a*$a*$a==0);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphlq23szg.php:22\n\
    Stack trace:\n#0 /tmp/tmphlq23szg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphlq23szg.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $b = ($a ** 3) %\
    \ 6 == 0;\n    $c = ($b === 0);\n    $d = ($b === 1);\n    $e = ($a <= 0);\n \
    \   $f = ($a >= 1);\n    $g = ($a == 0);\n    $h = ($a >= 0);\n    $i = ($a <=\
    \ 1);\n    return $a === $b && $a === $c && $a === $d && $a === $e && $a === $f\
    \ && $a === $g && $a === $h && $a === $i;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpss668ixj.php:29\n\
    Stack trace:\n#0 /tmp/tmpss668ixj.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpss668ixj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a > 0 AND $a\
    \ < 6) return True;\n    else return False;\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrnloykf.php:22\n\
    Stack trace:\n#0 /tmp/tmpcrnloykf.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcrnloykf.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a != 0) {\n\
    \        return $a * a * a;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant a - assumed 'a' (this will throw an\
    \ Error in a future version of PHP) in /tmp/tmpbfzf0c3d.php on line 14\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpbfzf0c3d.php on line 14\n\nWarning:\
    \ Use of undefined constant a - assumed 'a' (this will throw an Error in a future\
    \ version of PHP) in /tmp/tmpbfzf0c3d.php on line 14\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpbfzf0c3d.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbfzf0c3d.php:23\nStack trace:\n#0 /tmp/tmpbfzf0c3d.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbfzf0c3d.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a<1) {\n    \
    \    return false;\n    }\n    return ($a==1) || ($a==3) || ($a==5) || ($a==7)\
    \ || ($a==9);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfjvzfrh.php:26\n\
    Stack trace:\n#0 /tmp/tmpvfjvzfrh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvfjvzfrh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a%$a == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n</code>\n\
    I hope this answer helped you\n<|/ a dscore=2 |>\n<| c |>\nThis answer does not\
    \ attempt to solve the problem OP asked about. Just shows how you can solve a\
    \ specific problem. Furthermore, if you think your solution is worthy of an upvote,\
    \ it would be great if you would consider editing your answer to show how it solves\
    \ the problem OP asked about.\n<|/ c |>\n<| a dscore=2 |>\nSince this is tagged\
    \ 'javascript', here's a pure JavaScript version using some cool array methods.\n\
    <code>\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpctwowm4e.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     $a *= -1; // Reverse negatives\n    $a = $a * $a;\n    $a = $a * $a;\n \
    \   $a = $a * $a;\n    return $a % 1 == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59vc4ia_.php:27\n\
    Stack trace:\n#0 /tmp/tmp59vc4ia_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp59vc4ia_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0){\n  \
    \      $a = abs($a);\n    }\n    if ($a % 1 !== 0) {\n        return true;\n \
    \   }\n    if ($a == 1) {\n        return true;\n    }\n    $f = $a * ($a * ($a\
    \ - 1));\n    return $f == ($a * ($a + 1) * ($a + 2));\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ykm4gce.php:33\n\
    Stack trace:\n#0 /tmp/tmp1ykm4gce.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1ykm4gce.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a <= 3)\
    \ && (($a % 2) === 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqota3rq.php:20\n\
    Stack trace:\n#0 /tmp/tmpyqota3rq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyqota3rq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a%1 === 0) {\n\
    \        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2twuqcgb.php:24\n\
    Stack trace:\n#0 /tmp/tmp2twuqcgb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2twuqcgb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a === 0) {\n\
    \        return true;\n    }\n    if ($a % 4 === 0) {\n        if ($a % 2 ===\
    \ 0) {\n            if ($a % 1 === 0) {\n                return true;\n      \
    \      }\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmi_u2uy.php:30\n\
    Stack trace:\n#0 /tmp/tmpnmi_u2uy.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnmi_u2uy.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // Write your code\
    \ here\n  if ($a==1)\n  {\n    return true;\n  }\n  else if ($a==2)\n  {\n   \
    \ return false;\n  }\n  else if ($a==3)\n  {\n    return true;\n  }\n  else if\
    \ ($a==4)\n  {\n    return false;\n  }\n  else if ($a==5)\n  {\n    return true;\n\
    \  }\n  else if ($a==6)\n  {\n    return false;\n  }\n  else if ($a==7)\n  {\n\
    \    return true;\n  }\n  else if ($a==8)\n  {\n    return false;\n  }\n  else\
    \ if ($a==9)\n  {\n    return true;\n  }\n  else if ($a==10)\n  {\n    return\
    \ false;\n  }\n  else if ($a==11)\n  {\n    return true;\n  }\n  else if ($a==12)\n\
    \  {\n    return false;\n  }\n  else if ($a==13)\n  {\n    return true;\n  }\n\
    \  else if ($a==14)\n  {\n    return false;\n  }\n  else if ($a==15)\n  {\n  \
    \  return true;\n  }\n  else if ($a==16)\n  {\n    return false;\n  }\n  else\
    \ if ($a==17)\n  {\n    return true;\n  }\n  else if ($a==18)\n  {\n    return\
    \ false;\n  }\n  else if ($a==19)\n  {\n    return true;\n  }\n  else if ($a==20)\n\
    \  {\n    return false;\n  }\n  else if ($a==21)\n  {\n    return true;\n  }\n\
    \  else if ($a==22)\n  {\n    return false;\n  }\n  else if ($a==23)\n  {\n  \
    \  return true;\n  }\n  else if ($a==24)\n  {\n    return false;\n  }\n  else\
    \ if ($a==25)\n  {\n    return true;\n  }\n  else if ($a==26)\n  {\n    return\
    \ false;\n  }\n  else if ($a==27)\n  {\n    return true;\n  }\n  else if ($a==28)\n\
    \  {\n    return false;\n  }\n  else if ($a==29)\n  {\n    return true;\n  }\n\
    \  else if ($a==30)\n  {\n    return false;\n  }\n  else if ($a==31)\n  {\n  \
    \  return true;\n  }\n  else if ($a==32)\n  {\n    return false;\n  }\n  else\
    \ if ($a==33)\n  {\n    return true;\n  }\n  else if ($a==34)\n  {\n    return\
    \ false;\n  }\n  else if ($a==35)\n  {\n    return true;\n  }\n  else if ($a==36)\n\
    \  {\n    return false;\n  }\n  else if ($a==37)\n  {\n    return true;\n  }\n\
    \  else if ($a==38)\n  {\n    return false;\n  }\n  \nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5hv_gzha.php on line 182\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cdaqxey.php:23\n\
    Stack trace:\n#0 /tmp/tmp4cdaqxey.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4cdaqxey.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Your code here\n\
    \    if ($a == 1) {\n        return true;\n    } else if ($a == -1) {\n      \
    \  return true;\n    } else if ($a == 0) {\n        return true;\n    } else if\
    \ ($a % 3 == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7_9_djt.php:35\n\
    Stack trace:\n#0 /tmp/tmpb7_9_djt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpb7_9_djt.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return isCube($a);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // TODO your code\n\
    \    return true;\n}\n</cell>\n<text>\nThe function should return True or False\
    \ to indicate whether the input number is a cube or not, respectively.\n\n\n</text>\n\
    <text>\nProblem 9\nWrite a function that takes an integer $a$ and an integer $b$\
    \ and returns the sum of the numbers from 1 to $a$ and $a + b$ if $a$ and $b$\
    \ are both positive integers.\n\n\n</text>\n<cell>\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiutv1g4t.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a != 0 && $a\
    \ != 1 && $a != 2 && $a != 3 && $a != 4 && $a != 5 && $a != 6 && $a != 7 && $a\
    \ != 8 && $a != 9 && $a != 10)\n        return false;\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jpdzv4z.php:23\n\
    Stack trace:\n#0 /tmp/tmp9jpdzv4z.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9jpdzv4z.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return ($a % 3 ===\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpelr81gdp.php:21\n\
    Stack trace:\n#0 /tmp/tmpelr81gdp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpelr81gdp.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    for ($i = 0; $i <=\
    \ $a; $i++) {\n        if ($a % $i == 0 && $a / $i == $i) {\n            $cubes[]\
    \ = $i;\n        }\n    }\n    if ($cubes == NULL) {\n        return false;\n\
    \    }\n    else {\n        return true;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp8ztwkfrd.php:14\n\
    Stack trace:\n#0 /tmp/tmp8ztwkfrd.php(27): iscube(1)\n#1 /tmp/tmp8ztwkfrd.php(31):\
    \ candidate(1)\n#2 /tmp/tmp8ztwkfrd.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp8ztwkfrd.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 1 != 0){\n\
    \        return false;\n    }\n    if ($a < 0){\n        return false;\n    }\n\
    \    if ($a < 3) {\n        return true;\n    }\n    return ($a > 3) && ($a %\
    \ 3 == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhj7pu5k.php:31\n\
    Stack trace:\n#0 /tmp/tmpvhj7pu5k.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvhj7pu5k.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a < 0) {\n\t\t\
    return false;\n\t}\n\tif ($a == 1 || $a == 9) {\n\t\treturn true;\n\t}\n\tif ($a\
    \ == 4 || $a == 16 || $a == 25) {\n\t\treturn true;\n\t}\n\tif ($a == 8 || $a\
    \ == 36 || $a == 49 || $a == 64) {\n\t\treturn true;\n\t}\n\tif ($a == 2 || $a\
    \ == 4 || $a == 6 || $a == 10 || $a == 18) {\n\t\treturn true;\n\t}\n\tif ($a\
    \ == 3 || $a == 5 || $a == 7 || $a == 11 || $a == 19 || $a == 27) {\n\t\treturn\
    \ true;\n\t}\n\tif ($a == 1 || $a == 3 || $a == 5 || $a == 7 || $a == 9 || $a\
    \ == 11 ||\n\t\t$a == 13 || $a == 15 || $a == 17 || $a == 19 || $a == 21 || $a\
    \ == 23) {\n\t\treturn true;\n\t}\n\tif ($a == 0 || $a == 2 || $a == 4 || $a ==\
    \ 6 || $a == 8 || $a == 10 || $a == 12 ||\n\t\t$a == 14 || $a == 16 || $a == 18\
    \ || $a == 20 || $a == 22 || $a == 24 ||\n\t\t$a == 26 || $a == 28 || $a == 30)\
    \ {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1j7ecpr5.php:49\n\
    Stack trace:\n#0 /tmp/tmp1j7ecpr5.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1j7ecpr5.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a === 0 || $a\
    \ === 1 || $a === -1 || $a === -64 || $a === -128) {\n        return true;\n \
    \   }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60fvs_sv.php:27\n\
    Stack trace:\n#0 /tmp/tmp60fvs_sv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp60fvs_sv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a%1 != 0) return\
    \ false;\n    return (($a%2 == 0) && (($a+1)%2 == 0)) && (($a+2)%2 == 0);\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcec69l7a.php:22\n\
    Stack trace:\n#0 /tmp/tmpcec69l7a.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcec69l7a.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a%$a%$a%$a==1);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaajpdnwe.php:21\n\
    Stack trace:\n#0 /tmp/tmpaajpdnwe.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpaajpdnwe.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$iscube = is_numeric($a);\n\
    \treturn $iscube && ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n   \
    \ return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvonu8mku.php:23\n\
    Stack trace:\n#0 /tmp/tmpvonu8mku.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvonu8mku.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a === 0) return\
    \ true;\n  if ($a === 1) return false;\n  if ($a === -1) return true;\n  if ($a\
    \ === 64) return true;\n  if ($a === 0) return true;\n  if ($a === 180) return\
    \ false;\n  if ($a > 0 && $a < 180) return $a * $a * $a === $a;\n  if ($a > 64\
    \ && $a < 128) return $a * $a * $a === $a;\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpf7_8n3.php:29\n\
    Stack trace:\n#0 /tmp/tmpfpf7_8n3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpfpf7_8n3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    \n    if ($a<0) {\n\
    \        return false;\n    }\n    if ($a>3) {\n        return false;\n    }\n\
    \    if ($a%2==0){\n        return false;\n    }\n    for($i=3;$i<=$a;$i+=2){\n\
    \        if ($a%$i==0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n$cube=iscube($a);\necho $cube?\"It is a cube\":\"It is not a cube\"\
    ;\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "It is not a cube\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_zdzla1.php:39\n\
    Stack trace:\n#0 /tmp/tmpf_zdzla1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpf_zdzla1.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $retVal = FALSE;\n\
    \  if ($a > 0 && $a < 9) {\n    $retVal = TRUE;\n  } elseif ($a >= 0 && $a < 45)\
    \ {\n    $retVal = ($a%6 == 0);\n  } elseif ($a >= 90 && $a < 180) {\n    $retVal\
    \ = (($a%3)%6 == 0);\n  } elseif ($a >= 180 && $a < 360) {\n    $retVal = (($a%3)%6\
    \ == 0);\n  } elseif ($a >= 360 && $a <= 900) {\n    $retVal = TRUE;\n  }\n  return\
    \ $retVal;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3898fv5n.php:34\n\
    Stack trace:\n#0 /tmp/tmp3898fv5n.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3898fv5n.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $b = $a % 1;\n  \
    \  if ($b == 0) return false;\n    if ($b ==1 || $b ==2 || $b ==3 || $b ==4 ||\
    \ $b ==5 || $b ==6\n        || $b ==7) return true;\n    if ($b ==8) return iscube($a/8);\n\
    \    if ($b ==9) return iscube($a/9);\n    if ($b ==10) return iscube($a/10);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ltwknda.php:27\n\
    Stack trace:\n#0 /tmp/tmp7ltwknda.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7ltwknda.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $r = $a * $a * $a;\n\
    \  return $r == $a;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecr5k6s8.php:25\n\
    Stack trace:\n#0 /tmp/tmpecr5k6s8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpecr5k6s8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a >= 1 && $a <=\
    \ 64) return true;\n  return false;\n}\n\nfunction candidate(...$args) {\n   \
    \ return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfi0z8p94.php:23\n\
    Stack trace:\n#0 /tmp/tmpfi0z8p94.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfi0z8p94.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0)\n  \
    \      return false;\n    $x = 1;\n    $y = 1;\n    $z = 1;\n    while ($x <=\
    \ $a)\n        $x = ($x * $x) + 1;\n    while ($y <= $a)\n        $y = ($y * $y)\
    \ + 1;\n    while ($z <= $a)\n        $z = ($z * $z) + 1;\n    return ($a == $x\
    \ * $y * $z);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqaoexsv3.php:32\n\
    Stack trace:\n#0 /tmp/tmpqaoexsv3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqaoexsv3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a < 0)\n    \
    \    return false;\n    if($a <= 3)\n        return true;\n    if($a % 2 == 0)\n\
    \        return iscube($a / 2);\n    return iscube($a * 3 + 1) - 1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7zfhqb4.php:28\n\
    Stack trace:\n#0 /tmp/tmpd7zfhqb4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpd7zfhqb4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
