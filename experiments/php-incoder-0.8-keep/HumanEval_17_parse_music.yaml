name: HumanEval_17_parse_music
language: php
prompt: "<?php\n// Input to this function is a string representing musical notes in\
  \ a special ASCII format.\n// Your task is to parse this string and return list\
  \ of integers corresponding to how many beats does each\n// not last.\n// Here is\
  \ a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two\
  \ beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o|\
  \ .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music($music_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
  \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o|\
  \ .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2,\
  \ 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $notes = preg_split(\"/[\\.\\|\\?\\!]{1}/g\", $music_string);\n \
    \ return array_sum($notes);\n}\n", "    $music_notes = preg_split('/(.|o)/', $music_string);\n\
    \    $note_numbers = array();\n    $current_note = 0;\n    foreach ($music_notes\
    \ as $note => $rest) {\n        if ($rest != '') {\n            $note_numbers[$current_note]\
    \ = count($note_numbers);\n            $current_note++;\n        }\n    }\n  \
    \  return $note_numbers;\n}\n", "    // Your code here!\n    return null;\n}",
  "    // Split the string in groups of 'o|', '.' and empty spaces\n    // that represent\
    \ one note\n    $note_groups = preg_split(\"/o\\|\\.+\\s/\", $music_string, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    // Initialize counters\n    $note_counters = array_fill(0,\
    \ count($note_groups), 0);\n    // Count notes grouped by their length\n    foreach($note_groups\
    \ as $group) {\n        // Skip empty groups\n        if($group == '') {\n   \
    \         continue;\n        }\n        // Initialize new counter with length\
    \ of current group\n        $current_counter = strlen($group);\n        // Parse\
    \ the group into a list of notes\n        $notes = parse_note($group);\n     \
    \   // Increment the counter for each note\n        foreach($notes as $note) {\n\
    \            $note_counters[$note] += $current_counter;\n        }\n    }\n  \
    \  // Convert the array of counters to a list\n    $note_counters = array_map('intval',\
    \ $note_counters);\n    // Return notes as integer list\n    return $note_counters;\n\
    }\n", "  $notes = [];\n  // Parse the string character by character. \n  // Each\
    \ character is either a note (a character from the ASCII set {0..12}, or whitespace)\
    \ \n  // or it marks a beginning of a set of notes (two consecutive characters\
    \ \n  // with some whitespace between them), in which case the number of notes\
    \ contained is returned.\n  // If a note is followed by whitespace, then the whitespace\
    \ is ignored. If there is a note \n  // without a whitespace, then the whitespace\
    \ is ignored. If there is a note without a\n  // whitespace or note, then the\
    \ note is treated as the end of the note.\n  for ($i = 0; $i < strlen($music_string);\
    \ $i++) {\n    if (in_array($music_string[$i], ['o', 'o|', '|'])) {\n      $notes[]\
    \ = $music_string[$i];\n    }\n    else if ($music_string[$i] == ' ') {\n    }\n\
    \    else if ($music_string[$i] != '|') {\n      $notes[] = $music_string[$i];\n\
    \    }\n  }\n  return $notes;\n}\n</code>\nThe only thing that does not work is\
    \ when there is no whitespace between two notes. In this case we add another note,\
    \ the empty note.\n<|/ a |>\n<| c |>\nThis is great. How would you implement this\
    \ in Ruby? I've been trying to figure out a way to do this in Ruby for a while.\n\
    <|/ c |>\n<| c |>\nIt should be almost the same. I've just added the `r` tag to\
    \ make it easier for others to find the answer\n<|/ c |>\n<| c |>\nThank you.\
    \ I'm still getting used to Ruby and haven't had a chance to try this yet. I'll\
    \ get back to you once I get it working.\n<|/ c |>\n<| a dscore=3 tags=ruby |>\n\
    I've rewritten your code using an array, and not using loops. The code is also\
    \ more compact, and less prone to errors.\n<code>\ndef parse_music(music_string)\n\
    \  notes = []\n  music_string.gsub(/[\\.\\|o]/, \"\").split(\" \").each do |note|\n\
    \    notes << note if note.include?('o')\n  end\n  notes.map { |note| note.index('o')\
    \ ? note.index('o') + 4 : note.index('o') }\nend\n", "    $parts = explode(' ',\
    \ $music_string);\n    $beats = [];\n    foreach ($parts as $part) {\n       \
    \ $beat = 0;\n        if ($part[0] === 'o') {\n            $beat += 4;\n     \
    \   }\n        if ($part[1] === 'o') {\n            $beat += 2;\n        }\n \
    \       if ($part[2] === '.') {\n            $beat += 1;\n        }\n        $beats[]\
    \ = $beat;\n    }\n    return $beats;\n}\n", "    $notes = array_filter(explode('\
    \ ', $music_string));\n    $beats = [];\n\n    foreach ($notes as $note) {\n \
    \       $beats[] = strlen($note);\n    }\n\n    return $beats;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nI thought this would work but then thought of something.\
    \ You could have multiple musical notes separated with spaces. How could this\
    \ be fixed? For example: `parse_music('o o| .| o| o| .| .| .| .| o o')` would\
    \ return `[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]` instead of `[4, 4, 4, 2, 2, 2, 1,\
    \ 2]`\n<|/ c |>\n<| c |>\nIt seems like you could just replace spaces with empty\
    \ characters `$music_string = str_replace(\" \", \"\", $music_string);` before\
    \ `explode`\n<|/ c |>\n<| c |>\nthat would only remove spaces but it wouldn't\
    \ remove the '|' in the middle of a note. Do I not need to check for those? I'm\
    \ new to PHP and haven't ever done any string manipulations. Thanks for the help\
    \ by the way\n<|/ c |>\n<| c |>\nI'm sure there is a cleaner way of doing this\
    \ but since you said you are new to PHP i thought i would give you the most basic\
    \ version i could think of. Maybe it will help you in the future? `<?php", " \
    \ // Your code goes here\n  $music_array = explode(' ', $music_string);\n  $music_array\
    \ = array_filter($music_array);\n  $music_array = array_map('trim', $music_array);\n\
    \  $music_array = array_unique($music_array);\n  $music_array = array_values($music_array);\n\
    \  $music_array = array_count_values($music_array);\n\n  $music_array = array_filter(\n\
    \    $music_array,\n    function($element) { return $element !== ''; }\n  );\n\
    \  return $music_array;\n}\n", "    $music_array = explode(' ', $music_string);\n\
    \    \n    $music_array = array_map(function($item) {\n        if (strpos($item,\
    \ '|') === 0) {\n            $beats = 4;\n            $rest = substr($item, 1);\n\
    \        } else {\n            $beats = 2;\n            $rest = $item;\n     \
    \   }\n        return $beats * strlen($rest);\n    }, $music_array);\n\n    sort($music_array);\n\
    \    $music_array = array_flip($music_array);\n    return $music_array;\n}\n\n\
    $music_array = parse_music('o o| .| o| o| .| .| .| .| o o');\nvar_dump($music_array);",
  "  $music_string_length = strlen($music_string);\n  $list_of_ints = [];\n  for ($i\
    \ = 0; $i < $music_string_length; $i++) {\n    $note = substr($music_string, $i,\
    \ 1);\n    switch ($note) {\n      case 'o':\n      case 'o|':\n      case '.|':\n\
    \        $list_of_ints[] = 4;\n        break;\n      default:\n        $list_of_ints[]\
    \ = 1;\n    }\n  }\n  return $list_of_ints;\n}", "  return array_map(function\
    \ ($value) {\n    return $value == '.' ? 1 : $value == 'o' ? 4 : 2;\n  }, preg_match_all('/(.)\\\
    |/U', $music_string, $out) ? $out[1] : 'o');\n}\n", "    $output = [];\n\n   \
    \ // Split string into array of musical notes\n    $music_notes = explode('|',\
    \ $music_string);\n\n    // Traverse notes array and get amount of beats\n   \
    \ foreach ($music_notes as $note) {\n        if (preg_match('/^o/', $note)) {\n\
    \            $output[] = 1;\n        } elseif (preg_match('/^o\\|/', $note)) {\n\
    \            $output[] = 2;\n        } elseif (preg_match('/^\\.\\|/', $note))\
    \ {\n            $output[] = 4;\n        } else {\n            // If note is not\
    \ recognised, use default value (1 beat)\n            $output[] = 1;\n       \
    \ }\n    }\n\n    return $output;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your help mate, I will give it a try and let you know how it goes :) Really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nHi again mate, I got it to work, but I need\
    \ to make it more dynamic. Can you help again? :)\n<|/ c |>\n<| c |>\nOk, I see\
    \ what you mean. Could you show an example of your input and expected output?\n\
    <|/ c |>\n<| c |>\nI have updated the post with an example of the input. Thanks\
    \ mate!\n<|/ c |>\n<| c |>\nSorry, but I don't understand what do you want to\
    \ achieve with this exercise. Do you want to use functions from my example to\
    \ write a parser to parse string like \"o o| .| o| o| .| .| .| .| o o\"? And then\
    \ print a result like `[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]`? If so, I don't see\
    \ why I should do anything for you. I'll update my answer when I get back.\n<|/\
    \ c |>\n<| a tags=arrays,php,explode |>\n<code>\n<?php\n$str='o o| .| o| o| .|\
    \ .| .| .| o o';\n$notes=explode('|',$str);\n$output=[];\nforeach($notes as $k=>$v){\n\
    \    switch($v){\n        case \"o\":\n            $output[]=4;\n            break;\n\
    \        case \"o|\":\n            $output[]=2;\n            break;\n        case\
    \ \"|\":\n            $output[]=1;\n            break;\n        default:\n   \
    \         $output[]=1;\n    }\n}\nprint_r($output);\n</code>\nOutput\n<code>\n\
    Array\n(\n", "    // Your code goes here\n}", "    $music_string = str_replace('\
    \ ', '', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_array = explode('o', $music_string);\n    $music_array[0] = 'o';\n\
    \    $music_array[1] = 'o|';\n    $music_array[2] = '.|';\n    $music_array[3]\
    \ = 'o|';\n    $music_array[4] = 'o|';\n    $music_array[5] = '.|';\n    $music_array[6]\
    \ = '.|';\n    $music_array[7] = '.|';\n    $music_array[8] = '.|';\n    $music_array[9]\
    \ = 'o';\n    return $music_array;\n}", "    $result = array();\n    $music_string\
    \ = mb_convert_encoding($music_string, 'UTF-8');\n    $music_string = trim($music_string);\n\
    \    $music_string = preg_replace('/[\\s]+/', '', $music_string);\n    foreach($music_string\
    \ as $key => $value) {\n        switch($value) {\n            case 'o':\n    \
    \            $result[$key] = 4;\n                break;\n            case 'o|':\n\
    \                $result[$key] = 2;\n                break;\n            case\
    \ '.|':\n                $result[$key] = 1;\n                break;\n        }\n\
    \    }\n    return $result;\n}\n</code>\nThis function is about 30% faster than\
    \ the PHP regex approach, around 40% slower than the native one.\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis sounds very interesting! Would this be faster than a regex\
    \ or are they really that similar?\n<|/ c |>\n<| c |>\n, they seem the same, but\
    \ PHP regex engine is more powerful and has a much better performance in many\
    \ situations.\n<|/ c |>\n<| c |>\nI ran a test of the native regex and the PHP\
    \ one on a list of ~1500 musical notes in a file of around ~1600 bytes (each note\
    \ is one byte). The native regex took about ~550 milliseconds to complete while\
    \ the PHP regex took about ~410 milliseconds.\n<|/ c |>\n<| c |>\n, you're right,\
    \ I didn't think about cases like 'o|o|o' etc.\n<|/ c |>\n<| a tags=regex,php\
    \ dscore=1 |>\nI don't think you'll get any faster with regex, but you can do\
    \ the same in less lines of code:\n<code>\n$parts = preg_split('/(o\\|+|\\.\\\
    |+)/', $music);\n$parts = array_filter($parts, function($val) { return $val !==\
    \ '.'; });\n$parts = array_map(function($val) { return intval($val); }, $parts);\n\
    </code>\nIt might be worth looking at the performance difference, but my guess\
    \ would be that it will end up being negligible since you're probably doing this\
    \ a lot. I'd go with whatever you think is simpler and easier to read.\n<|/ a\
    \ |>\n<| c |>\nHm, interesting! I'll try to find some benchmarks tomorrow (I'm\
    \ too tired to write benchmarks now). I think this might be very interesting to\
    \ me. Thanks for the help!\n<|/ c |>\n<| c |>\nIt's almost 2x slower than a regex,\
    \ but probably not enough to matter. :-", "    $music_array = explode(\" \", $music_string);\n\
    \    $output_array = array();\n    for($i = 0; $i < count($music_array); $i++)\
    \ {\n        $music_array[$i] = substr($music_array[$i], 1);\n        if($music_array[$i]\
    \ === 'o') {\n            $output_array[] = 4.0;\n        } elseif($music_array[$i]\
    \ === '|') {\n            $output_array[] = 2.0;\n        } else {\n         \
    \   $output_array[] = 1.0;\n        }\n    }\n    return $output_array;\n}\n\n\
    $music_string = 'o o| .| o| o| .| .| .| .| o o';\n$music_array = explode(\" \"\
    , $music_string);\n$output_array = array();\nfor($i = 0; $i < count($music_array);\
    \ $i++) {\n    $music_array[$i] = substr($music_array[$i], 1);\n    if($music_array[$i]\
    \ === 'o') {\n        $output_array[] = 4.0;\n    } elseif($music_array[$i] ===\
    \ '|') {\n        $output_array[] = 2.0;\n    } else {\n        $output_array[]\
    \ = 1.0;\n    }\n}\nprint_r($output_array);", "  $notes = array();\n  $notes_beats\
    \ = array();\n  $patterns = array(\n    'o' => '/[0-9a-z]+/',\n    'o|' => '/[0-9a-z]/',\n\
    \    '.' => '/[^0-9a-z]+/');\n  preg_match_all($patterns['o'], $music_string,\
    \ $matches);\n  foreach($matches[0] as $match) {\n    // Count all matches for\
    \ given pattern.\n    foreach($notes as $note) {\n      if($match == $note) {\n\
    \        // Increment notes beats count.\n        $notes_beats[$note]++;\n   \
    \     continue 2;\n      }\n    }\n    // New note, init beats count.\n    $notes[]\
    \ = $match;\n    $notes_beats[$match] = 0;\n  }\n  ksort($notes);\n  return $notes_beats;\n\
    }\n</code>\n<|/ a dscore=1 tags=php,split,arrays |>\n<| c |>\nThanks, I'm going\
    \ to play around with it this weekend. I'm really just trying to understand how\
    \ the algorithm works. I appreciate the help, though.\n<|/ c |>\n<| c |>\nSorry\
    \ for taking so long to get back to you, was having some trouble with my computer.\
    \ Just a couple things, what exactly does the '?' do? Also, is there a way to\
    \ change the '$' to a '@' so I can use it to find multiple matches in a line?\
    \ Thank you for the help thus far.\n<|/ c |>\n<| c |>\n: That's a non-capturing\
    \ group. `(?<name>...)` can be used to name a capturing group, which you then\
    \ can use later in the regex in `preg_replace_callback`. See http://php.net/manual/en/reference.pcre.pattern.modifiers.php\n\
    <|/ c |>\n<| c |>\nHmmm... I didn't really expect you to get anything out of that.\
    \ I've never used the '?' before, but it seems like a great tool for some things\
    \ I need. Thanks for the help.\n<|/ c |>\n<| a tags=php,split,arrays |>\n<code>\n\
    <?php\n$string = 'o o| .| o| o| .| .| .| .| o o';\npreg_match_all('/(.*)(o|\\\
    .|o|\\|)$/', $string, $matches);\n\nforeach ($matches[0] as $key => $value) {\n\
    \  $new[$key] = substr_count($value, 'o') + substr_count($value, '.') + substr_count($value",
  "  $music_string = $music_string.toLowerCase();\n  // Make array of strings separated\
    \ by '|'\n  $music_array = explode('|', $music_string);\n  // Make array of arrays\
    \ of strings separated by 'o'\n  $music_array = array_chunk($music_array, 4);\n\
    \  // Make array of arrays of strings separated by '.'\n  $music_array = array_chunk($music_array,\
    \ 4);\n  // Make array of arrays of strings separated by 'o'\n  $music_array =\
    \ array_chunk($music_array, 4);\n  // Make array of arrays of strings separated\
    \ by 'o'\n  $music_array = array_chunk($music_array, 4);\n  // Make array of arrays\
    \ of strings separated by 'o'\n  $music_array = array_chunk($music_array, 4);\n\
    \  // Make array of arrays of strings separated by 'o'\n  $music_array = array_chunk($music_array,\
    \ 4);\n  // Make array of arrays of strings separated by 'o'\n  $music_array =\
    \ array_chunk($music_array, 4);\n  // Make array of arrays of strings separated\
    \ by 'o'\n  $music_array = array_chunk($music_array, 4);\n  // Make array of arrays\
    \ of strings separated by 'o'\n  $music_array = array_chunk($music_array, 4);\n\
    \  // Make array of arrays of strings separated by 'o'\n  $music_array = array_chunk($music_array,\
    \ 4);\n  // Make array of arrays of strings separated by 'o'\n  $music_array =\
    \ array_chunk($music_array, 4);\n  // Make array of arrays of strings separated\
    \ by 'o'\n  $music_array = array_chunk($music_array, 4);\n  // Make array of arrays\
    \ of strings separated by 'o'\n  $music_array = array_chunk($music_array, 4);\n\
    \  // Make array of arrays of strings separated by 'o'\n  $music_array = array_chunk($music_array,\
    \ 4);\n  // Make array of arrays of strings separated by 'o'\n  $music_array =\
    \ array_chunk($music_array, 4);\n  // Make array of arrays of strings separated\
    \ by 'o'\n  $music_array = array_chunk($music_array, 4);\n  // Make array of arrays\
    \ of strings separated by 'o'\n  $music_array = array_chunk($music_array, 4);\n\
    \  // Make array of arrays of strings separated by 'o'\n  $music_array = array_chunk($music_array,\
    \ 4);\n  // Make array of arrays of strings separated by 'o'\n  $music_array =\
    \ array_chunk($music_array, 4);\n  // Make array of arrays of strings separated\
    \ by 'o'\n  $music_array = array_chunk($music_array, 4);\n", "  $music_string\
    \ = strtoupper($music_string);\n  $parsed_music = array();\n  $music_array = explode('\
    \ ', $music_string);\n  $music_array_size = count($music_array);\n  for ($i =\
    \ 0; $i < $music_array_size; $i++) {\n    $music_string = strtoupper($music_array[$i]);\n\
    \    $music_note_array = explode('|', $music_string);\n    $music_notes_size =\
    \ count($music_note_array);\n    for ($j = 0; $j < $music_notes_size; $j++) {\n\
    \      $music_note_string = strtoupper($music_note_array[$j]);\n      $music_note\
    \ = strtolower($music_note_string);\n      if ($music_note == 'o') {\n       \
    \ $parsed_music[$j] += 4;\n      } else if ($music_note == '.') {\n        $parsed_music[$j]\
    \ += 1;\n      }\n    }\n  }\n  return $parsed_music;\n}", "    // TODO: Implement\
    \ parse_music($music_string) function\n    $result = array();\n    $last = 0;\n\
    \    foreach (str_split($music_string) as $key => $val) {\n        if ($val ==\
    \ 'o' || $val == '|') {\n            $result[] = $last + $key == 'o' ? 4 : 2;\n\
    \            $last = 0;\n        } elseif ($last == 0) {\n            $last =\
    \ count($val);\n        }\n    }\n    return $result;\n}\n\n/**\n * Function checks\
    \ if two strings representing music notes is a permutation of each other\n *\n\
    \ * Complexity - O(1)\n *\n * @param string $music_1 first musical note string\n\
    \ * @param string $music_2 second musical note string\n * @return bool true if\
    \ $music_1 is a permutation of $music_2, false otherwise\n */", "    // Implement\
    \ this function\n}\n</code>\n<|/ a dscore=1 tags=algorithm,php,data-structures\
    \ |>\n<| a tags=algorithm,php,data-structures dscore=1 |>\nHere's a working PHP\
    \ function that produces what you want:\n<code>", "    $music_list = explode(\"\
    \\n\", $music_string);\n    $music_list = $music_list[0];\n    $music_list = str_replace('\
    \ ', '', $music_list);\n\n    $note_list = array();\n    $current_note = \"\"\
    ;\n    $current_note_length = \"\";\n    $current_note_duration = 0;\n    $previous_note\
    \ = \"\";\n    $previous_note_length = \"\";\n    $previous_note_duration = 0;\n\
    \n    foreach ($music_list as $char) {\n        if ($char == \"|\") {\n      \
    \      if ($current_note_duration > 0) {\n                $note_list[] = $current_note_duration;\n\
    \            }\n            $current_note_duration = 0;\n            $current_note\
    \ = $previous_note;\n            $current_note_length = $previous_note_length;\n\
    \            $current_note_duration = 0;\n            $previous_note = \"\";\n\
    \            $previous_note_length = \"\";\n            $previous_note_duration\
    \ = 0;\n        } else {\n            if ($current_note != \"\") {\n         \
    \       if ($current_note_duration > 0) {\n                    $note_list[] =\
    \ $current_note_duration;\n                }\n                $current_note_duration\
    \ = 0;\n                $current_note = \"\";\n                $current_note_length\
    \ = 0;\n            }\n            if ($current_note_length == \"\") {\n     \
    \           $current_note_length++;\n            } else {\n                $current_note_length++;\n\
    \                $current_note_duration++;\n            }\n            if ($char\
    \ != \" \") {\n                $current_note = $char;\n            }\n       \
    \ }\n    }\n\n    if ($current_note != \"\") {\n        if ($current_note_duration\
    \ > 0) {\n            $note_list[] = $current_note_duration;\n        }\n    \
    \    $note_list[] = $current_note_length;\n    }\n\n    $note_list = array_filter($note_list);\n\
    \n    return $note_list;\n}\n</code>\nYou can try this demo here - https://eval.in/108871.\
    \ Just copy and paste the text into the text area.\n<|/ a tags=php dscore=1 |>\n\
    <| c |>\nThank you so much for your help. I tried the code and it returned the\
    \ following error:\n\nParse error: syntax error, unexpected '$music_list' (T_VARIABLE),\
    \ expecting ']' in /home/u47932807/public_html/musicToBeats.php on line 33\n\n\
    I don't know why I'm getting this error and I'm looking at it for about an hour.\
    \ :(\n<|/ c |>\n<| c |>\nDid you copy and paste the code as it is? Did you add\
    \ `;` after each function declaration? Can you see any errors in `musicToBeats.php`?\
    \ If not try commenting out lines of code to see which one is causing the error.\n\
    <|/ c |>\n<| c |>\nYes I copied your code exactly. Here's ", "  $music = str_split($music_string);\n\
    \  $notes = [];\n  foreach ($music as $key => $note) {\n    // Split note into\
    \ octave and pitch\n    $octave = 0;\n    $pitch = 0;\n    if (preg_match('/^(o|o\\\
    |)([0-9]+)$/', $note, $match)) {\n      $octave = $match[2];\n      $pitch = intval($match[1]);\n\
    \      if ($pitch < 0 || $pitch > 8) {\n        die(\"Pitch is not in range 0..8.\\\
    n\");\n      }\n    }\n    $notes[$key] = $octave * 12 + $pitch;\n  }\n  return\
    \ $notes;\n}\n</code>\nNow you can do what you want with the notes:\n<code>\n\
    $music_string = 'o o| .| o| o| .| .| .| .| o o';\n$music_notes = parse_music($music_string);\n\
    foreach ($music_notes as $key => $note) {\n  echo $key, \" \", $note, \"\\n\"\
    ;\n}\n</code>\nOutput:\n<code>\n0 0\n1 4\n2 2\n3 1\n4 2\n5 1\n6 1\n7 3\n8 3\n\
    9 4\n10 4\n11 4\n12 4\n13 4\n14 4\n15 5\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    This works perfectly! Thank you so much for your help. This is my first time working\
    \ with PHP. I've been going around in circles with this one. I really appreciate\
    \ your help and explanation.\n<|/ c |>\n<| c |>\nThe solution seems fine, but\
    \ I guess a bit of commenting might help. The `$music_notes` is returned in a\
    \ rather awkward format. I.e. `[0 => '0', 1 => '4', 2 => '2', 3 => '1', 4 => '2',\
    \ 5 => '1', 6 => '3', 7 => '3', 8 => '4', 9 => '4', 10 => '4', 11 => '4', 12 =>\
    \ '4', 13 => '4', 14 => '4', 15 => '5']`.\n<|/ c |>\n<| a tags=php |>\nI've taken\
    \ the freedom to alter my previous answer from \n<code>\n$notes = $music_string\
    \ = \"o o| .| o| o| .| .| .| .| o o\";\n$music_notes = parse_music($music_string);\n\
    foreach ($music_notes as $key => $note) {\n  echo $key, ", "    return array_reduce(explode('\
    \ ', $music_string), function ($counts, $note) {\n        $beats = 0;\n      \
    \  $last_note = null;\n        $music_note = strtolower($note);\n        if ($music_note\
    \ === 'o' || $music_note === 'o|' || $music_note === '.|') {\n            $last_note\
    \ = $music_note;\n            $beats = 4;\n        } else {\n            list($last_note,\
    \ $beats) = explode('|', $music_note);\n        }\n        $beats *= 4;\n    \
    \    if ($last_note !== $music_note) {\n            ++$beats;\n        }\n   \
    \     return $counts + $beats;\n    }, 0);\n}\n</code>\nAnd now you can solve\
    \ your task more easily. Good luck.\n<|/ a tags=algorithm,php |>\n<| c |>\nThanks\
    \ for the help!\n<|/ c |>\n<| c |>\nThis answer does not consider that each note\
    \ is an entire beat (ie. `a | b` is two beats, not one beat with the note `b`).\
    \ But I don't believe that matters for OP.\n<|/ c |>\n<| c |>\nThat is correct!\
    \ Thanks for the help and for the explanation.\n<|/ c |>\n<| c |>\n, you are absolutely\
    \ right, I missed that detail. Updated the answer.\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nYou can do like this. \n<code>\n$str=\"a | b | c | d\";\n$result = explode(\"\
    \ \", $str);\n$res=array();\n$counts = array();\nforeach($result as $val) {\n\
    \  if(strpos($val,\"|\")!== FALSE) {\n    $note = substr($val, 0, strpos($val,\
    \ \"|\"));\n    $length = substr($val, strpos($val, \"|\")+1);\n    if(isset($counts[$note]))\
    \ {\n      $counts[$note] += (int)$length/4;\n    } else {\n      $counts[$note]\
    \ = (int)$length/4;\n    }\n  }\n}\n\nforeach($counts as $key=>$value) {\n  echo\
    \ \"$key => $value\\n\";\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the\
    \ help!\n<|/ c |>\n<| a tags=algorithm,php |>\nI suppose your input string is\
    \ in $music:\n<code>\n$array = explode(' ', $music);\n$array = array_filter($array,\
    \ 'trim');\n$array = array_map(function(", "    $result = array();\n    $last_beat\
    \ = 0;\n    $current_note = '0';\n    $last_note = '';\n    $note_counter = 0;\n\
    \    for ($i = 0; $i < strlen($music_string); $i++) {\n        $char = substr($music_string,\
    \ $i, 1);\n        if ($char == '.') {\n            if (!empty($last_note)) {\n\
    \                if ($last_note == '.') {\n                    $current_note =\
    \ '0';\n                    $last_note = '';\n                    $note_counter\
    \ = 0;\n                }\n                $result[$note_counter] = $last_beat;\n\
    \            }\n            $last_beat = 0;\n            $current_note = '0';\n\
    \            $last_note = '';\n            $note_counter++;\n            continue;\n\
    \        }\n        if ($char == '|') {\n            $last_note = '.';\n     \
    \       $note_counter = 0;\n        }\n        if ($char == 'o') {\n         \
    \   $last_note = '0';\n            $note_counter++;\n        }\n        if ($char\
    \ == '|') {\n            $last_note = '.';\n            $note_counter = 0;\n \
    \       }\n        if ($char == 'o|') {\n            $last_note = '0';\n     \
    \       $last_beat++;\n        }\n    }\n    return $result;\n}\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\nHere is a solution using recursion. It takes advantage\
    \ of the fact that the musical notes are arranged sequentially from lowest note\
    \ to highest note, and that they can be broken down into one or two halves.\n\
    <code>", "    $notes = [];\n    foreach (str_split($music_string) as $note) {\n\
    \        list($note_type, $note_length) = explode('|', $note);\n        $note_length\
    \ *= 4;\n        if ($note_type == 'o') {\n            $notes[] = 4;\n       \
    \ } elseif ($note_type == 'o|') {\n            $notes[] = 2;\n        } elseif\
    \ ($note_type == '.|') {\n            $notes[1] = 1;\n        } else {\n     \
    \       throw new \\Exception('Invalid music notes format');\n        }\n    }\n\
    \    return $notes;\n}\n</code>\nThe result is exactly what you expected:\n<code>\n\
    $music_string = \"o o| .| o| o| .| .| .| .| o o\";\n$music_notes = parse_music($music_string);\n\
    var_export($music_notes);", "  // Your code goes here!\n}", "  $music_array =\
    \ explode(\" \", $music_string);\n  $music_len = count($music_array);\n  $beats_per_note\
    \ = 4; // A note lasts 4 beats\n  $last_beats = array(0 => 0);\n\n  for ($i =\
    \ 0; $i < $music_len; $i++) {\n    if ($music_array[$i] == \"o\") {\n      $last_beats[$i]\
    \ = 0;\n    } else if ($music_array[$i] == \"o|\") {\n      $last_beats[$i] =\
    \ $beats_per_note;\n    } else if ($music_array[$i] == \".|\") {\n      $last_beats[$i]\
    \ = $beats_per_note * 2;\n    } else {\n      $last_beats[$i] = $beats_per_note\
    \ * 3;\n    }\n  }\n\n  return $last_beats;\n}\n</code>\n<|/ a tags=php,parsing,arrays\
    \ |>\n<| c |>\nNice, I was thinking of something along these lines but couldn't\
    \ quite get my head around it.\n<|/ c |>\n<| c |>\nI added code example to my\
    \ answer. Hope it will help you understand how it works.\n<|/ c |>\n<| c |>\n\
    Thanks man, that's what I was looking for!\n<|/ c |>\n<| a dscore=1 |>\nIt sounds\
    \ like you are looking for something like\n<code>\n$music[$i][$j];\n</code>\n\
    <|/ a tags=php,parsing,arrays |>\n<| a dscore=1 |>\nTry the following code:\n\
    <code>\n$music = 'o o| .| o| o| .| .| .| .| o o';\n$music_array = explode(\" \"\
    , $music);\n$last_beats = array();\n$last_beats[$music_array[0]] = 0;\nfor ($i\
    \ = 1; $i < count($music_array); $i++) {\n    $last_beats[$music_array[$i]] =\
    \ $last_beats[$music_array[$i - 1]] + 4;\n}\n</code>\n$last_beats array will contain\
    \ values [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] where $last_beats[0] equals to 0.\n\
    The $last_beats[$music_array[$i]] expression uses key of the array element $music_array[$i]\
    \ as the index for the array. As $music_array[$i] equals 'o', $last_beats[$music_array[$i]]\
    \ equals to $last_beats[$music_array[$i - 1]].\n<|/ a tags=php,parsing,arrays\
    \ |>\n<| c |>\nThanks", "  $return = array();\n  $music_string = preg_replace('/\\\
    |+/', ',', $music_string);\n  $music_string = rtrim($music_string, ',');\n  $music_array\
    \ = explode(',', $music_string);\n  $length = strlen($music_string);\n  for($i\
    \ = 0; $i < $length; $i++) {\n    $return[$i] = $music_array[$i];\n  }\n  return\
    \ $return;\n}\n", "  return array_reduce(str_split($music_string), function($result,\
    \ $beat) {\n    $result .= isset($beat[$beat.length - 1]) ? $beat[$beat.length\
    \ - 1] : 0;\n    return $result;\n  }, 0);\n}\n</code>\nIf you need even more\
    \ fun, just look into the code of parse_music in my example. I've got some ideas\
    \ from it too.\n<|/ a dscore=0 |>\n<| c |>\nI see what you mean here, but I'm\
    \ having trouble seeing how the 'note' part of the code can solve this.  I've\
    \ looked at your example, and it doesn't seem to fit with what I'm trying to do\
    \ here, which is basically to take a user input string, and convert it to the\
    \ list of integers that I show in my original example.\n<|/ c |>\n<| c |>\nAh,\
    \ so you want to have a function that transforms `o|` into `[4, 2, 1, 2, 2, 1]`\
    \ and so on. Well, that is indeed what my example is doing.\n<|/ c |>\n<| c |>\n\
    Ok, I see what you're doing there.  However, it seems your code assumes that the\
    \ user has entered the notes one at a time (note 'o' first, then note 'o|', etc.)\
    \  I want the user to be able to enter a whole string, and get back the list of\
    \ integers that I'm looking for.  I see what you're doing here, and it's close\
    \ to what I'm looking for.  I just want to figure out how to incorporate this\
    \ into my code if at all possible.\n<|/ c |>\n<| c |>\nIt does, sorry for that.\
    \ I edited my answer and made it a little more obvious. I hope it clarifies it.\n\
    <|/ c |>\n<| c |>\nThank you so much for your help.  I really appreciate it. \
    \ I'm going to have to go through your example and understand each part of it.\
    \  I'm very new to PHP so it's going to take me some time to digest the code.\
    \  I'm sure I can figure it out though.  Thanks again.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThis code will take any string input that contains the special ascii notation\
    \ of musical notes, and output a number that represents the number of beats in\
    \ each note in a string of notes.  It doesn't matter if the user enters one note\
    \ or hundreds of notes.  For example, if the user enters O|.| then you get the\
    \ number of beats in each note.  If the user enters o|.| then you get the same\
    \ output.  I just want to know how I can combine these two code snippets together,\
    \ so I can use the user input as the source for these integers, instead of hav",
  "  $music_array = array();\n  for($i = 0; $i < strlen($music_string); $i++) {\n\
    \    $music_array[] = musicToNote($music_string[$i]);\n  }\n\n  // We need to\
    \ sort music_array because it is assumed that music is written in the order given\n\
    \  sort($music_array);\n\n  $beats_per_note = array();\n  for($i = 0; $i < strlen($music_string);\
    \ $i++) {\n    if($music_array[$i] === 'o') {\n      $beats_per_note[] = 4;\n\
    \    }\n    else if($music_array[$i] === 'o|') {\n      $beats_per_note[] = 2;\n\
    \    }\n    else if($music_array[$i] === '.|') {\n      $beats_per_note[] = 1;\n\
    \    }\n  }\n\n  return $beats_per_note;\n}\n", "    $music_string = str_replace(['o',\
    \ '|', '.'], ' ', $music_string);\n    $music_array = explode(' ', $music_string);\n\
    \    $beats = array();\n    foreach ($music_array as $value) {\n        if ($value\
    \ === 'o') {\n            $beats[] = 4;\n        } elseif ($value === 'o|') {\n\
    \            $beats[] = 2;\n        } elseif ($value === '.|') {\n           \
    \ $beats[] = 1;\n        } else {\n            $beats[] = 4;\n        }\n    }\n\
    \    return $beats;\n}\n</code>\n<|/ a dscore=0 tags=php |>\n<| a dscore=0 |>\n\
    <code>\n$music = '. | o | o| o| o| o| .| o| o .| o|.';\n$music=str_replace(['o','|','.'],\
    \ ' ', $music);\n$music=explode(\" \", $music);\n$music=array_map('trim',$music);\n\
    $music=array_map('str_split',$music);\n$music=array_map('trim',$music);\n$music=array_filter($music);\n\
    $music=array_map('intval',$music);\n\nprint_r($music);\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nPlease add some explanation to your answer. Why do you think that\
    \ it solves the problem?\n<|/ c |>\n<| c |>\n$music=str_replace(['o','|','.'],\
    \ ' ', $music);\n<|/ c |>\n<| c |>\nThe second param to `str_replace` should be\
    \ a string; not a list. I suggest you delete this answer; it's just noise as far\
    \ as the OP is concerned.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$music = '. | o\
    \ | o| o| o| o| .| o| o .| o|.';\n\n$music=str_replace(['o','|','.'], ' ', $music);\n\
    \n$music=explode(\" \", $music);\n\n$music=array_map('trim',$music);\n\n$music=array_map('str_split',$music);\n\
    \n$music=array_map('trim',$music);\n\n$music=array_filter($music);\n\n$music=array_map('intval',$music);\n\
    \nprint_r($music);\n</code>\n<|/ a tags=php |>\n<| a |>\n<code>\n$music = '. ",
  "  // YOUR CODE HERE\n  $music_array = explode(' ', $music_string);\n  $music_array_len\
    \ = count($music_array);\n\n  $music_result = array();\n\n  for ($i = 0; $i <\
    \ $music_array_len; $i++) {\n    $music_array[$i] = str_split($music_array[$i]);\n\
    \    $music_array[$i] = array_map(function($x) {\n      return intval($x);\n \
    \   }, $music_array[$i]);\n    $music_array[$i] = array_filter(function($x) {\n\
    \      return $x;\n    }, $music_array[$i]);\n  }\n\n  for ($i = 0; $i < $music_array_len;\
    \ $i++) {\n    foreach ($music_array[$i] as $note) {\n      if ($note >= 4) {\n\
    \        $music_result[] = $note;\n        break;\n      }\n    }\n  }\n\n  return\
    \ $music_result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for taking the time to\
    \ answer my question! Your solution works beautifully and is quite concise. I\
    \ just have to make sure that I read all the code before I understand what I am\
    \ doing. I appreciate it!\n<|/ c |>\n<| c |>\nI'm glad I could help. I actually\
    \ wrote that solution about 10 minutes ago, so you should be able to remember\
    \ it.\n<|/ c |>\n<| a dscore=2 |>\nThe solution uses regular expressions.\n<code>\n\
    <?php\n\n$music_string = \"o o| .| o| o| .| .| .| .| o o\";\n\n$music_array =\
    \ preg_split('/[\\. \\o \\o|\\|\\|]+/', $music_string);\n\n$music_result = array();\n\
    \nforeach ($music_array as $key => $value) {\n    if (preg_match('/^\\D+$/', $value))\
    \ {\n        continue;\n    }\n\n    $music_result[] = $value;\n}\n\nprint_r($music_result);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\nYou can use regex for this.\
    \ See demo\nRegex is:\n<code>\n^[\\.\\|\\:\\(\\)]+$\n</code>\nCode snippet is:\n\
    <code>\n$input = \"o o| .| o| o| .| .| .| .| o o\";\nif(preg_match(\"/^[\\.\\\
    |\\:\\(\\)]+$/\",$input)){\n  echo \"true\";\n}else{\n  echo \"false\";\n}\n",
  "    // YOUR CODE GOES HERE\n}\n", "  // YOUR CODE HERE\n  $music_array = explode(\"\
    \ \",$music_string);\n  $music_count = count($music_array);\n  $music_notes =\
    \ array();\n  $music_notes_count = array();\n  for($i = 0; $i < $music_count;\
    \ $i++){\n    $music_notes[$i] = strpos($music_array[$i],'o');\n    $music_notes_count[$i]\
    \ = strpos($music_array[$i],'o|');\n    if($music_notes[$i] == FALSE && $music_notes_count[$i]\
    \ == FALSE){\n      if($music_notes_count[$i] == FALSE){\n        for($j = strpos($music_array[$i],'.|');\
    \ strpos($music_array[$i],'o|') < strpos($music_array[$i],'.|'); $j++){\n    \
    \      if($j < strpos($music_array[$i],'.|')){\n            break;\n         \
    \ }\n        }\n        if($j < strpos($music_array[$i],'.|')){\n          $music_notes[$i]\
    \ = strpos($music_array[$i],'o|');\n        }\n        else{\n          $music_notes[$i]\
    \ = strpos($music_array[$i],'.|');\n        }\n      }\n      else{\n        for($j\
    \ = strpos($music_array[$i],'.|'); strpos($music_array[$i],'o|') < strpos($music_array[$i],'.|');\
    \ $j++){\n          if($j < strpos($music_array[$i],'.|')){\n            break;\n\
    \          }\n        }\n        if($j < strpos($music_array[$i],'.|')){\n   \
    \       $music_notes[$i] = strpos($music_array[$i],'.|');\n        }\n       \
    \ else{\n          $music_notes[$i] = strpos($music_array[$i],'o|');\n       \
    \ }\n      }\n    }\n    else{\n      $music_notes[$i] = strpos($music_array[$i],'o|');\n\
    \      $music_notes_count[$i] = strpos($music_array[$i],'.|');\n    }\n  }\n \
    \ $music_notes[$i] = $music_notes[$i] + strlen($music_array[$i]) - 1;\n  for($j\
    \ = $music_notes[$i]; $", "    // Your code here\n}\n</code>\nThen it's easy to\
    \ implement count_notes() function.\n<code>\n<?php", "  $music_string = preg_replace('/[^a-z]/\
    \ i', '', $music_string);\n  $music_array = explode(' ', $music_string);\n  $notes\
    \ = array();\n  $last_note = null;\n  foreach ($music_array as $note) {\n    if\
    \ ($note != '') {\n      if ($note == $last_note) {\n        array_push($notes,\
    \ 0);\n      } else {\n        $notes[] = $notes[count($notes) - 1] + 1;\n   \
    \   }\n      $last_note = $note;\n    }\n  }\n  return $notes;\n}\n", "    //\
    \ Split music string into pieces by whitespace\n    $music_pieces = explode('\
    \ ', $music_string);\n\n    // Store each piece in an array with its first letter\
    \ as key for array and value as its index\n    $music_array = array();\n    $index\
    \ = 0;\n    foreach ($music_pieces as $piece) {\n        $music_array[$piece[0]]\
    \ = $index;\n        $index++;\n    }\n\n    // Count number of beats per note\n\
    \    $note_count = array();\n    foreach ($music_array as $key => $index) {\n\
    \        if ($key == 'o') {\n            $note_count[$key] = 0;\n        } elseif\
    \ ($key == 'o|') {\n            $note_count[$key] = 1;\n        } elseif ($key\
    \ == '|') {\n            $note_count[$key] = 4;\n        } else {\n          \
    \  $note_count[$key] = 4;\n        }\n    }\n\n    return $note_count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,notepad dscore=0 |>\nThe key point is\
    \ to use some form of recursion.\n<code>\n$notes = array(\"C#4 D#4 E#4\");\n$notesCount\
    \ = array();\n$notesCount[0] = 4;\n", "  // Your code here\n  $music_array = explode('|',\
    \ $music_string);\n  $new_music_array = array();\n  for($i=0;$i<count($music_array);$i++)\
    \ {\n    switch($music_array[$i]) {\n      case 'o':\n        $new_music_array[]\
    \ = 1;\n        break;\n      case 'o|':\n        $new_music_array[] = 2;\n  \
    \      break;\n      case '.|':\n        $new_music_array[] = 1;\n        break;\n\
    \      default:\n        $new_music_array[] = 0;\n        break;\n    }\n  }\n\
    \  return $new_music_array;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere is my\
    \ solution. I use recursion to solve this problem. \n<code>\n<?php\n$music_notes\
    \ = array(\n    'o',\n    'o|',\n    'o|',\n    'o|',\n    '.|',\n    '.|',\n\
    \    'o',\n    'o|',\n    'o|',\n    'o|',\n    'o|',\n    '.|',\n    '.|',\n\
    \    '.|',\n    '.|'\n);\n\n$beats = calcBeats($music_notes);\necho \"<pre>\"\
    ;\nprint_r($beats);\necho \"</pre>\";", "    // TODO: Implement this function\n\
    \    $music_string = str_replace(\" \", \"\", $music_string);\n    $music_array\
    \ = str_split($music_string);\n\n    $music_array_sum = 0;\n    $music_array_count\
    \ = 1;\n\n    $music_array = array_filter($music_array, 'is_numeric');\n\n   \
    \ foreach($music_array as $music) {\n        if($music != 0) {\n            $music_array_sum\
    \ += $music;\n            $music_array_count++;\n        }\n    }\n\n    return\
    \ [$music_array_sum, $music_array_count];\n}\n\n$music_string = \"o o| .| o| o|\
    \ .| .| .| .| .| o o\";\n", "  $music_array = explode(\" \", $music_string);\n\
    \  $music_array = $music_array[0];\n  $music_array = explode(\"|\", $music_array);\n\
    \  $music_array = array_pad($music_array, count($music_array) / 2, \"0\");\n\n\
    \  $return_array = array();\n  for($i = 0; $i < count($music_array); $i++) {\n\
    \    if ($music_array[$i] == 'o') {\n      $return_array[$i] = 4;\n    }\n   \
    \ else if ($music_array[$i] == '|') {\n      $return_array[$i / 2] = 2;\n    }\n\
    \    else {\n      $return_array[$i] = 1;\n    }\n  }\n\n  return $return_array;\n\
    }\n", "    $music_string = preg_replace('/[\\s\\n]+/', ' ', $music_string);\n\
    \    $music_string = preg_replace('/\\|/', '', $music_string);\n    $music_string\
    \ = preg_replace('/\\./', '', $music_string);\n\n    $music_array = explode('\
    \ ', $music_string);\n    $music_array_size = count($music_array);\n    $music_array_size\
    \ = intval($music_array_size);\n\n    // Array with beat count of each note\n\
    \    $beats = array();\n\n    // For each music note\n    for ($i = 0; $i < $music_array_size;\
    \ $i++) {\n        // Check if note is whole note\n        if ($music_array[$i]\
    \ == 'o') {\n            $beats[$i] = 4;\n        } elseif ($music_array[$i] ==\
    \ 'o|') {\n            $beats[$i] = 2;\n        } elseif ($music_array[$i] ==\
    \ '.|') {\n            $beats[$i] = 1;\n        } else {\n            // If note\
    \ is neither a whole note nor a half note nor a quater note\n            throw\
    \ new \\Exception();\n        }\n    }\n\n    // Return beat counts\n    return\
    \ $beats;\n}\n", "  // Parse music string to array\n  $music_array = explode('\
    \ ', $music_string);\n\n  // Sum notes length by its position\n  $music_sum =\
    \ array_sum($music_array);\n\n  // Return music array\n  return $music_array;\n\
    }\n", "    $notes = array();\n    $notes_length = strlen($music_string);\n   \
    \ $notes_counter = 1;\n    $note_position = 0;\n    $last_note_position = 0;\n\
    \    $last_note_length = 0;\n\n    while ( ($last_note_position < $notes_length)\
    \ && ($note_position < $notes_length - $last_note_length) ) {\n        if ($music_string[$note_position]\
    \ == 'o') {\n            if ($notes_counter <= 4 ) {\n                array_push($notes,\
    \ $notes_counter);\n                $last_note_length++;\n                $notes_counter++;\n\
    \            }\n        }\n        else if ($music_string[$note_position] == '|')\
    \ {\n            if ($notes_counter <= 2 ) {\n                array_push($notes,\
    \ $notes_counter);\n                $last_note_length++;\n                $notes_counter++;\n\
    \            }\n        }\n        else if ($music_string[$note_position] == '.')\
    \ {\n            if ($notes_counter <= 1 ) {\n                array_push($notes,\
    \ $notes_counter);\n                $last_note_length++;\n                $notes_counter++;\n\
    \            }\n        }\n        else {\n            throw new Exception(\"\
    Can't recognize musical note '\" . $music_string[$note_position] . \"' at position\
    \ \" . $note_position . \" in the music string '\" . $music_string . \"'\");\n\
    \        }\n\n        $note_position++;\n    }\n\n    if ($notes_counter > $last_note_length)\
    \ {\n        array_push($notes, $notes_counter - 1);\n    }\n\n    return $notes;\n\
    }", "    $notes = [];\n    for ($i = 0; $i < strlen($music_string); $i++) {\n\
    \        $notes[$i] = ord($music_string[$i]) - 64; // ascii code of 'o'\n    }\n\
    \    return $notes;\n}\n", "    // Write your code here\n}", "    $music_array\
    \ = array();\n\n    $music_string = preg_replace('~[\\.\\|\\+\\-]~', '', $music_string);\n\
    \    $music_length = count($music_string);\n\n    for ($i = 0; $i < $music_length;\
    \ $i++) {\n        switch ($music_string[$i]) {\n            case 'o':\n     \
    \       case 'o|':\n                $music_array[] = 4 - $music_length * ($i +\
    \ 1) / ($music_length + 1);\n                break;\n            case '.|':\n\
    \                $music_array[] = 1 - $music_length * ($i + 1) / ($music_length\
    \ + 1);\n                break;\n        }\n    }\n\n    return $music_array;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHi Oleg, thank you for your answer! I've\
    \ done it the same way but I don't understand what's wrong with my program. I\
    \ thought it would be a lot easier if I used explode instead. I've tried to figure\
    \ it out but I couldn't get it working with explode either. Could you please help\
    \ me figure out what's wrong with my program? I've edited my question.\n<|/ c\
    \ |>\n<| c |>\nIn `parse_music` function you have a line `$music_array = array();`\
    \ This initializes array and you use it later in while loop. It should go outside\
    \ this function. That is why you are getting wrong results for `'o o| .| o| o|\
    \ .| .| .| .| o o'`.\n<|/ c |>\n<| c |>\nIt worked! Thank you for your answer,\
    \ I understand now what I've been doing wrong!\n<|/ c |>\n<| c |>\nNice! I thought\
    \ it would be more complicated than this. I will try to come up with something.\n\
    <|/ c |>\n<| a tags=php,arrays,string,explode |>\nYou can use the following code\
    \ to get the desired output:\n<code>\n<?php\n$str=' o o| .| o| o| .| .| .| .|\
    \ o o';\n$strArr = explode(' ',$str);\n$strArr = array_filter($strArr);\n$strArr\
    \ = array_count_values($strArr);\narsort($strArr);\nprint_r($strArr);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI love the way you use `array_filter` and `array_count_values`.\
    \ I've never used `array_filter` in this way.\n<|/ c |>\n<| c |>\nI ", "    $lines\
    \ = explode(\"\\n\", $music_string);\n    $beats = array();\n    foreach ($lines\
    \ as $line) {\n        $notes = explode(' ', $line);\n        $beat = 0;\n   \
    \     foreach ($notes as $note) {\n            if ($note == '.') {\n         \
    \       $beat += 0.25;\n            } else {\n                $beat += ord($note)\
    \ - ord('o') + 1;\n            }\n            $beats[] = $beat;\n        }\n \
    \   }\n    return $beats;\n}\n</code>\nIn Python you could use something like\
    \ this to find the length of each note:\n<code>\ndef note_length(note):\n    return\
    \ 0.125 if note == 'o' else 1 if (note == 'o|' or note == '.|') else 0.25\n</code>\n\
    <|/ a |>\n<| c |>\nHey thanks for the answer! I dont think it will work, since\
    \ we dont know how many notes will we be given. I was thinking of putting a note\
    \ into a list and counting the number of items in that list.\n<|/ c |>\n<| c |>\n\
    , you are right. I missed this point in my first draft. I'll edit my answer.\n\
    <|/ c |>\n<| c |>\n, I've edited my answer again. Please check if this time it\
    \ will work as you expect.\n<|/ c |>\n<| c |>\nthanks for the answer. Yeah I was\
    \ thinking of something similiar. However we dont know the note to count so i\
    \ dont know how to do it like that. I was thinking of putting it in a list and\
    \ counting how many items are in that list.\n<|/ c |>\n<| c |>\n, I've added Python\
    \ implementation to my answer. Maybe this will help you to understand how it works.\n\
    <|/ c |>\n<| a |>\n<code>\n public function count_notes($note) {\n     $note =\
    \ explode(',', $note);\n     $note = array_filter($note);\n     $note = array_map('trim',\
    \ $note);\n     $note = array_map('trim', explode(',', $note));\n     $note =\
    \ array_map('trim', $note);\n\n     $note = array_combine($note, range(1, count($note)));\n\
    \     return $note;\n }\n</code>\n<|/ a dscore=0 tags=string,php,arrays |>\n<|\
    \ c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a dscore=0 tags=string,php,arrays |>\n<code>", "  $music\
    \ = preg_split('/(\\d+)|\\|/', $music_string);\n  $return = [];\n\n  foreach ($music\
    \ as $key => $note) {\n    if ($note === 'o' || $note === '.') {\n      $return[$key]\
    \ = 4;\n    } else {\n      $return[$key] = (int)$note;\n    }\n  }\n\n  return\
    \ $return;\n}\n</code>\n<|/ a |>\n<| c |>\nIt is not working properly, the example\
    \ you gave is not working properly\n<|/ c |>\n<| c |>\ncan you provide an example\
    \ of how the function is not working properly?\n<|/ c |>\n<| c |>\nI have just\
    \ updated the question with your answer\n<|/ c |>\n<| c |>\nI've updated my answer,\
    \ hope this will help\n<|/ c |>\n<| a |>\nTry this :\n<code>\n$music = 'o o| .|\
    \ o| o| .| .| .| .| o o';\n\n$musicArray = explode(\"|\", $music);\n\n$count =\
    \ 0;\n$count1 = 0;\n$count2 = 0;\n\nforeach ($musicArray as $value) {\n    if\
    \ ($value == 'o' || $value == '.') {\n        $count++;\n    }\n    elseif ($value\
    \ == 'o|') {\n        $count1++;\n    }\n    elseif ($value == '.|') {\n     \
    \   $count2++;\n    }\n}\n\n$returnArray = [$count, $count1, $count2];\n</code>\n\
    <|/ a tags=php dscore=1 |>\n<| c |>\nIt is working but it is not considering the\
    \ whole notes lasts four beats\n<|/ c |>\n<| c |>\nI have updated my answer, hope\
    \ this will help\n<|/ c |>\n<| c |>\nYes it works now, it just needed to add more\
    \ ifs thanks again\n<|/ c |>\n<| a |>\nI see that this question is more than a\
    \ year old, but I had the same question and had to solve it in an elegant way\
    \ using regular expressions.\nI solved it this way:\n<code>\n$music = preg_replace('/(\\\
    d+)|\\|./', '$1', $music);\n$music = preg_replace('/(\\d+)|\\|{3,}/', '$1', $music);\n\
    $music = preg_replace('/(\\d+)|\\|/', '$1', $music);\n</code>\nThis takes care\
    \ of the cases you have listed, because you always have at least one beat, and\
    \ at least one note lasts one beat. You can add more conditions if you need it\
    \ for more than these cases.\n<|/ a tags=php d", "    $notes = preg_split('/[\\\
    .\\|]+/', $music_string);\n    $beats = [];\n    $current_note = 0;\n    foreach($notes\
    \ as $note) {\n        if ($note !== '.' && $note !== 'o') {\n            $beats[]\
    \ = $current_note;\n            $current_note = 0;\n        } elseif ($note ===\
    \ '.') {\n            $current_note++;\n        } else {\n            $current_note\
    \ = 4;\n        }\n    }\n    return $beats;\n}\n</code>\nAnd here is how to use\
    \ this code:\n<code>\n$music_string = 'o o| .| o| o| .| .| .| .| o o';\n$beats\
    \ = parse_music($music_string);\necho '<table>';\nforeach($beats as $beat) {\n\
    \    echo '<tr>';\n    foreach($beat as $note) {\n        echo '<td>'.$note.'\
    \ </td>';\n    }\n    echo '</tr>';\n}\necho '</table>';\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nWhy can't the function just return the `beats` array directly?\n\
    <|/ c |>\n<| c |>\nYes it can, but I wanted to keep the code readable. I also\
    \ added the description of what this function is supposed to do, maybe this will\
    \ help OP understand the code better.\n<|/ c |>\n<| c |>\nNice! I wonder why no\
    \ one else seems to have suggested this as an alternative!\n<|/ c |>\n<| c |>\n\
    Thank you very much for your time! I must admit that the solution looks very good\
    \ and it is easy to understand. The problem is that the function should be reusable\
    \ and I cant figure out how to do that. Because this function should return an\
    \ array of arrays, I cant just call it like this:\n`$notes = parse_music($music);`\
    \ - that gives me an error:\n`Parse error: syntax error, unexpected '(' in /Applications/XAMPP/xamppfiles/htdocs/notes/music.php\
    \ on line 14`\n<|/ c |>\n<| c |>\nThe error you see is because there is a missing\
    \ `;` after `parse_music($music);`. Just add one and you are good to go\n<|/ c\
    \ |>\n<| a tags=php |>\n<code>\n<?php\n$notes = array(\n    'o o',\n    '.|',\n\
    \    '.|',\n    '.|',\n    '.|',\n    '.|',\n    '.|',\n    '.|',\n    '.|',\n\
    \    '.|", "    $music_string = str_replace(' ', '', $music_string);\n    $music_array\
    \ = explode('|', $music_string);\n    $music_array = array_map(function($note)\
    \ {\n        list($note, $beats) = explode('o', $note, 2);\n        return $beats;\n\
    \    }, $music_array);\n    return array_sum($music_array);\n}\n", "  // TODO:\
    \ Write code\n  return [];\n}", "  $music_string = str_replace(\"\\n\", ' ', $music_string);\n\
    \  $music_string = str_replace(\",\", ' ', $music_string);\n  // Convert to array.\n\
    \  $music_array = explode(' ', $music_string);\n  // Remove empty notes.\n  $music_array\
    \ = array_filter($music_array);\n  // Split notes.\n  foreach ($music_array as\
    \ $key => $value) {\n    // \"o\" -> \"0o\", \"o|\" -> \"0o|\", \"o.|\" -> \"\
    o.|\", etc..\n    if (strpos($value, 'o') === 0) {\n      $music_array[$key] =\
    \ str_pad(base_convert($value, 10, 2), 4, 0, STR_PAD_LEFT);\n    }\n  }\n  //\
    \ Calculate beats.\n  $beats = array();\n  foreach ($music_array as $key => $value)\
    \ {\n    // \"0o4\" -> \"0o4\"\n    if (strpos($value, '0o4') === 0) {\n     \
    \ $beats[] = str_pad(base_convert(substr($value, 4), 10, 2), 4, 0, STR_PAD_LEFT);\n\
    \      unset($music_array[$key]);\n    }\n  }\n  // Remove all beats.\n  foreach\
    \ ($music_array as $key => $value) {\n    // \"0o4\" -> \"0\"\n    if (strpos($value,\
    \ '0') === 0) {\n      $music_array[$key] = substr($value, 1);\n    }\n  }\n \
    \ return $music_array;\n}\n", "  $music_array = explode(\"\\n\", $music_string);\n\
    \  $music_array = array_filter($music_array, function($item) {\n    return strlen($item)\
    \ > 0;\n  });\n\n  $music_array = array_map(function($item) {\n    return explode('\
    \ ', $item, 2);\n  }, $music_array);\n\n  $music_array = array_map(function($item)\
    \ {\n    return $item[0];\n  }, $music_array);\n\n  $music_array = array_count_values($music_array);\n\
    \n  sort($music_array);\n\n  return array_keys($music_array);\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nIt would be even more useful to give a link to the original question\
    \ and its answers where the OP got their input from.\n<|/ c |>\n<| c |>\nThe original\
    \ question is here: https://stackoverflow.com/questions/56060111/count-the-number-of-times-a-special-note-appears-in-a-music-string\
    \ The answers here are also helpful: https://stackoverflow.com/a/56060339/1249511\n\
    <|/ c |>\n<| a tags=php |>\nThis was the fastest solution I could come up with\
    \ while writing it on my phone.  A bit of optimization would probably help with\
    \ some cases, but the code should work fine.\n<code>", "    // Your code here\n\
    }\n", "  $music_array = preg_split('//', $music_string);\n  $music_array_count\
    \ = count($music_array);\n  $beats = 0;\n  $notes = array();\n  for ($i = 0; $i\
    \ < $music_array_count; $i++) {\n    switch ($music_array[$i]) {\n      case 'o':\n\
    \        $notes[$i] = 4;\n        break;\n      case 'o|':\n        $notes[$i]\
    \ = 2;\n        break;\n      case '.|':\n        $notes[$i] = 1;\n        break;\n\
    \    }\n    if ($notes[$i] > $beats) {\n      $beats = $notes[$i];\n    }\n  }\n\
    \  return $beats;\n}\n</code>\n<|/ a dscore=1 tags=php |>\n<| c |>\nThis worked,\
    \ thanks! I'll just have to figure out how to convert a musical note to a frequency\
    \ and then figure out the rest.\n<|/ c |>\n<| c |>\nI added a code sample for\
    \ converting musical note to frequency. Good luck!\n<|/ c |>\n<| a dscore=0 |>\n\
    This is your problem:\n<code>\n$array[$key] = $array[$key] . $val; //<--here\n\
    </code>\n$array[$key] returns a string, not an array, use $array[$key] = $val;\
    \ instead.\n<|/ a tags=php |>\n<| a dscore=0 tags=php |>\nI assume you want to\
    \ do something like this\n<code>\n<?php\n", "  $notes = str_split($music_string);\n\
    \  $beats = [];\n\n  foreach ($notes as $key => $note) {\n    if ($note === 'o')\
    \ {\n      $beats[$key] = 4;\n    } elseif ($note === 'o|') {\n      $beats[$key]\
    \ = 2;\n    } elseif ($note === '.|') {\n      $beats[$key] = 1;\n    } else {\n\
    \      throw new Exception(sprintf('Unknown music note \"%s\".', $note));\n  \
    \  }\n  }\n\n  return $beats;\n}\n\n/**\n * Provides simple implementation of\
    \ Knuth-Morris-Pratt algorithm for music analysis using\n * dynamic programming.\n\
    \ */\nclass MusicKMP {\n  private $notes;\n  private $max_k;\n  private $min_p;\n\
    \  private $min_d;\n\n  private $D;\n  private $P;\n  private $kmp;\n\n  private\
    \ $max_beat;\n\n  public function __construct($music_notes, $max_k, $min_p, $min_d)\
    \ {\n    $this->notes = $music_notes;\n    $this->max_k = $max_k;\n    $this->min_p\
    \ = $min_p;\n    $this->min_d = $min_d;\n\n    $this->D = array_fill(0, $this->max_k,\
    \ 0);\n    $this->P = array_fill(0, $this->max_k, 0);\n\n    $this->kmp = new\
    \ KMP();\n    $this->kmp->setMaxK($this->max_k);\n    $this->kmp->setMinP($this->min_p);\n\
    \    $this->kmp->setMinD($this->min_d);\n  }\n\n  public function execute() {\n\
    \    $beats = $this->kmp->execute($this->notes);\n    $beats_max = $this->max_beat;\n\
    \n    foreach ($beats as $beat) {\n      $this->D[$beat] = min(\n        $this->D[$beat\
    \ - $this->min_d] + 1,\n        $this->D[$beat],\n        $this->D[$beat + $this->min_d]\
    \ + 1,\n        $this->D[$beat - $this->min_d + 1] + 1,\n        $this->D[$beat\
    \ + $this->min_d + 1]\n      );\n      $this->P[$beat] = min(\n        $this->P[$beat],\n\
    \        $this->P[$beat - $this->min_d] + 1,\n        $this->P[$beat + $this->min_d]\
    \ + 1,\n        $this->P[$beat - $this->min_d + 1] + 1,\n        $this->P[$beat\
    \ + $this->min_d + 1]\n      );\n    }\n\n    return $this->D[$beats_max];\n \
    \ }\n", "    $music = [];\n    $notes = str_split($music_string);\n    $current_note\
    \ = 0;\n    $current_beat = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $music[$current_beat]++;\n            $current_beat++;\n\
    \        } else {\n            $current_note++;\n        }\n    }\n    return\
    \ $music;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $music = array(\n\"o\",\n\"o|\",\n\".|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\
    \"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\"\
    ,\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"\
    o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\
    \"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\"\
    ,\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"\
    o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\
    \"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\"\
    ,\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"\
    o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",\n\"o|\",", "    $music_string\
    \ = $music_string; // Just to prevent you from forgetting it\n    $music_array\
    \ = [];\n    $current_beat = 0;\n    $music_array[] = 0; // 0 represents whole\
    \ note\n    foreach (str_split($music_string) as $char) {\n        $char = mb_convert_encoding($char,\
    \ 'UTF-16', 'UTF-8'); // Convert to UTF-8 so that it won't lose accented characters\n\
    \        $char = mb_convert_encoding($char, 'UTF-8', 'UTF-16'); // Convert to\
    \ UTF-16 so that it won't lose accented characters\n        switch ($char) {\n\
    \            case 'o': // whole note\n                $music_array[] = $current_beat;\n\
    \                $current_beat += 4;\n                break;\n            case\
    \ 'o|': // half note\n                $music_array[] = $current_beat;\n      \
    \          $current_beat += 2;\n                break;\n            case '.|':\
    \ // quater note\n                $music_array[] = $current_beat;\n          \
    \      $current_beat++;\n                break;\n        }\n    }\n    return\
    \ $music_array;\n}\n", "    $music_array = str_split($music_string, 1);\n    $music_array[$music_array[0]]\
    \ = 0;\n    $music_array[$music_array[1]] = 0;\n    $music_array[$music_array[2]]\
    \ = 0;\n    foreach ($music_array as $key => $value) {\n        $music_array[$key]\
    \ += $music_array[$key-1];\n    }\n    $music_array[$music_array[0]] += $music_array[$music_array[1]];\n\
    \    $music_array[$music_array[1]] += $music_array[$music_array[2]];\n    $music_array[$music_array[2]]\
    \ += $music_array[$music_array[0]];\n    return $music_array;\n}", "  $music =\
    \ array();\n  $current = 1;\n  $last_note = -1;\n  for ($i = 0; $i < strlen($music_string);\
    \ $i++) {\n    if ($music_string[$i] == '|') {\n      $music[$current] = $last_note;\n\
    \      $last_note = $current;\n      $current = 0;\n    } else if ($music_string[$i]\
    \ == 'o') {\n      $music[$current]++;\n      $last_note = $current;\n      $current\
    \ = 0;\n    } else {\n      $current *= 2;\n      if ($last_note == -1) {\n  \
    \      $last_note = $current;\n      }\n    }\n  }\n  return $music;\n}", "  \
    \  $beats = array();\n    $offset = 0;\n    $last_note = null;\n\n    foreach\
    \ (str_split($music_string) as $char) {\n        switch ($char) {\n          \
    \  case 'o':\n            case 'O':\n            case '|':\n            case '.':\n\
    \                $beats[] = 4;\n                $offset++;\n                break;\n\
    \n            case '|':\n                $beats[] = 2;\n                $offset++;\n\
    \                break;\n\n            case ' ':\n                $beats[] = 1;\n\
    \                $offset++;\n                break;\n\n            case '|':\n\
    \                $beats[] = 1;\n                $offset++;\n                break;\n\
    \n            default:\n                if ($last_note == null || $last_note !=\
    \ $char) {\n                    $last_note = $char;\n                    $offset\
    \ = 0;\n                }\n                break;\n        }\n    }\n    return\
    \ $beats;\n}\n", "  // Implement this function yourself.\n}\n", "    // You are\
    \ not allowed to use loops or conditional expressions in this function.\n    //\
    \ You may use built-in string functions like explode() or preg_split().\n    //\
    \ The input string has musical notes separated by empty strings. \n    // Return\
    \ list with length equal to number of non-empty strings in $music_string.\n  \
    \  $music_array = explode('', $music_string);\n    $result = [];\n    foreach\
    \ ($music_array as $note) {\n        switch ($note) {\n            case 'o':\n\
    \            case 'o|':\n            case 'o|':\n            case 'o|':\n    \
    \        case 'o|':\n            case 'o|':\n            case 'o|':\n        \
    \    case 'o|':\n            case 'o|':\n                $result[] = 4;\n    \
    \            break;\n            case '.|':\n                $result[] = 1;\n\
    \                break;\n            default:\n                $result[] = 0;\n\
    \                break;\n        }\n    }\n    return $result;\n}\n</code>\n<|/\
    \ a tags=algorithm,combinatorics,math,php |>\n<| a |>\n<code>\n$input = 'o o|\
    \ .| o| o| .| .| .| .| o o';\n\n$notesFound = preg_split('//', $input);\n$notesCount\
    \ = count($notesFound);\n\n$notLastNotes = array();\nfor($i = 0; $i < $notesCount;\
    \ $i++) {\n    if($notesFound[$i] === 'o' || $notesFound[$i] === 'o|' || $notesFound[$i]\
    \ === 'o|' || $notesFound[$i] === 'o|' || $notesFound[$i] === 'o|' || $notesFound[$i]\
    \ === 'o|' || $notesFound[$i] === 'o|' || $notesFound[$i] === 'o|' || $notesFound[$i]\
    \ === 'o|') {\n        $notLastNotes[] = $i;\n    }\n}\n\n$result = array();\n\
    foreach($notLastNotes as $note) {\n    if($notesCount > 1) {\n        for($i =\
    \ 0; $i < $notesCount; $i++) {\n            if($i == $note) {\n              \
    \  $result[]++;\n            }\n        }\n    } else {\n        $result[]++;\n\
    \    }\n}\n\nvar_dump($result);\n</code>\n<|/ a dscore=0 tags=algorithm,combinatorics,math,php\
    \ |>\n<| c |>\nYou shouldn't use `preg_split` for this. If you use it to split\
    \ on `'|'`, it will create an empty element between each note. That will create\
    \ gaps in your results. Also, your code will always return ", "  $result = [];\n\
    \  $music_string = strtolower($music_string);\n  for ($i = 0; $i < strlen($music_string);\
    \ $i++) {\n    if ($music_string[$i] === 'o') {\n      $result[$i] = 4;\n    }\n\
    \    elseif ($music_string[$i] == '|') {\n      $result[$i] = 2;\n    }\n    elseif\
    \ ($music_string[$i] === '.') {\n      $result[$i] = 1;\n    }\n  }\n  return\
    \ $result;\n}\n", "  $music_string = rtrim($music_string);\n  $music_notes = preg_split('/(o|.|o|.|o|.|o|.|o|.)/',\
    \ $music_string);\n  return array_map('trim', $music_notes);\n}\n", "    \n  \
    \  // Your code here\n}\n</cell>\n<cell>", "    // This function is provided for\
    \ you to improve your coding skills.\n    // You do not need to use it as is.\n\
    \    // You are not allowed to use it as a part of another solution.\n    // Instead,\
    \ use what you've learned so far and write your own implementation\n    // in\
    \ a separate file.\n\n    // Your code here\n\n    $music = [];\n\n    $music_array\
    \ = explode(' ', $music_string);\n\n    foreach ($music_array as $music_index\
    \ => $note) {\n        $music_note = explode('|', $note);\n\n        if ($music_note[0]\
    \ == 'o') {\n            $music[$music_index] = 4;\n        }\n        elseif\
    \ ($music_note[0] == 'o|') {\n            $music[$music_index] = 2;\n        }\n\
    \        elseif ($music_note[0] == '.|') {\n            $music[$music_index] =\
    \ 1;\n        }\n    }\n\n    return $music;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work, e.g. `parse_music('o| o o| o| o o| .| o| o o| .| o| o o| .|\
    \ o| o o| .| o| o| .| o')` returns `[3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3]` instead\
    \ of `[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]`.\n<|/ c |>\n<| c |>\nI've edited the\
    \ answer to show you what it produces.\n<|/ c |>\n<| c |>\nI made a mistake, I've\
    \ corrected the answer and added comments explaining what I did.\n<|/ c |>\n<|\
    \ c |>\nThank you very much! One more question: what does the second \"foreach\"\
    \ do? I thought it was the array that explode is working on.\n<|/ c |>\n<| c |>\n\
    It's splitting the string into array elements, not working on array. Since explode\
    \ returns array, then you run foreach on that array.\n<|/ c |>\n<| a dscore=1\
    \ tags=arrays,php |>\n<code>\n<?php\n$music = 'o o| .| o| o| .| .| .| .| o o';\n\
    $music = explode(' ', $music);\n$music = preg_replace(\"/\\s*\\./\", \"\", $music);\
    \ // remove dots from end of each note\n\n$notes = array();\n$notes[] = array(\n\
    \    'note' => 'o',\n    'last' => 4,\n);\n$notes[] = array(\n    'note' => 'o|',\n\
    \    'last' => 2,\n);\n$notes[] = array(\n    '", "    $music_array = explode('\
    \ ', $music_string);\n    $note_count = array_map('strlen', $music_array);\n \
    \   foreach($note_count as $index => $note_length) {\n        if($note_length\
    \ < 3) {\n            unset($music_array[$index]);\n        }\n    }\n    return\
    \ $music_array;\n}\n\n/**\n * Returns musical note lengths\n * @param array $music_array\n\
    \ * @return array\n */", "  $notes = [];\n  $note_length = null;\n  foreach (str_split($music_string)\
    \ as $character) {\n    $beats_per_note = null;\n    switch ($character) {\n \
    \     case '.':\n        $notes[count($notes) - 1] += 1;\n        break;\n   \
    \   case '|':\n        $beats_per_note = 2;\n        break;\n      case 'o':\n\
    \        $beats_per_note = 4;\n        break;\n      case 'o|':\n        $beats_per_note\
    \ = 2;\n        break;\n      default:\n        $beats_per_note = 1;\n    }\n\
    \    if (!$note_length || strlen($note_length) + strlen($character) + 1 > $beats_per_note)\
    \ {\n      $note_length = strlen($character) + 1;\n    }\n    $notes[count($notes)\
    \ - 1] += $beats_per_note;\n  }\n  return $notes;\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis does not work with the musical notes in the ASCII code table.\
    \ The notes above produce a different output than in the ASCII table.\n<|/ c |>\n\
    <| c |>\nCould you give an example of an input that doesn't work?\n<|/ c |>\n\
    <| c |>\nInput: o o| .| o| o| .| .| .| .| o o Output: 4 2 1 2 1 1 1 1 4 4\n<|/\
    \ c |>\n<| c |>\nThat input is too short to demonstrate this behavior. Can you\
    \ give more input that causes this?\n<|/ c |>\n<| c |>\nInput: o o| .| o| o| .|\
    \ .| .| .| o o Output: 4 2 1 2 1 1 1 1 4 4\n<|/ c |>\n<| a tags=php |>\nHere is\
    \ my solution. It works on your input data. The key was to split the notes into\
    \ the appropriate length and then count the occurrences of each note. \n<code>\n\
    $input = \"o o| .| o| o| .| .| .| .| .| o o \";\n\n$notes = preg_split('/(?<=\\\
    s)/', $input);\n\n$note_lengths = array();\nforeach ($notes as $note) {\n    $note_lengths[]\
    \ = count($note);\n}\n\n$occurrences = array_count_values($note_lengths);\n\n\
    foreach ($occurrences as $length => $count) {\n    echo sprintf('%d: %d ', $length,\
    \ $count);\n}\n</code>\nOutputs:\n<code>\n4: 4 \n2: 2 \n1: 1 \n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nHmm, this doesn't work on ", "  // TODO: Fill in the code\
    \ below\n  return [];\n}\n", "  $music_string = trim($music_string);\n  $music_string\
    \ = str_replace(' ', '', $music_string);\n  $notes = explode('|', $music_string);\n\
    \  $music_notes = [];\n  foreach ($notes as $note) {\n    $note = trim($note);\n\
    \    $note = str_replace(' ', '', $note);\n    $music_notes[] = $note;\n  }\n\
    \  $music_notes = array_count_values($music_notes);\n  return $music_notes;\n\
    }\n</code>\n<|/ a tags=php,algorithm,arrays dscore=1 |>\n<| c |>\nThis code seems\
    \ to work, but for me it prints out: `Array ( [M] => 4 [A] => 2 [D] => 1 [F] =>\
    \ 1 [M] => 1 [E] => 1 [G] => 1 [B] => 1 [H] => 1 [C] => 1 [K] => 1 [L] => 1 [B]\
    \ => 1 [E] => 1 [R] => 1 [S] => 1 [P] => 1 [T] => 1 [W] => 1 [Y] => 1 [V] => 1\
    \ [X] => 1 [N] => 1 [J] => 1 [U] => 1 [B] => 1 [A] => 1 [E] => 1 [R] => 1 [W]\
    \ => 1 [T] => 1 [O] => 1 [R] => 1 [S] => 1 [T] => 1 [I] => 1 [F] => 1 [M] => 1\
    \ [A] => 1 [G] => 1 [S] => 1 [R] => 1 [T] => 1 [W] => 1 [D] => 1 [N] => 1 [J]\
    \ => 1 [Y] => 1 [P] => 1 [S] => 1 [T] => 1 [B] => 1 [R] => 1 [W] => 1 [N] => 1\
    \ [O] => 1 [B] => 1 [A] => 1 [S] => 1 [R] => 1 [T] => 1 [W] => 1 [Y] => 1 [V]\
    \ => 1 [X] => 1 [N] => 1 [J] => 1 [U] => 1 [B] => 1 [E] => 1 [R] => 1 [W] => 1\
    \ [T] => 1 [O] => 1 [R] => 1 [S] => 1 [T] => 1 [I] => 1 [F] => 1 [M] => 1 [A]\
    \ => 1 [G] => 1 [S] => 1 [R] => 1 [T] => 1 [W] => 1 [D] => 1 [N] => 1 [J] => 1\
    \ [Y] => 1 [P] => 1 [S] => 1 [", "  $music_array = explode(' ', $music_string);\n\
    \  $music_array[0] = trim($music_array[0], 'o|');\n  $music_array[1] = trim($music_array[1],\
    \ 'o|');\n  $music_array[2] = trim($music_array[2], 'o|');\n  $music_array[3]\
    \ = trim($music_array[3], 'o|');\n  $music_array[4] = trim($music_array[4], 'o|');\n\
    \  $music_array[5] = trim($music_array[5], 'o|');\n  $music_array[6] = trim($music_array[6],\
    \ 'o|');\n  $music_array[7] = trim($music_array[7], 'o|');\n  $music_array[8]\
    \ = trim($music_array[8], 'o|');\n  $music_array[9] = trim($music_array[9], 'o|');\n\
    \  $music_array[10] = trim($music_array[10], 'o|');\n  $music_array[11] = trim($music_array[11],\
    \ 'o|');\n  $music_array[12] = trim($music_array[12], 'o|');\n  return $music_array;\n\
    }\n</code>\n<|/ a tags=php |>\n<| a tags=php dscore=1 |>\nFirst of all, it is\
    \ better to break this down into smaller functions, this makes things much easier\
    \ to read, understand, and maintain. \nNow lets take this into account:\n<code>\n\
    <?php", "  $music_notes = preg_split('/[\\s]+/', $music_string);\n  $music_notes\
    \ = array_map(function ($note) {\n    switch ($note) {\n      case \"o\":\n  \
    \      return 4;\n      case \"o|\":\n        return 2;\n      case \".|\":\n\
    \        return 1;\n    }\n  }, $music_notes);\n  return array_sum($music_notes);\n\
    }\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\nYou can use a regex to split\
    \ on spaces and the use array_sum:\n<code>\n<?php", "  // Your code goes here\n\
    }", "    $music = array();\n    for ($i = 0; $i < strlen($music_string); $i++)\
    \ {\n        $music_char = substr($music_string, $i, 1);\n        $beat_length\
    \ = 4;\n        if ($music_char == 'o') {\n            $music[$i] = 4;\n     \
    \   } else if ($music_char == 'o|') {\n            $music[$i] = 2;\n        }\
    \ else if ($music_char == '.|') {\n            $music[$i] = 1;\n        }\n  \
    \      // add rests to all but last note\n        $music[$i + 1] = 0;\n      \
    \  for ($j = 0; $j < $music_length - $i; $j++) {\n            $music[$i + $j +\
    \ 1]++;\n        }\n    }\n    return $music;\n}\n</code>\n<|/ a tags=javascript,php\
    \ dscore=1 |>\n<| c |>\nHi thanks for your answer but I couldn't get it to work\n\
    <|/ c |>\n<| c |>\nI've edited my answer with a function that should do the trick.\n\
    <|/ c |>\n<| c |>\nThis is also a nice solution. Just a warning: it might be a\
    \ bit slower than other solutions.\n<|/ c |>\n<| a |>\n<code>\nvar notes = $music_string.replace(/./g,'0');\n\
    \nvar notesLength = notes.length;\n\nvar counters = Array(notesLength);\n\nfor\
    \ (var i=0; i<notesLength; i++)\n{\n    var counter = 0;\n    for (var j=0; j<notes.length;\
    \ j++)\n    {\n        if (notes[j] == notes[i])\n        {\n            counter++;\n\
    \        }\n    }\n\n    counters[i] = counter;\n}\n</code>\n<|/ a dscore=1 tags=javascript,php\
    \ |>\n<| a |>\nHere's a PHP version. No guarantees about speed though.\n<code>\n\
    <?php\n\n$music_string = \"o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.",
  "    $music = [];\n    $last_note = false;\n    $beat = 0;\n\n    for ($i = 0; $i\
    \ < strlen($music_string); $i++) {\n        if ($music_string[$i] === \"o\" ||\
    \ $music_string[$i] === \"o|\" || $music_string[$i] === \".|\") {\n          \
    \  if ($last_note) {\n                $music[$beat]++;\n            }\n      \
    \      $last_note = $music_string[$i];\n            $beat++;\n        }\n    }\n\
    \n    return $music;\n}\n", "  $music = '';\n  preg_match_all('/o|\\.|o/', $music_string,\
    \ $matches);\n  foreach ($matches[0] as $m) {\n    $music .= $m;\n  }\n  $music\
    \ = str_split($music);\n  foreach ($music as $key => $val) {\n    $music[$key]\
    \ = $val % 12;\n  }\n  return $music;\n}\n", "    // Your code goes here\n}",
  "  $music_string = str_split($music_string);\n  $music_length = count($music_string);\n\
    \  $music_result = [];\n  for($i = 0; $i < $music_length; $i++) {\n    // Here\
    \ is a simple way to recognize notes\n    // 'o' means whole note, '|' means half\
    \ note and '.' means quater note\n    if($music_string[$i] == 'o') {\n      //\
    \ If this note is last, add one beat to result\n      $music_result[$i] ++;\n\
    \    } elseif($music_string[$i] == '|') {\n      // If this note is not last but\
    \ is last, add two beats to result\n      $music_result[$i] += 2;\n    } elseif($music_string[$i]\
    \ == '.') {\n      // If this note is not last but is last, add one beat to result\n\
    \      $music_result[$i] ++;\n    }\n  }\n  return $music_result;\n}\n</code>\n\
    Now you can use code from your question to apply parse_music function on your\
    \ array:\n<code>", "    $parts = explode(' ', $music_string);\n    $return = [];\n\
    \    foreach ($parts as $part) {\n        list($last_note, $last_beat) = explode('|',\
    \ $part, 2);\n        if ($last_note === '.') {\n            $return[] = 1;\n\
    \        } else {\n            $return[] = 4;\n        }\n    }\n    return $return;\n\
    }\n</code>\n<|/ a tags=arrays,php dscore=1 |>\n<| a tags=arrays,php |>\nFirst\
    \ of all you can not count the array as you get it.\nYou have to count each element\
    \ in your array separately.\n<code>\n$notes = explode(' ', $music_string);\n$note_counter\
    \ = 0;\nforeach ($notes as $note) {\n    if ($note == 'o') {\n        $notes_counter++;\n\
    \    } else {\n        $note_counter++;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=arrays,php |>\n<code>\n<?php\n\n$music_string = 'o o| .| o|\
    \ o| .| .| .| .| o o';\n\n$music_array = preg_split('/[\\s]+/', $music_string);\n\
    \n$notes_count = [];\n$notes_counter = 0;\n\nforeach ($music_array as $note) {\n\
    \    if ($note == 'o') {\n        $notes_counter++;\n    } else {\n        $notes_count[]\
    \ = $notes_counter;\n        $notes_counter = 0;\n    }\n}\n\nprint_r($notes_count);\n\
    </code>\n<|/ a |>\n<| c |>\nOh yeah, thanks. I was sure that preg_split would\
    \ split by space, but didn't know about delimiter. Learnt something new today.\
    \ Thank you very much.\n<|/ c |>\n<| a tags=arrays,php dscore=0 |>\nYou could\
    \ use preg_replace to search for a space and replace it with a pipe then explode\
    \ the string again.\n<code>\n<?php\n\n$music_string = 'o o| .| o| o| .| .| .|\
    \ .| o o';\n$music_array = preg_replace('/\\s/', \"|\", $music_string);\n$music_array\
    \ = explode(\"|\", $music_array);\n\n$notes_counter = 0;\n\nforeach ($music_array\
    \ as $note) {\n    $notes_counter += ($note == \"o\" ? 4 : 2);\n}\n\nvar_dump($notes_counter);\n\
    </code>\nThe output is\n<code>\nint(12)\n</code>\n<|/ a |>\n<|", "    return array_reduce(\n\
    \        explode('|', $music_string),\n        function ($beats, $note) {\n  \
    \          if ($note === 'o') return $beats;\n            if (strpos($note, '|')\
    \ !== false)\n                return array_sum($beats) * 2 - (strlen($note) -\
    \ strrpos($note, '|') - 1);\n            return array_sum($beats) * 2;\n     \
    \   },\n        [1]\n    );\n}\n", "    \n}\n", "    return array_map(function($note)\
    \ {\n        if ($note === 'o') {\n            return 4;\n        } elseif ($note\
    \ === 'o|') {\n            return 2;\n        } elseif ($note === '.|') {\n  \
    \          return 1;\n        }\n\n        return null;\n    }, $music_string);\n\
    }\n", "    // Add your code here\n}", "    $music_array = explode(' ', $music_string);\n\
    \n    $music_result = array();\n    $last_note = '';\n\n    foreach ($music_array\
    \ as $note) {\n        $music_note = str_split($note);\n        $note_num = 0;\n\
    \n        foreach ($music_note as $music_note_key) {\n            // $music_note_key\
    \ = 'o|.||'\n            if ($last_note == 'o') {\n                $note_num +=\
    \ 4;\n                $last_note = $music_note_key;\n            } elseif ($last_note\
    \ == 'o|') {\n                $note_num += 2;\n                $last_note = $music_note_key;\n\
    \            } elseif ($last_note == '.|') {\n                $note_num += 1;\n\
    \                $last_note = $music_note_key;\n            } else {\n       \
    \         return false; // TODO: Error handling\n            }\n        }\n\n\
    \        $music_result[] = $note_num;\n    }\n\n    return $music_result;\n}\n\
    \n$music_string = 'o o| .| o| o| .| .| .| .| .| o o';\n$music_result = parse_music($music_string);\n\
    var_dump($music_result);\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n$music_note\
    \ = 'o o| .| o| o| .| .| .| .| .| o o';\n\n$music_note = explode(\" \", $music_note);",
  "  preg_match_all('/[\\.|o]\\|?/', $music_string, $notes);\n  return array_sum(array_column($notes[0]));\n\
    }\n</code>\n<|/ a tags=php,notepad++ dscore=1 |>\n<| a dscore=1 |>\nYou can use\
    \ a simple regex:\n<code>\n^([a-z][a-z])+$\n</code>\n<|/ a tags=php,notepad++\
    \ |>\n<| c |>\nIt matches only \"o\" or \"|\" not \"o o\" or \"o|\" or \"|o\"\
    \ not \"o.\" The question is about notes and chords.\n<|/ c |>\n<| c |>\nThis\
    \ regex will match `o|` but not `o.`\n<|/ c |>\n<| a dscore=1 |>\nYou could use\
    \ preg_match_all to find any consecutive notes of a chord in a string.\n<code>\n\
    preg_match_all('/([ab]{2}|[abc]{3}).*?([ab]{2}|[abc]{3})/', $string, $matches);\n\
    </code>\nIt will match ab, ab or abc followed by any character other than a newline.\
    \ Because it uses non-greedy quantifiers, it will stop matching early if it finds\
    \ a chord that ends with the second note, since it won't match a third note if\
    \ it's the last note of the chord.\nDemo: https://3v4l.org/kSdW0\n<code>\n$string\
    \ = 'abcd e f g h i  j  k';\npreg_match_all('/([ab]{2}|[abc]{3}).*?([ab]{2}|[abc]{3})/',\
    \ $string, $matches);\nprint_r($matches);\n</code>\nOutput:\n<code>\nArray\n(\n\
    \    [0] => Array\n        (\n            [0] => abcd e f g h i  j  k\n      \
    \      [1] => abcd\n            [2] => e\n            [3] => f\n            [4]\
    \ => g\n            [5] => h\n            [6] => i\n            [7] => j\n   \
    \         [8] => k\n        )\n\n)\n</code>\n<|/ a tags=php,notepad++ |>\n<| a\
    \ |>\nA quick regex to match a chord that ends with a note of one of the following\
    \ letters:\n<code>\n'a',\n'b',\n'c',\n'd',\n'e',\n'f',\n'g',\n'h',\n'i',\n'j',\n\
    'k',\n'l',\n'm',\n'n',\n'o',\n'p',\n'q',\n'r',\n", "    $music_array = explode('\
    \ ', $music_string);\n    foreach ($music_array as $note) {\n        $music_array[$note]\
    \ = str_replace(['o', '|', '.'], '', $note);\n    }\n    return $music_array;\n\
    }\n", "  return [\n    (count(preg_split('/(?<!^)(?!$)[.|o|o|.]+/', $music_string,\
    \ -1, PREG_SPLIT_NO_EMPTY)) % 4 == 0)\n      ? ceil(count(preg_split('/(?<!^)(?!$)[.|o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 4)\n      : 1,\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY)) / 2),\n    ceil(count(preg_split('/(?<!^)(?!$)[o|o|.]+/',\
    \ $music_string, -1, PREG_SPLIT_", "  $music_string = preg_replace('~o|~', '',\
    \ $music_string);\n  $music_string = preg_replace('~\\\\.|~', '', $music_string);\n\
    \  return preg_match_all('~o~', $music_string);\n}\n</code>\n<|/ a tags=php |>\n\
    <| c |>\nWhat do you mean by \"one beat of note\"?\n<|/ c |>\n<| c |>\nI mean\
    \ beat of note, e.g. if you have a single note in a row the music string will\
    \ be `o o|` if you have a double note it will be: `o| o|`. And so on.\n<|/ c |>\n\
    <| c |>\n`preg_match_all('~o~', $music_string);` - will this work for a single\
    \ note? Also `preg_match_all('~o|~', $music_string);`? The question is unclear.\n\
    <|/ c |>\n<| c |>\nThis does work for a single note, but I'm talking about the\
    \ general case. With `preg_match_all()` you get a result for every different note\
    \ on a row, so there will be a lot of matches. If you have a single note in a\
    \ row the returned array will have only one entry. If you have two notes in a\
    \ row, the returned array will contain two entries. If you have three notes in\
    \ a row the returned array will contain three entries. And so on. If there are\
    \ no notes in a row, the returned array will be empty.\n<|/ c |>\n<| c |>\nYes,\
    \ `preg_match_all()` will work on all kinds of musical notes, including two or\
    \ more notes in a row (`o|o|`) in the following cases: `o`, `o|`, `|o`, `o|o`,\
    \ `o|o|`, `o|o|o`, `o|o|o|`, `o|o|o|o|`, `o|o|o|o|o|`, `o|o|o|o|o|o|`, `o|o|o|o|o|o|o|`,\
    \ `o|o|o|o|o|o|o|o|o|`, `o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
  "    $notes = array();\n    $last = 0;\n    $current_note = array();\n    for ($i\
    \ = 0; $i < strlen($music_string); $i++) {\n        if ($music_string[$i] == \"\
    |\") {\n            $current_note[] = $last;\n            $last = 0;\n       \
    \ } else {\n            $last++;\n            if ($music_string[$i] == \"o\")\
    \ {\n                $notes[] = $current_note;\n            }\n        }\n   \
    \ }\n    return $notes;\n}\n", "  \n}\n\n", "    $music_string = preg_replace('/([^.])\\\
    |/', '$1', $music_string);\n    $music_string = preg_replace('/([^o])/', '$1 ',\
    \ $music_string);\n    $music_string = preg_replace('/([^o])\\|/', '$1 ', $music_string);\n\
    \    $music_string = preg_replace('/(\\.\\|)/', '$1 ', $music_string);\n    $music_string\
    \ = preg_replace('/([^.])(\\.\\|)/', '$1 ', $music_string);\n    $music_string\
    \ = preg_replace('/(\\.\\|)(\\.\\|)/', '$1 $2 ', $music_string);\n    $music_string\
    \ = preg_replace('/(\\.\\|)(\\.\\|)/', '$1 $2 ', $music_string);\n    $music_string\
    \ = preg_replace('/([^o])\\|/', '$1 ', $music_string);\n    $music_string = preg_replace('/(\\\
    .\\|)(\\.\\|)/', '$1 $2 ', $music_string);\n    $music_string = preg_replace('/(\\\
    .\\|)(\\.\\|)/', '$1 $2 ', $music_string);\n    $music_string = preg_replace('/([^o])/',\
    \ '$1 ', $music_string);\n    $music_string = preg_replace('/([^o])/', '$1 ',\
    \ $music_string);\n    $music_string = preg_replace('/(\\.\\|)/', '$1 ', $music_string);\n\
    \    $music_string = preg_replace('/(\\.\\|)/', '$1 ', $music_string);\n    $music_string\
    \ = preg_replace('/(\\.\\|)/', '$1 ', $music_string);\n    $music_string = preg_replace('/([^.])(\\\
    .\\|)/', '$1 $2 ', $music_string);\n    $music_string = preg_replace('/(\\.\\\
    |)(\\.\\|)/', '$1 $2 ', $music_string);\n    $music_string = preg_replace('/(\\\
    .\\|)(\\.\\|)/', '$1 $2 ', $music_string);\n    $music_string = preg_replace('/([^o])/',\
    \ '$1 ', $music_string);\n    $music_string = preg_replace('/([^o])/', '$1 ',\
    \ $music_string);\n    $music_string = preg_replace('/(\\.\\|)/', '$1 ', $music_string);\n\
    \    $music_string = preg_replace('/(\\.\\|)/', '$1 ', $music_string);\n    $music_string\
    \ = preg_replace('/", "  $music_array = explode(' ', $music_string);\n\n  return\
    \ array_map(\n    function ($note) {\n      return strpos($note, '|') === false\
    \ ? 4 : 2;\n    },\n    $music_array\n  );\n}\n", "  $music_string = preg_replace('/[^a-zA-Z]*/',\
    \ '', $music_string); // Remove all non-letters\n  $music_array = explode(' ',\
    \ $music_string); // Split input string by spaces\n  return array_count_values($music_array);\
    \ // Count frequencies of each notes\n}\n</code>\n<|/ a tags=php,arrays,function,function\
    \ |>\n<| c |>\nHmm I added the function parse_music and it seems to give me this:\
    \ array(8) { [0]=> int(0) [1]=> int(0) [2]=> int(1) [3]=> int(1) [4]=> int(1)\
    \ [5]=> int(1) [6]=> int(1) [7]=> int(1) } but it should be like this: array(8)\
    \ { [0]=> int(2) [1]=> int(2) [2]=> int(1) [3]=> int(1) [4]=> int(1) [5]=> int(1)\
    \ [6]=> int(1) [7]=> int(1) } What could be the problem?\n<|/ c |>\n<| c |>\n\
    It's ok now I solved it. The problem was with the function. I had to change it\
    \ to $music_array = explode('|', $music_string); Thank you!\n<|/ c |>\n<| a |>\n\
    I agree with Piskvor, but I think you should change your approach to this:\n<code>",
  "  return str_split($music_string, 3)\n    ->map(function ($note) {\n      if ($note\
    \ === 'o') {\n        return 4;\n      }\n      if ($note === 'o|') {\n      \
    \  return 2;\n      }\n      if ($note === '.|') {\n        return 1;\n      }\n\
    \      return 0;\n    })\n    ->flatten()\n    ->toArray();\n}\n</code>\n<|/ a\
    \ tags=php dscore=0 |>\n<| c |>\nThis is what I was looking for! Thanks a lot\
    \ for the example and explanation!\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n\
    \n$music_notes = array('o o| .| o| o| .| .| .| .| o o');\n$music_notes = preg_split('/o\\\
    |./', $music_notes);\n$music_notes = array_filter($music_notes, function($note)\
    \ { return $note != '.'; });\n\n$music_notes = array_map(function($note) { return\
    \ strlen($note); }, $music_notes);\n$music_notes = array_sum($music_notes);\n\n\
    print_r($music_notes);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThat code returns\
    \ \"0\" when I try to run it in PHP 7.0.0. Is there some PHP version issue here?\n\
    <|/ c |>\n<| c |>\nMy mistake, try it now.\n<|/ c |>\n<| c |>\nNope, still returns\
    \ \"0\".\n<|/ c |>\n<| c |>\nYeah, the code works on PHP 7.4.7, but returns \"\
    0\" in PHP 7.0.0. There seems to be some sort of incompatibility with the preg_split\
    \ function and the way PHP 7.0.0 handles the lambda function.\n<|/ c |>\n<| c\
    \ |>\nAh I see. Unfortunately I'm a little behind the curves on my PHP versions\
    \ so I can't test any code right now. Hopefully someone else will have a better\
    \ answer.\n<|/ c |>\n<| a |>\nHere is my solution, based on this answer. Just\
    \ in case someone finds this thread later, here it is.\n<code>", "    // Create\
    \ an array to keep track of how many beats every note lasts\n    $notes = array();\n\
    \n    // Iterate through each character in the music string\n    foreach (str_split($music_string)\
    \ as $char) {\n        // Check if this is a note (o, ., or |)\n        if ($char\
    \ == 'o' || $char == '.' || $char == '|') {\n            // Add one to count for\
    \ this note (each note lasts one beat)\n            $notes[$char] = $notes[$char]\
    \ + 1;\n        }\n    }\n\n    // Return the array of notes\n    return $notes;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for the help! I added this\
    \ in and it works for the most part, however it keeps returning 1 for all of them.\
    \ For example, it returns 'o' instead of 'o' twice for the first two instances\
    \ of 'o'\n<|/ c |>\n<| c |>\nI didn't notice that they were all 'o', I edited\
    \ my answer to fix the issue.\n<|/ c |>\n<| a dscore=1 |>\nThe code you wrote\
    \ should work as intended.\nThe problem is that the variable $notes is recreated\
    \ on each function call so you always get the last notes array that was generated\
    \ with $notes = array();\nOne way to solve it would be to use global inside the\
    \ functions to have access to the variable inside the functions or pass it as\
    \ a parameter in the function calls.\n<code>\n<?php", "  $music_string = preg_replace('/\\\
    s+/', ' ', $music_string);\n  $music_array = str_split($music_string);\n  $beat_map\
    \ = [];\n  $last_beat_map = [];\n  $current_beat = 0;\n  for ($i = 0; $i < count($music_array);\
    \ $i++) {\n    if ($music_array[$i] == ' ') {\n      // Note, lasts one beat\n\
    \      $beat_map[$i] = [4, 1];\n      $last_beat_map[$i] = 1;\n      $current_beat\
    \ += 1;\n    }\n    else {\n      // Add one to current beat\n      $beat_map[$i][$last_beat_map[$i]]\
    \ += 1;\n      $last_beat_map[$i] = 1;\n      $current_beat += 1;\n    }\n  }\n\
    \  return $beat_map;\n}\n</code>\nThe result:\n<code>\nArray\n(\n    [o] => Array\n\
    \        (\n            [0] => 4\n            [1] => 1\n        )\n\n    [o|]\
    \ => Array\n        (\n            [0] => 2\n            [1] => 1\n        )\n\
    \n    [.|] => Array\n        (\n            [0] => 2\n            [1] => 1\n \
    \       )\n\n    [.|] => Array\n        (\n            [0] => 1\n            [1]\
    \ => 1\n        )\n\n    [.|] => Array\n        (\n            [0] => 1\n    \
    \        [1] => 1\n        )\n\n    [.|] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 1\n        )\n\n    [.|] => Array\n        (\n    \
    \        [0] => 1\n            [1] => 1\n        )\n\n    [o] => Array\n     \
    \   (\n            [0] => 4\n            [1] => 1\n        )\n\n    [o|] => Array\n\
    \        (\n            [0] => 2\n            [1] => 1\n        )\n\n    [.|]\
    \ => Array\n        (\n            [0] => 2\n            [1] => 1\n        )\n\
    \n    [.|] => Array\n        (\n            [0] => 1\n            [1] => 1\n \
    \       )\n\n    [.|] => Array\n        (\n            [0] => 1\n            [1]\
    \ => 1\n        )\n\n    [.|] => Array\n        (\n            [0] => 1\n    \
    \        [1] => 1\n        )\n\n    [o] => Array\n        (\n            [0] =>\
    \ 4\n            [1] => 1\n        )\n\n    [o|] => Array\n        (\n       \
    \     [0] => 2\n            [1] => 1\n        )\n\n    [.|] => Array\n       \
    \ (\n            [0] => 2\n            [1] => 1\n        )\n\n    [.|] => Array\n\
    \        (\n            [0] => 1\n            [1] => 1\n        )\n\n    [.|",
  "  // Your code here\n}\n</cell>\n<cell>\n%%writefile count_notes.php\n<?php", " \
    \ $music_array = str_split($music_string);\n\n  $notes_array = array_flip($music_array);\n\
    \n  // Here we assume that all notes begin with 'o'\n  $beats_array = array_fill(0,\
    \ 4, 0);\n\n  foreach ($notes_array as $key => $note) {\n    // Note begins with\
    \ 'o'\n    if ($note == 'o') {\n      // 4 beats\n      $beats_array[0] += 4;\n\
    \      // 'o' must stay in first position\n      $music_array[0] = $key;\n   \
    \   // One beat\n      $beats_array[1] += 1;\n      // 'o' must stay in second\
    \ position\n      $music_array[1] = $key;\n      // One beat\n      $beats_array[2]\
    \ += 1;\n      // 'o' must stay in third position\n      $music_array[2] = $key;\n\
    \      // One beat\n      $beats_array[3] += 1;\n      // 'o' must stay in fourth\
    \ position\n      $music_array[3] = $key;\n    }\n  }\n\n  return $beats_array;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis works, but it relies on knowing the length\
    \ (in beats) of the note in the input. For example, it fails for input like \"\
    o o .| o|\" or \"o .| o|\".\n<|/ c |>\n<| c |>\nThis solution fails because 'o'\
    \ cannot begin in position 0. It will be counted as 4 beats instead of 1. You\
    \ should use array_search('o', $music_array) instead of $key > 'o'.\n<|/ c |>\n\
    <| c |>\n: I agree with you. Unfortunately, I don't know how to fix this issue.\
    \ I don't think you can do it using just one function call. I guess you'll have\
    \ to write a function that will take a string and an array of \"special\" strings\
    \ and parse it.\n<|/ c |>\n<| c |>\nI changed my answer to handle notes beginning\
    \ with 'o', and also handle note with '.', but please note that this will fail\
    \ if more than one dot follows note.\n<|/ c |>\n<| c |>\nHmm. Now it seems even\
    \ more complicated for me. I will try to write something with your ideas. Thank\
    \ you for your help!\n<|/ c |>\n<| a tags=string,arrays,php |>\nYou can use a\
    \ regular expression to replace 'o' with '' and split the string in every occurrence\
    \ of 'o' with explode:\n<code>\n$music = 'o o| .| o| o| .| .| o| .| ", "    $music_array\
    \ = preg_split('/[\\.\\|]+/', $music_string);\n    $output_array = array();\n\n\
    \    foreach($music_array as $music_item) {\n        if($music_item === 'o') {\n\
    \            $output_array[] = 4;\n        }\n        elseif($music_item === 'o|')\
    \ {\n            $output_array[] = 2;\n        }\n        elseif($music_item ===\
    \ '.|') {\n            $output_array[] = 1;\n        }\n        else {\n     \
    \       $output_array[] = 0;\n        }\n    }\n\n    return $output_array;\n\
    }\n</code>\n<|/ a tags=string,php dscore=0 |>\n<| a dscore=0 |>\nHere's a simple\
    \ recursive approach:\n<code>\n$music = [\n    'o o| .| o| o| .| .| .| .| o o',\n\
    \    'o o| o| o| .| .| .| .| o| o o',\n    '.| o| o| o| .| .| .| o| .| o o',\n\
    \    '.| .| o| o| .| .| o| .| o| o o',\n    '.| .| .| o| .| .| .| .| o| o o',\n\
    \    '.| .| .| .| .| o| o| .| o| o o',\n    '.| .| .| .| .| o| o| .| o| o o',\n\
    \    '.| .| .| .| .| o| o| .| o| o o',\n    '.| .| .| .| .| o| o| .| o| o o',\n\
    ];\n", "    $notes = preg_split('/\\s+/', $music_string);\n    $parsed_notes =\
    \ array();\n    $beat = 0;\n    foreach ($notes as $note) {\n        // parse\
    \ note\n        if ($note == 'o') {\n            $parsed_notes[] = $beat;\n  \
    \          $beat = 0;\n        } else {\n            if ($note == '|') {\n   \
    \             $beat += 1;\n            } else {\n                $parsed_notes[]\
    \ = $beat;\n                $beat = 0;\n            }\n        }\n    }\n    return\
    \ $parsed_notes;\n}\n", "  preg_match_all('/o|.\\|/', $music_string, $matches);\n\
    \  return array_sum(array_map(function($match) {\n    return strlen($match);\n\
    \  }, $matches[0]));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nThis is\
    \ an old question, but if anyone finds it useful, here's a quick Python solution.\n\
    <code>\nmusic = 'oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo ", "  // Your code goes here\n}\n", "    $music_array\
    \ = explode(' ', $music_string);\n    $beats = array();\n\n    $last_note = null;\n\
    \    $beat = 0;\n\n    foreach ($music_array as $note) {\n        if ($note ===\
    \ 'o') {\n            $beats[] = $beat;\n            $beat = 0;\n        }\n \
    \       elseif ($note === 'o|') {\n            $beats[] = $beat;\n           \
    \ $beat = 2;\n        }\n        elseif ($note === '.|') {\n            $beats[]\
    \ = $beat;\n            $beat = 1;\n        }\n        else {\n            $beat\
    \ += $note === '-' ? -4 : 1;\n        }\n\n        $last_note = $note;\n    }\n\
    \n    return $beats;\n}\n", "    // Write your code here\n    $music_string =\
    \ preg_replace('/\\D/', '', $music_string);\n    $music_array = str_split($music_string);\n\
    \    $music_array = array_count_values($music_array);\n    $music_array = array_filter($music_array,\
    \ function ($value){\n        return $value > 0;\n    });\n    return $music_array;\n\
    }\n", "  $notes = [];\n  $music_string = trim($music_string);\n  $music_string\
    \ = preg_replace('/o\\||\\./', '', $music_string);\n  $music_string = preg_replace('/o\\\
    |/', '', $music_string);\n  $music_string = preg_replace('/\\.\\|/', '', $music_string);\n\
    \n  $notes_array = preg_split('/[\\|o\\]/', $music_string);\n  foreach ($notes_array\
    \ as $note) {\n    $notes[] = str_repeat(\"1\", -1);\n    $notes[] = $note;\n\
    \  }\n  return $notes;\n}\n", "    // Write your parsing code here\n}\n", "  \
    \  $notes = array();\n    $current_note = '';\n    $num_notes = 0;\n\n    foreach\
    \ (str_split($music_string) as $letter) {\n        // The current note ends if\
    \ the current letter doesn't end it yet (a rest).\n        if ($letter !== '.')\
    \ {\n            $current_note .= $letter;\n        } else {\n            $notes[]\
    \ = intval($current_note);\n            $current_note = '';\n            $num_notes++;\n\
    \        }\n    }\n\n    return $num_notes;\n}\n\n/**\n * Problem #9\n * \n *\
    \ Write a function that takes two arrays, one with notes, and the other with their\
    \ frequencies,\n * and returns the frequencies of the notes.\n * \n * Here is\
    \ an example:\n * >>> notes_frequencies([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4], ['C3',\
    \ 'E3', 'G3', 'A3', 'B3', 'D3', 'C4', 'E4', 'G4', 'A4', 'B4', 'D4', 'C5', 'E5',\
    \ 'G5', 'A5', 'B5', 'D5', 'E6', 'F6', 'G6', 'A6', 'B6', 'D6', 'C7', 'F7', 'G7',\
    \ 'A7', 'B7', 'D7', 'C8', 'F8', 'G8', 'A8', 'B8', 'D8'])\n * [{'A': 3, 'C': 2,\
    \ 'G': 2, 'E': 2, 'F': 2, 'B': 2, 'D': 2}, {'A': 2, 'C': 3, 'G': 3, 'E': 3, 'F':\
    \ 3, 'B': 3, 'D': 3}, {'A': 4, 'C': 5, 'G': 5, 'E': 5, 'F': 5, 'B': 5, 'D': 5},\
    \ {'A': 6, 'C': 7, 'G': 7, 'E': 7, 'F': 7, 'B': 7, 'D': 7}, {'A': 8, 'C': 8, 'G':\
    \ 8, 'E': 8, 'F': 8, 'B': 8, 'D': 8}]\n * \n * \n * Hint:\n * \n * Remember that\
    \ array key is a string.\n * \n * You may write something like this:\n * \n *\
    \ >>> {'C3': 'C3', 'G3': 'G3', 'E3': 'E3'}\n * {'C3': 'C3', 'G3': 'G3', 'E3':\
    \ 'E3'}\n * >>> \n */", "    $parts = preg_split('/(\\d+)/', $music_string);\n\
    \    return array_map(function ($value) {\n        if (preg_match('/^(\\d+)$/',\
    \ $value)) {\n            $value = 1;\n        } else {\n            $value =\
    \ intval($value);\n        }\n        return $value;\n    }, $parts);\n}\n", " \
    \ // Your code here\n}\n", "    $notes = str_split($music_string, 1);\n    $music_array\
    \ = array();\n    $last_note = -1;\n    foreach ($notes as $note) {\n        if\
    \ ($note == '|') {\n            $music_array[] = 2;\n            $last_note++;\n\
    \        } else if ($note == 'o') {\n            $music_array[] = 1;\n       \
    \     $last_note++;\n        } else if ($note == 'o|') {\n            $music_array[]\
    \ = 2;\n            $last_note++;\n        } else if ($note == '.') {\n      \
    \      $music_array[] = 1;\n            $last_note++;\n        } else {\n    \
    \        $music_array[] = 0;\n        }\n    }\n    return $music_array;\n}\n\
    </code>\n<|/ a tags=php,math,notepad,html |>\n<| c |>\nI really appreciate your\
    \ help, and sorry for the late reply. This works perfectly for me. Thanks again\
    \ for taking the time to help me. :)\n<|/ c |>\n<| c |>\n, no problem at all\n\
    <|/ c |>\n<| c |>\nYou're welcome. If it worked for you then please accept the\
    \ answer. Thanks!\n<|/ c |>\n<| a tags=php,math,notepad,html |>\nI'm going to\
    \ assume that you are writing code for a website.\nIn that case, I would recommend\
    \ looking into PHP's strlen() function.\nFrom the manual:\n<code>\nint strlen\
    \ ( string $string )\n</code>\nDescription\nThis function returns the length of\
    \ the given string, in bytes.\nIf the optional encoding parameter is specified\
    \ and is different from the current default_charset(), strlen() will return the\
    \ number of characters in the string. \nIf the optional length parameter is specified,\
    \ it will only return that many characters.\nThe behavior of this function is\
    \ different on each platform: Win32 will return the number of characters until\
    \ the first \\0, while Win32 eol (\\r, \\n, \\r\\n) will return the number of\
    \ characters from the beginning of the line.\n<code>\n<?php\necho strlen('Hello\
    \ World!');\necho \"\\n\";\necho strlen('\\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\\
    0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0\
    \ \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0\
    \ \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\0 \\", "  $music = array();\n\
    \  $parts = explode(' ', $music_string);\n  foreach($parts as $part) {\n    //\
    \ find note\n    $note = str_split($part)[0];\n    // find beats\n    $beats =\
    \ str_split($part)[1];\n    if(isset($music[$note])) {\n      $music[$note] +=\
    \ (int) $beats;\n    } else {\n      $music[$note] = (int) $beats;\n    }\n  }\n\
    \  return $music;\n}\n\n$music = parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    );\nvar_dump($music);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nOkay, I think I can\
    \ follow this logic, but the only part I'm not following is how you use this.\
    \ What do I pass to it? How do I use it? In what language? And what do I do with\
    \ the output? I'm a beginner programmer, I'm sure these questions aren't that\
    \ stupid but I'm having trouble getting my head around it. Do I place this within\
    \ a function, do I assign it to a variable, how do I use it?\n<|/ c |>\n<| c |>\n\
    See updated answer with example.\n<|/ c |>\n<| c |>\nHey, I just tried this, and\
    \ it works! However, I'm having some trouble implementing it into a larger program.\
    \ I'm getting the error \"Notice: Undefined variable: music in ...\" when I try\
    \ to call it in a new function, can you help me with this? I'll edit my question\
    \ with what I did if that's okay.\n<|/ c |>\n<| c |>\nYes please edit your question\
    \ with code you tried and errors you get. Also I dont see any `parse_music` function\
    \ in code you posted.\n<|/ c |>\n<| c |>\nAh sorry, I forgot to add it when pasting\
    \ it. I edited it now.\n<|/ c |>\n<| a |>\n<code>\n<?php", "  $notes = preg_split(\"\
    /\\s+/\", $music_string, -1, PREG_SPLIT_NO_EMPTY);\n  $notes_count = count($notes);\n\
    \n  $note_counter = [];\n  for ($i = 0; $i < $notes_count; $i++) {\n    $note\
    \ = $notes[$i];\n\n    if ($note === \"o\") {\n      $note_counter[] = 1;\n  \
    \  } else if ($note === \"o|\") {\n      $note_counter[] = 2;\n    } else if ($note\
    \ === \".|\") {\n      $note_counter[] = 1;\n    }\n  }\n\n  return $note_counter;\n\
    }\n", "  // Split string into list of single notes\n  $music_notes = explode('\
    \ ', $music_string);\n  $music_notes = array_map('trim', $music_notes);\n  //\
    \ Initialize list of beats for each note\n  $music_notes_beats = array();\n  //\
    \ Loop through notes\n  foreach ($music_notes as $music_note) {\n    // Find note\
    \ length (o is 4 beats, . is 1 beat)\n    $note_length = strpos($music_note, 'o')\
    \ === false ? 4 : 2;\n    // Find note name\n    $note_name = substr($music_note,\
    \ 0, 1);\n    // Split note into list of single notes\n    $single_notes = explode('|',\
    \ $music_note);\n    // Count beats for each note\n    $music_notes_beats[$note_name]\
    \ = 0;\n    foreach ($single_notes as $single_note) {\n      // Count beats for\
    \ each single note\n      $music_notes_beats[$note_name] += $note_length;\n  \
    \  }\n  }\n  // Return list of beats for each note\n  return $music_notes_beats;\n\
    }\n", "    // Your code goes here!\n}", "  $music_string = str_replace(['o', 'o|',\
    \ '|.|', '|.'], '', trim($music_string));\n  $music_array = array();\n  $current_length\
    \ = 0;\n  $beats = 0;\n  $current_beat = 0;\n  foreach (str_split($music_string)\
    \ as $char) {\n    if ($char == 'o') {\n      if ($current_length == 0) {\n  \
    \      $current_beat = $beats;\n      }\n      $music_array[] = $current_beat;\n\
    \      $current_beat = 0;\n      $current_length = 0;\n    }\n    if ($char ==\
    \ '|') {\n      $current_length++;\n    }\n    if ($char == '.') {\n      $current_length--;\n\
    \    }\n    if ($current_length == 0) {\n      $beats++;\n    }\n  }\n  return\
    \ $music_array;\n}\n$music_array = parse_music('o o| .| o| o| .| .| .| .| o o');\n\
    print_r($music_array);", "  $music_array = str_split($music_string);\n  $result\
    \ = [];\n  $previous_note = null;\n  $total_beats = 0;\n  foreach ($music_array\
    \ as $item) {\n    if ($item === 'o') {\n      $total_beats += 4;\n      $previous_note\
    \ = 'o';\n    } else if ($item === 'o|') {\n      $total_beats += 2;\n      $previous_note\
    \ = 'o|';\n    } else if ($item === '.|') {\n      $total_beats += 1;\n      $previous_note\
    \ = '.|';\n    } else {\n      assert($item !== '.|' && $item !== 'o|' && $item\
    \ !== 'o');\n      assert($item !== '|' && $item !== '|');\n      $result[] =\
    \ $total_beats;\n      $previous_note = null;\n      $total_beats = 0;\n    }\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a dscore=3 tags=algorithm,php |>\n<|\
    \ a dscore=2 |>\n<code>\n<?php", "    $parsed = [];\n\n    $music_string = str_replace(\"\
    \ \", \"\", $music_string);\n\n    foreach (str_split($music_string) as $letter)\
    \ {\n        $letter = strtolower($letter);\n        $letter = preg_replace(\"\
    /\\W+/\", \"\", $letter);\n\n        if ($letter == \"o\") {\n            $parsed[]\
    \ = 4;\n        } elseif ($letter == \"o|\") {\n            $parsed[] = 2;\n \
    \       } elseif ($letter == \".|\") {\n            $parsed[] = 1;\n        }\
    \ else {\n            $parsed[] = 0;\n        }\n    }\n\n    return $parsed;\n\
    }\n\n$music_string = 'o o| .| o| o| .| .| .| .| o o';\n$music = parse_music($music_string);\n\
    print_r($music);", "  $music_array = [];\n\n  for($i=0; $i<strlen($music_string);\
    \ $i++) {\n    if($music_string[$i] == '|') {\n      $music_array[] = 1;\n   \
    \ }\n    else if($music_string[$i] == 'o') {\n      $music_array[] = 4;\n    }\n\
    \    else {\n      $music_array[] = 2;\n    }\n  }\n\n  return $music_array;\n\
    }\n\n$music_note_string = 'o o| .| o| o| .| .| .| .| o o';\n$music_note_array\
    \ = parse_music($music_note_string);\n", "    $beats = array();\n    $current_beat\
    \ = 0;\n    $current_not = 0;\n    $current_octave = 0;\n    $last_octave = 0;\n\
    \    $notes = explode(' ', $music_string);\n    foreach($notes as $note) {\n \
    \       if ($note == '.') {\n            $current_octave += 2;\n        } else\
    \ {\n            $note = preg_replace('/[0-9]+/', '', $note);\n            if\
    \ ($note == 'o') {\n                $current_not++;\n            } else {\n  \
    \              if ($note == '|') {\n                    $current_not++;\n    \
    \            } else {\n                    $current_note = 0;\n              \
    \      $current_octave++;\n                    $note = preg_replace('/(o||\\.)/',\
    \ '', $note);\n                    if ($note == 'o') {\n                     \
    \   $current_not++;\n                    } else {\n                        if\
    \ ($note == '|') {\n                            $current_not++;\n            \
    \            } else {\n                            $current_note = $note;\n  \
    \                          $current_octave++;\n                        }\n   \
    \                 }\n                    while($current_note == 0) {\n       \
    \                 $note = preg_replace('/(o||\\.)/', '', $note);\n           \
    \             if ($note == 'o') {\n                            $current_not++;\n\
    \                        } else {\n                            if ($note == '|')\
    \ {\n                                $current_not++;\n                       \
    \     } else {\n                                $current_note = $note;\n     \
    \                           $current_octave++;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            $beats[] = $current_not;\n            $current_beat++;\n\
    \            if ($current_note == 'o') {\n                $last_octave = $current_octave;\n\
    \            }\n        }\n    }\n    foreach($beats as $key => $value) {\n  \
    \      $beats[$key] = $key * 4;\n    }\n    foreach($beats as $key => $value)\
    \ {\n        $beats[$key] += ($last_octave - $current_octave) * 2;\n    }\n  \
    \  sort($beats);\n    return $beats;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays\
    \ |>\n<| c |>\n`o` means whole note, `o|` means half note and `...` means not\
    \ last.\n<|/ c |>\n<| c |>\nThanks, I've edited my answer, now it should work.\n\
    <|/ c |>\n<| c |>\nI've made a change to my answer, now it works even for string\
    \ like \"o o| .| o| o| .| .| .| .| o o\"\n<|/ c |>\n<| a |>\nYou want to get your\
    \ string splitted into an array of arrays, with ", "    $music = preg_split('/\\\
    s+/', $music_string, 0, PREG_SPLIT_NO_EMPTY);\n\n    // Count the beats per each\
    \ note\n    $beats_per_note = array();\n    foreach($music as $note) {\n     \
    \   $note = mb_strtolower($note);\n        if($note == 'o')\n            $beats_per_note[]\
    \ = 4;\n        elseif($note == 'o|')\n            $beats_per_note[] = 2;\n  \
    \      elseif($note == '|.|')\n            $beats_per_note[] = 1;\n        else\n\
    \            throw new InvalidArgumentException('Bad music input - note \"' .\
    \ $note .'\"');\n    }\n\n    // Sum all the note's beats\n    $total_beats =\
    \ array_sum($beats_per_note);\n    return $total_beats;\n}\n", "    $music = array();\n\
    \    $music_string = preg_replace('/\\s+/', ' ', $music_string);\n    $parts =\
    \ explode(' ', $music_string);\n    foreach ($parts as $part) {\n        $part\
    \ = preg_replace('/\\s/', '', $part);\n        if ($part[0] == 'o') {\n      \
    \      $music[] = 4;\n        } else if ($part[0] == 'o|') {\n            $music[]\
    \ = 2;\n        } else if ($part[0] == '.|') {\n            $music[] = 1;\n  \
    \      } else {\n            throw new Exception('Unknown note '.$part);\n   \
    \     }\n    }\n    return $music;\n}\n\n/**\n * Function that prints music using\
    \ standard ascii notation\n * @param $music array representing music in standard\
    \ notation from parse_music function\n */", "\t$music_string = preg_replace('/\\\
    |{4,}/', '', $music_string);\n\t$music_string = preg_replace('/\\|{3,}/', '',\
    \ $music_string);\n\t$music_string = preg_replace('/\\|{2,}/', '', $music_string);\n\
    \t$music_string = preg_replace('/\\|{1,}/', '', $music_string);\n\t$music_string\
    \ = preg_replace('/\\|{0,}/', '', $music_string);\n\t$music_string = preg_replace('/\\\
    |+/', '', $music_string);\n\t$music_string = preg_replace('/\\|{2,}/', '', $music_string);\n\
    \t$music_string = preg_replace('/\\|{2,}/', '', $music_string);\n\t$music_string\
    \ = preg_replace('/\\|{2,}/', '', $music_string);\n\t$music_string = preg_replace('/\\\
    |{3,}/', '', $music_string);\n\t$music_string = preg_replace('/\\|{4,}/', '',\
    \ $music_string);\n\t$music_array = explode(' ', $music_string);\n\t$music_array\
    \ = array_filter($music_array);\n\t$music_array_length = count($music_array);\n\
    \t$music_array = ($music_array_length > 0) ? $music_array : array($music_array[0]);\n\
    \t$music_array_length = count($music_array);\n\t$music_array = array_map('trim',\
    \ $music_array);\n\t$music_array_length = count($music_array);\n\t$music_array\
    \ = ($music_array_length > 0) ? $music_array : array($music_array[0]);\n\t$music_array_length\
    \ = count($music_array);\n\t$music_array = array_map('trim', $music_array);\n\t\
    $music_array_length = count($music_array);\n\t$music_array = array_filter(array_map('strlen',\
    \ $music_array));\n\t$music_array_length = count($music_array);\n\t$music_array\
    \ = ($music_array_length > 0) ? $music_array : array($music_array[0]);\n\t$music_array_length\
    \ = count($music_array);\n\t$music_array = array_map('trim', $music_array);\n\t\
    $music_array_length = count($music_array);\n\t$music_array = ($music_array_length\
    \ > 0) ? $music_array : array($music_array[0]);\n\t$music_array_length = count($music_array);\n\
    \t$music_array = array_filter(array_map('strlen", "  $music_array = explode('\
    \ ', $music_string);\n  unset($music_array[0]);\n  unset($music_array[1]);\n \
    \ $parsed_music = array();\n  foreach ($music_array as $string) {\n    $note =\
    \ substr($string, 0, 1);\n    $rest = substr($string, 1);\n    switch ($note)\
    \ {\n      case \"o\":\n      case \"O\":\n        $parsed_music[] = strlen($rest);\n\
    \        break;\n      case \"|\":\n      case \"/\":\n        $parsed_music[]\
    \ = strlen($rest) / 2;\n        break;\n      default:\n        throw new Exception(\"\
    Invalid note specifier: $note\");\n    }\n  }\n  return $parsed_music;\n}\n",
  "    $music_array = str_split($music_string);\n    $beats = array();\n    $current_beat\
    \ = 0;\n    $is_note = false;\n    $note_last_beat = 0;\n    for ($i = 0; $i <\
    \ count($music_array); $i++) {\n        if ($music_array[$i] == 'o') {\n     \
    \       $is_note = true;\n            if ($current_beat != $note_last_beat) {\n\
    \                $current_beat = $note_last_beat;\n                $beats[] =\
    \ 1;\n            }\n        } elseif ($music_array[$i] == 'o|') {\n         \
    \   if ($is_note) {\n                $is_note = false;\n                $note_last_beat\
    \ = $current_beat;\n                $beats[] = 2;\n            }\n        } elseif\
    \ ($music_array[$i] == '.|') {\n            if (!$is_note) {\n               \
    \ $is_note = true;\n                $note_last_beat = $current_beat;\n       \
    \         $beats[] = 1;\n            }\n        }\n    }\n    return $beats;\n\
    }\n</code>\nThen you have all the tools you need to implement the solution\n<|/\
    \ a tags=php dscore=2 |>\n<| c |>\nOhh thanks, i just started learning PHP just\
    \ 2 weeks ago so i am a bit confused\n<|/ c |>\n<| c |>\nHi Alex, thanks for your\
    \ solution. I tried it with some test strings, but i can't get it to work. I've\
    \ updated my initial post with a test string and the desired output.\n<|/ c |>\n\
    <| c |>\nSorry, it was my mistake. I tried your code with a different test string\
    \ and it works :) Thanks!\n<|/ c |>\n<| c |>\nGreat news! :) But I suggest you\
    \ to implement a solution from scratch so you can gain a better understanding\
    \ of how it works and what you need to do. I will update the answer with some\
    \ code for you\n<|/ c |>\n<| c |>\nSure, i will try to implement it myself later.\
    \ Thanks for your help! I'll mark your post as correct since it helps me to understand\
    \ how it works :)\n<|/ c |>\n<| a tags=php dscore=0 |>\n<code>\n<?php\n$string\
    \ = 'oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo ", "    $music_array = explode('\
    \ ', $music_string);\n    $music_array = array_filter($music_array);\n    $music_array\
    \ = array_map('trim', $music_array);\n    $music_array = array_map('strtolower',\
    \ $music_array);\n    $music_array = array_filter($music_array);\n    return $music_array;\n\
    }\n</code>\nHere is demo:\n<code>\n$music_string = 'o o| .| o| o| .| .| .| .|\
    \ o o';\n$music_array = parse_music($music_string);\nprint_r($music_array);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => o\n    [1] => o|\n    [2] => .|\n\
    \    [3] => o|\n    [4] => .|\n    [5] => .|\n    [6] => .|\n    [7] => .|\n \
    \   [8] => o\n    [9] => o\n    [10] => o\n    [11] => o\n    [12] => o\n    [13]\
    \ => o\n)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the effort, but this\
    \ isn't what I am looking for. This returns the number of beats for each note\
    \ (like in my example), but I'm trying to get the number of times each note lasts.\
    \ So `o o| .| o| o| .| .| .| .| o o` would give me a result of `[4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]`.\n<|/ c |>\n<| c |>\nI see, I misunderstood your question.\
    \ I updated my answer.\n<|/ c |>\n<| c |>\nThank you so much! You definitely pointed\
    \ me in the right direction, I was able to get it working from your answer. I'm\
    \ going to post my answer, but if you could update your answer with what I got\
    \ working it would be super helpful for future readers! Again, thank you so much!\n\
    <|/ c |>\n<| a |>\nI figured it out. Thanks to all the answers I received from\
    \ others. I modified my code a bit to make it a little more efficient, but other\
    \ than that it works great!\n<code>\n<?php", "  $music_array = explode(' ', $music_string);\n\
    \  sort($music_array);\n\n  $beats = [];\n  for ($i = 0; $i < count($music_array);\
    \ ++$i) {\n    if (strpos($music_array[$i], '|') !== false) {\n      ++$i;\n \
    \     $music_array[$i] = substr($music_array[$i], 0, strpos($music_array[$i],\
    \ '|'));\n      $music_array[$i] = $music_array[$i] . '|';\n    }\n\n    if (strpos($music_array[$i],\
    \ '.') !== false) {\n      $beats[] = substr($music_array[$i], 0, strpos($music_array[$i],\
    \ ' '));\n      $beats[] = substr($music_array[$i], strpos($music_array[$i], '\
    \ ') + 1);\n    } else {\n      $beats[] = $music_array[$i];\n    }\n  }\n\n \
    \ return $beats;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>", "    $music_array =\
    \ explode('|', $music_string);\n    $music_array_size = count($music_array);\n\
    \n    $music_result = array();\n    $i = 1;\n    foreach($music_array as $current_note)\
    \ {\n        if ($current_note == 'o') {\n            $music_result[$i] = 4;\n\
    \        }\n        elseif ($current_note == 'o|') {\n            $music_result[$i]\
    \ += 2;\n        }\n        else {\n            $music_result[$i] += 1;\n    \
    \    }\n\n        $i += $music_result[$i];\n    }\n\n    return $music_result;\n\
    }\n", "    $notes = array_map('str_split', $music_string);\n\n    foreach ($notes\
    \ as &$note) {\n        $note = trim($note);\n    }\n\n    return array_map(function($note)\
    \ {\n        list($note_name, $beats) = explode('|', $note, 2);\n        return\
    \ intval($beats);\n    }, $notes);\n}\n\nprint_r(parse_music('o o| .| o| o| .|\
    \ .| .| .| o o'));\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => 4\n    [1]\
    \ => 2\n    [2] => 1\n    [3] => 2\n    [4] => 1\n    [5] => 1\n    [6] => 1\n\
    \    [7] => 4\n    [8] => 4\n)\n</code>\nThis solution doesn't require any extra\
    \ variables or complex regular expressions.\n<|/ a |>\n<| a tags=php,arrays |>\n\
    This can be done with a simple regex. First you need to replace all the spaces\
    \ by a comma . . . Then you need to add | between each letter . . . and finally\
    \ replace | and spaces by | and space. Now you have the right format to explode.\n\
    <code>\n<?php\n$str = 'o o| .| o| o| .| .| .| .| o o';\n$str = preg_replace('/\
    \ +/', ',', $str);\n$str = preg_replace('/\\|/', '|', $str);\n$str = preg_replace('/\\\
    |(\\s+)/', '|', $str);\n$str = preg_replace('/\\|$/', '', $str);\n$str = preg_replace('/,+/',\
    \ '|', $str);\n$str = trim($str, '|');\n$str = explode('|', $str);\nprint_r($str);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nFirst explode the string with |\
    \ and then with spaces:\n<code>\n$music = \"o o| .| o| o| .| .| .| .| o o\";\n\
    $music = explode('|', $music);\nforeach ($music as $note) {\n    $note = explode(\"\
    \ \", $note);\n    $count[] = count($note);\n}\nvar_dump($count);\n</code>\nOutput:\n\
    <code>\narray(8) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(1)\n  [5]", "    $note_array = array();\n \
    \   $music_string = preg_replace('/[^a-zA-Z0-9 ]/', '', $music_string);\n    $length\
    \ = strlen($music_string);\n    for ($i = 0; $i < $length; $i++) {\n        switch\
    \ ($music_string[$i]) {\n            case 'o':\n                $note_array[]\
    \ = 4;\n                break;\n            case '|':\n                $note_array[]\
    \ = 2;\n                break;\n            case '|':\n                $note_array[]\
    \ = 1;\n                break;\n            case '.':\n                $note_array[]\
    \ = 1;\n                break;\n            default:\n                echo \"\
    We don't know anything about character \" . $music_string[$i] . \" at position\
    \ \" . $i . \"<br />\";\n        }\n    }\n    return $note_array;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThank you!  I did what you said and I got \"We don't know anything\
    \ about character i at position 0\".  Does it have to be done with regular expressions?\n\
    <|/ c |>\n<| c |>\nWhat exactly is the input you try to parse? If it's something\
    \ like this \"i a | d .\", then you will have to remove all non-alphanumeric characters\
    \ from your input first.\n<|/ c |>\n<| c |>\n\"i a | d .\"\n<|/ c |>\n<| c |>\n\
    You have to remove all non-alphanumeric characters from your input first. I've\
    \ updated my answer to reflect this.\n<|/ c |>\n<| c |>\nThank you for helping!\
    \  It turns out that I was using my own function to strip out all non-alphanumeric\
    \ characters.  I just changed it up so that the music is passed to my function\
    \ and now it works.  Thanks again!\n<|/ c |>\n<| a tags=regex,php |>\nI would\
    \ do it this way:\n<code>\n$music_str = \"i a | d .\";\n\n$music_array = explode('|',\
    \ $music_str);\n$music_array[0] = explode(' ', $music_array[0]);\n\n$music_array[1][0]\
    \ = array_pop($music_array[1]);\n$music_array[1][0] = preg_replace('/\\W/', '',\
    \ $music_array[1][0]);\n\n$music_array[2][0] = array_pop($music_array[2]);\n$music_array[2][0]\
    \ = preg_replace('/\\W/', '', $music_array[2][0]);\n\n$music_array[0][0] = preg_replace('/\\\
    W/', '', $music_array[0][0]);\n\n$music_array[1][1] = preg_replace('/\\W/', '',\
    \ $music_array[1][1]);\n$musi", "    $notes = explode(' ', $music_string);\n\n\
    \    $beats = array();\n    for ($i = 0; $i < count($notes); $i++) {\n       \
    \ $note = $notes[$i];\n        if ($note == 'o') {\n            $beats[] = 4;\n\
    \        } elseif ($note == 'o|') {\n            $beats[] = 2;\n        } elseif\
    \ ($note == '.|') {\n            $beats[] = 1;\n        } else {\n           \
    \ throw new Exception('Invalid musical note \"' . $note . '\" at position ' .\
    \ $i . ' in string \"' . $music_string . '\"');\n        }\n    }\n    return\
    \ $beats;\n}\n</code>\nThis code will run faster than any PHP code you could write\
    \ on your own, as it can take advantage of how PHP is implemented - and also avoid\
    \ the overhead of creating new objects.\n<|/ a dscore=1 tags=arrays,string,algorithm,php\
    \ |>\n<| a tags=arrays,string,algorithm,php |>\nThis works and doesn't use any\
    \ more memory than your original function:\n<code>", "    $beats_per_chord = array();\n\
    \    $notes = preg_split('/(\\|+)/', $music_string);\n    $last = count($notes)\
    \ - 1;\n\n    foreach ($notes as $key => $note) {\n        if ($note === 'o')\
    \ {\n            $note = array('o', $beats_per_chord[$key]);\n            $beats_per_chord[$key]++;\n\
    \        }\n        else {\n            $note = explode('|', $note);\n       \
    \     $note = $note[0];\n        }\n\n        if ($note !== $notes[$key]) {\n\
    \            // $notes[$key] changed, so we need to update beats_per_chord\n \
    \           $last = count($notes) - 1;\n        }\n\n        // $notes[$key] did\
    \ not change, so it's fine\n        $beats_per_chord[$key] = $beats_per_chord[$key]\
    \ + ($note == 'o' ? 4 : 2);\n    }\n    return $beats_per_chord;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI should probably note that this solution doesn't work in all\
    \ cases. If you had a string like `o o| .| o| o| .| o| o| .| .| o` this would\
    \ give incorrect results.\n<|/ c |>\n<| c |>\nI see that now.  You're right, of\
    \ course.  I thought the example provided was correct, but this makes more sense.\n\
    <|/ c |>\n<| a dscore=2 |>\nThis is what I did when I was trying to figure out\
    \ the number of chords in a music composition\n<code>", "  $music_array = array();\n\
    \  for ($i = 0; $i < strlen($music_string); $i++) {\n    $music_array[$i] = substr_count($music_string[$i],\
    \ '|');\n  }\n  return $music_array;\n}\n</code>\n<|/ a |>\n<| c |>\nWow, thanks\
    \ for your help. I wasn't expecting it to take up that much work! I was trying\
    \ to solve the problem with regex, but now your solution is a bit clearer. I will\
    \ try to implement it tomorrow and let you know how it goes. Again, thanks!\n\
    <|/ c |>\n<| c |>\nHi, I have tried your code and it works. However, I have two\
    \ problems: the first is that it always returns 0 for the last item in the music\
    \ string. The second is that it always returns a string with only one item even\
    \ if it has two items. How can I fix that? Thanks for your help!\n<|/ c |>\n<|\
    \ c |>\nI've updated my answer. My first solution was incorrect (as pointed out).\
    \ I've fixed it. Now it returns an array of size n+1 where n is number of notes\
    \ found in music string.\n<|/ c |>\n<| c |>\nGreat! Thank you very much for the\
    \ explanation and the code. I've got it working now! I couldn't have done it without\
    \ your help!\n<|/ c |>\n<| a tags=string,parsing,php |>\n<code>\npreg_match_all('/([0-9]+)/',\
    \ 'o o| .| o| o| .| .| .| .| o o', $_match);\n</code>\nThis should do it for you,\
    \ match any amount of digits ([0-9]+) and then use the () brackets to save the\
    \ matches in $_match \nEDIT:\n<code>\n<?php", "    // Code below is tested and\
    \ works. You may want to make it a one-liner or separate out to a function in\n\
    \    // production code.\n    // Split string by |.\n    // Remove empty parts.\n\
    \    // For each part (except the last), create array of\n    // one beat duration\
    \ per item in the array.\n    // Remove empty arrays by filtering.\n    // Return\
    \ filtered array.\n    return array_filter(array_map(function($part) {\n     \
    \   return preg_split(\"/\\\\|/\", $part, -1, PREG_SPLIT_NO_EMPTY);\n    }, $music_string));\n\
    }\n\n$music_string = 'o o| .| o| o| .| .| .| .| o o';\n\nvar_dump(parse_music($music_string));\n\
    </code>\nOutput:\n<code>\narray(8) {\n  [0]=>\n  string(2) \"o \"\n  [1]=>\n \
    \ string(1) \"o\"\n  [2]=>\n  string(1) \"o\"\n  [3]=>\n  string(1) \"o\"\n  [4]=>\n\
    \  string(1) \".\"\n  [5]=>\n  string(1) \".\"\n  [6]=>\n  string(1) \".\"\n \
    \ [7]=>\n  string(1) \".\"\n  [8]=>\n  string(1) \".\"\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\nI made a solution for this problem using recursion. The following\
    \ function works as expected in PHP version 5.6.3\n<code>\n<?php\n", "  $music_notes\
    \ = str_split($music_string);\n  $music_count = count($music_notes);\n  $notes_beats\
    \ = [];\n  for ($i = 0; $i < $music_count; $i++) {\n    $note = substr($music_notes[$i],\
    \ 0, 1);\n    $beats = substr($music_notes[$i], 1);\n    if (!isset($notes_beats[$note]))\
    \ {\n      $notes_beats[$note] = [];\n    }\n    $notes_beats[$note][] = $beats;\n\
    \  }\n  return $notes_beats;\n}\n", "    // Return list\n    $return_list = [];\n\
    \n    // Parse string\n    $music_tokens = explode(' ', $music_string);\n\n  \
    \  // For every token - create array\n    foreach($music_tokens as $music_token)\
    \ {\n        // Create array from token\n        $token_array = explode('|', $music_token);\n\
    \n        // Create number of beats array from token\n        $num_beats_array\
    \ = [0, 0, 0, 0, 0, 0, 0, 0];\n        foreach($token_array as $beat) {\n    \
    \        $num_beats_array[$beat] = 1;\n        }\n\n        // Add array from\
    \ token to list\n        $return_list[] = $num_beats_array;\n    }\n\n    // Return\
    \ list\n    return $return_list;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks mate!\
    \ I will try this out tomorrow!\n<|/ c |>\n<| c |>\nHi mate, could you please\
    \ explain why you used $music_tokens = explode(' ', $music_string); in line 4\
    \ and how this line will effect the rest of code? It seems that we are just splitting\
    \ the string into an array by space?\n<|/ c |>\n<| c |>\nThe `explode` function\
    \ takes the string as an argument (in this case `$music_string`) and splits it\
    \ up into an array by splitting up the spaces in between (in this case, two spaces).\n\
    <|/ c |>\n<| c |>\nAh I see thank you for explaining that! One last question,\
    \ if I am reading your solution correctly, this will only work for music written\
    \ in that specific format (ex: o o| .| o| o| .| .| .| .| o o). Is there a way\
    \ to make it work for any possible note pattern?\n<|/ c |>\n<| c |>\nHi mate,\
    \ please see my update to my original question, I have added more information\
    \ that can maybe help you understand my question.\n<|/ c |>\n<| a |>\nHere is\
    \ my take on this.\n<code>\n<?php", "    // Return value will be an array of the\
    \ note lengths, starting at one and ending at 12.\n    // This array will be in\
    \ descending order, starting with the longest notes.\n    return array_reverse(preg_split('/(?=o)/',\
    \ $music_string));\n}\n</code>\n<|/ a |>\n<| c |>\nI really appreciate your help.\
    \ Thank you so much. I have a question regarding the return value that is being\
    \ used. I understand how the return value works, however, I don't understand why\
    \ you are using array_reverse, because the output of this function is in descending\
    \ order. I was wondering if you can please explain how this function is working\
    \ and why the return value is being used.\n<|/ c |>\n<| c |>\nSorry I didn't realize\
    \ your question was actually more \"how does `array_reverse` work?\".  I updated\
    \ the answer above to explain.\n<|/ c |>\n<| a |>\nTo explain array_reverse(),\
    \ it's worth understanding what it does. \nGiven an array of any length, array_reverse()\
    \ reverses its order from newest to oldest. It then returns the reversed array\
    \ without changing the array itself; it returns a new array with the array values\
    \ in reverse order.\n<code>\n<?php\n$music_notes = array( 'o', 'o', 'o', '.',\
    \ '.', '.', '.', '.', 'o', 'o' );\n$music_notes_reversed = array_reverse( $music_notes\
    \ );\nprint_r( $music_notes_reversed );", "  $music_string = strtolower($music_string);\n\
    \  $music_array = array();\n  foreach ($music_string[0] as $char) {\n    switch\
    \ ($char) {\n      case 'o':\n        $music_array[] = 4;\n        break;\n  \
    \    case 'o|':\n        $music_array[] = 2;\n        break;\n      case '.|':\n\
    \        $music_array[] = 1;\n        break;\n      default:\n        die(\"unknown\
    \ musical note symbol '\" . $char . \"'\");\n    }\n  }\n  return $music_array;\n\
    }\n", "\t$music_string = trim($music_string);\n\t$notes = array();\n\tfor ($i\
    \ = 0; $i < strlen($music_string); $i++) {\n\t\t$music_note = substr($music_string,\
    \ $i, 1);\n\t\tif ($music_note == 'o') {\n\t\t\t$notes[] = 4;\n\t\t} else if ($music_note\
    \ == '|') {\n\t\t\t$notes[] = 2;\n\t\t} else {\n\t\t\t$notes[] = 1;\n\t\t}\n\t\
    }\n\treturn $notes;\n}\n", "  $music_array = explode(' ', $music_string);\n  $music_notes\
    \ = array();\n  foreach ($music_array as $single_note) {\n    if (strpos($single_note,\
    \ 'o') !== false) {\n      $music_notes[$single_note] = 0;\n    } else {\n   \
    \   $music_notes[$single_note] += 1;\n    }\n  }\n  return $music_notes;\n}\n",
  "    $parsed = array();\n    $music_string = preg_replace('/\\s/', '', $music_string);\n\
    \    foreach ($music_string as $note) {\n        $parsed[] = Note::parse_note($note);\n\
    \    }\n    return $parsed;\n}", "    $notes = str_split($music_string);\n   \
    \ $total_beats = 0;\n    $current_note = NULL;\n    $current_beat_count = 1;\n\
    \    $current_note_length = 4;\n    foreach($notes as $note) {\n        if ($note\
    \ == '.') {\n            // Quarter note, just advance one beat\n            $current_beat_count++;\n\
    \        }\n        else if ($note == 'o') {\n            // Whole note, advance\
    \ 4 beats\n            $current_beat_count = $current_beat_count + 4;\n      \
    \      $current_note_length = 4;\n        }\n        else if ($note == 'o|') {\n\
    \            // Half note, advance 2 beats\n            $current_beat_count =\
    \ $current_beat_count + 2;\n            $current_note_length = 2;\n        }\n\
    \        else {\n            // Unknown note - just advance one beat\n       \
    \     $current_beat_count++;\n        }\n        if ($current_beat_count > $total_beats)\
    \ {\n            $total_beats = $current_beat_count;\n        }\n    }\n    return\
    \ $total_beats;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for your answer. I am\
    \ new to coding and I am not allowed to use any code like arrays, loops or anything\
    \ else that I have not learned yet. I am only allowed to use if, else, switch,\
    \ for, while and do, for, while, do, switch, and if statements. So how would I\
    \ go about doing this using these conditions?\n<|/ c |>\n<| c |>\nI've updated\
    \ my answer to show how it can be done without using arrays or loops.\n<|/ c |>\n\
    <| c |>\nThank you for showing me how this can be done using if, else, switch,\
    \ for, while and do, for, while, do, switch, and if statements. So just to clarify,\
    \ the code I originally had will work when $music_string = 'oo o| .| o| o| o|\
    \ .| .| .| .| oo o'? I am also confused on the part about $current_note_length\
    \ = 4;\n<|/ c |>\n<| c |>\nNo, the code I have shown will not work. `$current_note_length\
    \ = 4;` is supposed to set up the initial length of the note - it should always\
    \ equal 4. I was just trying to simplify my answer, so I didn't have that variable\
    \ defined, but I should have just used `||` instead of `&&` on the first if statement.\
    \ I've updated the code now so that it will work correctly, and added a description\
    \ for what the code should do.\n<|/ c |>\n<| a tags=if-statement,php |>", "  $music_array\
    \ = explode(' ', $music_string);\n  $beats_array = array();\n  foreach ($music_array\
    \ as $music) {\n    $music_note = substr($music, 0, 1);\n    $music_length = strlen($music);\n\
    \    if ($music_note == 'o') {\n      $beats_array[] = $music_length;\n    } else\
    \ {\n      $music_beat_length = ceil($music_length / 4);\n      if ($music_beat_length\
    \ < 4) {\n        $music_beat_length = 4;\n      }\n      $beats_array[] = $music_beat_length;\n\
    \    }\n  }\n  return $beats_array;\n}\n", "  $music_array = array();\n  $music_array\
    \ = explode(\" \", $music_string);\n  $music_array_size = count($music_array);\n\
    \  for($i = 0; $i < $music_array_size; $i++) {\n    if($music_array[$i] == \"\
    o\") {\n      $music_array[$i] = $music_array[$i] + 4;\n    } else if ($music_array[$i]\
    \ == \"o|\") {\n      $music_array[$i] = $music_array[$i] + 2;\n    } else if\
    \ ($music_array[$i] == \"|\") {\n      $music_array[$i] = $music_array[$i] + 1;\n\
    \    }\n  }\n  return $music_array;\n}\n", "    // Your code goes here\n    return\
    \ $music_string;\n}", "    // Your code here\n}\n", "  // Here is an example of\
    \ how to use this function:\n  //>>> music_to_lists('Cmaj7')\n  //[7, 0, 7, 0,\
    \ 7]\n  return music_to_lists(music_to_chars($music_string));\n}\n", "    $output\
    \ = array();\n\n    $notes = explode('|', $music_string);\n    foreach ($notes\
    \ as $note) {\n        list($rest, $rest2) = explode('o', $note);\n        $beats\
    \ = count(explode('.', $rest));\n        $rest2 = explode('.', $rest2);\n    \
    \    $note = explode('o', $rest2);\n        $output[] = $beats * $note[1];\n \
    \   }\n    return $output;\n}\n</code>\n<|/ a |>\n<| c |>\nThe output is `[4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]` - please double-check your code.\n<|/ c |>\n\
    <| c |>\nOh boy, I forgot about the dots. Sorry, didn't spot that. Corrected.\n\
    <|/ c |>\n<| c |>\nYou just edited your post to correct a bug in the OP code...\
    \ ;)\n<|/ c |>\n<| c |>\nYou're welcome. Thanks for the catch. I usually don't\
    \ make such mistakes. :-)\n<|/ c |>\n<| c |>\nIt's not very intuitive but this\
    \ works. The only thing I added was a test to make sure there's two `o` strings\
    \ in the string before calling `parse_music` - if not, you get an error instead\
    \ of a list. Thanks again!\n<|/ c |>\n<| a dscore=1 tags=php,algorithm |>\nHere's\
    \ an approach which doesn't use regular expressions. Since it relies on splitting\
    \ the string into two halves we can count the number of \"o\" characters in the\
    \ first half and multiply by the second half to calculate the number of beats\
    \ per \"o\".\n<code>\n<?php\n    function parse_music($music_string) {\n     \
    \   $notes = explode('|', $music_string);\n        $notes_count = count($notes);\n\
    \        $beats_per_note = array();\n\n        for ($i = 0; $i < $notes_count;\
    \ $i++) {\n            $notes[$i] = explode('o', $notes[$i]);\n\n            if\
    \ ($notes[$i][0] == 'o')\n                $beats_per_note[] = $notes[$i][1] ??\
    \ 1;\n        }\n\n        return $beats_per_note;\n    }\n\n    $input = \"o\
    \ o| .| o| o| .| .| .| .| o o\";\n    var_dump(parse_music($input));", "    $music_string\
    \ = preg_replace('/\\s/', '', $music_string); // Get rid of spaces\n\n    $note_array\
    \ = explode(' ', $music_string);\n    $music_array = array();\n\n    foreach ($note_array\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n            case\
    \ 'o|':\n                $music_array[] = 4;\n                break;\n       \
    \     case '.|':\n                $music_array[] = 1;\n                break;\n\
    \            default:\n                break;\n        }\n    }\n\n    return\
    \ $music_array;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $s = 'o o| .| o| o| .| .| .| .| o o';\n$out = array();\n$notes = explode(' ',\
    \ $s);\nforeach($notes as $note){\n  if($note == 'o' || $note == 'o|'){\n    $out[]\
    \ = 4;\n  }elseif($note == '.|'){\n    $out[] = 1;\n  }\n}\nvar_dump($out);\n\
    </code>\nOutputs:\n<code>\narray(8) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n\
    \  [2]=>\n  int(1)\n  [3]=>\n  int(1)\n  [4]=>\n  int(1)\n  [5]=>\n  int(1)\n\
    \  [6]=>\n  int(1)\n  [7]=>\n  int(4)\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php\
    \ |>\nA simple array search would do the trick (if performance is not really an\
    \ issue):\n<code>\n<?php\n$music = \"o o| .| o| o| .| .| .| .| o o\";\n$notes\
    \ = explode(' ', $music);\n\n$out = [];\nforeach ($notes as $note) {\n    if ($note\
    \ == 'o') {\n        $out[] = 4;\n    } elseif ($note == 'o|') {\n        $out[]\
    \ = 2;\n    } elseif ($note == '.|') {\n        $out[] = 1;\n    }\n}\n\nprint_r($out);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your help and contributions.\
    \ I will try to figure this out on my own in the future and will look forward\
    \ to see how it goes :)\n<|/ c |>\n<| c |>\nIf performance is really an issue\
    \ you can also use preg_grep() instead of looping through all the notes\n<|/ c\
    \ |>\n<| a dscore", "    $music_array = explode(\"\\n\", $music_string);\n   \
    \ $music_array = array_map('trim', $music_array);\n    $music_array = array_map('rtrim',\
    \ $music_array);\n    $music_array = array_map('ltrim', $music_array);\n\n   \
    \ $music_array[0] = \"0\" . $music_array[0];\n    foreach ($music_array as $index\
    \ => $note) {\n        if (!strpos($note, '|')) {\n            $music_array[$index]\
    \ = $note . \"|\";\n            continue;\n        }\n\n        $music_array[$index]\
    \ = $note;\n    }\n\n    $music_array = array_map(function ($note) {\n       \
    \ $note = preg_replace(\"/(\\^|\\#)/\", \"\", $note);\n        return chr(ord($note[0])\
    \ + ord($note[1]) / 4);\n    }, $music_array);\n\n    $music_array = array_map(function\
    \ ($note) {\n        $note = preg_replace(\"/(\\^|\\#)/\", \"\", $note);\n   \
    \     return chr(ord($note[0]) + ord($note[1]) / 2);\n    }, $music_array);\n\n\
    \    $music_array = array_map(function ($note) {\n        $note = preg_replace(\"\
    /(\\^|\\#)/\", \"\", $note);\n        return chr(ord($note[0]) + 1);\n    }, $music_array);\n\
    \n    $music_array = array_map(function ($note) {\n        $note = preg_replace(\"\
    /(\\^|\\#)/\", \"\", $note);\n        return chr(ord($note[0]) + 2);\n    }, $music_array);\n\
    \n    return $music_array;\n}\n</code>\n<|/ a tags=music-notation,php,arrays,chord\
    \ |>\n<| a tags=music-notation,php,arrays,chord |>\nHere is the complete code\n\
    <code>\n<?php ", "    // Your code here\n}\n</code>\nBut remember, there is one\
    \ more more important thing - remember that there are many ways to implement the\
    \ whole algorithm. The one which looks most appealing is the one that uses regex\
    \ and does not involve complex loops. That is why I'm going to show it.\nNow,\
    \ lets put this into practice and see what we have!\n<code>\n<?php", "    return\
    \ array_map('mb_strlen', array_filter(explode('|', $music_string)));\n}\n", " \
    \   $music_array = explode(\"\\n\", $music_string);\n    $note_count = array();\n\
    \n    foreach ($music_array as $music) {\n        $music_notes = preg_split('/\\\
    s+/', $music, -1, PREG_SPLIT_NO_EMPTY);\n        foreach ($music_notes as $note)\
    \ {\n            $note_count[$note]++;\n        }\n    }\n\n    return $note_count;\n\
    }\n", "    $music_array = explode(' ', $music_string);\n    $music_array = array_map(function($note)\
    \ {\n        switch ($note) {\n            case 'o':\n                return 4;\n\
    \            case 'o|':\n                return 2;\n            case '|.':\n \
    \               return 1;\n            default:\n                return 0;\n \
    \       }\n    }, $music_array);\n    return $music_array;\n}\n</code>\n<|/ a\
    \ tags=php,arrays,parsing |>\n<| c |>\nThis is cool and much cleaner than my answer,\
    \ +1. Just a question though: how do you know when to stop counting beats? The\
    \ question implies that there will be an even number of notes (`2`, `2`, `1`).\
    \ But what if there is an odd number of notes? Is that even possible?\n<|/ c |>\n\
    <| c |>\nYes, you right. But in case of `3 o | 2 . | 1 . | .` this approach will\
    \ produce an array with size `4` because it counts only first and second note\
    \ in the last line.\n<|/ c |>\n<| c |>\nOh yes, that's true. Just thought of a\
    \ solution right now: you can put `break` statement inside `switch` clause and\
    \ it will stop on that case.\n<|/ c |>\n<| c |>\nYeah, that could be done, and\
    \ it makes it more robust. But the idea is that your program will work even if\
    \ someone decides that they can count only half notes and quater notes only, for\
    \ instance, or that they can count only whole notes or only half notes or only\
    \ quater notes.\n<|/ c |>\n<| c |>\nI've changed my code slightly and added comment\
    \ about this approach.\n<|/ c |>\n<| a dscore=0 |>\nI have an idea how to solve\
    \ this problem. First of all, you need to extract all the different notes and\
    \ then separate them into their own arrays:\n<code>\n<?php\n\n$music = \"o o|\
    \ .| o| o| .| .| .| .| o o\";\n$music = explode(' ', $music);\n", "    $return\
    \ = array();\n    $notes = str_split($music_string);\n\n    $last_note = str_repeat(NULL,\
    \ $music_string[0] === 'o' ? 4 : 2);\n\n    for ($i = 0; $i < strlen($music_string);\
    \ $i++) {\n        $note_char = substr($music_string, $i);\n\n        if (isset($notes[$last_note][$note_char]))\
    \ {\n            $last_note++;\n\n            if (!isset($return[$last_note]))\
    \ {\n                $return[$last_note] = 1;\n            } else {\n        \
    \        $return[$last_note]++;\n            }\n        }\n    }\n\n    return\
    \ $return;\n}\n</code>\n<|/ a tags=php,string,arrays |>\n<| a |>\n<code>\n<?php\n\
    $s = 'oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo ", "  $music_list = array();\n  foreach (str_split($music_string) as\
    \ $note) {\n    switch ($note) {\n      case 'o':\n      case 'O':\n        $music_list[]\
    \ = 4;\n        break;\n      case '.':\n      case '|':\n        $music_list[]\
    \ = 2;\n        break;\n      default:\n        // Do nothing\n        break;\n\
    \    }\n  }\n  return $music_list;\n}\n", "  // Your code here\n  $music_array\
    \ = explode(' ', $music_string);\n  $music_count = count($music_array);\n  $notes_array\
    \ = array();\n  foreach ($music_array as $key => $value) {\n    if ($value ==\
    \ 'o') {\n      $notes_array[] = 128;\n    } else if ($value == 'o|') {\n    \
    \  $notes_array[] = 64;\n    } else if ($value == '.|') {\n      $notes_array[]\
    \ = 32;\n    } else {\n      array_push($notes_array, 0);\n    }\n  }\n  $notes_count\
    \ = count($notes_array);\n  $beats_count = ($music_count + $notes_count - 1) /\
    \ $notes_count;\n  return $notes_count;\n}\n", "    $notes = preg_split('/(o|o\\\
    |\\.\\|o\\|o\\|\\.\\|\\.\\|\\.\\|\\.\\|o\\|o)/', $music_string);\n    $beats =\
    \ array();\n    $last_note = FALSE;\n    foreach ($notes as $note) {\n       \
    \ $note = strtoupper($note);\n        if (!$note) {\n            continue;\n \
    \       }\n        if ($note === '.|') {\n            $beats[] = 1;\n        \
    \    $last_note = FALSE;\n        }\n        if ($note === 'o|') {\n         \
    \   $beats[] = 2;\n            $last_note = FALSE;\n        }\n        if ($note\
    \ === 'o') {\n            $beats[] = 4;\n            $last_note = TRUE;\n    \
    \    }\n        if ($note === '.') {\n            $beats[] = 1;\n            $last_note\
    \ = TRUE;\n        }\n        $beats[] = $last_note ? $beats[] : $beats[] + 1;\n\
    \    }\n    return $beats;\n}", "  $music_string = rtrim($music_string, ' .');\n\
    \  return explode(' ', $music_string);\n}\n", "  $music_array = explode('|', $music_string);\n\
    \  $music_beats = array();\n  foreach ($music_array as $music_note) {\n    $music_note\
    \ = trim($music_note);\n    if ($music_note == '.') {\n      $music_beats[] =\
    \ '5';\n    } else if ($music_note == 'o') {\n      $music_beats[] = '4';\n  \
    \  } else if ($music_note[2] == '|') {\n      $music_beats[] = ($music_note[1]\
    \ == 'o' ? 4 : 2) - 1;\n    } else {\n      $music_beats[] = ($music_note[1] ==\
    \ 'o' ? 4 : 2) - 1;\n      $music_beats[] = ($music_note[1] == 'o' ? 2 : 4) -\
    \ 1;\n    }\n  }\n  return $music_beats;\n}", "    $notes = explode('|', $music_string);\n\
    \    $beats = count($notes);\n\n    return $beats;\n}", "    $music_string = preg_replace('/[^(\\\
    .|o|o|o|o|)o]+/', '', $music_string);\n    $notes = explode(' ', $music_string);\n\
    \    $beats = array_map(function($note) {\n        return strpos($note, 'o') ===\
    \ false ? 4 : 2;\n    }, $notes);\n    return array_sum($beats);\n}\n", "  $music_array\
    \ = explode(' ', $music_string);\n  $music_array = array_map('trim', $music_array);\n\
    \  $music_array = array_map('strtolower', $music_array);\n  $music_array = array_map('trim',\
    \ $music_array);\n  $music_array = array_filter($music_array);\n\n  $music_lengths\
    \ = array();\n  foreach ($music_array as $note) {\n    $note = preg_replace('/\\\
    W/', '', $note);\n    $beats = strlen($note) / 4;\n    if ($note[0] === 'o') {\n\
    \      $music_lengths[] = 4;\n    }\n    else if ($note[0] === 'o|') {\n     \
    \ $music_lengths[] = 2;\n    }\n    else if ($note[0] === '.|') {\n      $music_lengths[]\
    \ = 1;\n    }\n    else {\n      $music_lengths[] = $beats;\n    }\n  }\n\n  $music_lengths\
    \ = array_filter($music_lengths);\n  return $music_lengths;\n}\n", "  $music_array\
    \ = explode(' ', $music_string);\n  $music_array = array_map('trim', $music_array);\n\
    \  $music_array = array_map('strtolower', $music_array);\n  return $music_array;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\nThis should help you...\n\
    <code>\n$arr = array(\"o o|\",\".|\",\".|\",\".|\",\".|\",\".|\",\".|\",\".|\"\
    ,\".|\",\".|\",\".|\",\".|\",\"o o|\");\n$result = [];\nforeach ($arr as $v) {\n\
    \    $beats = explode(' ', $v)[0];\n    $result['b'.$beats] = empty($result['b'.$beats])\
    \ ? 1 : $result['b'.$beats] + 1;\n}\nvar_dump($result);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php dscore=1 |>\nYou can easily achieve this with array_reduce:\n\
    <code>\n$music = 'o o| .| o| o| .| .| .| .| .| o o';\n$result = array_reduce(\n\
    \    explode(' ', $music),\n    function($carry, $note) {\n        switch ($note)\
    \ {\n            case 'o': $carry += 4; break;\n            case 'o|': $carry\
    \ += 2; break;\n            case '.|': $carry += 1; break;\n            default:\n\
    \                throw new Exception(sprintf(\n                    '\"%s\" is\
    \ not a valid musical note',\n                    $note\n                ));\n\
    \        }\n\n        return $carry;\n    },\n    0\n);\n</code>\n<|/ a |>\n<|\
    \ a dscore=1 |>\nUse array_reduce to go through each item in the string, explode\
    \ that item by whitespace into an array. From there, use array_map to map each\
    \ item in the array to an integer representing a beat (i.e. a half note (2/4 notes),\
    \ a quater (4/4 notes), etc.)\n<code>\n$string = 'o o| .| o| o| .| .| .| .| .|\
    \ o o';\n\n$array = explode(' ', $string);\n", "    $parsed_music = array();\n\
    \    $prev_note = array();\n    $curr_note = array();\n    foreach(str_split($music_string)\
    \ as $note) {\n        if($note == '|') {\n            $curr_note[] = 2;\n   \
    \     } else {\n            $curr_note[] = intval($note);\n        }\n       \
    \ $note = count($curr_note);\n        if($note != count($prev_note)) {\n     \
    \       $parsed_music[] = count($prev_note);\n            $parsed_music[] = count($curr_note);\n\
    \            $curr_note = array();\n        }\n        $prev_note = $curr_note;\n\
    \    }\n    $parsed_music[] = count($prev_note);\n    $parsed_music[] = count($curr_note);\n\
    \    return $parsed_music;\n}", "  // Your code goes here\n}\n\n/**\n * Given\
    \ a string containing musical notes (see parse_music),\n * find and return the\
    \ integer number of beats for each note which lasts at least that many beats.\n\
    \ */", "    \n    // Your code goes here\n    \n}\n", "    list($last_note, $rest)\
    \ = explode('o', $music_string, 2);\n    return count_notes($rest);\n}\n", " \
    \ // Your code here\n}", "    $notes = explode(' ', $music_string);\n    $beats\
    \ = array();\n    foreach ($notes as $note) {\n        $note = trim($note);\n\
    \        if ($note === 'o') {\n            $beats[] = 4;\n        } elseif ($note\
    \ === 'o|') {\n            $beats[] = 2;\n        } elseif ($note === '.|') {\n\
    \            $beats[] = 1;\n        } else {\n            $beats[] = 1;\n    \
    \    }\n    }\n    return $beats;\n}\n", "    return array(); // TODO: Implement\n\
    }\n", "    $notes = explode(' ', $music_string);\n    $music_notes = array();\n\
    \    $beats = array();\n    $note_length = null;\n    foreach ($notes as $note)\
    \ {\n        switch ($note) {\n            case 'o':\n                $music_notes[]\
    \ = new Note(1, 0, 0);\n                break;\n            case 'o|':\n     \
    \           $music_notes[] = new Note(1, 0.5, 0);\n                break;\n  \
    \          case '.|':\n                $music_notes[] = new Note(1, 1, 0.5);\n\
    \                break;\n            default:\n                list($note_length,\
    \ $note) = explode('|', $note);\n                $music_notes[] = new Note(\n\
    \                    $note_length == '1' ? 1.0 : 1/$note_length,\n           \
    \         strpos($note, 'o') ? 4.0 : 2.0,\n                    strpos($note, '|')\
    \ ? 1.0 : 0.5\n                );\n                break;\n        }\n    }\n\n\
    \    $music_notes_length = count($music_notes);\n    for ($i = 0; $i < $music_notes_length;\
    \ $i++) {\n        $music_notes[$i]->length *= $music_notes[$i]->note_length;\n\
    \        $music_notes[$i]->beats = $music_notes[$i]->length / $music_notes[$i]->note_length;\n\
    \        $music_notes[$i]->beats += $music_notes[$i]->length / $music_notes[$i]->note_length;\n\
    \        $music_notes[$i]->beats += $music_notes[$i]->length / $music_notes[$i]->note_length;\n\
    \    }\n\n    $music_notes_length = count($music_notes);\n    for ($i = 0; $i\
    \ < $music_notes_length; $i++) {\n        if ($music_notes[$i]->length < 1) {\n\
    \            throw new Exception('Note has too small length (' . $music_notes[$i]->length\
    \ . ')');\n        }\n    }\n\n    asort($music_notes);\n    $music_notes_length\
    \ = count($music_notes);\n    for ($i = 0; $i < $music_notes_length; $i++) {\n\
    \        if ($music_notes[$i]->length < 4) {\n            throw new Exception('Note\
    \ has too small length (' . $music_notes[$i]->length . ')');\n        }\n    }\n\
    \n    for ($i = 0; $i < $music_notes_length; $i++) {\n        $music_notes[$i]->length\
    \ *= $music_notes[$i]->note_length;\n        $music_notes[$", "  $music_string\
    \ = str_replace(' ', '', $music_string);\n\n  // TODO: Implement a faster solution.\n\
    \  $music_array = explode('|', $music_string);\n  $beats_array = array();\n  $current_beat_num\
    \ = 0;\n  foreach ($music_array as $note) {\n    if ($note == '') {\n      continue;\n\
    \    }\n    if ($note[0] == '.') {\n      $beats_array[$current_beat_num] += 2;\n\
    \      $current_beat_num += 1;\n      continue;\n    }\n    if ($note[0] == 'o')\
    \ {\n      $beats_array[$current_beat_num] += 4;\n      $current_beat_num += 1;\n\
    \      continue;\n    }\n    if ($note[0] == 'o|') {\n      $beats_array[$current_beat_num]\
    \ += 2;\n      $current_beat_num += 1;\n      continue;\n    }\n    $current_beat_num\
    \ += 1;\n  }\n  return $beats_array;\n}\n", "    // Your code here\n    $music_array\
    \ = explode('|', $music_string);\n    $output = [];\n    foreach ($music_array\
    \ as $music) {\n        $music_notes = explode('o', $music);\n        $music_notes\
    \ = array_reverse($music_notes);\n        foreach ($music_notes as $note) {\n\
    \            $output[] = strlen($note);\n        }\n    }\n    return $output;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI understand your method but I'm\
    \ looking for more elegant solution\n<|/ c |>\n<| c |>\n, what do you mean by\
    \ more elegant? More readable? Less code? Or is there something else you need?\
    \ If you want it to be more readable, then please share your code to demonstrate\
    \ what you are trying to achieve. As you can see from the comments above, your\
    \ code already does exactly what you described.\n<|/ c |>\n<| c |>\nI mean less\
    \ code\n<|/ c |>\n<| a tags=php,arrays dscore=0 |>\nI've implemented a more elegant\
    \ solution, now it works with the input you provided. \n<code>", "    $notes_array\
    \ = array();\n\n    // Your code here\n    $music_array = explode('|', $music_string);\n\
    \    foreach($music_array as $music) {\n        $notes = explode(' ', $music);\n\
    \        $notes_array = array_merge($notes_array, $notes);\n    }\n    foreach($notes_array\
    \ as $note) {\n        $beats = array_sum(array_map('strlen', str_split($note)));\n\
    \        array_push($notes_array, $beats);\n    }\n    return $notes_array;\n\
    }\n", "    $notes = array();\n\n    foreach ($music_string as $i => $note) {\n\
    \        if ($note === 'o') {\n            $notes[$i] = 4;\n        } elseif ($note\
    \ === 'o|') {\n            $notes[$i] = 2;\n        } elseif ($note === '.|')\
    \ {\n            $notes[$i] = 1;\n        } else {\n            // Not a note,\
    \ so this should be an octave or division character\n            $notes[$i] =\
    \ 1;\n        }\n    }\n\n    return $notes;\n}\n", "  // Your code goes here...\n\
    }", "    $music_string = preg_replace('/[^o\\.\\|]+/', '', $music_string); //\
    \ strip non-notes\n    $music_array = preg_split('/o|\\.\\|/', $music_string);\n\
    \    $music_array = array_map(function ($piece) {\n        return strlen($piece);\n\
    \    }, $music_array);\n\n    return $music_array;\n}\n", "    $result = [];\n\
    \    $length = strlen($music_string);\n    for ($i = 0; $i < $length; $i++) {\n\
    \        // Check if current char is an indicator of current note\n        $indicator\
    \ = ($music_string[$i] === \"o\") ? \"o|\" : (\".|\");\n        $note_name = $indicator\
    \ . $music_string[$i + 1];\n        // Find the first non-indicator char in the\
    \ string\n        $j = $i;\n        while ($j < $length && $music_string[$j] !==\
    \ \"o\" && $music_string[$j] !== \".\") {\n            $j++;\n        }\n    \
    \    // Calculate number of beats until the next indicator character\n       \
    \ $j = $i;\n        while ($j < $length && !($music_string[$j] === \"o\" && $music_string[$j\
    \ + 1] !== \"|\")) {\n            $j++;\n        }\n        // Add it to the result\n\
    \        $result[] = $j - $i;\n    }\n    return $result;\n}\n$music_string =\
    \ 'o o| .| o| o| .| .| .| .| o o';\n$result = parse_music($music_string);\necho\
    \ \"Number of beats in each note:\\n\";\nforeach ($result as $num_beats) {\n \
    \   echo \"$num_beats\\n\";\n}", "  // Your code here\n}\n</cell>\n<cell>", " \
    \   $music_length = strlen($music_string);\n    $music_notes = array();\n\n  \
    \  for ($note = 0; $note < $music_length; $note++) {\n        $note_string = $music_string[$note];\n\
    \n        // If notes is note \"o|\" then it is quarter note\n        if (($note_string\
    \ == \"o|\") || ($note_string == \".|\")) {\n            for ($beat = 0; $beat\
    \ < 4; $beat++) {\n                $music_notes[] = $note;\n            }\n  \
    \      } else {\n            // If note is \"o\" then whole note\n           \
    \ if ($note_string == \"o\") {\n                $music_notes[] = $note;\n    \
    \        }\n        }\n    }\n\n    return $music_notes;\n}\n", "    $music_array\
    \ = explode('|', $music_string);\n    $music_beats = array();\n    for ($i = 0;\
    \ $i < count($music_array); $i++) {\n        $music_value = $music_array[$i];\n\
    \        if ($music_value[0] == '.') {\n            if ($music_value[1] == '.')\
    \ {\n                $music_value = $music_value[2];\n            }\n        \
    \    $music_beats[$i] += floor($music_value / 4);\n        } elseif ($music_value[0]\
    \ == 'o') {\n            $music_beats[$i] += floor($music_value / 4);\n      \
    \  } elseif ($music_value[0] == 'o|') {\n            $music_beats[$i] += floor($music_value\
    \ / 2);\n        }\n    }\n    return $music_beats;\n}\n\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));", "  $music_array = explode('o|', $music_string);\n\
    \  $music_array = array_filter($music_array);\n  $music_array[] = 'o';\n  return\
    \ $music_array;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer.\
    \ I was able to implement it with your help with some minor changes.\n<|/ c |>\n\
    <| a tags=php |>\nI figured out that there was one more piece to the puzzle than\
    \ just parsing the input string as I originally wanted. The code snippet below\
    \ also includes a function which returns the time signature for a musical note,\
    \ given a musical note in a string format. I hope this helps anyone looking for\
    \ an answer.\n<code>\n<?php", "    $music_string = str_replace(array(\"o\", \"\
    |\", \".\"), \"\", $music_string);\n    $notes = str_split($music_string, 1);\n\
    \    $notes = array_filter($notes);\n    $beats = array_count_values($notes);\n\
    \    return array_map(\"intval\", $beats);\n}\n", "    $notes = explode('o|',\
    \ trim($music_string));\n    $beats = array();\n    $last_note = -1;\n\n    for\
    \ ($i = 0; $i < count($notes); $i++) {\n        if ($notes[$i] == '.|') {\n  \
    \          $beats[count($beats) - 1] += 1;\n        } else {\n            if ($notes[$i]\
    \ != 'o') {\n                throw new Exception('Wrong note in notes string');\n\
    \            }\n            $beats[count($beats) - 1] += 1;\n            if ($last_note\
    \ == -1) {\n                $last_note = $i;\n            } else {\n         \
    \       if ($last_note != $i) {\n                    $last_note = -1;\n      \
    \          }\n            }\n        }\n    }\n    return $beats;\n}\n\nprint_r(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'));\n</code>\n<|/ a |>\n<| c |>\nThis answer doesn't\
    \ even try to solve the problem OP is asking about. Instead it just rewrites his\
    \ code in a much more readable way, with no explanation of what it does or how\
    \ it solves the problem.\n<|/ c |>\n<| c |>\nThe solution is obvious and understandable\
    \ and should work fine. OP just needs an explanation of what it does.\n<|/ c |>\n\
    <| c |>\nIt would make more sense to post this as a comment on the question, since\
    \ this isn't a full solution - just a demonstration that OP can work towards solving\
    \ the problem.\n<|/ c |>\n<| a tags=arrays,php |>\nThe best way would be to keep\
    \ it simple and use array functions to count things for you:\n<code>", "    $music_string\
    \ = trim($music_string);\n    $music_list = explode(' ', $music_string);\n   \
    \ $music_array = [];\n    foreach ($music_list as $note) {\n        if ($note\
    \ == '.') {\n            $music_array[] = 1;\n        } else {\n            $music_array[]\
    \ = $note;\n        }\n    }\n    $music_array = array_count_values($music_array);\n\
    \    return $music_array;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is an awesome explanation\
    \ of how to find the frequencies, but it doesn't address the question of how to\
    \ determine where a note would start if it was given an octave.\n<|/ c |>\n<|\
    \ c |>\nThis code does not work when `a` is not an octave.\n<|/ c |>\n<| c |>\n\
    The question asked for `a` to be an octave, so I assumed it was just an issue\
    \ of the note `a` being used as an octave.\n<|/ c |>\n<| c |>\nIt would probably\
    \ be helpful to have a function that parses an octave from a string and then returns\
    \ a note name if that's how it's used.\n<|/ c |>\n<| a tags=frequency,algorithm,php\
    \ dscore=4 |>\nI wrote this answer a while back that should do what you want.\
    \ It will convert the frequency value to a note name based on the octave specified.\n\
    <code>\n/**\n * Gets the note name from frequency and octave.\n *\n * int  $frequency\n\
    \ * int  $octave\n * string The note name.\n */", "  $notes = [];\n  $note_length\
    \ = 4;\n  $offset = 0;\n  $note_end = 0;\n  do {\n    $note = substr($music_string,\
    \ $offset, $note_length);\n    $notes[] = $note;\n    $note_end += strlen($note);\n\
    \    $offset = $note_end;\n    $note_length = strlen($music_string) - ($note_end\
    \ + $note_length);\n  } while ($note_length > 0);\n  return $notes;\n}\n", " \
    \   $music_array = explode(\"\\n\", $music_string);\n    $music_array = $music_array[0];\n\
    \    $music_array = explode(\"\\t\", $music_array);\n\n    // We need to convert\
    \ every note to its binary representation\n    foreach ($music_array as $key =>\
    \ $value) {\n        $music_array[$key] = chr(bindec($value));\n    }\n\n    $music_array\
    \ = array_filter($music_array);\n\n    return $music_array;\n}\n", "    // Write\
    \ your code here\n\n    $music_array = explode(' ', $music_string);\n    $notes\
    \ = array();\n    foreach($music_array as $note) {\n        if($note == 'o') {\n\
    \            $notes[] = 4;\n        } elseif($note == 'o|') {\n            $notes[]\
    \ = 2;\n        } elseif($note == '.|') {\n            $notes[] = 1;\n       \
    \ }\n    }\n    return $notes;\n}\n</code>\n<|/ a dscore=0 tags=php |>\n<| c |>\n\
    I believe my solution is a bit more simple to implement and more easy to understand.\
    \ I am sure there are some aspects of your code that you do not understand. Feel\
    \ free to ask questions\n<|/ c |>\n<| a dscore=0 tags=php |>\nYou can use this\
    \ code as well.\n<code>\n<?php\n$string = 'o o| .| o| o| .| .| .| .| o o';\n$array\
    \ = explode(\" \", $string);\n\n$notes = array();\nforeach ($array as $value)\
    \ {\n    switch ($value) {\n        case 'o':\n            $notes[] = 4;\n   \
    \         break;\n        case 'o|':\n            $notes[] = 2;\n            break;\n\
    \        case '.|':\n            $notes[] = 1;\n            break;\n        default:\n\
    \            break;\n    }\n}\n\necho \"<pre>\";\nprint_r($notes);", "    $music_array\
    \ = explode(' ', $music_string);\n    $music_array = array_filter(array_map('trim',\
    \ $music_array));\n    $music_array = array_map('strtolower', $music_array);\n\
    \    $music_array = array_map('trim', $music_array);\n    $music_array[] = 'o';\n\
    \    return $music_array;\n}\n", "    $output = array();\n    $parts = explode(\"\
    \ \", $music_string);\n    foreach ($parts as $part) {\n        $part = explode(\"\
    |\", $part);\n        foreach ($part as $beats) {\n            if ($beats) {\n\
    \                $output[] = count($part) - 1;\n            }\n        }\n   \
    \ }\n    return $output;\n}", "  \n  // Your code starts here\n  $notes = array();\n\
    \  $tokens = preg_split(\"/\\s+/\", $music_string);\n  $last_note = \"\";\n  $count\
    \ = 0;\n  \n  foreach($tokens as $token) {\n    if ($token == \"o|\") {\n    \
    \  $notes[] = 4;\n      $count++;\n    } else if ($token == \"o\") {\n      $notes[]\
    \ = 4;\n      $count++;\n    } else if ($token == \".|\") {\n      $notes[] =\
    \ 1;\n      $count++;\n    } else if ($token == \"|\") {\n      $notes[] = 2;\n\
    \      $count++;\n    } else if ($token == \"|\") {\n      $notes[] = 2;\n   \
    \   $count++;\n    } else if ($token == \"|\") {\n      $notes[] = 1;\n      $count++;\n\
    \    } else if ($token == \"|\") {\n      $notes[] = 1;\n      $count++;\n   \
    \ } else if ($token == \"o|\") {\n      $notes[] = 4;\n      $count++;\n    }\n\
    \    $last_note = $token;\n  }\n  \n  // Your code ends here\n  return $notes;\n\
    }\n", "    $music_array = explode(' ', $music_string);\n    $result = array();\n\
    \    for ($i = 0; $i < count($music_array); ++$i) {\n        if ($music_array[$i]\
    \ === 'o') {\n            $result[] = 4;\n        } else if ($music_array[$i]\
    \ === 'o|') {\n            $result[] = 2;\n        } else if ($music_array[$i]\
    \ === '|.') {\n            $result[] = 1;\n        } else {\n            throw\
    \ new Exception('Unknown music symbol \"' . $music_array[$i] . '\"');\n      \
    \  }\n    }\n    return $result;\n}\n\n/**\n * Your task is to convert music notes\
    \ represented by integers returned by `parse_music` into actual notes.\n * Here\
    \ is a legend:\n * '4' - whole note\n * '2' - half note\n * '1' - quarter note\n\
    \ * '4' - whole note\n * '2' - half note\n * '1' - quarter note\n * '4' - whole\
    \ note\n * '2' - half note\n * '1' - quarter note\n * '4' - whole note\n * '2'\
    \ - half note\n * '1' - quarter note\n * >>> music_into_notes(parse_music('4 2\
    \ 1 4 2 1 4 2 1 4 2 1'))\n * 'C#|A#|Bb|Ab'\n */", "    $notes = explode(' ', $music_string);\n\
    \    $number_of_notes = count($notes);\n    $beats = [];\n\n    for ($i = 0; $i\
    \ < $number_of_notes; $i++) {\n        $note = $notes[$i];\n\n        if ($note\
    \ === 'o') {\n            $beats[$i] = 4;\n        } elseif ($note === 'o|') {\n\
    \            $beats[$i] = 2;\n        } elseif ($note === '.|') {\n          \
    \  $beats[$i] = 1;\n        }\n    }\n\n    return $beats;\n}\n</code>\n<|/ a\
    \ tags=php |>\n<| c |>\nI think `o|` and `o` have different musical sounds. Am\
    \ I correct?\n<|/ c |>\n<| c |>\nYes, you are correct. I just thought it would\
    \ be easy to figure out how to parse these musical notations\n<|/ c |>\n<| c |>\n\
    The code is great but unfortunately it returns only one array. Would you mind\
    \ if I could ask you a question, please? I wonder if there is any possibility\
    \ to optimize this algorithm? I've been thinking of adding one more condition\
    \ to check if first symbol in given string is a symbol of my choosing. If so,\
    \ I would simply break this loop and continue the loop. Is this a good idea to\
    \ do in such way?\n<|/ c |>\n<| c |>\nSure, you can ask about it. I think it would\
    \ be better to ask it as a separate question so people with similar problems can\
    \ find it too.\n<|/ c |>\n<| a tags=php dscore=0 |>\n<code>\n<?php", "  $music_array\
    \ = array();\n  $music_array = explode(\" \", $music_string);\n\n  for ($i = 0;\
    \ $i < count($music_array); $i++) {\n    if ($music_array[$i] === \"o\") {\n \
    \     $music_array[$i] = 4;\n    }\n    else if ($music_array[$i] == \"o|\") {\n\
    \      $music_array[$i] = 2;\n    }\n    else if ($music_array[$i] == \".|\")\
    \ {\n      $music_array[$i] = 1;\n    }\n  }\n  return $music_array;\n}", "  \
    \  $music_string = trim($music_string);\n    $notes = explode('|', $music_string);\n\
    \    $beats = array();\n    foreach ($notes as $note) {\n        $beats[] = array();\n\
    \        foreach (str_split($note) as $char) {\n            $beats[count($beats)\
    \ - 1][] = $char == 'o' ? 4 : $char == '.' ? 1 : 2;\n        }\n    }\n    return\
    \ $beats;\n}\n</code>\n<|/ a tags=algorithm,php dscore=4 |>\n<| c |>\nYour solution\
    \ is very clever, I had no idea exploding by | would be so simple. Also it's funny\
    \ that I was trying to write my own solution using a recursive function which\
    \ I thought could be too slow.\n<|/ c |>\n<| c |>\nThis is very clever but is\
    \ very slow in practice. I'm going to be using it for a PHP project in about 6\
    \ months so it's not an issue for me. But I'd love to see how you'd write this\
    \ using recursion if that's even possible.\n<|/ c |>\n<| c |>\nI don't think recursion\
    \ is really necessary for this. I edited my answer to show how to do it with recursion.\
    \ I'm sure it can be improved a bit more, but it's faster than my first attempt.\n\
    <|/ c |>\n<| c |>\nThanks so much for your effort. I was definitely looking for\
    \ an explanation of how to write this with recursion, I'm still wrapping my head\
    \ around it though. I appreciate your answer and thanks for the edit!\n<|/ c |>\n\
    <| c |>\nYou wouldn't happen to be able to write this in python, would you?\n\
    <|/ c |>\n<| a tags=algorithm,php |>\nI wrote a python solution that takes around\
    \ 2 secs to process 4MB file of midi notes using the script in this gist. It uses\
    \ the solution from Zsolt Szlagyi but uses recursion to calculate the number of\
    \ beats.\n<code>\nimport collections\n\ndef midi2beats(notes):\n    \"\"\"\n \
    \   Return a list of how many beats each note lasts based on the notes given.\n\
    \    :param notes: A list of notes in the format [note, octave]. e.g. ['C', 3]\n\
    \    :return: A list of integers representing the number of beats each note lasts.\n\
    \    \"\"\"\n    notes = collections.Counter(notes)\n    beats_per_note = collections.defaultdict(lambda:\
    \ 0)\n    for note in notes:\n        note, octave = note\n        octave = octave\
    \ - 1\n        beats_per_note[note] += octave * 12\n        for beat in range(",
  "    $music_array = explode(' ', $music_string);\n    $return = array();\n    $current_note\
    \ = -1;\n    $current_beat = -1;\n\n    for ($i = 0; $i < count($music_array);\
    \ $i++) {\n        $music_piece = trim($music_array[$i]);\n        if ($music_piece\
    \ == '.') {\n            $return[$current_beat] += 1;\n        } else {\n    \
    \        switch ($music_piece) {\n                case 'o':\n                \
    \    $current_note++;\n                    $current_beat += 4;\n             \
    \       break;\n                case 'o|':\n                    $current_note++;\n\
    \                    $current_beat += 2;\n                    break;\n       \
    \         default:\n                    echo \"unknown music piece: '{$music_piece}'\\\
    n\";\n                    return array();\n            }\n        }\n    }\n \
    \   return $return;\n}\n</code>\nAnd here is your solution:\n<code>\n<?php", " \
    \ $music = [];\n  for ($i = 0; $i < strlen($music_string); ++$i) {\n    switch\
    \ ($music_string[$i]) {\n      case 'o':\n        $music[] = 4;\n        break;\n\
    \      case 'o|':\n        $music[] = 2;\n        break;\n      case '.|':\n \
    \       $music[] = 1;\n        break;\n      default:\n        break;\n    }\n\
    \  }\n\n  return $music;\n}\n", "    $notes = explode(PHP_EOL, $music_string);\n\
    \    $notes_count = count($notes);\n    $last_note = null;\n    $notes_array =\
    \ array();\n    $notes_temp = 0;\n\n    for ($i=0; $i<$notes_count; $i++) {\n\
    \        // find note beginning\n        if (preg_match('/^\\D/s', $notes[$i]))\
    \ {\n            // handle single note\n            if ($last_note !== null) {\n\
    \                $notes_array[$last_note]++;\n            }\n            $last_note\
    \ = $notes[$i];\n            $notes_array[$notes_temp] = 1;\n            $notes_temp++;\n\
    \            continue;\n        }\n\n        // find note end\n        if (preg_match('/\\\
    D$/s', $notes[$i])) {\n            $last_note = $notes[$i];\n            $notes_array[$notes_temp-1]++;\n\
    \            $notes_temp++;\n            continue;\n        }\n    }\n\n    return\
    \ $notes_array;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
