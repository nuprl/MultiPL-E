name: HumanEval_161_solve
language: php
prompt: "<?php\n// You are given a string s.\n// if s[i] is a letter, reverse its\
  \ case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If\
  \ the string contains no letters, reverse the string.\n// The function should return\
  \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
  ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve($s) {\n"
tests: "function candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"AsDf\") !== \"aSdF\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"1234\") !== \"4321\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"ab\") !== \"AB\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"#a@C\") !== \"#A@c\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"#AsdfW^45\") !== \"#aSDFw^45\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"#6@2\") !== \"2@6#\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#$a^D\") !== \"\
  #$A^d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#ccc\"\
  ) !== \"#CCC\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    return preg_replace_callback('~(?<=^|[\\d])([a-z])|([A-Z])(?=[\\\
    d]|$)~', function ($m) {\n        return $m[1] ? 'A' : ($m[2] ? 'B' : 'c');\n\
    \    }, $s);\n}\n</code>\n<|/ a tags=string,php,ascii |>\n<| c |>\nIt should also\
    \ work for non-English languages. And it's O(1), which should be faster than using\
    \ regex.\n<|/ c |>\n<| c |>\n`'~(?<=^|[\\d])([a-z])|([A-Z])(?=[\\d]|$)~'` this\
    \ works for the English but fails for French. Can you please help on this?\n<|/\
    \ c |>\n<| c |>\n, please update your question with sample input, expected output\
    \ and actual output so I could reproduce your problem. Thanks!\n<|/ c |>\n<| a\
    \ |>\nYou can do this with some simple functions:\n<code>", "    $res = '#';\n\
    \    for($i=0; $i<strlen($s); $i++){\n        if(ctype_alpha($s[$i])) {\n    \
    \        $res = $s[$i] . $res;\n        }else{\n            $res = $s[$i] . $res;\n\
    \        }\n    }\n    return $res;\n}\n\n$result = solve($_GET['input']);\necho\
    \ \"$result\\n\";\n", "    $s = preg_replace('/[^a-zA-Z]+/', '', $s);\n    \n\
    \    return $s = strtr($s, array_flip(\n        array_flip(\n            str_split(\n\
    \                preg_replace('/[^A-Z]/', null, $s)\n            )\n        )\n\
    \    ));\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>", "\t$s = strtr($s, '1234567890',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');\n\treturn $s = preg_replace('/[^a-z]+/i',\
    \ '9', $s);\n}\n</code>\n<|/ a |>\n<| c |>\nI don't see how this is better than\
    \ OP's code. Can you please explain?\n<|/ c |>\n<| c |>\nThis code is not more\
    \ efficient than OP's code.\n<|/ c |>\n<| c |>\nSure it is, it's slower. And OP's\
    \ code doesn't care about upper/lower case and doesn't care about letters at the\
    \ beginning or middle of the string. While this one does. And it's not shorter\
    \ than OP's code, it's also slower.\n<|/ c |>\n<| c |>\nThe OP's code doesn't\
    \ care about letters beginning or ending the string. OP's code does, yours doesn't.\
    \ And, no, the OP's code doesn't care about letters within the string. Your code\
    \ does, so it's slower. That's not true at all. You are just misreading the code\
    \ of OP's code.\n<|/ c |>\n<| c |>\nSure, your code is more efficient. But it\
    \ won't be slower in most cases. And it's much more difficult to read and understand\
    \ for someone who doesn't know what the code is doing. And it's harder to maintain.\
    \ Also, it's harder to read and understand for someone who doesn't know what preg_replace\
    \ is doing, and to read for someone who doesn't understand how the code works.\
    \ And it's harder to understand for someone who doesn't know what strtr is doing.\n\
    <|/ c |>\n<| a |>\n<code>", "    $i = 0;\n    $reverse = \"\";\n    $len = strlen($s);\n\
    \    while($i < $len) {\n        $char = strtolower($s[$i]);\n        if(is_alpha($char))\
    \ {\n            $reverse .= strrev($char);\n        } else {\n            $reverse\
    \ .= $char;\n        }\n        $i++;\n    }\n    return $reverse;\n}", "    $result\
    \ = \"\";\n    $count = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (ctype_alpha(substr($s, $i, 1))) {\n            $result\
    \ = strtoupper(substr($s, $i, 1));\n            $result = $result . $result;\n\
    \            $result = strrev($result);\n            $count++;\n        } else\
    \ {\n            $result = $result . substr($s, $i, 1);\n        }\n    }\n  \
    \  if ($count == 1) {\n        return $result;\n    } else {\n        return $result\
    \ . strrev($result);\n    }\n}\n\n$result = solve($a);\necho \"The result is $result\
    \ <br/>\";", "    $result = '';\n    foreach (str_split($s) as $char) {\n    \
    \    if (is_string($char) && ctype_alpha($char)) {\n            $result .= $char;\n\
    \        } else {\n            $result .= strtoupper($char);\n        }\n    }\n\
    \    return strrev($result);\n}", "   $return = \"\";\n    foreach(str_split($s)\
    \ as $char){\n       $char = ($char >= 'A' && $char <= 'Z')? strtoupper($char)\
    \ : strtolower($char);\n       $return .= $char;\n    }\n    if($return == \"\"\
    ){\n       $return = strtolower($s);\n    }\n    return $return;\n}", "    $s\
    \ = str_replace(array(\"@\", \"$\"), \"\", $s);\n    $str = str_replace(array(\"\
    .\", \"_\", \"-\", \"_\", \".\"), \"\", $s);\n    \n    $s = strtolower($s);\n\
    \    $str = strtolower($str);\n    \n    $s = preg_replace('/[^A-Za-z0-9]/', \"\
    \", $s);\n    $str = preg_replace('/[^A-Za-z0-9]/', \"\", $str);\n    \n    if\
    \ ($str == \"\") {\n        $res = $s;\n    } else {\n        if ($str == \"A\"\
    \ || $str == \"a\")\n            $res = $s . strtoupper($str);\n        else\n\
    \            $res = $s . strtolower($str);\n    }\n    \n    return $res;\n}",
  "    return preg_replace_callback('/./', function($matches) {\n        return mb_strtolower($matches[0])\
    \ === mb_strtoupper($matches[0]) ? mb_strtolower($matches[0]) : mb_strtoupper($matches[0]);\n\
    \    }, $s);\n}\n\n</code>\n<|/ a tags=php,algorithm,string dscore=5 |>\n<| c\
    \ |>\nI love this solution, thank you. Easily extensible for other cases too.\n\
    <|/ c |>\n<| a dscore=5 |>\nIf your string contains at least one character, the\
    \ following code will work for you:\n<code>", "    \n    // your code goes here\n\
    \    if($s == \"\"){\n        return $s;\n    }\n    \n    $arr = str_split($s);\n\
    \    \n    foreach ($arr as $key => &$value) {\n        \n        if(ctype_alpha($value)){\n\
    \            \n            if(strlen($value) == 1){\n                $arr = str_split($value);\n\
    \                $value = $arr[0];\n            }\n            else{\n       \
    \         $arr = str_split($value);\n                $value = $arr[0].$arr[1];\n\
    \            }\n            \n        }\n    }\n    \n    return implode('', $arr);\n\
    }", "    return preg_replace('/./', '@', $s);\n}\n</code>\n<|/ a dscore=0 tags=php\
    \ |>\n<| a |>\n<code>\n$string = '#@A#';\n\n$array = explode('#', $string);\n\
    $string = '';\nforeach ($array as $value){\n    $string .= (preg_match('/[a-z]/i',\
    \ $value) ? strtoupper($value) : $value);\n}\necho $string; // prints ABC\n</code>\n\
    <|/ a dscore=0 tags=php |>\n<| a |>\n<code>", "  $newS = '';\n  $len = strlen($s);\n\
    \  for($i = 0; $i < $len; $i++) {\n    $letter = substr($s, $i, 1);\n    if(ctype_upper($letter))\
    \ {\n      $newS .= strtoupper($letter);\n    }\n    else {\n      $newS .= $letter;\n\
    \    }\n  }\n  if($newS === '') {\n    $newS = $s;\n  }\n  return $newS;\n}",
  "    $arr = [];\n    foreach (str_split($s) as $item) {\n        if (isset($arr[strtolower($item)]))\
    \ {\n            $item = strtoupper($item);\n        }\n        $arr[$item] =\
    \ $item;\n    }\n    return implode('', array_keys($arr));\n}\n</code>\n<|/ a\
    \ tags=php,algorithm,string dscore=0 |>\n<| a dscore=0 |>\n<code>", "  $s = str_replace(\"\
    #\",\"\",$s);\n  $s = str_replace(\"@\",\"\",$s);\n  $s = str_replace(\"a\",\"\
    \",$s);\n  $s = str_replace(\"c\",\"\",$s);\n  $s = str_replace(\"b\",\"\",$s);\n\
    \n  if (strlen($s)==0)\n    return $s;\n\n  for($i = 0; $i < strlen($s); $i++){\n\
    \    if ($s[$i] == \"a\" || $s[$i] == \"A\" || $s[$i] == \"b\" || $s[$i] == \"\
    B\" || $s[$i] == \"c\" || $s[$i] == \"C\") {\n      $char = $s[$i];\n      $low\
    \ = strtolower($char);\n      $up  = strtoupper($low);\n\n      if ($char == $low){\n\
    \          $s = str_replace($char,$up,$s);\n      } else if ($char == $up){\n\
    \          $s = str_replace($char,$low,$s);\n      }\n    }\n  }\n\n  return $s;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks, this actually works. I knew I was missing\
    \ something so simple.\n<|/ c |>\n<| a tags=php dscore=2 |>\nThe PHP function\
    \ strtoupper and strtolower take a single parameter:\nhttp://us2.php.net/manual/en/function.strtoupper.php\n\
    <|/ a |>\n<| c |>\nThanks, I didn't know that one.\n<|/ c |>\n<| a tags=php dscore=2\
    \ |>\nTry this\n<code>", "    $s = strtolower($s);\n    \n    if (preg_match('/[^a-zA-Z]/',\
    \ $s)) $s = strrev($s);\n    \n    return $s;\n}", "    if (preg_match('/^#[a-z]+$/i',\
    \ $s)) {\n        return preg_replace('/[a-z]+/i', \n            function ($m)\
    \ { return preg_replace('/./i', \n                function ($n) { return strtoupper($n);\
    \ }, $m); }, $s);\n    }\n    return preg_replace('/[a-z]+/i', \n        function\
    \ ($m) { return preg_replace('/./i', \n            function ($n) { return strtolower($n);\
    \ }, $m); }, $s);\n}\n</code>\nAnd here's a non-recursive approach using array_walk():\n\
    <code>", "    $str = \"\";\n    $len = strlen($s);\n    $str .= strtolower($s[0]);\n\
    \    for ($i = 1; $i < $len; $i++) {\n        if (ctype_alpha($s[$i])) {\n   \
    \         $str .= strtoupper($s[$i]);\n        } else {\n            $str .= $s[$i];\n\
    \        }\n    }\n    return $str;\n}\n</code>\n<|/ a tags=php,regex |>\n<| a\
    \ tags=php,regex |>\nThe below code will solve the problem using Regex\n<code>\n\
    <?php\n$str = \"#a@C\";\n$str = strtr($str, array('@' => '@', 'a' => 'A'));\n\
    echo $str;\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=php,regex |>\nThe question\
    \ was already answered but i thought to share my method which might help some\
    \ one in future.\n<code>\n$str = \"#a@C\";\n$str = preg_replace('/[A-Za-z]+/i',\
    \ create_function('$matches', 'return strtoupper($matches[0]);'), $str);\necho\
    \ $str; //#A@c\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is a solution using\
    \ strtr:\n<code>\n<?php\n$str = '#a@C';\n$newStr = strtr($str, array('@' => '@',\
    \ 'a' => 'A'));\nvar_dump($newStr);\n</code>\nOutput\n<code>\nstring(5) \"#A@c\"\
    \n</code>\nhttp://php.net/manual/en/function.strtr.php\n<|/ a tags=php,regex |>\n\
    <| a dscore=0 |>\nTry this:\n<code>\n<?php\n\n$string = '#a@C';\n", "    \n  \
    \  return $s;\n    \n}\n", "    $result = \"\";\n    for ($i = 0; $i < strlen($s);\
    \ $i++){\n        $char = strtolower($s[$i]);\n        if (ctype_alpha($char)){\n\
    \            $result = $char . $result;\n        } else {\n            $result\
    \ = $result . $char;\n        }\n    }\n    return $result;\n}", "    $arr = str_split($s);\n\
    \    $result = \"\";\n    foreach ($arr as $k => $v) {\n        if (!is_numeric($v))\
    \ {\n            $result .= $v;\n        } else {\n            $result .= $v <=\
    \ 26 ?\n                chr(ord('A') + ($v - 1)) . \n                chr(ord('A')\
    \ + ($v - 1)) :\n                chr(($v - 26) + ord('A')) . \n              \
    \  chr(($v - 26) + ord('A'));\n        }\n    }\n    return $result;\n}\n", " \
    \   $arr=str_split($s);\n    foreach($arr as $key=>$val){\n        if(ctype_alpha($val)){\n\
    \            $arr[$key]= strtoupper(substr($val,1,strlen($val)-1));\n        }elseif(ctype_alpha($val)){\n\
    \            $arr[$key]= strtolower(substr($val,1,strlen($val)-1));\n        }\n\
    \    }\n    return implode('', $arr);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    A bit late to the party, but thank you for pointing me in the right direction.\
    \ I used your answer to write my solution (using strtr for simplicity) and it\
    \ works well (though I was looking to change case to UPPER first and LOWER second\
    \ in my case).\n<|/ c |>\n<| c |>\nNo problem. Happy to help :)\n<|/ c |>\n<|\
    \ a dscore=3 tags=php |>\nI did it like this:\n<code>", "    $s = strtolower($s);\n\
    \    $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(\"@\", \"#\", $s);\n\
    \    $s = str_replace(\"$\", \"$\", $s);\n    $s = str_replace(\"^\", \"^\", $s);\n\
    \    $s = str_replace(\"_\", \"_\", $s);\n    $s = str_replace(\"&\", \"&\", $s);\n\
    \    $s = str_replace(\"*\", \"*\", $s);\n    $s = str_replace(\"%\", \"%\", $s);\n\
    \    $s = str_replace(\"^\", \"^\", $s);\n    $s = str_replace(\"&\", \"&\", $s);\n\
    \    $s = str_replace(\"(\", \"(\", $s);\n    $s = str_replace(\")\", \")\", $s);\n\
    \    $s = str_replace(\"]\", \"]\", $s);\n    $s = str_replace(\"[\", \"[\", $s);\n\
    \    $s = str_replace(\")\", \")\", $s);\n    $s = str_replace(\"}\", \"}\", $s);\n\
    \    $s = str_replace(\"{\", \"{\", $s);\n    $s = str_replace(\"]\", \"]\", $s);\n\
    \    $s = str_replace(\"[\", \"[\", $s);\n    $s = str_replace(\"(\", \"(\", $s);\n\
    \    $s = str_replace(\")\", \")\", $s);\n    $s = str_replace(\"|\", \"|\", $s);\n\
    \    $s = str_replace(\",\", \",\", $s);\n    $s = str_replace(\";\", \";\", $s);\n\
    \    $s = str_replace(\"?\", \"?\", $s);\n    $s = str_replace(\":\", \":\", $s);\n\
    \    $s = str_replace(\"!\", \"!\", $s);\n    $s = str_replace(\"$\", \"$\", $s);\n\
    \    $s = str_replace(\"%\", \"%\", $s);\n    $s = str_replace(\"*\", \"*\", $s);\n\
    \    $s = str_replace(\"&\", \"&\", $s);\n    $s = str_replace(\"(\", \"(\", $s);\n\
    \    $s = str_replace(\")\", \")\", $s);\n    $s = str_replace(\"|\", \"|\", $s);\n\
    \    $s = str_replace(\",\", \",\", $s);\n    $s = str_replace(\";\", \";\", $s);\n\
    \    $s = str_replace(\"?\", \"?\", $s);\n    $s = str_replace(\":\", \":\", $s);\n\
    \    $s = str_replace(\"!\", \"!\", $s);\n    $s = str_replace(\"$\", \"$\", $s);\n\
    \    $s = str_replace(\"%\", \"%\", $s);\n    $s = str_replace(\"*\", \"*\", $s);\n\
    \    $s = str_replace(\"&\", \"&\", $s);\n    $s = ", "    $result = '';\n   \
    \ $chars = str_split($s);\n    foreach ($chars as $c) {\n        if (($i = strpos($c,\
    \ chr(0), $c)) !== false) {\n            $chars[$i] = strrev($chars[$i]);\n  \
    \      }\n    }\n    return implode('', $chars);\n}\n</code>\n<|/ a tags=php,string,reverse\
    \ |>\n<| a tags=php,string,reverse |>\n<code>\n$string = 'abccba';\n$reversed\
    \ =  strrev($string);\n\necho $reversed;\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    Please add some explanation to your answer. Code-only answers do very little to\
    \ educate future SO readers.\n<|/ c |>\n<| a tags=php,string,reverse |>\nFor those\
    \ of you who need to reverse string without using inbuilt functions\n<code>\n\
    $string = 'abccba';\n$reversed = str_split(strrev($string));\necho implode('',\
    \ $reversed);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nI wrote a function\
    \ which reverses a string using recursion:\n<code>", "    $sArr = str_split($s);\n\
    \    $res = \"\";\n    foreach($sArr as $key => $val) {\n        if(ctype_alpha($val))\
    \ {\n            $res = $val . $res;\n        } else {\n            $res = $res\
    \ . $val;\n        }\n    }\n    return $res;\n}\n</code>\n<|/ a tags=php,algorithm,arrays\
    \ |>\n<| c |>\nHmm, my algorithm is O(n^2) but it could also be O(n).\n<|/ c |>\n\
    <| c |>\nYour algorithm is O(n) but your solution using PHP is O(n^2) because\
    \ PHP's `str_split()` function uses `strtok()`.\n<|/ c |>\n<| c |>\nYeah, I realized\
    \ that after posting. Thanks for pointing it out.\n<|/ c |>\n<| a tags=php,algorithm,arrays\
    \ |>\nHere's a solution that uses two arrays and only requires the string to be\
    \ one char long (no empty string or any extra chars). \n<code>", "    return strtr($s,\
    \ array_flip(array_filter(str_split('\xC0\xC8\xCC\xD2\xD9\xC5'))));\n}", "   \
    \ $s = preg_replace('/[^a-z]/', '', $s);\n    return strtoupper($s) !== $s ?\n\
    \        strrev(strtr(strrev($s), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'klmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'))\
    \ :\n        strrev($s);\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThanks for this,\
    \ but for me, it is always returning `ABCDEFGHIJKLMNOPQRSTUVWXYZ` instead of `klmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`.\n\
    <|/ c |>\n<| c |>\nI tested it myself and it works fine. Are you sure you are\
    \ using correct string? Can you post your code as another question?\n<|/ c |>\n\
    <| c |>\nI'm sorry. I was testing your code with input: \"abcd\", which should\
    \ return \"ABCD\", but it actually returned \"ABC\", which I then tested for myself\
    \ on php fiddle here: http://phpfiddle.org/main/code/uhq-h9a\n<|/ c |>\n<| c |>\n\
    It's because you have incorrect `strrev` order. I updated my post and now it works\
    \ as expected. Test it on live demo https://eval.in/713122\n<|/ c |>\n<| c |>\n\
    Thank you! This was a great solution. Although I ended up using PHP's built in\
    \ `str_ireplace()` function.\n<|/ c |>\n<| a tags=php,string,reverse,uppercase\
    \ |>\nFor PHP 7\n<code>\n<?php", "  $s = strtolower($s);\n  if (preg_match('/[a-z]/i',\
    \ $s))\n    return strtr($s, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz');\n\
    \  return strtr($s, 'aA', 'cC');\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nA simpler\
    \ solution would be to just reverse the string and return the string as a result.\
    \ As you know, str_reverse will just reverse the string, not convert uppercase\
    \ to lowercase and vice versa.\n<code>", "    $str = '';\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            if ($i\
    \ > 0)\n                $str .= strtoupper($s[$i - 1]);\n            $str .= strtolower($s[$i]);\n\
    \        } else {\n            $str .= $s[$i];\n        }\n    }\n    return strlen($str)\
    \ ? $str : '';\n}\n", "    if(empty($s)) {\n        return $s;\n    }\n    $ret\
    \ = '';\n    for($i=0; $i<strlen($s); $i++) {\n        $char = $s[$i];\n     \
    \   switch($char) {\n            case 'a':\n            case 'b':\n          \
    \  case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n\
    \            case 'g':\n            case 'h':\n            case 'i':\n       \
    \     case 'j':\n            case 'k':\n            case 'l':\n            case\
    \ 'm':\n            case 'n':\n            case 'o':\n            case 'p':\n\
    \            case 'q':\n            case 'r':\n            case 's':\n       \
    \     case 't':\n            case 'u':\n            case 'v':\n            case\
    \ 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n\
    \                $char = $char.strtoupper($char);\n                break;\n  \
    \          case 'A':\n            case 'B':\n            case 'C':\n         \
    \   case 'D':\n            case 'E':\n            case 'F':\n            case\
    \ 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n\
    \            case 'K':\n            case 'L':\n            case 'M':\n       \
    \     case 'N':\n            case 'O':\n            case 'P':\n            case\
    \ 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n\
    \            case 'U':\n            case 'V':\n            case 'W':\n       \
    \     case 'X':\n            case 'Y':\n            case 'Z':\n              \
    \  $char = $char.strtolower($char);\n                break;\n            default:\n\
    \                $char = $char;\n                break;\n        }\n        $ret\
    \ .= $char;\n    }\n    return $ret;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    The algorithm is quite easy. You are simply looping from the last character in\
    \ the string, to the first one and checking for each character the following one.\
    \ \nIf the following character is not in your list, you can just ignore it and\
    \ keep going on. Otherwise, you can add it to the list. \nWhen you reach the end\
    \ of the string, you will have the list of your characters.\nHere's a javascript\
    \ implementation of what I've just said:\n<code>\nvar str = \"a1b2c3d4e5\";\n\
    var chars = []; \n\nfor(var i = str.length - 1; i > 0; i--){\n    var char = str.charAt(i);\n\
    \    var nextChar = str.charAt(i+1);\n\n    if(!chars.includes(char)){\n     \
    \   chars.push(char);\n    }\n    if(nextChar != char){\n        chars.push(char);\n\
    \    }\n}\n\nconsole.log(chars.reverse());\n</code>\n<|/ a tags=php,string,algorithm\
    \ |>\n<| a |>\nThe answer to this question is quite simple:\n<code>\n$string =\
    \ implode('', array_reverse(str_replace", "    return preg_replace('/[^a-zA-Z]+/',\
    \ '',\n        preg_replace('/[a-z]/', function($m){\n            $i = ord($m)\
    \ - ord('a') + 1;\n            return chr($i % 26 + ord('a')) . chr($i / 26);\n\
    \        }, $s)\n    );\n}", "    $string = $s;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $char = strtolower($string[$i]);\n        if (ctype_alpha($char))\
    \ {\n            $string = str_replace($char, '', strtolower($string));\n    \
    \    }\n        if (ctype_alpha($char)) {\n            $string = str_replace($char,\
    \ '', strtoupper($string));\n        }\n    }\n    return $string;\n}", "  if(strlen($s)<=1){\n\
    \    return $s;\n  }\n  if(!ctype_alpha($s[0])){\n    return $s;\n  }\n  $letters=array();\n\
    \  $chars=str_split($s);\n  foreach($chars as $char){\n    if(ctype_alpha($char)){\n\
    \      $letters[]=strtoupper($char);\n    }else{\n      $letters[]=$char;\n  \
    \  }\n  }\n  return implode($letters);\n}\n$s=file_get_contents(\"https://gist.githubusercontent.com/willdanielsen/7896fd059c5f9fde2dae6/raw/7cb5bb4cd6ba4bae50ff84553d8cbc394deb57b/input.txt\"\
    );\n$s=rtrim($s);\necho solve($s).\"\\n\";", "    $length = strlen($s);\n    $lowerCase\
    \ = 0;\n    $upperCase = 0;\n\n    $string = str_replace(array('@', '#'), array('%',\
    \ '*'), $s);\n    $string = strtolower($string);\n\n    $stringCount = str_split($string);\n\
    \n    foreach($stringCount as $key => $value) {\n        if($key > 0 && $value\
    \ < $length - 1) {\n            if($string[$key - 1] === $string[$key] && $string[$key]\
    \ === $string[$key + 1]) {\n                $upperCase++;\n            }\n   \
    \     }\n        if($key > 0 && $value === $length - 1 && $string[$key - 1] ===\
    \ $string[$key]) {\n            $lowerCase++;\n        }\n    }\n\n    if($upperCase\
    \ == 0 && $lowerCase === 0) {\n        $final = strrev($s);\n    }\n    elseif($upperCase\
    \ > 0 && $lowerCase === 0) {\n        $final = strrev($string);\n    }\n    elseif($upperCase\
    \ > 0 && $lowerCase > 0 && $upperCase == $lowerCase) {\n        $final = strrev($string);\n\
    \    }\n    else {\n        $final = $s;\n    }\n\n    return $final;\n}", " \
    \   $res = \"\";\n    for ($i=0; $i<strlen($s); $i++) {\n        $c = $s[$i];\n\
    \        if (ctype_alpha($c)) {\n            $lower = ctype_lower($c) ? $c : mb_strtolower($c,\
    \ \"UTF-8\");\n            $upper = ctype_upper($c) ? $c : mb_strtoupper($c, \"\
    UTF-8\");\n            $char = $lower . $upper;\n        } else {\n          \
    \  $char = $c;\n        }\n        $res .= $char;\n    }\n    return $res;\n}\n\
    </code>\n<|/ a tags=string,php |>\n<| c |>\nThis seems like a fine solution, but\
    \ I'm curious, if this is using functions or something else, how does it actually\
    \ work? Does it just take advantage of PHP's \"magic functions\" and just make\
    \ it work?\n<|/ c |>\n<| c |>\n, yes, it's using only PHP's functions. I tried\
    \ to explain how it works in the comments.\n<|/ c |>\n<| c |>\nI understand that\
    \ this code works perfectly, but can you break it down into pieces for me? I'm\
    \ not familiar with PHP's magic functions.\n<|/ c |>\n<| a tags=string,php |>\n\
    <code>\n$str = \"abbccd\";\n$result = \"\";\n$length = strlen($str);\nfor ($i\
    \ = 0; $i < $length; $i++) {\n    $c = $str[$i];\n    if (ctype_upper($c)) $result\
    \ .= strtoupper($c);\n    else if (ctype_lower($c)) $result .= strtolower($c);\n\
    \    else $result .= $c;\n}\necho $result;\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    +1 for the simplicity of the code. I'd have used `ctype_` instead of `in_`, but\
    \ for readability I'd suggest using `ctype_` instead of `in_`; `ctype_` returns\
    \ `true` or `false`.\n<|/ c |>\n<| c |>\nI agree with you. I just find this style\
    \ more readable.\n<|/ c |>\n<| c |>\n`ctype_` also returns `true` or `false`,\
    \ so I don't think you need the additional `if` statement.\n<|/ c |>\n<| c |>\n\
    , what do you mean by \"additional `if` statement\"?\n<|/ c |>\n<| c |>\nI meant\
    \ `ctype_` returns `true` or `false`, not `in_`.\n<|/ c |>\n<| a dscore", "  \
    \  if(!is_string($s)) return false;\n    \n    for($i=0;$i<strlen($s);$i++)\n\
    \    {\n        if(isset($s[$i]) && isset($s[$i-1]) && isset($s[$i+1]))\n    \
    \    {\n            if($s[$i]>=97 && $s[$i]<=122)\n            {\n           \
    \     $s[$i] = chr($s[$i]-32);\n                $s[$i-1] = chr($s[$i-1]-32);\n\
    \                $s[$i+1] = chr($s[$i+1]-32);\n            }\n        }\n    }\n\
    \    return $s;\n}\n</code>\n<|/ a tags=php,string,case-sensitive |>\n<| a dscore=2\
    \ |>\n<code>", "    $a = \"abcdefghijklmnopqrstuvwxyz\";\n    $b = \"\";\n   \
    \ for($i=0;$i<strlen($s);$i++){\n        $b = ($s[$i] == $a[$i]) ? str_replace(str_split($a[$i]),\
    \ $a[$i].$a[$i], $b) : str_replace(str_split($a[$i]), $a[$i], $b);\n    }\n  \
    \  return $b;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,php |>\n<| c |>\nI suggest\
    \ adding some explanation to your answer.\n<|/ c |>\n<| a tags=algorithm,php |>\n\
    You could always use str_split:\n<code>\n$string = \"hello world\";\n$string_reversed\
    \ = str_split($string);\n$string_reversed_reversed = array_reverse($string_reversed);\n\
    $string_reversed_reversed = implode($string_reversed_reversed);\n$string = implode($string_reversed_reversed);\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    $s = strtolower($s);\n    $s\
    \ = preg_replace('/[^a-z]/', '', $s);\n    $s = strrev($s);\n    if ($s == '')\
    \ {\n        $s = strrev($s);\n    }\n    return $s;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis works but it's missing a final `strrev()`.\n<|/ c |>\n<| c |>\nThanks\
    \ for that, just fixed it :)\n<|/ c |>\n<| c |>\nYou're very welcome. Please accept\
    \ the answer by clicking the tick next to it.\n<|/ c |>\n<| a |>\n<code>", " \
    \   $new_s = '';\n    for($i = 0; $i < strlen($s); $i++) {\n        if(ctype_alpha($s[$i]))\
    \ { //it's a letter\n            $new_s .= strtoupper($s[$i]);\n            $new_s\
    \ .= strtolower($s[$i]); //make it lowercase to lower case\n        } else {\n\
    \            $new_s .= $s[$i];\n        }\n    }\n    return $new_s;\n}", "  $new_s\
    \ = \"\";\n  foreach (str_split($s) as $letter) {\n    if (!ctype_alnum($letter))\
    \ {\n      $letter = strtoupper($letter);\n    } else {\n      $letter = strtolower($letter);\n\
    \    }\n    $new_s .= $letter;\n  }\n  if (strlen($new_s) === 0) {\n    return\
    \ $s;\n  } else {\n    return $new_s;\n  }\n}\n</code>\n<|/ a dscore=3 tags=string,php,arrays,reverse\
    \ |>\n<| c |>\nthank you. but i got this error \"Notice: Array to string conversion\
    \ in /home/a3946310/public_html/reversal/index.php on line 11\". this is my code\
    \ $reverse = array_reverse($input);\n<|/ c |>\n<| c |>\nSorry, there was an error\
    \ in mine. I'm going to update my answer to reflect that.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\necho strrev(\"string\");\n</code>\nWill output \"gnirtsmngt\" for\
    \ example\n<|/ a tags=string,php,arrays,reverse |>\n<| c |>\nthank you. but i\
    \ got this error \"Notice: Array to string conversion in /home/a3946310/public_html/reversal/index.php\
    \ on line 11\". this is my code $reverse = array_reverse($input);\n<|/ c |>\n\
    <| c |>\nYou just need to do one more thing... `echo $reverse;` instead of `echo\
    \ $string;`\n<|/ c |>\n<| c |>\nAs an aside you could also do this: `echo implode(array_reverse(str_split($string)));`\
    \ which would output `gnirtsmngt` as well.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    <?php \n$string = \"hello\";\n$reversed = strrev($string);\necho $reversed;",
  "    // ++$s is because we are using recursion.\n    // $s is a local variable,\
    \ so if we don't use ++$s we would change its value every time.\n    // $s = ++$s;\n\
    \    \n    if (strlen($s) == 0){\n        echo $s;\n    }\n    if (ctype_alpha($s[0])){\n\
    \        $letters = str_split($s[0]);\n        $letters = array_map('strtoupper',\
    \ $letters);\n    }\n    else{\n        $letters = $s;\n    }\n    \n    $s =\
    \ \"\";\n    foreach ($letters as $letter){\n        $s += $letter;\n    }\n \
    \   \n    echo $s;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>",
  "    $arr = [];\n    foreach(str_split($s) as $char) {\n        $arr[] = ctype_upper($char)\
    \ ? strtoupper($char) : strtolower($char);\n    }\n    return implode('', $arr);\n\
    }\n</code>\n<|/ a tags=string,php,reverse |>\n<| a dscore=0 |>\n<code>\n$input\
    \ = \"This is a test\";\n$output = \"\";\nfor ($i = 0; $i < strlen($input); $i++)\
    \ {\n$output .= ($input[$i] >= \"A\" && $input[$i] <= \"Z\") ? chr(($input[$i]\
    \ - \"A\" + 26)) : chr($input[$i]);\n}\necho $output;\n</code>\n<|/ a tags=string,php,reverse\
    \ |>\n<| c |>\nYou should explain your answer\n<|/ c |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding how and/or why\
    \ it solves the problem would improve the answer's long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php", "    $array = str_split($s);\n    $reversed\
    \ = 0;\n    $reversed_string = '';\n    foreach ($array as $key => $value) {\n\
    \        if (ctype_alpha($value)) {\n            $reversed = 1;\n            $value\
    \ = strtoupper($value);\n        } else {\n            $reversed = 0;\n      \
    \  }\n        if ($reversed == 1) {\n            $reversed_string .= $value;\n\
    \        } else {\n            $reversed_string .= $value;\n        }\n    }\n\
    \    return $reversed_string;\n}", "  $s = strtolower($s);\n  $arr = str_split($s);\n\
    \  foreach($arr as $key => $val) {\n    if(ctype_alpha($val)) {\n      $arr[$key]\
    \ = strtoupper($val);\n    }\n  }\n  return implode('', $arr);\n}\n</code>\n<|/\
    \ a tags=php,string,arrays,reverse |>\n<| c |>\nI did it using for loop and reverse\
    \ function but i got this error:  Fatal error: Cannot redeclare solve() (previously\
    \ declared in E:\\Xampp\\htdocs\\test\\index.php:9) in E:\\Xampp\\htdocs\\test\\\
    index.php on line 9\n<|/ c |>\n<| c |>\nYou have already declared `function solve($s)`\
    \ in your code. Just change your function name to avoid the redeclaration.\n<|/\
    \ c |>\n<| c |>\nSorry, I still don't understand. I have no idea how I can change\
    \ function name to avoid redeclaration?\n<|/ c |>\n<| c |>\nYou can name your\
    \ function as you want. I just named it like \"solve()\". Just try your function\
    \ without declaring it.\n<|/ c |>\n<| c |>\nI changed function name but still\
    \ same problem appeared.\n<|/ c |>\n<| a tags=php,string,arrays,reverse dscore=2\
    \ |>\nI suggest you to start by rewriting the function to be more generic as opposed\
    \ to only dealing with strings (and other primitives)\n<code>", "    $len = strlen($s);\n\
    \    for($i = 0; $i < $len; $i++) {\n        $letter = strtolower($s[$i]);\n \
    \       if(ctype_alpha($letter)) {\n            $letter = ucfirst($letter);\n\
    \        }\n        else {\n            $letter = $letter;\n        }\n      \
    \  $s[$i] = $letter;\n    }\n    return implode('', $s);\n}\n\n$testcases = array(\"\
    1234\", \"ab\", \"#a@C\");\nforeach ($testcases as $s) {\n    $result = solve($s);\n\
    \    echo $s . ' -> ' . $result . \"\\r\\n\";\n    if ($result !== $s) {\n   \
    \     echo \"Failed!\\r\\n\";\n        echo 'EXPECTED: ' . $s . \"\\r\\n\";\n\
    \        echo 'RESULT: ' . $result . \"\\r\\n\";\n    }\n}", "\t$arr = str_split($s);\n\
    \tforeach ($arr as &$v) {\n\t\tif (!is_string($v)) {\n\t\t\t$v = 0;\n\t\t}\n\t\
    \telse {\n\t\t\t$v = preg_replace(\"/[^a-z]/\", \"\", $v);\n\t\t}\n\t}\n\tunset($v);\n\
    \t$res = \"\";\n\tforeach ($arr as $v) {\n\t\tif (!is_string($v)) {\n\t\t\t$v\
    \ = \"\";\n\t\t}\n\t\telse {\n\t\t\t$v = \"a\" . $v;\n\t\t}\n\t\t$res .= $v;\n\
    \t}\n\treturn $res;\n}\n", "  if (strlen($s)==0) return $s;\n  $ans=\"\";\n  for\
    \ ($i=0,$j=strlen($s)-1;$i>-1;$i=$j+1,$j=$i+1) {\n    $res=$s[$i];\n    $flag=false;\n\
    \    if ($res!='@') $res=strtoupper($res);\n    for ($k=0;$k<strlen($s);$k++)\
    \ {\n      if ($k==$i) continue;\n      if ($res==$s[$k]) $flag=true;\n    }\n\
    \    if (!$flag) {\n      $ans+=strrev($res);\n    }\n  }\n  return $ans;\n}",
  "    $len = strlen($s);\n    $result = \"\";\n    for($i = 0; $i < $len; $i++) {\n\
    \        if (ctype_alpha($s[$i])) $result = str_ireplace($s[$i], $s[$i], $result);\n\
    \        else $result = $s[$i];\n    }\n    return $result;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nIt works. Great. Would you be kind enough to explain how it works?\n\
    <|/ c |>\n<| c |>\nI tried to explain as much as I could. Please see the answer\
    \ and let me know if you have any questions.\n<|/ c |>\n<| c |>\n, how did you\
    \ do that? I pressed the 'edit' button and there was no change to the post?\n\
    <|/ c |>\n<| c |>\n, You can't see my edit because I've posted my answer before\
    \ I edited yours. But if you click on the \"edited\" link next to my answer, you\
    \ can see my answer.\n<|/ c |>\n<| a tags=php,string dscore=2 |>\n<code>\n<?php\n\
    $str = 'abcedabb';\n$rev = strrev($str);\necho strrev($rev, 2);", "    return\
    \ solveHelper($s, '');\n}\n", "    $array = str_split($s);\n    $str = \"\";\n\
    \    foreach ($array as $a) {\n        if (ctype_alpha($a)) {\n            $str\
    \ = str_ireplace($a, strtoupper($a), $str);\n            $str = str_ireplace($a,\
    \ strtolower($a), $str);\n        } else {\n            $str .= $a;\n        }\n\
    \    }\n    return implode($str);\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php,algorithm\
    \ |>\n<code>\n<?php\n$a=\"#a@C\";\necho implode(array_map(function($v){return\
    \ ctype_alpha($v) ? $v : strtoupper($v);},$a));\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI thought of this too, but what about this case: `#a@C`\n<|/ c |>\n<|\
    \ c |>\nIt will print `A@C`, OP wants `A@C`\n<|/ c |>\n<| a tags=arrays,php,algorithm\
    \ |>\nI used strtolower and strtoupper to make it works with special characters\
    \ like '\xF1', also with numbers. \n<code>\n$input = '#a@C';\n$array   = str_split($input);\n\
    \n$output = '';\nforeach ($array as $k => $v) {\n    if (ctype_alpha($v)) {\n\
    \        $output = str_replace($v, strtoupper($v), $output);\n        $output\
    \ = str_replace($v, strtolower($v), $output);\n    } else {\n        $output .=\
    \ $v;\n    }\n}\n\nvar_dump($output);\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php,algorithm\
    \ |>\n<code>\n$a = \"#a@C\";\n$output = \"\";\n$array = str_split($a);\nforeach\
    \ ($array as $key => $val) {\n    if(ctype_alpha($val)) {\n        $output .=\
    \ strtoupper($val);\n    } else {\n        $output .= $val;\n    }\n}\necho $output;\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nOP wants to lowercase and uppercase letters\
    \ separately\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$string = str_split('#a@C');\n\
    echo array_reduce($string, function($carry, $character) {\n    return $carry .=\
    \ ctype_alpha($character) ? strtoupper($character) : $character;\n});\n</code>\n\
    <|/ a tag", "    $s = str_split($s);\n    $result = [];\n    foreach ($s as $key\
    \ => $val) {\n        if (ctype_alpha($val)) {\n            $result = str_split(array_map('strtolower',\
    \ $result));\n            $result[$key] = $val;\n        } else {\n          \
    \  $result[$key] = $val;\n        }\n    }\n    return implode('', $result);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 |>\nA simple way of doing this is to use the\
    \ strtr function and simply map the upper case letter with its lower case version\
    \ in an array as the following:\n<code>\n<?php", "    $s = preg_replace('/[^a-z]/',\
    \ '',$s);\n    $s = strtolower($s);\n    \n    if(strlen($s) == 0) {\n       \
    \ return $s;\n    }\n    \n    for($i = 0; $i < strlen($s); $i++){\n        if($s[i]\
    \ >= 'a' && $s[i] <= 'z' || $s[i] >= 'A' && $s[i] <= 'Z') {\n            $s[i]\
    \ = chr((ord($s[i]) - ord('a') + 26) % 26 + ord('a'));\n        }\n    }\n   \
    \ return implode('', $s);\n}\n</code>\n<|/ a tags=php dscore=2 |>\n<| c |>\nI\
    \ like your solution :)\n<|/ c |>\n<| c |>\nI agree that this is not an efficient\
    \ solution, but it is definitely the most intuitive solution.\n<|/ c |>\n<| a\
    \ |>\n<code>", "    $chars = str_split($s);\n    $result = \"\";\n    for($i=0;$i<count($chars);$i++)\
    \ {\n        if(ctype_alpha($chars[$i])) {\n            if(!ctype_upper($chars[$i]))\
    \ {\n                $chars[$i] = strtolower($chars[$i]);\n            } else\
    \ if(!ctype_lower($chars[$i])) {\n                $chars[$i] = strtoupper($chars[$i]);\n\
    \            }\n        } else if(ctype_digit($chars[$i])) {\n            $chars[$i]\
    \ = strtolower($chars[$i]);\n        }\n    }\n    return implode($chars);\n}\n\
    </code>\n<|/ a tags=php,function,string |>\n<| c |>\nThis works for the sample\
    \ test cases, but fails for \"abc123\" where the expected result is \"321bc\"\
    .\n<|/ c |>\n<| c |>\nThanks. You are right. I've updated my answer (the for loop\
    \ should start from 0, not the 1).\n<|/ c |>\n<| c |>\nThe `if` statements in\
    \ your `for` loop can be replaced with just `$chars[$i] = ctype_upper($chars[$i])\
    \ ? strtoupper($chars[$i]) : ctype_lower($chars[$i]) ? strtolower($chars[$i])\
    \ : $chars[$i];`\n<|/ c |>\n<| c |>\n: thanks for the solution, but please see\
    \ the comment in his post above.\n<|/ c |>\n<| a tags=php,function,string dscore=0\
    \ |>\nHere is an alternative solution using the preg_replace_callback() function:\n\
    <code>", "    // Your code here\n    if (strlen($s) == 0) return $s;\n    $s =\
    \ strtolower($s);\n    $result = '';\n    $length = strlen($s);\n    for ($i =\
    \ 0; $i < $length; $i++) {\n        if (ctype_alpha($s[$i])) {\n            $result\
    \ .= $s[$i];\n        } else {\n            $result .= strtoupper($s[$i]);\n \
    \       }\n    }\n    return $result;\n}\n\necho \"$result\";", "    \n    $s\
    \ = str_split($s);\n    \n    if (count($s) == 0) {\n        return $s;\n    }\n\
    \    \n    $first = array_shift($s);\n    \n    if (ctype_alpha($first)) {\n \
    \       $upper = strtoupper($first);\n        $s = array_merge([$upper], $s);\n\
    \    } else {\n        $lower = strtolower($first);\n        $s = array_merge([$lower],\
    \ $s);\n    }\n    \n    return implode('', $s);\n}\n\n$res = solve(\"ab\");\n\
    echo \"Res: $res\\n\";", "    $s = strtolower($s);\n    $count = 0;\n    $res\
    \ = \"\";\n    for($i=0; $i<strlen($s); $i++) {\n        if(isset($s[$i])) {\n\
    \            $s[$i] = strtoupper($s[$i]);\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if($count == 0) $res .= $s[$i];\n\
    \    }\n    return $res;\n}\n\n$arr1 = array(\"ab\", \"cde\", \"fghij\", \"klmnop\"\
    , \"qrs\", \"tuv\", \"wxyz\");\n$arr2 = array(\"Ab\", \"CDe\", \"FGHij\", \"KLMnop\"\
    , \"QRS\", \"TUV\", \"WXYZ\");\n\n$arr3 = array(\"ab\", \"cde\", \"fghij\", \"\
    klmnop\", \"qrs\", \"tuv\", \"wxyz\");\n$arr4 = array(\"Ab\", \"CDe\", \"FGHij\"\
    , \"KLMnop\", \"QRS\", \"TUV\", \"WXYZ\");\n\n$arr5 = array(\"123\", \"456\");\n\
    $arr6 = array(\"123\", \"456\");\n", "    \n    $s = strtolower($s);\n    $s =\
    \ strrev($s);\n    $s = str_replace(\"@\", \"@a\", $s);\n    $s = str_replace(\"\
    #\", \"#a\", $s);\n\n    return $s;\n}\n\nvar_dump(solve(\"1234\"));\nvar_dump(solve(\"\
    ab\"));\nvar_dump(solve(\"#a@C\"));\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n\
    <code>\n<?php\n\nclass Reverse\n{\n    private $str = '';\n\n    public function\
    \ __construct($str)\n    {\n        $this->str = $str;\n    }\n\n    public function\
    \ reverse()\n    {\n        $length = strlen($this->str);\n        for ($i = 0;\
    \ $i < $length; $i++)\n        {\n            if (ctype_alpha($this->str[$i]))\n\
    \            {\n                $this->str[$i] = strtolower($this->str[$i]);\n\
    \            }\n            else\n            {\n                $this->str[$i]\
    \ = strtoupper($this->str[$i]);\n            }\n        }\n\n        return $this->str;\n\
    \    }\n}\n\n$rs = new Reverse('hello world');\n\necho $rs->reverse();\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>", "    $s = strtolower($s);\n    $letters =\
    \ [];\n    $chars = [];\n\n    foreach(str_split($s) as $ch) {\n        if(ctype_alpha($ch))\
    \ {\n            $chars[] = $ch;\n        } else {\n            $letters[] = $ch;\n\
    \        }\n    }\n\n    if(!empty($letters)) {\n        sort($letters);\n   \
    \     sort($chars);\n    }\n\n    return str_replace(array_merge($letters, $chars),\
    \ $chars, $s);\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI like `str_replace(array_merge($letters,\
    \ $chars), $chars, $s);` because if you have `/` it will not be replaced.\n<|/\
    \ c |>\n<| a tags=string,php dscore=4 |>\nThis solution works for me\n<code>",
  "    // code here\n}\n\n$result = solve(\"#a@C\");\necho $result;", "    $s = preg_replace('/([a-zA-Z])/i',\
    \ '$1', $s);\n    if (preg_match('/[a-zA-Z]/i', $s) === 0) return $s;\n    return\
    \ strrev($s);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nNice but this solution\
    \ does not work for `solve(\"A\")` and `solve(\"aBc\")` because `strrev()` only\
    \ reverses the first character of the string.\n<|/ c |>\n<| c |>\nYou're right,\
    \ I missed that case... I'll edit my answer to add this case.\n<|/ c |>\n<| c\
    \ |>\nthanks for your help but i don't know why, your code is working on some\
    \ case but on other case it is not working like solve (\"ab\") it not return \"\
    ab\"\n<|/ c |>\n<| c |>\nI edited the answer, I forgot to add the `i` modifier,\
    \ now it should work for all cases.\n<|/ c |>\n<| a tags=php |>\nA bit more generic\
    \ solution using array_map function.\n<code>", "  \n}", "  \n  // your code goes\
    \ here\n  \n  $arr = [];\n  $arr = str_split($s);\n  \n  $result = '';\n  foreach\
    \ ($arr as $key => $value) {\n    $result = str_split(strtolower($result) . strtoupper($result));\n\
    \    \n    if($value == 0) {\n      unset($arr[$key]);\n    } else {\n      $arr[$key]\
    \ = $value;\n    }\n  }\n  \n  if(count($arr) == 0) {\n    return $result;\n \
    \ }\n  \n  foreach ($arr as $key => $value) {\n    $result = str_split(strtolower($result)\
    \ . strtoupper($result));\n  }\n  \n  return $result;\n}\n\n$res = solve(\"1234\"\
    );\necho \"$res\";\n", "    $newStr = \"\";\n    $length = strlen($s);\n    for($i\
    \ = 0; $i<$length; $i++){\n        if(!is_numeric($s[$i])){\n            $letters\
    \ = str_split($s[$i]);\n            $letters = array_map('strtoupper', $letters);\n\
    \            $letters = array_map('chr', $letters);\n            $letters = implode($letters);\n\
    \            $letters = strtoupper($letters);\n            $letters = preg_replace('/([a-z])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([A-Z])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([@#])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $letters = preg_replace('/([#@])/',\
    \ \"\\1\" . strtoupper(\"\\2\"), $letters);\n            $", "    $result = \"\
    \";\n    $length = strlen($s);\n    for($i = 0; $i < $length; $i++) {\n      \
    \  $result .= ($i == 0) ? strtoupper($s[$i]) : strtolower($s[$i]);\n    }\n  \
    \  return $result;\n}\n\n$string1 = \"This Is a test\";\n$string2 = \"this is\
    \ a test\";\n\necho \"string1 \" . solve($string1) . \"<br>\";\necho \"string2\
    \ \" . solve($string2) . \"<br>\";\n", "    $result = \"\";\n    \n    foreach(str_split($s)\
    \ as $char) {\n        $result .= isLetter($char) ? strrev($char) : $char;\n \
    \   }\n    \n    return $result;\n}\n", "    if (empty($s)) {\n        return\
    \ $s;\n    }\n    $letters = str_split($s);\n    $chars = str_split($s);\n   \
    \ $i = 0;\n    while (isset($chars[$i])) $i++;\n    while ($i < count($chars))\
    \ {\n        if (isset($letters[$i])) {\n            if ($letters[$i] == \"A\"\
    ) {\n                $chars[$i] = \"a\";\n                $chars[$i + 1] = \"\
    A\";\n            } else {\n                $chars[$i] = \"A\";\n            \
    \    $chars[$i + 1] = \"a\";\n            }\n            $i++;\n        } else\
    \ {\n            $chars[$i] = \"a\";\n            $chars[$i + 1] = \"A\";\n  \
    \      }\n        $i++;\n    }\n    return $chars;\n}", "    // Your code here\n\
    \    \n}\n$result = solve(\"AB#cA\");\necho \"The reversed string is: $result\\\
    n\";", "    $arr = str_split($s);\n    $str = \"\";\n    foreach($arr as $key=>$val)\
    \ {\n        if($val >= 65 && $val <= 91){\n            $str .= chr($val+32);\n\
    \        }else{\n            $str .= $val;\n        }\n    }\n    return $str;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 tags=php |>\nThis question was asked nearly\
    \ 2 years ago, but I ran into a similar issue and wanted to share my solution,\
    \ hoping that it helps someone!\n<code>", "    $arrStr = str_split($s);\n    $result\
    \ = '';\n    for($i = 0; $i < count($arrStr); $i++){\n        $char = $arrStr[$i];\n\
    \        if(ctype_alpha($char)){\n            $char = strtoupper($char);\n   \
    \     }else{\n            $char = strtolower($char);\n        }\n        $result\
    \ .= $char;\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a tags=php dscore=2\
    \ |>\n<code>\n<?php", "    if (empty($s) || ctype_alpha($s)) {\n        return\
    \ $s;\n    }\n    $letters = str_split($s);\n    $result = \"\";\n    foreach\
    \ ($letters as $l) {\n        $result .= strcasecmp($l, $letters[0]) < 0 ? $l\
    \ : ucfirst($l);\n    }\n    return $result;\n}\n", "    return str_ireplace(array(\"\
    a\", \"b\", \"c\"), array(\"A\", \"B\", \"C\"), $s);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nA little simpler example than mine:\n`function rev($s) { return\
    \ str_replace(array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'), array('A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'), $s);\
    \ }`\n<|/ c |>\n<| c |>\nI didnt say this is simpler, I just said it might be\
    \ simpler to understand\n<|/ c |>\n<| a tags=reverse,php,string |>\nYou could\
    \ use str_replace to swap each letter for each other:\n<code>\n$string = \"1234\"\
    ;\n$replacements = array('1', '2', '3', '4');\n\n$reversed = str_replace(array_keys($replacements),\
    \ array_values($replacements), $string);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    if(strlen($s)<2) return $s;\n    $str=str_split($s);\n   \
    \ for($i=0;$i<count($str);$i++)\n    {\n        foreach(str_split($str[$i]) as\
    \ $char)\n        {\n            if(ctype_alpha($char))\n            {\n     \
    \           $str[$i]=strtoupper($char);\n            }\n            else\n   \
    \         {\n                $str[$i]=strtolower($char);\n            }\n    \
    \    }\n    }\n    return implode(\"\",$str);\n}", "    $arr=str_split($s);\n\
    \    if(count($arr)==0) return $s;\n    foreach($arr as $key=>$letter){\n    \
    \    if(is_numeric($letter)){\n            $arr[$key]=strtoupper($letter);\n \
    \       }else{\n            $arr[$key]=strtolower($letter);\n        }\n    }\n\
    \    return implode('', $arr);\n}\n</code>\n<|/ a tags=reverse,php,string |>\n\
    <| a tags=reverse,php,string dscore=1 |>\n<code>\n$str = 'aabcde';\n$result =\
    \ strrev($str);\n</code>\nhttp://www.php.net/manual/en/function.strrev.php\n<|/\
    \ a |>\n<| a tags=reverse,php,string dscore=1 |>\n<code>\n$str = $_POST['text'];\n",
  "    $s = preg_replace('/[^a-zA-Z]/', '', $s);\n    return strrev($s);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n$string=\"The quick brown fox jumps\
    \ over the lazy dog.\";\necho $string;\necho str_ireplace('h','t',$string);",
  "  $s = str_split($s);\n  $reversed = array_map(\"strrev\", $s);\n  $result = array_reduce($reversed,\
    \ function($carry, $item) {\n    return $carry . strtolower($item);\n  }, '');\n\
    \  return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\nHere's a possible\
    \ implementation that works on PHP 7 (https://3v4l.org/sHjXZ):\n<code>", "   \
    \ $result = '';\n    $length = strlen($s);\n    $arr = str_split($s);\n    $upperCase\
    \ = [];\n    $lowerCase = [];\n    for($i = 0; $i < $length; $i++) {\n       \
    \ if (ctype_alpha($s[$i])) {\n            $upperCase[] = strtoupper($s[$i]);\n\
    \            $lowerCase[] = strtolower($s[$i]);\n        } else {\n          \
    \  $result .= $s[$i];\n        }\n    }\n    $result = implode('', $arr);\n  \
    \  foreach($lowerCase as $key => $value) {\n        $result = str_replace($value,\
    \ $key, $result);\n    }\n    foreach($upperCase as $key => $value) {\n      \
    \  $result = str_replace($value, $key, $result);\n    }\n    return $result;\n\
    }\n\n$str = '#a@c';\necho solve($str);\n</code>\n<|/ a dscore=1 tags=php,string,arrays,char\
    \ |>\n<| a |>\n<code>", "    return $s;\n}", "    $s = preg_replace('/[^a-z]/',\
    \ '', $s);\n    $s = strtoupper($s);\n    return $s;\n}\n", "    // Code here\
    \ \n    return $s;\n}\n\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat is the issue,\
    \ exactly? Have you tried anything, done any research? This is expected here at\
    \ SO to be a Q&A site, not just a place to dump your homework assignments.\n<|/\
    \ c |>\n<| c |>\nHave you tried using a stack to reverse the characters and string?\n\
    <|/ c |>\n<| a tags=php |>\nYou might want to try using a stack. Here is a short\
    \ example using your provided code.\n<code>\n$string = \"ab#a@C\";\n$stack = [];\n\
    \nfor ($i = 0; $i < strlen($string); $i++) {\n    if (!ctype_alpha($string[$i]))\
    \ {\n        // Reverse if string contains any non alpha characters\n        $string\
    \ = str_replace($string[$i], strtoupper($string[$i]), $string);\n    }\n    else\
    \ {\n        // Push character onto stack\n        $stack[] = $string[$i];\n \
    \   }\n}\n", "    $s = preg_replace(\"~[^a-zA-Z]~\", \"\", $s);\n    $len = strlen($s);\n\
    \    if ($len < 2) return $s;\n    for ($i = 0; $i < $len; $i++) {\n        $s[$i]\
    \ = preg_replace(\"/([a-z]{1})/\", \"\\U$1\", $s[$i]);\n    }\n    return $s;\n\
    }\necho solve(\"1234\");", "    $s = str_split($s);\n    $s = array_map(function\
    \ ($x) {\n        return ctype_alpha($x) ? strtoupper($x) : $x;\n    }, $s);\n\
    \    $s = array_reduce($s, 'array_merge', array());\n    return implode('', $s);\n\
    }\n", "    $s = strtolower($s);\n    $i = strlen($s) - 1;\n    while($i >= 0)\
    \ {\n        if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n            $s[$i] = chr(ord($s[$i])\
    \ - 32);\n        } else if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n            $s[$i]\
    \ = chr(ord($s[$i]) + 32);\n        } else if ($s[$i] >= '0' && $s[$i] <= '9')\
    \ {\n            $s[$i] = $s[$i];\n        } else {\n            $i = $i - 1;\n\
    \        }\n    }\n    return $s;\n}\n\n$tests = array('ABC', 'a', '#a', '#A@C',\
    \ '1234', '123', '1234', '123abc', 'a1b3c', 'a1b3c', 'a1B3C', 'a1b3C', '@a1b3c',\
    \ 'a1@1b3c', '@a1B3c', 'a1@1b3C', '@a1B3C', '1234abc');\nforeach ($tests as $test)\
    \ {\n    echo solve($test).\"\\n\";\n}", "    \n    for($i=0;$i<strlen($s);$i++)\n\
    \    {\n        if($s[$i]>='A' && $s[$i]<='Z')\n        {\n            $newStr\
    \ = $s[$i].strtoupper($s[$i]);\n            $s[$i] = $newStr;\n        }\n   \
    \     else if($s[$i]>='a' && $s[$i]<='z')\n        {\n            $newStr = $s[$i].strtolower($s[$i]);\n\
    \            $s[$i] = $newStr;\n        }\n        else\n        {\n         \
    \   $s[$i] = $s[$i];\n        }\n    }\n    return $s;\n}", "    // Your code\
    \ here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your ", "    $rev = \"\";\n    foreach (str_split($s) as $char) {\n  \
    \      $char = strtolower($char);\n        $rev = strtoupper($char);\n    }\n\
    \    return $rev;\n}", "    // code here\n}", "    $res = $s;\n    \n    $n =\
    \ strlen($s);\n    for($i = 0; $i < $n; $i++) {\n        $c = $s[$i];\n      \
    \  if(ctype_alpha($c)) {\n            $res .= strtoupper($c) . $i;\n         \
    \   $res .= strtolower($c) . $i;\n        }\n    }\n    \n    return $res;\n}\n\
    </code>\nThe main idea is to keep 2 pointers one to the beginning of the string\
    \ and one to the end of the string, if an alphabet is found reverse the string\
    \ and add both pointers accordingly.\n<|/ a dscore=1 |>\n<| c |>\nI believe OP\
    \ doesn't know much about code/algorithms, he just wants to get his job done and\
    \ learn something. Your answer is not very helpful to OP.\n<|/ c |>\n<| c |>\n\
    i guess he already know how string concatenation works and i added an explanation\
    \ if he doesnt know how pointer work in php i could write an explanation if he\
    \ wants\n<|/ c |>\n<| c |>\nI believe you understood what I meant. I just meant\
    \ that OP might not be aware of those concepts. And your answer is just an explanation\
    \ not a solution. Besides, this answer may help OP in future. Nothing against\
    \ you.\n<|/ c |>\n<| c |>\ni added a solution that uses pointers, i think this\
    \ one is better for beginners like me because its easy to understand without knowing\
    \ how pointer works in php and he also doesn't have to learn too much about code/algorithms\
    \ just 2 pointers 1 to the begin and 1 to the end of the string\n<|/ c |>\n<|\
    \ a dscore=1 |>\nI think this should work:\n<code>", "    return str_replace(str_repeat($s,\
    \ 'a'), \"a$s\", str_repeat($s, 'a'));\n}\n</code>\n<|/ a tags=string,php,regex\
    \ |>\n<| c |>\n`a$b$c$d$e` should return `a$d$e$c$b$a` not `a$d$e$c$b$a$` ?\n\
    <|/ c |>\n<| c |>\nYes, I fixed it.\n<|/ c |>\n<| a dscore=3 |>\nHere is a simple\
    \ approach for just the first character:\n<code>\n$str = 'ab';\n$result = $str[0]\
    \ . $str[1];\n</code>\nResult: \n<code>\nab\n</code>\n<|/ a tags=string,php,regex\
    \ |>\n<| a dscore=3 |>\nI thought I might offer a regex solution, which might\
    \ be a bit of a leap for people new to regex.\nIn English, this requirement translates\
    \ to \"match any string of any length, but the first character must be an 'a'.\"\
    \ So we can use a non-capturing group to capture that first character and use\
    \ a negative lookahead assertion to assert that it's not a 'b':\n<code>\n/^(?!b).*/\n\
    </code>\nDemo\nThe above regex matches any of the following strings:\n\n'a' \n\
    'b'\n'c' \n'd'\n'e'\n'f'\n'g'\n'h'\n'i'\n'j'\n'k'\n'l'\n'm'\n'n'\n'o'\n'p'\n'q'\n\
    'r'\n's'\n't'\n'u'\n'v'\n'w'\n'x'\n'y'\n'z'\n\nThis regex matches the strings\
    \ 'a' through 'z', but the first character must be a 'a'.\n<|/ a tags=string,php,regex\
    \ |>\n<| c |>\nI like this solution because it doesn't require a lookahead, but\
    \ it also makes it confusing to understand for people who don't know that negative\
    \ lookaheads aren't part of the regular expression syntax.\n<|/ c |>\n<| c |>\n\
    The lookahead is just to say \"match the first character in the string, but only\
    \ if it is different than `b`.\"\n<|/ c |>\n<| c |>\n`^(?!b).*` is better written\
    \ as `/^(?!b).*/`\n<|/ c |>\n<| c |>\n, thanks for that. Not sure why I did it\
    \ the way I did it. I usually avoid using capturing groups in my answers because\
    \ I like to ", "    $s = preg_replace('/[^a-zA-Z]/', '', $s);\n    $s = strrev($s);\n\
    \    return $s;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php |>\nA simple\
    \ way to do it would be:\n<code>\n$input = '#a@C';\n$output = preg_replace('/([a-z])/',\
    \ '\\U\\1', $input);\n</code>\n<|/ a |>\n<| c |>\nThis only works with PHP 5.3.0+\n\
    <|/ c |>\n<| a |>\n<code>\n$string = '#a@C';\n$pattern = '/([a-z])/i'; \n$replacement\
    \ = '\\U$1';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/\
    \ a dscore=0 tags=php |>\n<| a dscore=0 tags=php |>\n<code>", "    $newString\
    \ = array();\n    \n    $countLettersArray = str_split($s);\n    foreach($countLettersArray\
    \ as $key => $value){\n        $newString[$key] = $value;\n    }\n\n    if($newString[0]\
    \ == '#'){\n        \n        \n        \n        if($newString[1] == '#'){\n\
    \            \n            if($newString[2] == '#'){\n                return $newString[3];\n\
    \            \n            }\n            \n            \n            if($newString[2]\
    \ == '$'){\n                return $newString[3];\n            }\n           \
    \ \n            \n            if($newString[2] == '@'){\n                return\
    \ $newString[3];\n            }\n            \n            \n            if($newString[2]\
    \ == '$'){\n                return $newString[3];\n            }\n           \
    \ \n            \n            \n            \n            if($newString[2] ==\
    \ '@'){\n                return $newString[3];\n            }\n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            if($newString[2] == '$'){\n                return $newString[3];\n\
    \            }\n            \n            \n            \n            \n     \
    \       \n            \n            \n            if($newString[2] == '@'){\n\
    \                return $newString[3];\n            }\n            \n        \
    \    \n            \n            \n            \n            \n            \n\
    \            \n            if($newString[2] == '$'){\n                return $newString[3];\n\
    \            }\n            \n            \n            \n            \n     \
    \       \n            \n            \n            \n            if($newString[2]\
    \ == '@'){\n                return $newString[3];\n            }\n           \
    \ \n            \n            \n            \n            \n            \n   \
    \         \n            \n            if($newString[2] == '$'){\n            \
    \    return $newString[3];\n            }\n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            if($newString[2] == '@'){\n                return $newString[3];\n\
    \            }\n            \n            \n            \n            \n     \
    \       \n            \n            \n            \n            if($newString[2]\
    \ == '$'){\n                return $newString[3];\n            }\n           \
    \ \n            \n            \n            \n            \n            \n   \
    \         \n            \n            if($newString[2] == '@'){\n            \
    \    return $newString[3];\n            }\n            \n            \n      \
    \      \n            \n            \n            \n            \n            if($newString[2]\
    \ == '$'){\n                return $newString[3];\n            }\n           \
    \ \n            \n            \n            \n            \n            \n   \
    \         \n            \n            if($newString[2] == '@'){\n            \
    \    return $newString[3];\n            }\n            ", "    // Your code here\n\
    \    return preg_replace('/[^a-z]/', '', $s);\n}\n", "  $arr = str_split($s);\n\
    \  foreach ($arr as &$val) {\n    if (ctype_alpha($val)) {\n      $val = mb_strtoupper($val);\n\
    \    } else {\n      $val = mb_strtolower($val);\n    }\n  }\n  return implode('',\
    \ $arr);\n}\n</code>\n<|/ a |>\n<| a |>\nTry this one:\n<code>", "  if(strlen($s)\
    \ == 0) {\n      return $s;\n  }\n  \n  foreach($s as $val) {\n    $newval = strtoupper($val);\n\
    \    if(!ctype_alpha($val) && ctype_alpha($newval)) {\n      return $s.$newval;\n\
    \    }\n  }\n  \n  return $s;\n}\n\n$input = '#a@C';\n$result = solve($input);\n\
    echo $result;\n", "  return implode(\n    array_map(\n      function ($a) {\n\
    \        return $a === '#' ? '#' : strtolower($a) === $a ? strtoupper($a) : $a;\n\
    \      },\n      preg_replace_callback('/[a-z]+/i', function ($m) {\n        return\
    \ $m[0] === $m[0] ? '#' : strtolower($m[0]);\n      }, $s)\n    )\n  ) !== '#'\n\
    \    ? $s\n    : strrev($s);\n}\n</code>\n<|/ a tags=arrays,php,string,reverse,regex\
    \ dscore=1 |>\n<| a tags=arrays,php,string,reverse,regex |>\n<code>", "    $s\
    \ = strtolower($s);\n    $vowels = \"aeiouy\";\n    $count = count($s);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        $char = strtolower($s[$i]);\n       \
    \ if (preg_match(\"/($vowels)/i\", $char)) {\n            $char = strrev($char);\n\
    \        }\n        $s[$i] = $char;\n    }\n    $s = implode('', $s);\n    return\
    \ $s;\n}\n\n$string = explode(',', $input);\n$string[] = '';\nprint_r(array_map('trim',\
    \ $string));\nprint_r(array_map('solve', $string));\n</code>\n<|/ a tags=algorithm,php,string,function,arrays\
    \ |>\n<| a tags=algorithm,php,string,function,arrays |>\nI hope this helps :)\n\
    <code>\n<?php\n\n$string = \"This test is a simple test.\";\n", "    $letters\
    \ = [];\n\n    for ($i = 0; $i < strlen($s); $i++) {\n        $letters[$i] = ctype_alpha($s[$i])\
    \ ? strtoupper($s[$i]) : strtolower($s[$i]);\n    }\n\n    return implode('',\
    \ $letters);\n}\n\n$strings = array(\"Abc\", \"A!Bc\", \"#A#C\", \"a@C\");\n\n\
    foreach ($strings as $string) {\n    echo $string . \" => \" . solve($string)\
    \ . \"\\n\";\n}", "  return $s;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ so much for your help! I understand this question was marked duplicate but I've\
    \ been looking for a solution all day. Thanks again for your help.\n<|/ c |>\n\
    <| a |>\nYou can just do it using string replace like this:\n<code>\n$input =\
    \ str_replace(\n    array(\n        \"a\",\n        \"b\",\n        \"c\",\n \
    \       \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\"\
    ,\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"\
    m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n       \
    \ \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n   \
    \     \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"A\",\n\
    \        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\"\
    ,\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"\
    K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n       \
    \ \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n   \
    \     \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n\
    \        \"Z\",\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\"\
    ,\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"\
    8\",\n        \"9\",\n        \"-\",\n        \".\",\n        \",\",\n       \
    \ \"?\",\n        \"/\",\n        \"*\",\n        \":\",\n        \";\",\n   \
    \     \"!\",\"'\",\n        \"[\",\n        \"]\",\n        \"{\",\n        \"\
    }\",\n        \"(\",\n        \")\",\n        \"_\",\n        \"!\",\n       \
    \ \"*\",\n        \"_\"\n    ),\n    array(\n        \"z\",\n        \"y\",\n\
    \        \"x\",\n        \"w\",\n        \"v\",\n        \"u\",\n        \"t\"\
    ,\n        \"s\",\n        \"r\",\n        \"q\",\n        \"p\",\n        \"\
    o\",\n        \"n\",\n        \"m\",\n        \"l\",\n        \"k\",\n       \
    \ \"j\",\n        \"i\",\n        \"h\",\n        \"g\",\n        \"f\",\n   \
    \     \"e\",\n        \"d\",\n        \"c\",\n        \"b\",\n        \"a\",\n\
    \        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n \
    \       \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n  \
    \      \"\",\n        \"\",\n        \"\",\n        \"\",\n", "    $result = '';\n\
    \    foreach ($s as $char) {\n        if (ctype_alpha($char)) {\n            $result\
    \ .= strtoupper($char);\n        } else {\n            $result .= $char;\n   \
    \     }\n    }\n    return $result;\n}\n</code>\nThe same can be achieved with\
    \ a regex:\n<code>", "    $string = \"\";\n    $chars = str_split($s);\n    foreach\
    \ ($chars as $char) {\n        if (ctype_alpha($char)) {\n            $string\
    \ .= ucfirst($char);\n        } elseif (ctype_upper($char)) {\n            $string\
    \ .= strtoupper($char);\n        } else {\n            $string .= $char;\n   \
    \     }\n    }\n    return $string;\n}\n</code>\n<|/ a |>\n<| c |>\nThat is awesome.\
    \ Thanks :)\n<|/ c |>\n<| a dscore=3 |>\nHere's a one-liner that does the job:\n\
    <code>\necho strrev(ucfirst(preg_replace('/([a-z])/i', '\\\\U\\\\1', $str)));\n\
    </code>\npreg_replace() will find all lowercase letters preceded by an alphabet\
    \ and convert them to uppercase, then the uc first will convert the uppercase\
    \ letters back to their lowercase versions.\n<|/ a tags=php,string,case-conversion\
    \ |>\n<| a |>\n<code>\necho str_replace(array('a', 'e', 'i', 'o', 'u'), array('A',\
    \ 'E', 'I', 'O', 'U'), $string);\n</code>\n<|/ a tags=php,string,case-conversion\
    \ dscore=2 |>\n<| c |>\nThis would not work because PHP would not know the difference\
    \ between the uppercase and lowercase letters.\n<|/ c |>\n<| a tags=php,string,case-conversion\
    \ |>\nYou could use preg_replace:\n<code>\n$string = 'aBcDeFgH';\n$result = preg_replace('/[a-z]/i',\
    \ mb_strtoupper('\\\\0', 'UTF-8'), $string);\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis is beautiful. I love it.\n<|/ c |>\n<| a dscore=2 tags=php,string,case-conversion\
    \ |>\nMy suggestion, since it is actually pretty simple:\n<code>\n$string = 'aBcDeFgH';\n\
    $new_string = preg_replace_callback('/[a-z]/i',\n                            \
    \     create_function('$match', 'return strtoupper($match[0]);'), $string);\n\
    </code>\n<|/ a |>\n<| a tags=php,string,case-conversion |>\nTry this: \n<code>\n\
    $result = preg_replace_callback('/([a-z])/i', function($matches) {\n    return\
    \ strtoupper($matches[0]);\n}, $string);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$result = strtoupper(mb_strto", "  \n    $str = \"\";\n    for($i=0;\
    \ $i<strlen($s); $i++){\n        \n        if(ctype_alpha($s[$i])){\n        \
    \    $str .= strtoupper(substr($s,$i,1));\n        }else{\n            $str .=\
    \ substr($s,$i,1);\n        }\n    }\n    return $str;\n}\n\n$test1 = \"A\";\n\
    $test2 = \"AB\";\n$test3 = \"a\";\n$test4 = \"ab\";\n$test5 = \"#a@C\";\n$test6\
    \ = \"#a@c\";\n$test7 = \"#a@C\";\n$test8 = \"#a@c\";\n$test9 = \"#a@c\";\n$test10\
    \ = \"#a@c\";\n$test11 = \"#a@C\";\n\necho \"\\nTesting strcasecmp() with $test1\\\
    n\";\nvar_dump(strcasecmp($test1, $test2));\necho \"\\nTesting strcasecmp() with\
    \ $test2\\n\";\nvar_dump(strcasecmp($test2, $test3));\necho \"\\nTesting strcasecmp()\
    \ with $test3\\n\";\nvar_dump(strcasecmp($test3, $test4));\necho \"\\nTesting\
    \ strcasecmp() with $test4\\n\";\nvar_dump(strcasecmp($test4, $test5));\necho\
    \ \"\\nTesting strcasecmp() with $test5\\n\";\nvar_dump(strcasecmp($test5, $test6));\n\
    echo \"\\nTesting strcasecmp() with $test6\\n\";\nvar_dump(strcasecmp($test6,\
    \ $test7));\necho \"\\nTesting strcasecmp() with $test7\\n\";\nvar_dump(strcasecmp($test7,\
    \ $test8));\necho \"\\nTesting strcasecmp() with $test8\\n\";\nvar_dump(strcasecmp($test8,\
    \ $test9));\necho \"\\nTesting strcasecmp() with $test9\\n\";\nvar_dump(strcasecmp($test9,\
    \ $test10));\necho \"\\nTesting strcasecmp() with $test10\\n\";\nvar_dump(strcasecmp($test10,\
    \ $test11));\necho \"\\nTesting strcasecmp() with $test11\\n\";\nvar_dump(strcasecmp($test11,\
    \ $test1));\n\necho \"\\nTesting strcasecmp() with $test12\\n\";\nvar_dump(strcasecmp(solve($test12),\
    \ solve($test13)));", "    \n    // your code here\n    $arr = str_split($s);\n\
    \    $new_arr = array();\n    foreach ($arr as $key => $value) {\n        if (ctype_alpha($value))\
    \ {\n            $new_arr[$key] = strtoupper($value);\n        } else {\n    \
    \        $new_arr[$key] = $value;\n        }\n    }\n    return implode('', $new_arr);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,php |>\nHere is a simple solution:\n\
    <code>\n<?php", "    // Write your code here\n    for($i=0;$i<strlen($s);$i++){\n\
    \        if(ctype_alpha($s[$i])){\n            if(($s[$i]>=65 && $s[$i]<=90)||($s[$i]>=97\
    \ && $s[$i]<=122)){\n                $s[$i]=chr((ord($s[$i])-32));\n         \
    \   }\n            else{\n                $s[$i]=chr((ord($s[$i])+32));\n    \
    \        }\n        }\n    }\n    return $s;\n}", "    return $s;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\nOne liner using regex and preg_replace_callback()\n\
    <code>\n$str = \"Hello\";\n\necho preg_replace_callback(\"/[A-Z]/\",function ($match)\
    \ {\n    return strtoupper($match[0]);\n}, $str);\n</code>\nOutput\n<code>\nhELLO\n\
    </code>\n<|/ a dscore=0 tags=php,string |>\n<| a tags=php,string |>\nThe code\
    \ below will convert every uppercase letter to a lowercase, then it will replace\
    \ every uppercase letter with its lowercase:\n<code>\n$string = 'Hello';\necho\
    \ strtr($string, array_flip(array_map(function($letter) {\n    return strtolower($letter);\n\
    }, preg_split('//u', $string))););\n</code>\nhttps://3v4l.org/rL0cZ\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\n$str = \"Hello World\";\n$result = preg_replace('/[A-Z]/',\
    \ \"strtolower('\\\\0')\", $str);\n</code>\n<|/ a dscore=0 tags=php,string |>\n\
    <| a tags=php,string |>\nAnother solution using array_walk() and preg_replace().\
    \ \n<code>\n$str = \"Hello World\";\narray_walk($str, function($v) use ($str)\
    \ {\n    $str = preg_replace('/[A-Z]/', \"strtolower('\\\\0')\", $v);\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease explain how your code works and how it solves\
    \ the problem. Code only answers can generally be improved with some explanation.\n\
    <|/ c |>\n<| a dscore=0 |>\nA simple way would be to convert them to a lowercase\
    \ letter and then add them back, since uppercase letters are converted to lowercase\
    \ letters.\n<code>\n$string = \"HELLO WORLD\";\n$new_string = preg_replace(\"\
    /[A-Z]/\", \"strtolower('\\\\0')\", $string);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=0 tags=php,string |>\nYou could use strtr() to translate the\
    \ characters:\n<code>\n$string = \"Hello World\";\n$string = strtr($string, ['H'\
    \ => 'h', 'W' => 'w', 'R' => 'r', 'D' => 'd', 'L' => 'l', 'O' => 'o']);\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nThis approach uses preg_replace_callback() with strtr().\n\
    <code>\n$string = 'Hello';\n", "    $len = strlen($s);\n    $newStr = '';\n  \
    \  for ($i = 0; $i < $len; $i++) {\n        $c = $s[$i];\n        if ( preg_match('/[A-Z]/',\
    \ $s[$i])) {\n            $newStr .= strtoupper($c);\n        } else {\n     \
    \       $newStr .= strtolower($c);\n        }\n    }\n    return $newStr;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,string |>\n<code>", "    // write your\
    \ code here\n    \n    return $s;\n}\n\n$output = solve($input);\n\necho \"$output\"\
    ;", "    \n}\n</cell>\n<text>\nExplanation\nThis part is easy enough, what we\
    \ want to do is keep a variable that can keep track of what the last character\
    \ was we check every character of the string, and if its not a-z or A-Z we append\
    \ it onto the variable and append the lower or upper cased version to it.\n\n\
    The only issue is how will we know when to stop? We know how it keeps track of\
    \ characters, and the string length but how do we know when to stop?\n\nOne idea\
    \ is to keep track of the length and just loop till the variable length is equal\
    \ to 0. But if we reverse the string and then loop again it might not work as\
    \ expected and might not give the right result. So we will add an extra condition\
    \ inside the loop that checks the last character and compares it with a-z or A-Z\
    \ respectively and if it doesn't match we break and append it into the variable\
    \ and reverse the string then break.\n\nThis could have been solved in one line\
    \ if we knew how to reverse a string but not sure how to reverse a string while\
    \ iterating through the string.\n\nThe first thing to do is to create a variable\
    \ that can store the current character.\n\nWhat is the variable name for?\n\n\
    The variable name will come in handy later on.\n\nLets call it currentCharacter.\n\
    \nWhat is currentCharacter storing?\n\nIt's storing the current character in the\
    \ string we are currently working with.\n\nWhat is currentCharacter holding?\n\
    \nIt holds the current character we are working with.\n\nWhat does it hold at\
    \ first?\n\nIt holds the letter a at the first iteration which is what we want\
    \ to reverse if we find a letter then we break and append the character to the\
    \ variable and reverse the string and break.\n\nWhat does breaking do?\n\nThe\
    \ break; command terminates the current loop so it will terminate the for loop.\n\
    \nNext we need to compare the current character we are working with lowercase\
    \ or uppercase\n\nHow do we compare characters?\n\nIn PHP we can compare characters\
    \ using == or !=\n\nHow do we check if a character is lowercase or uppercase?\n\
    \nIn PHP we can compare characters using either isLowerCase or isUpperCase or\
    \ toLowerCase or toUpperCase depending on what we want to do.\n\nLets see an example:\n\
    \nHow does a != b work?\n\na is storing the character a in the variable called\
    \ currentCharacter.\n\nb is storing the character b in the variable called currentCharacter.\n\
    \na != b is comparing the characters a and b using != which will check if they\
    \ are not equal or same or different.\n\na != b is comparing a and b and checking\
    \ if the first character is different or different because that would be a letter\
    \ that is not equal to the second character and that is what we want.\n\na !=\
    \ b is ", "    $s = strtolower($s);\n    $sArr = str_split($s);\n    foreach ($sArr\
    \ as &$val) {\n        if (ctype_alpha($val)) {\n            $val = strtoupper($val);\n\
    \        }\n    }\n    \n    return implode('', $sArr);\n}", "    $res = \"\"\
    ;\n    foreach ($s as $c) {\n        if ($c == \"a\") {\n            $res .= \"\
    A\";\n        }\n        else if ($c == \"b\") {\n            $res .= \"B\";\n\
    \        }\n        else if ($c == \"c\") {\n            $res .= \"C\";\n    \
    \    }\n        else if ($c == \"d\") {\n            $res .= \"D\";\n        }\n\
    \        else if ($c == \"e\") {\n            $res .= \"E\";\n        }\n    \
    \    else if ($c == \"f\") {\n            $res .= \"F\";\n        }\n        else\
    \ if ($c == \"g\") {\n            $res .= \"G\";\n        }\n        else if ($c\
    \ == \"h\") {\n            $res .= \"H\";\n        }\n        else if ($c == \"\
    i\") {\n            $res .= \"I\";\n        }\n        else if ($c == \"j\") {\n\
    \            $res .= \"J\";\n        }\n        else if ($c == \"k\") {\n    \
    \        $res .= \"K\";\n        }\n        else if ($c == \"l\") {\n        \
    \    $res .= \"L\";\n        }\n        else if ($c == \"m\") {\n            $res\
    \ .= \"M\";\n        }\n        else if ($c == \"n\") {\n            $res .= \"\
    N\";\n        }\n        else if ($c == \"o\") {\n            $res .= \"O\";\n\
    \        }\n        else if ($c == \"p\") {\n            $res .= \"P\";\n    \
    \    }\n        else if ($c == \"q\") {\n            $res .= \"Q\";\n        }\n\
    \        else if ($c == \"r\") {\n            $res .= \"R\";\n        }\n    \
    \    else if ($c == \"s\") {\n            $res .= \"S\";\n        }\n        else\
    \ if ($c == \"t\") {\n            $res .= \"T\";\n        }\n        else if ($c\
    \ == \"u\") {\n            $res .= \"U\";\n        }\n        else if ($c == \"\
    v\") {\n            $res .= \"V\";\n        }\n        else if ($c == \"w\") {\n\
    \            $res .= \"W\";\n        }\n        else if ($c == \"x\") {\n    \
    \        $res .= \"X\";\n        }\n        else if ($c == \"y\") {\n        \
    \    $res .= \"Y\";\n        }\n        else if ($c == \"z\") {\n            $res\
    \ .= \"Z\";\n        }\n        else if ($c == \"0\") {\n            $res .= \"\
    0\";\n        }\n        else if ($c == \"1\") {\n            $res .= \"1\";\n\
    \        }\n        else if ($c == \"2\") {\n            $res .= \"2\";\n    \
    \    }\n        else if ($c == \"3\") {\n            $res .= \"3\";\n        }\n\
    \        else if ($c == \"4\") {\n            $res .= \"4\";\n        }\n    \
    \    else if ($c == \"5", "  return preg_replace_callback('/./u', function($c)\
    \ {\n    if (ctype_alpha($c[0])) {\n      $c[0] = strtoupper($c[0]);\n    } else\
    \ {\n      $c[0] = strtolower($c[0]);\n    }\n    return $c;\n  }, $s);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis was the fastest and closest to what I was looking for.\
    \ Thanks!\n<|/ c |>\n<| a tags=preg-replace,php,regex,string |>\n<code>\npreg_replace('~\\\
    B([A-Z])~', '\\U\\1', $string)\n</code>\nThis regex will replace a letter in an\
    \ alphanumeric sequence with an uppercase one, if it is preceded by an alphanumeric\
    \ letter.\n\\B stands for \"non-word boundary\".\n<|/ a dscore=3 |>\n<| c |>\n\
    This won't convert \"#a@C\" to \"#A@c\" which I think is what the OP wants?\n\
    <|/ c |>\n<| c |>\n: You are right, I have added a note.\n<|/ c |>\n<| c |>\n\
    This is really close, but also changes \"#a\" to \"#A\". Is there a way to ensure\
    \ all letters are lower-case? I've tried adding strtolower() to the end but that\
    \ only seems to change letters that are already lowercase.\n<|/ c |>\n<| c |>\n\
    : You are right, I have edited the answer accordingly.\n<|/ c |>\n<| c |>\nThe\
    \ edit seems to have worked perfectly. Thank you very much for the quick solution.\
    \ I'll accept the answer when able.\n<|/ c |>\n<| a |>\n<code>\npreg_replace('/(#\\\
    w)/',' ',$string);\n</code>\n<|/ a dscore=1 tags=preg-replace,php,regex,string\
    \ |>\n<| c |>\nThis will replace `#` with `' '`\n<|/ c |>\n<| c |>\nThis will\
    \ not work with a string like `#a@C`, because `#` will not be preceded by `\\\
    w`.\n<|/ c |>\n<| a dscore=0 tags=preg-replace,php,regex,string |>\n<code>", " \
    \   $chars = array_filter(str_split($s));\n    return $chars == array_map('strtoupper',\
    \ array_map('strtolower', $chars));\n}\n</code>\n<|/ a |>\n<| c |>\nThat is pretty\
    \ awesome, thank you so much. I will definitely be using this in the future.\n\
    <|/ c |>\n<| a dscore=0 |>\nThis is a recursive solution for single character,\
    \ no spaces or double spaces. I like it. It is not so much to hard to understand.\
    \ I like recursion.\n<code>", "    if(strlen($s)==0)return $s;\n    foreach($s\
    \ as $i){\n        if(ctype_alpha($i)){\n            $s=strrev($s);\n        \
    \    return $s;\n        }\n    }\n    return $s;\n}", "  \n    if(!ctype_alpha($s)){\n\
    \        return $s;\n    }\n    \n    $new_str = \"\";\n    for($i = 0; $i < strlen($s);\
    \ $i++){\n        if(ctype_alpha($s[$i])){\n            $letter = $s[$i];\n  \
    \          \n            switch($letter){\n                case 'A': $new_str\
    \ .= 'a'; break;\n                case 'b': $new_str .= 'b'; break;\n        \
    \        case 'c': $new_str .= 'c'; break;\n                case 'D': $new_str\
    \ .= 'd'; break;\n                case 'e': $new_str .= 'e'; break;\n        \
    \        case 'F': $new_str .= 'f'; break;\n                case 'G': $new_str\
    \ .= 'g'; break;\n                case 'H': $new_str .= 'h'; break;\n        \
    \        case 'I': $new_str .= 'i'; break;\n                case 'J': $new_str\
    \ .= 'j'; break;\n                case 'K': $new_str .= 'k'; break;\n        \
    \        case 'L': $new_str .= 'l'; break;\n                case 'M': $new_str\
    \ .= 'm'; break;\n                case 'N': $new_str .= 'n'; break;\n        \
    \        case 'O': $new_str .= 'o'; break;\n                case 'P': $new_str\
    \ .= 'p'; break;\n                case 'Q': $new_str .= 'q'; break;\n        \
    \        case 'R': $new_str .= 'r'; break;\n                case 'S': $new_str\
    \ .= 's'; break;\n                case 'T': $new_str .= 't'; break;\n        \
    \        case 'U': $new_str .= 'u'; break;\n                case 'V': $new_str\
    \ .= 'v'; break;\n                case 'W': $new_str .= 'w'; break;\n        \
    \        case 'X': $new_str .= 'x'; break;\n                case 'Y': $new_str\
    \ .= 'y'; break;\n                case 'Z': $new_str .= 'z'; break;\n        \
    \        default: $new_str .= $letter;\n            }\n        } else {\n    \
    \        $new_str .= $s[$i];\n        }\n    }\n    \n    return $new_str;\n}",
  "    \n    if (empty($s)){\n        return \"\";\n    }\n    \n    $a = array_filter(str_split($s));\n\
    \    \n    foreach ($a as $key => $value) {\n        if (ctype_upper($value)){\n\
    \            $a[$key] = ctype_lower($value) ? strtoupper($value) : strtolower($value);\n\
    \        }\n    }\n    \n    return implode($a);\n}", "    \n    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n   \
    \ $letters = [];\n    \n    for($i = 0; $i < strlen($s); $i++) {\n        if($s[$i]\
    \ != '#') {\n            if($s[$i] != '@') {\n                if(in_array($s[$i],\
    \ $vowels)) {\n                    $letters[$i] = strtoupper($s[$i]);\n      \
    \          } elseif(in_array($s[$i], $consonants)) {\n                    $letters[$i]\
    \ = strtolower($s[$i]);\n                } else if($s[$i] != 'z') {\n        \
    \            $letters[$i] = $s[$i];\n                } else {\n              \
    \      $letters[$i] = $s[$i];\n                }\n            } else {\n     \
    \           if($s[$i] != '@') {\n                    $letters[$i] = strtoupper($s[$i]);\n\
    \                } else {\n                    $letters[$i] = strtolower($s[$i]);\n\
    \                }\n            }\n        }\n    }\n    return strrev($letters);\n\
    }\n", "  $s = strtolower($s);\n  $s = str_replace(\"@\", \"@@\", $s);\n  preg_match_all(\"\
    /[a-z]+/i\", $s, $matches);\n  if(count($matches[0]) > 0) {\n    foreach($matches[0]\
    \ as $i) {\n      if($i{0} === $i{1}) {\n        $s = str_replace($i, strtoupper($i),\
    \ $s);\n        $s = str_replace($i, strtolower($i), $s);\n      }\n    }\n  }\n\
    \  return $s;\n}\necho solve(\"1234\") . \"\\n\";\necho solve(\"ab\") . \"\\n\"\
    ;\necho solve(\"#a@C\") . \"\\n\";", "    $result = '';\n    foreach(str_split($s)\
    \ as $char) {\n        if(ctype_alpha($char)) {\n            $result .= strtoupper($char);\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    return\
    \ implode('', str_split($result));\n}\n</code>\n<|/ a |>\n<| c |>\nThis is the\
    \ best answer here.\n<|/ c |>\n<| a dscore=2 tags=php |>\nThe string can be converted\
    \ to upper case:\n<code>\n$new = strtoupper($old);\n</code>\nThen you can simply\
    \ remove non-alphabetic characters with preg_replace:\n<code>\n$new = preg_replace(\"\
    /[^a-zA-Z]/\", \"\", $new);\n</code>\nAnd finally return the converted string.\n\
    <code>", "    $s = strtolower($s);\n    $new_s = \"\";\n    for ($i=0;$i<strlen($s);$i++)\
    \ {\n        $new_s .= ($s[i] >= \"a\" && $s[i] <= \"z\") ? ($s[i] - 32) : $s[i];\n\
    \    }\n    return $new_s;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nIt's worth\
    \ noting that this solution requires PHP 7+\n<|/ c |>\n<| c |>\nNote that this\
    \ won't work if the letters are uppercase or have accents in them (as they would\
    \ be in the original question).\n<|/ c |>\n<| c |>\nActually, this solution does\
    \ not work. It will return the original string `#A@c` instead of `#A@c`\n<|/ c\
    \ |>\n<| a dscore=5 tags=lowercase,php,uppercase |>\nHere's a solution that uses\
    \ a regex to match only upper case letters:\n<code>\n$s = preg_replace('/\\P{Ll}/',\
    \ '', $s);\n</code>\n\\P matches everything that is not letters (\\P{Ll}). \\\
    P matches the following things:\n\n\\P matches any non-letter character\n\\P{Ll}\
    \ matches any character in the category \"Letter, Lowercase\".\n\nAnd finally,\
    \ the preg_replace() call is replacing the matched characters with an empty string.\n\
    Note: In case you need a case insensitive replacement use /\\P{Lu} instead.\n\
    Demo\n<|/ a |>\n<| c |>\n`preg_replace('/\\P{Ll}/u', '', $s)` - this also works\
    \ for `'#a@C'` string.\n<|/ c |>\n<| c |>\nthis should be the accepted answer\n\
    <|/ c |>\n<| a tags=lowercase,php,uppercase |>\nIf you want it simple, use ctype_upper($str).\n\
    <|/ a dscore=5 |>\n<| c |>\nctype_upper doesn't work on special characters.\n\
    <|/ c |>\n<| a |>\nYou can use ctype_upper() to validate whether a given string\
    \ is in uppercase.\n<|/ a dscore=5 tags=lowercase,php,uppercase |>\n<| c |>\n\
    `ctype_upper` doesn't work on special characters.\n<|/ c |>\n<| a |>\nUse this\
    \ function for lower/uppercase only :\n<code>", "  // your code here\n  $newString\
    \ = \"\";\n  for ($i = 0; $i < strlen($s); $i++) {\n    $char = strtolower($s[$i]);\n\
    \    if ($char == \"a\") {\n      $char = chr(ord(\"A\") - 1);\n    }\n    else\
    \ if ($char == \"z\") {\n      $char = chr(ord(\"a\") - 26);\n    }\n    else\
    \ {\n      $char = $s[$i];\n    }\n    $newString .= $char;\n  }\n  return $newString;\n\
    }\n", "    $s = strtolower($s);\n    return preg_replace_callback('/[a-z]/', function($m)\
    \ use ($s) {\n        if($m[0] == $m[1]) $m[0] = strtoupper($m[0]);\n        return\
    \ $m;\n    }, $s);\n}\n</code>\n<|/ a tags=php,string,arrays dscore=0 |>\n<| c\
    \ |>\nWhat about \"abcd\"?\n<|/ c |>\n<| c |>\nIt should also return the string\
    \ \"abcd\", right? But it returns \"adbc\".\n<|/ c |>\n<| c |>\nYeah, I agree,\
    \ I missed that, my fault. :-)\n<|/ c |>\n<| c |>\nI hope you get my meaning :P\n\
    <|/ c |>\n<| a tags=php,string,arrays |>\n<code>\n$string = \"aBcDe\";\n$result\
    \ = [];\n$result[] = $string;\n$i = 0;\n\nwhile ($i < strlen($string)) {\n   \
    \ $result[] = preg_replace('/[a-z]/', '\\U' . strtoupper($string[$i++]), $string);\n\
    }\necho implode(\"\", $result);\n</code>\nOutput: AedcBaB\n<|/ a dscore=0 |>\n\
    <| c |>\nI like the look of this but when I run it I get this error; \n\nWarning:\
    \ preg_replace(): No ending delimiter '/' found in\n\nany ideas?\n<|/ c |>\n<|\
    \ c |>\nAh, that fixed it, thank you, could you explain how that works?\n<|/ c\
    \ |>\n<| c |>\nI used a double slash to escape the slash character that preg_replace\
    \ is expecting, because otherwise preg_replace thinks its a regex delimiter. Im\
    \ glad this helped you :)\n<|/ c |>\n<| a |>\nThis should work for you.\n<code>\n\
    <?php", "  $reversed = $s;\n  if (strlen($s) == 0) {\n    return $reversed;\n\
    \  }\n  $count = count_chars($s);\n  foreach ($count as $c => $countChars) {\n\
    \    if ($countChars == 1) {\n      $s = str_replace($c, '', reverse($s));\n \
    \   }\n  }\n  return $s;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe code is\
    \ fine, but you have a bug when you use $reversed = $s;  It should be $reversed\
    \ = strrev($s);\n<|/ c |>\n<| c |>\nNice observation but this is not a bug, it's\
    \ because of the logic which i explained in my answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\nAs stated by, there is a bug in the second for-loop\n<code>\nforeach ($count\
    \ as $c => $countChars)\n</code>\nYou probably meant\n<code>\nforeach ($count\
    \ as $c => $countChars)\n</code>\n<|/ a tags=string,php |>\n<| a |>\nThis is working\
    \ fine for me,\n<code>\n<?php", "    \n    $finalString = \"\";\n    $flag = 0;\n\
    \    \n    for ($i=0; $i<strlen($s); $i++) {\n        $str = $s[$i];\n       \
    \ if (ctype_alpha($str)) {\n            if (ctype_upper($str)) {\n           \
    \     $finalString .= strtoupper($str);\n                \n            } else\
    \ {\n                $finalString .= strtolower($str);\n            }\n      \
    \  }\n    }\n    return $finalString;\n    \n}\n$result = solve($s);\necho \"\
    Reverse string is: \" . $result;", "    $s = strtolower($s);\n    $result = \"\
    \";\n    foreach ($s as $key => $value) {\n        $result .= strtoupper($value)\
    \ . strtolower($value);\n    }\n    return $result;\n}\n", "    $result = \"\"\
    ;\n    $len = strlen($s);\n    $i = -1;\n    while($i < $len) {\n        if (ctype_alpha($s[$i]))\
    \ { \n            $result .= mb_strtoupper($s[$i]); \n        } else {\n     \
    \       $result .= $s[$i];\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=1 tags=php |>\n<| c |>\nthanks for your solution\n<|/\
    \ c |>\n<| c |>\nI appreciate that!\n<|/ c |>\n<| c |>\nPlease provide an explanation\
    \ with your solution. Code only answers are not considered good.\n<|/ c |>\n<|\
    \ c |>\nThis is not a code-only answer. The question is tagged `php`, so *PHP\
    \ solutions*. Also, your solution doesn't account for characters like `\xE9` and\
    \ `\xFC`, which should be converted as well.\n<|/ c |>\n<| c |>\nThanks, I appreciate\
    \ your comments. I edited my answer. It now includes some explanations.\n<|/ c\
    \ |>\n<| a tags=php |>\n<code>\n$str=str_split($str);\n$reverse=array_reverse($str);\n\
    $str=implode($reverse);\necho $str;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease\
    \ explain your answer, how it solves the problem and why it works\n<|/ c |>\n\
    <| c |>\nThe first line will give us an array of strings. Next we are simply reversing\
    \ the array and finally joining all strings into one string.  This is what we\
    \ need\n<|/ c |>\n<| a tags=php dscore=1 |>\nI think your code is fine, just to\
    \ mention it here, as pointed out, this code does not handle unicode characters\
    \ as well.\nHere is an example using mb_strtoupper which handles unicode characters\
    \ as well and also handles multibyte characters.\n<code>\n<?php", "  return preg_replace_callback(\"\
    /./u\",\n    function($m) {\n      return (ctype_lower($m[0]) ? strtoupper($m[0])\
    \ : strtolower($m[0]));\n    },\n    $s);\n}\n</code>\n<|/ a tags=string,php,letters,lowercase\
    \ |>\n<| c |>\nThat is amazing! Thank you so much!\n<|/ c |>\n<| c |>\nThanks\
    \ for showing how to use PHP's ctype_lower. This was exactly what I was looking\
    \ for.\n<|/ c |>\n<| a dscore=2 tags=string,php,letters,lowercase |>\nIn PHP you\
    \ can use the ctype_lower() function to check for a lowercase character:\n<code>\n\
    if (ctype_lower($str)) {\n    // do something\n}\n</code>\n<|/ a |>\n<| a tags=string,php,letters,lowercase\
    \ |>\n<code>\n$string = 'hello';\n$string = mb_convert_case($string, MB_CASE_LOWER);\n\
    echo $string; // Output: hello\n</code>\n<|/ a dscore=2 |>\n<| c |>\nAs of PHP\
    \ 7.0 you can use mb_strtolower() instead of this custom function. http://php.net/manual/en/function.mb-strtolower.php\n\
    <|/ c |>\n<| a tags=string,php,letters,lowercase |>\nThis solution works for me:\n\
    <code>\n$string = 'hello';\n$string = mb_convert_case($string, MB_CASE_LOWER);\n\
    echo $string; // Output: hello\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,php,letters,lowercase\
    \ |>\nYou can use preg_replace():\n<code>\n$string = 'Hello';\n$pattern = '/[a-z]/i';\n\
    $replace = '\\L';\n\n$string = preg_replace($pattern, $replace, $string);\necho\
    \ $string; // output: Hello\n</code>\nThis pattern searches for lower case letters,\
    \ and replaces them with the \\L escape sequence which means \"Latin Lower\".\
    \ It also makes it case insensitive so it doesn't match lower case letters that\
    \ are not in your string.\npreg_replace()'s flags (/i) make it case insensitive.\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nThe preg_replace function can be used to\
    \ replace lowercase letters.\n<code>", "  $n = strlen($s);\n  for ($i=0; $i<$n;\
    \ $i++) {\n    $a = ord($s[$i]);\n    if (isalpha($s[$i])) {\n      if ($a >=\
    \ 65 && $a <= 90) {\n        $a += 32;\n      }\n      if ($a >= 97 && $a <= 122)\
    \ {\n        $a -= 32;\n      }\n      $s[$i] = chr($a);\n    }\n  }\n  return\
    \ $s;\n}", "    // your code here\n    $newString = \"\";\n    for($i = 0; $i\
    \ < strlen($s); $i++) {\n        $char = substr($s, $i, 1);\n        if(ctype_upper($char))\
    \ {\n            $newString .= strtoupper($char);\n        } else if(ctype_lower($char))\
    \ {\n            $newString .= strtolower($char);\n        } else {\n        \
    \    $newString .= $char;\n        }\n    }\n    return $newString;\n}\n\necho\
    \ solve(\"abcdefg\");", "    $s = preg_replace('/[^a-z]/i', \"\", $s);\n    return\
    \ str_replace(\n        array(\n            '#a@c',\n            '#A@c',\n   \
    \         '#a@C'\n        ),\n        array(\n            'A',\n            'a',\n\
    \            'a'\n        ),\n        $s\n    );\n}\n", "    $newS = \"\";\n \
    \   foreach (str_split($s) as $key => $letter) {\n        if (ctype_alpha($letter))\
    \ {\n            $newS .= strtoupper($letter);\n        } else {\n           \
    \ $newS .= $letter;\n        }\n    }\n    return $newS;\n}\n\necho \"$result\\\
    n\";\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    $s = preg_replace('/[^a-zA-Z]+/',\
    \ '', $s);\n    $s = strtolower($s);\n    return $s;\n}", "    foreach ($s as\
    \ $key => $val) {\n        if (ctype_alpha($val)) {\n            $newVal = strtoupper($val);\n\
    \        } else {\n            $newVal = $val;\n        }\n        $s[$key] =\
    \ $newVal;\n    }\n    return implode(\"\", $s);\n}\n\n$input = \"a@#c\";\n$result\
    \ = solve($input);\necho $result;\n</code>\n<|/ a tags=php,algorithm |>\n<| a\
    \ dscore=0 tags=php,algorithm |>\nYou can use strtr() and a regular expression\
    \ replacement, like:\n<code>\n$input = '#a@#c';\n", "    $str='';\n    $c=0;\n\
    \    for($i=0;$i<strlen($s);$i++){\n        if($s[$i]==='a' || $s[$i]==='A'){\n\
    \            $str .=strtoupper($s[$i]);\n        }elseif($s[$i]==='b' || $s[$i]==='B'){\n\
    \            $str .=strtolower($s[$i]);\n        }else{\n            $str .=$s[$i];\n\
    \        }\n    }\n    return $str;\n}\n", "    $s = str_ireplace(\n        array_map(\n\
    \            function($i){ return strtolower($i); },\n            str_split($s)\n\
    \        ),\n        array_map(\n            function($i){ return strtoupper($i);\
    \ },\n            str_split($s)\n        ),\n        $s\n    );\n    if ($s ==\
    \ '')\n        return '';\n\n    return $s;\n}\n\n$s = solve(\n    '#a@C'\n);\n\
    \necho $s; //#A@c\n", "    \n    $result = \"\";\n    $length = strlen($s);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $c = $s[$i];\n        \n    \
    \    if (ctype_alpha($c)) {\n            $result .= strtoupper($c);\n        }\
    \ else {\n            $result .= $c;\n        }\n    }\n    \n    if ($result\
    \ == \"\") {\n        $result = strtoupper($s);\n    }\n    \n    return $result;\n\
    }", "    \n    $s = str_split($s);\n    \n    foreach ($s as &$value) {\n    \
    \    if (is_string($value)) {\n            \n            $value = strtolower($value);\n\
    \            \n            if (in_array($value, ['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z'])) {\n                \n                $value = strtoupper($value);\n\
    \            }\n        } else {\n            $value = $value; \n        }\n \
    \   }\n    \n    return implode('', $s);\n}\n\necho '<pre>';\n$result = solve(\"\
    1234\");\necho $result;\necho '</pre>';\n</code>\n<|/ a dscore=1 tags=php,reverse,string\
    \ |>\n<| c |>\nHi, thank you for your answer. Your code worked for me, however\
    \ I ended up using Rizier123's answer because it's less code\n<|/ c |>\n<| a tags=php,reverse,string\
    \ dscore=0 |>\n<code>\n<?php", "    $len = strlen($s);\n    $s = str_split($s);\n\
    \    foreach ($s as $key => &$letter) {\n        if (preg_match('/^[a-z]+$/i',\
    \ $letter)) {\n            $letter = strtoupper($letter);\n        } else {\n\
    \            $letter = $letter;\n        }\n    }\n    return implode(\"\", $s);\n\
    }\necho solve(\"1234\");", "    if (strlen($s)<3) {\n        return $s;\n    }\n\
    \    \n    // Your code here\n    \n}\n</code>\n<|/ a tags=php dscore=0 |>\n<|\
    \ c |>\nI cannot comment on other people's answers since I am new and my reputation\
    \ is not enough, that's why I posted this solution in the answers section. Please\
    \ correct me if I am wrong.\n<|/ c |>\n<| a dscore=0 tags=php |>\n<code>\n$string\
    \ = preg_replace('/([a-z])/i', '$1', $string);\n</code>\n<|/ a |>\n<| c |>\nCould\
    \ you please explain the regexp to me? Thanks!\n<|/ c |>\n<| a |>\nThis is what\
    \ I've came up with:\n<code>\n<?php\n$test = 'hello world how are you?';\n$array\
    \ = preg_split('/[^A-Za-z]+/', $test);\n$result = strrev($array[0]);\necho strrev($result);\n\
    </code>\nThis will reverse the string \"hello world how are you?\" into: \"yrol\
    \ woh era uoy\".\n<|/ a dscore=0 tags=php |>\n<| c |>\nHi Vasim, could you please\
    \ explain the regexp to me? Thanks!\n<|/ c |>\n<| c |>\nYeah, I understand. Thank\
    \ you!\n<|/ c |>\n<| a |>\n<code>", "    return preg_replace('/\\B([a-z])/', '$1',\
    \ $s);\n}\n</code>\n<|/ a tags=regex,php |>\n<| c |>\nThis one was easy to understand\
    \ and worked perfectly!\n<|/ c |>\n<| c |>\nIt will work for the sample data you\
    \ provided, but it will fail for cases like `#a@C`\n<|/ c |>\n<| c |>\nThat is\
    \ correct, I have updated the question to include your example. Thank you!\n<|/\
    \ c |>\n<| a tags=regex,php dscore=4 |>\n<code>\n<?php\n$string = \"Hello World!\"\
    ;\n$pattern = \"(\\w)(\\w*)\";\necho preg_replace($pattern, '\\U$1', $string);",
  "    $l=strlen($s);\n    for($i=0;$i<$l;$i++){\n        if(ctype_alpha($s[$i])){\n\
    \            if(ctype_upper($s[$i])){\n                $s[$i] = $s[$i]^32;\n \
    \           }else{\n                $s[$i] = $s[$i]^16;\n            }\n     \
    \   }\n    }\n    return $s;\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\n\
    Thanks so much! :)\n<|/ c |>\n<| c |>\nThanks, this is exactly what I was looking\
    \ for but did not think of. This is a great solution.\n<|/ c |>\n<| c |>\nThis\
    \ is not an efficient way to do this... Please see my answer for a solution that\
    \ is more efficient.\n<|/ c |>\n<| c |>\nThe above solution does not work when\
    \ a string contains numbers.\n<|/ c |>\n<| c |>\nThanks very much for your kind\
    \ explanation.\n<|/ c |>\n<| a tags=php,string |>\nYou could just use strrev()\
    \ to reverse the string, then trim off the begining and end whitespace.\n<|/ a\
    \ dscore=5 |>\n<| c |>\nThis is also good solution to reverse the string! But\
    \ how to remove only the first and last spaces?\n<|/ c |>\n<| c |>\n`trim()` does\
    \ that. `trim($input, \"  \");`\n<|/ c |>\n<| c |>\nTo be clear, trim will remove\
    \ whitespaces *on the beginning and end of the string*, so any whitespaces within\
    \ the string will not be removed.\n<|/ c |>\n<| c |>\nThis solution is not efficient.\
    \ It converts every letter from upper to lower case, which is O(n^2) on string\
    \ size.\n<|/ c |>\n<| a dscore=4 tags=php,string |>\nTo remove only the first\
    \ and last spaces, use this:\n<code>\n$string = preg_replace(\"/^(\\s+)|(\\s+)$/\"\
    , \"\", $string);\n</code>\n<|/ a |>\n<| c |>\nthis only remove spaces at beginning\
    \ and end\n<|/ c |>\n<| a dscore=3 |>\nA better solution is to use strrev() and\
    \ trim(), like this:\n<code>\n$str = strrev($str);\n$str = trim($str);\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nWhile this works it takes O(n) time. Also note\
    \ that OP wants to keep uppercase letters. `strrev` can only go ", "    $result\
    \ = '';\n    for($i = 0; $i < strlen($s); $i++) {\n        if(ctype_alpha($s[$i]))\
    \ {\n            if(ctype_upper($s[$i])) {\n                $result .= strtoupper($s[$i]);\n\
    \            } else {\n                $result .= strtolower($s[$i]);\n      \
    \      }\n        } else {\n            $result .= $s[$i];\n        }\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI think OP wanted\
    \ to reverse the whole string and not each individual letter.\n<|/ c |>\n<| c\
    \ |>\nThanks, this helped me a lot!\n<|/ c |>\n<| a |>\nA little more cleaner\
    \ solution using recursion:\n<code>", "    $newstr = \"\";\n    foreach (str_split($s)\
    \ as $char) {\n        if (ctype_alpha($char)) {\n            $char = (ord($char)\
    \ - ord('a')) % 26 + ord('a');\n        } else {\n            $char = ord($char);\n\
    \        }\n        $newstr .= chr($char);\n    }\n    return $newstr;\n}\n</code>\n\
    <|/ a tags=string,php dscore=2 |>\n<| a |>\nThis may help you\n<code>\n$arr =\
    \ '#a@C';\n$arr1 = str_split($arr);\n$arr2 = str_split($arr1);\n$arr3 = str_split($arr2);\n\
    $arr4 = str_split($arr3);\n$arr5 = str_split($arr4);\n$arr6 = str_split($arr5);\n\
    $arr7 = str_split($arr6);\n$arr8 = str_split($arr7);\n$arr9 = str_split($arr8);\n\
    $arr10 = str_split($arr9);\n$arr11 = str_split($arr10);\n$arr12 = str_split($arr11);\n\
    $arr13 = str_split($arr12);\n$arr14 = str_split($arr13);\n$arr15 = str_split($arr14);\n\
    $arr16 = str_split($arr15);\n$arr17 = str_split($arr16);\n$arr18 = str_split($arr17);\n\
    $arr19 = str_split($arr18);\n$arr20 = str_split($arr19);\n$arr21 = str_split($arr20);\n\
    $arr22 = str_split($arr21);\n$arr23 = str_split($arr22);\n$arr24 = str_split($arr23);\n\
    $arr25 = str_split($arr24);\n$arr26 = str_split($arr25);\n$arr27 = str_split($arr26);\n\
    $arr28 = str_split($arr27);\n$arr29 = str_split($arr28);\n$arr30 = str_split($arr29);\n\
    $arr31 = str_split($arr30);\n$arr32 = str_split($arr31);\n$arr33 = str_split($arr32);\n\
    $arr34 = str_split($arr33);\n$arr35 = str_split($arr34);\n$arr36 = str_split($arr35);\n\
    $arr37 = str_split($arr36);\n$arr38 = str_split($arr37);\n$arr39 = str_split($arr38);\n\
    $arr40 = str_split($arr39);\n", "    $r = '';\n    for ($i = 0, $len = strlen($s);\
    \ $i < $len; $i++) {\n        if (!ctype_alpha($s[$i])) {\n            $r = strtoupper($r);\n\
    \        } else {\n            $r = strtolower($r);\n        }\n    }\n    return\
    \ strtoupper($r);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThanks for your answer,\
    \ but I don't think this is what the question is asking\n<|/ c |>\n<| c |>\ni\
    \ think this was the correct answer but it seems overly complicated for such a\
    \ simple problem\n<|/ c |>\n<| c |>\n: This is my own way of solving this question.\
    \ As far as I know, there are other ways to do that, but I don't think they would\
    \ work efficiently.\n<|/ c |>\n<| c |>\n: I think that this solution is more efficient\
    \ than your solution.\n<|/ c |>\n<| c |>\nit depends on how you define efficient\n\
    <|/ c |>\n<| a tags=php |>\nIf it is ok to convert '#a@C' to '#A@c', you can do\
    \ this:\n<code>\n$s = \"#a@C\";\n$len = strlen($s);\n$s = preg_replace('/#[a-z]/i',\
    \ \"#$0\", $s);\n$s = preg_replace('/#$/i', \"#$0\", $s);\nreturn substr($s, 0,\
    \ -1 * ($len));\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you for pointing out\
    \ the flaw, I edited my answer and removed it.\n<|/ c |>\n<| a tags=php |>\nI\
    \ used the original answer but changed it a bit. I wanted to convert a string\
    \ from upper to lower case and back again and this is what I came up with:\n<code>",
  "    $result = '';\n    foreach ($s as $c) {\n        if (ctype_alpha($c)) {\n \
    \           $result .= strtoupper($c);\n        } else {\n            $result\
    \ .= $c;\n        }\n    }\n    return $result;\n}\n", "    return preg_replace_callback('/./u',\
    \ function($x){\n        return ctype_alpha($x[0]) ? mb_strtoupper(mb_substr($x,\
    \ 1)) : strtolower($x);\n    }, $s);\n}", "  return strrev($s) . strrev(strtr($s,\
    \ 'a', 'A'));\n}\n</code>\n<|/ a tags=php,string dscore=2 |>\n<| a dscore=2 |>\n\
    You don't need to use array_count_values() to get the frequency of letters, instead\
    \ you can use array_count_values() on the string and use array_flip() to flip\
    \ the array to the other way around. Now you can iterate over this flipped array\
    \ and find the letter with the highest count. Here is what I came up with:\n<code>",
  "    $len = strlen($s);\n    for($i = 0; $i < $len; $i++){\n        if (ctype_alpha($s[$i]))\
    \ {\n            $s[$i] = strtoupper($s[$i]);\n        }\n    }\n    return str_replace(array('\"\
    ', \"'\"), array('\"', \"''\"), $s);\n}\n\necho solve(\"1234\"); //4321\necho\
    \ solve(\"ab\"); //AB\necho solve(\"#a@C\"); //#A@c", "    $s = preg_replace('/\\\
    W/', '', $s);\n    $chars = str_split($s);\n    $result = \"\";\n    foreach($chars\
    \ as $char) {\n        $result .= $char . strtoupper($char);\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHi, what if we don't know\
    \ what is the string's alphabet?\n<|/ c |>\n<| c |>\nThen you can only solve the\
    \ string from front to back, no matter the alphabet\n<|/ c |>\n<| c |>\nThanks.\
    \ But I tried to avoid using loop. I want to solve it with regex.\n<|/ c |>\n\
    <| a |>\nThis can be done with the help of regex.\n\n<code>", "    // Your code\
    \ here\n    \n    $string = strrev($s);\n    $firstChar = strpos($string, 'a');\n\
    \    $lastChar = strpos($string, 'z');\n    if ($firstChar !== false || $lastChar\
    \ !== false) {\n        $string = implode(array_reverse(str_split($string)));\n\
    \    }\n    \n    return $string;\n}\n\necho solve(\"1234\"); // 4321\necho solve(\"\
    ab\"); // AB\necho solve(\"#a@C\"); // #A@c", "    // your code here\n    $reverse\
    \ = array();\n    for($i = 0; $i < strlen($s); $i++){\n        if(ctype_alpha($s[$i])){\n\
    \            $reverse[$i] = $s[$i];\n        }\n        else{\n            $reverse[$i]\
    \ = strtoupper($s[$i]);\n        }\n    }\n    return implode('', $reverse);\n\
    }\n", "    $chars = str_split($s);\n    $reverse = str_repeat(chr(32), count($chars)\
    \ - 1);\n    return str_replace($chars, $reverse, $s);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this link may answer the question, it is better to include\
    \ the essential parts of the answer here and provide the link for reference. \
    \ Link-only answers can become invalid if the linked page changes. - [From Review](/review/low-quality-posts/16704468)\n\
    <|/ c |>\n<| c |>\nThanks for your comment, but as I said, it was an answer to\
    \ a question asked by someone else. I know it's bad practice on SO, but I still\
    \ don't really understand why it would be considered a bad practice, and I'm glad\
    \ it's here in case anyone else stumbles upon this. I believe that my answer was\
    \ still complete as is, as I still provided the code for the function I wanted\
    \ to use anyway.\n<|/ c |>\n<| c |>\nI actually didn't know that str_replace()\
    \ can take a variable number of arguments. I figured that out, but since I wanted\
    \ to have it change each letter, I had to call str_replace() three times, one\
    \ for each letter. I suppose that made it much more difficult for me to keep track\
    \ of the number of characters in the string. Thanks for your help, though.\n<|/\
    \ c |>\n<| c |>\nI should also mention that the question was asking how to reverse\
    \ the cases of letters, not just reversing the string.\n<|/ c |>\n<| c |>\n, you're\
    \ right, I forgot about that. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0\
    \ tags=php |>\nHere's my solution:\n<code>", "  $s = strtr($s, 'a' => \"A\", 'b'\
    \ => \"B\", 'c' => \"C\", 'd' => \"D\", 'e' => \"E\", 'f' => \"F\", 'g' => \"\
    G\", 'h' => \"H\", 'i' => \"I\", 'j' => \"J\", 'k' => \"K\", 'l' => \"L\", 'm'\
    \ => \"M\", 'n' => \"N\", 'o' => \"O\", 'p' => \"P\", 'q' => \"Q\", 'r' => \"\
    R\", 's' => \"S\", 't' => \"T\", 'u' => \"U\", 'v' => \"V\", 'w' => \"W\", 'x'\
    \ => \"X\", 'y' => \"Y\", 'z' => \"Z\");\n  $s = strtr($s, 'A' => \"a\", 'B' =>\
    \ \"b\", 'C' => \"c\", 'D' => \"d\", 'E' => \"e\", 'F' => \"f\", 'G' => \"g\"\
    , 'H' => \"h\", 'I' => \"i\", 'J' => \"j\", 'K' => \"k\", 'L' => \"l\", 'M' =>\
    \ \"m\", 'N' => \"n\", 'O' => \"o\", 'P' => \"p\", 'Q' => \"q\", 'R' => \"r\"\
    , 'S' => \"s\", 'T' => \"t\", 'U' => \"u\", 'V' => \"v\", 'W' => \"w\", 'X' =>\
    \ \"x\", 'Y' => \"y\", 'Z' => \"z\");\n  if (strlen($s) === 0) {\n    return \"\
    \";\n  }\n  return $s;\n}\n", "    if (preg_match_all(\"/[a-z]/\", $s, $matches))\
    \ {\n        foreach ($matches[0] as $match) {\n            $s[$i] ^= $match;\n\
    \        }\n    }\n    $s = strtolower($s);\n    if (strlen($s) == 0) {\n    \
    \    return \"\";\n    }\n    return $s;\n}\n</code>\n<|/ a tags=php,string |>\n\
    <| c |>\nYou don't need preg_match_all to check if a string contains any letters.\
    \ You can use strpos to check if a string contains a letter.\n<|/ c |>\n<| c |>\n\
    You're right about that - I edited my answer.\n<|/ c |>\n<| a dscore=1 |>\nThis\
    \ is a bit tricky, because strtolower() does not work with '#'. \nSo we have to\
    \ check for all possible cases.\nI came up with following code:\n<code>", "  \
    \  // your code here\n    \n    return $s;\n}\n</code>\n<|/ a tags=php,string\
    \ dscore=0 |>\n<| c |>\nHow does this work for `solve(\"#a@C\")` ? It returns\
    \ `#a@c`\n<|/ c |>\n<| c |>\nyes it does, but it is expected result from the question\n\
    <|/ c |>\n<| c |>\nAnd what does `#a@c` give? You haven't specified what to do\
    \ in that case.\n<|/ c |>\n<| c |>\nI thought it was just a sample string from\
    \ question\n<|/ c |>\n<| a tags=php,string dscore=0 |>\nYou can use preg_replace\
    \ and \\w to get the non letters.\n<code>\npreg_replace('/\\w/', ' ', $string);\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if there already is a space in front.\
    \ Also, this will not allow capital letters or numbers to stay.\n<|/ c |>\n<|\
    \ c |>\nAh, I misread the question, I thought the string was already trimmed.\
    \  If there already is space, then this will be the answer.\n<|/ c |>\n<| c |>\n\
    I agree, this is not the best answer and should probably not be used.\n<|/ c |>\n\
    <| c |>\nI do agree.  It does not do what the OP asked.\n<|/ c |>\n<| c |>\nI\
    \ agree with this answer too\n<|/ c |>\n<| a |>\nThis solution works even if there\
    \ is already a space in front:\n<code>\n$string = \"foo bar baz\";\n$string =\
    \ preg_replace('/(^\\s*|\\s+)/', ' ', $string);\n</code>\n<|/ a dscore=0 tags=php,string\
    \ |>\n<| a dscore=0 |>\nTry this:\n<code>", "    $a = 0;\n    $len = strlen($s);\n\
    \    for($i = 0; $i < $len; $i++){\n        $a = $a + ((strpos($s, $s[$i])) ?\
    \ strlen($s[$i]) - strlen($s[$i]) : 0);\n    }\n    $d = $a % 2 == 0;\n    for($i\
    \ = $len - 1; $i >= 0; $i--){\n        if(strpos($s, $s[$i]) === false){\n   \
    \         $s = strtoupper($s);\n            break;\n        }\n        $s = strtolower($s);\n\
    \    }\n    return ($d == true) ? $s : $s . $s[$len - 1];\n}\n</code>\n<|/ a tags=string,php,preg-match,str-replace,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\n<?php\n\n    $str = \"1234\";\n\n    $newstr =\
    \ \"\";\n    foreach (str_split($str) as $letter) {\n        $newstr .= ($letter\
    \ == \"1\" ? \"2\" : \"1\") . $letter;\n    }\n    echo $newstr;\n", "  $str =\
    \ '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $str .= $s[$i];\n    if (ctype_alpha($s[$i]))\
    \ {\n      $str .= strtoupper($s[$i]);\n    } else {\n      $str .= $s[$i];\n\
    \    }\n  }\n  $str = preg_replace('/[^A-Za-z]/', '', $str);\n  $str = strrev($str);\n\
    \  if (preg_match('/[A-Z]/', $str)) {\n    return $str;\n  } else {\n    return\
    \ strtoupper($str);\n  }\n}\n\n$tests = array(\n  \"1234\",\n  \"ab\",\n  \"#a@C\"\
    \n);\nforeach ($tests as $test) {\n  $result = solve($test);\n  echo \"Test \\\
    \"$test\\\" returned \\\"$result\\\" which is not a correct result.\\n\";\n}\n\
    </code>\n<|/ a |>\n<| c |>\nHi, I have checked this code, but this is not the\
    \ right answer. Here the code works only for one input not for more than one input.\n\
    <|/ c |>\n<| c |>\nI have added more test cases, please let me know if the output\
    \ is correct.\n<|/ c |>\n<| c |>\nThank you for the code. It looks much better\
    \ than my solution. I will try this and let you know the result.\n<|/ c |>\n<|\
    \ c |>\nI tried your code on the test cases, but my result was  not correct. Can\
    \ you please have a look into it?\n<|/ c |>\n<| c |>\nI think I am getting confused\
    \ with the question, I have updated the question with new input and the test cases,\
    \ please let me know if the output is correct for you.\n<|/ c |>\n<| a |>\nI see\
    \ you're already getting a lot of good answers, here is another one which is slightly\
    \ different.\nI added a second method which does a search for the next non-letter\
    \ in the string. This method will only work on letters and it won't have any unnecessary\
    \ checks. Here it is in use:\n<code>\n$tests = array(\n  \"1234\",\n  \"ab\",\n\
    \  \"#a@C\",\n  \"A\",\n  \"@\",\n  \"Aa\",\n  \"Aa#\",\n  \"Aa#b\",\n  \"Aa#bC\"\
    ,\n  \"Aa#bC\",\n  \"@a#b\",\n  \"@a#bC\",\n  \"@a#bC\",\n  \"@a#bC\",\n  \"#a#bC\"\
    ,\n  \"#a#bC\",\n  \"#a#bC\",", "  $str = strtolower($s);\n  $str2 = str_replace($str,\
    \ $str[0]+$str[1], $str);\n  return $str2;\n}\n", "    $s = strtolower($s);\n\
    \    $s = preg_replace_callback(\"/[^a-zA-Z]/\", function ($x) {\n        return\
    \ strtoupper($x);\n    }, $s);\n    $s = preg_replace_callback(\"/([a-z])/i\"\
    , function ($x) {\n        return strtolower($x[1]);\n    }, $s);\n    return\
    \ $s;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThanks for your help.\n<|/ c |>\n\
    <| c |>\nWelcome :)\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n\n$string = \"\
    Hello, I am a string\";\n$letters = preg_split('//', $string);\n$letters = array_flip($letters);\n\
    \n$result = '';\n\nforeach($letters as $letter => $count)\n{\n    if($count ==\
    \ 1)\n    {\n        $result .= $letter;\n    }\n    else\n    {\n        $result\
    \ .= ucfirst($letter);\n    }\n}\n\necho $result;\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nNice answer! I wanted to write my own solution but this one was better.\
    \ Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  global $count;\n  $str=\"\"\
    ;\n  $count=0;\n  for ($i=0; $i<strlen($s); $i++) { \n    if($s[$i]>96 && $s[$i]<123){\n\
    \      $str=$str.$s[$i];\n    }\n    else {\n      $str=$str.strtoupper($s[$i]);\n\
    \    }\n  }\n  return($str);\n}\n\n$text=\"Hello World\";\n$len=strlen($text);\n\
    $newtext=\"\";\nfor($i=0;$i<$len;$i++){\n  $newtext=$newtext.$solve($text[$i]);\n\
    }\necho $newtext;", "  \n  $newStr = '';\n  \n  foreach (str_split($s) as $key\
    \ => $val) {\n    \n    if (ctype_alpha($val)) {\n      \n      $newStr .= strtolower($val)\
    \ . strtoupper($val);\n    } else {\n      $newStr .= $val;\n    }\n  }\n  \n\
    \  return $newStr;\n}\n\n$tests = [\n    '#a@C#' => \"#a@C\",\n    '#A@c#' =>\
    \ \"#a@C\",\n    '#A@C' => \"#A@C\",\n    '#@a#C' => \"#a@C\",\n    '#a@#C' =>\
    \ \"#a@C\",\n    '#@aC' => \"#a@C\",\n    '#a@C#' => \"#a@C\",\n    '#A@#C#' =>\
    \ \"#A@C\",\n    '#a#@C#' => \"#a@C\",\n    '#a#C@#' => \"#a@C\",\n    '#a#C#@'\
    \ => \"#a@C\",\n    '#a#C#@#' => \"#a@C\",\n    '#a#c#@C#' => \"#a@C\",\n    '#a#c#C@#'\
    \ => \"#a@C\",\n    '#a#c#C#@' => \"#a@C\",\n    '#a#c#C#@#' => \"#a@C\",\n  \
    \  '#a#c#C#@#@' => \"#a@C\",\n    '#a#C@#@#@' => \"#a@C\",\n    '#A@#C@#@#@' =>\
    \ \"#A@C\",\n    '#a#C@#@#@#@' => \"#a@C\",\n    '#a#C@#@#@#@#' => \"#a@C\",\n\
    \    '#a#C@#@#@#@#@' => \"#a@C\",\n    '#a#C@#@#@#@#@#' => \"#a@C\",\n    '#a#C@#@#@#@#@#@'\
    \ => \"#a@C\",\n    '#a#C@#@#@#@#@#@#' => \"#a@C\",\n    '#", "    $result = \"\
    \";\n    $chars = str_split($s);\n    foreach ($chars as $char) {\n        if\
    \ (ctype_alpha($char)) {\n            $chars[] = mb_strtoupper($char);\n     \
    \       $chars[] = mb_strtolower($char);\n        } else {\n            $chars[]\
    \ = $char;\n        }\n    }\n    echo implode($chars);\n}", "    $res = \"\"\
    ;\n    for($i=0; $i<strlen($s); $i++){\n        $char = strtolower($s[$i]);\n\
    \        if(isset($char)){\n            $char = isset($res[$i-1]) ? $res[$i-1].strtoupper($char)\
    \ : $char;\n        } else {\n            $char = $s[$i];\n        }\n       \
    \ $res .= $char;\n    }\n    return $res;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nI think this answer is really good, but I believe that it can be\
    \ simplified. Instead of having two for loops, you can have one for loop that\
    \ loops through both arrays, and a third variable that tells you whether you switched\
    \ each letter to lower or upper.\n<|/ c |>\n<| c |>\nYes, I think you are right\
    \ and I should add that to my answer. Anyway I think this is an interesting problem\
    \ so I up-voted your answer. :-)\n<|/ c |>\n<| c |>\nI don't think this works.\
    \ Try running it on `abc#`, for example, and you'll find it returns `abc#`, instead\
    \ of `#aBc`.\n<|/ c |>\n<| c |>\nI just found a flaw, I fixed it. I just wanted\
    \ to show the solution of the OP so he can understand more about how and why he\
    \ did it and why he didn't use preg_replace\n<|/ c |>\n<| c |>\nI added an explanation\
    \ and an explanation about what to do when he has more than one `#`. He can always\
    \ remove that part by checking the length.\n<|/ c |>\n<| a dscore=0 |>\nThe algorithm\
    \ you require is to go through the string character by character. If it is a letter,\
    \ then you replace that letters case with the next letter in the string in the\
    \ correct case. If it is a number or punctuation then you just replace the letters\
    \ case. \nTo handle multiple # in the string, you will have to keep track of which\
    \ # you are on. \nWhen you find a letter, you need to check if you were on # already.\
    \ If so then just move on to the next letter and set the case to match the previous\
    \ letter. \nIf the letter is a number or punctuation then just move on to the\
    \ next letter and set the case to match the previous letter. \nThe code below\
    \ shows what I mean. \n<code>\n<?php", "    $str1 = strtolower($s);\n    $str2\
    \ = strtoupper($str1);\n    $str3 = strrev($str2);\n    if(strlen($str3) == 0)\
    \ {\n        return $str1;\n    }\n    else {\n        return $str3;\n    }\n\
    }\n</code>\n<|/ a tags=php,string,algorithm,arrays,arrays dscore=1 |>\n<| a tags=php,string,algorithm,arrays,arrays\
    \ dscore=0 |>\nYou can convert the string to lowercase/uppercase to compare it\
    \ against the other two case-sensitive strings. Then you can convert the string\
    \ back to be displayed as-is.\n<code>", "    if (empty($s))\n        return $s;\n\
    \    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        if (ctype_alpha($s[$i]))\
    \ {\n            $tmp = strtolower($s[$i]);\n            $s[$i] = strtoupper($s[$i]);\n\
    \            $s[$i] = $tmp;\n        }\n    }\n    if (empty($s))\n        return\
    \ $s;\n    return implode('', $s);\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\nHere\
    \ is another way without using regular expression:\n<code>", "   $s = strrev($s);\n\
    \   $len = strlen($s);\n   $new_str = '';\n   $len = strlen($s);\n   for ($i =\
    \ 0; $i < $len; $i++) {\n       if (ctype_alpha($s[$i])) {\n           $new_str\
    \ .= strtoupper($s[$i]);\n       }\n       else {\n           $new_str .= $s[$i];\n\
    \       }\n   }\n   return strrev($new_str);\n}\n", "    $res = \"\";\n    for($i=0;$i<strlen($s);$i++)\
    \ {\n        $pos = array_search(strtolower($s[$i]),array_map('strtolower',$s));\n\
    \        if($pos === false) {\n            $res .= strtoupper($s[$i]);\n     \
    \   } else {\n            $res .= strtoupper($s[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n", "    $res = \"\";\n    for ($i=0; $i<strlen($s); $i++) {\n    \
    \    $res .= $s[$i];\n        if ($s[$i]>=65 && $s[$i]<=90) {\n            $res\
    \ .= strtoupper($s[$i]);\n        } else if ($s[$i]>=97 && $s[$i]<=122) {\n  \
    \          $res .= strtolower($s[$i]);\n        } else {\n            $res .=\
    \ $s[$i];\n        }\n    }\n    return $res;\n}\n", "  $rslt = \"\";\n  for ($i=0;\
    \ $i<strlen($s); $i++) {\n    $char = strtolower($s[$i]);\n    if (is_alpha($char))\
    \ {\n      $char += 0;\n      $char = $char - 96;\n    }\n    $rslt .= $char;\n\
    \  }\n  return $rslt;\n}", "    $string = \"\";\n    $s = strtolower($s);\n  \
    \  $s = str_replace(\" \", \"\", $s);\n    for ($i=0; $i<strlen($s); $i++) {\n\
    \        if (ctype_alpha($s[$i])) {\n            $string = substr($string, 0,\
    \ $i).strtoupper(substr($string, $i)).substr($string, $i+1);\n        }\n    }\n\
    \    return $string;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic function\
    \ reverseStringWithLetters($str) {\n    $stringReversed = \"\";\n    $letters\
    \ = array();\n    $strLen = strlen($str);\n    for ($i = 0; $i < $strLen; $i++)\
    \ {\n        $char = strtolower($str[$i]);\n        if ($char === \"a\") {\n \
    \           $letters[] = 'A';\n        }\n        if ($char === \"b\") {\n   \
    \         $letters[] = 'B';\n        }\n        if ($char === \"c\") {\n     \
    \       $letters[] = 'C';\n        }\n        if ($char === \"d\") {\n       \
    \     $letters[] = 'D';\n        }\n        if ($char === \"e\") {\n         \
    \   $letters[] = 'E';\n        }\n        if ($char === \"f\") {\n           \
    \ $letters[] = 'F';\n        }\n        if ($char === \"g\") {\n            $letters[]\
    \ = 'G';\n        }\n        if ($char === \"h\") {\n            $letters[] =\
    \ 'H';\n        }\n        if ($char === \"i\") {\n            $letters[] = 'I';\n\
    \        }\n        if ($char === \"j\") {\n            $letters[] = 'J';\n  \
    \      }\n        if ($char === \"k\") {\n            $letters[] = 'K';\n    \
    \    }\n        if ($char === \"l\") {\n            $letters[] = 'L';\n      \
    \  }\n        if ($char === \"m\") {\n            $letters[] = 'M';\n        }\n\
    \        if ($char === \"n\") {\n            $letters[] = 'N';\n        }\n  \
    \      if ($char === \"o\") {\n            $letters[] = 'O';\n        }\n    \
    \    if ($char === \"p\") {\n            $letters[] = 'P';\n        }\n      \
    \  if ($char === \"q\") {\n            $letters[] = 'Q';\n        }\n        if\
    \ ($char === \"r\") {\n            $letters[] = 'R';\n        }\n        if ($char\
    \ === \"s\") {\n            $letters[] = 'S';\n        }\n        if ($char ===\
    \ \"t\") {\n            $letters[] = 'T';\n        }\n        if ($char === \"\
    u\") {\n            $letters[] = 'U';\n        }\n        if ($char === \"v\"\
    ) {\n            $letters[] = 'V';\n        }\n        if ($char === \"w\") {\n\
    \            $letter", "    $strs = str_split($s);\n    foreach ($strs as $key\
    \ => &$str) {\n        if (!is_numeric($str)) {\n            $str = $strs[$key];\n\
    \        } else {\n            $str = ($strs[$key] == 1) ? $strs[$key] : $strs[$key]\
    \ . strtoupper($strs[$key]);\n        }\n    }\n    return implode($strs);\n}\n\
    </code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nWhat about `solve(\"123\")`? That's\
    \ not possible.\n<|/ c |>\n<| c |>\nI assumed that `solve(\"123\")` would return\
    \ `321`\n<|/ c |>\n<| c |>\nNo, you're just assuming the OP has some reasonable\
    \ expectations. :-)\n<|/ c |>\n<| a tags=php |>\n<code>", "\t$vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n\t$noLetters = array('!', '#', '$', '%', '^', '&', '*',\
    \ '(', ')', '@', '[', ']', '{', '}', '~', ':', ';', ':', '>', '<', '=', '+');\n\
    \n\t$len = strlen($s);\n\t$res = '';\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t\
    $char = $s[$i];\n\t\tif (in_array($char, $vowels)) {\n\t\t\t$char += strtolower($char);\n\
    \t\t}\n\t\telse if (in_array($char, $noLetters)) {\n\t\t\t$char += strtoupper($char);\n\
    \t\t}\n\t\t$res .= $char;\n\t}\n\n\treturn $res;\n}\n", "    $length = strlen($s);\n\
    \    $temp = [];\n    for($i = 0; $i < $length; $i++){\n        if(isLetter($s[$i])){\n\
    \            $temp[$i] = strtoupper($s[$i]);\n        } else {\n            $temp[$i]\
    \ = $s[$i];\n        }\n    }\n    $res = \"\";\n    $temp = [];\n    for($i =\
    \ 0; $i < $length; $i++){\n        if(isLetter($temp[$i])){\n            $temp[$i]\
    \ = strtoupper($temp[$i]);\n        } else {\n            $temp[$i] = $temp[$i];\n\
    \        }\n    }\n    for($i = 0; $i < $length; $i++){\n        if($temp[$i]\
    \ != $s[$i]){\n            $res .= $temp[$i];\n        }\n    }\n    return $res;\n\
    }\n", "    $str = str_replace(array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z'), array('z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n',\
    \ 'm', 'i', 'o', 'k', 'j', 'g', 'f', 'd', 'c', 'b', 'a', 'x'), $s);\n    $str\
    \ = str_replace(\"#\", \"$\", $str);\n    $str = str_replace(array('@', '[', ']',\
    \ '='), '', str_replace(array('1', '2', '3', '4'), array('4', '3', '2', '1'),\
    \ $str));\n    $str = str_replace('$', array('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'), $str);\n    $str = str_replace('$', array('z', 'y', 'x', 'w',\
    \ 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'i', 'o', 'k', 'j', 'g', 'f',\
    \ 'd', 'c', 'b', 'a', 'x'), $str);\n    $str = str_replace('#', array('1', '2',\
    \ '3', '4'), $str);\n    $str = str_replace('$', array('a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z'), $str);\n    $str = str_replace('#', array('a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'), $str);\n    return $str;\n}\n</code>\n\
    <|/ a tags=javascript,php |>\n<| c |>\nThis is great! I noticed when running the\
    \ code with strings like \"ab#c@\" it outputs \"ac#b\" instead of \"ab#c\". Do\
    \ you know why this happens?\n<|/ c |>\n<| c |>\nIt's because in the line \"$str\
    \ = str_replace('#', array('1', '2', '3', '4'), $str);\" you're changing the symbol\
    \ for \"#\" from \"#\" to \"$\" then you get \"ab$c\" instead \"ab#c\"\n<|/ c\
    \ |>\n<| c |>\nThe reason is because of the code above. I just changed the symbol\
    \ for \"#\" to \"$\" from \"#\" then it works just fine.\n<|/ c |>\n<| a |>\n\
    In PHP you can do something like this\n<code>\n<?php\n$string", "    $newString\
    \ = \"\";\n    $charList = str_split($s);\n    foreach ($charList as $char) {\n\
    \        if (isset($charList[$char])) \n            $charList[$char] = strrev($charList[$char]);\n\
    \        else\n            $charList[$char] = $char;\n    }\n    foreach ($charList\
    \ as $char) {\n        $newString .= $char;\n    }\n    return $newString;\n}\n",
  "    if (empty($s)) {\n        return $s;\n    }\n    $res = $s;\n    for ($i =\
    \ 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n          \
    \  $res .= strtoupper($s[$i]);\n        } else {\n            $res .= $s[$i];\n\
    \        }\n    }\n    return $res;\n}\n</code>\n<|/ a tags=string,php,lowercase,uppercase,arrays\
    \ dscore=0 |>\n<| a tags=string,php,lowercase,uppercase,arrays |>\nIf you don't\
    \ want to convert each letter to uppercase or lowercase before checking, you can\
    \ do it in the condition itself.\n<code>\n$str = \"hello\";\nif (ctype_alpha($str))\
    \ {\n    $str = strtoupper($str);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,php,lowercase,uppercase,arrays\
    \ |>\nYou can do this:\n<code>", "  $s = preg_replace('/[^a-z]+/', '', $s); //\
    \ remove all non-alphabet\n  if (empty($s)) {\n    return $s;\n  }\n  $res = $s[0];\n\
    \  for ($i = 1; $i < strlen($s); $i++) {\n    $c = $s[$i];\n    if (ctype_alpha($c))\
    \ {\n      $c =~ tr/a-z/A-Z/;\n      $c .= $res[0];\n    } else {\n      $c =\
    \ $c;\n    }\n    $res = $c;\n  }\n  return $res;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ dscore=1 |>\n<| a |>\nTry using php function strrev() with array_reverse().\n\
    This link will help you. http://php.net/manual/en/function.array-reverse.php\n\
    <|/ a dscore=0 tags=php,sorting,arrays |>\n<| a dscore=0 |>\n<code>", "    $s\
    \ = str_replace(array(\".\", \"?\"), array(\"$\", \"$\"), $s);\n    $s = str_replace(array(\"\
    !\", \"\\\"\"), array(\"\", \"\\\"\"), $s);\n    \n    foreach (str_split($s)\
    \ as $i) {\n        if(ctype_alpha($i)) {\n            $s = str_replace(chr($i),\
    \ chr($ord('A') + $ord($i) - 87), $s);\n        } else {\n            $s = $i;\n\
    \        }\n    }\n\n    return $s;\n}\n\necho solve(\"123\");\necho solve(\"\
    1?3\");\necho solve(\"ab!\");\necho solve(\"#a@C\");\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis would not work for `!1#2?4`. `str_replace` would replace `!1` with\
    \ `!2` and `?4` with `?4`\n<|/ c |>\n<| c |>\nYes, I know. I said `str_replace`\
    \ because OP wants to convert `!1` to `!2` and `?4` to `?4`, but your code would\
    \ convert `!1` to `!2?4`. My code would convert `!1` to `!2?4?`.\n<|/ c |>\n<|\
    \ a tags=replace,string,php dscore=4 |>\n<code>\n$str = 'abc!';\n$str = preg_replace('/./',\
    \ '%', $str);\n</code>\nThe above code would replace every character with a %.\
    \ \n<code>\n$str = 'abc!';\n$str = preg_replace('/./', chr(27), $str);\n</code>\n\
    This would replace every character with a %27. \n<code>\n$str = 'abc!';\n$str\
    \ = preg_replace('/./', chr(26), $str);\n</code>\nThis would replace every character\
    \ with a %26.\n<|/ a |>\n<| c |>\nThis would not work for `!1#2?4`. `preg_replace`\
    \ would replace `!1` with `!2` and `?4` with `?4`\n<|/ c |>\n<| c |>\nYes, I know.\
    \ I said `preg_replace` because OP wants to convert `!1` to `!2` and `?4` to `?4`,\
    \ but your code would convert `!1` to `!2?4`. My code would convert `!1` to `!2?4?`.\n\
    <|/ c |>\n<| c |>\nThe `preg_replace` function has a limit on the number of replacements\
    \ allowed. The OP has asked for `!", "  if($s == \"\"){\n    return $s;\n  }\n\
    \  $result = '';\n  for($i = 0; $i < strlen($s); $i++){\n    if(isset($map[$s[$i]])){\n\
    \      $result .= $map[$s[$i]];\n    }else{\n      $result .= $s[$i];\n    }\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 tags=php |>\n<| a tags=php\
    \ |>\nI agree with Pedro's answer but since you're using PHP 7 you can do the\
    \ following to avoid the use of temporary variables:\n<code>\n<?php", "    return\
    \ strrev( strtr( $s, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\
    \ );\n}\n$result = solve('abC#');\necho $result;", "    return strtr($s,\n   \
    \     '#' => array_flip(array_filter(str_split($s, '#')), 'strrev'),\n       \
    \ '@' => array_flip(array_filter(str_split($s, '@')), 'strrev')\n    );\n}\n</code>\n\
    <|/ a |>\n<| c |>\nYou have to add `'#' => array_flip(array_filter(str_split($s,\
    \ '#')), 'strrev'),\n        '@' => array_flip(array_filter(str_split($s, '@')),\
    \ 'strrev')`\n<|/ c |>\n<| c |>\nThanks! I didn't know about this possibility.\
    \ I'll fix my answer!\n<|/ c |>\n<| c |>\nAh, I see. Thank you\n<|/ c |>\n<| c\
    \ |>\nWhy are you using `strrev` on both `#` and `@`?\n<|/ c |>\n<| c |>\nbecause\
    \ `#` is actually `strrev()` in the original question, `@` is not.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\n<?php\n$str='#a@C';\n$arr=preg_split(\"/(#|@)/\", $str);\n\
    $arr2=preg_split(\"/(#|@)/\", $str, -1);\n$arr=array_map(function($a){return strrev($a);},\
    \ $arr);\n$arr2=array_map(function($a){return strrev($a);}, $arr2);\n$arr=array_combine($arr,\
    \ $arr2);\n$str=implode('', array_map(function($a){return $a=='#'?'#':'@';}, array_keys($arr)));\n\
    echo $str;\n</code>\n<|/ a tags=string,php,string |>\n<| c |>\nWhy are you splitting\
    \ on `#` and `@`?\n<|/ c |>\n<| c |>\nI wanted to split on # and @ because they\
    \ serve the same purpose\n<|/ c |>\n<| c |>\nI guess that's not the case. Your\
    \ answer will fail if there is more than 1 letter or symbol in each string, which\
    \ could be the case if `$str` is `\"ab@cd\"`\n<|/ c |>\n<| c |>\nOh ok I got it\
    \ wrong , thank you for your comment\n<|/ c |>\n<| a tags=string,php,string |>\n\
    Solution with preg_replace_callback:\n<code>\n$str='#a@C';\n$str=preg_replace_callback('/([#@])(\\\
    w", "    if ( empty($s) ) {\n        return $s;\n    }\n    foreach ( $s as $key\
    \ => $val ) {\n        $s[$key] = strtolower( $val );\n    }\n    $r = \"\";\n\
    \    foreach ( $s as $key => $val ) {\n        if ( ctype_alpha( $val ) ) {\n\
    \            if ( isset( $r[$key] ) ) {\n                $r[$key] .= strtoupper(\
    \ $val );\n            } else {\n                $r[$key] = strtoupper( $val );\n\
    \            }\n        } else {\n            $r[$key] = $val;\n        }\n  \
    \  }\n    return implode( $r );\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI did\
    \ my own function for this in PHP, but I hope it helps.\n<code>\n<?php", "   \
    \ return preg_replace_callback('/./u', function($m) {\n        return ctype_upper($m[0])\
    \ ? mb_strtoupper($m[0]) : mb_strtolower($m[0]);\n    }, $s);\n}\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\n<code>", "    $s = strtolower($s);\n    $arr = str_split($s);\n\
    \    foreach($arr as $key => $value) {\n        if($value==='a' || $value==='A')\
    \ {\n            if(isset($arr[$key+1])) {\n                $arr[$key+1] = strtoupper($arr[$key+1]);\n\
    \                unset($arr[$key]);\n            }\n        }\n        if($value==='b'\
    \ || $value==='B') {\n            if(isset($arr[$key-1])) {\n                $arr[$key-1]\
    \ = strtoupper($arr[$key-1]);\n                unset($arr[$key]);\n          \
    \  }\n        }\n        if($value==='c' || $value==='C') {\n            if(isset($arr[$key-1]))\
    \ {\n                $arr[$key-1] = strtoupper($arr[$key-1]);\n              \
    \  unset($arr[$key]);\n            }\n            if(isset($arr[$key+1])) {\n\
    \                $arr[$key+1] = strtoupper($arr[$key+1]);\n                unset($arr[$key]);\n\
    \            }\n        }\n        if($value==='d' || $value==='D') {\n      \
    \      if(isset($arr[$key+1])) {\n                $arr[$key+1] = strtoupper($arr[$key+1]);\n\
    \                unset($arr[$key]);\n            }\n            if(isset($arr[$key-1]))\
    \ {\n                $arr[$key-1] = strtoupper($arr[$key-1]);\n              \
    \  unset($arr[$key]);\n            }\n        }\n        if($value==='e' || $value==='E')\
    \ {\n            if(isset($arr[$key+1])) {\n                $arr[$key+1] = strtoupper($arr[$key+1]);\n\
    \                unset($arr[$key]);\n            }\n            if(isset($arr[$key-1]))\
    \ {\n                $arr[$key-1] = strtoupper($arr[$key-1]);\n              \
    \  unset($arr[$key]);\n            }\n        }\n        if($value==='f' || $value==='F')\
    \ {\n            if(isset($arr[$key-1])) {\n                $arr[$key-1] = strtoupper($arr[$key-1]);\n\
    \                unset($arr[$key]);\n            }\n            if(isset($arr[$key+1]))\
    \ {\n                $arr[$key+1] = strtoupper($arr[$key+1]);\n              \
    \  unset($arr[$key]);\n            }\n        }\n        if($value==='g' || $value==='G')\
    \ {\n            if(isset($arr[$key+1])) {\n                $arr[$key+1] = strto",
  "    $str = explode(\"\",$s);\n    for($i=0;$i<count($str);$i++) {\n        if(ctype_alpha($str[$i]))\
    \ {\n            $str[$i] = strtoupper($str[$i]);\n        }\n        else {\n\
    \            $str[$i] = strtolower($str[$i]);\n        }\n    }\n    $str = implode(\"\
    \", $str);\n    return $str;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    $a = array(\"12\",\"34\",\"56\",\"78\",\"90\",\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$b = array_map(\"ord\", $a);\n\
    $c = array_fill(0,count($a),0);\n$c = array_replace($c,$b);\n$d = array_reverse($c);\n\
    $e = array_combine($a,$d);\n$f = array_keys($e);\n$g = array_values($e);\n$h =\
    \ '\"'.implode('\",\"',$f).'\"';\necho '[ '.$h.' ]';\n</code>\n<|/ a dscore=1\
    \ tags=php |>\n<| a tags=php |>\n<code>\n    <?php", "    return preg_replace_callback('/./',\
    \ function($m) {\n        return ctype_lower($m[0]) ?\n            strrev($m[0])\
    \ : strtoupper($m[0]);\n    }, $s);\n}\necho solve(\"1234\");", "    // write\
    \ your code in PHP7.0\n    \n    foreach (str_split($s) AS $key => $value) {\n\
    \        if (preg_match('/\\P{L}/u', $value)) {\n            $value = strtoupper($value);\n\
    \        } elseif (preg_match('/\\P{U}/u', $value)) {\n            $value = strtolower($value);\n\
    \        }\n    }\n    \n    return $s;\n}\n</code>\n<|/ a tags=php,string,arrays,loops\
    \ dscore=4 |>\n<| c |>\nThe `u` modifier on `\\P{L}` seems not to work in PHP\
    \ 7.3, but `'/^\\P{L}$/u'` works.\n<|/ c |>\n<| a dscore=4 tags=php,string,arrays,loops\
    \ |>\n<code>", "    $s = $s ?: 'a';\n    $s = strtolower($s);\n    $s = preg_replace('/\\\
    W/', '', $s);\n    if (preg_match('/[a-z]/', $s) !== false)\n        return strtoupper($s);\n\
    \    return $s;\n}\n</code>\n<|/ a tags=php,string,reverse dscore=5 |>\n<| c |>\n\
    You just made me realize I was looking for a way to reverse a string without having\
    \ to convert to lowercase. Your solution makes this look very clean and efficient!\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question as it states \"...if the string\
    \ contains no letters, reverse the string.\"\n<|/ c |>\n<| c |>\nThis is just\
    \ awesome! Thank you\n<|/ c |>\n<| c |>\nThis should be the accepted answer, it\
    \ is very simple and efficient.\n<|/ c |>\n<| a tags=php,string,reverse |>\nI\
    \ didn't have enough rep to add a comment, so adding my solution to this question.\
    \ \nYou can use\n<code>\nrtrim($str, \" \");\n</code>\nto remove whitespaces.\n\
    <|/ a dscore=5 |>\n<| c |>\nrtrim removes spaces from both sides of the string.\n\
    <|/ c |>\n<| c |>\n: Yes, but rtrim() removes whitespace from the right hand side,\
    \ therefore the string will be reversed without spaces. \n\n\"hello world\" will\
    \ be \"orld\"\n<|/ c |>\n<| c |>\nThis is by far the best answer. Very straightforward\
    \ and easy. \nThank you\n<|/ c |>\n<| c |>\nThis is very useful when you don't\
    \ want to convert string to lowercase or uppercase and just want to reverse it.\n\
    <|/ c |>\n<| c |>\nThis is an answer for someone looking to reverse a string without\
    \ lowercasing or uppercasing it\n<|/ c |>\n<| a |>\n<code>", "    \n    foreach\
    \ (str_split($s) as $char) {\n        if (preg_match('/[a-z]/', $char)) {\n  \
    \          $char[0] = strtoupper($char[0]);\n            $char[0] = strtolower($char[0]);\n\
    \        } elseif (preg_match('/[A-Z]/', $char)) {\n            $char[0] = strtolower($char[0]);\n\
    \            $char[0] = strtoupper($char[0]);\n        } else {\n            $char\
    \ = $char;\n        }\n    }\n    return implode('', str_split($s));\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nI like using regex for these kinds of problems, this\
    \ can be done very simply in one line:\n<code>\n$str = \"ab#a@C\"; //the string\
    \ to work with\n$str = preg_replace('/([a-z])/i', '\\U$1\\E', $str); //add uppercase\
    \ letters to lower and lowercase letters to upper and capitalize \n$str = strtolower($str);\
    \ //convert all to lowercase\n$str = preg_replace('/([A-Z])/i', '\\U$1\\E', $str);\
    \ //add uppercase letters to lower and lowercase letters to upper and capitalize\
    \ \n$str = strtoupper($str); //convert all to uppercase\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| c |>\nYou don\u2019t need to do that in one call\n<|/ c |>\n<| c |>\n\
    This doesn\u2019t answer the question, which is about a non-trivial solution\n\
    <|/ c |>\n<| a dscore=0 |>\nA non regex version that works well with PHP and does\
    \ not involve any additional classes and functions:\n<code>\n/**\n * Reverse the\
    \ characters in a string\n *\n * string $str\n * string\n */", "  $string = strtolower($s);\n\
    \  \n  \n  if(preg_match(\"/[a-cA-C]/\", $string)) {\n    $string = strrev($string);\n\
    \  }\n  \n  if(preg_match(\"/[a-zA-z]/\", $string)) {\n    $string = strrev($string);\n\
    \  }\n  \n  return $string;\n}\n\n$s = solve(\"aaAbBccC\");\necho \"The reversed\
    \ string is $s\";\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThanks very much\
    \ for explaining that\n<|/ c |>\n<| a |>\n<code>\n$str = \"Hello World!\";\n$newStr\
    \ = str_replace(\n  array(\"Hello\",\"World\",\"!\"),\n  array(\"Hi\",\"Nice to\
    \ meet you!\",\"!\"),\n  $str\n);\n</code>\n<|/ a tags=php,string dscore=0 |>\n\
    <| c |>\nPlease add an explanation.\n<|/ c |>\n<| c |>\n`str_replace` is probably\
    \ the most obvious answer, but it's a bit of a code smell. The problem is that\
    \ this solution removes other characters which aren't just letters. For example,\
    \ what about a `$str = \"Hello, World\"` ?\n<|/ c |>\n<| c |>\nThank you, I had\
    \ considered that but decided it would be better to keep it simple and just give\
    \ the user some guidance if they need help\n<|/ c |>\n<| c |>\n`str_replace` will\
    \ replace characters with _other_ characters, so if you pass an array with `\"\
    Hello\"` as the first and `'!'` as the second, you're going to replace all instances\
    \ of `'!'` with `\"Hi\"`. I'm not sure whether that is actually a problem for\
    \ OP or not; it certainly is a problem for me.\n<|/ c |>\n<| c |>\nAgreed! I was\
    \ just pointing out that your answer doesn't really provide a full solution for\
    \ the problem.\n<|/ c |>\n<| a dscore=0 |>\nA simple solution that doesn't require\
    \ regular expressions is to split each word into an array and reverse each element,\
    \ implode it back into a string:\n<code>\n$str = \"aaAbBccC\";\n$str = implode(\"\
    \ \", array_map(function($word) {\n    return implode(array_reverse(str_split($word)),\
    \ str_split($word));\n}, explode(\" \", $str)));\necho $str;\n</code>\nDemo\n\
    <|/ a tags=php,string |>\n<| a tags=php,string d", "    foreach (str_split($s)\
    \ as $char) {\n        if (ctype_alpha($char)) {\n            return strtoupper($char)\
    \ . strtolower($char);\n        } else {\n            return $char;\n        }\n\
    \    }\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nA simple test case `solve(\"\
    hello\")` results in `olleh`.  I think you may need to add the `else` clause.\n\
    <|/ c |>\n<| c |>\nyeah, I added an else clause to the code before posting. Thanks\n\
    <|/ c |>\n<| c |>\nI like how you took out the loop and used the ternary operator\
    \ to return the original letters wrapped in an uppercase letter and the lowercase\
    \ letter wrapped in another letter.  Great idea!\n<|/ c |>\n<| c |>\nThis works\
    \ great to reverse the case of the first letter but if the string contains no\
    \ letters the function returns null. How to fix it? Thanks!\n<|/ c |>\n<| a |>\n\
    Try this:\n<code>\n<?php\n\n$str = 'hello';\n", "  $arr=array();\n  $s = strtolower($s);\n\
    \  $chars = str_split($s);\n  foreach ($chars as $key => $char) {\n    if (is_numeric($char))\
    \ {\n      $arr[$key] = $char;\n    } else {\n      $arr[$key] = $char;\n    }\n\
    \  }\n  $s = implode('', $arr);\n  return $s;\n}\n$result = solve(\"#a@C\");",
  "    $s = array_map('strtoupper', str_split($s));\n    foreach ($s as &$value) {\n\
    \        if (ctype_alpha($value)) {\n            $value = strtoupper($value);\n\
    \        } else {\n            $value = $value;\n        }\n    }\n    return\
    \ implode('', $s);\n}\n", "    \n}", "    $s = strtolower($s);\n    $noLetters\
    \ = preg_replace(\"/[a-z]/i\", \"\", $s);\n    $noLetters = preg_replace(\"/[^a-z]/i\"\
    , \"\", $noLetters);\n    $noLetters = strtoupper($noLetters);\n    if ($noLetters\
    \ == $s) {\n        $noLetters = strtoupper(preg_replace(\"/[^A-Z]/\", \"\", $noLetters));\n\
    \        $noLetters = preg_replace(\"/[^A-Z]/\", \"\", $noLetters);\n    }\n \
    \   return $noLetters;\n}\n\n$result = solve(\"aba\");\nvar_dump($result);", " \
    \   $count = count($s);\n    for($i=0;$i<$count;$i++){\n        if(isset($s[$i])){\n\
    \            $c = strtolower($s[$i]);\n            if(!preg_match('/[[:alpha:]]/',$c)){\n\
    \                $s[$i] = $c;\n            }\n        }\n    }\n    return implode(\"\
    \",$s);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nIt is a lot faster than my version.\
    \ Although it does not do what the OP asked, it still beats my version by a couple\
    \ milliseconds.\n<|/ c |>\n<| c |>\nThanks, I thought I had found a faster solution,\
    \ but after testing it, I see your solution is more efficient. +1\n<|/ c |>\n\
    <| a tags=php,string |>\nJust for fun: Here's a version that uses array_filter\
    \ to remove the non-letters from the input string and array_map to add uppercase\
    \ letters to each letter:\n<code>", "    $sarray = str_split($s);\n    $new_array\
    \ = array_map(function($var){\n        if (ctype_alpha($var)) {\n            return\
    \ strtoupper($var);\n        }\n        return $var;\n    }, $sarray);\n    $s\
    \ = implode('', $new_array);\n    return $s;\n}\n", "    if ( strlen($s)==0 )\
    \ {\n      return $s;\n    }\n    $str = $s;\n    foreach (str_split($str) as\
    \ $char) {\n        if (ctype_alpha($char)) {\n            $str[$strlen] = strtoupper($char);\n\
    \        } else {\n            $str[$strlen] = $char;\n        }\n    }\n    return\
    \ $str;\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\n<code>", "  if (strpos($s,\
    \ \"#\")===false) {\n    if (strpos($s, \"@\")===false) {\n      return $s;\n\
    \    } else {\n      $s = preg_replace('/@/', '&#64;', $s);\n    }\n  }\n  if\
    \ (strpos($s, \"#\")!==false) {\n    $s = preg_replace('/#/', '&#36;', $s);\n\
    \  }\n  if (ctype_upper($s)) {\n    $s = strtolower($s);\n  } else {\n    $s =\
    \ strtoupper($s);\n  }\n  return $s;\n}", "    $arr = str_split($s);\n    foreach\
    \ ($arr as $key => $item) {\n        $arr[$key] = strtolower($item);\n    }\n\
    \    $res = '';\n    foreach ($arr as $key => $item) {\n        if (ctype_alpha($item))\
    \ {\n            $res .= ucfirst(strtoupper($item));\n        } else {\n     \
    \       $res .= $item;\n        }\n    }\n    return $res;\n}\n$string = (\"0#2@\"\
    );\nvar_dump(solve($string));\n$string = (\"0#2@\");\nvar_dump(solve($string));\n\
    $string = (\"0#2@\");\nvar_dump(solve($string));\n$string = (\"@0#2\");\nvar_dump(solve($string));\n\
    $string = (\"@0#2\");\nvar_dump(solve($string));\n$string = (\"@0#2\");\nvar_dump(solve($string));",
  "    $array = array();\n    for($i = 0; $i < strlen($s); $i++){\n        if(ctype_alpha($s[$i])){\n\
    \            $array[] = strtoupper($s[$i]);\n        } else {\n            $array[]\
    \ = $s[$i];\n        }\n    }\n    return implode('', $array);\n}\n</code>\n<|/\
    \ a tags=php,function,preg-replace |>\n<| c |>\nI like how `ctype_alpha` handles\
    \ some characters (as in \"\xA3\"). The `preg_replace` seems more elegant.\n<|/\
    \ c |>\n<| a |>\n<code>\n<?php\n$string = \"The quick brown fox jumps over the\
    \ lazy dog\";\n$find = \"o\";\n$replace = \"b\";\necho preg_replace(\"/{$find}/i\"\
    , $replace, $string);", "    $s = strtolower($s);\n    $s = preg_replace('/[^a-zA-Z]+/',\
    \ '', $s);\n    $s = str_replace(' ', '', $s);\n    return $s;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=php,function |>\nJust to throw in an alternative (although\
    \ I realise that this is probably not what you want to hear!)\n<code>\n<?php",
  "    return $s;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
