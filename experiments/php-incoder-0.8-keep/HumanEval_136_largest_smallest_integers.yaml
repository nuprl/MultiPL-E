name: HumanEval_136_largest_smallest_integers
language: php
prompt: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n//\
  \ the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as None.\n\
  // Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n//\
  \ largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
  \ == (None, None)\nfunction largest_smallest_integers($lst) {\n"
tests: "function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
  \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7,\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3,\
  \ 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1,\
  \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $largest_positive = min($lst);\n  $largest_negative = max($lst);\n\
    \  if ($largest_positive < $largest_negative) {\n    return array( $largest_negative,\
    \ $largest_positive );\n  }\n  return array( $largest_positive, $largest_negative\
    \ );\n}\n\n$max_val = max($lst);\n$max_pos = array_search($max_val, $lst);\n$min_val\
    \ = min($lst);\n$min_pos = array_search($min_val, $lst);\n\n$diff_max = $max_val\
    \ - $min_val;\n$diff_min = $min_val - $max_val;\n", "  $largest_int = PHP_INT_MIN;\n\
    \  $smallest_int = PHP_INT_MAX;\n  $largest = NULL;\n  $smallest = NULL;\n  foreach\
    \ ($lst as $key => $value) {\n    if ($value < $smallest_int) {\n      $smallest_int\
    \ = $value;\n    }\n    if ($value > $largest_int) {\n      $largest_int = $value;\n\
    \    }\n    if ($largest_int > $smallest_int) {\n      $smallest = $lst[$key];\n\
    \    }\n    if ($largest_int < $smallest_int) {\n      $largest = $lst[$key];\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nNot sure why this was downvoted, this seems like a good solution\
    \ to me (albeit inefficient)\n<|/ c |>\n<| c |>\nThanks for your input. I am thinking\
    \ about this solution but i wanted to do it in more efficient way. Do you know\
    \ any more efficient solution?\n<|/ c |>\n<| c |>\nMy solution does not require\
    \ you to loop through all the integers multiple times. If you think about it,\
    \ the array is sorted in descending order. As soon as you find a value that is\
    \ larger or equal to the smallest value, you have the largest value. The smallest\
    \ value is the smallest value in that array and so on. The code just uses one\
    \ loop and stops as soon as one of the two values is no longer valid.\n<|/ c |>\n\
    <| c |>\nYes, i agree with you but i think that this code can slow down the process\
    \ (especially for very big arrays).\n<|/ c |>\n<| a dscore=0 |>\nYou can do this\
    \ with array_filter() and array_reduce() functions. First filter the negatives\
    \ with array_filter(), then find the max and min with array_reduce() and return\
    \ the result from array_reduce(). \n\narray_filter() Filters elements of an array\
    \ using a callback function\narray_reduce() Applies a given callback to each element\
    \ of the array and returns the result.\n\n<code>", "    if (empty($lst)) {\n \
    \       return array(null, null);\n    }\n    $min = 0;\n    $max = 0;\n    foreach\
    \ ($lst as $val) {\n        if ($val < 0) {\n            $min = $val;\n      \
    \  } else {\n            $max = $val;\n        }\n    }\n    if ($min == $max)\
    \ {\n        return array($min, null);\n    }\n    return array((int)$min, $max);\n\
    }\n", "    // Write your code here\n    foreach($lst as $val) {\n        if($val\
    \ < 0){\n            $a = NULL;\n        } elseif($val > 0){\n            $b =\
    \ NULL;\n        } else {\n            $a = $val;\n            $b = $val;\n  \
    \      }\n    }\n    return ($a, $b);\n}\n\nlargest_smallest_integers([5, 10,\
    \ 5, 25, 10, 5, 2]);\nlargest_smallest_integers([5, 10, 5, 25, 10, 5, 2, -3]);\n\
    largest_smallest_integers([-5, 10, 5, 25, 10, 5, 2]);\nlargest_smallest_integers([5,\
    \ 10, 5, 25, 10, 5, 2, -3]);\n", "  $result = (null, null);\n  foreach ($lst as\
    \ $value) {\n    $value = ($value < 0) ? null : $value;\n    if ($result === (null,\
    \ null)) {\n      $result = $value;\n    } elseif ($value < $result[1]) {\n  \
    \    $result = $value;\n    }\n  }\n  return $result;\n}", "  $largest = max($lst);\n\
    \  $smallest = min($lst);\n\n  return [$largest, $smallest];\n}\n", "  // Create\
    \ a list of all positive and negative integers.\n  $int_list = range(-max($lst),\
    \ max($lst) + 1);\n\n  // Return None if the list is empty.\n  if (empty($int_list))\
    \ {\n    return array(None, None);\n  }\n\n  // Find which integer is largest.\n\
    \  // Return None if it doesn't exist in $int_list.\n  $int_list_max_value = max($int_list);\n\
    \n  // Find which integer is smallest.\n  // Return None if it doesn't exist in\
    \ $int_list.\n  $int_list_min_value = min($int_list);\n\n  // Return None if the\
    \ two integers don't exist in $int_list.\n  if ($int_list_max_value == $int_list_min_value)\
    \ {\n    return array(None, None);\n  }\n\n  return array($int_list_max_value,\
    \ $int_list_min_value);\n}\n$int_list_max_value = largest_smallest_integers($int_list);\n\
    $int_list_min_value = largest_smallest_integers($int_list);", "  foreach ($lst\
    \ as $item) {\n    if (is_numeric($item)) {\n      $smallest = null;\n      $largest\
    \ = $item;\n\n      foreach ($lst as $key => $val) {\n        if ($val < $item)\
    \ {\n          $largest = $item;\n        }\n        if ($val > $item) {\n   \
    \       $smallest = $item;\n        }\n      }\n\n      if ($smallest === null\
    \ && $largest === null) {\n        return null;\n      }\n\n      return array(\"\
    smallest\" => $smallest, \"largest\" => $largest);\n    }\n  }\n\n  return null;\n\
    }\n", "  // Initialize $largest, $smallest to $lst[0] and $lst[0], respectively.\n\
    \  $largest = $smallest = $lst[0];\n  for ($i = 1; $i < count($lst); $i++) {\n\
    \    // If the current value is larger than $largest, update $largest.\n    if\
    \ ($lst[$i] > $largest) {\n      $largest = $lst[$i];\n    }\n    // If the current\
    \ value is smaller than $smallest, update $smallest.\n    else if ($lst[$i] <\
    \ $smallest) {\n      $smallest = $lst[$i];\n    }\n  }\n  // If there is at least\
    \ one negative or positive number, return them.\n  if ($largest < 0 || $smallest\
    \ > 0) {\n    return array($largest, $smallest);\n  }\n  // Return None if $lst\
    \ is empty.\n  else {\n    return null;\n  }\n}\n", "    $largest_integer = null;\n\
    \    $smallest_integer = null;\n\n    foreach ($lst as $key => $value) {\n   \
    \     if ($smallest_integer) {\n            if ($value < $smallest_integer) {\n\
    \                $largest_integer = $value;\n            }\n        }\n      \
    \  if ($value < $smallest_integer) {\n            $smallest_integer = $value;\n\
    \        }\n    }\n    if (!$smallest_integer) {\n        $smallest_integer =\
    \ null;\n    }\n    if (!$largest_integer) {\n        $largest_integer = null;\n\
    \    }\n    return array($largest_integer, $smallest_integer);\n}\n", "  $ls =\
    \ $lst;\n  $ls[] = false;\n  sort($ls);\n  $first = array_shift($ls);\n  if ($first\
    \ == false) {\n    return array(null, null);\n  }\n  if ($first < 0) {\n    return\
    \ array(null, $first);\n  }\n  foreach ($ls as $l) {\n    if ($l >= 0) {\n   \
    \   return array($l, $first);\n    }\n  }\n  return array($first, null);\n}\n",
  "  $smallest = PHP_INT_MIN;\n  $largest = -PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      if ($smallest > -$item) {\n        $smallest\
    \ = -$item;\n      }\n    } else {\n      if ($smallest < $item) {\n        $smallest\
    \ = $item;\n      }\n    }\n    if ($item > 0) {\n      if ($largest < $item)\
    \ {\n        $largest = $item;\n      }\n    } else {\n      if ($largest > $item)\
    \ {\n        $largest = $item;\n      }\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n$a = [-2147483648, -1, 0, -2147483647, -1, 0, 2147483648, -1,\
    \ 0, -2147483646, 0, -2147483646, -1, 0, 2147483646, 0, 2147483646, -1];\n$b =\
    \ [-2147483648, -1, 0, -2147483647, -1, 0, 2147483648, -1, 0, -2147483646, 0,\
    \ -2147483646, -1, 0, 2147483646, 0, 2147483646, -1];\nprintf(\"$a[0] $a[1]\\\
    n\");\nprintf(\"$b[0] $b[1]\\n\");\n$a = largest_smallest_integers($a);\n$b =\
    \ largest_smallest_integers($b);\nprintf(\"$a[0] $a[1]\\n\");\nprintf(\"$b[0]\
    \ $b[1]\\n\");", "  foreach ($lst as $item) {\n    if ($item < 0) return $item;\n\
    \  }\n  $max_value = max($lst);\n  foreach ($lst as $item) {\n    if ($item >\
    \ $max_value) return $item;\n  }\n}", "  foreach ($lst as $item) {\n    if ($item\
    \ < 0) {\n      return array(None, $item);\n    }\n  }\n\n  return array(None);\n\
    }\n", "    $largest = null;\n    $smallest = null;\n    if (count($lst) == 0)\
    \ {\n        return array();\n    }\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($largest == null || $lst[$i] < $smallest) {\n            $largest\
    \ = $lst[$i];\n        }\n        if ($smallest == null || $lst[$i] > $largest)\
    \ {\n            $smallest = $lst[$i];\n        }\n    }\n    return array($smallest,\
    \ $largest);\n}\n", "    // Initialize with largest and smallest positive numbers.\n\
    \    $max_pos = 0;\n    $min_pos = PHP_INT_MAX;\n    $max_neg = 0;\n    $min_neg\
    \ = -PHP_INT_MAX;\n\n    foreach ($lst as $key => $num) {\n        if ($num >=\
    \ 0) {\n            if ($num > $max_pos) {\n                $max_pos = $num;\n\
    \            }\n        } else {\n            if ($num < $min_pos) {\n       \
    \         $min_pos = $num;\n            }\n        }\n\n        if ($num < 0)\
    \ {\n            if ($num > $max_neg) {\n                $max_neg = $num;\n  \
    \          }\n        } else {\n            if ($num < $min_neg) {\n         \
    \       $min_neg = $num;\n            }\n        }\n    }\n\n    return array(\n\
    \        'max_pos' => $max_pos,\n        'min_pos' => $min_pos,\n        'max_neg'\
    \ => $max_neg,\n        'min_neg' => $min_neg\n    );\n}\n", "  // If empty list,\
    \ return as none.\n  if (empty($lst)) {\n    return (null, null);\n  }\n\n  $smallest\
    \ = PHP_INT_MAX;\n  $largest = -PHP_INT_MAX;\n\n  foreach ($lst as $value) {\n\
    \    if ($value < $smallest) {\n      $smallest = $value;\n    }\n\n    if ($value\
    \ > $largest) {\n      $largest = $value;\n    }\n  }\n\n  return array($smallest,\
    \ $largest);\n}\n\n$a = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9];\n", "  $max_int = array('int' => PHP_INT_MAX);\n  $min_int\
    \ = array('int' => PHP_INT_MIN);\n  foreach ($lst as $v) {\n    if ($v < $max_int['int'])\
    \ {\n      $max_int['int'] = $v;\n    }\n    if ($v > $min_int['int']) {\n   \
    \   $min_int['int'] = $v;\n    }\n  }\n  return array(\n      'min' => $min_int,\n\
    \      'max' => $max_int,\n  );\n}\n", "    $max_negative = $max_positive = null;\n\
    \    foreach ($lst as $value) {\n        if ($value > 0) $max_positive = $value;\n\
    \        if ($value < 0) $max_negative = $value;\n    }\n    return array($max_negative,\
    \ $max_positive);\n}", "  $a = array_filter($lst, function($e) use ($lst) {\n\
    \    return $e <= 0;\n  });\n  $b = array_filter($lst, function($e) use ($lst)\
    \ {\n    return $e > 0;\n  });\n  if (count($a) === 0) {\n    return (None, None)\n\
    \  } else if (count($b) === 0) {\n    return (0, 1)\n  } else {\n    return max($b),\
    \ min($a);\n  }\n}\n", "  $big = -1;\n  $small = PHP_INT_MAX;\n  $none = null;\n\
    \  foreach ($lst as $i => $x) {\n    $big = max($big, $x);\n    $small = min(PHP_INT_MAX,\
    \ $small, $x);\n    if (isset($none)) {\n      if ($x < 0) {\n        if ($x >\
    \ $none) {\n          $none = $x;\n        }\n      }\n      elseif ($x > $none)\
    \ {\n        $none = $x;\n      }\n    }\n  }\n  return array($none, $small);\n\
    }\n", "  if (empty($lst)) {\n    return array();\n  }\n\n  $lmin = PHP_INT_MAX;\n\
    \  $lmax = PHP_INT_MIN;\n\n  for ($i = 0; $i < count($lst); ++$i) {\n    $lmin\
    \ = min(abs($lst[$i]), $lmin);\n    $lmax = max($lst[$i], $lmax);\n  }\n\n  return\
    \ array($lmax, $lmin);\n}\n</code>\n<|/ a |>\n<| a tags=arrays,sorting,php |>\n\
    One way would be to create an array with your minimum and maximum numbers. Then\
    \ run a foreach($array as $value) loop, and check if the value is between those\
    \ values. This way you only have to loop through the array once.\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,sorting,php dscore=0 |>\n<code>\n<?php\n$data = array(2,\
    \ 3, 0, 5, -1, -4, 6, 7, 8, 4, -6);\n", "    // code here\n    $largest = null;\n\
    \    $smallest = null;\n    foreach($lst as $item) {\n        if ($item < $smallest)\
    \ {\n            $smallest = $item;\n        } elseif ($item > $largest) {\n \
    \           $largest = $item;\n        }\n    }\n    return ($largest, $smallest);\n\
    }\n", "    $min = 0;\n    $max = 0;\n    $first = true;\n    foreach ($lst as\
    \ $val) {\n        if (!$first) {\n            if ($val < 0) {\n             \
    \   if ($max < $val) {\n                    $max = $val;\n                }\n\
    \            } else {\n                if ($min > $val) {\n                  \
    \  $min = $val;\n                }\n            }\n        } else {\n        \
    \    $first = false;\n            if ($val < 0) {\n                $max = $val;\n\
    \            } else {\n                $min = $val;\n            }\n        }\n\
    \    }\n    return array($max, $min);\n}\n", "    if (empty($lst)) {\n       \
    \ return array(None, None);\n    }\n    $min_negative = PHP_INT_MAX;\n    $max_positive\
    \ = PHP_INT_MIN;\n    foreach ($lst as $num) {\n        if ($num < $min_negative)\
    \ {\n            $min_negative = $num;\n        } elseif ($num > $max_positive)\
    \ {\n            $max_positive = $num;\n        }\n    }\n    if ($min_negative\
    \ == PHP_INT_MAX) {\n        return array(None, None);\n    }\n    if ($max_positive\
    \ == PHP_INT_MIN) {\n        return array(None, None);\n    }\n    return array($min_negative,\
    \ $max_positive);\n}\n", "  $min = null;\n  $max = null;\n\n  foreach ($lst as\
    \ $val) {\n    // Find smallest\n    if ($min === null || $val < $min) {\n   \
    \   $min = $val;\n    }\n    // Find largest\n    if ($max === null || $val >\
    \ $max) {\n      $max = $val;\n    }\n  }\n\n  return array('min' => $min, 'max'\
    \ => $max);\n}\n", "    // Return None, None if list is empty.\n    if (empty($lst))\
    \ {\n        return array(null, null);\n    }\n\n    // Return largest negative\
    \ integer.\n    $highest_negative = array_keys($lst, -99999999);\n    $highest_negative\
    \ = array_pop($highest_negative);\n\n    // Return smallest positive integer.\n\
    \    $lowest_positive = array_keys($lst, 99999999);\n    $lowest_positive = array_pop($lowest_positive);\n\
    \n    // Return None if there are no negative or positive integers.\n    if (empty($highest_negative)\
    \ && empty($lowest_positive)) {\n        return array(null, null);\n    }\n\n\
    \    // Return largest negative integer.\n    if (empty($highest_negative)) {\n\
    \        return array($highest_negative, null);\n    }\n\n    // Return smallest\
    \ positive integer.\n    if (empty($lowest_positive)) {\n        return array(null,\
    \ $lowest_positive);\n    }\n\n    // Return largest negative integer.\n    return\
    \ array($highest_negative, $lowest_positive);\n}\n\n/**\n * Creates text to display\
    \ when an error is encountered.\n *\n * @param string $title Text to display for\
    \ the alert\n * @param string $message Text to display in the alert\n * @param\
    \ int $code The HTTP status code of the error\n * @param array $headers An array\
    \ of HTTP headers to apply to the alert\n *\n * @return string The text to display\
    \ when an error is encountered\n */", "  usort($lst, function ($a, $b) {\n   \
    \ if ($a < $b) return -1;\n    if ($a > $b) return 1;\n    return 0;\n  });\n\n\
    \  $first = current($lst);\n  if (!$first) return null;\n\n  return array($first,\
    \ key($lst));\n}\n</code>\n<|/ a tags=arrays,max,php,function,min dscore=4 |>\n\
    <| c |>\nI like this solution because it doesn't involve reinventing the wheel.\
    \ Elegant.\n<|/ c |>\n<| c |>\nThis is the best answer IMHO. Elegant and clean.\n\
    <|/ c |>\n<| c |>\nThis is the most elegant answer to this question.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\n$a = array(4,2,1,3,5,6);\n", "  $n = max($lst);\n  $m\
    \ = min($lst);\n  return ($n >= 0 && $m >= 0) ? $n : $m;\n}\n", "  if (empty($lst))\
    \ {\n    return array(None, None, None);\n  }\n\n  // Sort the list from smallest\
    \ to largest\n  $lst.sort(function($a, $b){\n    return $b - $a;\n  });\n\n  $min\
    \ = reset($lst);\n  $max = end($lst);\n\n  if ($min >= 0) {\n    return array($min,\
    \ $max, $max);\n  }\n  return array(None, $max, $max);\n}\n", "    $min = max(-inf,\
    \ $lst[0]);\n    $max = min($lst[0], $lst[1]);\n    foreach ($lst as $item) {\n\
    \        if ($item > $min) {\n            $max = $item;\n        }\n        if\
    \ ($item < $max) {\n            $min = $item;\n        }\n    }\n    return array($max,\
    \ $min);\n}\n</code>\nYou can use this function in three different ways, depending\
    \ on what you want:\n1. Return all non-None values:\n<code>\n$result = largest_smallest_integers([0,\
    \ 2, -4, 1, 5, 8, 9]);", "  uasort($lst, 'cmp');\n  return $lst[0];\n}", "  $negs\
    \ = array_filter($lst, 'is_int');\n  $pos =\n    array_filter(\n      array_map(\n\
    \        function ($n) {\n          return abs($n);\n        },\n        $lst\n\
    \      ),\n      'is_int'\n    );\n\n  if (!count($negs) && !count($pos)) {\n\
    \    return array(\n      null,\n      null\n    );\n  }\n\n  if (count($negs))\
    \ {\n    $negs = min(count($negs), 1);\n  }\n\n  if (count($pos)) {\n    $pos\
    \ = min(count($pos), 1);\n  }\n\n  return array(\n    max($negs),\n    min($pos)\n\
    \  );\n}\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| a |>\nI wrote a function\
    \ which works based on your specifications.\n<code>", "    // Sort the list from\
    \ largest to smallest integer\n    sort($lst);\n\n    // Return the first element\
    \ in the sorted list\n    if(count($lst) == 0) {\n        // No integers, return\
    \ them as None\n        return (None, None)\n    }\n\n    // Return the largest\
    \ number in the list\n    if($lst[0] > 0) {\n        // The largest number is\
    \ positive, return it\n        return (None, $lst[0])\n    }\n\n    // Return\
    \ the smallest number in the list\n    if($lst[0] == 0) {\n        // The smallest\
    \ number is 0, return it\n        return (None, 0)\n    }\n\n    // The largest\
    \ number is negative, return the smallest number\n    return (None, $lst[0])\n\
    }", "  if (empty($lst)) return (None, None);\n  $negative = array_filter($lst,\
    \ 'is_int');\n  sort($negative);\n  $positive = array_filter($lst, '!is_int');\n\
    \  sort($positive);\n  if (!empty($negative)) $largest = max($negative);\n  if\
    \ (!empty($positive)) $smallest = min($positive);\n  return (isset($largest) ?\
    \ $largest : None, isset($smallest) ? $smallest : None);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=php |>\n<code>", "  // If there are no numbers, return\
    \ an empty tuple.\n  if (empty($lst)) {\n    return array();\n  }\n\n  // Sort\
    \ $lst from largest to smallest, and then start searching\n  // from the end.\n\
    \  rsort($lst);\n\n  // Initialize $result to the first value in $lst.\n  $result\
    \ = $lst[0];\n\n  // Search for the first negative integer that is not in $lst.\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    // If this integer is not in the\
    \ list, return $result and break.\n    if (in_array($lst[$i], $lst) === false)\
    \ {\n      $result = $lst[0];\n      break;\n    }\n\n    // If this integer is\
    \ in $lst, but bigger than the previous result,\n    // update $result to the\
    \ current value.\n    if ($lst[$i] > $result) {\n      $result = $lst[$i];\n \
    \   }\n  }\n\n  // Return the tuple (a, b) where 'a' is the largest integer\n\
    \  // and 'b' is the smallest integer in the list, or None if\n  // there are\
    \ no such integers.\n  return array(($result === $lst[0]) ? null : $result, end($lst));\n\
    }\n", "  sort($lst);\n  $min = min($lst);\n  $max = max($lst);\n  if ($min < 0\
    \ || $max > 0) {\n    return array($max, $min);\n  } else {\n    return null;\n\
    \  }\n}\n", "  $ints = [];\n  $max = 0;\n  $min = 0;\n\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    if ($lst[$i] < 0) {\n      if (!isset($ints[$max])) {\n       \
    \ $ints[$max] = [];\n      }\n      $ints[$max][] = $lst[$i];\n      $max++;\n\
    \    } else {\n      if (!isset($ints[$min])) {\n        $ints[$min] = [];\n \
    \     }\n      $ints[$min][] = $lst[$i];\n      $min++;\n    }\n  }\n\n  if ($max\
    \ === 0) {\n    $max = 1;\n  }\n  if ($min === 0) {\n    $min = 1;\n  }\n\n  for\
    \ ($i = 0; $i < $min; $i++) {\n    $ints[$i] = array_reverse($ints[$i]);\n  }\n\
    \  return [$ints[$min], $ints[$max]];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ tags=php |>\nIf you're only dealing with integers, you can also use array_filter\
    \ to find the largest or smallest numbers in the array.\n<|/ a |>\n<| c |>\nThat\
    \ would return the whole array, not the largest/smallest number.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n$number = array('10','20','30','40','50','60','70','80','90','10');\n\
    $highestNum = max($number);\n$lowestNum = min($number);\necho $highestNum;\necho\
    \ $lowestNum;\n", "  // Your code here\n  $max_val = 0;\n  $min_val = 0;\n  if\
    \ (count($lst) == 0) {\n    return array(\"max\" => null, \"min\" => null);\n\
    \  }\n  if (count($lst) == 1) {\n    return array(\"max\" => $lst[0], \"min\"\
    \ => $lst[0]);\n  }\n  foreach ($lst as $val) {\n    if ($val < 0) {\n      if\
    \ ($max_val < $val) {\n        $max_val = $val;\n      }\n    }\n    else if ($val\
    \ > 0) {\n      if ($min_val > $val) {\n        $min_val = $val;\n      }\n  \
    \  }\n  }\n  if ($max_val > $min_val) {\n    return array(\"max\" => $max_val,\
    \ \"min\" => $min_val);\n  }\n  else {\n    return array(\"max\" => null, \"min\"\
    \ => null);\n  }\n}\n", "  $tuples = array_filter($lst, function($element) {\n\
    \    return $element > 0;\n  });\n  return !$tuples ? array(None, None) : $tuples;\n\
    }\n", "  if (empty($lst)) {\n    return array('None', 'None');\n  }\n  $max =\
    \ 0;\n  $min = $lst[0];\n  foreach ($lst as $value) {\n    if ($value < $min)\
    \ {\n      $min = $value;\n    } else if ($value > $max) {\n      $max = $value;\n\
    \    }\n  }\n  return array('None', $min);\n}\n", "  if (!is_array($lst)) {\n\
    \    return null;\n  }\n\n  $largest_negative = INF;\n  $smallest_positive = -\
    \ INF;\n  foreach ($lst as $n) {\n    if ($n < $smallest_positive) {\n      $smallest_positive\
    \ = $n;\n    }\n    if ($n > $largest_negative) {\n      $largest_negative = $n;\n\
    \    }\n  }\n\n  if ($largest_negative === INF || $smallest_positive === -INF)\
    \ {\n    return null;\n  }\n\n  return [$largest_negative, $smallest_positive];\n\
    }\n", "  sort($lst);\n  $neg = $num = array();\n  foreach ($lst as $number) {\n\
    \    if ($number < 0) {\n      $neg[$number] = 1;\n    } else if ($number > 0)\
    \ {\n      $num[$number] = 1;\n    }\n  }\n  if (count($neg) == count($num)) {\n\
    \    return $neg ? $neg : $num;\n  }\n  return array($neg ? $neg : $num, $num);\n\
    }\n", "  $max = null;\n  $min = null;\n  foreach ($lst as $item) {\n    if (is_null($min))\
    \ {\n      $min = $item;\n      $max = $item;\n    } else if ($item < $min) {\n\
    \      $min = $item;\n    } else if ($item > $max) {\n      $max = $item;\n  \
    \  }\n  }\n  return array($max, $min);\n}\n", "  $smallest = null;\n  $largest\
    \ = null;\n\n  $largest_integer = null;\n  foreach ($lst as $v) {\n    if ($v\
    \ < $smallest) {\n      $smallest = $v;\n    }\n    if ($v > $largest) {\n   \
    \   $largest = $v;\n    }\n  }\n\n  if ($smallest === null && $largest === null)\
    \ {\n    return array('None', 'None');\n  }\n\n  if ($smallest === null) {\n \
    \   return array($largest, $smallest);\n  }\n\n  if ($largest === null) {\n  \
    \  return array($smallest, $largest);\n  }\n\n  return array($smallest, $largest);\n\
    }\n\n", "  // Check for empty list.\n  if (!$lst) {\n    return array(None, None);\n\
    \  }\n\n  // Initialize largest and smallest to first items in the list.\n  $largest_value\
    \ = $lst[0];\n  $smallest_value = $lst[0];\n\n  // Find the largest and smallest\
    \ values.\n  foreach ($lst as $value) {\n    if ($value < $smallest_value) {\n\
    \      $smallest_value = $value;\n    }\n    if ($value > $largest_value) {\n\
    \      $largest_value = $value;\n    }\n  }\n\n  // Return tuple (largest, smallest)\n\
    \  return array($largest_value, $smallest_value);\n}\n", "  $max = -INF;\n  $min\
    \ = INF;\n  foreach ($lst as $value) {\n    if ($value < $min) {\n      $min =\
    \ $value;\n    } elseif ($value > $max) {\n      $max = $value;\n    }\n  }\n\
    \  return ($max < 0) ? array('max' => $max, 'min' => $min) : array('max' => $max,\
    \ 'min' => $min);\n}\n\n/**\n * Formats a string with a leading space and an optional\
    \ tailing space.\n *\n * Example:\n *   echo str_repeat(' ', $num);\n * Outputs:\n\
    \ *   <space><space>\n *\n * @param string $str   String to be repeated.\n * @param\
    \ string $padding String to be repeated\n * @param int    $num    Number of times\
    \ to repeat.\n *\n * @return string The repeated string.\n */", "  $result = array();\n\
    \  $largest = null;\n  $smallest = null;\n\n  foreach ($lst as $val) {\n    if\
    \ ($val < 0) {\n      $largest = $val;\n    } elseif ($val > 0) {\n      $smallest\
    \ = $val;\n    } else {\n      $result[] = null;\n    }\n  }\n\n  return array($smallest,\
    \ $largest, $result);\n}\n", "  $smallest = null;\n  $largest = null;\n  foreach\
    \ ($lst as $value) {\n    if ($smallest == null) {\n      $smallest = $value;\n\
    \      $largest = $value;\n    } elseif ($value < $smallest) {\n      $smallest\
    \ = $value;\n    } elseif ($value > $largest) {\n      $largest = $value;\n  \
    \  }\n  }\n  return array('smallest' => $smallest, 'largest' => $largest);\n}\n",
  "    $min = $max = PHP_INT_MAX;\n    foreach ($lst as $val) {\n        if ($val\
    \ < $min) {\n            $min = $val;\n        }\n        if ($val > $max) {\n\
    \            $max = $val;\n        }\n    }\n    return array($max, $min);\n}\n",
  "  $max_negative_integer = -2;\n  $min_positive_integer = -1;\n\n  foreach ($lst\
    \ as $item) {\n    if ($item < 0) {\n      if ($max_negative_integer == -2) {\n\
    \        $max_negative_integer = $item;\n      } else if ($item > $max_negative_integer)\
    \ {\n        $max_negative_integer = $item;\n      }\n    }\n\n    if ($item >\
    \ 0) {\n      if ($min_positive_integer == -1) {\n        $min_positive_integer\
    \ = $item;\n      } else if ($item < $min_positive_integer) {\n        $min_positive_integer\
    \ = $item;\n      }\n    }\n  }\n\n  return array('max_negative_integer' => $max_negative_integer,\
    \ 'min_positive_integer' => $min_positive_integer);\n}\n</code>\n<|/ a tags=arrays,php,max\
    \ |>\n<| c |>\nThanks for the answer. The only thing is that we haven't learned\
    \ anything about arrays in the class, but we learned about arrays in the past\
    \ semester and the professor said it would be \"easier\" to do using arrays. I'm\
    \ thinking that we may need to learn arrays later on in the class.\n<|/ c |>\n\
    <| c |>\nThen the only way I can think of would be to write your own function,\
    \ based on one of the answers given in the post I linked to in the comment.\n\
    <|/ c |>\n<| a tags=arrays,php,max |>\nThis is a possible solution:\n<code>\n\
    $array = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);\n\n$max = array();\n$min\
    \ = array();\n\nforeach ($array as $val) {\n  if ($val > $max) {\n    $max = $val;\n\
    \  }\n\n  if ($val < $min) {\n    $min = $val;\n  }\n}\n\necho 'Max: ' . $max\
    \ . '<br>';\necho 'Min: ' . $min;\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php,max\
    \ |>\nThis is pretty simple, just use the max and min functions on an array.\n\
    <code>\n<?php\n\n$values = [1,3,8,5,6,2,7,9];\n$max = max($values);\n$min = min($values);\n\
    \necho \"Max is $max<br />Min is $min\";\n</code>\nSee more at: http://php.net/manual/en/function.max.php\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the answer. The only thing is that we haven't\
    \ learned anything about arrays in the class, but we learned about arrays in the\
    \ past semester and the professor said it would be \"easier\" to ", "    foreach\
    \ ($lst as $item) {\n        if (is_int($item)) {\n            if ($item < 0)\
    \ {\n                return $item, 0;\n            } else {\n                return\
    \ $item, 1;\n            }\n        }\n    }\n    return null;\n}\n", "  // Sort\
    \ list to start with\n  sort($lst);\n\n  // Initialize variables\n  $max = 0;\n\
    \  $min = null;\n\n  // Loop over array and compare each item to the maximum and\
    \ minimum so far\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i] <\
    \ $min) {\n      $min = $lst[$i];\n    } else if ($lst[$i] > $max) {\n      $max\
    \ = $lst[$i];\n    }\n  }\n\n  // Return tuple with max/min or None if both max/min\
    \ are zero\n  return array($max, $min);\n}\n", "    if (empty($lst)) {\n     \
    \   return array();\n    }\n    $min = $max = reset($lst);\n    foreach ($lst\
    \ as $v) {\n        if (is_numeric($v)) {\n            if ($v < $min) {\n    \
    \            $min = $v;\n            }\n            if ($v > $max) {\n       \
    \         $max = $v;\n            }\n        }\n    }\n    if ($min === null)\
    \ {\n        return array('' => $max);\n    }\n    if ($max === null) {\n    \
    \    return array('' => $min);\n    }\n    return array('' => $min, '' => $max);\n\
    }\n", "  // If the list is empty, return an empty tuple.\n  if (empty($lst)) {\n\
    \    return array();\n  }\n  // If the first element in the list is an integer,\
    \ return it.\n  if (is_int(reset($lst))) {\n    return array(reset($lst));\n \
    \ }\n  // Otherwise, create an array with two elements equal to the\n  // maximum\
    \ element in the list and a second equal to the\n  // minimum element in the list.\n\
    \  $max_elem = max($lst);\n  $min_elem = min($lst);\n  return array($max_elem,\
    \ $min_elem);\n}\n", "  if (empty($lst)) {\n    return array(None, None);\n  }\n\
    \  $max_val = null;\n  $min_val = null;\n  $smallest_int = null;\n  $largest_int\
    \ = null;\n  foreach ($lst as $value) {\n    if ($value < $max_val) {\n      if\
    \ ($smallest_int === null || $value < $smallest_int) {\n        $smallest_int\
    \ = $value;\n      }\n    }\n    if ($value > $max_val) {\n      if ($largest_int\
    \ === null || $value > $largest_int) {\n        $largest_int = $value;\n     \
    \ }\n    }\n  }\n  return array($largest_int, $smallest_int);\n}", "  // Solution\
    \ code here\n  $max = 0;\n  foreach ($lst as $item) {\n    if ($item > $max) {\n\
    \      $max = $item;\n    }\n  }\n  $min = 0;\n  foreach ($lst as $item) {\n \
    \   if ($item < $min) {\n      $min = $item;\n    }\n  }\n  return ($max > $min)\
    \ ? $max : null;\n}\n", "  $negs = [];\n  $pos = [];\n\n  // Find the smallest\
    \ or largest value in the list.\n  $min_value = PHP_INT_MAX;\n  $max_value = -PHP_INT_MAX;\n\
    \  foreach ($lst as $value) {\n    if ($value < $min_value) {\n      $min_value\
    \ = $value;\n    } else if ($value > $max_value) {\n      $max_value = $value;\n\
    \    }\n  }\n\n  // If the smallest or largest value is 0, return them as None\
    \ (no\n  // negative or positive values).\n  if ($min_value == 0) {\n    return\
    \ array(0, 0);\n  }\n  if ($max_value == 0) {\n    return array(0, 0);\n  }\n\n\
    \  // Find the first non-zero value or the last non-zero value.\n  foreach ($lst\
    \ as $i => $value) {\n    if ($value != 0 && $value < $min_value) {\n      $negs[]\
    \ = $value;\n      if ($value > $max_value) {\n        $pos[] = $max_value;\n\
    \      }\n    } else if ($value != 0 && $value > $max_value) {\n      $negs[]\
    \ = $max_value;\n      $pos[] = $value;\n    }\n  }\n\n  // Return the largest\
    \ or smallest value.\n  return $negs ? $negs : $pos;\n}\n</code>\nThe code below\
    \ is a complete working example of the function.  I've included unit tests to\
    \ show that it works as expected.  I've also included a couple of test cases that\
    \ show the function working correctly.\n<code>\n<?php\n\n/**\n * Largest_Smallest_Integers\
    \ Function\n *\n * Return the largest or smallest integers in a list.\n * If there\
    \ are no negative or positive integers, return them as None.\n * If there are\
    \ only negative integers, return them as None.\n * If there are only positive\
    \ integers, return them as None.\n * Example 1:\n * largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (None, 1)\n * largest_smallest_integers([]) == (None, None)\n\
    \ * largest_smallest_integers([0]) == (None, None)\n *\n * Example 2:\n * largest_smallest_integers([1,\
    \ -1, 3, -5, 7]) == (1, -1)\n * largest_smallest_integers([1, 2, 3]) == (1, 3)\n\
    \ * largest_smallest_integers([1, 3, 7]) == (1, None)\n *\n * Example 3:\n * largest_smallest_integers([4,\
    \ 2, 5, 1, -3, 7]) == (1, 3)\n * largest_smallest_integers([4, 2, 5, 1, 3, -7])\
    \ == (1, None)\n * largest_smallest_integers([4, 2, 5, 1, 3, 7]) == (None, 3)\n\
    \ *\n * Example 4:\n * largest_smallest_integers([1, 5, 3, -4, 7, -2]) == (None,\
    \ 3)\n * largest_smallest_integers([1, 2, 3, -4]) == (None, -4)\n * ", "  // Write\
    \ your solution to a function and return a tuple (a, b).\n}\n", "  // Create a\
    \ map of positive integers\n  $pos_map = array_flip(array_filter($lst, function($n)\
    \ {\n    return $n >= 0;\n  }));\n  // Create a map of negative integers\n  $neg_map\
    \ = array_flip(array_filter($lst, function($n) {\n    return $n < 0;\n  }));\n\
    \  // Return the largest of the positive integers minus the\n  // smallest of\
    \ the negative integers, if both are non-zero.\n  return array_search(false !==\
    \ $pos_map(false !== $neg_map) ? max($pos_map) - min($neg_map) : null, $pos_map)\
    \ !== false ? array_search(false !== $neg_map) ? max($neg_map) : null : null;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for providing such a great\
    \ solution. While I prefer not to use array functions to solve this problem, it\
    \ works and it's much simpler than the other solutions. +1 from me and thank you!\n\
    <|/ c |>\n<| c |>\nSorry I didn't see your comment until now when I wrote my last\
    \ answer. I just noticed you were using PHP 5.4, which means you'll have to substitute\
    \ array_search for array_key_exists. And you might want to move the return null\
    \ out of the if statement so it doesn't get returned unless the if conditions\
    \ are true.\n<|/ c |>\n<| a |>\n<code>", "  // If the list is empty, return an\
    \ empty tuple.\n  if (!$lst) {\n    return array();\n  }\n  // Find the first\
    \ non-negative integer.\n  $first_non_negative = null;\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $first_non_negative = $item;\n      break;\n\
    \    }\n  }\n  // If there are no non-negative integers, return an empty tuple.\n\
    \  if ($first_non_negative === null) {\n    return array();\n  }\n  // Create\
    \ a list that consists of the first non-negative integer\n  // and the remainder\
    \ of the list.\n  $second_non_negative_list = array_slice($lst, 0, $first_non_negative);\n\
    \  // Return the tuple consisting of the first non-negative integer\n  // and\
    \ a list of all the non-negative integers minus the\n  // first non-negative integer.\n\
    \  return array($first_non_negative, $second_non_negative_list);\n}\n", "  foreach($lst\
    \ as $value) {\n    if ($value < 0)\n      return array('b', $value);\n    else\n\
    \      return array('a', $value);\n  }\n}\n</code>\n<|/ a tags=php,algorithm,sorting\
    \ dscore=0 |>\n<| a tags=php,algorithm,sorting |>\nI have written my own code\
    \ as below\n<code>\n<?php\n", "  $ints = array_filter($lst, 'is_int');\n  return\
    \ array(array_max($ints), array_min($ints));\n}", "  $max = null;\n  $min = null;\n\
    \  foreach ($lst as $v) {\n    if (is_int($v)) {\n      if ($max === null) {\n\
    \        $max = $v;\n        $min = $v;\n      } else {\n        if ($v > $max)\
    \ {\n          $max = $v;\n        }\n        if ($v < $min) {\n          $min\
    \ = $v;\n        }\n      }\n    } else {\n      return (null, null);\n    }\n\
    \  }\n  return (array('min' => $min, 'max' => $max));\n}", "    // Return None\
    \ if the list contains no integers\n    if (empty($lst)) {\n        return array();\n\
    \    }\n\n    // Use foreach because we want to return the largest\n    // and\
    \ smallest integers\n    foreach ($lst as $num) {\n        $largest = PHP_INT_MAX;\n\
    \        $smallest = PHP_INT_MIN;\n        $isNegative = false;\n\n        if\
    \ ($num < 0) {\n            $isNegative = true;\n            $num = abs($num);\n\
    \        }\n\n        if ($num > $largest) {\n            $largest = $num;\n \
    \       }\n\n        if ($num < $smallest) {\n            $smallest = $num;\n\
    \        }\n\n        // Add the largest and smallest integers\n        // to\
    \ their respective variables so that we\n        // can return them both\n   \
    \     $largestIntegers[] = $largest;\n        $smallestIntegers[] = $smallest;\n\
    \    }\n\n    // Sort the largest/smallest integers lists\n    array_multisort($largestIntegers,\
    \ $smallestIntegers);\n\n    // Return the largest integer in the smallest integers\n\
    \    // list as the largest and the smallest integer as\n    // the smallest integer\n\
    \    return array($smallestIntegers[0], array_pop($largestIntegers));\n}", " \
    \   $result = [None, None];\n    $max_val = $min_val = $lst[0];\n    for ($i =\
    \ 1; $i < count($lst); $i++) {\n        if ($max_val < $lst[$i]) {\n         \
    \   $max_val = $lst[$i];\n        }\n        if ($min_val > $lst[$i]) {\n    \
    \        $min_val = $lst[$i];\n        }\n        if ($lst[$i] < $min_val) {\n\
    \            $result[0] = $max_val;\n            $result[1] = $min_val;\n    \
    \        $max_val = $min_val = $lst[$i];\n        } elseif ($lst[$i] > $max_val)\
    \ {\n            $result[0] = $max_val;\n            $result[1] = $min_val;\n\
    \            $max_val = $min_val = $lst[$i];\n        } else {\n            $result[0]\
    \ = $lst[$i];\n        }\n    }\n    return $result;\n}\n\n/**\n * Test that the\
    \ given number is a valid hexadecimal number\n * @param  mixed $num\n * @return\
    \ boolean\n */", "  $largest = largest_integer($lst);\n  if ($largest === null)\
    \ {\n    return null;\n  }\n  $smallest = smallest_integer($lst);\n  if ($smallest\
    \ === null) {\n    return null;\n  }\n  return [$largest, $smallest];\n}\n", " \
    \ if (!$lst) {\n    return array(None, null);\n  }\n  $largest = array();\n  $smallest\
    \ = array();\n  foreach ($lst as $val) {\n    $val = abs($val);\n    if (!isset($largest[$val]))\
    \ {\n      $largest[$val] = null;\n    }\n    if (!isset($smallest[$val])) {\n\
    \      $smallest[$val] = null;\n    }\n    if ($largest[$val] < $val) $largest[$val]\
    \ = $val;\n    if ($smallest[$val] > $val) $smallest[$val] = $val;\n  }\n  return\
    \ array(\n    max($largest),\n    min(array_flip($smallest)\n  );\n}", "  foreach\
    \ ($lst as $n) {\n    if ($n < 0) {\n      $n1 = null;\n      $n2 = null;\n  \
    \    $n3 = null;\n      $n4 = null;\n      $n5 = null;\n      $n6 = null;\n  \
    \    $n7 = null;\n      $n8 = null;\n      $n9 = null;\n      $n10 = null;\n \
    \     continue;\n    }\n    if ($n > 0) {\n      $n1 = null;\n      $n2 = null;\n\
    \      $n3 = null;\n      $n4 = null;\n      $n5 = null;\n      $n6 = null;\n\
    \      $n7 = null;\n      $n8 = null;\n      $n9 = null;\n      $n10 = null;\n\
    \      continue;\n    }\n    $n1 = $n;\n    break;\n  }\n\n  foreach ($lst as\
    \ $n) {\n    if ($n < 0) {\n      $n2 = null;\n      $n3 = null;\n      $n4 =\
    \ null;\n      $n5 = null;\n      $n6 = null;\n      $n7 = null;\n      $n8 =\
    \ null;\n      $n9 = null;\n      $n10 = null;\n      continue;\n    }\n    if\
    \ ($n > 0) {\n      $n2 = null;\n      $n3 = null;\n      $n4 = null;\n      $n5\
    \ = null;\n      $n6 = null;\n      $n7 = null;\n      $n8 = null;\n      $n9\
    \ = null;\n      $n10 = null;\n      continue;\n    }\n    $n2 = $n;\n    break;\n\
    \  }\n\n  foreach ($lst as $n) {\n    if ($n < 0) {\n      $n3 = null;\n     \
    \ $n4 = null;\n      $n5 = null;\n      $n6 = null;\n      $n7 = null;\n     \
    \ $n8 = null;\n      $n9 = null;\n      $n10 = null;\n      continue;\n    }\n\
    \    if ($n > 0) {\n      $n3 = null;\n      $n4 = null;\n      $n5 = null;\n\
    \      $n6 = null;\n      $n7 = null;\n      $n8 = null;\n      $n9 = null;\n\
    \      $n10 = null;\n      continue;\n    }\n    $n3 = $n;\n    break;\n  }\n\n\
    \  foreach ($lst as $n) {\n    if ($n < 0) {\n      $n4 = null;\n      $n5 = null;\n\
    \      $n6 = null;\n      $n7 = null;\n      $n8 = null;\n      $n9 = null;\n\
    \      $n10 = null;\n      continue;\n    }\n    if ($n > 0) {\n      $n4 = null;\n\
    \      $n5 = null;\n      $n6 = null;\n      $n7 = null;\n      $n8 = null;\n\
    \      $n9 = null;\n      $n10 = null;\n      continue;\n    }\n    $n4 = $n;\n\
    \    break;\n  }\n\n  foreach ($lst as $n) {\n    if ($n ", "  foreach($lst as\
    \ $v) {\n    if ($v < 0) return array('b', $v);\n    if ($v > 0) return array('a',\
    \ $v);\n  }\n  return null;\n}\n\n$biggest = largest_smallest_integers($arr);\n",
  "  // Your code here\n  $negatives = array();\n  $positives = array();\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $negatives[] = $num;\n    } else\
    \ {\n      $positives[] = $num;\n    }\n  }\n  if ($negatives) {\n    $max = max($negatives);\n\
    \  } else {\n    $max = 0;\n  }\n  if ($positives) {\n    $min = min($positives);\n\
    \  } else {\n    $min = 0;\n  }\n  return array($max, $min);\n}\n$tests = array(\n\
    \  '{\\'0\\', \\'-1\\', \\'-25\\', \\'-26\\', \\'\\'}' => array(null, 1, -26,\
    \ -1),\n  '{\\'1\\', \\'25\\', \\'\\', \\'-2\\', \\'abc\\', \\'4\\', \\'-2\\',\
    \ \\'\\'}' => array(1, 25, -2, -1),\n  '{\\'1\\', \\'4\\', \\'\\', \\'-2\\', \\\
    'abc\\', \\'4\\', \\'-2\\', \\'\\'}' => array(1, 4, -2, -1),\n  '{\\'1\\', \\\
    '25\\', \\'2\\', \\'-3\\', \\'abc\\', \\'4\\', \\'-2\\', \\'\\'}' => array(1,\
    \ 25, 2, -3),\n  '{\\'1\\', \\'25\\', \\'2\\', \\'-3\\', \\'abc\\', \\'4\\', \\\
    '-2\\', \\'\\'} asdf' => array(1, 25, 2, -3),\n  '{\\'1\\', \\'25\\', \\'2\\',\
    \ \\'-3\\', \\'abc\\', \\'4\\', \\'-2\\', \\'\\'} fasdf' => array(1, 25, 2, -3),\n\
    \  '{\\'1\\', \\'25\\', \\'2\\', \\'-3\\', \\'abc\\', \\'4\\', \\'-2\\', \\'\\\
    '} ' =>  array(1, 25, 2, -3),\n  '{\\'1\\', \\'25\\', \\'2\\', \\'-3\\', \\'abc\\\
    ', \\'4\\', \\'-2\\', \\'\\'} fdasdf' => array(1, 25, 2, -3),\n  '{\\'1\\', \\\
    '25\\', \\'2\\', \\'-3\\', \\'abc\\', \\'4\\', \\'-2\\', \\'\\'} asdf' =>  array(1,\
    \ 25, 2, -3),\n  '{\\'1\\', \\'25\\', \\'2\\', \\'-3\\', \\'abc\\', \\'4\\', \\\
    '-2\\', \\'\\'} fasd' =>  array(1, ", "  $max_int = NULL;\n  $min_int = PHP_INT_MAX;\n\
    \  foreach($lst as $int) {\n    if ($int > $max_int) {\n      $max_int = $int;\n\
    \    } else if ($int < $min_int) {\n      $min_int = $int;\n    }\n  }\n  return\
    \ array($max_int, $min_int);\n}\n", "  if (empty($lst)) {\n    return (None, None);\n\
    \  }\n  foreach ($lst as $x) {\n    if ($x < 0) {\n      return (None);\n    }\n\
    \  }\n  foreach ($lst as $x) {\n    if ($x > 0) {\n      return (None);\n    }\n\
    \  }\n  return (min(array_keys($lst)), max(array_keys($lst)));\n}\n", "  $n =\
    \ max($lst);\n  $m = min($lst);\n  if ($n === $m) {\n    return array($n, $n);\n\
    \  }\n  return array($m, $n);\n}\n</code>\nThen your PHP code will look like :\n\
    <code>\n$list = array('4', '1', '-3', '0', '0', '9', '9', '12', '4');\nlist($min,\
    \ $max)\n     = largest_smallest_integers($list);\n$max = abs($max); // absolute\
    \ value\nforeach ($list as $value) {\n  if ($value >= $min and $value <= $max)\
    \ {\n    echo \"$value\";\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n\n$array = array('4', '1', '-3', '0', '0', '9', '9', '12',\
    \ '4');\n\n$min = min($array);\n$max = max($array);\n$result = array_filter($array,\
    \ function($v) use ($max, $min){\n    return ($v >= $min) && ($v <= $max);\n});\n\
    \nforeach($result as $v){\n    echo $v . \"\\n\";\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array('4', '1', '-3', '0', '0',\
    \ '9', '9', '12', '4');\n", "  // Return None if there is no list of integers\n\
    \  if (!is_array($lst) || count($lst) == 0) {\n    return array();\n  }\n\n  //\
    \ Sort the list from smallest to largest\n  rsort($lst);\n\n  // Find the first\
    \ negative integer\n  $min = -PHP_INT_MAX;\n\n  // Find the first positive integer\n\
    \  $max = PHP_INT_MAX;\n  for ($i = 0; $i < count($lst); $i++) {\n    // See if\
    \ the current number is negative\n    if ($lst[$i] < 0) {\n      // See if we\
    \ can find the smallest negative integer\n      if ($min > -$lst[$i]) {\n    \
    \    // This is the smallest negative integer\n        $min = -$lst[$i];\n   \
    \   }\n      // See if we can find the largest positive integer\n    } else {\n\
    \      // See if we can find the largest positive integer\n      if ($max < $lst[$i])\
    \ {\n        // This is the largest positive integer\n        $max = $lst[$i];\n\
    \      }\n    }\n  }\n\n  // Return the tuple (min, max) if there is a valid list\
    \ of integers\n  return ($min < $max) ? array('min' => $min, 'max' => $max) :\
    \ array();\n}\n", "  usort($lst, 'lst_cmp');\n  if (!$lst)\n    return array();\n\
    \n  $smallest_int = array_shift($lst);\n  $largest_int = array_pop($lst);\n  $return\
    \ = array();\n  while ($smallest_int < $largest_int) {\n    $return[] = $smallest_int;\n\
    \    $smallest_int = array_shift($lst);\n    $largest_int = array_pop($lst);\n\
    \  }\n  if (!$smallest_int)\n    return array();\n  $return[] = $largest_int;\n\
    \  return $return;\n}\n\n/**\n * Given a number string, return the decimal value\
    \ of the number.\n */", "  $largest = $smallest = null;\n\n  // Initialize largest\
    \ and smallest to null.\n  foreach ($lst as $el) {\n    if (is_null($largest)\
    \ || $el < $smallest) {\n      $largest = $el;\n    }\n    if (is_null($smallest)\
    \ || $el > $largest) {\n      $smallest = $el;\n    }\n  }\n\n  return array($largest,\
    \ $smallest);\n}\n</code>\nI then used this as a subroutine in my main program.\n\
    <|/ a dscore=2 tags=max,php |>\n<| a |>\nThis code will work even with negative\
    \ values\n<code>\n$a=[-10,-3,-2,-1,1,2,3,4,5,6,7,8,9,10];\n$largest=max($a);\n\
    $smallest=min($a);\nif($largest==$smallest){\n    echo \"equal\";\n}\nelse{\n\
    \    if($largest<0){\n        if($largest<$smallest){\n            $largest=$a[count($a)-1];\n\
    \        }\n    }\n    else{\n        if($largest>$smallest){\n            $largest=$a[count($a)-1];\n\
    \        }\n    }\n}\necho \"largest is : \".$largest.\"<br/>\";\necho \"smallest\
    \ is : \".$smallest;\n</code>\n<|/ a dscore=1 tags=max,php |>\n<| a tags=max,php\
    \ dscore=0 |>\nAnother alternative is to sort array in descending order\n<code>\n\
    <?php", "  $smallest = min($lst);\n  $largest = max($lst);\n  if ($smallest <\
    \ 0 || $smallest > $largest) {\n    return array(null, null);\n  }\n  return array($smallest,\
    \ $largest);\n}\n\n$x = largest_smallest_integers(array(2, 4, 1, 3, 5, 7));\n\
    print \"The largest negative integer is $x[0], and the smallest positive integer\
    \ is $x[1]\\n\";\n", "  $max = -INF;\n  $min = $max;\n\n  foreach ($lst as $i)\
    \ {\n    if ($i < $min) {\n      $min = $i;\n    } else if ($i > $max) {\n   \
    \   $max = $i;\n    }\n  }\n\n  return array($min, $max);\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nI thought about this too but after trying it I realized I got stuck\
    \ in a corner case where a large negative number has a large positive integer\
    \ less than or equal to it. So the second number in the tuple would always be\
    \ 0 or 1.\n<|/ c |>\n<| c |>\n: yes, you're right. That's why I said \"probably\"\
    \ instead of \"definitely\". The idea is to test all possibilities.\n<|/ c |>\n\
    <| c |>\nI agree that this is probably the best way to do it. I was wondering\
    \ if there was a solution using only PHP's native functions. I accepted the other\
    \ answer because it is easier to implement and easier to understand. Thanks.\n\
    <|/ c |>\n<| c |>\nI accepted the other answer because it's easier to implement\
    \ and easier to understand.\n<|/ c |>\n<| a dscore=3 |>\nTry this\n<code>", " \
    \   $highest = min($lst);\n    $lowest = max($lst);\n    return ($highest < $lowest\
    \ ? array('highest' => $highest, 'lowest' => $lowest) : array('highest' => $highest,\
    \ 'lowest' => $lowest));\n}\n", "  foreach ($lst as $x) {\n    if (is_int($x))\
    \ {\n      $positive = array();\n      $negative = array();\n      foreach ($lst\
    \ as $y) {\n        if ($x == $y) {\n          continue;\n        }\n        if\
    \ ($x < $y) {\n          $negative[] = $y;\n        } else {\n          $positive[]\
    \ = $y;\n        }\n      }\n\n      if (count($negative) < count($positive))\
    \ {\n        return array('negative' => $negative, 'positive' => $positive);\n\
    \      }\n      if (count($negative) > count($positive)) {\n        return array('positive'\
    \ => $positive, 'negative' => $negative);\n      }\n      if (count($negative)\
    \ == count($positive)) {\n        return $x;\n      }\n    }\n  }\n\n  return\
    \ array('negative' => array(), 'positive' => array());\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\n<?php\n", "    if (empty($lst)) {\n        return array(None,\
    \ None);\n    }\n    \n    $largest = max($lst);\n    $smallest = min($lst);\n\
    \    \n    if ($largest < $smallest) {\n        return array($largest, $smallest);\n\
    \    } else {\n        return array($smallest, $largest);\n    }\n}\n", "  $max\
    \ = -INF;\n  $min = -INF;\n  foreach ($lst as $item) {\n    if ($item > $max)\
    \ {\n      $max = $item;\n    }\n    if ($item < $min) {\n      $min = $item;\n\
    \    }\n  }\n  return array($max, $min);\n}\n", "  $max_neg = -PHP_INT_MAX;\n\
    \  $min_pos = PHP_INT_MAX;\n  foreach ($lst as $num) {\n    if ($num < $min_pos)\
    \ {\n      $min_pos = $num;\n    }\n    if ($num > $max_neg) {\n      $max_neg\
    \ = $num;\n    }\n  }\n  return [$max_neg, $min_pos];\n}\n</code>\n<|/ a |>\n\
    <| a |>\nThe above answer didn't work for me, so I modified it to this and it\
    \ works perfectly.\n<code>", "  $a = null;\n  $b = null;\n  $max = -PHP_INT_MAX;\n\
    \  foreach ($lst as $item) {\n    if ($item < 0) {\n      if ($a === null) {\n\
    \        $a = $item;\n      }\n      elseif ($a < $item) {\n        $a = $item;\n\
    \      }\n    }\n    else {\n      if ($b === null) {\n        $b = $item;\n \
    \     }\n      elseif ($b > $item) {\n        $b = $item;\n      }\n    }\n  \
    \  if ($a !== null && $b !== null) {\n      $max = max($max, $a + $b);\n     \
    \ $a = null;\n      $b = null;\n    }\n  }\n  return array($max, $a);\n}\n", " \
    \ usort($lst, 'largest_smallest_integer_cmp');\n\n  $smallest = null;\n  $largest\
    \ = null;\n  foreach ($lst as $value) {\n    if ($smallest === null || $value\
    \ < $smallest) {\n      $smallest = $value;\n    }\n    if ($largest === null\
    \ || $value > $largest) {\n      $largest = $value;\n    }\n  }\n\n  return array($smallest,\
    \ $largest);\n}\n", "  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  $lst_length\
    \ = count($lst);\n  $min_length = 0;\n\n  for ($i = 0; $i < $lst_length; $i++)\
    \ {\n    if ($lst[$i] < $min) {\n      $min = $lst[$i];\n      $min_length = $i;\n\
    \    }\n    if ($lst[$i] > $max) {\n      $max = $lst[$i];\n    }\n  }\n  if ($min_length\
    \ != $lst_length) {\n    return array($max, $min);\n  } else {\n    return array($max,\
    \ $min);\n  }\n}\n", "  $min = PHP_INT_MAX;\n  $max = PHP_INT_MIN;\n  foreach\
    \ ($lst as $val) {\n    if ($val < $min) {\n      $min = $val;\n    }\n    if\
    \ ($val > $max) {\n      $max = $val;\n    }\n  }\n  if ($min < PHP_INT_MIN &&\
    \ $max > PHP_INT_MAX) {\n    return (None, $min, $max);\n  }\n  return ($max,\
    \ $min);\n}\n", "  $min = max($lst);\n  $max = min($lst);\n  return array($min\
    \ == $max ? None : $min, $max == $min ? None : $max);\n}\n", "  $max_int = -1;\n\
    \  $min_int = $lst[0];\n  foreach ($lst as $int) {\n    if ($int > $max_int) {\n\
    \      $max_int = $int;\n    } elseif ($int < $min_int) {\n      $min_int = $int;\n\
    \    }\n  }\n  return [$min_int, $max_int];\n}\n", "  $min = PHP_INT_MAX;\n  $max\
    \ = 0;\n  foreach ($lst as $v) {\n    if ($v < 0) {\n      if ($min > $v) {\n\
    \        $min = $v;\n      }\n    } else if ($v > 0) {\n      if ($max < $v) {\n\
    \        $max = $v;\n      }\n    }\n  }\n  return array($max, $min);\n}\n", " \
    \ // Your code here\n  $max = -99999999;\n  $min = (PHP_INT_MAX);\n  $num = \"\
    \";\n  foreach ($lst as $value) {\n    if ($value < $min) {\n      $min = $value;\n\
    \    }\n    if ($value >= $max) {\n      $max = $value;\n      $num = $value;\n\
    \    }\n  }\n  return (array('num' => $num, 'min' => $min, 'max' => $max));\n\
    }\n</code>\nAnd also you need to use else if instead of else here like below:\n\
    <code>\nif($value<$min){\n  $min=$value;\n}\nelse if($value>$max){\n  $max=$value;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe function isn't correct yet, try it\
    \ on input `array(-1, -100, 10)`\n<|/ c |>\n<| c |>\nYou are right, but what should\
    \ be the correct solution for this case?\n<|/ c |>\n<| c |>\n`-1 < -99999999`\
    \ returns true. `-99999999 < -99999999` returns false (it's larger than both numbers).\
    \ `-99999999 < -9999` returns true. Your function returns `None` when the input\
    \ is an empty array.\n<|/ c |>\n<| a |>\nYou need to use the modulus operator\
    \ (%) to check how many items are in the array before doing the comparison so\
    \ if there are 0 items left, you know there are no negative numbers. \n<code>\n\
    <?php\n\n$arr = [-1, -100, 10];\n\nforeach($arr as $number){\n\n  if($number <\
    \ 0){\n    var_dump('negative number');\n  }elseif($number > 0){\n    var_dump('positive\
    \ number');\n  }elseif($number == 0){\n    var_dump('zero number');\n  }else{\n\
    \    var_dump('unknow');\n  }\n\n}\n</code>\nOutput\n<code>\nstring(7) \"negative\
    \ number\"\nstring(5) \"positive number\"\nstring(5) \"zero number\"\nstring(7)\
    \ \"unknow\"\n</code>\nIf you have multiple negative numbers in the array you\
    \ can also use an if statement with the array_filter function\n<code>\nif($number\
    \ < 0){\n  var_dump(array_filter($arr,'is_numeric'));\n}elseif($number > 0){\n\
    \  var_dump(array_filter($arr,'is_numeric'));\n}\n</code>\nThis would output:\n\
    <code>\narray(2) {\n  [1]=>\n  string(1) \"-\"\n  [3]=>\n  string(1) \"-\"\n}\n\
    array(2) {\n  ", "  $ints = array_filter($lst, 'is_int');\n  if (empty($ints))\
    \ return (null, null);\n\n  $max = max($ints);\n  $min = min($ints);\n  if ($min\
    \ > 0 && $max < 0) {\n    $max = -$max;\n    $min = -$min;\n  }\n\n  return array($max,\
    \ $min);\n}\n", "  if (empty($lst)) {\n    return array(None, None);\n  }\n\n\
    \  $largest_integer = 0;\n  $smallest_integer = PHP_INT_MAX;\n  $i_smallest =\
    \ null;\n\n  for ($i = 0, $count = count($lst); $i < $count; ++$i) {\n    if ($lst[$i]\
    \ < 0) {\n      if (isset($smallest_integer)) {\n        return array($largest_integer,\
    \ $smallest_integer);\n      }\n      $largest_integer = $i;\n      $i_smallest\
    \ = $i;\n    } else if ($lst[$i] > 0) {\n      if (!isset($i_smallest)) {\n  \
    \      $i_smallest = $i;\n        $smallest_integer = $i;\n      }\n      if ($i_smallest\
    \ != $i) {\n        return array($largest_integer, $smallest_integer);\n     \
    \ }\n    }\n  }\n\n  return array($largest_integer, $smallest_integer);\n}\n",
  "  foreach($lst as $number) {\n    if ($number < 0)\n      return array(null, $number);\n\
    \    if ($number > 0)\n      return array(1, $number);\n  }\n  return array(null,\
    \ null);\n}\n", "  // Your code here\n}\nlargest_smallest_integers([2,4,1,3,5,7]);\
    \ // => (None, 1)\nlargest_smallest_integers([]); // => (None, None)\nlargest_smallest_integers([0]);\
    \ // => (None, None)", "  $int_keys = array_filter(\n    array_keys($lst),\n \
    \   function($n) { return !is_integer($n); }\n  );\n  $int_values = array_filter(\n\
    \    array_values($lst),\n    function($n) { return !is_integer($n); }\n  );\n\
    \  if (empty($int_keys) && empty($int_values)) {\n    return array();\n  }\n\n\
    \  if (empty($int_keys)) {\n    return array('None' => array_pop($int_values));\n\
    \  }\n\n  if (empty($int_values)) {\n    return array('None' => array_shift($int_keys));\n\
    \  }\n\n  $max_int = max($int_keys);\n  $max_int_value = max($int_values);\n \
    \ if ($max_int == $max_int_value) {\n    return array('None' => $max_int_value);\n\
    \  }\n\n  $min_int = min($int_keys);\n  $min_int_value = min($int_values);\n \
    \ if ($min_int == $min_int_value) {\n    return array('None' => $min_int_value);\n\
    \  }\n\n  return array($max_int, $min_int);\n}\n\n", "  if (!empty($lst)) {\n\
    \    $largest = null;\n    $smallest = null;\n    $largestKey = -1;\n    $smallestKey\
    \ = 0;\n    foreach ($lst as $key => $value) {\n      if ($value < $smallest)\
    \ {\n        $smallest = $value;\n        $smallestKey = $key;\n      }\n    \
    \  if ($value > $largest) {\n        $largest = $value;\n        $largestKey =\
    \ $key;\n      }\n    }\n    return array($smallestKey, $largest);\n  } else {\n\
    \    return array(null, null);\n  }\n}\n", "  $result = array();\n  foreach ($lst\
    \ as $i) {\n    $result[$i] = max($i);\n  }\n  foreach ($lst as $i) {\n    $result[$i]\
    \ = min($i);\n  }\n  return $result;\n}\n", "  foreach ($lst as $x => $y) { $smallest\
    \ = $largest = $y; }\n  foreach ($lst as $x) { if ($x < $smallest) { $smallest\
    \ = $x; } }\n  foreach ($lst as $x) { if ($x > $largest) { $largest = $x; } }\n\
    \  return ($smallest > $largest ? $smallest : $largest, null);\n}\n", "    if\
    \ (empty($lst)) {\n        return array(null, null);\n    }\n\n    // Sort $lst,\
    \ find the largest negative number and smallest positive number\n    usort($lst,\
    \ 'largest_smallest_numbers');\n\n    $max_negative = array_pop($lst);\n    $min_positive\
    \ = array_pop($lst);\n\n    // If no negative or positive numbers are in $lst,\
    \ return the min and max numbers\n    if (count($lst) == 0) {\n        return\
    \ array($min_positive, $max_negative);\n    }\n\n    // There are negative and\
    \ positive numbers, return the max and min numbers\n    return array($max_negative,\
    \ $min_positive);\n}\n", "    // If the list is empty, return an empty tuple.\n\
    \    if (empty($lst)) return array();\n\n    // If the first number in the list\
    \ is a negative integer, return None.\n    if (is_numeric($lst[0]) && is_int($lst[0]))\
    \ {\n        $smallest = $lst[0];\n        $largest = $smallest;\n    } else {\n\
    \        $smallest = PHP_INT_MAX;\n        $largest = -PHP_INT_MAX;\n    }\n\n\
    \    $smallest_is_positive = true;\n    $largest = 0;\n    foreach ($lst as $n)\
    \ {\n        // If this number is a negative integer, set $largest and\n     \
    \   // $smallest_is_positive to None to prevent setting them to 0\n        //\
    \ when there are negative numbers.\n        if (is_numeric($n) && is_int($n))\
    \ {\n            if ($n < 0 && $smallest_is_positive) {\n                $largest\
    \ = $n;\n                $smallest_is_positive = false;\n            } else {\n\
    \                $smallest = $n;\n            }\n        }\n        // If $smallest\
    \ and $largest are both negative integers,\n        // set $smallest and $largest\
    \ to None to prevent setting them to 0\n        // when there are negative numbers.\n\
    \        elseif (is_numeric($n) && is_int($n)) {\n            if ($n < 0 && $smallest_is_positive)\
    \ {\n                $smallest = PHP_INT_MAX;\n                $largest = PHP_INT_MAX;\n\
    \            } else {\n                $largest = $n;\n            }\n       \
    \ }\n        // If $smallest and $largest are both positive integers,\n      \
    \  // and $smallest > $largest, set $smallest to None and $largest\n        //\
    \ to None to prevent setting them to 0 when there are negative\n        // numbers.\n\
    \        elseif (is_numeric($n) && is_int($n)) {\n            if ($n < 0 && $smallest_is_positive)\
    \ {\n                $smallest = PHP_INT_MAX;\n                $largest = PHP_INT_MAX;\n\
    \            } else {\n                $smallest = is_int($n) ? $n : null;\n \
    \               $largest = is_int($n) ? $n : null;\n            }\n        }\n\
    \        // If $smallest and $largest are both floats, return None.\n        elseif\
    \ (is_numeric($n) && is_float($n)) {\n            return array();\n        }\n\
    \    }\n    return array($smallest, $largest);\n}\n", "    $result = null;\n \
    \   $negative = array();\n    $positive = array();\n    foreach ($lst as $item)\
    \ {\n        if ($item < 0) {\n            $negative[] = $item;\n        } else\
    \ if ($item > 0) {\n            $positive[] = $item;\n        } else {\n     \
    \       $result = max($negative, $positive);\n            break;\n        }\n\
    \    }\n    if (!$result) {\n        // no negative or positive integers\n   \
    \     return null;\n    }\n    return array($result, min($negative, min($positive)));\n\
    }\n</code>\nThen you can define your \"main\" function, which will get the arguments\
    \ from the command-line and then \"call\" the largest_smallest_integers function\
    \ to get the largest and smallest positive and negative integers contained in\
    \ a list:\n<code>", "  $highest_integer = null;\n  $lowest_integer = null;\n \
    \ foreach ($lst as $value) {\n    if (is_null($highest_integer) || $value < $lowest_integer)\
    \ {\n      $highest_integer = $value;\n    }\n    if (is_null($lowest_integer)\
    \ || $value > $highest_integer) {\n      $lowest_integer = $value;\n    }\n  }\n\
    \  return [\n    (is_null($highest_integer)) ? null : $highest_integer,\n    (is_null($lowest_integer))\
    \ ? null : $lowest_integer,\n  ];\n}\n</code>\nThen, you can just call it like\
    \ so:\n<code>\n$lst = [1, -1, 3, -4, 0, -2, 2];\nlist($highest_integer, $lowest_integer)\
    \ = largest_smallest_integers($lst);\nvar_dump($highest_integer, $lowest_integer);\n\
    </code>\nOutput:\n<code>\nint(0)\nint(2)\n</code>\nYou can now do whatever you\
    \ want with those two variables (store them in a database, etc.).\n<|/ a tags=php,arrays,multidimensional-array\
    \ dscore=0 |>\n<| c |>\nThanks for this but I'm afraid that it's not really what\
    \ I'm after. I need the lowest and highest values of the array, but I need to\
    \ do so for every value within the array.\n<|/ c |>\n<| a |>\nFor an example array\
    \ :\n<code>\n$input = [\n    'foo',\n    1,\n    3,\n    'bar',\n    2,\n    'foo',\n\
    \    2,\n];\n\n$result = array_reduce( $input, function( $a, $v ) {\n    $lowest\
    \ = $highest =+ 0;\n    foreach( $a as $key => $el ) {\n        if( $el === $v\
    \ ) {\n            if( $key === 0 ) {\n                $lowest = $v;\n       \
    \     } elseif( $el < $lowest ) {\n                $lowest = $el;\n          \
    \  }\n        } elseif( $el === $lowest ) {\n            if( $key === 0 ) {\n\
    \                $lowest = $v;\n            } elseif( $el > $lowest ) {\n    \
    \            $lowest = $el;\n            }\n        } else {\n            $highest\
    \ = $el;\n        }\n    }\n    return [\n        null === $lowest ? null : $lowest,\n\
    \        null === $highest ? null : $highest\n    ];\n}, null );\n\nvar_dump(\
    \ $result );\n</code>\nThis results in the following output: \n<code>\narray(2)\
    \ {\n  [0]=>\n  NULL\n  [1]=>\n  int(2)\n}\n</code>\n", "  $max_int = -1;\n  $min_int\
    \ = null;\n  foreach ($lst as $integer) {\n    // If negative integer, check if\
    \ it's the largest.\n    if (is_int($integer)) {\n      if ($integer < 0) {\n\
    \        $max_int = $integer;\n      } else {\n        $min_int = $integer;\n\
    \      }\n    }\n  }\n  if ($min_int === null && $max_int === null) {\n    return\
    \ ($min_int, $max_int);\n  } else if ($min_int === null) {\n    return (-1, $max_int);\n\
    \  } else if ($max_int === null) {\n    return ($min_int, -1);\n  } else {\n \
    \   return ($min_int > $max_int ? $min_int : $max_int);\n  }\n}\n", "  $min =\
    \ $max = -PHP_INT_MAX;\n  foreach ($lst as $n => $x) {\n    if ($x < $min) $min\
    \ = $x;\n    if ($x > $max) $max = $x;\n  }\n  return ($min < $max) ? array('min'\
    \ => $min, 'max' => $max) : null;\n}\n", "  if ($lst == array()) return array();\n\
    \n  $negative = array();\n  $positive = array();\n\n  // Loop through each element\
    \ in the list, and add\n  // the value to the array if it's not negative\n  foreach\
    \ ($lst as $value) {\n    if ($value < 0) {\n      $negative[] = $value;\n   \
    \ } else {\n      $positive[] = $value;\n    }\n  }\n\n  if (empty($negative))\
    \ {\n    return array('None' => NULL);\n  }\n\n  if (empty($positive)) {\n   \
    \ return array('None' => NULL);\n  }\n\n  // Sort the arrays to put the largest\
    \ in $negative,\n  // and the smallest in $positive\n  array_multisort($negative,\
    \ SORT_DESC, $positive, SORT_ASC, $lst);\n\n  $large = $negative[0];\n  $small\
    \ = $positive[0];\n\n  return array('large' => $large, 'small' => $small);\n}",
  "  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n    $int_item\
    \ = intval($item);\n    if ($int_item > $largest) {\n      $largest = $int_item;\n\
    \    } elseif ($int_item < $smallest) {\n      $smallest = $int_item;\n    }\n\
    \  }\n  return array($smallest, $largest);\n}\n</code>\n<|/ a tags=function,php\
    \ dscore=0 |>\n<| c |>\nThis doesn't actually work. You'll find it returns [2,7]\
    \ even though there are positive and negative integers.\n<|/ c |>\n<| c |>\nThis\
    \ is an example of how to use [largest-smallest](http://en.wikipedia.org/wiki/Largest-smallest)\
    \ integers\n<|/ c |>\n<| c |>\nYes, but it's wrong. Try it on [1,2]. It returns\
    \ [2,2], not [2,7].\n<|/ c |>\n<| c |>\nThe question was how to determine the\
    \ largest and smallest integers.\n<|/ c |>\n<| c |>\nThe question was how to determine\
    \ if a sequence was a large or small sequence. In your case it doesn't matter\
    \ if the sequence is small, large, or large, large\n<|/ c |>\n<| a dscore=0 |>\n\
    You can try this one with array_filter(), array_flip() and array_map().\n<code>\n\
    <?php\n$array = array(2, 3, -4, 6, -1, 8, -9, 2, -7, 4, -6, 9);\n$array = array_map('intval',\
    \ $array); // Convert the array to integers\n$array = array_filter($array); //\
    \ Remove the negative integers\n$array = array_flip($array); // Flip the array\
    \ to go from large to small\n$max = max($array); // Get the max\n$min = min($array);\
    \ // Get the min\n\nif($max == $min) { // If they are equals then its largest\n\
    \    echo 'Max = ' . $max . ' Min = ' . $min;\n} else if($max == 0 && $min ==\
    \ 0) { // If they are equals then its largest\n    echo 'Max = ' . $max . ' Min\
    \ = ' . $min;\n} else { // If not equals then its not the largest\n    echo 'Max\
    \ = ' . $max . ' Min = ' . $min;\n}\n</code>\n<|/ a tags=function,php |>\n<| a\
    \ tags=function,php dscore=0 |>\n<code>\n$a=array(1,2,3,4,5,-6,7);\n$b=array_filter($a);\n\
    $c=array_map(", "  $tuple = null;\n  foreach ($lst as $x) {\n    if (!$tuple ||\
    \ $x <= $tuple[0]) {\n      $tuple = array($x, $tuple);\n    } else if ($x >=\
    \ $tuple[0]) {\n      $tuple[1] = $x;\n    }\n  }\n  return $tuple;\n}", "  $min_val\
    \ = NULL;\n  $max_val = NULL;\n  foreach ($lst as $num) {\n    if (is_int($num))\
    \ {\n      if ($min_val === NULL) {\n        $min_val = $num;\n        $max_val\
    \ = $num;\n      } else if ($num < $min_val) {\n        $min_val = $num;\n   \
    \   }\n      if ($num > $max_val) {\n        $max_val = $num;\n      }\n    }\
    \ else {\n      if ($min_val === NULL) {\n        $min_val = NULL;\n      } else\
    \ if ($num < $min_val) {\n        $min_val = NULL;\n      }\n      if ($max_val\
    \ === NULL) {\n        $max_val = NULL;\n      } else if ($num > $max_val) {\n\
    \        $max_val = NULL;\n      }\n    }\n  }\n  return array($min_val, $max_val);\n\
    }\n", "    foreach($lst as $key => $value) {\n        if ($value < 0) {\n    \
    \        $lst_key = $key;\n            $lst_value = $value;\n        } else if\
    \ ($value > 0 ) {\n            $lst_value = $value;\n            $lst_key = $key;\n\
    \        }\n    }\n    return array($lst_key, $lst_value);\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = [\n    'foo'\
    \ => 'bar',\n    'one' => 1,\n    'two' => 2,\n    'three' => 3\n];\n\n$filtered\
    \ = array_filter($array, function ($value) {\n    return is_int($value) || is_float($value);\n\
    });\n\nif (count($filtered)) {\n    $largest = max($filtered);\n} else {\n   \
    \ $largest = null;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI made a little script\
    \ that does what you're looking for. I hope it helps:\n<code>\n<?php\n", "  $max_negative\
    \ = max(array_map(function ($i) {\n      return $i * -1;\n  }, $lst));\n  $max_positive\
    \ = max($lst);\n  if ($max_negative > $max_positive) {\n    return ['None', 0];\n\
    \  }\n  return ['None', $max_positive];\n}\n</code>\n<|/ a |>\n<| a tags=php,function\
    \ |>\nMy solution to find largest and smallest value from a list:\n<code>", " \
    \   // Return the largest negative integer and smallest positive integer.\n  \
    \  $max = 0;\n    $min = 1;\n\n    // Scan through all elements of the list; for\
    \ each element,\n    // check if it is negative or positive. If negative, then\
    \ store the\n    // element as the largest negative integer.\n    // If the element\
    \ is a positive integer, then store the element as\n    // the smallest positive\
    \ integer.\n    foreach($lst as $num) {\n        if ($num < 0) {\n           \
    \ if ($max < 0)\n                $max = $num;\n        } else {\n            if\
    \ ($min > 0)\n                $min = $num;\n        }\n    }\n    return array($max,\
    \ $min);\n}\n", "  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item)\
    \ {\n    if (is_null($smallest)) {\n      $smallest = $item;\n      $largest =\
    \ $item;\n    } else if ($item < $smallest) {\n      $smallest = $item;\n    }\
    \ else if ($item > $largest) {\n      $largest = $item;\n    }\n  }\n  return\
    \ array($smallest, $largest);\n}\n", "  $min_val = null;\n  $max_val = null;\n\
    \  foreach ($lst as $item) {\n    if (!is_int($item)) {\n      return [null, null];\n\
    \    }\n    if ($item < $min_val && $item > 0) {\n      $min_val = $item;\n  \
    \  } else if ($item > $max_val && $item < 0) {\n      $max_val = $item;\n    }\n\
    \  }\n  return [$min_val, $max_val];\n}\n", "  if (!is_array($lst)) {\n    return\
    \ array(None, None);\n  }\n  $smallest = null;\n  $largest = null;\n  foreach\
    \ ($lst as $item) {\n    if ($smallest === null || $item < $smallest) {\n    \
    \  $smallest = $item;\n    }\n    if ($largest === null || $item > $largest) {\n\
    \      $largest = $item;\n    }\n  }\n  return array($smallest, $largest);\n}",
  "    if (empty($lst)) {\n        return array();\n    }\n    $ints = array_filter($lst,\
    \ 'is_int');\n    if (empty($ints)) {\n        return array();\n    }\n    $sorted\
    \ = array_map(\n        'intval',\n        array_flip($ints)\n    );\n    asort($sorted);\n\
    \    $min = null;\n    $max = null;\n    foreach ($sorted as $i => $value) {\n\
    \        if ($min === null || $value < $min) {\n            $min = $value;\n \
    \       }\n        if ($max === null || $value > $max) {\n            $max = $value;\n\
    \        }\n    }\n    return array('min' => $min, 'max' => $max);\n}\n", "  foreach\
    \ ($lst as $key => $value) {\n    if ($value < 0 || $value > 0) {\n      return\
    \ array($value, $key);\n    }\n  }\n  return array(None, None);\n}\n</code>\n\
    <|/ a tags=algorithm,sorting,php,arrays |>\n<| a |>\nA quick solution with just\
    \ one pass over the array is to sort the array by the sign, then by value. Then\
    \ go through the array, keeping track of the last sign and value (which are both\
    \ non-zero) and the last sign and value (in which case we know the value was the\
    \ minimum). The value will be the minimum value from all the values with the same\
    \ sign.\nFor example:\n<code>\n$signs = array_fill_keys(array_keys($arr), 0);\n\
    $values = array_fill_keys(array_keys($arr), 0);\nforeach ($arr as $v) {\n    $signs[$v\
    \ < 0 ? '-' : '+']++;\n    $values[$v < 0 ? '-' : '+'][] = $v;\n}\n</code>\nThen\
    \ to find the minimum value in the array:\n<code>\n$v = $values[$signs['-']] ??\
    \ $values[$signs['+']];\n</code>\nDemo on 3v4l.org\n<|/ a tags=algorithm,sorting,php,arrays\
    \ dscore=2 |>\n<| c |>\n`array_fill_keys` will fill the keys of `$signs` with\
    \ the values of `$signs[$v<0?'-':'+']`, which means in this case the array will\
    \ be indexed by the value itself and NOT the key.\n<|/ c |>\n<| c |>\nyou're right\
    \ - I didn't even notice that `array_fill_keys` was being used. I've updated my\
    \ answer accordingly.\n<|/ c |>\n<| a dscore=2 |>\nI got this question from Hackerrank\
    \ and it gave me a correct answer:\n<code>", "  foreach ($lst as $key => $value)\
    \ {\n    if (is_int($value) && $value < 0 && $key < count($lst)) {\n      return\
    \ ($value, $key);\n    } else if (is_int($value) && $value >= 0 && $key < count($lst))\
    \ {\n      return ($value, $key);\n    }\n  }\n  return null;\n}\n", "  // Get\
    \ a list of all negative and positive integers.\n  $neg_ints = [];\n  $pos_ints\
    \ = [];\n  foreach ($lst as $item) {\n    if ($item < 0) {\n      $neg_ints[]\
    \ = $item;\n    } else {\n      $pos_ints[] = $item;\n    }\n  }\n\n  // Sort\
    \ them in descending order.\n  sort($neg_ints, SORT_NUMERIC);\n  sort($pos_ints,\
    \ SORT_NUMERIC);\n\n  // Return the largest.\n  if (count($neg_ints) > count($pos_ints))\
    \ {\n    return ($neg_ints[0], count($neg_ints));\n  } else {\n    return ($pos_ints[0],\
    \ count($pos_ints));\n  }\n}\n", "  foreach ($lst as $x) {\n    if (is_numeric($x)\
    \ && $x >= 0 && !is_infinite($x)) {\n      if ($x > $largest_x) {\n        $largest_x\
    \ = $x;\n      }\n      if ($x < $smallest_x) {\n        $smallest_x = $x;\n \
    \     }\n    }\n  }\n\n  return array($largest_x, $smallest_x);\n}\n", "  $positives\
    \ = [];\n  $negatives = [];\n\n  // loop through each value in list, store positive\
    \ and negative integers\n  // separately, and push them to the respective arrays\
    \ respectively\n  foreach ($lst as $item) {\n    if ($item > 0) {\n      $positives[]\
    \ = $item;\n    } else {\n      $negatives[] = $item;\n    }\n  }\n\n  // get\
    \ the max and min values of each\n  $max_positive = max($positives);\n  $min_negative\
    \ = min(array_reverse($negatives));\n\n  // return the tuple as (a, b)\n  return\
    \ [\n    $max_positive ? $max_positive : null,\n    $min_negative ? $min_negative\
    \ : null,\n  ];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php dscore=0 |>\nI wrote\
    \ an algorithm that sorts values using merge sort and then picks the max element\
    \ from the resulting array. \n<code>", "    if ($lst === []) {\n        return\
    \ ['', 0];\n    }\n\n    // Create a mapping from integers to the largest value\n\
    \    // that has been seen so far.\n    $largest = array_flip($lst);\n\n    //\
    \ Loop through each value in the list and compare it\n    // to the largest value\
    \ seen so far.\n    foreach ($lst as $key => $value) {\n        // If the value\
    \ is smaller than the largest value seen\n        // so far, then the new largest\
    \ value has been reached.\n        if ($value < $largest[$key]) {\n          \
    \  $largest[$key] = $value;\n        }\n    }\n\n    // If there are no negative\
    \ or positive integers, return them as None.\n    if (empty($largest)) {\n   \
    \     return ['', 0];\n    }\n\n    return ['max' => max($largest), 'min' => min($largest)];\n\
    }\n", "  $max_int = NULL;\n  $min_int = INF;\n  foreach ($lst as $x) {\n    if\
    \ ($x < 0) {\n      if ($max_int === NULL || $x < $min_int) {\n        $max_int\
    \ = $x;\n      }\n    } else {\n      if ($max_int === NULL || $x > $min_int)\
    \ {\n        $min_int = $x;\n      }\n    }\n  }\n\n  return array($max_int, $min_int);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is very interesting, thank you so much for\
    \ sharing this approach! I did not know this existed.\n<|/ c |>\n<| c |>\nI'm\
    \ looking at your code and I see that you have two variables for the min and max;\
    \ does this code assume that they are already sorted?\n<|/ c |>\n<| c |>\nNot\
    \ sure if I'm misunderstanding your question, but this assumes that you already\
    \ have sorted the values before-hand, and that you're only interested in the max\
    \ and min values.\n<|/ c |>\n<| c |>\nYeah, I am assuming that the data has been\
    \ sorted. It would be very difficult to come up with a way to make it work for\
    \ unsorted data.\n<|/ c |>\n<| c |>\nAgreed. Had it been sorted before, though,\
    \ I would have used the code posted by [Rob](https://stackoverflow.com/users/5166788/rob)\
    \ which uses min and max to find the greatest and smallest values, respectively.\
    \ I didn't see his answer, but his solution also assumes that the array is sorted,\
    \ and I didn't see a way to make it work for unsorted data.\n<|/ c |>\n<| a |>\n\
    You can use array_filter() with max and min functions to get the greatest and\
    \ smallest values.\n<code>\n$myarray = array(\n    array(\"id\"=>\"11\",\"name\"\
    =>\"Kenneth\"),\n    array(\"id\"=>\"22\",\"name\"=>\"Robert\"),\n    array(\"\
    id\"=>\"31\",\"name\"=>\"Michael\"),\n    array(\"id\"=>\"41\",\"name\"=>\"Josh\"\
    ),\n    array(\"id\"=>\"52\",\"name\"=>\"Joseph\")\n);\n\n$greatest_value = max(array_map(function($e)\
    \ { return $e['id']; }, $myarray));\n$smallest_value = min(array_map(function($e)\
    \ { return $e['id']; }, $myarray));\n\nvar_dump($greatest_value, $smallest_value);\n\
    </code>\n<|/ a tags=arrays,php,arraylist dscore=3 |>\n<| a |>", "    if (!$lst)\
    \ {\n        return array(None, None);\n    }\n\n    $min = min($lst);\n    $max\
    \ = max($lst);\n\n    if (!$min && !$max) {\n        return array(None, None);\n\
    \    }\n\n    return array($min, $max);\n}\n", "    if (empty($lst)) {\n     \
    \   return (None, None)\n    }\n\n    $result = array_slice($lst, max(count($lst),\
    \ 1), -count($lst));\n\n    $min = -PHP_INT_MAX;\n    $max = PHP_INT_MIN;\n  \
    \  foreach ($result as $number) {\n        if ($number < 0) {\n            if\
    \ ($min > -$number) {\n                $min = $number;\n            }\n      \
    \  } elseif ($number > 0) {\n            if ($max < $number) {\n             \
    \   $max = $number;\n            }\n        }\n    }\n    return ($min >= $max)\
    \ ? $min : ($max === -PHP_INT_MAX ? None : ($min === -PHP_INT_MAX ? None : ($min,\
    \ $max)));\n}\n", "  // Initialize our result.\n  $result = array();\n  // Find\
    \ the max and min of the list.\n  $max = $min = null;\n  foreach ($lst as $value)\
    \ {\n    $value = max(0, $value);\n    if ($max === null || ($value < $max)) {\n\
    \      $max = $value;\n    }\n    if ($min === null || ($value > $min)) {\n  \
    \    $min = $value;\n    }\n  }\n  // Return either of our result.\n  return array($max,\
    \ $min);\n}\n</code>\n<|/ a dscore=3 tags=php |>\n<| a dscore=2 tags=php |>\n\
    <code>\n<?php\n\n/**\n * Largest and Smallest Integer in a Array\n *\n * array\
    \ $input\n * mixed $default\n * null\n */", "    $result = null;\n    foreach\
    \ ($lst as $num => $value) {\n        if ($result==null || $value < $result) {\n\
    \            $result = $value;\n        }\n    }\n    return ($result, -$result);\n\
    }\n", "  return max(min($lst), 0);\n}\n", "  $negative = -($lst[0]);\n  $positive\
    \ = ($lst[0]);\n  foreach ($lst as $val) {\n    if (($val > $negative) && ($val\
    \ < $positive)) {\n      $negative = $val;\n      $positive = $val;\n    }\n \
    \ }\n  if ($negative == $positive) {\n    return ($negative, null);\n  } else\
    \ {\n    return ($positive, $negative);\n  }\n}\n", "  $max = -PHP_INT_MAX;\n\
    \  $min = PHP_INT_MAX;\n  foreach ($lst as $n) {\n    $a = bcsub($max, $n);\n\
    \    $b = bcsub($n, $min);\n    if (bccomp($a, $b) == -1) {\n      $min = $n;\n\
    \    }\n    if (bccomp($a, $b) == 1) {\n      $max = $n;\n    }\n  }\n  if ($min\
    \ == -PHP_INT_MAX) {\n    return array(None, None);\n  }\n  if ($max == PHP_INT_MAX)\
    \ {\n    return array(0, None);\n  }\n  return array($min, $max);\n}\n", "  $result\
    \ = null;\n  foreach ($lst as $item) {\n    if (is_int($item) && is_int($result[0]))\
    \ {\n      if ($item > $result[0]) {\n        $result = ($item, $result[0]);\n\
    \      } else if ($item < $result[0]) {\n        $result = ($result[0], $item);\n\
    \      }\n    } else if (is_int($item)) {\n      $result = ($item, 0);\n    }\n\
    \  }\n\n  return $result;\n}\n", "    if (empty($lst)) {\n        return null;\n\
    \    }\n\n    // Get the largest integer of $lst, and use it as the 'a' value.\n\
    \    $largest = max ($lst);\n    $a_b = array (\n        0 => null,\n        1\
    \ => null,\n    );\n    foreach ($lst as $i) {\n        if ($i === $largest) {\n\
    \            // Return the smallest integer.\n            $a_b[1] = min($a_b[1],\
    \ $i);\n        } elseif ($i === $a_b[1]) {\n            // If the largest and\
    \ smallest integers are the same, return None.\n            $a_b[0] = null;\n\
    \            return $a_b;\n        } else {\n            // Otherwise, find the\
    \ smallest of the two integers.\n            // Start by making the largest the\
    \ smallest integer,\n            // then find the smallest of the remaining integers.\n\
    \            $a_b[1] = min($largest, $i);\n        }\n    }\n    // Return largest\
    \ and smallest integers.\n    return $a_b;\n}", "  asort($lst);\n  $first_int\
    \ = end($lst);\n  if ($first_int < 0) {\n    return ($first_int, null);\n  }\n\
    \  $second_int = key($lst);\n  return ($first_int, $second_int);\n}\n\n$arr =\
    \ array(\n  125 => 150,\n  419 => 503,\n  63 => 50,\n  63 => 500,\n);\n$arr2 =\
    \ array(\n  125 => 150,\n  419 => 503,\n);\n$arr3 = array(\n  125 => 150,\n  419\
    \ => 503,\n  63 => 50,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n\
    \  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 =>\
    \ 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n\
    \  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 =>\
    \ 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n\
    \  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 =>\
    \ 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n\
    \  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 =>\
    \ 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n\
    \  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 =>\
    \ 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n\
    \  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  63 => 500,\n  6", " \
    \   // If no list, return (None, None)\n    if(!is_array($lst)) {\n        return\
    \ (None, None)\n    }\n    // Initialize maximum and minimum values\n    $max\
    \ = null;\n    $min = null;\n    \n    // Loop over list of positive and negative\
    \ integers\n    foreach($lst as $i) {\n        // If value is negative, update\
    \ max value, otherwise update min value.\n        if($i < 0) {\n            $max\
    \ = $i;\n        } else {\n            $min = $i;\n        }\n    }\n    \n  \
    \  // Return tuple (min, max) if values are non-null\n    return (isset($min)\
    \ ? $min : None, isset($max) ? $max : None);\n}\n", "  $int_lst = array_filter($lst,\
    \ 'is_int');\n  if (empty($int_lst)) {\n    return array();\n  }\n  $smallest\
    \ = min(array_keys($int_lst));\n  $largest = max(array_keys($int_lst));\n  return\
    \ array($smallest, $largest);\n}\n</code>\n<|/ a tags=arrays,sorting,php,largest-number\
    \ |>\n<| a tags=arrays,sorting,php,largest-number |>\nAs mentioned before, using\
    \ array_filter() is the best way to solve this problem.  Here is an implementation\
    \ of it that uses sort() to sort a copy of the original array, and returns the\
    \ key of the largest element:\n<code>", "  if ($lst === null || empty($lst)) {\n\
    \    return array(null, null);\n  }\n  $min_num = null;\n  $max_num = null;\n\
    \  foreach ($lst as $num) {\n    if ($min_num === null || $num < $min_num) {\n\
    \      $min_num = $num;\n    }\n    if ($max_num === null || $num > $max_num)\
    \ {\n      $max_num = $num;\n    }\n  }\n  return array($min_num, $max_num);\n\
    }", "  $a = null;\n  $b = null;\n\n  // Iterate over each element of the array.\n\
    \  foreach ($lst as $i) {\n    // Check if the current element is negative, and\
    \ if so\n    // keep track of the greatest positive integer so far.\n    if ($i\
    \ < 0) {\n      if ($b == null || $a > $b) {\n        $b = $i;\n      }\n    }\
    \ else {\n      if ($a == null || $b < $a) {\n        $a = $i;\n      }\n    }\n\
    \  }\n\n  return array('smallest' => $a, 'largest' => $b);\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThanks, I really like your solution. I tried my own method first\
    \ but I got stuck with it too. I think I understand your answer but it would be\
    \ great if you could provide some help for the other solution.\n<|/ c |>\n<| c\
    \ |>\n: I added a couple of explanations to my answer.\n<|/ c |>\n<| a |>\nThis\
    \ code uses a recursive function called \"largest_smallest_integers\".\nThe code\
    \ is commented so it can be easy to understand how it works.\n<code>\n<?php",
  "  // Write your code here.\n}\n</cell>\n<text>\nImplement a function that returns\
    \ the longest string in a list of strings.\nIf the list of strings is empty, return\
    \ an empty string.\nIf all the strings are the same length, return the string.\n\
    Otherwise, return the string that occurs the most often in the list.\n\n\n</text>\n\
    <cell>", "  $largest_int = null;\n  $smallest_int = null;\n\n  foreach ($lst as\
    \ $int) {\n    if ($largest_int === null || $int > $largest_int) {\n      $largest_int\
    \ = $int;\n    }\n    if ($smallest_int === null || $int < $smallest_int) {\n\
    \      $smallest_int = $int;\n    }\n  }\n\n  return [$largest_int, $smallest_int];\n\
    }\n", "  foreach ($lst as $k => $v) {\n    if ($v <= 0) {\n      return array($v,\
    \ $k);\n    }\n  }\n  $max = null;\n  $min = null;\n  foreach ($lst as $k => $v)\
    \ {\n    if ($v >= 0) {\n      if ($max === null or $v > $max) {\n        $max\
    \ = $v;\n      }\n      if ($min === null or $v < $min) {\n        $min = $v;\n\
    \      }\n    }\n  }\n  if ($min === null) {\n    return array($max, null);\n\
    \  }\n  if ($max === null) {\n    return array(0, null);\n  }\n  return array($max,\
    \ $min);\n}\n", "  list($max) = array_reduce($lst, function($a, $x) {\n    return\
    \ $a <= $x ? $a : $x;\n  }, PHP_INT_MAX);\n  list($min) = array_reduce($lst, function($a,\
    \ $x) {\n    return $a >= $x ? $a : $x;\n  }, -PHP_INT_MAX);\n\n  return $max\
    \ < $min ? array('max' => $max, 'min' => $min) : array('max' => null, 'min' =>\
    \ null);\n}\n", "  $negs = array_filter($lst, 'is_int');\n  if (count($negs) >\
    \ 0) {\n    sort($negs);\n    $min = reset($negs);\n    $max = 0;\n    foreach\
    \ ($negs as $n) {\n      if ($n > $max) {\n        $max = $n;\n      }\n    }\n\
    \    return array('min' => $min, 'max' => $max);\n  }\n  $pos = array_filter($lst,\
    \ 'is_int');\n  if (count($pos) > 0) {\n    sort($pos);\n    $min = reset($pos);\n\
    \    $max = end($pos);\n    return array('min' => $min, 'max' => $max);\n  }\n\
    \  return null;\n}\n", "  if (is_null($lst)) {\n    return NULL;\n  }\n\n  $max\
    \ = NULL;\n  $min = NULL;\n  foreach ($lst as $item) {\n    $min = ($item < $min\
    \ ? $item : $min);\n    $max = ($item > $max ? $item : $max);\n  }\n\n  return\
    \ array($max, $min);\n}\n", "  $smallest = null;\n  $largest = null;\n  foreach\
    \ ($lst as $int) {\n    if ($smallest == null || $int < $smallest) {\n      $smallest\
    \ = $int;\n    }\n    if ($largest == null || $int > $largest) {\n      $largest\
    \ = $int;\n    }\n  }\n  return array($smallest, $largest);\n}\n</code>\nAs to\
    \ why this works, I'm guessing there's a good reason for why this works, but it\
    \ can be summed up by saying that PHP's built-in sorting functions aren't the\
    \ most efficient.\n<|/ a |>\n<| c |>\nThat is great and simple to understand!\
    \ However I feel this could be done a little cleaner without using any PHP functions\
    \ as I have found them not all that efficient.\n<|/ c |>\n<| c |>\nI added an\
    \ alternative method that doesn't use `max()` and `min()`. Hopefully that helps!\n\
    <|/ c |>\n<| c |>\nThat will work but it will not be as efficient as min/max as\
    \ you are using O(n) functions instead of O(log n). However if you were to use\
    \ a stable sort, then you could use O(log n) functions, I believe.\n<|/ c |>\n\
    <| c |>\nOh yeah sorry, I meant O(n) instead of O(log n). Haven't had any coffee\
    \ yet this morning\n<|/ c |>\n<| c |>\nI added a method that doesn't use `max()`\
    \ and `min()`. It doesn't use `max()` at all, but it does use O(n) functions.\n\
    <|/ c |>\n<| a tags=php,math,arrays,algorithm |>\n<code>\n$a = [1,4,5,-4,-5,-6,7,-5,-6,-4,8,10];\n\
    $b = array();\n$i=0;\nwhile($i<count($a)){\n    if ($a[$i] >= 0) {\n        $b[$a[$i]]++;\n\
    \        $i++;\n    }\n}\nasort($b);\n$c = array();\n$i = 0;\n$j = 0;\nforeach($b\
    \ as $value){\n    if ($value >0) {\n        $c[$j]=$value;\n        $j++;\n \
    \   }\n}\nprint_r($c);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHow does this handle\
    \ the case where there are duplicates?\n<|/ c |>\n<| c |>\nI wrote this answer\
    \ before I realized that there will be duplicate values. This is what it looks\
    \ like now https://", "  foreach ($lst as $i => $n) {\n    if ($n < 0) {\n   \
    \   return (array(None, $n), $i);\n    }\n  }\n  foreach ($lst as $i => $n) {\n\
    \    if ($n > 0) {\n      return (array($n, None), $i);\n    }\n  }\n  return\
    \ (array(None, None), 0);\n}\n", "  if (empty($lst)) {\n    return array(None,\
    \ null);\n  }\n  $greatest = 0;\n  $least = -PHP_INT_MAX;\n  $smallest = PHP_INT_MAX;\n\
    \  foreach ($lst as $value) {\n    if ($value < $greatest) {\n      $greatest\
    \ = $value;\n    } else if ($value >= $least) {\n      $least = $value;\n    }\n\
    \    if ($greatest < $smallest || $greatest == $smallest && $value == $least)\
    \ {\n      $smallest = $value;\n    }\n  }\n  if ($greatest < $smallest || $greatest\
    \ == $smallest && $lst == $smallest) {\n    return array(None, null);\n  }\n \
    \ return array($greatest, $least);\n}\n", "  global $LARGEST_INTEGER_SINGLE;\n\
    \  global $SMALLEST_INTEGER_SINGLE;\n  $largest = array($LARGEST_INTEGER_SINGLE);\n\
    \  $smallest = array($SMALLEST_INTEGER_SINGLE);\n\n  foreach ($lst as $item) {\n\
    \    if ($item < 0) {\n      $largest[0] = $largest[1] ? $largest[1] : $item;\n\
    \    } else if ($item > 0) {\n      $smallest[0] = $smallest[1] ? $smallest[1]\
    \ : $item;\n    } else {\n      return ($largest[0], $smallest[0]);\n    }\n \
    \ }\n  return ($largest[0], $smallest[0]);\n}\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\nNice, but doesn't this fail if all the integers are the same? I.e. all\
    \ negative or all positive integers are the same.\n<|/ c |>\n<| c |>\nYes, it\
    \ should. It's a quick and dirty solution, it's easy to add an `else` clause if\
    \ you need to handle it (like you did in your question). There's a quick and dirty\
    \ solution to that, and another that works on edge cases and handles them (my\
    \ solution). Both are equally good.\n<|/ c |>\n<| c |>\nThanks, I appreciate the\
    \ time you took to answer this.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>",
  "  foreach ($lst as $v) {\n    if (is_int($v)) {\n      $v = ($v < 0) ? -$v : $v;\n\
    \    }\n  }\n  if (count($lst)) {\n    sort($lst);\n    $firstNegative = array_search(-1,\
    \ $lst);\n    $firstPositive = array_search(1, $lst);\n    if ($firstNegative\
    \ !== false && $firstPositive !== false) {\n      return array($firstPositive,\
    \ $firstNegative);\n    }\n  }\n  return array();\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=algorithm,php |>\nTry this approach\n<code>\n<?php\n$a = [\n \
    \ 2,4,1,3,5,7\n];\n", "    // initialize variables\n    $min_val = NULL;\n   \
    \ $max_val = NULL;\n\n    // if the list is empty, return (None, None)\n    if\
    \ (count($lst) == 0) {\n        return (None, None);\n    }\n\n    // create a\
    \ for loop that iterates through each item in the list\n    // setting $max_val\
    \ and $min_val to appropriate values\n    // and comparing each item to see if\
    \ it is the largest or smallest\n    // current item\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        // if the item is smaller than the current smallest value,\
    \ save it as the new smallest value\n        if ($lst[$i] < $min_val) {\n    \
    \        $min_val = $lst[$i];\n        }\n\n        // if the item is greater\
    \ than the current largest value, save it as the new largest value\n        if\
    \ ($lst[$i] > $max_val) {\n            $max_val = $lst[$i];\n        }\n    }\n\
    \n    // return a tuple of the largest and smallest values\n    return ($max_val,\
    \ $min_val);\n}\n", "    sort($lst);\n\n    // Get the first element.  It must\
    \ be negative.\n    $first = array_shift($lst);\n\n    if (count($lst) == 0) {\n\
    \        return null;\n    }\n\n    // Find out which of the items are smaller.\n\
    \    $smaller = null;\n\n    foreach ($lst as $item) {\n        if ($item < $first)\
    \ {\n            $smaller = $item;\n            break;\n        }\n    }\n\n \
    \   // If the first item in the list is smaller, return it.\n    if ($smaller\
    \ !== null) {\n        return array(0, $smaller);\n    }\n\n    // There were\
    \ no negative integers, so compare the first item\n    // with the remaining items.\n\
    \    return largest_smallest_integers($lst);\n}\n", "  if (empty($lst)) {\n  \
    \  return array('None', 'None');\n  }\n  $largest = max($lst);\n  $smallest =\
    \ min($lst);\n  if (!($largest < 0 && $smallest > 0)) {\n    return array($largest,\
    \ $smallest);\n  }\n  return array('None', 'None');\n}\n", "    $min_int = PHP_INT_MAX;\n\
    \    $max_int = -PHP_INT_MAX;\n    foreach($lst as $e) {\n        if ($e < 0)\
    \ {\n            if ($e < $min_int)\n                $min_int = $e;\n        }\
    \ else {\n            if ($e > $max_int)\n                $max_int = $e;\n   \
    \     }\n    }\n    return ($min_int > $max_int) ? array($min_int, $max_int) :\
    \ null;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nOoops, missed that one.\
    \ Added a version that works on empty lists as well.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nI hope this helps\n<code>\n<?php\n$arr = array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);\n\
    $largest = max($arr);\n$smallest = min($arr);\n$arr = array_diff($arr,array($largest,$smallest));\n\
    echo \"Largest is \".$largest.\" Smallest is \".$smallest;\necho \"<br>\";\necho\
    \ \"Array is\";\nprint_r($arr);", "    if (!is_array($lst)) return null;\n   \
    \ $min = max($lst);\n    $max = min($lst);\n    return ($min < $max ? array($min,\
    \ $max) : null);\n}", "  $largest = null;\n  $smallest = null;\n  foreach ($lst\
    \ as $elt) {\n    $is_negative = is_null($smallest) || $elt < $smallest;\n   \
    \ $is_positive = is_null($largest) || $elt > $largest;\n    if ($is_negative &&\
    \ $is_positive) {\n      $smallest = $elt;\n    } else if ($is_negative) {\n \
    \     $largest = $elt;\n    } else {\n      $smallest = $elt;\n      $largest\
    \ = $elt;\n    }\n  }\n  return array($largest, $smallest);\n}\n", "  $min = -1;\n\
    \  $max = 0;\n  foreach ($lst as $i => $item) {\n    if ($item < 0) {\n      if\
    \ ($min < 0) {\n        $min = $item;\n      } else if ($item > $max) {\n    \
    \    $max = $item;\n      }\n    } else {\n      if ($max < 0) {\n        $max\
    \ = $item;\n      } else if ($item < $min) {\n        $min = $item;\n      }\n\
    \    }\n  }\n  return [min($min, -1), max($max, 0)];\n}\n</code>\nHere's how I\
    \ would write it using the map function:\n<code>", "  // Return the largest value\
    \ from $lst.\n  // If no such values are in $lst, return None.\n  $largest = $smallest\
    \ = null;\n  foreach ($lst as $value) {\n    if ($smallest === null || $value\
    \ < $smallest) {\n      $smallest = $value;\n    }\n    if ($largest === null\
    \ || $value > $largest) {\n      $largest = $value;\n    }\n  }\n  return [$largest,\
    \ $smallest];\n}\n", "  // Check for an empty list first.\n  if (empty($lst))\
    \ {\n    return (None, None);\n  }\n\n  // Initialize $a and $b.\n  $a = None;\n\
    \  $b = None;\n\n  // For each element in the list, check whether $a or\n  //\
    \ $b is larger than the current value.\n  foreach ($lst as $element) {\n    if\
    \ ($a is None or $b is None or $element > $a) {\n      $a = $element;\n    }\n\
    \    else if ($element < $b) {\n      $b = $element;\n    }\n  }\n\n  // Return\
    \ the tuple ($a, $b).\n  return ($a, $b);\n}\n", "  $min = null;\n  $max = null;\n\
    \  foreach ($lst as $elem) {\n    if ($min === null || $elem < $min) {\n     \
    \ $min = $elem;\n    }\n    if ($max === null || $elem > $max) {\n      $max =\
    \ $elem;\n    }\n  }\n  return array($min, $max);\n}", "  $negs = [];\n  $pos\
    \ = [];\n  $neg = null;\n  $pos = null;\n\n  foreach ($lst as $val) {\n    if\
    \ ($val < 0) {\n      $negs[] = $val;\n    } else {\n      $pos[] = $val;\n  \
    \  }\n  }\n\n  if (count($negs) > 0) {\n    $neg = array_shift($negs);\n  }\n\n\
    \  if (count($pos) > 0) {\n    $pos = array_shift($pos);\n  }\n\n  return [$neg,\
    \ $pos];\n}\n", "  if (empty($lst)) return (None, None);\n  $min = reset($lst);\n\
    \  foreach ($lst as $i) {\n    $min = $i if $i < $min;\n  }\n  $max = key($lst);\n\
    \  return ($min, $max);\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\n<code>\n\
    <?php", "  $positives = $negatives = [];\n\n  foreach ($lst as $val) {\n    if\
    \ ($val >= 0) {\n      $positives[] = $val;\n    } else {\n      $negatives[]\
    \ = $val;\n    }\n  }\n\n  return max($positives, $negatives);\n}\n\n$array =\
    \ array(\n  array('date' => new \\DateTime('2019-01-01', 'Europe/London'), 'amount'\
    \ => 10),\n  array('date' => new \\DateTime('2019-01-02', 'Europe/London'), 'amount'\
    \ => 20),\n  array('date' => new \\DateTime('2019-01-03', 'Europe/London'), 'amount'\
    \ => 30),\n  array('date' => new \\DateTime('2019-01-04', 'Europe/London'), 'amount'\
    \ => 50),\n  array('date' => new \\DateTime('2019-01-05', 'Europe/London'), 'amount'\
    \ => 100),\n);\n\nusort($array, 'sort_by_amount');\nprint_r($array);\n</code>\n\
    <|/ a tags=sorting,php,arrays,laravel dscore=0 |>\n<| c |>\nThis is a good idea,\
    \ but sorting a collection of objects is quite different from sorting an array\
    \ of primitives. In particular, it's pretty easy to miss cases where the same\
    \ key is being used to access two different keys in the same object.\n<|/ c |>\n\
    <| a dscore=0 tags=sorting,php,arrays,laravel |>\nYou can do something like this\
    \ : \n<code>", "    $max_int = PHP_INT_MAX;\n    $min_int = PHP_INT_MIN;\n   \
    \ foreach ($lst as $number) {\n        if ($number < $min_int) {\n           \
    \ $min_int = $number;\n        } else if ($number > $max_int) {\n            $max_int\
    \ = $number;\n        }\n    }\n    return array($max_int, $min_int);\n}\n", " \
    \ $biggest = $smallest = null;\n  $i = count($lst) - 1;\n  foreach($lst as $elem)\
    \ {\n    if ($elem < 0) {\n      if (!is_null($biggest)) {\n        return ($biggest,\
    \ $smallest);\n      }\n      $biggest = $elem;\n    } else if ($elem > 0) {\n\
    \      if (!is_null($smallest)) {\n        return ($biggest, $smallest);\n   \
    \   }\n      $smallest = $elem;\n    }\n    $i--;\n  }\n  return ($biggest, $smallest);\n\
    }\n", "  $max_negative = array();\n  $min_positive = array();\n  foreach ($lst\
    \ as $value) {\n    if ($value < 0)\n      $max_negative[] = $value;\n    else\n\
    \      $min_positive[] = $value;\n  }\n  if (count($max_negative) < 1)\n    return\
    \ array();\n  if (count($min_positive) < 1)\n    return array();\n  return array(max($max_negative),\
    \ min($min_positive));\n}", "  if (empty($lst)) {\n    return array('None', 'None');\n\
    \  }\n  $largest = max($lst);\n  $smallest = min($lst);\n  return array($largest,\
    \ $smallest);\n}\n", "  $min = null;\n  $max = null;\n  foreach ($lst as $i) {\n\
    \    if ($min == null || $i < $min) {\n      $min = $i;\n    }\n    if ($max ==\
    \ null || $i > $max) {\n      $max = $i;\n    }\n  }\n  return array($min, $max);\n\
    }", "  foreach($lst as $x) {\n    if (is_int($x)) {\n      $min = $x > 0 ? $x\
    \ : null;\n      $max = $x < 0 ? $x : null;\n      break;\n    }\n  }\n  return\
    \ array($min, $max);\n}\n", "  $negs = array_filter($lst, 'is_int');\n  $poss\
    \ = array_filter($lst, '!is_int');\n  if (count($negs) == 0) {\n    return $poss;\n\
    \  }\n  if (count($poss) == 0) {\n    return $negs;\n  }\n  $min = min($negs);\n\
    \  $max = max($poss);\n  return $min < $max ? array($min, $max) : array($max,\
    \ $min);\n}", "  foreach ($lst as $item) {\n    if ($item < 0) {\n      unset($lst[$item]);\n\
    \    } else {\n      $smallest = null;\n      $smallest_key = null;\n      foreach\
    \ ($lst as $key => $value) {\n        if ($smallest->value < $item) {\n      \
    \    $smallest = $item;\n          $smallest_key = $key;\n        }\n      }\n\
    \      $smallest_value = $lst[$smallest_key];\n      unset($lst[$smallest_key]);\n\
    \      return array($smallest_value, $smallest);\n    }\n  }\n  return array();\n\
    }\n", "    $positive = array_filter($lst, function ($x) {\n        return $x >=\
    \ 0;\n    });\n    $negative = array_filter($lst, function ($x) {\n        return\
    \ $x <= 0;\n    });\n\n    if (count($positive) === 0 && count($negative) ===\
    \ 0) {\n        return null;\n    }\n\n    if (count($negative) === 0) {\n   \
    \     return array_shift($positive);\n    }\n\n    return array_shift($negative);\n\
    }\n", "    $largest = null;\n    $smallest = null;\n    foreach ($lst as $num)\
    \ {\n        if ($largest == null || $num > $largest) {\n            $largest\
    \ = $num;\n        }\n        if ($smallest == null || $num < $smallest) {\n \
    \           $smallest = $num;\n        }\n    }\n    if ($smallest === null) {\n\
    \        $smallest = null;\n    }\n    if ($largest === null) {\n        $largest\
    \ = null;\n    }\n    return array('smallest' => $smallest, 'largest' => $largest);\n\
    }\n\n$large_number = largest_smallest_integers(range(1, 3000001));\n$large_number\
    \ = largest_smallest_integers([2, 4, 1, 3, 5, 7]);\n$large_number = largest_smallest_integers([]);\n\
    $large_number = largest_smallest_integers([0]);\n", "  foreach ($lst as $v) {\n\
    \    if ($v <= 0) {\n      return (null, $v);\n    } elseif ($v >= 0) {\n    \
    \  return (null, $v);\n    }\n  }\n  return (null, 0);\n}", "  foreach ($lst as\
    \ $item) {\n    $negative = abs($item);\n    if ($negative > 0) {\n      return\
    \ array($item, $negative);\n    }\n  }\n}\n", "  $a = null;\n  $b = null;\n  foreach\
    \ ($lst as $val) {\n    if (is_int($val)) {\n      if ($a === null) {\n      \
    \  $a = $val;\n        $b = $val;\n      }\n      else if ($a > $val) {\n    \
    \    $b = $val;\n      }\n      else {\n        $a = $val;\n      }\n    }\n \
    \ }\n  return array($a, $b);\n}\n", "  ksort($lst);\n  $smallest = NULL;\n  $largest\
    \ = NULL;\n  foreach ($lst as $item) {\n    if (is_int($item)) {\n      if ($smallest\
    \ == NULL || $item < $smallest) {\n        $smallest = $item;\n      }\n     \
    \ if ($largest == NULL || $item > $largest) {\n        $largest = $item;\n   \
    \   }\n    }\n  }\n  return array($smallest, $largest);\n}", "  foreach($lst as\
    \ $k => $v){\n    if($v > 0){\n      $smallest = $k;\n      $smallest_value =\
    \ $v;\n    }\n    else{\n      $largest = $k;\n      $largest_value = $v;\n  \
    \  }\n  }\n\n  return ($smallest_value, $largest_value);\n}\n", "  foreach ($lst\
    \ as $x) {\n    if ($x < 0) {\n      $a_b = null;\n      break;\n    }\n  }\n\
    \  foreach ($lst as $x) {\n    if ($x >= 0) {\n      $a_b = $x;\n      break;\n\
    \    }\n  }\n  return ($a_b == null ? array() : array(0, $a_b));\n}\n", "  //\
    \ Get the first element\n  $head = array_shift($lst);\n  $smallest = array_shift($lst);\n\
    \  $largest = array_shift($lst);\n  while (count($lst)) {\n    if ($head < $smallest)\
    \ {\n      $smallest = $head;\n    } elseif ($head > $largest) {\n      $largest\
    \ = $head;\n    }\n    $head = array_shift($lst);\n  }\n  return array($smallest,\
    \ $largest);\n}\n</code>\nThe code above is very simple, maybe not the most optimized\
    \ code but it works for me :)\n<|/ a |>\n<| a tags=algorithm,php dscore=0 |>\n\
    You can try the following.\n\nStart with a random number ($num).\nGenerate all\
    \ possible combinations of numbers ($combinations).\nSearch for the smallest number\
    \ in $combinations which is less than $num ($smallest).\n\nExample:\n<code>\n\
    $num = rand(0,100);\n$combinations = array();\n$combinations[] = $num;\n\nfor\
    \ ($i = 1; $i < 10; $i++) {\n    for ($j = 1; $j < 10; $j++) {\n        $combinations[]\
    \ = $num + $j;\n    }\n}\n\n$smallest = null;\n$smallestIndex = null;\n$i = 0;\n\
    while ($i < count($combinations)) {\n    if ($combinations[$i] < $smallest) {\n\
    \        $smallest = $combinations[$i];\n        $smallestIndex = $i;\n    }\n\
    \    $i++;\n}\n\necho \"The smallest number is $smallest, at index: $smallestIndex\"\
    ;\n</code>\n<|/ a |>\n<| c |>\nI believe he wants random numbers, not just one\
    \ number\n<|/ c |>\n<| c |>\nHe says random numbers, so that's what I've done.\n\
    <|/ c |>\n<| a tags=algorithm,php |>\nThis is my first time answering a question\
    \ here, so I'll first try to show my idea, and my answer to this question could\
    \ be improved.\nThis could be the possible implementation:\n<code>\n<?php\n$num\
    \ = 0;\n$arr = [$num];\nwhile ($num < 100) {\n    array_push($arr, $num + rand(0,\
    \ 9));\n}\nsort($arr);\n$arr2 = array_merge($arr, $arr);\n$arr2 = array_reverse($arr2);\n\
    $arr3 = array_unique($arr2);\n$smallest = array_shift($arr3);\necho 'Smallest\
    \ number found is: ' . $smallest . '<br />';\necho 'Index of this number is: '\
    \ . array_search($smallest, ", "  foreach ($lst as $item) {\n    if ($item < 0)\
    \ {\n      return array(None, $item);\n    }\n  }\n\n  foreach ($lst as $item)\
    \ {\n    if ($item > 0) {\n      return array(1, $item);\n    }\n  }\n\n  return\
    \ array();\n}\n", "  foreach ($lst as $e) {\n    if ($e < 0) {\n      $a = null;\n\
    \      break;\n    }\n    $a = $e;\n  }\n  foreach ($lst as $e) {\n    if ($e\
    \ > 0) {\n      $b = null;\n      break;\n    }\n    $b = $e;\n  }\n  return ($a\
    \ < $b) ? array('a'=>$a, 'b'=>$b) : array('a'=>$b, 'b'=>$a);\n}\n", "  $negmax\
    \ = null;\n  $posmin = null;\n  foreach ($lst as $item) {\n    if ($item < 0)\
    \ {\n      $negmax = $item;\n    } else if ($item > 0) {\n      $posmin = $item;\n\
    \    }\n  }\n  return ($negmax < $posmin) ? array($negmax, $posmin) : null;\n\
    }\n", "    $negatives = array_filter(\n        $lst,\n        function($v) { return\
    \ is_int($v) < 0; });\n    if (empty($negatives)) {\n        // No negative integers\n\
    \        return array(null, null);\n    }\n    $negatives = array_keys($negatives);\n\
    \    $sorted_negatives = array_reverse($negatives);\n\n    $positives = array_filter(\n\
    \        $lst,\n        function($v) { return is_int($v) > 0; });\n    if (empty($positives))\
    \ {\n        // No positive integers\n        return array(null, null);\n    }\n\
    \    $positives = array_keys($positives);\n    $sorted_positives = $positives;\n\
    \    // $sorted_positives = array_reverse($positives);\n\n    // Find the largest\
    \ and smallest integers in the list\n    $largest = end($sorted_negatives);\n\
    \    $smallest = end($sorted_positives);\n\n    // Return None if the list is\
    \ empty\n    if (empty($lst)) {\n        return array(null, null);\n    }\n  \
    \  // Return the largest integer if there are no negative integers\n    // and\
    \ the smallest integer if there are no positive integers\n    if (empty($negatives)\
    \ && empty($positives)) {\n        return array($largest, $smallest);\n    }\n\
    \    // Return the largest integer if there are negative integers\n    // and\
    \ the smallest integer if there are positive integers\n    if (empty($negatives))\
    \ {\n        return array($largest, null);\n    }\n    // Return the smallest\
    \ integer if there are negative integers\n    // and the largest integer if there\
    \ are positive integers\n    return array(null, $smallest);\n}\n", "    // Your\
    \ code here\n    $return = array();\n    foreach ($lst as $k => $v) {\n      \
    \  if ($v < 0) {\n            $return['neg'] = $v;\n        } elseif ($v > 0)\
    \ {\n            $return['pos'] = $v;\n        } else {\n            return null;\n\
    \        }\n    }\n    return $return;\n}", "  $max_int = 0;\n  $min_int = 1;\n\
    \  foreach ($lst as $int) {\n    if ($int > $max_int) {\n      $max_int = $int;\n\
    \    }\n    if ($int < $min_int) {\n      $min_int = $int;\n    }\n  }\n  return\
    \ array($max_int, $min_int);\n}\n", "  $lst_max = max($lst);\n  $lst_min = min($lst);\n\
    \  foreach ($lst as $i) {\n    if ($i > $lst_max) {\n      $lst_max = $i;\n  \
    \  }\n    if ($i < $lst_min) {\n      $lst_min = $i;\n    }\n  }\n  return array($lst_max,\
    \ $lst_min);\n}\n$result = largest_smallest_integers([-2, -1, 0, 1, 3, 10, 20,\
    \ 25, 33, 1000]);\nvar_dump($result);\n</code>\n<|/ a |>\n<| a dscore=1 |>\nI\
    \ did this in two steps:\n\nCreate a set of all positive integers.\nFind their\
    \ min/max values.\n\nHere's one way you can do this:\n<code>\n<?php\n$input =\
    \ array(5, 20, 10, 25, 35, 45);\n$positive_integer_set = array_filter($input,\
    \ function($val) use ($input) {\n  return is_int($val);\n});\n\n$negative_integer_set\
    \ = array_filter($input, function($val) use ($input) {\n  return !is_int($val);\n\
    });\n\n$min = $negative_integer_set[0] === -INFINITY ? null : $negative_integer_set[0];\n\
    $max = $positive_integer_set[count($positive_integer_set) - 1] === INFINITY ?\
    \ null : $positive_integer_set[count($positive_integer_set) - 1];\n\nprint_r($min);\n\
    print_r($max);\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => 10\n    [1] =>\
    \ 25\n)\nArray\n(\n    [0] => 45\n    [1] => 100\n)\n</code>\n<|/ a tags=php,arrays,function\
    \ |>\n<| a tags=php,arrays,function |>\nI like using the key parameter in PHP\
    \ functions:\n<code>", "    if (!$lst) {\n        return null;\n    }\n\n    $neg\
    \ = [];\n    $pos = [];\n    foreach ($lst as $val) {\n        if ($val < 0) {\n\
    \            $neg[] = $val;\n        } else {\n            $pos[] = $val;\n  \
    \      }\n    }\n\n    if (!$neg || !$pos) {\n        return [null, null];\n \
    \   }\n\n    $neg = max($neg);\n    $pos = min($pos);\n    return [$neg, $pos];\n\
    }\n", "  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n\
    \    if (is_int($item)) {\n      $number = $item;\n      if (is_int($largest)\
    \ || is_int($smallest)) {\n        $largest = max($largest, $number);\n      \
    \  $smallest = min($smallest, $number);\n      } else {\n        $largest = $number;\n\
    \        $smallest = $number;\n      }\n    }\n  }\n  return array('largest' =>\
    \ $largest, 'smallest' => $smallest);\n}\n", "  foreach ($lst as $v) {\n    if\
    \ ($v >= 0) {\n      continue;\n    }\n    $break = true;\n    foreach ($lst as\
    \ $v2) {\n      if ($v2 < 0 || $break) {\n        $break = false;\n        $v\
    \ = $v2;\n      }\n    }\n  }\n  if ($v >= 0) {\n    return array('v' => $v, 'i'\
    \ => 0);\n  } else {\n    return array('v' => null, 'i' => 0);\n  }\n}\n", " \
    \   if (!empty($lst)) {\n        $min_val = min($lst);\n        $max_val = max($lst);\n\
    \n        if ($min_val < 0 && $max_val > 0) {\n            return (None, $max_val);\n\
    \        } elseif ($min_val > 0 && $max_val < 0) {\n            return ($min_val,\
    \ None);\n        } else {\n            return ($min_val, $max_val);\n       \
    \ }\n    }\n\n    return null;\n}\n", "    $sorted_list = array_values(array_filter($lst,\
    \ \"is_int\"));\n    sort($sorted_list);\n\n    $a = null;\n    $b = null;\n \
    \   foreach ($sorted_list as $item) {\n        if ($a === null) {\n          \
    \  $a = $item;\n        } else {\n            if ($b === null) {\n           \
    \     $b = $item;\n            }\n        }\n    }\n\n    if ($a === null && $b\
    \ === null) {\n        $a = null;\n        $b = null;\n    }\n\n    return [$a,\
    \ $b];\n}\n</code>\n<|/ a dscore=0 tags=php,laravel,arrays |>\n<| a dscore=0 tags=php,laravel,arrays\
    \ |>\n<code>\n<?php", "  foreach($lst as $i => $x) {\n    if ($x > 0) {\n    \
    \  $smallest = $i;\n    }\n    if ($x < 0) {\n      $largest = $i;\n    }\n  }\n\
    \n  return ($smallest > $largest ? $smallest : $largest);\n}\n", "    if (empty($lst))\
    \ {\n        return null;\n    }\n    $biggest = -PHP_INT_MAX;\n    $smallest\
    \ = PHP_INT_MAX;\n    foreach ($lst as $number) {\n        if ($number < 0) {\n\
    \            if ($biggest < $number) {\n                $biggest = $number;\n\
    \            }\n        } elseif ($number > 0) {\n            if ($smallest >\
    \ $number) {\n                $smallest = $number;\n            }\n        } else\
    \ {\n            if ($biggest < $smallest) {\n                $biggest = $smallest;\n\
    \            }\n            $smallest = null;\n        }\n    }\n    if ($biggest\
    \ < $smallest) {\n        return array($biggest, $smallest);\n    } else {\n \
    \       return array((int)$biggest, (int)$smallest);\n    }\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't give the smallest and largest integer. it\
    \ gives either one or the other, but not both.\n<|/ c |>\n<| a dscore=0 tags=php,sorting,arrays\
    \ |>\nI needed to return largest and smallest integer in array in PHP. I did this\
    \ and I used the below function:\n<code>", "  $neg = NULL;\n  $pos = NULL;\n \
    \ foreach ($lst as $v) {\n    if ($v < 0)\n      $neg = $v;\n    elseif ($v >\
    \ 0)\n      $pos = $v;\n  }\n  if ($neg === NULL || $pos === NULL)\n    return\
    \ NULL;\n  return ($neg > $pos) ? $neg : $pos;\n}", "    // Get the largest and\
    \ smallest positive integers in the list.\n    $highest_positive = min(array_filter($lst,\
    \ \"is_int\"), 0);\n    $lowest_negative = max(array_filter($lst, \"is_int\"),\
    \ 0);\n\n    // If there is no negative and positive integers, return them as\
    \ None.\n    if ($highest_positive == 0 && $lowest_negative == 0) {\n        return\
    \ array(null, null);\n    }\n\n    // If the highest positive integer is the lowest\
    \ negative integer, return the smallest of them.\n    if ($highest_positive ==\
    \ $lowest_negative) {\n        return array($lowest_negative, $lowest_negative);\n\
    \    }\n\n    // If the highest positive integer is bigger than the smallest negative\
    \ integer, return the smallest one.\n    if ($highest_positive > $lowest_negative)\
    \ {\n        return array($lowest_negative, $highest_positive);\n    }\n\n   \
    \ // If the highest positive integer is smaller than the smallest negative integer,\
    \ return the biggest one.\n    return array($highest_positive, $lowest_negative);\n\
    }\n", "  if (empty($lst)) {\n    return array(None, None);\n  }\n\n  $smallest\
    \ = min($lst);\n  $largest = max($lst);\n  return array($smallest, $largest);\n\
    }\n", "  // Make sure the list is non-empty.\n  if (empty($lst))\n    return (None,\
    \ None)\n  // Get the largest positive integer.\n  $max_pos = array_reduce($lst,\
    \ 'max', 0);\n  // Get the smallest negative integer.\n  $min_neg = array_reduce($lst,\
    \ 'min', 0);\n  // Return the tuple (max_pos, min_neg) if there is at least one\
    \ positive integer\n  // and at least one negative integer, else return (None,\
    \ None).\n  return ($max_pos != 0 || $min_neg != 0) ? array('min' => $min_neg,\
    \ 'max' => $max_pos) : (None, None)\n}\n", "  if (empty($lst)) return null;\n\
    \  $min_pos = array_search(min($lst), $lst);\n  $max_pos = array_search(max($lst),\
    \ $lst);\n  return ($max_pos === false ? null : ($max_pos < $min_pos ? $max_pos\
    \ : $min_pos));\n}\n", "  $smallest = null;\n  $largest = null;\n  $largest_integer\
    \ = null;\n\n  foreach ($lst as $num) {\n    if ($smallest === null) {\n     \
    \ $smallest = $num;\n      $largest = $num;\n      $largest_integer = $num;\n\
    \    }\n    if ($num > $largest) {\n      $largest = $num;\n    }\n    if ($num\
    \ < $smallest) {\n      $smallest = $num;\n    }\n    if ($num > $largest_integer)\
    \ {\n      $largest_integer = $num;\n    }\n  }\n  return array($smallest, $largest,\
    \ $largest_integer);\n}\n", "  $positives = $negatives = [];\n  foreach ($lst\
    \ as $n) {\n    if ($n < 0) { $negatives[] = $n; }\n    else            { $positives[]\
    \ = $n; }\n  }\n  if (count($negatives) === 0 && count($positives) === 0) {\n\
    \    return array();\n  }\n  if (count($negatives) === 0) {\n    return ($positives[0]\
    \ > 0 ? $positives : null);\n  }\n  if (count($positives) === 0) {\n    return\
    \ ($negatives[0] > 0 ? $negatives : null);\n  }\n  $positives = array_slice($positives,\
    \ 0, 1);\n  $negatives = array_slice($negatives, 0, 1);\n  foreach ($positives\
    \ as $k => $p) {\n    foreach ($negatives as $n => $n) {\n      if ($p < $n) {\n\
    \        $p = null;\n        $n = $n;\n      }\n    }\n    $positives[$k] = $p;\n\
    \  }\n  return ($negatives[0] > 0 ? $positives : null);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
