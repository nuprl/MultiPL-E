name: HumanEval_42_incr_list
language: php
results:
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $last = end($l);\n \
    \ return array_merge(array($last), $l) + array(0);\n}\n\n/**\n * Checks whether\
    \ the given value is a non-empty array.\n * Uses php's empty() by default.\n */\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_tryunpw.php:21\n\
    Stack trace:\n#0 /tmp/tmp_tryunpw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_tryunpw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_reduce($l,\
    \ function($out, $i) {\n    return $out + $i;\n  }, 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpomnqfbir.php:18\n\
    Stack trace:\n#0 /tmp/tmpomnqfbir.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpomnqfbir.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = 0;\n    foreach\
    \ ($l as $val) {\n        $l[$i]++ ;\n        $i++;\n    }\n    return $l;\n}\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = array();\n\
    \    foreach ($l as $item) {\n        $result[] = $item+1;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = 1;\n    $r =\
    \ array();\n    foreach ($l as $val) {\n        $r[] = $i++;\n    }\n    return\
    \ $r;\n}\n</code>\n<|/ a dscore=5 tags=algorithm,php,list,arrays |>\n<| c |>\n\
    Nice. I never thought of that.\n<|/ c |>\n<| c |>\nI used this in one project\
    \ and it worked very well. You just need to use an associative array instead of\
    \ numeric for the increment key. Otherwise it fails badly if the array has a duplicate\
    \ value.\n<|/ c |>\n<| a dscore=5 |>\nYou could always create a multidimensional\
    \ array:\n<code>\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpam8hbedg.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$r = [];\n\tforeach\
    \ ($l as $e) {\n\t\t$r[] = $e + 1;\n\t}\n\treturn $r;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = array();\n  foreach\
    \ ($l as $item) {\n    $r[] = $item + 1;\n  }\n  return $r;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $last = array_pop($l);\n\
    \    return $l + array($last);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwlg7j_a.php:17\n\
    Stack trace:\n#0 /tmp/tmpqwlg7j_a.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpqwlg7j_a.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = array();\n  foreach($l\
    \ as $k => $v) {\n    $res[$k + 1] = $v;\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6xovq0x.php:21\n\
    Stack trace:\n#0 /tmp/tmpn6xovq0x.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpn6xovq0x.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $l = is_array($l) ?\
    \ $l : func_get_args();\n  $l[0] = 0;\n  return array_slice($l, 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65rvxgks.php:19\n\
    Stack trace:\n#0 /tmp/tmp65rvxgks.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp65rvxgks.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = array();\n  foreach\
    \ ($l as $e) {\n    $r[] = $e + 1;\n  }\n  return $r;\n}\n</code>\n<|/ a dscore=1\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\nYou can use array_walk:\n<code>\n\
    $arr = array(\"one\", \"two\", \"three\");\narray_walk($arr, function(&$element)\
    \ { $element++; });\nprint_r($arr);\n</code>\nOutput:\n<code>\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 3\n)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array('one', 'two', 'three');\nforeach($array as &$value)\
    \ {\n    $value++;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\nI like to use array_reduce for this sort of thing.\n<code>\n$array = array('one',\
    \ 'two', 'three');\n\n$new_array = array_reduce($array, function(&$val, $x) {\n\
    \    return $val + 1;\n});\n\nprint_r($new_array);\n</code>\nOutputs:\n<code>\n\
    Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n)\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nYour example is confusing because your array is 1 dimensional,\
    \ and your reduce callback always returns 1, so you don't actually reduce anything.\n\
    <|/ c |>\n<| c |>\nYes, but it's still a very nice example.  I always forget about\
    \ this function.\n<|/ c |>\n<| a dscore=1 tags=php,arrays |>\nYou can use array_walk\
    \ (http://php.net/manual/en/function.array-walk.php)\n<code>\n$a = [1,2,3,4,5,6];\n\
    array_walk($a, function(&$item) { $item++; });\n</code>\n<|/ a |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('one', 'two', 'three');\nforeach ($array as $k =>\
    \ $v){\n    $array[$k] = $v + 1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    $a1 = array(1, 2, 3);\n$a2 = array(1, 2, 3);\n\nforeach($a1 as $key => $value){\n\
    \    $a1[$key] += 1;\n}\n\nforeach($a2 as $key => $value){\n    $a2[$key] += 1;\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp56xq_rvq.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $l2 = array();\n \
    \   foreach($l as $i) {\n        $l2[] = $i + 1;\n    }\n    return $l2;\n}\n\
    </code>\n<|/ a tags=php,arrays,increment dscore=2 |>\n<| a |>\nThis can be accomplished\
    \ without looping at all, just use array_map and array_search:\n<code>\n$result\
    \ = array_map(function ($i) { return ++$i; }, array_search($value, $array));\n\
    </code>\nHere's a demonstration:\n<code>\n$array = array(\n    1 => 1,\n    2\
    \ => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n   \
    \ 8 => 8,\n    9 => 9,\n    10 => 10\n);\n\n$value = 2;\n\n$result = array_map(function\
    \ ($i) { return ++$i; }, array_search($value, $array));\n\nprint_r($result);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n\
    \    [3] => 6\n    [4] => 7\n    [5] => 8\n    [6] => 9\n    [7] => 10\n)\n</code>\n\
    Demo\n<|/ a tags=php,arrays,increment dscore=2 |>\n<| a tags=php,arrays,increment\
    \ dscore=1 |>\n<code>\n$arr = [1,2,3,4,5,6,7,8,9,10];\n$num = array_search(\"\
    3\",$arr);\n$arr[++$num] = $num + 1;\nprint_r($arr);\n</code>\nOutput: Array (\
    \ [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 [5] => 6 [6] => 7 [7] => 8 [8]\
    \ => 9 [9] => 10 )\n<|/ a |>\n<| a dscore=0 |>\nOne method is to do a search and\
    \ replace in one step. This solution only works for single digit numbers. A more\
    \ general solution would have to replace the single digit matches with a range\
    \ of digits by replacing the single digit with each of the digits in the range\
    \ (e.g. 3 with 1,2,3), then replace each digit in each range with it's own incremented\
    \ value. This would work best if the array/pattern of numbers is fairly static.\n\
    Here's an example:\n<code>\n$array = array(\n    1 => 1,\n    2 => 2,\n    3 =>\
    \ 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 =>\
    \ 9,\n    10 => 10\n);\n$value = 2;\n\n$replacement = array_\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpun9ecoaf.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$ret = [];\n\tforeach\
    \ ($l as $e) {\n\t\t$ret[$e] = $e;\n\t}\n\tfor ($i = count($l) - 1; $i >= 0; $i--)\
    \ {\n\t\t$ret[$i + 1] = $ret[$i] + 1;\n\t}\n\treturn $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdofq5xkl.php:24\n\
    Stack trace:\n#0 /tmp/tmpdofq5xkl.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdofq5xkl.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$r = [];\n\tforeach\
    \ ($l as $e) {\n\t\t$r[] = $e + 1;\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  foreach ($l as $v) {\n        $r[$v + 1] = $v;\n    }\n    return $r;\n}\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nVery nice. But what is the function called?\
    \ I can't find it in the PHP5 documentation.\n<|/ c |>\n<| c |>\nI called it `incr_list`\
    \ because it does what this code is trying to do: increment the value of an element\
    \ in a list. I call it `incr_array` because it increments the array by one element.\
    \ I call it `incr_assoc` because it increments the array by a number of elements.\
    \ It's not called `incr`, because that would break array keys. I call it `incr_number`\
    \ because it increments a number by one or more.\n<|/ c |>\n<| a |>\nYou can use\
    \ the array_search() function to get the current index of the array you want to\
    \ use as the base of the increment. After that you can use array_slice() to increment\
    \ the array by that many elements. Here's an example of how you could do it:\n\
    <code>\n$array = array(1,2,3,4,5,6,7,8,9);\n$index = array_search($_GET['next'],\
    \ $array);\n$newArray = array_slice($array, $index, 1);\n$newArray[] = $_GET['next'];\n\
    </code>\n<|/ a dscore=4 tags=arrays,php |>\n<| a dscore=2 |>\nThis solution is\
    \ very similar to Jonathan Sampson's but does it in a very concise way:\n<code>\n\
    $array = array( ... ); // your array\n$key = $_GET['next'];  // your search key\n\
    $index = 0; // your start index\n$index += array_search( $key, $array );\n$array\
    \ = array_slice($array, $index, 1); // slice array until you reach the key\n$array[]\
    \ = $key;  // add the key at the end of the array\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a |>\nI needed a more generic solution that accepted any array and any\
    \ key and also a starting index. Here's my solution:\n<code>\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy98titsa.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $new_list = array();\n\
    \    $i = -1;\n    foreach ($l as $value) {\n        $i++;\n        $new_list[$i]\
    \ = $value;\n    }\n    return $new_list;\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6y9rr24t.php:23\n\
    Stack trace:\n#0 /tmp/tmp6y9rr24t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6y9rr24t.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $ret = array();\n\
    \    foreach ($l as $k => $v) {\n        $ret[$k]++;\n    }\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpum8zmgue.php:21\n\
    Stack trace:\n#0 /tmp/tmpum8zmgue.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpum8zmgue.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = array();\n\
    \    foreach($l as $e) {\n        $res[] = $e + 1;\n    }\n    return $res;\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = array_merge([null],\
    \ $l);\n  $l = count($r);\n  for ($i = $l - 1; $i >= 0; $i--) {\n    $r[$i + 1]\
    \ = ++$r[$i];\n  }\n  return $r;\n}\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_j5898f.php:20\n\
    Stack trace:\n#0 /tmp/tmpp_j5898f.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp_j5898f.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 1;\n  foreach ($l\
    \ as $e) {\n    $l[$i] = $e;\n    $i++;\n  }\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpwh2r63.php:21\n\
    Stack trace:\n#0 /tmp/tmpkpwh2r63.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpkpwh2r63.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ret = [];\n  foreach($l\
    \ as $k => $v) {\n    $ret[] = $k + $v;\n  }\n  return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahyv3oo3.php:20\n\
    Stack trace:\n#0 /tmp/tmpahyv3oo3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpahyv3oo3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\tlist($l, $c) = array_pad(explode(',\
    \ ', $l), 2, 0);\n\treturn array_map(function($item) { return ++$item; }, array_flip($l),\
    \ array_flip($c));\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpnduij9p9.php\
    \ on line 8\n\nWarning: array_pad() expects parameter 1 to be array, null given\
    \ in /tmp/tmpnduij9p9.php on line 8\n\nWarning: array_flip() expects parameter\
    \ 1 to be array, null given in /tmp/tmpnduij9p9.php on line 9\n\nWarning: array_flip()\
    \ expects parameter 1 to be array, null given in /tmp/tmpnduij9p9.php on line\
    \ 9\n\nWarning: array_map(): Expected parameter 2 to be an array, null given in\
    \ /tmp/tmpnduij9p9.php on line 9\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpnduij9p9.php:17\nStack trace:\n#0 /tmp/tmpnduij9p9.php(22): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnduij9p9.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($v){return\
    \ ++$v;}, $l);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThe incr_list() solution\
    \ is cool but just for fun I tried another solution using array_map()\n<code>\n\
    $counter = array_map(function($value, $key) {\n    return ++$value;\n}, $counter,\
    \ $i);\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\nThis would work for this example,\
    \ but you can extend it for other scenarios.\n<code>\n$counter = [1, 2, 3, 3,\
    \ 4, 5, 3, 9];\n$result = [];\n$i = 0;\nforeach ($counter as $value) {\n    if\
    \ ($i < count($counter) - 1) {\n        $result[] = $value;\n    }\n    $i++;\n\
    }\nprint_r($result);\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a dscore=0\
    \ |>\nAnother solution using array_reduce\n<code>\n$arr = [1, 2, 3, 3, 4, 5, 3,\
    \ 9];\n$result = array_reduce($arr, function($a, $v) {\n    return array_merge($a,\
    \ [$v+1]);\n}, []);\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n\
    I liked the accepted answer of but for me using array_reduce and array_column\
    \ was a bit to wordy for something so simple. Here's a much less wordy approach:\n\
    <code>\n$array = [1, 2, 3, 3, 4, 5, 3, 9];\n\n$newArray = array_merge( array_map(function($v)\
    \ { return ++$v; }, $array), [$array[0] + 1]);\n\nvar_dump($newArray);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,php |>\nYou could use array_reduce:\n<code>\n\
    <?php\n$counter = [1, 2, 3, 3, 4, 5, 3, 9];\n$result = array_reduce($counter,\
    \ function($carry, $item) {\n    return array_merge($carry, [++$item]);\n}, []);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php dscore=0 |>\nI personally used\
    \ the incr function from here\nhttps://www.geeksforgeeks.org/php-increment-array-number/\n\
    This worked for me:\n<code>\n/**\n * $arr\n * $step\n *\n * array\n */\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwc409f22.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $s = array_values($l);\n\
    \  return array_merge($s, array_map(function($e) use ($s) { return ++$e; }, $s));\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4zawutm.php:18\n\
    Stack trace:\n#0 /tmp/tmpa4zawutm.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpa4zawutm.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $s = array_map(function($v)\
    \ {\n        return $v + 1;\n    }, $l);\n    return array_merge(array_unique($s),\
    \ $l);\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4zf5t_c.php:19\n\
    Stack trace:\n#0 /tmp/tmpz4zf5t_c.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpz4zf5t_c.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  for ($n = count($l);\
    \ $n--; $n++) {\n    $l[$n] += 1;\n  }\n  return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function\
    \ ($element) {\n        return $element + 1;\n    }, $l);\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ret = [];\n  foreach\
    \ ($l as $e) {\n    $ret[] = $e + 1;\n  }\n  return $ret;\n}\n\n/**\n * Given\
    \ an index into an array or object, increment the element.  For arrays\n * it\
    \ increments them in the way that humans expect.  For objects the same\n * rule\
    \ as with arrays is used.\n *\n * NOTE: If you're using PHP < 5.4 you can use\
    \ the standard `array_walk` function\n * instead.\n *\n * @param int|array $l\
    \ The list to increment.\n * @param int $e The index to increment.  If the array\
    \ or object has an `__increment`\n * method this will be called on the element\
    \ first, then incremented.\n * @return int|array The incremented list or array.\n\
    \ */\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    if (empty($l)) {\n\
    \        return $l;\n    }\n    $llen = count($l);\n    $i = 0;\n    for ($i =\
    \ $llen; $i > 0; $i--) {\n        $l[$i - 1] += $i;\n    }\n    return $l;\n}\n\
    \n/**\n * Generate a list of random integers.\n *\n * If min and max arguments\
    \ are given, values will be randomly\n * chosen from range(min, max).\n * If min\
    \ and max are omitted, a random integer is chosen.\n *\n * @param int $min Minimum\
    \ value. If min and max are omitted, min is 0.\n * @param int $max Maximum value.\
    \ If min and max are omitted, max is (PHP_INT_MAX + 1).\n * @return array Integer\
    \ list\n */\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpduknzmii.php:36\n\
    Stack trace:\n#0 /tmp/tmpduknzmii.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpduknzmii.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $ret = array();\n\
    \    $llen = count($l);\n    for ($i = 0; $i < $llen; ++$i) {\n        $ret[]\
    \ = $l[$i] + 1;\n    }\n    return $ret;\n}\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = [];\n    foreach\
    \ ($l as $e) {\n        $r[] = $e + 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  foreach ($l as $k =>\
    \ $v) {\n    if (isset($l[$k]) && $l[$k] == $k + 1) {\n      unset($l[$k]);\n\
    \    } else {\n      $l[$k] = $k + 1;\n    }\n  }\n  return $l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdxzihr_.php:24\n\
    Stack trace:\n#0 /tmp/tmpjdxzihr_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjdxzihr_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 0;\n  return array_map(\n\
    \    function($x) use (&$i) {\n      return ++$i;\n    },\n    $l\n  );\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmy_f9cp.php:23\n\
    Stack trace:\n#0 /tmp/tmplmy_f9cp.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplmy_f9cp.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = [];\n  foreach\
    \ ($l as $e) {\n    $r[] = $e + 1;\n  }\n  return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = array_map(function\
    \ ($v) { return $v + 1; }, $l);\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $ret = [];\n    foreach($l\
    \ as $i => $val) {\n        $ret[] = $i + 1;\n    }\n    return $ret;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$list=[1,2,3];\n$list=(array)array_merge(range(1,count($list)+1),$list);\n\
    echo \"<pre>\";\nprint_r($list);\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\n\
    This is not perfect solution but will do the trick :\n<code>\n<?php\n$list = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$list = array_merge( range(1, count($list) + 1\
    \ ), $list );\nprint_r($list);\n</code>\n<|/ a dscore=0 tags=arrays,php |>\n<|\
    \ a |>\nYou could do something like this : \n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmzaipxua.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $a = [];\n  foreach\
    \ ($l as $e) {\n    $a[] = $e + 1;\n  }\n  return $a;\n}\n\n$list_str = <<<LIST\n\
    one\ntwo\nthree\nLIST;\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($item)\
    \ { return $item + 1; }, $l);\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ret = [];\n  foreach\
    \ ($l as $k => $v) {\n    $ret[$k + 1] = $v;\n  }\n  return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprs74vwoe.php:21\n\
    Stack trace:\n#0 /tmp/tmprs74vwoe.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprs74vwoe.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = count($l);\n\
    \    while ($i--) {\n        $l[$i]++;\n    }\n    return $l;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis works, thanks. Unfortunately I cannot upvote it yet since\
    \ I am new here.\n<|/ c |>\n<| a tags=arrays,php |>\nI suggest you to look at\
    \ PHP array_multisort() function\n<|/ a dscore=1 |>\n<| c |>\nOh nice, didn't\
    \ know this one existed! Thanks!\n<|/ c |>\n<| a dscore=0 |>\nUse this:\n<code>\n\
    $arr = array( 1 => 'a', 2 => 'b', 3 => 'c', 4 => 'd');\n\nasort($arr);\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nSorry forgot to mention I need the result to\
    \ be in the same order as the input, but I guess it's possible with `asort` which\
    \ was mentioned in the comments.\n<|/ c |>\n<| c |>\nSure, my bad.\n<|/ c |>\n\
    <| a |>\n<code>\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcp4t8tzi.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $ret = array();\n\
    \    $i = 0;\n    $tmp = $l[0];\n    array_unshift($ret, $tmp);\n    foreach ($l\
    \ as $n) {\n        $ret[$i] = $tmp + $n;\n        $i++;\n        $tmp = $ret[$i];\n\
    \    }\n    return $ret;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc1jndhfk.php:24\n\
    Stack trace:\n#0 /tmp/tmpc1jndhfk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpc1jndhfk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = 1;\n    foreach\
    \ ($l as $x) {\n        $l[] = $i++;\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmapaxntk.php:21\n\
    Stack trace:\n#0 /tmp/tmpmapaxntk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmapaxntk.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function\
    \ ($n) {\n    return $n+1;\n  }, $l);\n}\nfunction candidate(...$args) {\n   \
    \ return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $l2 = array();\n \
    \   foreach ($l as $i => $v) $l2[$i + 1] = $v;\n    return $l2;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0oomhxb.php:19\n\
    Stack trace:\n#0 /tmp/tmpp0oomhxb.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpp0oomhxb.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = array_map(\n\
    \        function ($value) {\n            return $value + 1;\n        },\n   \
    \     $l);\n\n    return $res;\n}\n</code>\n<|/ a |>\n<| c |>\nWon't this fail\
    \ if $l[$i] is not an integer, though?\n<|/ c |>\n<| a dscore=1 |>\nThe only reason\
    \ I can think of, is that you might want your output array to be a 2D array where\
    \ the first dimension is the incremental value, and the second dimension is the\
    \ original array value.\n<code>\n$a = [1, 2, 3];\n$b = [2, 3, 4];\n\n$c = call_user_func_array('array_map',\
    \ array_merge([function ($value) {\n    return $value + 1;\n}], [$a]));\n</code>\n\
    If you don't care about changing the original array, you just need to do this:\n\
    <code>\n$c = array_map([function ($value) {\n    return $value + 1;\n}], [$a]);\n\
    </code>\nIf you want to maintain the original array, you can do this:\n<code>\n\
    $c = call_user_func_array('array_map', array_merge([function ($value) {\n    return\
    \ $value + 1;\n}], [$a, $a]));\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\nYour question is not very clear, but I presume you're trying to map the\
    \ original array with the incremented values of the original array, like so\n\
    <code>\n$a = [1,2,3,6,7]\n$b = ...\n</code>\nIf that is the case, then I would\
    \ do it like this\n<code>\n<?php\n$a = [1,2,3,6,7];\n$b = $a;\n\n$c = array_map(function\
    \ ($v) { return $v + 1; }, $a);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    $a = array(1,2,3);\n$b = array(1,2,3);\n$c = $a; // copy a to c\n\n$d = array_map(\"\
    inc\",$c); // pass each element of c to inc, which increments the value\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzzjp9fkb.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 0;\n  foreach($l\
    \ as $key => $value) {\n    $i++;\n    $l[$key] = $value;\n  }\n  return $l;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nYou don't need to pass the `$count` variable\
    \ to the foreach loop as it is passed by reference already.\n<|/ c |>\n<| a dscore=2\
    \ |>\nA simple function that will do what you need is the following which I believe\
    \ is what you were looking for:\n<code>\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb4iku6m3.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $i\
    \ => $e) {\n        $l[$i] = $i + 1;\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7y7_pcl.php:20\n\
    Stack trace:\n#0 /tmp/tmpi7y7_pcl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpi7y7_pcl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$r = [];\n\tforeach($l\
    \ as $e) {\n\t\t$r[] = $e + 1;\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $last = array_pop($l);\n\
    \  return array_merge($l, [$last], $l);\n}\n</code>\n<|/ a |>\n<| c |>\nWhile\
    \ I love this solution, it requires one more line of code to be inserted into\
    \ the middle of the code. I am looking for something that would require less code\
    \ to be inserted in the middle of the code. Thanks!\n<|/ c |>\n<| c |>\nYou can\
    \ make it a one-liner by using the [splat operator](http://php.net/manual/en/migration56.new-features.php#migration56.new-features.splat)\
    \ like this: `return array_merge($l, [array_pop($l)], $l);`\n<|/ c |>\n<| c |>\n\
    : Yes, I like the one-liner! It's nicer to see and easier to modify, so I'll add\
    \ it in. I added some comments to make it more obvious what it does, so I'll add\
    \ those comments as well. Thanks for pointing out the one-liner as well. :-)\n\
    <|/ c |>\n<| c |>\nYeah, I was just about to add that as part of my answer :)\
    \ Thanks.\n<|/ c |>\n<| c |>\nThis isn't going to work for `incr_list([0])`\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\n$array = array(5,5,5,5,5,5,5,5,5,5,5);\n$array\
    \ = array_merge(array(array_pop($array)),$array);\n</code>\n<|/ a tags=php |>\n\
    <| c |>\nThanks for this answer. It was perfect for what I was trying to do. +1\n\
    <|/ c |>\n<| c |>\nWhat about the case where you have an array like `array(0)`?\
    \ In that case the array will get popped off the very first element, and then\
    \ the array will contain just one element, which will be `0`.\n<|/ c |>\n<| c\
    \ |>\nThis does work perfectly, and even answers my question as asked - thanks\
    \ :)\n<|/ c |>\n<| c |>\nThis would not work if you have an array like `array(0)`\n\
    <|/ c |>\n<| a tags=php |>\n<code>\n$arr = array(1, 2, 3, 4);\n$last = array_pop($arr);\n\
    $arr = array_merge($arr, [$last], $arr);\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like it - but a little complicated for me :) Thanks for your solution. +1\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have an array \nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmw64vo8y.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $l = array_map('intval',\
    \ $l);\n    $l = array_merge($l[0], array_slice($l, 1));\n    return $l;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_merge(): Expected parameter 1 to be an array, null given\
    \ in /tmp/tmp5otse5od.php on line 9\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5otse5od.php:18\nStack trace:\n#0 /tmp/tmp5otse5od.php(23): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5otse5od.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 1;\n  $return =\
    \ array();\n  foreach ($l as $e) {\n    $return[] = $i++;\n  }\n  return $return;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyvgsmo6d.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $out = array();\n\
    \    $last = null;\n    foreach ($l as $k => $v) {\n        if ($last === null)\
    \ {\n            $last = $v;\n            $out[$k] = $v;\n        } elseif ($last\
    \ != $v) {\n            $out[$k] = $last;\n            $last = $v;\n        }\n\
    \    }\n    return $out;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvlcj1il.php:28\n\
    Stack trace:\n#0 /tmp/tmphvlcj1il.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphvlcj1il.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $list = array_map(function($x)\
    \ { return $x+1; }, $l);\n  return array_slice($list, 1);\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfb3xgbw.php:17\n\
    Stack trace:\n#0 /tmp/tmppfb3xgbw.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppfb3xgbw.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  foreach ($l as $k =>\
    \ $v) {\n    $l[$k] = $v + 1;\n  }\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function\
    \ ($i) {\n    return ++$i;\n  }, $l);\n}\n</code>\nThe above function was designed\
    \ to be used with a callback function with list arguments, e.g.\n<code>\n$incr_map\
    \ = array_map(incr_list, $my_list);\n</code>\nwhich would result in a map of incremented\
    \ values using incrementing functions as defined above. \nThe array_map function\
    \ takes two parameters: the callback function and the list being mapped over.\
    \ \narray_map returns an array of results by mapping the callback function over\
    \ the list supplied (as a list of arguments). The callback is passed each element\
    \ of the list and receives the value as its argument, and is expected to return\
    \ an array of values with the mapped function applied (as a list of return values).\
    \ \nUsing a callback function is important because you can define your increment\
    \ function independently from the list type it operates on. \nThe function incr_list\
    \ above uses a closure to capture the values passed to incr_list by reference\
    \ and increment them, so that they can be modified outside of the scope of the\
    \ function. This is very much a PHP/OOP feature that you will find useful.\n<|/\
    \ a dscore=5 tags=arrays,php,increment |>\n<| a dscore=5 |>\nThe simplest way\
    \ is to use array_walk():\n<code>\n<?php\nfunction candidate(...$args) {\n   \
    \ return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdn0to0jm.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $c = count($l);\n\
    \    $i = 1;\n    foreach ($l as $e) {\n        $l[$i] = $e;\n        $i++;\n\
    \    }\n    return $l;\n}\n</code>\n<|/ a |>\n<| c |>\nThe only problem with this\
    \ is that its incremented over every loop even if the element is not changed.\
    \ So if you had say [1,2,3] it would give you [1,1,1]. However by adding a conditional\
    \ if statement you can get around that\n<|/ c |>\n<| a dscore=2 tags=arrays,php,increment\
    \ |>\nThe simplest way I can think of is to do this:\n<code>\n$input = array(1,2,3);\n\
    $result = array();\nforeach ($input as $value) {\n    $result[] = $value + 1;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nTry this\n<code>\n<?php \n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);\n\
    for($i=1;$i<count($arr);$i++)\n{\n  $arr[$i]+=1;\n  print_r($arr);\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsv6d465e.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  foreach ($l as $k => $v) {\n        $r[$k + 1] = $v;\n    }\n    return $r;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe89uk0fw.php:21\n\
    Stack trace:\n#0 /tmp/tmpe89uk0fw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpe89uk0fw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = count($l);\n\
    \    foreach ($l as $k => $e) {\n        $l[$k + 1] = $e;\n    }\n    return $l;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYou might want to mention that you are\
    \ using a recursive function here! In case someone comes here looking for a non-recursive\
    \ approach.\n<|/ c |>\n<| a dscore=0 tags=arrays,php |>\nMy solution works fine\n\
    <code>\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoitl730n.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  // Use the first element\
    \ as the starting point.\n  $i = reset($l);\n  $return = array(reset($l) + 1);\n\
    \  while (count($l) > 0) {\n    $i++;\n    $return[] = reset($l);\n    $l = array_slice($l,\
    \ 1);\n  }\n  return $return;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwupd0f2x.php:23\n\
    Stack trace:\n#0 /tmp/tmpwupd0f2x.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwupd0f2x.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    array_walk($l, function\
    \ (&$item) {\n        $item++;\n    });\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $list = [];\n  foreach\
    \ ($l as $item) {\n    $list[] = $item + 1;\n  }\n  return $list;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 0;\n  foreach($l\
    \ as $k => $v) {\n    $l[$k] = ++$i;\n  }\n  return $l;\n}\n</code>\nI thought\
    \ of using array_search and array_splice but those aren't good enough as they\
    \ require to know the array keys to delete and insert from.\n<code>\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbay9mtw2.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = [];\n    $i =\
    \ 0;\n    foreach ($l as $e) {\n        $r[$i] = $e;\n        $i++;\n    }\n \
    \   return $r;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3dbr25_k.php:22\n\
    Stack trace:\n#0 /tmp/tmp3dbr25_k.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3dbr25_k.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $return = array();\n\
    \  foreach ($l as $k => $v) {\n    $return[$k] = $v + 1;\n  }\n  return $return;\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = array();\n\
    \    $cnt = 0;\n    foreach($l as $item) {\n        $res[$item] = $item;\n   \
    \     $cnt++;\n        $res[$cnt] = $cnt;\n        $cnt++;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22z9prpk.php:25\n\
    Stack trace:\n#0 /tmp/tmp22z9prpk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp22z9prpk.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $i\
    \ => $e) {\n        if ($i == 0) {\n            $l[$i] = 1;\n        } else {\n\
    \            $l[$i]++;\n        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqsz0pv1.php:24\n\
    Stack trace:\n#0 /tmp/tmpuqsz0pv1.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuqsz0pv1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  foreach($l as $i => $e) {\n        $r[$i+1] = $e;\n    }\n    return $r;\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyvnrdc5.php:20\n\
    Stack trace:\n#0 /tmp/tmpgyvnrdc5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgyvnrdc5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$r = [];\n\tforeach\
    \ ($l as $e) {\n\t\t$r[$e] = $e + 1;\n\t}\n\treturn $r;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_v_0yu39.php:20\n\
    Stack trace:\n#0 /tmp/tmp_v_0yu39.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_v_0yu39.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function\
    \ ($val) {\n        return $val + 1;\n    }, $l);\n}\n\n/**\n * Returns true iff\
    \ all elements of $l are also elements of $l.\n */\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $new_l = array();\n\
    \    foreach ($l as $key => $value) {\n        $new_l[$key] = $value + 1;\n  \
    \  }\n    return $new_l;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $c = 0;\n  $ret = [];\n\
    \  foreach ($l as $item) {\n    $ret[$c++] = $item+1;\n  }\n  return $ret;\n}\n\
    \nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ret = [];\n  foreach\
    \ ($l as $key => $val) {\n    $ret[$key] = $val+1;\n  }\n  return $ret;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $a = array();\n  $i\
    \ = -1;\n  $len = count($l);\n  foreach($l as $e) {\n    $a[++$i] = $e;\n  }\n\
    \  return $a;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdo7lhvm.php:23\n\
    Stack trace:\n#0 /tmp/tmpqdo7lhvm.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqdo7lhvm.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $a = 0;\n    $b =\
    \ array();\n    foreach($l as $e) {\n        $b[] = $a + 1;\n        $a++;\n \
    \   }\n    return $b;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptevpyhyf.php:23\n\
    Stack trace:\n#0 /tmp/tmptevpyhyf.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptevpyhyf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 1;\n  $ret = [];\n\
    \  foreach ($l as $k => $v) {\n    $ret[$k] = $i++;\n  }\n  return $ret;\n}\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9z92e8ql.php:21\n\
    Stack trace:\n#0 /tmp/tmp9z92e8ql.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9z92e8ql.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  foreach($l as $key => $el) {\n        $r[$key+1] = $el;\n    }\n    return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvaq71e7b.php:21\n\
    Stack trace:\n#0 /tmp/tmpvaq71e7b.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvaq71e7b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 0;\n  $out = array();\n\
    \  foreach ($l as $e) {\n    $out[] = $i + 1;\n    $i++;\n  }\n  return $out;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb81d9rbg.php:23\n\
    Stack trace:\n#0 /tmp/tmpb81d9rbg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpb81d9rbg.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = $l;\n    foreach\
    \ ($l as $k => $v) {\n        $res[$k] = $v + 1;\n    }\n    return $res;\n}\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $n = 0;\n  foreach ($l\
    \ as $val) {\n    $n++;\n    $l[$n] = $val;\n  }\n  return $l;\n}\n\n/**\n * Sorts\
    \ a list increasingly and returns the sorted list.\n *\n * @param $list list\n\
    \ * @return list\n */\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88p9ikkt.php:28\n\
    Stack trace:\n#0 /tmp/tmp88p9ikkt.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp88p9ikkt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  foreach ($l as $key\
    \ => $value) {\n    $l[$key] = $key + 1;\n  }\n  return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmeqcldd.php:20\n\
    Stack trace:\n#0 /tmp/tmplmeqcldd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplmeqcldd.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $a = array();\n  foreach\
    \ ($l as $e) $a[$e+1] = $e;\n  return $a;\n}\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2jh5xxj.php:18\n\
    Stack trace:\n#0 /tmp/tmpv2jh5xxj.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpv2jh5xxj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = $l->copy();\n\
    \  foreach($l as $k => $v) {\n    $res[$k + 1] = $v;\n  }\n  return $res;\n}\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function copy() on array\
    \ in /tmp/tmp60if_eas.php:8\nStack trace:\n#0 /tmp/tmp60if_eas.php(15): incr_list(Array)\n\
    #1 /tmp/tmp60if_eas.php(19): candidate(Array)\n#2 /tmp/tmp60if_eas.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp60if_eas.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_merge(range(1,\
    \ count($l)), $l);\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihbqzclu.php:15\n\
    Stack trace:\n#0 /tmp/tmpihbqzclu.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpihbqzclu.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ret = [];\n  foreach\
    \ ($l as $value) {\n    $ret[] = $value + 1;\n  }\n  return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $list = array();\n \
    \ for ($i = 0; $i < count($l); $i++) {\n    $list[] = $l[$i] + 1;\n  }\n  return\
    \ $list;\n}\n</code>\nThe second one will always give a list containing all numbers\
    \ in ascending order, so you won't need any special code to sort it in descending\
    \ order.\n<|/ a tags=php,arrays,list |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp76uf9qep.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    foreach\
    \ ($l as $e) {\n        if ($e) {\n            $res[] = $e + 1;\n        } else\
    \ {\n            $res[] = 0;\n        }\n    }\n    return $res;\n}\n</code>\n\
    And then call it like this in the view file:\n<code>\n<?php foreach($incr_list($this->list)\
    \ as $e) : ?>\n  <li class=\"<?php echo $e; ?>\"><?php echo $e; ?></li>\n<?php\
    \ endforeach; ?>\n</code>\nEDIT:\nAs pointed out by Nick, you don't even need\
    \ that list function. You can just use array_walk inside your view file. It will\
    \ do the same thing as your list function.\n<|/ a tags=php,laravel |>\n<| c |>\n\
    It would be even better if the OP didn't need to use any of this. This is not\
    \ the point of MVC. `array_walk()` could be used inside the view and just loop\
    \ over the array\n<|/ c |>\n<| c |>\nThank you all for the answers. I will try\
    \ the suggested solutions and will keep you posted.\n<|/ c |>\n<| a tags=php,laravel\
    \ |>\nLaravel has some handy methods for creating lists.  They are part of the\
    \ Collection class and are particularly helpful.  They are listed here: https://laravel.com/docs/5.3/collections\n\
    <code>\n$list = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n$list->collapse();\n$list->values()->all();\n\
    </code>\nYou could also pass an array to the collection to make it more general.\n\
    <code>\n$list = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n$list->values()->all();\n\
    </code>\nThe collect will make an associative array of your list with the numbers\
    \ 1-9 as keys.  So {1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8\
    \ => 8, 9 => 9}\nThe collapse() method will group those values together with the\
    \ key of 1 being 1, 2 being 2 and so on.  So {1 => 1, 2 => 2, 3 => 3, 4 => 4,\
    \ 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9}\nThe values() method will take the collection\
    \ and then return only the values.  So {1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5,\
    \ 6 => 6, 7 => 7, 8 => 8, 9 => 9}\nThe all() method will take the collection and\
    \ return all of the values.  So [1, 2, 3, 4, 5, 6, 7, 8, 9]\n<|/ a dscore=2 |>\n\
    <| c |>\nI think he wants to use `array_chunk()` \nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8zux86rr.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  $n = count($l);\n    for($i = 0; $i < $n; $i++) {\n        $r[] = $l[$i] +\
    \ 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$out = [];\n\tforeach\
    \ ($l as $i => $e) {\n\t\t$out[] = $i + 1;\n\t\tif ($i < count($l)) {\n\t\t\t\
    $out[] = $e;\n\t\t}\n\t}\n\treturn $out;\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt4v14jq.php:24\n\
    Stack trace:\n#0 /tmp/tmplt4v14jq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplt4v14jq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$l = array_filter($l);\n\
    \t$l = array_map(function($i) {\n\t\t$i ++;\n\t\treturn $i;\n\t\t}, $l);\n\treturn\
    \ array_values($l);\n\t}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6afynazc.php:22\n\
    Stack trace:\n#0 /tmp/tmp6afynazc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6afynazc.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_reduce(\n\
    \        $l,\n        function ($carry, $item) {\n            return array_sum($carry)\
    \ + $item + 1;\n        },\n        []\n    );\n}\n</code>\n<|/ a tags=arrays,php,increment\
    \ dscore=1 |>\n<| c |>\nThis does not return the expected answer from my example.\
    \ Check my first comment.\n<|/ c |>\n<| c |>\nYou changed your example. Your first\
    \ example is wrong ([1,2,3] and [5,5,3,5,2,3,3,9,0,123] both give [1,3,4]). The\
    \ second example is correct ([5,3,3,5,2,3,3,9,0,123] and [5,3,3,6,2,3,4,10,1,124])\n\
    <|/ c |>\n<| c |>\nI have just modified the code above to work correctly for both\
    \ cases you gave.\n<|/ c |>\n<| c |>\nYou are right. In the first example I gave\
    \ wrong inputs. In the second I used the wrong input example. My bad.\n<|/ c |>\n\
    <| c |>\nYes, that was my mistake. My fault. Thanks for your help.\n<|/ c |>\n\
    <| a |>\nI've made a version that works for PHP >= 5.5.\n<code>\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpazt_aetp.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = array();\n  for\
    \ ($i = 0, $l = count($l); $i < $l; $i++) {\n    $r[] = $l[$i] + 1;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3motllks.php:21\n\
    Stack trace:\n#0 /tmp/tmp3motllks.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp3motllks.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach($l as $k =>\
    \ $v)\n        $l[$k] = $k+1;\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2_smo9m.php:18\n\
    Stack trace:\n#0 /tmp/tmpz2_smo9m.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpz2_smo9m.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ret = [];\n  foreach($l\
    \ as $k=>$v) {\n    if(is_numeric($k)) {\n      $ret[$k] = $v + 1;\n    } else\
    \ {\n      $ret[$k] = $v;\n    }\n  }\n  return $ret;\n}\n\n/**\n * Get current\
    \ page number.\n *\n * Get current page number from URL or from special meta tag.\n\
    \ *\n * @since 1.0.0\n * @return int Current page number\n */\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function\
    \ ($n) {\n        return $n+1;\n    }, $l);\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $key\
    \ => $val) {\n        $l[$key] += 1;\n    }\n    return $l;\n}\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nWhy does this get downvoted? It is working and efficient.\n\
    <|/ c |>\n<| c |>\nI guess it's because it's a solution to the problem, rather\
    \ than a proper one (at least as stated)\n<|/ c |>\n<| c |>\nIf you're going to\
    \ downvote an answer at least explain why. Otherwise you end up with a bunch of\
    \ people who think they're clever and give negative feedback.\n<|/ c |>\n<| c\
    \ |>\nThanks for sharing this. I love it.\n<|/ c |>\n<| c |>\nIt should be noted\
    \ that this is the least efficient way to do this.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$newArray = array();\n\nforeach ($original as $key => $value) {\n\
    \  if ($newArray[$key] == NULL) {\n    $newArray[$key] = 0;\n  }\n  $newArray[$key]++;\n\
    }\n\nvar_dump($newArray);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nYes, it's inefficient,\
    \ but that's not really a big issue here as we're dealing with an array.\n<|/\
    \ c |>\n<| c |>\nYes, but it depends what you're doing. If you're looping through\
    \ a large array it can be expensive.\n<|/ c |>\n<| c |>\nNot always the case,\
    \ this is exactly what `array_count_values()` does.\n<|/ c |>\n<| c |>\nYes, and\
    \ so does `array_fill_keys()`.\n<|/ c |>\n<| c |>\nSure it does, and I mentioned\
    \ array_count_values() in my first comment and it's exactly what you're looking\
    \ for. array_count_values() is O(n) while array_fill_keys() is O(n+m).\n<|/ c\
    \ |>\n<| a dscore=3 |>\nTry this\n<code>\nfunction candidate(...$args) {\n   \
    \ return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpco1g_61q.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    // $l is array\n \
    \   $i = 1;\n    $r = array();\n    foreach ($l as $e) {\n        $r[$i] = $e;\n\
    \        $i++;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n \
    \   return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjx3kjbt.php:24\n\
    Stack trace:\n#0 /tmp/tmptjx3kjbt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptjx3kjbt.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $a = $l;\n    $a =\
    \ array_pad($a, count($a), 0);\n    for ($i = 0; $i < count($a); $i++) {\n   \
    \     $a[$i] = $i + 1;\n    }\n    return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhbw28pn.php:22\n\
    Stack trace:\n#0 /tmp/tmpmhbw28pn.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmhbw28pn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $n = array_shift($l);\n\
    \  do {\n    $n++;\n  } while ($n != end($l));\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = [];\n  foreach\
    \ ($l as $v) {\n    $result[] = $v + 1;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $e)\
    \ {\n        ++$e;\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6swk1ebf.php:20\n\
    Stack trace:\n#0 /tmp/tmp6swk1ebf.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6swk1ebf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($a,\
    \ $b) {\n        return $b + $a;\n    }, $l, array_fill(0, count($l), 1));\n}\n\
    </code>\n<|/ a dscore=5 tags=functional-programming,recursion,php,python,javascript\
    \ |>\n<| c |>\nFor future reference, this answer doesn't directly answer the question.\
    \  It's just a rehash of what has already been said.\n<|/ c |>\n<| a tags=functional-programming,recursion,php,python,javascript\
    \ |>\nI believe this function might work and is similar in some ways to what has\
    \ already been said before:\n<code>\n<?php\nfunction candidate(...$args) {\n \
    \   return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp28bp93ph.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = 1;\n    return\
    \ array_reduce($l, function ($a, $b) {\n        return $a + (is_int($b) ? $b :\
    \ $i++);\n    });\n}\n\n/**\n * @param $l\n * @param int $k\n * @param bool $is_sum\n\
    \ * @return bool|float|int|string\n */\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5s0ow3tr.php:25\n\
    Stack trace:\n#0 /tmp/tmp5s0ow3tr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5s0ow3tr.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $return = [];\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    $return[$i] = $l[$i] + 1;\n  }\n  return\
    \ $return;\n}\n\n$tests = [\n  'array',\n  'array-with-keys',\n  'array-with-values',\n\
    \  'array-with-mixed-keys',\n  'array-with-mixed-values',\n  'associative',\n\
    \  'associative-array',\n  'associative-array-with-keys',\n  'associative-array-with-values',\n\
    \  'associative-array-with-mixed-keys',\n  'associative-array-with-mixed-values',\n\
    \  'inexistent-non-associative-array',\n  'inexistent-non-associative-array-with-keys',\n\
    \  'inexistent-non-associative-array-with-values',\n  'associative-array-with-keys-and-values',\n\
    \  'associative-array-with-mixed-keys-and-values',\n  'associative-array-with-mixed-keys-and-values',\n\
    \  'associative-array-with-keys-and-mixed-values',\n  'associative-array-with-mixed-keys-and-mixed-values',\n\
    \  'associative-array-with-mixed-values-and-keys',\n  'associative-array-with-mixed-values-and-values',\n\
    \  'associative-array-with-mixed-values-and-mixed-keys',\n  'associative-array-with-mixed-values-and-mixed-values',\n\
    \  'associative-array-with-keys-and-mixed-keys-and-values',\n  'associative-array-with-keys-and-mixed-keys-and-values',\n\
    \  'associative-array-with-keys-and-mixed-keys-and-mixed-values',\n  'associative-array-with-keys-and-mixed-values-and-keys',\n\
    \  'associative-array-with-keys-and-mixed-values-and-values',\n  'associative-array-with-keys-and-mixed-values-and-mixed-keys',\n\
    \  'associative-array-with-keys-and-mixed-values-and-mixed-values',\n  'associative-array-with-mixed-keys-and-values-and-keys',\n\
    \  'associative-array-with-mixed-keys-and-values-and-values',\n  'associative-array-with-mixed-keys-and-values-and-mixed-keys',\n\
    \  'associative-array-with-mixed-keys-and-values-and-mixed-values',\n  'associative-array-with-mixed-keys-and-mixed-values-and-keys',\n\
    \  'associative-\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp33cuff6t.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $p = null;\n  $a = [];\n\
    \  for ($i = 0, $j = count($l); $i < $j; ++$i) {\n    if ($p!==($l[$i]+1)) {\n\
    \      $a[$i] = $l[$i] + 1;\n      $p = $l[$i] + 1;\n    }\n  }\n  return $a;\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz852ik0r.php:25\n\
    Stack trace:\n#0 /tmp/tmpz852ik0r.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpz852ik0r.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    if ($l instanceof\
    \ \\Traversable) {\n        $l = (array)$l;\n    }\n\n    return array_map(function\
    \ ($e) {\n        return ++$e;\n    }, $l);\n}\n</code>\nA slightly more fancy\
    \ but more readable version (IMHO) would be:\n<code>\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwt5h61aw.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($v)\
    \ {\n    return $v+1;\n  }, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = $l;\n  $r[] = $r[0];\n\
    \  for($i = 1; $i < count($l); $i++) {\n    $r[] = $l[$i] + 1;\n  }\n  return\
    \ $r;\n}\n\n$r = array_map(\n  function ($v) {\n    return $v + 1;\n  },\n  incr_list($l)\n\
    );\n\nprint_r($r);\n</code>\nDemo: https://eval.in/1088948\n<|/ a |>\n<| c |>\n\
    You can't, the OP specified a fixed number of elements in the output array, which\
    \ this solution doesn't do (it just returns an array of increments of one element\
    \ from each input element).\n<|/ c |>\n<| c |>\nAhhh okay, I didn't realize you\
    \ wanted a fixed number of output elements. I'll update my answer.\n<|/ c |>\n\
    <| c |>\nThis is not what was asked. He specified a list of numbers. Nothing about\
    \ how the numbers are incremented is asked.\n<|/ c |>\n<| c |>\nHe also specified\
    \ that they were incremented by 1.\n<|/ c |>\n<| c |>\nI know. My point is that\
    \ he didn't ask for that and your answer doesn't address that fact. The original\
    \ question clearly stated that he wanted to \"add one to the list elements\".\
    \ Your answer doesn't do that.\n<|/ c |>\n<| a dscore=3 |>\nPHP already has an\
    \ array_map for this:\n<code>\n$l = array(1,2,3,4,5,6,7,8,9);\n$r = array_map(function($item)\
    \ {\n    return $item + 1;\n}, $l);\n</code>\nSee http://us2.php.net/array_map\n\
    <|/ a tags=list,arrays,php |>\n<| c |>\n`+1`, But I think he wants to do this\
    \ only on N elements. And also mention that he wants the output to be an array\
    \ of N elements.\n<|/ c |>\n<| c |>\nHe didn't ask for this. He asked for a new\
    \ array with incremented elements.\n<|/ c |>\n<| c |>\nOh I missed that part that\
    \ he wants to increment by 1 and not 0.\n<|/ c |>\n<| c |>\nOh okay, but he also\
    \ asked to add 1 to each element. It can be done with array_map also.\n<|/ c |>\n\
    <| c |>\nIt's not incremented by 1, it's incremented by 1 if the number is even.\n\
    <|/ c |>\n<| a tags=list,arrays,php |>\nA simple \nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpukftpu10.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 1;\n  $len = count($l);\n\
    \  while ($i < $len) {\n    $l[$i] = $l[$i] + 1;\n    $i++;\n  }\n  return $l;\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabtn_yu8.php:22\n\
    Stack trace:\n#0 /tmp/tmpabtn_yu8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpabtn_yu8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = $l;\n  $last\
    \ = end($res);\n  do {\n    array_push($res, $last + 1);\n    $last = end($res);\n\
    \  } while (isset($res[count($res) - 1]));\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmphu7xysqv.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($n)\
    \ {\n        return $n+1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  for ($i = count($l);\
    \ $i < count($l) + 3; $i++)\n    $l[] = $l[$i];\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpy9osuq4r.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = 1;\n    foreach\
    \ ($l as $k => $v) {\n        $l[$k] = $i++;\n    }\n    return $l;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\n+1 It will probably be faster than `array_walk` since\
    \ it won't have to keep track of the original array indexes.\n<|/ c |>\n<| c |>\n\
    Yes, but `array_walk` has the advantage of being able to do more things than just\
    \ add 1...\n<|/ c |>\n<| c |>\n: Yes, but `array_walk` has the advantage of being\
    \ able to do more things than just add 1...\n<|/ c |>\n<| c |>\n`array_map()`\
    \ is probably a better option than `array_walk()` here.\n<|/ c |>\n<| c |>\n:\
    \ I was looking at `array_map` but decided against it because I wasn't sure if\
    \ that would be any faster. Now I'm wondering if `array_map` would be faster than\
    \ `array_walk` in this case. I'm going to test this and post the results here\
    \ just in case.\n<|/ c |>\n<| a dscore=5 |>\nI like how array_map works for me:\n\
    <code>\n$l = [1,2,3];\n$m = array_map(function($v){return $v+1;}, $l);\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nWhy `function($v){return $v+1;}` and not `function($v){return\
    \ $v+0;}`?\n<|/ c |>\n<| c |>\nIt depends on the use case. You may want to have\
    \ different values when adding 0 or not. I think this way is cleaner.\n<|/ c |>\n\
    <| c |>\nThis approach has the disadvantage of needing to know the original array\
    \ length. `array_map` is more flexible than that, but in some cases the `array_walk`\
    \ approach has the advantage.\n<|/ c |>\n<| c |>\nThis is not more flexible, it\
    \ is more verbose.\n<|/ c |>\n<| c |>\nThis approach is probably not more flexible\
    \ than array_walk().\n<|/ c |>\n<| a dscore=5 tags=php |>\nHere is another interesting\
    \ solution:\n<code>\n$list = [1,2,3];\n$list2 = $list + 1;\n</code>\nThis works\
    \ because: \n<code>\n$list2 = $list + 1;\n</code>\nIs actually just shorthand\
    \ for:\n<code>\n$list2 = array($list[0],\nfunction candidate(...$args) {\n   \
    \ return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9buoxzvu.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($k)\
    \ { return ++$k; }, $l);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n+1 because this\
    \ seems like a good solution to me. I'm still learning PHP, so I haven't been\
    \ able to come up with a solution that was as elegant as this. I didn't know `array_map`\
    \ was a thing. Thanks!\n<|/ c |>\n<| c |>\nThanks for this, but this doesn't solve\
    \ the actual problem. array_map returns an array, so this doesn't solve the problem\
    \ of incrementing an integer by 1 and storing it in an array. It only solves it\
    \ for adding 1 to each integer in the array.\n<|/ c |>\n<| c |>\nI agree. This\
    \ is not a good solution to the question. I've added another solution, based on\
    \ array_map that solves the actual problem.\n<|/ c |>\n<| c |>\nWow! Thanks for\
    \ adding that. I think it would be better to use `array_walk`, which would also\
    \ avoid the unnecessary overhead of creating a new array and copying elements.\
    \ Just a thought.\n<|/ c |>\n<| a |>\nTo solve the problem as stated, we need\
    \ to iterate over the array and call array_sum() on each element that we want\
    \ to increment:\n<code>\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3fb6l0b2.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  foreach ($l as $k =>\
    \ $v) {\n    $l[$k] = $v + 1;\n  }\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$res = array();\n\t\
    for ($i = 0; $i < count($l); $i++) {\n\t\t$res[$i] = $i + 1;\n\t}\n\treturn $res;\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_upe8oc.php:20\n\
    Stack trace:\n#0 /tmp/tmpc_upe8oc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpc_upe8oc.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = [];\n  foreach\
    \ ($l as $i) {\n    $r[] = $i + 1;\n  }\n  return $r;\n}\n</code>\n<|/ a |>\n\
    <| a tags=arrays,php dscore=3 |>\nAs said in the other answers, this can be done\
    \ in a single line using array_map and a closure, but I think the more interesting\
    \ question is why a for loop would be more desirable here. Let's look at it this\
    \ way.\nThe first loop can be easily rewritten as a single line using a closure\
    \ (which is probably what I would have done):\n<code>\n$newArray = array_map(function($i)\
    \ {\n    return $i + 1;\n}, $oldArray);\n</code>\nThis works, but is hardly readable,\
    \ and it's hard to figure out how to do the same without knowing how PHP works.\n\
    The second loop has a lot going on here:\n\nThe foreach loop iterates through\
    \ all the elements of $oldArray\nThe array_map creates a new array by applying\
    \ the given function to the elements of the old array\nThe return statement is\
    \ executed after the function is applied to each element of the new array\n\n\
    The foreach is quite clearly the most readable way to do this.\n<|/ a |>\n<| a\
    \ |>\nMy version (not my best though):\n<code>\n$newarray = array();\nforeach\
    \ ($oldarray as $value) {\n    $newarray[] = $value + 1;\n}\n</code>\n<|/ a tags=arrays,php\
    \ dscore=3 |>\n<| c |>\nThat is the way I would have done it, too.\n<|/ c |>\n\
    <| c |>\nI would have done it too, except for that I am a big fan of functional\
    \ programming (functional programming, not functional languages such as JavaScript\
    \ or ActionScript, etc)\n<|/ c |>\n<| a tags=arrays,php |>\nI like this one:\n\
    <code>\n$newArray = array_map(function($v){return $v+1;}, $oldArray);\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\nI believe the foreach method is the most readable,\
    \ though it is actually faster than using a for loop, as foreach uses a foreach\
    \ loop internally anyway.\n<code>\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj4tjv522.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as &$val)\
    \ {\n        $val++;\n    }\n    return $l;\n}\n</code>\n<|/ a |>\n<| c |>\nI\
    \ don't think this would work: if the array is empty, it would return `[1, 2,\
    \ 3]` instead of `[]`.\n<|/ c |>\n<| c |>\nNo. Indeed, as stated, it returns a\
    \ list with incremented elements. If an input array is not empty, it returns the\
    \ input array. See the test case for `incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])`.\n\
    <|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkdw_kdp0.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $return = array();\n\
    \    $i = 0;\n    foreach ($l as $value) {\n        $return[$i] += $value;\n \
    \       $i++;\n    }\n    return $return;\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqy72ite4.php:23\n\
    Stack trace:\n#0 /tmp/tmpqy72ite4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqy72ite4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function\
    \ ($el) { return $el + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($n)\
    \ {\n    return ++$n;\n  }, $l);\n}\n</code>\n<|/ a |>\n<| c |>\nYour answer does\
    \ look more efficient and elegant. But, I think it lacks flexibility (compared\
    \ to other answers). I would go with the approach I suggested in the original\
    \ question.\n<|/ c |>\n<| c |>\nI agree, yours is a more flexible answer.\n<|/\
    \ c |>\n<| c |>\n`++$n` is far less efficient than `++$count`, because it's doing\
    \ two things: incrementing the value of `$count`, and returning the incremented\
    \ value of `$count`. So it's more like `return $count++;`\n<|/ c |>\n<| c |>\n\
    Thanks for the comment, but this is actually a micro-optimization.\n<|/ c |>\n\
    <| c |>\nThe advantage of using `++$n` is that when you need to, you can do `$n\
    \ += 2` instead of `++$n`, which is what `return $count++;` does. This is more\
    \ efficient because it just increments the variable in one line, instead of two\
    \ lines.\n<|/ c |>\n<| a dscore=4 |>\nThis should be the simplest and most efficient\
    \ solution :\n<code>\n$array = array(\"apple\", \"banana\", \"grape\");\n$count\
    \ = 0;\n$newArray = array();\nforeach($array as $value) {\n    if($count < count($array))\
    \ {\n        $newArray[$count] = $value;\n        $count++;\n    }\n}\n</code>\n\
    <|/ a tags=arrays,php,increment |>\n<| c |>\nThis is my favorite answer.\n<|/\
    \ c |>\n<| a dscore=4 tags=arrays,php,increment |>\nThis can be done in one line\n\
    <code>\n<?php\n$array = array(\"apple\", \"banana\", \"grape\");\n$newArray =\
    \ array_merge(array_fill(0, count($array), NULL), $array);\n</code>\n<|/ a |>\n\
    <| a dscore=4 |>\nA shorter but less efficient solution (also avoids creating\
    \ new arrays altogether):\n<code>\narray_walk($array, function(&$item) { $item++;\
    \ });\n</code>\n<|/ a tags=arrays,php,increment |>\n<| c |>\nYou don't need to\
    \ use any kind of reference, and you don't have to use an anonymous function.\n\
    <|/ c |>\n<| c |>\nWell, no. PHP 5.3 only supports the anonymous function, and\
    \ I thought the OP had an argument for not using the anonymo\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpintjpia2.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = [];\n  foreach\
    \ ($l as $val) {\n    $result[] = $val + 1;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(\n\
    \    function ($v) { return ++$v; }, $l);\n}\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $newlist = [];\n  for\
    \ ($i=0, $ien=count($l); $i<$ien; $i++){\n    $newlist[$i] = $l[$i] + 1;\n  }\n\
    \  return $newlist;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  for ($i = count($l);\
    \ $i > 0; --$i) {\n    array_unshift($l, $l[--$i]);\n  }\n  return $l;\n}\n\n\
    /**\n * Implements a custom error handler that returns a response without\n *\
    \ sending the complete HTTP headers. This is useful for APIs such as the\n * Google\
    \ Maps API, which do not allow for returning custom HTTP headers.\n *\n * Usage:\n\
    \ *   set_error_handler(array($this, 'my_error_handler'));\n *\n * Functions:\n\
    \ * callback($err_msg)\n *   Sends a custom error message and exits.\n *\n * callback($err_msg,\
    \ $err_code)\n *   Sends a custom error message and exits. The $err_code is the\
    \ HTTP status\n *   code to be sent.\n *\n * callback($err_msg, $err_code, $err_obj)\n\
    \ *   Sends a custom error message and exits. The $err_obj is a custom object\n\
    \ *   to be passed to PHP's native error handler.\n *\n * callback($err_obj, $err_code)\n\
    \ *   Sends a custom error message and exits. The $err_code is the HTTP status\n\
    \ *   code to be sent.\n */\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltyno0yw.php:44\n\
    Stack trace:\n#0 /tmp/tmpltyno0yw.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpltyno0yw.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = array();\n  foreach\
    \ ($l as $k => $v) {\n    $r[] = $k + 1;\n  }\n  return $r;\n}\n</code>\nFor each\
    \ element of your list, find the position of the first occurence in the other\
    \ list, then subtract that value from that position (as you are already doing\
    \ in your example). The result is your new list\n<|/ a |>\n<| c |>\nThe question\
    \ clearly states that there is already an algorithm for the increment.\n<|/ c\
    \ |>\n<| c |>\nThe answer is not correct. `incr_list([5, 3, 5])` should return\
    \ `[6, 4, 6]` but returns `[4, 6, 6]`. Your algorithm returns `[6, 4, 5]`.\n<|/\
    \ c |>\n<| c |>\nI see - I misread the OP's expected output to be the list with\
    \ the elements incremented by 1\n<|/ c |>\n<| a tags=arrays,php,increment |>\n\
    I believe this would do it, but I'm not sure that it would pass all tests.\n<code>\n\
    $array = array(5, 3, 5, 2, 3, 3, 9, 0, 123);\n$result = array();\n\nforeach ($array\
    \ as $k => $v) {\n    $result[] = $k;\n    $result[] = $k;\n    $result[] = $k;\n\
    \    $result[] = $v + 1;\n}\n\nvar_dump($result);\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=arrays,php,increment |>\n<code>\n$array = array(5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123);\n$result = array();\n\nforeach ($array as $k => $v) {\n    $result[]\
    \ = $k;\n    $result[] = $k;\n    $result[] = $k;\n    $result[] = $v;\n    $result[]\
    \ = $v + 1;\n}\n\nvar_dump($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ will not work. `$result[] = $v + 1;` will always output 6 as `5 + 1 = 6`.\n\
    <|/ c |>\n<| c |>\nYou are correct in saying that this will always output 6. I\
    \ didn't notice the requirement in the question for incrementing the same value\
    \ by 1. I've updated my answer to suit this.\n<|/ c |>\n<| a dscore=0 tags=arrays,php,increment\
    \ |>\nFor anyone who wants to increment the value by one for each array element:\n\
    <code>\n<?php\n    $a = array(1, 2, 3, 2, 3);\n    $array = array();\n    foreach\
    \ ($a as $k => $v) {\n        $array[$k] = $v;\n        $array[$k] = $v;\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmhc59vzq.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_reduce($l,\
    \ 'inc', 1);\n}\n\n/**\n * Return the length of the given value.\n *\n * @return\
    \ int\n */\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reduce() expects parameter 2 to be a valid callback, function\
    \ 'inc' not found or invalid function name in /tmp/tmpetyc017b.php on line 8\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetyc017b.php:21\nStack\
    \ trace:\n#0 /tmp/tmpetyc017b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpetyc017b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $a = array_shift($l);\n\
    \  while($l) $a[count($a)] = array_shift($l);\n  return $a;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvrmfkg98.php:17\n\
    Stack trace:\n#0 /tmp/tmpvrmfkg98.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpvrmfkg98.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = 0;\n    foreach\
    \ ($l as $e) {\n        $i++;\n        $l[$i] = $e;\n    }\n    return $l;\n}\n\
    \nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdv0tpvc.php:22\n\
    Stack trace:\n#0 /tmp/tmpfdv0tpvc.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfdv0tpvc.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($i)\
    \ {\n        return $i + 1;\n    }, $l);\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nNice code, but this doesn't answer the original question: why is `array_pad()`\
    \ slower than `array_map()` in this case?\n<|/ c |>\n<| c |>\nOh, I didn't think\
    \ of that -- I just tested it, and it really doesn't seem to make a difference.\
    \ I guess the difference is just that the `array_pad()` version has one less function\
    \ call -- it just replaces the call to `array_map()` with two calls to `array_pad()`.\
    \ Anyway, thanks for your answer.\n<|/ c |>\n<| a |>\n<code>\n$arr = array(\"\
    one\", \"two\", \"three\", \"four\");\n$arr = array_pad($arr,count($arr),\"four\"\
    );\nprint_r($arr);\n</code>\n<|/ a tags=arrays,php dscore=5 |>\n<| a dscore=5\
    \ |>\nI wrote a quick function based on array_pad:\n<code>\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7i5umpli.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 1;\n  $result =\
    \ array();\n  foreach ($l as $item) {\n    $result[] = $item + $i++;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xl6bpbp.php:22\n\
    Stack trace:\n#0 /tmp/tmp2xl6bpbp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2xl6bpbp.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = array();\n\
    \  $len = count($l);\n  for ($i = 0; $i < $len; ++$i) {\n    $result[$i] = $l[$i]\
    \ + 1;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = array();\n  foreach\
    \ ($l as $n) {\n    $r[] = $n+1;\n  }\n  return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  for ($i = 0, $c = count($l); $i < $c; $i++) {\n        $result[$i] = $l[$i]\
    \ + 1;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$p = 1;\n\t$n = count($l);\n\
    \tfor ($i = 0; $i < $n; $i++) {\n\t\t$p = $p * 2;\n\t\t$l[$i] = $p + $l[$i];\n\
    \t}\n\treturn $l;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxbmskdy.php:23\n\
    Stack trace:\n#0 /tmp/tmpdxbmskdy.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpdxbmskdy.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = 1;\n    $r =\
    \ array();\n    foreach ($l as $k => $v) {\n        $r[$k]   = $i++;\n       \
    \ $r[$k+1] = $i++;\n        $r[$k+2] = $i++;\n    }\n    return $r;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32nuclop.php:23\n\
    Stack trace:\n#0 /tmp/tmp32nuclop.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp32nuclop.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$l = is_array($l) ?\
    \ $l : array();\n\t$ret = $l;\n\tfor ($i = 0, $len = count($l); $i < $len; $i++)\n\
    \t\t$ret[$i++] = $ret[$i] + 1;\n\treturn $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpph9zu3po.php:21\n\
    Stack trace:\n#0 /tmp/tmpph9zu3po.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpph9zu3po.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  // Return list with\
    \ incremented by 1 element.\n  // >>> incr_list([1, 2, 3])\n  // [2, 3, 4]\n \
    \ // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  // [6, 4, 6, 3, 4, 4, 10,\
    \ 1, 124]\n  do {\n    $l[] = $l[$i];\n  } while (++$i);\n  return $l;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp_mjfry99.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ret = [];\n  for ($i\
    \ = 0; $i < count($l); $i++) {\n    $ret[] = $l[$i] + 1;\n  }\n  return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($num)\
    \ { return $num + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 1;\n  $ret = array();\n\
    \  foreach ($l as $e) {\n    $ret[] = $i++;\n  }\n  return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjafhl9ol.php:22\n\
    Stack trace:\n#0 /tmp/tmpjafhl9ol.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjafhl9ol.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach($l as $i =>\
    \ $e) { $l[$i+1] = $e; }\n    return $l;\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplf9kcyv5.php:18\n\
    Stack trace:\n#0 /tmp/tmplf9kcyv5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmplf9kcyv5.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$s = array();\n\tdo\
    \ {\n\t\t$x = array_shift($l);\n\t\t$s[] = $x;\n\t} while ($l);\n\treturn $s;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2thpb3t9.php:21\n\
    Stack trace:\n#0 /tmp/tmp2thpb3t9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2thpb3t9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $count = count($l);\n\
    \  for ($i = $count; $i < 3; ++$i) {\n    $l[] = $l[$i] + 1;\n  }\n  return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07kv6ac5.php:20\n\
    Stack trace:\n#0 /tmp/tmp07kv6ac5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp07kv6ac5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $n = 0;\n  foreach ($l\
    \ as $item) {\n    $n++;\n    $l[$n] = $item;\n  }\n  return $l;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnbrndpl.php:21\n\
    Stack trace:\n#0 /tmp/tmplnbrndpl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmplnbrndpl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = array();\n\
    \  foreach ($l as $key => $value) {\n    $result[$key] = $value + 1;\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  // Initialize variable\
    \ to track current index\n  $i = 0;\n  // Initialize counter.\n  $c = count($l);\n\
    \  // Initialize temp variable.\n  $temp;\n  // Loop through list.\n  while ($i\
    \ < $c) {\n    // Set temp variable to current value.\n    $temp = $l[$i];\n \
    \   // Increment index.\n    $i++;\n    // If index is less than current counter...\n\
    \    if ($i < $c) {\n      // ...add 1 to it.\n      $l[$i] = $l[$i] + 1;\n  \
    \  } else {\n      // ...then add current counter to end of list.\n      $l[]\
    \ = $temp + 1;\n      // Reset counter.\n      $i = 0;\n    }\n  }\n  return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp__kc9b7x.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  foreach($l as $key =>\
    \ $value) {\n    $l[$key] = $key + 1;\n  }\n  return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8vwgj3_b.php:20\n\
    Stack trace:\n#0 /tmp/tmp8vwgj3_b.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8vwgj3_b.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  if (empty($l)) return\
    \ $l;\n  $ret = array();\n  $m = max($l);\n  foreach ($l as $n) {\n    $ret[$n]\
    \ = $n + 1;\n  }\n  for ($i = $m; $i < count($l); $i++) {\n    $ret[$i] = $i +\
    \ 1;\n  }\n  return $ret;\n}\n\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuamizhfu.php:27\n\
    Stack trace:\n#0 /tmp/tmpuamizhfu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpuamizhfu.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $new = [];\n  foreach\
    \ ($l as $k => $v) {\n    $new[$k]++;\n  }\n  return $new;\n}\n</code>\nTest:\n\
    <code>\nprint_r(incr_list([1, 2, 3])); // prints [2, 3, 4, 1]\nprint_r(incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])); // prints [6, 4, 6, 3, 4, 4, 10, 1, 124]\n</code>\n\
    <|/ a |>\n<| a dscore=1 tags=arrays,php |>\nI did it using the following method:\n\
    \n<code>\n<?php\n$arr = array(\n    'name' => 1,\n    'address' => 2,\n    'phone'\
    \ => 3,\n    'email' => 4,\n    'age' => 5\n);\n$new_arr = [];\nforeach($arr as\
    \ $key => $val) {\n    $new_arr[$key] = $new_arr[$key] + 1;\n}\n\necho '<pre>';\n\
    print_r($new_arr);\necho '</pre>';\n</code>\n<|/ a |>\n<| a dscore=0 tags=arrays,php\
    \ |>\nYou can try the following:\n<code>\n$dataArray = array('name' => 1, 'address'\
    \ => 2, 'phone' => 3, 'email' => 4, 'age' => 5);\n\n$newArray = array();\nforeach($dataArray\
    \ as $key => $val){\n    $newArray[$key] = $newArray[$key] + 1;\n}\n\nprint_r($newArray);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [name] => 2\n    [address] => 3\n    [phone]\
    \ => 4\n    [email] => 5\n    [age] => 6\n)\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    $my_array = array('name' => 1, 'address' => 2, 'phone' => 3, 'email' => 4, 'age'\
    \ => 5);\nforeach($my_array as $key => $value)\n{\n   $my_array[$key] = $my_array[$key]\
    \ + 1;\n}\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a |>\nThe other answers\
    \ all show how to increment the value of the current item, but since you want\
    \ a new array, you can try something like this:\n<code>\n$array = ['name' => 1,\
    \ 'address' => 2, 'phone' => 3, 'email' => 4, 'age' => 5];\n$new_array = array_map(function($val)\
    \ {\n    return ++$val;\n}, $array);\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpskgpwsvc.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($v)\
    \ { return $v + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $c = count($l);\n  $r\
    \ = [];\n  foreach ($l as $i => $v) {\n    $r[$i] = $v + 1;\n  }\n  return $r;\n\
    }\n</code>\nThe same principle applies on other functions with different arguments,\
    \ e.g. this one incr_array():\n<code>\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnrsold8a.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = array();\n  foreach\
    \ ($l as $i => $n) {\n    $r[$i + 1] = $n;\n  }\n  return $r;\n}\n\n\n/**\n *\
    \ Merge two arrays without duplicates.\n */\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqdio3xg.php:25\n\
    Stack trace:\n#0 /tmp/tmpwqdio3xg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwqdio3xg.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$l[$count++] = $l[$count++];\n\
    \tfor (; $count; $l[$count++] = $l[$count++]);\n\treturn $l;\n}\n\n/*\n * Check\
    \ whether a string starts with a substring\n * >>> starts_with(\"abba\", \"ab\"\
    )\n * True\n */\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 167772160 bytes) in /tmp/tmp_77qyqol.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  list($x, $y) = each($l);\n\
    \  $n1 = $y + 1;\n  while ($n1 < count($l)) {\n    $l[$n1] = $l[$n1] + 1;\n  \
    \  $n1 ++;\n  }\n  $n2 = count($l) - 1;\n  $l[$n2] = $l[$n2] + 1;\n  return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cqjw09x.php:24\n\
    Stack trace:\n#0 /tmp/tmp8cqjw09x.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8cqjw09x.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function\
    \ ($x) use (&$l) {\n    return ++$x;\n  }, $l);\n}\n</code>\nIf you have some\
    \ really big arrays, you could always use array_chunk.\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\n`array_walk` doesn't seem to be available in PHP 7. I tried replacing\
    \ `array_walk` with `array_map` but that didn't seem to work. I'm sure there must\
    \ be another solution though\n<|/ c |>\n<| c |>\nLooks like `array_walk` was added\
    \ [around version 5.2.1](https://www.php.net/manual/en/function.array-walk.php#refsect1-function.array-walk-notes).\
    \ I've updated my answer to reflect the change.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I tried using array_walk but couldn't get it to work. I used array_map\
    \ though and that worked perfectly. I also read through the php docs but couldn't\
    \ find the function you're describing.\n<|/ c |>\n<| a dscore=5 |>\nThe function\
    \ you're looking for is array_map(). It will execute a function on every element\
    \ of an array and return a modified copy of the input array (in your case, with\
    \ each element incremented by 1).\n<code>\n$incremented_array = array_map(function($value){\n\
    \    return $value + 1;\n}, $original_array);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$incremented_array = array_map(function($value){\n\
    \    return $value + 1;\n}, $original_array);\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\nThis should be the accepted answer. array_map has more flexibility than\
    \ array_walk\n<|/ c |>\n<| a |>\nHere's how you can do it in one line of code!\n\
    <code>\n$arr = array_map('array_sum', array_chunk($arr, 2));\n</code>\nThis will\
    \ increment the values in every second element of the array.\n<|/ a tags=arrays,php\
    \ dscore=3 |>\n<| c |>\nThe third parameter of `array_chunk` doesn't seem to have\
    \ any impact on the behavior of array_sum. https://3v4l.org/Um6ZB\n<|/ c |>\n\
    <| c |>\nYes you are correct, I realized that afterwards. I have updated my answer.\n\
    <|/ c |>\n<| a dscore=2 |>\nThis is how you can do it using array_map().\n<code>\n\
    $array = [1, 2, 3, 4];\n$new_array = array_map(function ($element) use ($array)\
    \ {\n    return \nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpenne1u3g.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $newList = array();\n\
    \  foreach($l as $e) {\n    $newList[] = $e + 1;\n  }\n  return $newList;\n}\n\
    \nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $out = [];\n  foreach($l\
    \ as $k => $v) {\n    if (is_null($v)) {\n      continue;\n    }\n    $out[$k]\
    \ = $v + 1;\n  }\n  return $out;\n}\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = [];\n  foreach\
    \ ($l as $value) {\n    $res[] = $value + 1;\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_merge(array_map('array_sum',\
    \ $l), [$l[0]+1]);\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3f16oe90.php:15\n\
    Stack trace:\n#0 /tmp/tmp3f16oe90.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp3f16oe90.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    $i\
    \ = 0;\n    while (count($l)) {\n        if ($i % 2) {\n            $res[] = array_shift($l);\n\
    \        } else {\n            $res[] = array_pop($l);\n        }\n        $i++;\n\
    \    }\n    return $res;\n}\n</code>\n<|/ a |>\n<| a |>\nFor a pure PHP solution\
    \ that does not require counting the number of elements in the list, you can use\
    \ the following code:\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkd2mh44s.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  // increment by 1 for\
    \ each element in the list\n  $new = array();\n  foreach ($l as $e) {\n    $new[]\
    \ = $e + 1;\n  }\n  return $new;\n}\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $l2 = array();\n  for\
    \ ($i = 0, $len = count($l); $i < $len; ++$i) {\n    $l2[$i + 1] = array($l[$i],\
    \ 1);\n  }\n  array_multisort($l2, SORT_NUMERIC);\n  $ret = $l;\n  for ($i = 0,\
    \ $len = count($l2); $i < $len; ++$i) {\n    $ret[] = $l2[($i + 1)][0] + $ret[$i];\n\
    \  }\n  return $ret;\n}\n\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt56hfj1b.php:27\n\
    Stack trace:\n#0 /tmp/tmpt56hfj1b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt56hfj1b.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $i\
    \ => $v) {\n        $l[$i] = $i + 1;\n    }\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpezg7g8vx.php:19\n\
    Stack trace:\n#0 /tmp/tmpezg7g8vx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpezg7g8vx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  $i = 0;\n    foreach ($l as $item) {\n        $r[$i] = $item;\n        $i++;\n\
    \    }\n    return $r;\n}\n</code>\nTo make your own function, create it in a\
    \ file called function.php, then add a function declaration in the file above\
    \ the function itself.\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf_uumg8l.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  if (empty($l)) {\n \
    \   return array();\n  }\n  $result=array();\n  $length=count($l);\n  for ($i=0;\
    \ $i<$length; $i++) {\n    $result[$i]=array('value'=>$l[$i]+1, 'key'=>$i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpst52450p.php:25\n\
    Stack trace:\n#0 /tmp/tmpst52450p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpst52450p.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ls = count($l);\n \
    \ for($i = $ls; $i > 0; $i--) {\n    $l[$i] += 1;\n  }\n  return $l;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0e3k5usl.php:20\n\
    Stack trace:\n#0 /tmp/tmp0e3k5usl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0e3k5usl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($value)\
    \ {\n    return $value + 1;\n  }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$a = [$l[0]];\n\tfor\
    \ ($i = 1; $i < sizeof($l); $i++)\n\t\t$a[] = $a[$i - 1] + $l[$i];\n\treturn $a;\n\
    }\n\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8os3vlw2.php:20\n\
    Stack trace:\n#0 /tmp/tmp8os3vlw2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8os3vlw2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  foreach ($l as $k =>\
    \ $v)\n    $l[$k + 1] = $v;\n  return $l;\n}\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ptlykgp.php:18\n\
    Stack trace:\n#0 /tmp/tmp3ptlykgp.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp3ptlykgp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = [];\n  foreach\
    \ ($l as $value) {\n    $r[$value] = $value + 1;\n  }\n  return $r;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt153k3ts.php:20\n\
    Stack trace:\n#0 /tmp/tmpt153k3ts.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpt153k3ts.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $new_list = [];\n  foreach\
    \ ($l as $e) {\n    $new_list[] = $e + 1;\n  }\n  return $new_list;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $k\
    \ => $v) {\n        $l[$k] = $v + 1;\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($e)\
    \ { return ++$e; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $n = count($l);\n  for\
    \ ($i = $n; $i < 2 * $n; $i++) {\n    $l[$i] = $l[$i - 1] + 1;\n  }\n  return\
    \ $l;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bopd30n.php:20\n\
    Stack trace:\n#0 /tmp/tmp9bopd30n.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9bopd30n.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = array();\n  foreach\
    \ ($l as $val) {\n    $r[] = $val + 1;\n  }\n  return $r;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $newlist = array();\n\
    \  for ($i = 0; $i < count($l); $i++) {\n    $newlist[] = $l[$i] + 1;\n  }\n \
    \ return $newlist;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $l[0]++;\n    foreach($l\
    \ as $key => $value) {\n        if($value > 0) {\n            while($value > 0)\
    \ {\n                array_push($l, $value--);\n            }\n            break;\n\
    \        }\n    }\n    return $l;\n}\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bspo4jy.php:24\n\
    Stack trace:\n#0 /tmp/tmp6bspo4jy.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6bspo4jy.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  $i = count($l);\n    while ($i--) {\n        $r[$i] = $i + 1;\n    }\n    return\
    \ $r;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszem5xox.php:21\n\
    Stack trace:\n#0 /tmp/tmpszem5xox.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpszem5xox.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = [];\n  for ($i\
    \ = 0, $c = count($l); $i < $c; $i++) {\n    $res[] = $l[$i] + 1;\n  }\n  return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$res = $l[0];\n\t$l[0]\
    \ = 1;\n\tfor ($i = 1, $length = count($l); $i < $length; $i++) {\n\t\t$res =\
    \ $l[$i] + $res;\n\t\t$l[$i] = $res;\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f0jje_0.php:22\n\
    Stack trace:\n#0 /tmp/tmp9f0jje_0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9f0jje_0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  sort($l);\n  $i = $l[0];\n\
    \  $l[0]++;\n  unset($l[$i - 1]);\n  $l[] = $i;\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpox3zrgjo.php:20\n\
    Stack trace:\n#0 /tmp/tmpox3zrgjo.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpox3zrgjo.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = [];\n  for ($i\
    \ = 0, $len = count($l); $i < $len; ++$i) {\n    $r[] = $i + 1;\n  }\n  return\
    \ $r;\n}\n\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisg0t57e.php:22\n\
    Stack trace:\n#0 /tmp/tmpisg0t57e.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpisg0t57e.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\tstatic $list = array();\n\
    \tforeach ($l as $key => $value) {\n\t\t$list[$key] = $key + 1;\n\t}\n\treturn\
    \ $list;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfz3csk1f.php:21\n\
    Stack trace:\n#0 /tmp/tmpfz3csk1f.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfz3csk1f.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = [];\n  $l = is_array($l)\
    \ ? $l : [$l];\n  $c = 0;\n  foreach ($l as $el) {\n    $r[$c++] = $el;\n  }\n\
    \  return $r;\n}\n\n/*\n * Merge two lists, handling duplicates.\n * \n * >>>\
    \ merge_sort([2, 3, 9, 5, 3, 6, 5, 9, 10, 1, 8, 7, 0, 8, 7, 8])\n * [0, 1, 2,\
    \ 2, 3, 3, 5, 5, 5, 6, 6, 7, 8, 7, 8, 9]\n */\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp298z2j7e.php:29\n\
    Stack trace:\n#0 /tmp/tmp298z2j7e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp298z2j7e.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = array();\n\
    \    $first = array_shift($l);\n    array_push($result, $first);\n    foreach\
    \ ($l as $element) {\n        $result[] = $first + $element;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwl2wj92c.php:22\n\
    Stack trace:\n#0 /tmp/tmpwl2wj92c.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpwl2wj92c.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $n = 0;\n    foreach\
    \ ($l as $value) {\n        $l[$n] = $value + 1;\n        $n++;\n    }\n    return\
    \ $l;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $out = [$l[0]];\n\
    \    for ($i = 1; $i < count($l); $i++) {\n        $out[] = $out[$i - 1] + $l[$i];\n\
    \    }\n    return $out;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nThe question\
    \ was to transform this list into that list. I'm assuming that we must use recursive\
    \ methods. \n<code>\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6wxjlds9.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $c = count($l);\n\
    \    for($i=$c; $i<3; $i++) {\n        $l[] = $c;\n    }\n    return $l;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfa4abxr.php:20\n\
    Stack trace:\n#0 /tmp/tmpmfa4abxr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmfa4abxr.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $n = count($l);\n  for\
    \ ($i = 0; $i < $n; ++$i) {\n    $l[$i] = $i + 1;\n  }\n  return $l;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnpipmie.php:20\n\
    Stack trace:\n#0 /tmp/tmphnpipmie.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphnpipmie.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = [];\n  foreach($l\
    \ as $item) {\n    $result[] = $item + 1;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $c = 0;\n    foreach\
    \ ($l as $val) {\n        $l[$c] = $val + 1;\n        $c++;\n    }\n    return\
    \ $l;\n}\n\n/**\n * Returns a list of integers starting at position $start in\
    \ $l.\n *\n * >>> incr_list([10, 2, 3])\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 16 in /tmp/tmpp0wmi486.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $new = array();\n  foreach($l\
    \ as $k => $v) {\n    $new[$k] = $k + 1;\n  }\n  return $new;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpejgyr8i_.php:20\n\
    Stack trace:\n#0 /tmp/tmpejgyr8i_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpejgyr8i_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ret = [];\n  foreach\
    \ ($l as $k => $v) {\n    $ret[$k]++;\n  }\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_oi6knwf.php:21\n\
    Stack trace:\n#0 /tmp/tmp_oi6knwf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_oi6knwf.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 0;\n  foreach ($l\
    \ as $k => $v) {\n    $l[$k] = $i++;\n  }\n  return $l;\n}\n</code>\n<|/ a tags=list,php,arrays\
    \ dscore=2 |>\n<| a dscore=2 |>\nFor anyone interested in the future, here's a\
    \ solution using array_reduce, which doesn't require a loop:\n<code>\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo814fpyj.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function\
    \ ($n) { return ++$n; }, $l);\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $ret = [];\n    foreach\
    \ ($l as $i => $e) {\n        $ret[$i] = $i + 1;\n    }\n    return $ret;\n}\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpea5l6bn2.php:20\n\
    Stack trace:\n#0 /tmp/tmpea5l6bn2.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpea5l6bn2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $ret = array();\n  foreach\
    \ ($l as $item) {\n    $ret[] = $item + 1;\n  }\n  return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($n)\
    \ { return $n + 1; }, $l);\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $i = 0;\n  while (count($l)\
    \ > 0) {\n    ++$i;\n    array_pop($l);\n  }\n  return $i;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgno6y2gf.php:20\n\
    Stack trace:\n#0 /tmp/tmpgno6y2gf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgno6y2gf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = [];\n  foreach($l\
    \ as $e) {\n    $r[] = $e + 1;\n  }\n  return $r;\n}\n</code>\nThe only difference\
    \ is the return of the function, and it is simpler to understand.\n<|/ a dscore=2\
    \ tags=arrays,php |>\n<| a |>\nIf you're using PHP 5.5 or later, you can use array_map\
    \ and array_column functions to achieve this. \nFor example:\n<code>\n$a = array(\n\
    \  array('id' => 1, 'title' => 'A'),\n  array('id' => 2, 'title' => 'B'),\n  array('id'\
    \ => 3, 'title' => 'C')\n);\n\n$b = array_map(function ($v) {\n  return $v['id']\
    \ + 1;\n}, $a); //array(2, 3, 4)\n\n$c = array_column($a, 'id', true) + 1;//array(2,\
    \ 3, 4)\n</code>\nNote that in array_column third parameter true is required.\n\
    <|/ a tags=arrays,php dscore=2 |>\n<| a tags=arrays,php dscore=1 |>\nOne more\
    \ way using array_reduce\n<code>\narray_reduce($array, function($a, $b) {\n  \
    \  return array_merge($a, array_fill(0, $b['id'], $b['id'] + 1));\n}, []);\n</code>\n\
    <|/ a |>\n<| a tags=arrays,php dscore=0 |>\nIf you have the id field available,\
    \ you can just do:\n<code>\n$array = array_map(function($entry) {\n    $entry['id']\
    \ = $entry['id'] + 1;\n    return $entry;\n}, $array);\n</code>\n<|/ a |>\n<|\
    \ a tags=arrays,php |>\nYou can do it without foreach by utilizing array_map function:\n\
    <code>\n$array1 = array_map(function($item){\n    $item['id'] += 1;\n    return\
    \ $item;\n}, $array);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nAnother way\
    \ using array_walk:\n<code>\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg6d74khz.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
