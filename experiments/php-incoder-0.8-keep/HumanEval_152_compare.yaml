name: HumanEval_152_compare
language: php
prompt: "<?php\n// I think we all remember that feeling when the result of some long-awaited\n\
  // event is finally known. The feelings and thoughts you have at that moment are\n\
  // definitely worth noting down and comparing.\n// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n// Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
  function compare($game, $guess) {\n"
tests: "function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2,\
  \ -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
  \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$guess = array_map('intval', $guess);\n\t$scores = array_map('intval',\
    \ $game);\n\t$result = array_intersect($guess, $scores);\n\t$result = array_filter($result);\n\
    \t$result = array_map(function($item) use ($scores){\n\t\t$dif = abs($item - $scores);\n\
    \t\t$res = $dif ? $dif : $item;\n\t\treturn $res;\n\t}, $result);\n\treturn $result;\n\
    }\n", "    // Your code here\n    $a = 0;\n    $b = 0;\n    $result = [];\n  \
    \  foreach ($game as $key => $value) {\n        if ($guess[$key] == $value) {\n\
    \            $result[$key] = 0;\n        } elseif ($guess[$key] < 0) {\n     \
    \       $result[$key] = abs($guess[$key] - $value);\n        } else {\n      \
    \      $result[$key] = abs($value + $guess[$key]);\n        }\n    }\n    return\
    \ $result;\n}\n", "    $result = array();\n    for ($i=0; $i < count($game); $i++)\
    \ {\n        $result[$i] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\nPlease do not just post a wall\
    \ of code as an answer to someone's homework/project. Please explain your answer,\
    \ in detail, how your code is different from the original poster's and what makes\
    \ it better. Thank you.\n<|/ c |>\n<| c |>\n, i tried my best to explain the answer\n\
    <|/ c |>\n<| c |>\nThank you for taking the time to explain what is happening\
    \ here and giving a clear answer.  It will make people more comfortable and easier\
    \ in the future.\n<|/ c |>\n<| a dscore=0 |>\nThe other answers here are good.\
    \  Here's a version that uses two functions.  (I think this is an example of \"\
    code golf\" if you will.)  It would be more efficient with recursion to solve\
    \ the problem in one function rather than two.  \n<code>\n$game = [1,2,3,4,5,1];\n\
    $guess = [1,2,3,4,2,-2];\n", "    $correct = count(array_filter($game, function($value)\
    \ use ($guess){\n        return $value == $guess;\n    }));\n\n    $diff = array_map(function($value)\
    \ use ($game, $guess){\n        return abs($value - $game);\n    }, $guess);\n\
    \n    return [\n        array_sum($diff),\n        array_sum($correct),\n    \
    \    array_sum($diff) - array_sum($correct)\n    ];\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\n<?php\n", "    $guesses = array_fill(0, count($guess),\
    \ 0);\n    $scores = [];\n    foreach ($game as $i => $score) {\n        if ($guess\
    \ == $score) {\n            $guesses[$i] = $score;\n        } else {\n       \
    \     $score = ($score > 0) ? $score : -$score;\n            $guesses[$i] += abs($guess\
    \ - $score);\n        }\n    }\n    return $guesses;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for the answer. Your function is indeed faster, but is still\
    \ not faster than a straight equality check on every item in the array. Even with\
    \ 1000000 items, the straight equality test is still slower than the function,\
    \ but this may be because of the nature of the numbers. Still, it is a huge improvement\
    \ over other solutions, especially for small array sizes (such as 4).\n<|/ c |>\n\
    <| a dscore=2 |>\nFor completeness, here is my solution that uses PHP's array_map\
    \ function:\n<code>", "    $arr = [];\n    foreach ($game as $key => $value) {\n\
    \        foreach ($guess as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                $arr[$key][$key2] = 0;\n            } else {\n          \
    \      $arr[$key][$key2] = abs($value2 - $value);\n            }\n        }\n\
    \    }\n    return $arr;\n}\n", "\t$score = $game;\n\t$guess = $guess;\n\t$num\
    \ = 0;\n\t$diff = [];\n\tfor ($i=0; $i<count($game); $i++) {\n\t\tif ($game[$i]\
    \ == $guess[$i]) {\n\t\t\t$num++;\n\t\t}\n\t\telse {\n\t\t\t$diff[$i] = abs($game[$i]\
    \ - $guess[$i]);\n\t\t}\n\t}\n\tfor ($i=0; $i<count($diff); $i++) {\n\t\t$score[$i]\
    \ = $diff[$i];\n\t}\n\treturn $score;\n}\n", "    if (count($game) !== count($guess))\
    \ {\n        exit(\"Invalid arrays\");\n    }\n    $result = [];\n    foreach\
    \ ($game as $key => $gameScore) {\n        $result[$key] = abs($guess[$key] -\
    \ $gameScore);\n    }\n    return $result;\n}", "    $score = [];\n    $guesses\
    \ = [];\n\n    foreach ($game as $idx => $val) {\n        if ($val == $guess[$idx])\n\
    \            $score[$idx] = 0;\n        else\n            $score[$idx] = abs($guess[$idx]\
    \ - $val);\n    }\n\n    foreach ($guess as $idx => $val) {\n        $guesses[$idx]\
    \ = abs($val - $game[$idx]);\n    }\n\n    return $score;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThe last solution is what I was trying to do but the only issue is that\
    \ I didn't know how many matches there were in the array, so I was trying to do\
    \ a foreach loop but that just messes up the array. Any ideas on how to do that?\n\
    <|/ c |>\n<| c |>\nThe second example is probably the most helpful. I edited it\
    \ slightly so that it could handle any number of matches.\n<|/ c |>\n<| c |>\n\
    This doesn't handle multiple matches. See the second example in my answer.\n<|/\
    \ c |>\n<| a tags=php dscore=0 |>\nYou will need a nested loop to iterate through\
    \ your array and compare each element to the array you got from the form. \n<code>",
  "    $diffs = array();\n    foreach ($game as $idx => $score) {\n        if ($guess[$idx]\
    \ != $score) {\n            $diffs[$idx] = abs($guess[$idx] - $score);\n     \
    \   } else {\n            $diffs[$idx] = 0;\n        }\n    }\n    return $diffs;\n\
    }", "    $correct = array();\n    $miss = array();\n    foreach ($game as $key\
    \ => $score) {\n        if ($game[$key] == $guess[$key]){\n            $correct[$key]\
    \ = 0;\n        }else{\n            $correct[$key] = abs($game[$key] - $guess[$key]);\n\
    \        }\n    }\n\n    foreach ($guess as $key => $score) {\n        if ($guess[$key]\
    \ == $game[$key]){\n            $miss[$key] = 0;\n        }else{\n           \
    \ $miss[$key] = abs($guess[$key] - $game[$key]);\n        }\n    }\n    return\
    \ $correct + $miss;\n}\n\n$game = array(1,2,3,4,5,1);\n$guess = array(1,2,3,4,2,-2);\n\
    \n$result = compare($game, $guess);\necho \"<table>\n<tr>\n<th>Score</th>\n<th>Guesses</th>\n\
    <th>Score</th>\n</tr>\";\necho \"<tr><td>\".$game[0].\"</td><td>\".$game[1].\"\
    </td><td>\".$guess[0].\"</td></tr>\";\necho \"<tr><td>\".$game[2].\"</td><td>\"\
    .$game[3].\"</td><td>\".$guess[2].\"</td></tr>\";\necho \"<tr><td>\".$game[4].\"\
    </td><td>\".$game[5].\"</td><td>\".$guess[3].\"</td></tr>\";\necho \"</table>\"\
    ;\necho \"<br><hr>\";\necho \"Result: \";\nprint_r($result);", "    $sum = 0;\n\
    \    for($i = 0; $i < count($guess); $i++) {\n        // check if the guess is\
    \ correct\n        if($guess[$i] != $game[$i]) $sum += abs($guess[$i]-$game[$i]);\n\
    \    }\n    return $sum;\n}", "    $score = 0;\n    for($i=0; $i<count($guess);\
    \ $i++) {\n        if ($game[$i] == $guess[$i]) {\n            $score++;\n   \
    \     }\n    }\n    return array_map('absval', $guess);\n}\n\n/**\n * Compare\
    \ two arrays for equality\n */", "    $arr =  $game.'-'.$guess;\n    $arr2 = array();\n\
    \    foreach ($game as $g) {\n        $arr2[$g] = 0;\n    }\n    foreach ($guess\
    \ as $g) {\n        $arr2[$g] = abs($g - $arr[$g]);\n    }\n    return $arr2;\n\
    }\n\n$arr = [1,2,3,4,5,1];\n$arr2 = [-2,-1,0,1,2];\n$arr3 = compare($arr, $arr2);\n\
    print_r($arr3);\n</code>\n<|/ a dscore=2 tags=sorting,arrays,php |>\n<| c |>\n\
    Thanks for the feedback, this is very helpful, but I should clarify that my aim\
    \ is to return the distance from each guess from the correct answer. I appreciate\
    \ this solution but it only returns the distance from the correct answer.\n<|/\
    \ c |>\n<| c |>\nI am not sure I understand. Could you show an example of input\
    \ and desired output?\n<|/ c |>\n<| c |>\nApologies, I may have worded it incorrectly.\
    \ The aim is to find the difference between the two arrays for each guess if the\
    \ correct answer is found. For example, if we have the following arrays of scores:\
    \ $game = [1,2,3,4,5,1]; $guess = [1,2,3,4,2,-2]; It should return an array where\
    \ $arr3[0,0,0,0,3,3]; where a 0 signifies no correct answer, while a number greater\
    \ than 0 signifies the difference in positions between the two arrays. Hope this\
    \ helps\n<|/ c |>\n<| c |>\nThanks! I'll give it a go when I get back to my desk\n\
    <|/ c |>\n<| c |>\nThank you, this is working great now!\n<|/ c |>\n<| a tags=sorting,arrays,php\
    \ dscore=1 |>\nYou can do something like the following...\n<code>\n<?php\n\n$array\
    \ = [1,2,3,4,5,1];\n$array2 = [1,2,3,4,2,-2];\n\n$differences = array_map(function($a,\
    \ $b) {\n    return abs($a - $b);\n}, $array, $array2);\n\nvar_dump($differences);\n\
    </code>\nThe output of this will be...\n<code>\narray(5) {\n  [0]=>\n  int(0)\n\
    \  [1]=>\n  int(4)\n  [2]=>\n  int(1)\n  [3]=>\n  int(0)\n  [4]=>\n  int(3)\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 tags=sorting,arrays,php |>\n<code>", "   \
    \ $length = count($game);\n    $result = [];\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $result[$i] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n\
    }\n", "   $result = array();\n   \n   for($i = 0; $i<count($game); $i++) {\n \
    \    if($game[$i] == $guess[$i]) {\n         $result[$i] = 0;\n     }\n     else\
    \ {\n         $result[$i] = abs($game[$i] - $guess[$i]);\n     }\n   }\n   return\
    \ $result;\n}\n$guess = array(4,3,2,1);\n$result = compare($game, $guess);\nprint_r($result);\n\
    </code>\n<|/ a tags=php |>\n<| c |>\nPlease edit with more information. Code-only\
    \ and \"try this\" answers are discouraged, because they contain no searchable\
    \ content, and don't explain why someone should \"try this\".\n<|/ c |>\n<| a\
    \ |>\nThis worked for me:\n<code>", "    \n}\n", "    return $guess;\n}", "\t\
    $game = array_map('round', $game);\n\t$guess = array_map('round', $guess);\n\t\
    $guesses = array_diff($game, $guess);\n\t$score = array_diff($guess, $game);\n\
    \t\n\t$bestMatch = array();\n\tforeach($guesses as $k => $v) {\n\t\t$bestMatch[$k]\
    \ = $score[$k];\n\t\tforeach($score as $i => $val) {\n\t\t\tif ($val > $bestMatch[$k]\
    \ && $bestMatch[$k] == 0) {\n\t\t\t\t$bestMatch[$k] = $val;\n\t\t\t}\n\t\t}\n\t\
    }\n\t\n\tforeach($score as $k => $v) {\n\t\tif ($bestMatch[$k] == 0) {\n\t\t\t\
    $bestMatch[$k] = $v;\n\t\t}\n\t}\n\t\n\treturn $bestMatch;\n}\n", "    // Write\
    \ your code here\n}\n</cell>\n<cell>\ndef compare($game, $guess) {\n    $game\
    \ = array($game);\n    $guess = array($guess);\n    for($i=0; $i<count($guess);\
    \ $i++) {\n        $guess[$i] = intval($guess[$i]);\n    }\n    \n    $results\
    \ = array();\n    $last_guess = -1;\n    $last_score = -1;\n    for($i=0; $i<count($game);\
    \ $i++) {\n        $score = $game[$i];\n        $guesses = count($game[$i]);\n\
    \        if($last_guess == $guesses && $last_score == $score) {\n            $results[$i]\
    \ = 0;\n        } else {\n            $results[$i] = (abs($last_score - $score));\n\
    \        }\n        $last_guess = $guesses;\n        $last_score = $score;\n \
    \   }\n    \n    return $results;\n}\n\n</cell>\n<cell>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<cell>\ncompare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n\
    <cell>\ncompare([1,2,3,4], [-1,-2,-3,-4])\n</cell>\n<text>\nProblem 3\n\n</text>\n\
    <cell>\n<?php", "    $score = new Score($game);\n    $guess = new Score($guess);\n\
    \    $guessCount = count($guess);\n    $gameCount = count($game);\n    \n    $guessedCorrectly\
    \ = false;\n    $scoreDiff = 0;\n    \n    for($i = 0; $i < $guessCount; $i++)\
    \ {\n        if($game[$i] != $guess[$i]) {\n            $scoreDiff = $score->diff($game[$i],\
    \ $guess[$i]);\n            $guessedCorrectly = false;\n        }\n        \n\
    \        if($score->score($game[$i]) == 0) {\n            $guessedCorrectly =\
    \ true;\n        }\n    }\n    \n    $result = [];\n    \n    if(!$guessedCorrectly)\
    \ {\n        for($i = 0; $i < $gameCount; $i++) {\n            $result[] = $score->diff($game[$i],\
    \ $guess[$i]);\n        }\n    } else {\n        for($i = 0; $i < $gameCount;\
    \ $i++) {\n            $result[] = 0;\n        }\n    }\n    \n    return $result;\n\
    }\n\nclass Score {\n    private $score;\n    private $game;\n    \n    public\
    \ function __construct($score) {\n        $this->score = $score;\n    }\n    \n\
    \    public function score($score) {\n        if($score < 0) {\n            return\
    \ 0;\n        } else {\n            return $score;\n        }\n    }\n    \n \
    \   public function diff($score, $guess) {\n        return abs($score - $guess);\n\
    \    }\n}\n</code>\n<|/ a tags=php,matching,arrays |>\n<| a dscore=1 tags=php,matching,arrays\
    \ |>\n<code>\n<?php\n$game = [1,2,3,4,5,1,5,6,7,8,9];\n$guess = [1,2,3,4,5,2];\n\
    $arraySizeGuess = count($guess);\n\n$guessedCorrectly = false;\n$scoreDiff = 0;\n\
    for($i = 0; $i < $arraySizeGuess; $i++) {\n    if($game[$i] != $guess[$i]) {\n\
    \        $scoreDiff = $score->diff($game[$i], $guess[$i]);\n        $guessedCorrectly\
    \ = false;\n    }\n    if($score->score($game[$i]) == 0) {\n        $guessedCorrectly\
    \ = true;\n    }\n}\n$result = [];\nif(!$guessedCorrectly) {\n    for($i = 0;\
    \ $i < $arraySizeGuess; $i++) {\n        $result[] = $score->diff($game[$i], $guess[$i]);\n\
    \    }\n} else {\n    for($i = 0; $i < $arraySize", "    $correct = count(array_intersect($game,\
    \ $guess)) === count($guess);\n\n    return array_map(function($v) use ($correct)\
    \ {\n        if ($correct) {\n            return 0;\n        }\n        return\
    \ abs($v - $game[$v]);\n    }, $guess);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Ah thanks, I hadn't heard of array_intersect before. I was thinking of using that\
    \ but the problem is that the arrays being compared have different lengths - in\
    \ one example one has 5 elements and in the other example it has 3. I know this\
    \ can be done with loops but I'd prefer using some php native functions. Sorry\
    \ if that wasn't clear.\n<|/ c |>\n<| a dscore=1 tags=compare,php |>\nThis is\
    \ a solution that uses array_diff and array_intersect as you mentioned earlier.\
    \ However it uses a for-loop to iterate the arrays and counts how many matches\
    \ there are. \n<code>", "    $n = count($game);\n    $m = count($guess);\n   \
    \ $gameScore = array_fill(0, $n, '');\n    $guessScore = array_fill(0, $m, '');\n\
    \    $correctScore = array_fill(0, $m, '');\n    foreach ($guess as $index =>\
    \ $guess) {\n        $gameScore[$index] = max($game[$index], $guess);\n      \
    \  $correctScore[$index] = $gameScore[$index] - $guess;\n    }\n    foreach ($game\
    \ as $index => $score) {\n        $guessScore[$index] = max($score, $guess);\n\
    \    }\n    return $guessScore;\n}\n", "    $score = 0;\n    $misses = 0;\n  \
    \  $gameLength = count($game);\n    $guessLength = count($guess);\n    for($i=0;\
    \ $i<$gameLength; $i++) {\n        if($game[$i] == $guess[$i]) {\n           \
    \ $score++;\n        } else {\n            $misses++;\n        }\n    }\n    $result\
    \ = array();\n    for($i=0; $i<$guessLength; $i++) {\n        $result[$i] = abs($guess[$i]\
    \ - $score);\n    }\n    return $result;\n}\n", "    $result = [];\n    $guesses\
    \ = array_count_values($guess);\n    foreach ($game as $gameValue) {\n       \
    \ $result[$gameValue] = $guesses[$gameValue];\n    }\n    ksort($result);\n  \
    \  $guesses = array_count_values($guess);\n    foreach ($result as $gameValue\
    \ => $guessesCount) {\n        $result[$gameValue] = abs($guesses[$gameValue]\
    \ - $guessesCount);\n    }\n    return $result;\n}\n", "  return array_map(function\
    \ ($score, $guess) {\n    return abs($guess - $score);\n  }, $game, $guess);\n\
    }\n", "  // Your code goes here\n  $score = [];\n  for($i = 0; $i < count($game);\
    \ $i++)\n    $score[$i] = $game[$i] - $guess[$i];\n  return $score;\n}", "   \
    \ return $guess;\n}\n", "    $correct = count($game) - count($guess);\n    $dist\
    \ = [];\n    $sum = 0;\n    foreach ($guess as $k => $v) {\n        $sum += abs($game[$k]\
    \ - $v);\n        $dist[$k] = $sum;\n    }\n    return $dist;\n}\n</code>\nIt\
    \ uses two foreach loops to go through the array and sum the differences. I've\
    \ used $sum to hold the total sum of the differences.\n<|/ a |>\n<| c |>\nI'm\
    \ so confused on how to implement this into my code. Do I just copy and paste\
    \ it or do I have to change something? I literally don't know how to do it lol\n\
    <|/ c |>\n<| c |>\nI've added an example of how to use it.\n<|/ c |>\n<| a tags=php,algorithm,arrays\
    \ |>\nThis is a very simple problem that could be solved with one line of code:\n\
    <code>\n$result = array_sum(array_map('abs', $array));\n</code>\nYou will need\
    \ to define the $array variable before this code.\nExample:\n<code>\n<?php\n\n\
    $array = array(1, 2, 3, 4, 5);\n$result = array_sum(array_map('abs', $array));\n\
    \nvar_dump($result);\n</code>\nOutput:\n<code>\nint(10)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nJust use array_sum()\n<code>\n$arr = array(1, 2, 3, 4,\
    \ 5);\n$sum = array_sum($arr);\necho $sum;\n</code>\n<|/ a tags=php,algorithm,arrays\
    \ |>\n<| a |>\nHere is another way using array_diff_key() function:\n<code>\n\
    $game = [1, 2, 3, 4, 5, 6, 7];\n$guess = [1, 2, 3, 4, 2, -2];\n$dist = array_diff_key($game,\
    \ $guess);\n\necho \"game: \", implode(', ', $game), PHP_EOL;\necho \"guess: \"\
    , implode(', ', $guess), PHP_EOL;\necho \"dist: \", implode(', ', $dist), PHP_EOL;\n\
    echo \"total: \", array_sum(array_diff_key($game, $guess)), PHP_EOL;\n</code>\n\
    The output:\n<code>\ngame: 1, 2, 3, 4, 5, 6, 7\nguess: 1, 2, 3, 4, 2, -2\ndist:\
    \ 0, 0, 0, 3, 0, 5\ntotal: 13\n</code>\n<|/ a tags=php,algorithm,arrays dscore=0\
    \ |>\n<| a dscore=0 |>\nHere is my take on this. I tried to make it as simple\
    \ as possible by not using any libraries or looping or anything like that. This\
    \ may have made some people angry but I did learn a ", "    $result = $guess;\n\
    \    foreach ($guess as $key => $guess) {\n        if ($guess !== $game[$key])\
    \ {\n            $result[$key] = abs($guess - $game[$key]);\n        }\n    }\n\
    \n    return $result;\n}", "    $scores = array(\n        1 => 0,\n        2 =>\
    \ 0,\n        3 => 0,\n        4 => 0,\n        5 => 0\n    );\n    \n    $guesses\
    \ = array_map(function($a) use ($game, $scores) {\n        return $a + $game;\n\
    \    }, $guess);\n    \n    foreach ($guesses as $guess) {\n        $scores[$guess]\
    \ += 1;\n    }\n\n    return array_map(function($a) {\n        if ($a < 0)\n \
    \           return 0;\n        if ($a > 0)\n            return $a;\n        return\
    \ $scores[$a];\n    }, $guesses);\n}\n", "    // your code here\n    $game = array_reverse($game);\n\
    \    $guess = array_reverse($guess);\n    $i = 0;\n    foreach ($game as $key\
    \ => $value) {\n        if ($guess[$key] != $value) {\n            $guess[$key]\
    \ -= abs($guess[$key] - $value);\n        }\n        $i++;\n    }\n    return\
    \ $guess;\n}\n\nprint_r(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\n</code>\n<|/\
    \ a tags=php |>\n<| c |>\nThe first result should be `array(5) { [0]=> int(0)\
    \ [1]=> int(0) [2]=> int(0) [3]=> int(3) [4]=> int(3) }`\n<|/ c |>\n<| c |>\n\
    , Thanks for that catch. I must have misread the question somehow. I've updated\
    \ my answer.\n<|/ c |>\n<| c |>\nThis works perfectly! I just modified it slightly\
    \ for my needs, to fit my needs. Thank you so much :)\n<|/ c |>\n<| a tags=php\
    \ |>\nI think this is what you're looking for.\n<code>\n$game = [1,2,3,4,5,1];\n\
    $guess = [1,2,3,4,2,-2];\n\n$result = [];\n$i = 0;\n\nwhile($game[$i] == $guess[$i]){\n\
    \    $i++;\n}\n\n$result[] = $game[$i];\n$result[] = abs($guess[$i]-$game[$i]);\n\
    \nfor($i = 1; $i < count($game); $i++){\n    $result[] = abs($guess[$i]-$game[$i]);\n\
    }\n\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php dscore=0 |>\n\
    <code>\n<?php", "    $result = array();\n    \n    // Sum each element of $guess\
    \ (this will be our score for that guess)\n    foreach ($guess as $index => $guess)\
    \ {\n        $sum = 0;\n        // If the current element of $guess is equal to\
    \ the guess for that index,\n        // add its score to the sum\n        if ($game[$index]\
    \ == $guess) {\n            $sum += $game[$index];\n        }\n        // If the\
    \ current element of $guess is not equal to the guess for that index,\n      \
    \  // subtract its score from the sum\n        else {\n            $sum -= $game[$index];\n\
    \        }\n        $result[] = $sum;\n    }\n    return $result;\n}\n", "   \
    \ //the score is zero when the player guessed correctly\n    $correct = count($game);\n\
    \    $errors = array_count_values($guess);\n    foreach ($game  as $key => $value)\
    \ {\n        $game[$key] -= $guess[$key];\n    }\n    $result = array();\n   \
    \ foreach ($guess as $key => $value) {\n        //if the guess is correct, add\
    \ the difference between the guess and the score\n        if($game[$key] == $correct)\
    \ {\n            $result[] = 0;\n        }\n        //else add the absolute difference\
    \ between the guess and the score\n        else {\n            $result[] = $game[$key]\
    \ - $value;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThat's an interesting solution. I had to reformat the code because\
    \ it's not a function, but I tested it out and it works perfectly. Thank you!\n\
    <|/ c |>\n<| c |>\nI've just fixed the formatting, feel free to roll back the\
    \ edit if you want\n<|/ c |>\n<| a tags=php,math |>\nI wrote a function to solve\
    \ this problem in PHP. Just pass the first array and the second array. \n<code>",
  "\t// initialize variables\n\t$result = array();\n\t\n\t// fill variables\n\tforeach($game\
    \ as $key => $value){\n\t\t$result[$key] = abs($value - $guess[$key]);\n\t}\n\t\
    \n\treturn $result;\n}\n", "    for($i = 0; $i < count($game); $i++) {\n     \
    \   if ($game[$i] === $guess[$i]) {\n            $correct[$i] = 1;\n        }\
    \ else {\n            $correct[$i] = abs($game[$i] - $guess[$i]);\n        }\n\
    \    }\n    return $correct;\n}\n", "  $guess = array_fill(0, count($guess), $game);\n\
    \  return array_sum(array_map(function($score) use ($guess) {\n    return $score\
    \ - abs($guess - $score);\n  }, $game));\n}\n", "    $result = array();\n    for($i\
    \ = 0; $i < count($game); $i++) {\n        if($game[$i] == $guess[$i]) {\n   \
    \         $result[$i] = 0;\n        } else {\n            $result[$i] = abs($guess[$i]\
    \ - $game[$i]);\n        }\n    }\n    return $result;\n}\n", "    $gamesize =\
    \ count($game);\n    $guesssize = count($guess);\n\n    $diff = [];\n    for($i\
    \ = 0; $i < $gamesize; $i++){\n        $diff[$i] = 0;\n    }\n    for($i = 0;\
    \ $i < $guesssize; $i++){\n        if($game[$i] != $guess[$i]){\n            $diff[$i]\
    \ = abs($game[$i]-$guess[$i]);\n        }else{\n            $diff[$i] = 0;\n \
    \       }\n    }\n\n    return $diff;\n}\n", "    $scores = [];\n    foreach ($game\
    \ as $g) {\n        $scores[] = $g - $guess;\n    }\n    return $scores;\n}",
  "    // Write your solution here\n    $result = [];\n    foreach ($guess as $key\
    \ => $value) {\n        if ($game[$key] >= 0) {\n            $result[$key] = $game[$key]\
    \ - $value;\n        }\n    }\n    return $result;\n}", "    $game = array_unique($game);\n\
    \    $guess = array_unique($guess);\n    $maxScore = max($game);\n    $minScore\
    \ = min(array_flip($game));\n    $guess = array_flip($guess);\n    $results =\
    \ [];\n    $results[0] = 0;\n    $guesses = array_flip($guess);\n    for($i =\
    \ 1; $i < count($game); $i++) {\n        if($game[$i] == $maxScore) {\n      \
    \      if(!array_key_exists($i, $guesses)) {\n                $results[$i] = 0;\n\
    \            } else {\n                $results[$i] = $guess[$i] - $guesses[$i];\n\
    \            }\n        } elseif($game[$i] == $minScore) {\n            if(!array_key_exists($i,\
    \ $guesses)) {\n                $results[$i] = abs($guess[$i] - $maxScore);\n\
    \            } else {\n                $results[$i] = abs($guess[$i] - $guesses[$i]);\n\
    \            }\n        } elseif(array_key_exists($i, $guesses)) {\n         \
    \   $results[$i] = abs($guess[$i] - $guesses[$i]);\n        } else {\n       \
    \     $results[$i] = abs($maxScore - $guess[$i]);\n        }\n    }\n    return\
    \ $results;\n}\n\n$game = [1,1,2,2];\n$guess = [0,1,0,1];\n$result = compare($game,$guess);\n\
    echo \"$result\\n\";\n</code>\noutput:\n<code>\n[0, 0, 0, 0, 0]\n</code>\n<|/\
    \ a tags=php,algorithm,brute-force |>\n<| c |>\nI'm a bit confused here... can\
    \ you explain your code a little bit? I'm not quite sure what happens there. Why\
    \ are you flipping all the scores and guesses to compare them?\n<|/ c |>\n<| c\
    \ |>\nBecause I'm iterating through all the matches and comparing them; when I\
    \ come across an out of bounds match I set it to 0 as the guessed value was the\
    \ highest score. Since these are all absolute differences I flip them so that\
    \ I can compare the difference between the max score and the guessed value.\n\
    <|/ c |>\n<| c |>\nOh ok! I think I got it now. I was thinking that $guess and\
    \ $game were the actual values of the guess and score arrays, because that was\
    \ how I understood your code but it seems they're just references to them... so\
    \ I guess I got confused between them and their values. I wonder why would they\
    \ be references and not actual values? Thanks anyways!\n<|/", "    // Your code\
    \ here\n    $score=array_sum($game);\n    $diff=array_sum($game-$guess);\n   \
    \ $result=[];\n    for($i=0;$i<count($guess);$i++) {\n        $result[$i]=$score-$guess[$i];\n\
    \    }\n    return $result;\n}\n\nprint_r(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));",
  "    $correct = 0;\n    $wrong = 0;\n    for ($i = 0; $i < count($guess); $i++)\
    \ {\n        if ($game[$i] == $guess[$i]) {\n            $correct++;\n       \
    \ } else {\n            $wrong++;\n        }\n    }\n    $difference = abs($guess\
    \ - $game);\n    return array($correct, $wrong, $difference);\n}\n", "    $result\
    \ = [];\n    $length = count($guess);\n    for($i = 0; $i < $length; $i++) {\n\
    \        $score = $game[$i];\n        $guess = $guess[$i];\n        if ($guess\
    \ == 0) {\n            $result[$i] = 0;\n        } else {\n            $result[$i]\
    \ = abs($guess - $score);\n        }\n    }\n    return $result;\n}\n", "    for($i\
    \ = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\n    \
    \        $game[$i] = $i;\n    }\n    return $game;\n}\n", "    $result = array();\n\
    \    \n    foreach ($game as $key => $value) {\n        $result[$key] = abs($value\
    \ - $guess[$key]);\n    }\n    \n    return $result;\n}\n", "  $diff = array();\n\
    \  $result = array();\n  for ($i = 0, $i < count($game), $i++) {\n    $result[$i]\
    \ = abs($game[$i] - $guess[$i]);\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=0\
    \ tags=php |>\n<| a tags=php |>\n<code>", "    $result = array();\n    $guess\
    \ = array_map('intval',$guess);\n    foreach ($game as $index => $value) {\n \
    \       $result[$index] = abs($value - $guess[$index]);\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nI understand that my code is not the best\
    \ way of doing it. I just tried to make it simple. I will try to learn more about\
    \ your code. Thank you very much for your help.\n<|/ c |>\n<| c |>\nI edited my\
    \ post and added the second solution that is similar to my first one. Your answer\
    \ has helped me a lot.\n<|/ c |>\n<| c |>\n: I'm glad you found it useful. As\
    \ far as I understand, you want to get the number of mistakes that the user can\
    \ make in a game. So basically you have a total of 8 possible mistakes that you\
    \ check against. So my solution compares 8 guesses with 8 scores. If you only\
    \ want to check one guess, my code should work. Did you find it useful?\n<|/ c\
    \ |>\n<| c |>\nYes I did thank you. I did use your code but I changed it a little\
    \ bit. I posted it below if you find it helpful.\n<|/ c |>\n<| c |>\n: I have\
    \ added an explanation to the answer above, please check and see if it fits your\
    \ needs.\n<|/ c |>\n<| a dscore=2 tags=php |>\n<code>", "   //TODO: implement\
    \ the function\n}\n", "    // TODO: Your code here!\n}\n", "    // Our return\
    \ value will look like this:\n    //     $correctness = array(\n    //       \
    \ 0 => 'Perfect match',\n    //        1 => 'Perfect match',\n    //        2\
    \ => 'Perfect match',\n    //        3 => 'Wrong guess',\n    //        4 => 'Wrong\
    \ guess',\n    //     );\n    $correctness = array();\n    foreach ($game as $i\
    \ => $value) {\n        $correctness[$i] = \"Perfect match\";\n        if ($guess[$i]\
    \ == $value) {\n            $correctness[$i] = \"Perfect match\";\n        }\n\
    \        if ($guess[$i] > $value) {\n            $correctness[$i] = \"Wrong guess\"\
    ;\n        }\n        if ($guess[$i] < $value) {\n            $correctness[$i]\
    \ = \"Wrong guess\";\n        }\n    }\n    return $correctness;\n}", "  $correct\
    \ = [];\n  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] == $guess[$i])\
    \ {\n      $correct[] = 0;\n    } else {\n      $correct[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $correct;\n}\n", "\t\n}", "    $result = 0;\n\n    foreach\
    \ ($game as $index => $score) {\n        $result += abs($score - $guess[$index]);\n\
    \    }\n\n    return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,php,compare\
    \ |>\nYou want to calculate the absolute difference between each element in the\
    \ two arrays (and of course you don't want to use nested loops, because that would\
    \ make the code really slow).\n<code>\n$arr1 = [1,2,3,4,5,1]; // your first array\n\
    $arr2 = [1,2,3,4,2,-2]; // your second array\n\n$diff = abs(array_diff($arr1,\
    \ $arr2)); // the difference between each element of the arrays\n\n$arr3 = array_fill(0,\
    \ count($arr1), $diff);\n", "    $correct = $wrong = 0;\n    \n    foreach ($game\
    \ as $index => $score) {\n        if ($guess == $score) {\n            $correct++;\n\
    \        } else {\n            $wrong += abs($score - $guess);\n        }\n  \
    \  }\n    return array($correct, $wrong);\n}\n", "    if (sizeof($game) !== sizeof($guess))\
    \ {\n        return false;\n    }\n    $matchcount = 0;\n    $gamecount = count($game);\n\
    \    $guessccount = count($guess);\n\n    for ($i = 0; $i < $gamecount; $i++)\
    \ {\n        if ($game[$i] == $guess[$i]) {\n            $matchcount++;\n    \
    \    }\n    }\n\n    $result = array();\n    for ($i = 0; $i < $guessccount; $i++)\
    \ {\n        $result[$i] = abs($guess[$i] - $game[$i]);\n        if ($game[$i]\
    \ == $guess[$i]) {\n            $result[$i] = 0;\n        }\n    }\n\n    return\
    \ $result;\n}\n", "    // Your code here\n    return array();\n}\n", "    $result\
    \ = array();\n    for($x = 0; $x < count($guess); $x++) {\n        $result[$x]\
    \ = 0;\n        for($y = 0; $y < count($game); $y++) {\n            if($game[$y]\
    \ == $guess[$x]) {\n                $result[$x]++;\n            }\n        }\n\
    \    }\n    return $result;\n}\n", "    $game = array_map('round', $game);\n \
    \   $guess = array_map('round', $guess);\n    foreach($game as $i => $s) {\n \
    \       $diff = abs($game[$i] - $guess[$i]);\n        if ($game[$i] === $guess[$i]\
    \ && $diff > $s) \n            $diff = $s - $game[$i];\n        if ($game[$i]\
    \ === $guess[$i] && $diff < 0) \n            $diff = abs($diff - $s);\n      \
    \  $game[$i] = $diff;\n    }\n    return $game;\n}", "    foreach($game as $key\
    \ => $score){\n        if($game[$key] == $guess[$key]){\n            $game[$key]\
    \ = 0;\n            $guess[$key] = 0;\n        }\n    }\n    return $game;\n}\n\
    </code>\n<|/ a tags=php |>\n<| c |>\nHey that works great except I'm wondering\
    \ why I only get -1 returned if there's a miss instead of a 0 like when I tested\
    \ the example you provided\n<|/ c |>\n<| c |>\nI made a mistake in my code. Now\
    \ it should work. I changed $game[$key] to $game[$key+1] and $guess[$key] to $guess[$key+1]\
    \ in the foreach loop.\n<|/ c |>\n<| c |>\nOh wow, thanks. I'm wondering why I\
    \ was getting 0 returned though?\n<|/ c |>\n<| c |>\nMy pleasure. I'm not sure\
    \ why you were getting 0, but it is because of how you are handling your if statement.\
    \ Let me know if you have any more questions about what I'm doing here.\n<|/ c\
    \ |>\n<| c |>\nOh okay thanks again! That makes more sense now. I really appreciate\
    \ your help. Sorry for late reply.\n<|/ c |>\n<| a dscore=1 |>\nYou could use\
    \ array_diff and array_intersect, using array_intersect for comparing the arrays\
    \ would return those elements in the $guesses array which are not present in the\
    \ $game array.\n<code>\n<?php\n$guess = array(-2,5,1,4,0,3);\n$game = array(1,4,2,8,7,6,5);\n\
    \n$diff = array_diff($guess, $game);\n$inter = array_intersect($guess, $game);\n\
    \necho \"<pre>\";\nprint_r($diff);\nprint_r($inter);\necho \"</pre>\";", "   \
    \ // Your code here\n    \n    $score = [];\n    $guess[] = $game;\n    $guess2\
    \ = array_reverse($guess);\n    foreach ($guess as $value) {\n        foreach\
    \ ($guess2 as $value2) {\n            $score[] = $value - $value2;\n        }\n\
    \    }\n    \n    return $score;\n}\n", "    // Write your code below\n    \n\
    \    $gameCount = count($game);\n    $guessCount = count($guess);\n    $gameIndex\
    \ = 0;\n    $guessIndex = 0;\n    $differences = array();\n    \n    while (true)\
    \ {\n        if ($gameIndex == $gameCount) {\n            $differences[] = abs($guess[$guessIndex]\
    \ - $game[$gameIndex]);\n            break;\n        }\n        if ($guessIndex\
    \ == $guessCount) {\n            $differences[] = abs($guess[$guessIndex] - $game[$gameIndex]);\n\
    \            break;\n        }\n        if ($game[$gameIndex] == $guess[$guessIndex])\
    \ {\n            $differences[] = 0;\n        } else {\n            $differences[]\
    \ = abs($guess[$guessIndex] - $game[$gameIndex]);\n        }\n        \n     \
    \   $gameIndex++;\n        $guessIndex++;\n    }\n    \n    return $differences;\n\
    }\necho \"<pre>\";\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nvar_dump(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));\n\
    var_dump(compare([0,0,1,1,1,0],[0,0,0,1,1,0]));\nvar_dump(compare([0,0,1,1,1,0],[0,0,0,0,1,0]));\n\
    var_dump(compare([0,0,1,1,1,0],[0,0,0,0,1,1]));\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\n\
    var_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,0]));\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,1]));\n\
    var_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,2]));\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,3]));\n\
    var_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,4]));\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,5]));\n\
    var_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,6]));\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,7]));\n\
    var_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,8]));\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,9]));\n\
    var_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,10]));\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,11]));\n\
    var_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,12]));\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,13]));\n\
    var_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,14]));\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,15]));\n\
    var_dump(compare([", "   $result = array();\n   $gameSize = count($game);\n  \
    \ $guessesSize = count($guess);\n   $gameCounter = 0;\n   $guessesCounter = 0;\n\
    \   while ( ( $guessesCounter < $guessesSize ) && ( $gameCounter < $gameSize )\
    \ ) {\n      $result[$gameCounter] = $game[$gameCounter] - $guess[$gameCounter];\n\
    \      if ( $result[$gameCounter] <= 0 )\n         $result[$gameCounter] = 0;\n\
    \      $gameCounter++;\n      $guessesCounter++;\n   }\n   if ( $gameCounter ==\
    \ $gameSize )\n      return $result;\n   else\n      return abs($result[0]);\n\
    }", "    // Write your code here\n    $matches_found = false;\n    foreach($game\
    \ as $key => $score){\n        if ($guess == $score ){\n            $matches_found\
    \ = true;\n        }\n    }\n    if ($matches_found) {\n        return [0];\n\
    \    } else {\n        $diffs = [];\n        $diff = abs($guess-$game);\n    \
    \    $diffs[] = $diff;\n        foreach ($guess as $key => $guess) {\n       \
    \     $diffs[] = abs($guess-$game);\n        }\n        return $diffs;\n    }\n\
    }\n", "    $result = array();\n    foreach ($game as $i => $score) {\n       \
    \ $result[$i] = abs($score - $guess[$i]);\n    }\n    return $result;\n}\n", " \
    \   // Your code goes here\n    $result = array();\n    for($i=0; $i < count($guess);\
    \ $i++) {\n        $correct = FALSE;\n        $min = false;\n        for($j=0;\
    \ $j < count($game); $j++) {\n            if($game[$j] == $guess[$i]) {\n    \
    \            $result[$i] = $j;\n                $correct = TRUE;\n           \
    \     $min = true;\n            }\n            if($correct) {\n              \
    \  if(!$min) {\n                    $min = $game[$j];\n                }\n   \
    \         }\n        }\n        if(!$correct) {\n            $result[$i] = abs($game[$i]-$guess[$i]);\n\
    \        }\n    }\n    return $result;\n}\n", "  $result = [];\n  $index = 0;\n\
    \  while ($index < count($game)) {\n    if ($game[$index] == $guess[$index]) {\n\
    \      $result[] = 0;\n    } else {\n      $result[] = ($game[$index] - $guess[$index])\
    \ * -1;\n    }\n    $index++;\n  }\n  return $result;\n}\n\n$game = array(1,2,3,4,5,1,6,2,9,4,8,5,3,5,6,9,5,7,3,8,4,9,7,9,3,5);\n\
    $guess = [1,2,3,4,2,-2];\n$result = compare($game, $guess);\necho 'guess: ', print_r($guess,\
    \ true) , \", Result: \", print_r($result, true);\n", "   $result = [];\n   foreach\
    \ ($guess as $k => $v) {\n     $result[$k] = abs($game[$k]-$v);\n   }\n   return\
    \ $result;\n}\n", "    // Your code here\n    // Your code here\n    // Your code\
    \ here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your ", "  // write your code here\n\
    \  $score=array();\n  for($i=0;$i<count($guess);$i++){\n    if($guess[$i]==0){\n\
    \      $score[$i]=array(0,0,0,0,0);\n    }else{\n      $score[$i]=abs($game[$i]-$guess[$i]);\n\
    \    }\n  }\n  return $score;\n}\n", "    $total = 0;\n    $len = count($game);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($game[$i] == $guess[$i]) {\n\
    \            $total++;\n        }\n    }\n\n    $results = [];\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        $results[$i] = (abs($guess[$i] - $game[$i]))\
    \ * -1;\n    }\n    return $results;\n}\n", "    \n    // Your code here...\n\
    \    \n}\n", "    $num = 0;\n    foreach($game as $key => $value) {\n        if\
    \ ($guess == $value) {\n            $num++;\n        }\n    }\n    $num2 = $game.length\
    \ - $num;\n    $num3 = count($guess) - $num;\n    foreach($guess as $key => $value)\
    \ {\n        if ($key >= $game) {\n            $num3--;\n        }\n    }\n  \
    \  $return[] = $num;\n    if ($num2 == 0) {\n        $return[] = 0;\n    } else\
    \ {\n        $return[] = $num2;\n    }\n    if ($num3 == 0) {\n        $return[]\
    \ = 0;\n    } else {\n        $return[] = $num3;\n    }\n    return $return;\n\
    }\n", "\t$guessed = array_intersect($game, $guess);\n\tif (count($guessed) > count($game))\
    \ {\n\t\treturn array_fill(0, count($guess), 0);\n\t}\n\t\n\treturn array_map(function\
    \ ($v, $i) use ($game, $guess) {\n\t\treturn abs($v - $game[$i]); \n\t}, $guessed,\
    \ array_fill(0, count($guess), 0));\n}\n", "    $correct = array();\n    foreach\
    \ ($game as $index => $score) {\n        $guess = abs($guess[$index] - $score);\n\
    \        if($guess == 0){\n            $correct[$index] = 0;\n        }\n    \
    \    else {\n            $correct[$index] = $guess;\n        }\n    }\n\n    return\
    \ $correct;\n}\n</code>\n<|/ a tags=php,algorithm,arrays |>\n<| c |>\nThe first\
    \ example is the result I'm looking for. However, I haven't been able to get the\
    \ second example to work (as in the function I posted in the question). What could\
    \ be the problem? [link](http://pastebin.com/P4rDj4uY)\n<|/ c |>\n<| c |>\nThe\
    \ example I posted does work. However, your function isn't actually using any\
    \ of PHP's native arrays (i.e. there is no $scores and $guesses arrays)\n<|/ c\
    \ |>\n<| c |>\nI've updated the pastebin with working functions. http://pastebin.com/P4rDj4uY\n\
    <|/ c |>\n<| c |>\nOkay, I see, however, I'm not quite sure how I could apply\
    \ this to my own code. Can you give me an example?\n<|/ c |>\n<| c |>\nI added\
    \ a pastebin showing how to use this on your sample data.\n<|/ c |>\n<| a |>\n\
    The two arrays will always have the same number of elements. \nThe difference\
    \ between each element in the two arrays is the difference in the scores. So you\
    \ can simply iterate over them, subtracting the score from the guess to determine\
    \ the deviation.\n<|/ a dscore=0 tags=php,algorithm,arrays |>\n<| c |>\nBut if\
    \ the guesses come in pairs, how do you determine the difference?\n<|/ c |>\n\
    <| a dscore=0 |>\nOkay, I think I finally figured it out. \n<code>", "    $scores\
    \ = [];\n    foreach ($game as $index => $score) {\n        if ($game[$index]\
    \ == $guess[$index]) {\n            $scores[$index] = 0;\n        } else {\n \
    \           $scores[$index] = abs($score - $guess[$index]);\n        }\n    }\n\
    \    return $scores;\n}\n</code>\n<|/ a tags=arrays,php,comparison dscore=1 |>\n\
    <| c |>\nThe only problem with the above code is that $game[$index] and $guess[$index]\
    \ can not be equal because their values will be the same in one case and different\
    \ in the other.\n<|/ c |>\n<| c |>\nThe question says that \"The two arrays are\
    \ equal if they have the same number of matches.\" So that's why I compare the\
    \ lengths of the arrays. Are you saying that `$game` and `$guess` may have different\
    \ lengths and you do not want to compare them?\n<|/ c |>\n<| c |>\nMy apologies.\
    \ I misunderstood. Both arrays are always equal in the length of the two arrays.\
    \ Thank you for clarifying that point\n<|/ c |>\n<| c |>\nThis only works if each\
    \ of the two arrays are identical in length, otherwise it will not work.\n<|/\
    \ c |>\n<| c |>\nThat is true. I assumed that since it is said that the arrays\
    \ are of equal length that the arrays would have the same number of elements.\n\
    <|/ c |>\n<| a dscore=0 |>\nI would probably make a new array for the scores and\
    \ a variable for the max score. Then, loop through the two arrays and if they\
    \ are the same length, just compare them one by one. If the first index are equal\
    \ then assign the score to the scores array. Otherwise, assign the score to the\
    \ max score. Make sure to also add 1 to your max score since you started at zero\
    \ and went all the way to your max score.\n<|/ a tags=arrays,php,comparison |>\n\
    <| c |>\nThat would be a fine method but it doesn't handle the case where both\
    \ arrays have the same length, because the for loop would then run twice for the\
    \ first array\n<|/ c |>\n<| c |>\nYeah, that would happen if the arrays had different\
    \ lengths. I guess that's why they said the lengths were equal.\n<|/ c |>\n<|\
    \ c |>\nIf they are different lengths, then the first array will iterate through\
    \ the entire length until it reaches the length. So the for loop will iterate\
    \ through each element and compare it against the array in the second array. My\
    \ method will just loop through each element in the second array until it reaches\
    \ the length of the first array. Then, each iteration will compare the ", "  \
    \  $guesses = array();\n    for ($i=0; $i<count($game); $i++) {\n        if ($game[$i]\
    \ == $guess[$i]) {\n            $guesses[$i] = $i;\n        } else {\n       \
    \     $guesses[$i] = $game[$i] - $guess[$i];\n        }\n    }\n\n    return $guesses;\n\
    }\n</code>\n<|/ a tags=algorithm,php |>\n<| a tags=algorithm,php dscore=1 |>\n\
    Here is my version using recursion. I'm sure there is a more elegant way to do\
    \ it, but it works and it's easy to understand.\n<code>\n<?php", "  $correct =\
    \ 0;\n  \n  foreach ($game as $i => $score) {\n    if ($guess == $score) {\n \
    \     $correct++;\n    }\n  }\n  \n  return array_map(function($v) use($correct)\
    \ {\n    if ($v == $correct) {\n      return 0;\n    } else {\n      return abs($v\
    \ - $correct);\n    }\n  }, $guess);\n}\n", "    $results = [];\n\n    $gameLen\
    \ = count($game);\n    $guessLen = count($guess);\n    $i = 0;\n    $j = 0;\n\
    \    $k = 0;\n\n    while ($i < $gameLen && $j < $guessLen) {\n        if ($game[$i]\
    \ == $guess[$j]) {\n            $i++;\n            $j++;\n            $results[$k]\
    \ = 0;\n        }\n        elseif ($game[$i] < $guess[$j]) {\n            $i++;\n\
    \            $k++;\n        }\n        elseif ($game[$i] > $guess[$j]) {\n   \
    \         $j++;\n            $k++;\n        }\n    }\n\n    if ($i == $gameLen)\
    \ {\n        $results[$k] = $i - $k;\n    }\n\n    if ($j == $guessLen) {\n  \
    \      $results[$k] = abs($guess[$j] - $game[$i]);\n    }\n\n    return $results;\n\
    }\n", "    $score = 0;\n    $total = 0;\n\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $total += $game[$i];\n        if ($game[$i] == $guess[$i])\
    \ {\n            $score += 1;\n        }\n    }\n\n    if ($total == 0) {\n  \
    \      $guessed = 0;\n    } else {\n        $guessed = $total - $score;\n    }\n\
    \n    return array($score, $guessed);\n}\n\n$game = array(\n    1,2,3,4,5,\n \
    \   0,5,0,0,0,\n    4,4,1,0,0,\n    8,7,6,5,4,\n    3,5,8,9,2,\n    2,9,6,4,3,\n\
    \    6,5,4,3,2,\n    3,4,9,7,8,\n    7,6,5,4,3,\n    2,9,6,4,3,\n    8,7,6,5,4,\n\
    \    3,5,8,9,2,\n    6,5,4,3,2,\n    3,4,9,7,8,\n    7,6,5,4,3,\n    2,9,6,4,3,\n\
    \    8,7,6,5,4,\n    3,5,8,9,2,\n    6,5,4,3,2,\n    3,4,9,7,8,\n    7,6,5,4,3,\n\
    \    2,9,6,4,3,\n    8,7,6,5,4,\n    3,5,8,9,2,\n    6,5,4,3,2,\n    3,4,9,7,8\n\
    );\n\n$guesses = array(\n    1,1,1,\n    2,2,2,\n    3,3,3,\n    4,4,4,\n    5,5,5,\n\
    \    6,6,6,\n    7,7,7,\n    8,8,8\n);\n\n$result = compare($game, $guesses);\n\
    var_dump($result);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI actually don't think\
    \ the original question is quite asking for the average of the scores, but rather\
    \ that the difference between the scores is the absolute difference between the\
    \ guesses.\n<|/ c |>\n<| c |>\nYeah I figured that out and edited my answer. I\
    \ guess that was my point at least.\n<|/ c |>\n<| a dscore=0 |>\nI believe this\
    \ to be the correct answer:\n<code>", "    $result = array();\n    $result[$guess]\
    \ = abs($game[$guess] - $guess);\n    \n    for ($i = 0; $i < count($guess); $i++)\
    \ {\n        $temp = $guess;\n        $guess[$i] -= $game[$temp];\n        $temp\
    \ = $game;\n        $game[$i] -= $guess[$i];\n        $result[$temp] = abs($temp[$i]\
    \ - $game[$temp]);\n    }\n    return $result;\n}\n", "    $score = 0;\n    $guesses\
    \ = $guess;\n    $total = 0;\n    foreach ($game as $key => $value) {\n      \
    \  foreach ($guesses as $key2 => $value2) {\n            $total += abs($value-$value2);\n\
    \        }\n        if ($total == 0) {\n            $total = 1;\n        }\n \
    \       if ($value == $value2) {\n            $score++;\n        } else {\n  \
    \          $score--;\n        }\n        $guesses[$key] = $value;\n    }\n   \
    \ return $score;\n}\n\n$game = [1,2,3,4,5,1];\n$guess = [1,2,3,4,2,-2];\necho\
    \ compare($game, $guess); \n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nYou just\
    \ saved my life, Thanks for the help\n<|/ c |>\n<| a |>\nHere is an answer that\
    \ works in PHP 7. Although a bit sloppy as it doesn't check for duplicate values\
    \ and it assumes the $game array is always bigger than the number of $guesses\
    \ arrays (which it should).\n<code>\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1,\
    \ 2, 3, 4, 2, -2];\n\n$scores = [];\n\nfor($i = 0; $i < count($game); $i++){\n\
    \    foreach($guess as $key => $val){\n        if($val == $game[$i]){\n      \
    \      $scores[$key] = $scores[$key] + abs($val - $game[$i]);\n            break;\n\
    \        }\n    }\n}\n\nprint_r($scores);\n</code>\n<|/ a dscore=2 tags=php,arrays\
    \ |>\n<| a dscore=2 |>\nHere's a PHP 7 version (works with duplicate values in\
    \ the $guess array):\n<code>\n<?php", "  foreach($game as $game_index => $game_value){\n\
    \    $guessed_score = array_search($game_value, $guess);\n    $correct_guess =\
    \ ($game_index == $guessed_score) ? 1 : 0;\n    \n    $results[$game_index] =\
    \ abs($game_value-$guessed_score);\n    $results[$guessed_score] = abs($guessed_score-$game_value);\n\
    \  }\n  return $results;\n}", "    $correct = false;\n    $result = array();\n\
    \    for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $correct = true;\n        }\n        $result[] = $game[$i] -\
    \ $guess[$i];\n    }\n    return $correct ? $result : abs($result[0]);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis was my first thought also, however I do not believe this\
    \ would work for the problem. The OP is looking for a solution to compare two\
    \ arrays, not check if two elements match for equality.\n<|/ c |>\n<| c |>\n:\
    \ I see your point. Let me see if I can reword the question.\n<|/ c |>\n<| c |>\n\
    I believe the OP's question is better reworded. I've also updated my answer.\n\
    <|/ c |>\n<| c |>\n: I think we both realise what he's trying to do, but I believe\
    \ he's only provided two examples as an example of the data he might have and\
    \ that he doesn't have any control over it. I'm not saying your code isn't correct,\
    \ I'm just saying I think it's too confusing to read.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\nI think I understand what you're looking for. Here's my attempt at it.\n\
    <code>\n<?php\n", "    // sort both by their scores\n    $game = array_flip($game);\n\
    \    $guess = array_flip($guess);\n    \n    // compare each element and add to\
    \ $result\n    $result = [];\n    foreach($game as $key => $score) {\n       \
    \ foreach($guess as $key2 => $score2) {\n            $result[] = (abs($score -\
    \ $score2));\n        }\n    }\n    \n    return $result;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nYour code is returning incorrect result for me. compare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\
    \ gives => [0,0,0,0,3,3] where it should return [0,0,0,0,3,3]\n<|/ c |>\n<| c\
    \ |>\n`compare([0,5,0,0,0,4],[4,1,1,0,0,-2])` gives => `[4,4,1,0,0,6]` where it\
    \ should return `[4,4,1,0,0,6]`\n<|/ c |>\n<| c |>\nAh I see what you mean. You\
    \ would have to flip the `scores` before comparing them and then flip them back\
    \ in the end. I'll update my answer soon.\n<|/ c |>\n<| c |>\nOh now I get it.\
    \ Sorry about that, I was looking at your output as though you were comparing\
    \ the arrays for equality. I've updated my answer to reflect that.\n<|/ c |>\n\
    <| c |>\nI updated my answer. Sorry about that.\n<|/ c |>\n<| a |>\nThis would\
    \ give you a hint on how to solve this problem.\n<code>\n$game = [\n    0 => 1,\n\
    \    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 1,\n    6 => 2,\n\
    \    7 => 3,\n    8 => 4,\n    9 => 5,\n];\n\n$guess = [\n    0 => 1,\n    1 =>\
    \ 3,\n    2 => 3,\n    3 => 5,\n    4 => 1,\n    5 => 1,\n    6 => 4,\n    7 =>\
    \ 2,\n    8 => 1,\n    9 => 2,\n];\n", "    for($i = 0; $i < count($guess); $i++)\
    \ {\n        $game[$i] += $guess[$i];\n    }\n    for($i = 0; $i < count($guess);\
    \ $i++) {\n        $game[$i] -= $guess[$i];\n    }\n    return $game;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks. But how do I compare multiple guesses?\n<|/ c |>\n\
    <| c |>\nOh wow, I didn't realize my answer wasn't really an answer to your question.\
    \ I will leave it here in case it is useful for someone else, but then I'll remove\
    \ it.\n<|/ c |>\n<| c |>\nI've edited my answer with an example of a function\
    \ comparing multiple guesses.\n<|/ c |>\n<| c |>\nSorry, I'm a beginner in programming,\
    \ so I'm having trouble with your code, could you please help me understand how\
    \ it works? Thanks!\n<|/ c |>\n<| c |>\nThe first for loop adds together the values\
    \ of the arrays. In the second for loop subtract the values. The result of the\
    \ subtraction will be the difference between the correct guess and the actual\
    \ score.\n<|/ c |>\n<| a |>\nI see two problems with this code.  First, I think\
    \ you need a nested for loop to compare each of the guesses.  For instance:\n\
    <code>\nfor($i = 0; $i < count($guess); $i++) {\n    for($j = 0; j < count($game);\
    \ $j++) {\n        if($game[$i] == $guess[$i]) {\n             $correct++;\n \
    \       }\n    }\n}\n</code>\nSecond, you should store each possible result of\
    \ the comparison.  So for example, if a user guesses \"cat\" and the actual answer\
    \ was \"caterpillar\", then your $correct variable will equal 5.  You need to\
    \ store the guess and result combinations in some sort of array as well.\n<|/\
    \ a tags=arrays,php dscore=1 |>\n<| c |>\nThanks! I didn't realize how inefficient\
    \ my answer was, I guess I was really hoping for some help on that :)\n<|/ c |>\n\
    <| a dscore=1 |>\nThe answer by Michael Coker shows you how to compare a single\
    \ guess. I assume that you would like to compare multiple guesses to a single\
    \ game of guessing. You can do this with nested for loops.\n<code>\n<?php", " \
    \   $score = array();\n    $count = count($game);\n    $max = $count - 1;\n  \
    \  foreach($guess as $k => $v) {\n        if($k >= 0 && $k < $max) {\n       \
    \     $score[$k] = abs($game[$k] - $v);\n        } else {\n            $score[$k]\
    \ = 0;\n        }\n    }\n    return $score;\n}\n", "    //Your code here\n\n\
    \    $score = array_sum($game);\n    $guess = array_sum($guess);\n    $max = max(count($game),\
    \ count($guess));\n    $min = 0;\n    foreach ($game as $key => $value) {\n  \
    \      if ($game[$key] != $guess[$key]) {\n            $diff += abs($guess[$key]\
    \ - $value);\n            $min = $key;\n        }\n    }\n    return array_fill(0,\
    \ $max, $diff);\n}\n\nvar_dump(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nvar_dump(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));\n\
    var_dump(compare([1,2],[5,4]));\n\n/*\n * Bonus question: Can you make your compare\
    \ function as efficient as possible?\n * Write a function that takes two arrays\
    \ of numbers and compares them for equality in O(n) time.\n * Your code should\
    \ work for any number of elements, not just two.\n */\n", "\t$maxScore = -1;\n\
    \t$maxScoreIndex = -1;\n\n\tforeach ($game as $key => $value) {\n\t\t$score =\
    \ $game[$key];\n\t\tif ($score > $maxScore) {\n\t\t\t$maxScore = $score;\n\t\t\
    \t$maxScoreIndex = $key;\n\t\t}\n\t}\n\n\t$correct = 0;\n\tforeach ($guess as\
    \ $key => $value) {\n\t\tif ($game[$key] == $value) {\n\t\t\t$correct++;\n\t\t\
    }\n\t}\n\n\treturn [abs($guess - $maxScore), $correct];\n}", "    $result = [];\n\
    \    for ($i = 0, $len = count($game); $i < $len; ++$i) {\n        $result[$i]\
    \ = abs($guess[$i] - $game[$i]);\n    }\n    return $result;\n}\n", "  $score\
    \ = 0;\n  $count = 0;\n  $len = count($game);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $guess[$i] = $game[$i];\n    if ($guess[$i] > $score) {\n      $score\
    \ = $guess[$i];\n    }\n    if ($guess[$i] == $score) {\n      $count++;\n   \
    \ }\n  }\n  $guess[$len] = 0;\n  return $guess;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    The only issue I have with this is that the score and count variables get initialized\
    \ before the for loop and so they will get overwritten before they are incremented.\
    \ That could be fixed by moving the initialization of those variables to the beginning\
    \ of the function but I am curious as to whether there is a better way?\n<|/ c\
    \ |>\n<| c |>\nI added an explanation about that and some code improvements\n\
    <|/ c |>\n<| c |>\nI made a small tweak to your code to make it even easier to\
    \ use with other functions. I left my previous answer as it is, in case you want\
    \ to see the original code before I changed it. http://ideone.com/qKZfYG\n<|/\
    \ c |>\n<| a dscore=2 |>\nI rewrote the code based on what I have learned about\
    \ javascript arrays. I removed the compare function and instead made use of the\
    \ javascript array sorting functions. I also removed a large number of code blocks\
    \ to make it easier to follow. Hopefully it helps.\n<code>", "    $guesses = array_map('intval',\
    \ array_flip($guess));\n    $guess = array_fill(0, count($guesses), $game);\n\
    \    $diff = array_fill(0, count($guesses), 0);\n    foreach ($guesses as $i =>\
    \ $k) {\n        $guess[$i] += $game[$k];\n        $diff[$i] -= abs($guess[$i]\
    \ - $game[$k]);\n    }\n    return $diff;\n}\n</code>\n<|/ a |>\n<| c |>\nIt's\
    \ not that simple. Your solution checks whether a score is correct or not, but\
    \ also which score is correct or wrong. I need to check whether a score is correct\
    \ or wrong.\n<|/ c |>\n<| c |>\n- I misread your original question. See the edit.\
    \ Now it will work.\n<|/ c |>\n<| c |>\nThanks for your answer, but the solution\
    \ still doesn't work. I can still get 2 wrong scores if the guess is wrong.\n\
    <|/ c |>\n<| c |>\n- See my edit. Now it works for some of your test cases.\n\
    <|/ c |>\n<| c |>\nThanks for your time! However, your solution still doesn't\
    \ work. I think you forgot to put it in an array. After your edits, I got it to\
    \ work on the given example. But when I try it on some other test cases, it still\
    \ doesn't work. I think the reason is that the \"result\" is a string that can\
    \ have 1 of the characters \"NW\", \"NE\", \"W\", \"SW\" or \"SE\". What do you\
    \ think?\n<|/ c |>\n<| a dscore=0 |>\nYou can try this:\n<code>\n<?php\n", " \
    \   $result = [];\n    for ($i = 0; $i < count($guess); $i++) {\n        $result[$i]\
    \ = abs($guess[$i] - $game[$i]);\n    }\n\n    return $result;\n}", "\t// write\
    \ your code here\n\n\t$guess = array_flip($guess);\n\t$guess = array_sum($guess);\n\
    \t$game = array_flip($game);\n\t$game = array_sum($game);\n\t$result = 0;\n\t\
    $guess = abs($guess);\n\t$game = abs($game);\n\t\n\tforeach ($guess as $key =>\
    \ $value) {\n\t\tif($value == 0){\n\t\t\t$result = 0;\n\t\t}else{\n\t\t\t$result\
    \ +=  abs($guess - $game);\n\t\t}\n\t}\n\n\treturn $result;\n}\n", "    $numOfMatches\
    \ = count($game);\n    $numOfGuesses = count($guess);\n    $results = [];\n\n\
    \    for($i = 0; $i < $numOfGuesses; $i++){\n        // find the closest match\n\
    \        $index = $i + 1;\n        while ($index < $numOfMatches && abs($game[$index]-$guess[$index])\
    \ < abs($game[$index]-$guess[$index-1])) {\n            $index++;\n        }\n\
    \n        // if there is a match correct\n        if($index == $numOfMatches){\n\
    \            $results[$i] = abs($game[$i]-$guess[$i]);\n        }\n        //\
    \ if there is no match correct\n        else{\n            $results[$i] = abs($game[$index]-$guess[$index])\
    \ - abs($game[$i]-$guess[$i]);\n        }\n    }\n    return $results;\n}\n",
  "    $result = [];\n    foreach ($guess as $key => $value) {\n        $result[]\
    \ = $key < 0 ?\n            abs($game[$key] - $value) :\n            abs($value\
    \ - $game[$key]);\n    }\n    return $result;\n}\n", "    $score = [];\n    $guesses\
    \ = [];\n\n    for ($i = 0; $i < count($game); $i++) {\n        $score[] = $game[$i];\n\
    \        $guesses[] = $guess[$i];\n    }\n\n    $guessesCounter = count($guesses);\n\
    \    $scoreCounter = count($score);\n\n    $diffCounter = 0;\n\n    for ($i =\
    \ 0; $i < $guessesCounter; $i++) {\n        if ($score[$i] == $guess[$i]) {\n\
    \            $diffCounter++;\n        }\n    }\n\n    $score[$guessesCounter]\
    \ = 0;\n    $diff[] = $diffCounter;\n\n    for ($i = 0; $i < $scoreCounter; $i++)\
    \ {\n        if ($diff[$i] == 0) {\n            if ($guess[$i] == $score[$i])\
    \ {\n                $score[$i] = 0;\n            } else {\n                $score[$i]\
    \ = abs($guess[$i] - $score[$i]);\n            }\n        } else {\n         \
    \   $score[$i] += $diff[$i];\n        }\n    }\n\n    return $score;\n}\n", " \
    \   $result = array();\n    foreach ($game as $key => $value) {\n        if ($guess\
    \ === $value) {\n            $result[$key] = 0;\n        } else {\n          \
    \  $result[$key] = abs($guess - $value);\n        }\n    }\n    return $result;\n\
    }\n\n$game = array(\n    0, 1, 2, 3, 4, 5, 6\n);\n$guess = array(\n    0, 5, 0,\
    \ 0, 0, 4, 2\n);\n$result = compare($game, $guess);\n\nprint_r($result);\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| c |>\nWhy have you added a `print_r` at the end?\n\
    <|/ c |>\n<| c |>\nI added it for testing. The output will be like this: `Array\
    \ ( [0] => 0 [1] => 0 [2] => 0 [3] => 0 [4] => 4 [5] => 4 [6] => 6 )`.\n<|/ c\
    \ |>\n<| c |>\nYes, but this array is still missing `7` as the second array would\
    \ be. I think you meant `$game = array(\n    0, 1, 2, 3, 4, 5, 6, 7\n);`\n<|/\
    \ c |>\n<| c |>\nYou are right, I didn't notice the missing element. I edited\
    \ my answer.\n<|/ c |>\n<| c |>\nThis is great - I like the math! I'll go through\
    \ it and try to understand it. I'm surprised this isn't the top answer (I upvoted\
    \ it already)\n<|/ c |>\n<| a |>\nThis is in Java, though it should be very easy\
    \ to convert to PHP:\n<code>\npublic static int[] guessCompare(int[] game, int\
    \ guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i <\
    \ result.length; i++) {\n        if (guess == game[i]) {\n            result[i]\
    \ = 0;\n        } else {\n            result[i] = Math.abs(guess - game[i]);\n\
    \        }\n    }\n    return result;\n}\n</code>\nThe result is then stored in\
    \ an array. \n<code>\nint[] result = guessCompare(new int[] {1, 2, 3, 4, 5, 6},\
    \ new int[] {0, 5, 0, 0, 0, 4, 2});\n</code>\n<|/ a tags=php,algorithm dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php ", "    if (count($game) < count($guess))\
    \ {\n        return $guess;\n    }\n    $diffs = [];\n    for ($i = 0; $i < count($guess);\
    \ $i++) {\n        $diffs[$i] = abs($guess[$i] - $game[$i]);\n    }\n    return\
    \ $diffs;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI don't quite understand what\
    \ your code is doing. Can you clarify that? I'm pretty sure I can modify it to\
    \ suit my needs. Thanks :)\n<|/ c |>\n<| c |>\nI just updated the answer to address\
    \ your comment. Hopefully this is clear enough!\n<|/ c |>\n<| c |>\nOk, so the\
    \ function `compare` should return an array containing the differences between\
    \ the guess and the results from the game. It works perfectly when I use it. But\
    \ I do have one problem. My guess array contains strings which the game does not\
    \ recognize. For example, `['one', 'two', 'three', 'four', 'five', 'six']` which\
    \ should be recognized as a number by the game (because the game recognizes it),\
    \ but my guess array contains it like this `['one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven']`. When I try to run the function, it just returns the same array\
    \ as my guess array. I can't seem to figure out how to tell the function to recognize\
    \ 'six' and 'seven' as numbers.\n<|/ c |>\n<| c |>\nThat's what I was aiming at.\
    \ You will need some sort of data cleaning, as your `compare` function is currently\
    \ designed to work with single digits. If those numbers happen to come in as strings\
    \ you can either convert them back to numbers, or remove them from the input before\
    \ calling `compare`. For example: `$guess = array_diff($guess, ['seven']);` before\
    \ calling `compare`.\n<|/ c |>\n<| c |>\nOk, now I see what you're talking about!\
    \ I tried something like that and it works perfectly. Thank you very much!\n<|/\
    \ c |>\n<| a |>\nI did this in javascript but it's pretty much the same.\n<code>",
  "  // TODO: You will need to store the winning team's team ID\n  // as a constant\
    \ somewhere in your solution.\n  // If it is not a constant, you'll need to store\
    \ this ID\n  // in a variable to reference the team ID in the comparisons.\n \
    \ // Store the winning team as the \"winning_team\" value.\n  // Reminder - you\
    \ can use a ternary operator for this.\n  // If you do not know how to do this,\
    \ search for an example online.\n  $winning_team = $game[0] > $game[1] ? 1 : 0;\n\
    \n  // TODO: You will need to store the winning team's team ID\n  // as a constant\
    \ somewhere in your solution.\n  // If it is not a constant, you'll need to store\
    \ this ID\n  // in a variable to reference the team ID in the comparisons.\n \
    \ // Store the winning team as the \"winning_team\" value.\n  // Reminder - you\
    \ can use a ternary operator for this.\n  // If you do not know how to do this,\
    \ search for an example online.\n  $winning_team = $game[0] > $game[1] ? 1 : 0;\n\
    \n  // TODO: You will need to store the winning team's team ID\n  // as a constant\
    \ somewhere in your solution.\n  // If it is not a constant, you'll need to store\
    \ this ID\n  // in a variable to reference the team ID in the comparisons.\n \
    \ // Store the winning team as the \"winning_team\" value.\n  // Reminder - you\
    \ can use a ternary operator for this.\n  // If you do not know how to do this,\
    \ search for an example online.\n  $winning_team = $game[0] > $game[1] ? 1 : 0;\n\
    \n  // TODO: You will need to store the winning team's team ID\n  // as a constant\
    \ somewhere in your solution.\n  // If it is not a constant, you'll need to store\
    \ this ID\n  // in a variable to reference the team ID in the comparisons.\n \
    \ // Store the winning team as the \"winning_team\" value.\n  // Reminder - you\
    \ can use a ternary operator for this.\n  // If you do not know how to do this,\
    \ search for an example online.\n  $winning_team = $game[0] > $game[1] ? 1 : 0;\n\
    \n  // TODO: You will need to store the winning team's team ID\n  // as a constant\
    \ somewhere in your solution.\n  // If it is not a constant, you'll need to store\
    \ this ID\n  // in a variable to reference the team ID in the comparisons.\n \
    \ // Store the winning team as the \"winning_team\" value.\n  // Reminder - you\
    \ can use a ternary operator for this.\n  // If you do not know how to do this,\
    \ search for an example online.\n  $winning_team = $game[0] > $game[1] ? 1 : 0;\n\
    \n  // TODO: You will need to store the winning team's team ID\n  // as a constant\
    \ somewhere in your solution.\n  // If it is not a constant, you'll ", "    \n\
    \    $result = array();\n    \n    // Your code here\n    \n    return $result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`array_map` returns an array of the same\
    \ length as the input array. `array_map` isn't used to find the difference between\
    \ the array values.\n<|/ c |>\n<| c |>\nI'm sorry I misunderstood the question,\
    \ I've deleted my incorrect answer\n<|/ c |>\n<| a dscore=2 tags=arrays,php,diff\
    \ |>\nI feel like there should be a more elegant way to do this but this works:\n\
    <code>\n<?php\n\n$array1 = array(1,2,3,4,5,1,7,8,9);\n$array2 = array(1,2,3,4,5,1,7,8,9,11);\n\
    \n$diff = [];\n\nforeach ($array1 as $key => $value) {\n    if (array_key_exists($key,\
    \ $array2)) {\n        $diff[] = $value - $array2[$key];\n    }\n}\n\nprint_r($diff);\n",
  "    $i = 0;\n    $j = 0;\n    for($i = 0; $i < count($game); $i++) {\n        for($j\
    \ = 0; $j < count($guess); $j++) {\n            if($game[$i] == $guess[$j]) {\n\
    \                $score[$i] = 0;\n            } else {\n                $score[$i]\
    \ = abs($guess[$j] - $game[$i]);\n            }\n        }\n    }\n    return\
    \ $score;\n}", "    // your solution here\n}\n", "  // your code here\n  if(count($game)\
    \ != count($guess)) {\n    return null;\n  }\n  $result = [];\n  for($i = 0; $i\
    \ < count($game); $i++) {\n    $result[$i] = 0;\n  }\n  for($i = 0; $i < count($guess);\
    \ $i++) {\n    if($game[$i] != $guess[$i]) {\n      $result[$i] = abs($game[$i]\
    \ - $guess[$i]);\n    } else {\n      $result[$i] = 0;\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI really appreciate you taking the time\
    \ to review my problem and help me. I will review this and see if I can make it\
    \ work.\n<|/ c |>\n<| c |>\nOkay, I have been working on this and I am still having\
    \ trouble. I am pretty sure I am close now, but I just have no idea what I am\
    \ doing wrong.\n<|/ c |>\n<| a |>\nThe code in the other answer works well, but\
    \ I wanted to provide an alternate solution just to show that there's an alternative\
    \ for what you're asking.  \n<code>", "    // Write your code here\n}\n\n</cell>\n\
    <text>\nPart 2: Game of Guess\nYou are playing the game of \"Guessing Game\" on\
    \ a two-player game of \"Guessing Game\".\nThe computer chooses a number from\
    \ 1 to 100, and you try to guess the number. \nIt is not uncommon for the computer\
    \ to make several attempts and guess \nthe same number over and over.\nWrite a\
    \ function that guesses the number that the computer chose.\nThe function should\
    \ take two arguments, game (an array) and guess (an array).\nIt should return\
    \ an array of length 5 where each element is the difference between \nthe guess\
    \ and the computer's guess.\nIf an element is 0, then the player has correctly\
    \ guessed the number \nand should return that number. Otherwise, \nthe player\
    \ has not correctly guessed the number and should return the absolute value of\
    \ the element \nfrom that position onwards.\n\nexample:\nguess([[1,2,3,4,5,1],[1,2,3,4,2,-2]],[[5,4,3,4,5,1],[5,4,3,4,2,-2]])\
    \ -> [4,6,3,5,1,-1]\nguess([[0,5,0,0,0,4],[4,1,1,0,0,-2]],[[4,4,1,0,0,6],[4,1,1,0,0,-2]])\
    \ -> [4,4,1,0,0,6]\nguess([[0,0,0,0,3,3],[0,0,0,0,3,3]],[[3,3,4,4,3,3],[3,3,4,4,3,3]])\
    \ -> [3,3,4,4,3,3]\nguess([[1,5,0,-3,6,0],[1,1,0,-1,3,-1]],[[1,2,-4,-5,-6,1],[1,2,-4,-5,-6,1]])\
    \ -> [6,2,-4,-5,-6,1]\nguess([[0,0,0,0,3,3],[0,0,0,0,3,3]],[[4,3,3,0,0,0],[4,3,3,0,0,0]])\
    \ -> [0,4,3,3,0,0]\nWrite your code in Javascript, or Python or Ruby, or Java\
    \ or any other language. \nI prefer Java, but you do not need to know the language\
    \ to implement this\nparticular problem.\n\nHint: You will need to create two\
    \ loops, one that goes through each of the four arrays, \nand another that runs\
    \ through the elements of each array (one by one). This way you can \ncompare\
    \ each value with the corresponding element of the other array.\nYou might need\
    \ to use an if-statement to determine whether the number has been guessed \ncorrectly\
    \ or not, and return the correct array. \nYou can think of breaking the problem\
    \ into two smaller parts:\nPart 1: Game of Guess\nWrite a function that guesses\
    \ the number that the computer chose. \nThe function should take two arguments,\
    \ game (an array) and guess (an array).\nIt should return an array of length 5 ",
  "    // Code goes here\n    $game = array_reverse($game);\n    $guess = array_reverse($guess);\n\
    \    $result = 0;\n    for($i=0;$i<count($game);$i++){\n        if($game[$i]==$guess[$i]){\n\
    \            $result++;\n        }\n    }\n    $result = abs($result-count($game));\n\
    \    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer, but\
    \ the code I posted works differently, it compares 2 arrays and it returns an\
    \ array of correct guesses. I am looking for a way to compare two arrays and return\
    \ an array of correct answers.\n<|/ c |>\n<| c |>\nI am not sure that i get your\
    \ problem, what do you mean by correct answers? If you have 2 arrays and you want\
    \ to compare them, you should compare the elements and sum them, and after that\
    \ you can subtract the sums from the length of the array\n<|/ c |>\n<| c |>\n\
    It was my mistake, I am sorry. I am looking for a way to compare two arrays and\
    \ return an array of the same length denoting how far off each guess was. If they\
    \ have guessed correctly, the value is 0, and if not, the value is the absolute\
    \ difference between the guess and the score.\n<|/ c |>\n<| c |>\nThanks for the\
    \ edit. However the code doesn't work correctly. It compares 2 arrays and it returns\
    \ an array of correct guesses. I am looking for a way to compare two arrays and\
    \ return an array of correct answers.\n<|/ c |>\n<| c |>\nOk I have edited the\
    \ answer, I believe that this should work now\n<|/ c |>\n<| a |>\n<code>\n<?php\n",
  "    foreach ($game as $i => $x) {\n        $diff = abs($game[$i] - $guess[$i]);\n\
    \        if ($diff != 0) return $diff;\n    }\n    return 0;\n}", "    $correct_guess\
    \ = false; \n    foreach($game as $index=>$val){\n        if($val == $guess[$index]){\n\
    \            $correct_guess = true;\n        }\n    }\n    if($correct_guess){\n\
    \        return array(0,0,0,0);\n    }\n    foreach($guess as $index=>$val){\n\
    \        if($val != $game[$index]){\n            return abs($val - $game[$index]);\n\
    \        }\n    }\n    return array(0, 0, 0, 0);\n}\n", "    $result = array();\n\
    \    // loop through the guesses\n    for($i = 0; $i < count($guess); $i++) {\n\
    \        // if the guessed score is zero or less\n        if($guess[$i] < 0 ||\
    \ $guess[$i] > $game[$i]) {\n            $result[] = $guess[$i] - $game[$i];\n\
    \            // if the guess is correct\n        } else {\n            $result[]\
    \ = 0;\n        }\n    }\n    return $result;\n}\n</code>\nThe above code uses\
    \ the return value of array_diff to determine how far off each guess was. Of course\
    \ the original code would have worked just as well had it been written as follows:\n\
    <code>\n<?php", "    \n}\n", "    if (count($game) !== count($guess)) {\n    \
    \    return [];\n    }\n\n    $guessed_scores = array();\n    $wrong_guesses =\
    \ [];\n    foreach ($game as $index => $score) {\n        if ($score !== $guess[$index])\
    \ {\n            $wrong_guesses[] = $score;\n        } else {\n            $guessed_scores[]\
    \ = 0;\n        }\n    }\n\n    return $wrong_guesses;\n}\n\n$results = [\n  \
    \  array(\n        array(1,2,3,4,5,1),\n        array(1,2,3,4,2,-2)\n    ),\n\
    \    array(\n        array(0,5,0,0,0,4),\n        array(4,1,1,0,0,-2)\n    ),\n\
    ];\n\nvar_dump(compare($results[0], compare($results[1])));\nvar_dump(compare($results[1],\
    \ compare($results[0])));\n</code>\nThe output obviously is correct and as expected.\
    \ But I feel like there might be a more elegant solution than this one. But maybe\
    \ this one is readable enough and you just want to make an effort to make your\
    \ code more readable.\n<|/ a tags=php,arrays dscore=1 |>\n<| c |>\nThank you!\
    \ I'll definitely try to implement this. I completely forgot about array_diff!\
    \ This seems like the logical way to go about it.\n<|/ c |>\n<| c |>\nI really\
    \ like your solution, although it doesn't quite work as intended. When two matches\
    \ are equal, I get the wrong score twice (instead of once as I would expect).\
    \ I think this is because of the `foreach` loops. Try running your example and\
    \ you'll see what I mean.\n<|/ c |>\n<| c |>\nOk, now I see what you mean. You\
    \ should probably do `array_diff` first and then run your `compare` function.\n\
    <|/ c |>\n<| c |>\nI think we were thinking about it at the same time. I added\
    \ an explanation at the end of the answer.\n<|/ c |>\n<| a |>\nI decided to take\
    \ Kolink's answer slightly further and use array_diff to see which scores need\
    \ to be returned as 0s.\n<code>\n<?php", "    \n    // your code goes here\n \
    \   // the correct output should be like this [0,0,0,0,3,3] but your code give\
    \ [4,4,1,0,0,6]\n    $output = [0,0,0,0,3,3];\n    $game = array_reverse($game);\n\
    \    $guess = array_reverse($guess);\n    \n    foreach ($game as $key=>$val){\n\
    \        if($val > $guess[$key]){\n            $output[$key] = 0;\n        }else{\n\
    \            $output[$key] = abs($val-$guess[$key]);\n        }\n    }\n    \n\
    \    return $output;\n}\n", "  // I used a foreach instead of a for loop because\
    \ the array size might be big\n  foreach ($game as $i => $score) {\n    foreach\
    \ ($guess as $j => $guessScore) {\n      if ($guessScore == $score) {\n      \
    \  $game[$i] = 0;\n        $guess[$j] = 0;\n      } else {\n        $game[$i]\
    \ = abs($guessScore - $score);\n      }\n    }\n  }\n  return $game;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nthank you, but this is too complicated\n<|/\
    \ c |>\n<| c |>\nThe code I have written is about as simple as it gets. This is\
    \ called \"reinventing the wheel\", and it's also the best way to learn when starting\
    \ out in PHP. I think it's pretty simple, I've added comments to the code so you\
    \ can see what it's doing. Feel free to ask me any questions you might have\n\
    <|/ c |>\n<| c |>\nThank you, that helps me a lot.\n<|/ c |>\n<| a dscore=1 |>\n\
    I have created this solution without using any foreach loop since you said that\
    \ you have not learned foreach loop or any other loop statements, \n<code>", " \
    \ // Your code goes here!\n}\n", "    $game = array_flip($game);\n    $guess =\
    \ array_flip($guess);\n    $diff = [];\n    foreach($guess as $k => $v) {\n  \
    \      $diff[$k] = abs($v - $game[$k]);\n    }\n    return $diff;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nYou beat me to it! But yes, I think the issue with the OP was\
    \ that the expected output should be `[0, 0, 0, 0, 3, 3]`, not `[4,4,1,0,0,6]`.\n\
    <|/ c |>\n<| c |>\nI see it now. I thought I had a working answer before I posted,\
    \ then I realized I didn't test the answer. Glad you caught it :)\n<|/ c |>\n\
    <| a dscore=0 |>\nI like to use array_intersect to find the common elements, and\
    \ then array_diff to find the differences:\n<code>", "    // first sort both arrays\
    \ so they are in alphabetical order\n    $game = sort_scores($game);\n    $guess\
    \ = sort_scores($guess);\n    // if the number of guesses is the same, then all\
    \ guesses must be right (they won)\n    if (count($guess) == count($game)) {\n\
    \        // return the array\n        return $guess;\n    }\n    // otherwise,\
    \ loop through the guesses and compare it to the scores\n    $guessed = array();\n\
    \    foreach ($guess as $guess) {\n        // if the guess is correct, subtract\
    \ it from the score\n        if ($game[$guess] == $guess) {\n            $game[$guess]\
    \ -= $guess;\n        }\n        // otherwise, add to the total and subtract from\
    \ the score\n        else {\n            $game[$guess] += $guess;\n          \
    \  $game[$guess] -= $guess;\n        }\n        // if the guess was correct for\
    \ that score, add it to a list of guesses\n        $guessed[$guess] = $guess;\n\
    \    }\n    // return the array\n    return $guessed;\n}\n", "    return array_map(function($game,$guess)\
    \ {\n        return abs($guess-$game);\n    },$game,$guess);\n}\n\n/**\n * Function:\
    \ compare\n * A simple function to compare two arrays of numbers. \n * \n * Parameters:\
    \ \n * $game: An array of numbers\n * $guess: An array of numbers\n * \n * Returns:\
    \ \n * An array of numbers denoting how far off each guess was. \n * \n * Explanation:\n\
    \ * Each array element represents how far off each guess was. \n * If the guess\
    \ was correct, the element value is zero, otherwise it's the\n * absolute value\
    \ of the difference between the guess and the score.\n * \n * \n */", "    $result\
    \ = [];\n    $correct = false;\n    for ($i = 0; $i < count($game); $i++) {\n\
    \        if ($game[$i] == $guess[$i]) continue;\n        if ($correct) {\n   \
    \         $result[$i] = 0;\n        } else {\n            $result[$i] = abs($guess[$i]\
    \ - $game[$i]);\n        }\n        $correct = true;\n    }\n    return $result;\n\
    }\n", "    $numGuesses = count($guess);\n    $result = array();\n    foreach ($game\
    \ as $key => $val) {\n        $result[$key] = 0;\n        for ($i = 0; $i < $numGuesses;\
    \ $i++) {\n            if ($guess == $game) {\n                $result[$key] =\
    \ 0;\n                break;\n            } elseif ($game[$key] == $guess[$i])\
    \ {\n                $result[$key] = abs($val - $guess[$i]);\n               \
    \ break;\n            } else {\n                $result[$key] = 0;\n         \
    \   }\n        }\n    }\n    return $result;\n}", "  $win = count($game) - count($guess);\n\
    \  foreach($game as $i => $score){\n    foreach($guess as $j => $value){\n   \
    \   $dif = $value - $game[$i];\n      if ($dif == 0 && $value > 0) {\n       \
    \ $win--;\n      } else if ($dif == 0 && $value < 0){\n        $win++;\n     \
    \ }\n    }\n  }\n  return $win;\n}\n", "    $game = $game.'|'.$guess;\n    $guesses\
    \ = explode('|', $game);\n    $score = array();\n    for($i = 0; $i < count($guesses);\
    \ $i++) {\n        if($guesses[$i] == $guess[$i]) {\n            $score[$i] =\
    \ 0;\n        } else {\n            $score[$i] = abs($guesses[$i] - $guess[$i]);\n\
    \        }\n    }\n    return $score;\n}\n\n$guesses = array(1,2,3,4,5,1,4,7,8);\n\
    $scores = array(1,2,3,4,5,1,2,-3,-3);\nprint_r(compare($guesses, $scores));",
  "    return array(count($game) - count($guess), $game, count($guess));\n}\n</cell>\n\
    <cell>\ndef compare(game, guess):\n    comps = compare(game, guess)\n    \n  \
    \  if (comps[0] == 0):\n        return 0\n    elif (comps[0] > 0):\n        return\
    \ abs(comps[1] - comps[0])\n    else:\n        return abs(comps[1] - comps[0])\
    \ + abs(comps[2] - comps[0])\n</cell>\n<cell>\ndef compare(game, guess):\n   \
    \ comps = compare(game, guess)\n    \n    if (comps[0] == 0):\n        return\
    \ 0\n    elif (comps[0] > 0):\n        return abs(comps[1] - comps[0])\n    else:\n\
    \        return abs(comps[1] - comps[0]) + abs(comps[2] - comps[0])\n</cell>\n\
    <cell>\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n\
    </cell>\n<text>\nWe now have all the pieces we need to solve the problem. Let's\
    \ write and run our compare() function by hand to see what it does.\n\n\n</text>\n\
    <cell>\ndef compare(game, guess):\n    comps = compare(game, guess)\n    \n  \
    \  if (comps[0] == 0):\n        return 0\n    elif (comps[0] > 0):\n        return\
    \ abs(comps[1] - comps[0])\n    else:\n        return abs(comps[1] - comps[0])\
    \ + abs(comps[2] - comps[0])\n</cell>\n<cell>\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    </cell>\n<cell>\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<text>\nHow does\
    \ the compare() function work? Let's look at the inner loop of the compare() function.\
    \ As you can see, it's pretty simple. It's just two nested loops that compare\
    \ each element from game to each element from guess. If the two elements are equal,\
    \ they count as equal. Otherwise, the compare() function will determine how many\
    \ times each element from guess is found in game, and return the absolute difference\
    \ between the two counts.\n\n\n</text>\n<text>\nLet's test this function!\n\n\n\
    </text>\n<cell>\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n</cell>\n<cell>\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n\
    </cell>\n<text>\nAs you can see, this function is just two loops nested together.\
    \ What if we want to compare two lists of strings?\n\n\n</text>\n<cell>\ngame\
    \ = ['cat', 'cat', 'dog', 'cat', 'dog', 'dog', 'cat', '", "    $score = $game;\n\
    \    $guess = abs($guess);\n    for ($i = 0; $i < count($game); $i++) {\n    \
    \    if ($game[$i] == $guess[$i]) {\n            $score[$i] = 0;\n        }\n\
    \        else {\n            $score[$i] = abs($game[$i] - $guess[$i]);\n     \
    \   }\n    }\n    return $score;\n}\n", "    $result = [];\n    $score_array =\
    \ [];\n    foreach($game as $i => $score) {\n        if($guess == $game[$i]) {\n\
    \            $result[$i] = $i;\n            $score_array[$i] = $score;\n     \
    \   } else {\n            $difference = abs($guess - $score);\n            if($difference\
    \ > 0) {\n                $result[$i] = $difference;\n                $score_array[$i]\
    \ = $score;\n            }\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis fails on: `compare([0,5,0,0,0,4],[4,1,1,0,0,-2])`,\
    \ returning `array(3, 4)`\n<|/ c |>\n<| a tags=arrays,math,php |>\n<code>\n<?php",
  "    $answer = array_map(function($a,$b) {return $a-$b; }, $game, $guess);\n   \
    \ return array_map(function($a) { return abs($a-$b); }, $guess);\n}\n", "\t\n\t\
    $results = array();\n\tforeach ($game as $k => $v) {\n\t\tif ($guess == $v) {\n\
    \t\t\t$results[$k] = 0;\n\t\t} else {\n\t\t\t$results[$k] = abs($guess - $v);\n\
    \t\t}\n\t}\n\treturn $results;\n}\n\n", "  $game = array_map(function($x) { return\
    \ abs($x - $x); }, $game);\n  $guess = array_map(function($x) { return abs($x\
    \ - $x); }, $guess);\n  $correct = array_fill(0, count($guess), 0);\n  $correct\
    \ = 0;\n  for ($i = 0; $i < count($guess); $i++) {\n    $correct[$i] = $game[$i]\
    \ - $guess[$i];\n  }\n  return $correct;\n}\n</code>\n<|/ a tags=php |>\n<| a\
    \ dscore=0 tags=php |>\nYou don't really need an array for the return value because\
    \ the function returns only the last element anyway.\n<code>\n<?php\n", "    $correct\
    \ = array();\n    $diff = array();\n    for($i = 0; $i < sizeof($game); $i++)\
    \ {\n        if($game[$i] == $guess[$i]) {\n            $correct[] = $i;\n   \
    \     } else {\n            $diff[] = abs($guess[$i] - $game[$i]);\n        }\n\
    \    }\n    return $correct;\n}\n", "    \n    $result = [];\n    foreach ($game\
    \ as $index => $score) {\n        \n        $diff = abs($guess - $score);\n  \
    \      if ($diff == 0) {\n            $result[$index] = 0;\n        }\n      \
    \  elseif ($diff > 0) {\n            $result[$index] = $diff;\n        }\n   \
    \     else {\n            $result[$index] = $diff;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nHi Michael, can you add an\
    \ explanation to your answer? This will help others understand why your code works,\
    \ as well as help you learn from the answer.\n<|/ c |>\n<| a dscore=1 tags=php\
    \ |>\n<code>\n<?php\n\n$a = [1,2,3,4,5,1];\n$b = [1,2,3,4,2,-2];\n\n$result =\
    \ array();\n\nforeach ($a as $key => $val) {\n    \n    $dif = abs($b[$key] -\
    \ $val);\n    $result[$key] = $dif < 0 ? $dif : abs($dif);\n}\n\nprint_r($result);\n\
    </code>\nhttps://3v4l.org/I5s4q\n<|/ a |>\n<| c |>\nHi PeeHaa, can you add an\
    \ explanation to your answer? This will help others understand why your code works,\
    \ as well as help you learn from the answer.\n<|/ c |>\n<| a dscore=1 |>\nHere\
    \ is another approach using array_map\n<code>\n$a = [1,2,3,4,5,1];\n$b = [1,2,3,4,2,-2];\n\
    \n$result = array_map(function($a, $b){\n    return abs($a - $b); \n}, $a, $b);\n\
    \nprint_r($result);\n</code>\n<|/ a tags=php |>\n<| c |>\nHi Vladimir, can you\
    \ add an explanation to your answer? This will help others understand why your\
    \ code works, as well as help you learn from the answer.\n<|/ c |>\n<| c |>\n\
    $a and $b are array variables so $a is variable of function and the $b value will\
    \ be pass from array a and b\n<|/ c |>\n<| c |>\narray_map is a function that\
    \ accepts as parameter an array and returns the value of a function applied to\
    \ each element of the array. So the value of a function will be passed to each\
    \ element of the array and returns a new array.\n<|/ c |>\n<| c |>\nHi Vladimir,\
    \ can you add an explanation to your answer? This will help others understand\
    \ why your code works, as well as help you learn from the answer.\n<|/ c |>\n\
    <| a dscore", "    // Your code here!\n    $results = [];\n    for ($i = 0; $i\
    \ < count($game); $i++) {\n        $results[$i] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $results;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThe solution\
    \ of is better as its not dependent on any external libraries\n<|/ c |>\n<| a\
    \ |>\nThe problem is in your last for loop where you do \n<code>\n$total[$i] +=\
    \ $temp[$i];\n</code>\nYou are adding all the values inside that loop and storing\
    \ them in the $total array, so the final result of the loop becomes the $total\
    \ array.\nWhat you want to do instead is assign the value of $temp[$i] to the\
    \ $total[$i] like this:\n<code>\n$total[$i] = $temp[$i];\n</code>\nAlso you need\
    \ to move your $total array initialization outside the for loop, so that it only\
    \ runs once.\n<|/ a tags=php dscore=0 |>\n<| a |>\nAs far as I understand your\
    \ question, you just want to compare the score of each element in the $game array\
    \ to the corresponding element in the $guess array. This can be done using array_map\
    \ with array_diff_assoc.\n<code>\n$game = [1,2,3,4,5,1];\n$guess = [1,2,3,4,2,-2];\n\
    \n$diff = array_map('absint',\n    array_diff_assoc(\n        array_map('absint',$game),\n\
    \        array_map('absint',$guess)\n    )\n);\n\nprint_r($diff);\n</code>\nOutput:\n\
    <code>\nArray\n(\n    [0] => 0\n    [1] => 4\n    [2] => 1\n    [3] => 0\n   \
    \ [4] => 3\n)\n</code>\nThis code first takes two arrays of integers and applies\
    \ absint to each element in the first array. Then it takes the difference between\
    \ the two arrays with array_diff_assoc, i.e. the keys of the arrays are the elements\
    \ of the first array and the values are the elements in the second array. Then\
    \ it applies absint to each value in the first array. That way, the difference\
    \ is returned as an array.\n<|/ a dscore=0 tags=php |>\n<| c |>\narray_diff_assoc\
    \ will do the trick but it will work only if both arrays have same count of elements,\
    \ if you have different count of elements in $game and $guess, the above solution\
    \ will fail\n<|/ c |>\n<| c |>\nI think you can handle this case by checking if\
    \ the count of elements in both arrays matches the count of elements in your new\
    \ array that you want to create. Then you can just assign the values to their\
    \ matching position", "    foreach ($game as $key => $value) {\n        if($guess\
    \ == $value)\n        {\n            $out = 0;\n        }\n        else\n    \
    \    {\n            $out = $guess - $value;\n        }\n    }\n    return $out;\n\
    }\n</code>\n<|/ a tags=php dscore=0 |>\n<| a |>\n<code>", "    $score = $game;\n\
    \    $guess = $guess;\n    $matches = $guess;\n    $result = array();\n    \n\
    \    // loop through the guesses\n    foreach ($guess as $key => $guess) {\n \
    \       // increment the score by 10\n        $score += 10;\n        \n      \
    \  // increment the matches by 1\n        $matches += 1;\n        \n        //\
    \ calculate how many places away the guess and score are\n        $places_diff\
    \ = $guess - $score;\n        \n        // compare the score and guess to determine\
    \ if correct guess\n        if ($score == $guess) {\n            // if they are\
    \ equal, we found a correct guess\n            $result[$key] = 0;\n        } else\
    \ {\n            // if they are not, the place difference is the difference\n\
    \            $result[$key] = abs($places_diff);\n        }\n    }\n    \n    return\
    \ $result;\n}\n<|/ file dstars=1 filename=lab9-problem-4.php |>\n<| c |>\nThank\
    \ you. I will give it a try.\n<|/ c |>\n<| c |>\nI got it working now and it is\
    \ definitely much more straightforward than the way I was going about it.\n<|/\
    \ c |>\n<| c |>\nGlad you got it working. Remember to accept the answer with the\
    \ check mark on the left. Happy coding!\n<|/ c |>\n<| c |>\nWhat a great explanation.\
    \ Thank you. :D\n<|/ c |>\n<| a dscore=0 |>\nI got it working now. Here is the\
    \ final code:\n<code>\n<?php", "    $scores = array();\n    foreach($game as $i\
    \ => $score)\n    {\n        if($guess == $score) \n            $scores[$i] =\
    \ 0;\n        else\n            $scores[$i] = abs($score - $guess[$i]);\n    }\n\
    \    return $scores;\n}\n", "   $result = array();\n   // your code here\n\n}",
  "    // TODO: Your code here\n    // Your code here\n    // Your code here\n   \
    \ // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // ", "    if (count($guess) != count($game)) {\n\
    \        exit(\"You can't guess wrong because there are more numbers than there\
    \ are games.\");\n    }\n    $answer = 0;\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $answer = max($answer, abs($game[$i] - $guess[$i]));\n    }\n\
    \    return $answer;\n}\n", "    $difference = array();\n    \n    for ($i = 0;\
    \ $i < count($guess); $i++) {\n        // if the guess is correct, compare it\
    \ to the result\n        if ($game[$i] == $guess[$i]) {\n            $difference[$i]\
    \ = 0;\n            // if the guess is not correct, find the difference from the\
    \ result\n        } else {\n            $difference[$i] = abs($guess[$i] - $game[$i]);\n\
    \        }\n    }\n    \n    return $difference;\n}", "    $results = [];\n  \
    \  for ($i=0; $i<count($game); $i++) {\n        $guess = abs($guess[$i] - $game[$i]);\n\
    \        if ($guess < 0)\n            $guess = 0;\n        else\n            $results[]\
    \ = $guess;\n    }\n    return $results;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis is really great and works well, thank you for the detailed explanation.\
    \ It still has some flaws, but it's definitely a good starting point.\n<|/ c |>\n\
    <| a dscore=1 |>\nThe question is a little vague so I'll do my best to give a\
    \ general answer. \nYou start off with a score for each of the array items. If\
    \ the score is greater than 0 then you know that there is a match. \nYou then\
    \ need to compare each guess to the scores in descending order. \n<code>\nfor($i=0;\
    \ $i<count($score); $i++){\n  for($j=$i+1; $j<count($score); $j++){\n    if($score[$i]\
    \ == $score[$j]){\n       return $score[$i]; // $score[$i] match with $score[$j]\n\
    \    }\n  }\n}\nreturn 0;\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis assumes\
    \ that the scores are in descending order. Perhaps they are in ascending order.\n\
    <|/ c |>\n<| c |>\nYes, but that's the whole point of the question. The asker\
    \ has an array with the scores and an array with the guesses. So if there is a\
    \ match then they both have some value. If they don't then there is no match\n\
    <|/ c |>\n<| c |>\nAgreed, although I think it's worth noting that they do have\
    \ some common sense assumptions.\n<|/ c |>\n<| c |>\nOkay, thanks for your responses.\
    \ I guess I was just looking for a more general solution since this is for a class\
    \ that I'm still working on and haven't learned enough about arrays yet. It seems\
    \ like the code you provided is perfect though!\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>", "  $result = array();\n  for ($i = 0; $i < count($guess); $i++)\
    \ {\n    if ($game[$i] == $guess[$i]) {\n      $result[$i] = 0;\n    } else {\n\
    \      $result[$i] = abs($guess[$i] - $game[$i]);\n    }\n  }\n  return $result;\n\
    }", "    // The array where we store the results in\n    $result = [];\n    //\
    \ The index of the array where we store the score of each game\n    $index = 0;\n\
    \    // The index of the array where we store the guess of each game\n    $guessIndex\
    \ = 0;\n    // The index of the array where we store the total score for each\
    \ game\n    $totalScoreIndex = 0;\n\n    // Loop the number of games\n    for\
    \ ($gameIndex = 0; $gameIndex < count($game); $gameIndex++) {\n        // Add\
    \ the total score to the result array\n        $result[$totalScoreIndex] = $game[$totalScoreIndex]\
    \ + $guess[$totalScoreIndex];\n        // Increment the total score index\n  \
    \      $totalScoreIndex++;\n        // Increment the score index\n        $index++;\n\
    \n        // If the current game has scored, end the loop\n        if ($game[$index]\
    \ > $guess[$index]) {\n            break;\n        }\n\n        // The current\
    \ guess is incorrect and we need to store that in the results array\n        $result[$index]\
    \ = abs($game[$index] - $guess[$index]);\n        // Increment the index\n   \
    \     $index++;\n        // Increment the guessIndex\n        $guessIndex++;\n\
    \    }\n\n    // Return the results\n    return $result;\n}\n", "    $result =\
    \ [];\n    $totalScore = 0;\n    foreach($game as $i => $score) {\n        $totalScore\
    \ += $score;\n        $result[$i] = (abs($game[$i] - $guess[$i]) >= $score) ?\
    \ (abs($game[$i] - $guess[$i]) - $score) : abs($game[$i] - $guess[$i]);\n    }\n\
    \    return $result;\n}\n", "  sort($game);\n  sort($guess);\n  \n  $gameLen =\
    \ count($game);\n  $guessLen = count($guess);\n\n  $result = array();\n  for ($i\
    \ = 0; $i < $guessLen; $i++) {\n    $result[$i] = abs($guess[$i] - $game[$i]);\n\
    \  }\n  for ($i = 0; $i < $gameLen; $i++) {\n    $result[$i] = max($result[$i],\
    \ abs($guess[$i] - $game[$i]));\n  }\n\n  return $result;\n}\n", "    \n    $gameCount\
    \ = count($game);\n    $guessCount = count($guess);\n    $resultCount = $gameCount\
    \ - $guessCount;\n    $result = [];\n    for ($i = 0; $i < $gameCount; $i++) {\n\
    \        if ($game[$i] == $guess[$i]) {\n            $result[$i] = 0;\n      \
    \  } else {\n            $result[$i] = abs($guess[$i] - $game[$i]);\n        }\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your help\
    \ but I am not allowed to use anything other than `for` and `if` statements. I\
    \ should have said this in the first place. I also can't use any array functions\
    \ that would make this much easier.\n<|/ c |>\n<| a tags=php,algorithm dscore=0\
    \ |>\n<code>\n<?php", "    $result = array();\n    $score_min = min(count($game),\
    \ count($guess));\n    for ($i = 0; $i < $score_min; $i++) {\n        $result[$i]\
    \ = $guess[$i] - $game[$i];\n    }\n    return $result;\n}\n", "    $scoreDiff\
    \ = [];\n    $gameSize = count($game);\n    $guessSize = count($guess);\n    //\
    \ Loop through both arrays and determine the difference\n    for ($i = 0; $i <\
    \ $gameSize; $i++) {\n        $scoreDiff[$i] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    // Return an array of $guessSize length\n    return $scoreDiff;\n}",
  "    sort($game);\n    sort($guess);\n    $i = 0;\n    $j = 0;\n    $diff = 0;\n\
    \    $gameSize = $game['length'];\n    $guessSize = $guess['length'];\n    while($i\
    \ < $gameSize && $j < $guessSize) {\n        if($game[$i] == $guess[$j]) {\n \
    \           $i++;\n            $j++;\n        } elseif($game[$i] > $guess[$j])\
    \ {\n            $diff = $diff + abs($guess[$j] - $game[$i]);\n            $j++;\n\
    \        } else {\n            $diff = $diff + abs($game[$i] - $guess[$j]);\n\
    \            $i++;\n        }\n    }\n    return $diff;\n}\n", "    // Write your\
    \ code here\n    $score=array_sum($game);\n    $guess=array_sum($guess);\n   \
    \ if($score==$guess){\n        return 0;\n    }\n    $score=abs($score-$guess);\n\
    \    $score=array_sum($score);\n    return $score;\n}", "  $result = array();\n\
    \  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] === $guess[$i])\
    \ {\n      $result[] = 0;\n    } else {\n      $result[] = abs($guess[$i] - $game[$i]);\n\
    \    }\n  }\n  return $result;\n}\n</code>\nThe output of this is\n<code>\nArray\n\
    (\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 3\n    [4] => 0\n)\n</code>\n\
    <|/ a |>\n<| c |>\nThis solution fails to solve the more general case where the\
    \ number of matches isn't constant.\n<|/ c |>\n<| c |>\nIt fails because the code\
    \ does not account for when the number of matches isn't constant. Hence it is\
    \ not a general solution. It also fails to solve the case where a person has only\
    \ a single score.\n<|/ c |>\n<| c |>\nYour second solution doesn't fail for single\
    \ scores, because your last line is simply `abs($guess[$i] - $game[$i])`. But\
    \ it fails if $guess[$i] is equal to $game[$i].\n<|/ c |>\n<| a |>\nYour code\
    \ has several problems, but the main problem is the way you are computing the\
    \ score - you don't even need that function - you can just use abs($a - $b), which\
    \ returns 0 if the values are equal.\nYou are also not normalizing the scores,\
    \ so your function will fail if the scores are very close (like 0.0001 or something)\
    \ - you should be able to fix this by just scaling your scores (you just need\
    \ to divide by their standard deviation, since they are normally distributed -\
    \ see here).\nSo you can try this:\n<code>", "    $result = [];\n    foreach ($game\
    \ as $key => $score) {\n        if ($guess == $score) {\n            $result[$key]\
    \ = 0;\n        }\n        else {\n            $result[$key] = abs($guess - $score);\n\
    \        }\n    }\n    return $result;\n}\n", "    $game = array_flip($game);\n\
    \    $guess = array_flip($guess);\n    $distance = [];\n    $guesses = array_keys($game);\n\
    \    foreach ($guesses as $guessKey) {\n        $distance[$guessKey] = 0;\n  \
    \  }\n    foreach ($game as $scoreKey => $score) {\n        foreach ($guesses\
    \ as $guessKey) {\n            if ($game[$scoreKey] == $guess[$guessKey]) {\n\
    \                $distance[$guessKey] += abs($score - $game[$scoreKey]);\n   \
    \         }\n        }\n    }\n    return $distance;\n}\n", "    $result = [];\n\
    \    $scores = [0, 0, 0, 0];\n    $guesses = [0, 0, 0, 0];\n\n    foreach ($game\
    \ as $key => $value) {\n        if (isset($game[$key])) {\n            $scores[$key]\
    \ = $value;\n        }\n    }\n\n    foreach ($guess as $key => $value) {\n  \
    \      if (isset($guess[$key])) {\n            $guesses[$key] = $value;\n    \
    \    }\n    }\n\n    $score = 0;\n    for ($i = 0; $i < 4; $i++) {\n        $score\
    \ += $scores[$i];\n    }\n\n    for ($i = 0; $i < 4; $i++) {\n        $result[$i]\
    \ = abs($guesses[$i] - $scores[$i]);\n    }\n\n    return $result;\n}\n", "  \
    \  $result = [];\n    $correct = false;\n    $totalScore = 0;\n    foreach ($game\
    \ as $index => $score) {\n        if ($index == count($game) - 1) {\n        \
    \    $totalScore = $score;\n        }\n        $totalScore += $score;\n      \
    \  $score = $score > 0 ? 1 : 0;\n        if ($score == $guess[$index]) {\n   \
    \         $correct = true;\n        } else {\n            $result[] = abs($score\
    \ - $guess[$index]);\n        }\n    }\n    if ($correct) {\n        $result[]\
    \ = 0;\n    }\n    return $result;\n}\n", "    $result = array_diff($game, $guess);\n\
    \    foreach($result as $key => $val) {\n        if($val != $game[$key]) $result[$key]\
    \ = abs($val - $game[$key]);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| c |>\nI thought your method was more complicated than it really is. Thanks\
    \ for the example.\n<|/ c |>\n<| c |>\nThe OP seems to only care about the absolute\
    \ difference of the differences. Also, I think you have a typo: your code only\
    \ computes the differences.\n<|/ c |>\n<| c |>\nI think I see what you were getting\
    \ at with the typo. I'll edit the answer to fix the typo.\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nTo keep it simple: sort both arrays, then compare one to the other.\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\nYou don't have to sort, you can do this without\
    \ sorting by using counting.\n<code>", "    if (count($guess) != count($game))\
    \ return 'Array lengths are not equal.';\n    foreach ($guess as $key => $value)\
    \ if ($value != $game[$key]) return 'Guessed value does not match game value.';\n\
    \    $return = array();\n    foreach ($game as $key => $value) $return[$key] =\
    \ abs($value - $guess);\n    return $return;\n}\n", "    $score = [];\n    $guess\
    \ = $guess * -1;\n\n    for($i = 0; $i < count($game); $i++) {\n        $score[]\
    \ = $game[$i];\n    }\n\n    for($i = 0; $i < count($guess); $i++) {\n       \
    \ if($guess[$i] !== 0) {\n            $score[$i] -= $guess[$i];\n        }\n \
    \   }\n\n    return $score;\n}\n", "    $guesses = array_fill(0, count($game),\
    \ 0);\n    $score = 0;\n    $error = 0;\n    foreach ($game as $key => $val) {\n\
    \        if($val < $guess[$key]) {\n            $guesses[$key] = abs($guess[$key]\
    \ - $val);\n            $error++;\n        } else if($val > $guess[$key]) {\n\
    \            $guesses[$key] = abs($val - $guess[$key]);\n            $error++;\n\
    \        }\n        $score += $guesses[$key];\n    }\n    return $guesses;\n}\n\
    \n$game_1 = [1,2,3,4,5,1];\n$guess_1 = [1,2,3,4,2,-2];\n", "    $result = array();\n\
    \    for($i = 0; $i < count($game); $i++) {\n        $result[$i] = abs($guess[$i]\
    \ - $game[$i]);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nWhy do you need a loop? This can be accomplished with a simple\
    \ foreach loop\n<|/ c |>\n<| c |>\nyeah you are right, a foreach would work just\
    \ as fine, but I think this makes for a clearer example.\n<|/ c |>\n<| c |>\n\
    If you're going to use two loops I think it would be better to use a temporary\
    \ array rather than having to call `count($game)` each time\n<|/ c |>\n<| c |>\n\
    , thanks for your comment.  Yes, I could have used a temp array, but I wanted\
    \ to leave the OP's original code as much as possible, so that he could easily\
    \ compare multiple arrays.  And if you think of a foreach loop as a foreach loop,\
    \ I think it's clear that we're doing just that.  However, I agree that it's probably\
    \ better to use a temp array\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$arr1\
    \ = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19);\n\
    $arr2 = array(1, 4, 2, 7, 3, 9, 4, 10, 3, 12, 5, 11, 6, 13, 7, 14, 8, 15, 9, 16);\n\
    \n$diffArr = array();\nfor($i = 0; $i < count($arr1); $i++) {\n    $diffArr[$i]\
    \ = abs($arr1[$i] - $arr2[$i]);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nI like these answers, but I found they were not quite as straightforward\
    \ to understand as some of the other answers. This solution seems to do the same\
    \ thing, but uses a lot more looping techniques. \n<code>\n$result = array();\n\
    for ($i = 0; $i < count($game); $i++) {\n    $result[$i] = abs($guess[$i] - $game[$i]);\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\nYou can use array_diff to do this\
    \ pretty easily:\n<code>\n$game = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19];\n$guess = [1, 4, 2, 7, 3, 9, 4, 10, 3, 12, 5, 11, 6,\
    \ 13, 7, 14, 8, 15, 9, 16];\n\n$diffs = array_diff($game, $guess);\n</code>\n\
    If you want the output to be an array of ", "\t$score = 0;\n\t$guesses = count($game);\n\
    \t$diff = array();\n\tfor ($i = 0; $i < $guesses; $i++) {\n\t\t$diff[$i] = abs($guess[$i]\
    \ - $game[$i]);\n\t}\n\t\n\treturn $diff;\n}\n", "    \n    // Okay, now we need\
    \ to deal with the possible exceptions. \n    // The easiest case is when the\
    \ guesses are the same length, and we return 0. \n    if(count($guess) != count($game))\
    \ {\n        return 0;\n    }\n    \n    // If the arrays differ, we can assume\
    \ that they aren't correct.\n    // So we will return an array of length equal\
    \ to the length of the shorter.\n    // We will then start filling the arrays\
    \ from the longer array, until we get to the shorter.\n    \n    $shortest = count($guess)\
    \ < count($game) ? count($guess) : count($game);\n    $lengthOfShortest = count($guess)\
    \ < count($game) ? $shorter : count($game);\n    \n    $differenceArray = array();\n\
    \    \n    // For each index of the shorter array, we compare the current index\
    \ with\n    // the guesses up to the shorter length (which we know to be the same)\n\
    \    for($i = 0; $i < $lengthOfShortest; $i++) {\n        \n        // For each\
    \ index of our current shorter array\n        for($j = 0; $j < count($guess);\
    \ $j++) {\n            \n            // If the current index is greater than the\
    \ guess, we can't\n            // compare it, so we return 0 instead.\n      \
    \      if($i > (count($guess) - count($game))) {\n                return 0;\n\
    \            }\n            \n            // If the current index is greater than\
    \ the guess, we can't\n            // compare it, so we return 0 instead.\n  \
    \          if($j > $i) {\n                return 0;\n            }\n         \
    \   \n            // If the current index matches, we can just return the difference\n\
    \            // of both the current guess and the score for the match\n      \
    \      if(!($game[$i] == $guess[$j])) {\n                return abs($guess[$j]\
    \ - $game[$i]);\n            }\n        }\n    }\n    \n    // Return an array\
    \ of lengthOfShortest of the difference between the\n    // guess and the current\
    \ score.\n    return $differenceArray;\n}\n", "  $score = 0;\n  $best = 0;\n\n\
    \  $n = 0;\n  foreach($game as $index => $score) {\n    if ($score === $guess[$index])\
    \ {\n      $n++;\n    }\n  }\n\n  foreach($guess as $index => $score) {\n    if\
    \ ($score === $guess[$index]) {\n      $best = $best;\n    }\n  }\n  \n  $array\
    \ = [];\n  foreach($guess as $index => $score) {\n    $array[$index] = abs($score\
    \ - $best);\n  }\n  \n  return $array;\n}\n</code>\nI hope this was useful. :)\n\
    <|/ a tags=arrays,php dscore=0 |>\n<| c |>\nThank you for your kind assistance!\
    \  Your code works perfectly well for me.  :)\n<|/ c |>\n<| c |>\nYou're welcome!\
    \ Hope it helped you! If you think this is your correct answer, could you mark\
    \ it as the correct answer? Thanks!\n<|/ c |>\n<| a |>\n<code>\n<?php", "    $scores\
    \ = [];\n    $best = [];\n\n    foreach ($game as $key => $value) {\n        if\
    \ ($guess[$key] == $value) $scores[$key] = 0;\n        else $scores[$key] = abs($guess[$key]\
    \ - $value);\n    }\n\n    foreach ($guess as $key => $value) $best[$key] = abs($guess[$key]\
    \ - $value);\n    sort($best);\n\n    $bestMatch = 0;\n    foreach ($best as $key\
    \ => $value) {\n        if ($bestMatch < $scores[$key]) {\n            $bestMatch\
    \ = $scores[$key];\n            $bestMatchKey = $key;\n        }\n    }\n\n  \
    \  return $best;\n}\n\n$array1 = [1,2,3,4,5,1];\n$array2 = [1,2,3,4,2,-2];\n\n\
    print_r(compare($array1, $array2));", "    $sum = 0;\n    for($i = 0; $i < count($game);\
    \ $i++) {\n        $sum += abs($game[$i] - $guess[$i]);\n    }\n    return $sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI wrote a PHP class that does the task.\
    \ You can use it to compare your results. You can find it here: https://github.com/johnl/compare-score\n\
    The class uses array_diff to find the differences. It also uses array_diff_assoc\
    \ (to compare keys) and array_diff_uassoc (to compare values, if both arrays have\
    \ the same keys).\n<code>\n$differences = CompareScore::compare($originalScore,\
    \ $guessedScore);\n$correctGuesses = CompareScore::compare($originalScore, $guessedScore,\
    \ true, $guessedKeys);\n$incorrectGuesses = CompareScore::compare($originalScore,\
    \ $guessedScore, false, $guessedKeys);\n</code>\nThe results are returned as an\
    \ array like so:\n<code>\narray (\n  0 => 0,\n  1 => 0,\n  2 => 3,\n  3 => 3,\n\
    \  4 => 0,\n  5 => 2,\n)\n</code>\n<|/ a dscore=0 tags=arrays,php |>\n<| a dscore=0\
    \ |>\n<code>", "    $score = $game;\n    $guess = array_values($guess);\n    \n\
    \    // If there are 0 scores, return 0\n    if (count($score) == 0) return 0;\n\
    \    \n    $diff = array();\n    // If there are not enough guesses to get to\
    \ a score, return 0\n    if (count($guess) < count($game)) return 0;\n    \n \
    \   // Go through all the guesses, get the difference\n    foreach ($guess as\
    \ $i => $guess) {\n        $diff[$i] = abs($guess - $score[$i]);\n    }\n    \n\
    \    // Return the differences\n    return $diff;\n}\n", "    $answer=$game;\n\
    \    $score=0;\n    for($i=0;$i<count($game);$i++){\n        if($game[$i]==$guess[$i]){\n\
    \            $score++;\n        }\n    }\n    for($i=0;$i<count($game);$i++){\n\
    \        if($game[$i]!=abs($guess[$i]-$score)){\n            $answer[$i]=abs($guess[$i]-$score);\n\
    \        }\n    }\n    return $answer;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This is great and works as expected. I have to admit that I am a bit confused\
    \ about the code since I came from a python background and have only just started\
    \ with php, however it is easy to follow and understand.\n<|/ c |>\n<| c |>\n\
    You are welcome! The code works because it uses a loop for each array length (the\
    \ number of matches you have), each iteration assigns the correct score to a variable,\
    \ compares that variable with the current guess, and if the two match, it adds\
    \ the score to `$score`. Then, the `for` loop checks to see if each of the arrays\
    \ is out of range, ie. if all the elements were guesses correctly or were incorrect,\
    \ and if so, it adds one to `$answer` because `abs($guess[$i]-$score)` would equal\
    \ 0. `abs` is an absolute value (it takes the negative of the score). Then, the\
    \ loop ends.\n<|/ c |>\n<| a dscore=0 tags=php,arrays |>\n<code>", "    $result\
    \ = [];\n    $game_length = count($game);\n    $guess_length = count($guess);\n\
    \    $score = 0;\n    for($i = 0; $i < $game_length; $i++) {\n        if($game[$i]\
    \ == $guess[$i]) {\n            $score++;\n        } else {\n            for($j\
    \ = 0; $j < $guess_length; $j++) {\n                if($guess[$j] == $game[$i])\
    \ {\n                    $guess[$j]++;\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    for($i = 0; $i < $guess_length;\
    \ $i++) {\n        if($guess[$i] > $game[$i]) {\n            $guess[$i] -= $game[$i];\n\
    \            $result[] = 0;\n        } else {\n            $guess[$i] += $game[$i];\n\
    \            $result[] = $game[$i];\n        }\n    }\n    return $result;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis is awesome, thank you! I didn't think about dividing\
    \ by the size of the game, but that makes sense. \nI'm a bit of a novice when\
    \ it comes to PHP, I just learned that array keys in PHP begin at 0, not 1, so\
    \ I didn't even think to subtract that from the result.\n<|/ c |>\n<| c |>\nYou're\
    \ welcome. Glad you found it useful. Arrays are weird like that, it's easy to\
    \ forget that they start at 0\n<|/ c |>\n<| a |>\nYou could use foreach for it,\
    \ which would make it much easier:\n<code>\n<?php\n\n$game = [1,2,3,4,5,1];\n\
    $guess = [1,2,3,4,2,-2];\n\n$result = [];\n$score = 0;\n\nforeach($game as $key\
    \ => $game_value) {\n    $key++;\n    if($game_value == $guess[$key]) {\n    \
    \    $score++;\n    } else {\n        foreach($guess as $k => $guess) {\n    \
    \        $key++;\n            if($guess[$key] == $game_value) {\n            \
    \    $guess[$key]++;\n                break;\n            }\n        }\n    }\n\
    \    $result[] = $game_value - $guess;\n}\n\nprint_r($result);\n", "   $i = 0;\n\
    \   $result = [];\n   foreach ($guess as $j => $value) {\n      if ($game[$i]\
    \ == $value) {\n         $result[$j] = 0;\n      }\n      else {\n         $result[$j]\
    \ = abs($value - $game[$i]);\n      }\n      $i++;\n   }\n   return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer. I have\
    \ some questions about your code. First of all, why are you doing $i++; twice?\
    \ And why are you using $i for the $game variable and $j for the $result variable?\
    \ What is the purpose of doing that? Why are you setting $i = 0; instead of $i\
    \ = 0;? And finally why is the \"i\" variable not used in the first foreach loop?\
    \ And what is the purpose of $result[$j] in the second foreach loop? Why are you\
    \ setting $result[$j] = abs($value - $game[$i]);? I really want to understand\
    \ your code because I am new to programming. Thank you.\n<|/ c |>\n<| c |>\nThe\
    \ first foreach loop iterates through each item in the array ($game), and the\
    \ second foreach loop iterates through each item in the array ($guess) and then\
    \ compares them.\n<|/ c |>\n<| c |>\nIn the first loop, $i is the $game variable\
    \ and $j is the $result variable. In the second loop, $i is the $guess variable\
    \ and $j is the $game variable. In the third loop, $i is the $guess variable and\
    \ $j is the $result variable. So, in your code the first loop is saying $i = 0\
    \ and $i = 1, the second loop is saying $i = 1 (which is $game[$i]) and $j = $i;\
    \ and the third loop is saying $i = 1; $j = $i; and $result = $game.\n<|/ c |>\n\
    <| c |>\nAnd why are you setting the $i = 0 instead of $i = 1; in the first loop?\
    \ Why are you setting $result[$j] = abs($value - $game[$i]); instead of $result[$j]\
    \ = abs($value - $game[$j]);? Thank you for your help.\n<|/ c |>\n<| c |>\nBecause\
    \ the value of $i is getting incremented by 1 for each item in the array $game.\
    \ In the third loop, the value of $i is being incremented by 1 for each item in\
    \ the array $guess. So the first loop is running through each item in the array\
    \ $game, the second loop is running through each item in the array $guess and\
    \ comparing them with each other. In the third loop, the value of ", "    $correct\
    \ = 0;\n    foreach($game as $key => $value) {\n        if ($guess == $value)\
    \ {\n            $correct++;\n        }\n    }\n    foreach($guess as $key =>\
    \ $value) {\n        if ($game == $value) {\n            $correct++;\n       \
    \ }\n    }\n    return array_map('abs', array($correct, $guess - $correct, $game\
    \ - $guess));\n}\n</code>\nI hope this helps. I wanted to make a fiddle so I could\
    \ show it working with PHP and Javascript but PHP is really overwhelming at this\
    \ time so I went with JS.\n<|/ a dscore=2 |>\n<| c |>\nNice answer. It would help\
    \ if I understood what you were trying to say with the \"absolute difference\"\
    \ part. Also, I think you meant `if ($value == $guess)` instead of `if ($guess\
    \ == $value)`.\n<|/ c |>\n<| c |>\nYou are correct, I misspoke. My original code\
    \ was `if ($guess == $value)` but I changed it to `if ($value == $guess)` to improve\
    \ the readability of the code. I'll edit my answer.\n<|/ c |>\n<| c |>\nOh my\
    \ bad, I didn't notice that they were different arrays. That definitely makes\
    \ a lot of sense.\n<|/ c |>\n<| a tags=php,javascript,comparison,arrays |>\nYou\
    \ could simply do this.\n<code>\n$diff=array_map('abs',array_diff(array_map('array_diff',\
    \ $array1), $array2));\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nYou can\
    \ compare the two arrays by looping through each index and comparing the two values.\
    \  Here's an example:\n<code>\n<?php\n$arr1 = array(1,2,3,4,5,6,7,8,9,10);\n$arr2\
    \ = array(1,2,3,4,5,6,7,8,9,10,11);\n", "    // Write your code below\n\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    $score = array();\n    $max_score =\
    \ max($game);\n    foreach ($guess as $key => $guess) {\n        $score[$key]\
    \ = max(abs($guess - $game[$key]), abs($max_score - $game[$key]));\n    }\n  \
    \  return $score;\n}\n", "\t$result = array();\n\t\n\tforeach($game as $key =>\
    \ $value) {\n\t\t$result[$key] = abs($guess[$key] - $value);\n\t}\n\t\n\treturn\
    \ $result;\n}", "    $score = array_sum($game);\n    $guesses = array_sum($guess);\n\
    \    $differences = array_diff($guesses, $game);\n    return $differences;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nI really like this answer, but I think I'm missing\
    \ something. I'm trying to apply it to my question, but my code just prints out\
    \ the word \"Array\". I'm not too sure what I'm doing wrong, but I feel like I'm\
    \ missing something very obvious.\n<|/ c |>\n<| c |>\nI have tested it and it\
    \ works for me. `var_dump` the return value to see what it contains. What language\
    \ are you working in and what have you tried already? If you have no idea then\
    \ it sounds like you need to do some research first.\n<|/ c |>\n<| c |>\nI figured\
    \ it out after looking at your answer. I was trying to use the code exactly as\
    \ your first example, but I'm a total beginner so I was having trouble. Thank\
    \ you so much for taking the time to post your answer. I'll mark it as correct\
    \ as soon as I get the chance to!\n<|/ c |>\n<| c |>\nWelcome, glad you got the\
    \ answer you were looking for!\n<|/ c |>\n<| a tags=php,arrays |>\nTry using array_diff\
    \ to subtract the two arrays:\n<code>\n$array = array(1,2,3,4,5,1);\n$array =\
    \ array(1,2,3,4,2,-2);\n\n$diff = array_diff($array, $array);\n</code>\nThe output\
    \ will be an array() of numbers:\n<code>\nArray\n(\n    [0] => -2\n)\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nWhile this answer is probably correct and useful,\
    \ it is preferred if you include some explanation along with it to explain how\
    \ it helps to solve the problem. This becomes especially useful in the future,\
    \ if there is a change (possibly unrelated) that causes it to stop working and\
    \ users need to understand how it once worked.\n<|/ c |>\n<| c |>\nYes, you're\
    \ right. Thx for the advice.\n<|/ c |>\n<| a |>\nYou can use array_diff() function.\
    \ Try it out! \n<code>\n$arr1 = array(1,2,3,4,5,1);\n$arr2 = array(1,2,3,4,2,-2);\n\
    $result = array_diff($arr2, $arr1);\n", "  $result = array();\n  foreach($game\
    \ as $key => $value) {\n    if($guess[$key] == $value) {\n      $result[] = 0;\n\
    \    } else {\n      $result[] = abs($guess[$key] - $value);\n    }\n  }\n  return\
    \ $result;\n}\n</code>\nNow that we have that, we should use the same logic as\
    \ in our previous version to create the game:\n<code>", "  if(sizeof($guess) !=\
    \ sizeof($game)) {\n    die('Guess and game are not the same length!');\n  }\n\
    \  for($i = 0; $i < sizeof($guess); $i++) {\n    if($game[$i] < $guess[$i]) {\n\
    \      return [0, 0, 0, $game[$i], $guess[$i]];\n    }\n  }\n  for($i = 0; $i\
    \ < sizeof($guess); $i++) {\n    if($game[$i] >= $guess[$i]) {\n      return [$game[$i],\
    \ $game[$i], $game[$i], $guess[$i], $guess[$i]];\n    }\n  }\n}", "\t$results\
    \ = [];\n\tfor ($i = 0; $i < count($game); $i++) {\n\t\t$results[$i] = abs($guess[$i]\
    \ - $game[$i]);\n\t}\n\treturn $results;\n}\n", "    $game=array_reverse($game);\n\
    \    $guess=array_reverse($guess);\n    $results=[];\n    foreach ($game as $key\
    \ => $score) {\n        foreach ($guess as $key2 => $guess2) {\n            if\
    \ ($guess2 == $score) {\n                $results[$key]=$key2;\n            }\n\
    \        }\n    }\n    return $results;\n}\n", "    sort($game);\n    sort($guess);\n\
    \    $gamesize = count($game);\n    $guesssize = count($guess);\n    $answer =\
    \ array();\n    for ($i = 0; $i < $gamesize; $i++) {\n        $answer[$i] = $game[$i]\
    \ - $guess[$i];\n        if ($answer[$i] < 0) {\n            $answer[$i] = 0;\n\
    \        } else if ($answer[$i] > $game[$i]) {\n            $answer[$i] = $game[$i]\
    \ - $answer[$i];\n        }\n    }\n    return $answer;\n}\n", "    // your implementation\
    \ goes here\n    return $game;\n}\n</cell>\n<cell>", "  $score = 0;\n  $guesses\
    \ = array();\n  foreach ($game as $gameKey => $value) {\n    if ($gameKey < $value)\
    \ {\n      $score++;\n      $guesses[] = $gameKey;\n    }\n  }\n  foreach ($guess\
    \ as $key => $value) {\n    if ($key < $value) {\n      $score++;\n      $guesses[]\
    \ = $key;\n    }\n  }\n  $returnArray = array();\n  foreach ($guesses as $key\
    \ => $value) {\n    $returnArray[$key] = abs($guess - $game[$key]);\n  }\n  return\
    \ $returnArray;\n}\n", "    $total = 0;\n    \n    $i = count($guess);\n    for\
    \ ($j = 0;$j < $i;$j++) {\n        if ($game[$j] == $guess[$j]) {\n          \
    \  $total += 0;\n        } else {\n            $total++;\n        }\n    }\n \
    \   if ($total == count($game)) {\n        $total = 0;\n    }\n    \n    $return\
    \ = array();\n    for ($j = 0;$j < $i;$j++) {\n        $return[$j] = abs($guess[$j]\
    \ - $game[$j]);\n    }\n    \n    return $return;\n}", "    $score = $game;\n\
    \    $diff = 0;\n\n    foreach($guess as $key => $value) {\n        $diff += abs($value\
    \ - $score[$key]);\n    }\n\n    return $diff;\n}\n", "    $scores = [];\n   \
    \ $guesses = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $scores[$i]\
    \ = 0;\n        $guesses[$i] = $game[$i];\n    }\n    for ($i = 0; $i < count($guess);\
    \ $i++) {\n        $scores[$i] = $guess[$i] - $game[$i];\n        if ($scores[$i]\
    \ < 0) {\n            $scores[$i] = $scores[$i] + count($game);\n        }\n \
    \       $guesses[$i] = $guess[$i];\n    }\n    return $scores;\n}\n", "    $gameScores\
    \ = array_fill(0, count($guess), 0);\n    $guessesScores = array_fill(0, count($guess),\
    \ 0);\n    for ($i = 0; $i < count($guess); $i++) {\n        $gameScores[$game[$i]]\
    \ += $guess[$i];\n        $guessesScores[$guess[$i]] += $game[$i];\n    }\n\n\
    \    $correct = [];\n    foreach ($guessesScores as $index => $score) {\n    \
    \    if ($score < 0) {\n            $correct[$index] = abs($score);\n        }\
    \ else {\n            $correct[$index] = 0;\n        }\n    }\n\n    $score =\
    \ $gameScores;\n    krsort($score);\n    krsort($correct);\n\n    return $correct;\n\
    }\n", "    $score = $game;\n    $guess_copy = array();\n    for($i=0; $i<count($guess);\
    \ $i++) {\n        $guess_copy[$i] = $guess[$i];\n    }\n    $total = 0;\n   \
    \ for($i=0; $i<count($game); $i++) {\n        if($game[$i] == $guess_copy[$i])\
    \ {\n            $total++;\n        }\n    }\n    $game = array();\n    for($i=0;\
    \ $i<count($guess); $i++) {\n        if($guess[$i] == $guess_copy[$i]) {\n   \
    \         $game[$i] = 0;\n        } else {\n            $game[$i] = abs($guess[$i]-$score[$i]);\n\
    \        }\n    }\n    return $game;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you\
    \ for sharing your solution! It looks great to me. I really appreciate it!\n<|/\
    \ c |>\n<| a tags=arrays,php dscore=0 |>\nOkay, I got it working now. The solution\
    \ provided above was a bit too complicated for me to understand. Since no one\
    \ else replied, I wrote my own code which is simple to understand for me. Since\
    \ I wanted to learn something new, I thought I would post my solution. \n<code>",
  "    $result = [];\n    foreach ($guess as $i => $c) {\n        if ($game[$i] !=\
    \ $c) {\n            $result[$i] = (abs($game[$i]-$c));\n        } else {\n  \
    \          $result[$i] = 0;\n        }\n    }\n    return $result;\n}\n", "\t\n\
    }\n", "    return array_map(function($a) use($guess) {\n        $guesses = $guess;\n\
    \        $result = $a;\n        foreach ($guesses as $key => $guess) {\n     \
    \       if ($guess > $a) {\n                $guesses[$key] -= $a;\n          \
    \      $result = $guess;\n            }\n        }\n        return abs($result\
    \ - $a);\n    }, $game);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your\
    \ answer!  Could you add some explanation about how this works?\n<|/ c |>\n<|\
    \ c |>\nI added an explanation.\n<|/ c |>\n<| c |>\nI added an explanation.\n\
    <|/ c |>\n<| a |>\nIt took me a while to figure out the logic but here is my final\
    \ solution. I refactored your code into two functions. The first is to determine\
    \ if the game was won. The second is to determine the difference between the guess\
    \ and the actual score that was given. The function will also check if the guesses\
    \ exceed the maximum amount of matches it can do.\n<code>\n<?php", "   $diff =\
    \ 0;\n   foreach ($game as $key=>$value) {\n      if ($value == $guess[$key])\
    \ {\n         $diff += 0;\n      } else \n         $diff += abs($value - $guess[$key]);\n\
    \   }\n   return $diff;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks for the\
    \ quick reply! However, I think your code assumes that both arrays are the same\
    \ length. For example, if `game[0]=3` and `guess[0]=2`, then `game[1]=3` and `guess[1]=0`\
    \ will give an incorrect result. I'll make an edit to the OP to clarify.\n<|/\
    \ c |>\n<| c |>\nThis code only works if both arrays are the same length. Try\
    \ with your example in the OP and you'll see the results are incorrect. I'll make\
    \ an edit to the OP to clarify.\n<|/ c |>\n<| c |>\n: Ah, yes. I missed that case.\
    \ This code is fine then.\n<|/ c |>\n<| c |>\n: Edited answer to reflect your\
    \ clarification.\n<|/ c |>\n<| c |>\nI see what you're saying now. The only thing\
    \ I don't understand is why you have both `$i` and `$j` as arrays and you only\
    \ use `game[0]` and `guess[0]` instead of `game[$i]` and `guess[$j]`. It's not\
    \ like they're indexed differently, right? I just don't see it clearly.\n<|/ c\
    \ |>\n<| a |>\nWhat is the problem you are trying to solve?\nFrom your comment,\
    \ I am guessing you are looking for a way to iterate over every possible pairing?\
    \ That would be a nested loop like:\n<code>\nfor ( $i = 0, $i < count($game);\
    \ $i++ ){\n    for ( $j = $i; $j < count($game); $j++ ){\n         if ( compare(\
    \ $game, $guess ) == 0 ){\n            echo \"The numbers are the same. \";\n\
    \         }\n    }\n}\n</code>\nThis would compare every possible pairing of numbers\
    \ in the game and guess arrays.\n<|/ a tags=arrays,php dscore=2 |>\n<| c |>\n\
    Thanks for the quick reply! However, I think your code assumes that both arrays\
    \ are the same length. For example, if `game[0]=3` and `guess[0]=2`, then `game[1]=3`\
    \ and `guess[1]=0` will give an incorrect result. I'll make an edit to the OP\
    \ to clarify.\n<|/ c |>\n<| c |>\n: Ah, yes. I missed that case. This code is ",
  "    $scores = [0, 0, 0, 0];\n    $guesses = [0, 0, 0, 0];\n    $game = array_values($game);\n\
    \    $guess = array_values($guess);\n    foreach ($game as $index => $score) {\n\
    \        if ($guess[$index] == $score) {\n            $scores[0]++;\n        }\
    \ else {\n            $scores[1]++;\n        }\n    }\n    foreach ($guesses as\
    \ $index => $guess) {\n        if ($guess == $score) {\n            $scores[2]++;\n\
    \        } else {\n            $scores[3]++;\n        }\n    }\n    return $scores;\n\
    }", "    $return = [];\n    $return2 = [];\n    for($i=0; $i < count($guess);\
    \ $i++) {\n        if($game[$i] == $guess[$i]) {\n            $return[$i] = 0;\n\
    \        } else {\n            $return[$i] = abs($game[$i] - $guess[$i]);\n  \
    \      }\n    }\n    for($i=0; $i < count($return); $i++) {\n        if($return[$i]\
    \ > 0) {\n            $return2[$i] = $return[$i];\n        } else {\n        \
    \    $return2[$i] = abs($return[$i]);\n        }\n    }\n    return $return2;\n\
    }\n", "    $diff = array();\n    foreach ($guess as $key => $val) {\n        if\
    \ ($val < 0 || $val > $game[$key]) { // out of bounds - no match\n           \
    \ $diff[$key] = 0;\n        } else {\n            if ($game[$key] === $val) {\
    \ // correct - no change\n                $diff[$key] = 0;\n            } else\
    \ { // too far off\n                $diff[$key] = $game[$key] - $val;\n      \
    \      }\n        }\n    }\n    return $diff;\n}\n", "    // TODO: Implement this\
    \ function\n\n    $result = [];\n\n    foreach ($game as $key => $value) {\n \
    \       // We check if the guess is in one of the arrays (key or value)\n    \
    \    if ($game[$key] == $guess || $guess == $value) {\n            $result[] =\
    \ 0;\n        } else {\n            $result[] = $guess - $value;\n        }\n\
    \    }\n\n    return $result;\n}\n", "  $scores = [];\n  $guesses = [];\n  foreach\
    \ ($game as $key => $value) {\n    $scores[$key] = $value - $guess[$key];\n  \
    \  $guesses[$key] = $guess[$key];\n  }\n  foreach ($scores as $key => $value)\
    \ {\n    if ($value == 0) {\n      $scores[$key] = null;\n      $guesses[$key]\
    \ = null;\n    }\n  }\n  return $scores;\n}\n", "    $results = [];\n\n    foreach\
    \ ($game as $k => $v) {\n        // The current score is the difference between\
    \ the current guess and $game[$k]\n        $currentScore = abs($game[$k] - $guess[$k]);\n\
    \        // The difference is compared to $guess[$k]\n        $results[$k] = $currentScore\
    \ - $guess[$k];\n    }\n\n    return $results;\n}\n</code>\nOutput:\n<code>\n\
    $ php solution.php\n[0, 0, 0, 0, 3, 3]\n[4, 4, 1, 0, 0, 6]\n</code>\n<|/ a |>\n\
    <| a dscore=1 |>\nHere's my solution :\n<code>\n<?php\n\n$guess = [1,2,3,4,5,1];\n\
    \n$game = [0,5,0,0,0,4];\n\n$results = [];\n\nforeach($guess as $k => $v){\n \
    \   $results[$k] = abs($guess[$k]-$game[$k]);\n}\n\nvar_dump($results);\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=1 tags=arrays,php |>\nYou can use a for\
    \ loop:\n<code>\n$guess = [1,2,3,4,5,1];\n$game = [0,5,0,0,0,4];\n\n$results =\
    \ [];\n\nfor($i=0;$i<count($guess);$i++){\n    $results[$i] = abs($guess[$i]-$game[$i]);\n\
    }\n\nvar_dump($results);\n</code>\n<|/ a |>\n<| c |>\nI like the use of the `count()`\
    \ here. You might want to add that the `for` loop starts at 0 and the end is `count($guess)`\
    \ because if you count the elements in `game` you won't get the total amount of\
    \ elements.\n<|/ c |>\n<| a dscore=1 tags=arrays,php |>\n<code>\n<?php\n$guess\
    \ = [1,2,3,4,5,1];\n$game = [0,5,0,0,0,4];\n\n$results = [];\n\n$count = count($game);\n\
    \nfor($i = 0; $i < $count; $i++) {\n    $results[$i] = abs($guess[$i] - $game[$i]);\n\
    }\n\nvar_dump($results);\n</code>\n<|/ a |>\n<| a |>\nAnother solution:\n<code>\n\
    $guess = [1,2,3,4,5,1];\n$game = [0,5,0,0,0,4];\n$results = [];\nforeach ($game\
    \ as $key => $value) {\n    $results[$key] = abs($guess[$key] - $value);\n}\n\
    var_dump($results);\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n", "    $result\
    \ = array();\n    foreach ($game as $index => $score) {\n        if($guess[$index]\
    \ === $score) {\n            $result[$index] = 0;\n        }\n        else {\n\
    \            $result[$index] = abs($guess[$index] - $score);\n        }\n    }\n\
    \    return $result;\n}\n", "    $correct = 0;\n    $guesses = count($guess);\n\
    \    foreach ($game as $score => $guess) {\n        $correct = $correct + abs($guess\
    \ - $score);\n    }\n    return $correct/$guesses;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nNice solution, although there are some bugs in your code. The test\
    \ cases should be `compare([1,2,3,4,5,1],[1,2,3,4,2,-2])` & `compare([0,5,0,0,0,4],[4,1,1,0,0,-2])`\
    \ but the output comes out as `[1,1,1,1,2,1]`. Also, the result should be `[4,4,1,0,0,6]`\
    \ but your solution returns `[4,1,0,0,6,3]`.\n<|/ c |>\n<| c |>\nYeah, I know.\
    \ I'll try to work on that later.\n<|/ c |>\n<| c |>\nThank you! It works now,\
    \ I added an if statement to check the number of elements in the arrays and an\
    \ else statement to output 0.\n<|/ c |>\n<| c |>\nYeah, my mistake. I'm gonna\
    \ fix it now.\n<|/ c |>\n<| a dscore=1 |>\nI have made some changes here and there\
    \ to make it work. The main changes are:\n\nI have added two additional arrays\
    \ $correct and $incorrect. The $correct array is used to store the correct guess\
    \ scores. I then need to check if the guess has been already added to this array\
    \ and if so - update its score and if not, add it to $incorrect array. After the\
    \ loop I am checking if the count of $correct array is equal to the number of\
    \ elements in $guesses array. If this happens - then the result will be the one\
    \ stored in $correct array, otherwise $incorrect will be the result.\nIn the return\
    \ statement I have added an else statement to output 0 if $incorrect array is\
    \ empty. It will output 0 because there are no guesses to compare against the\
    \ game. \nI have changed your foreach loop to for loop. Foreach loops are for\
    \ arrays with sequential indexes. Since you have the array $game with keys equal\
    \ to $guesses I am assuming that $game array has key equal to $guesses.\n\nCode:\n\
    <code>\n<?php\n", "    $result = array_intersect($game, $guess);\n    $result2\
    \ = array_intersect($guess, $game);\n    \n    $result3 = [];\n    \n    for ($i\
    \ = 0; $i < count($result); $i++) {\n        $result3[$i] = abs($result[$i] -\
    \ $result2[$i]);\n    }\n    \n    return $result3;\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n\n$array1 = [1,2,3,4,5,6];\n$array2 = [2,4,6,8,10,12];\n\
    \n$array3 = array_intersect($array1, $array2);\n\n$result = [];\nforeach ($array3\
    \ as $v) {\n    $result[] = ($array1 == $v) ? 0 : $v - $array2;\n}\n\nprint_r($result);\n\
    </code>\nResult:\n<code>\nArray\n(\n    [0] => 0\n    [1] => 2\n    [2] => 4\n\
    \    [3] => 0\n)\n</code>\n<|/ a tags=php,algorithm,arrays,loops |>\n<| c |>\n\
    That doesn't look like what the OP is asking for. If I understand correctly, the\
    \ OP wants to know how far away each `1` was from each `2`.\n<|/ c |>\n<| c |>\n\
    He wrote `If they have guessed correctly, the value is 0, and if not, the value\
    \ is the absolute difference between the guess and the score.`\n<|/ c |>\n<| c\
    \ |>\nYes, I see that now. Although I can't remember where I saw that but I'm\
    \ guessing it's somewhere in his other questions.\n<|/ c |>\n<| c |>\nAh, yes\
    \ I see it now. I'm guessing it's in one of the other questions, probably OP's\
    \ earliest one.\n<|/ c |>\n<| c |>\nYes, I remember my early question. Someone\
    \ posted there this and I wanted to show it. But I'm new here and I guess I couldn't\
    \ do it.\n<|/ c |>\n<| a dscore=0 |>\nThe only thing I came up with is something\
    \ like this:\n<code>\n<?php\n\n$array1 = [1,2,3,4,5,6];\n$array2 = [2,4,6,8,10,12];\n",
  "    $n = count($game);\n    $m = count($guess);\n    $a = array();\n    for($i\
    \ = 0; $i < $m; $i++){\n        $a[$i] = ($game[$i] == $guess[$i]) ? 0 : (abs($game[$i]\
    \ - $guess[$i]));\n    }\n    return $a;\n}\n", "  // Your code here!\n}\n", "\t\
    $result = array();\n\tfor($i=0; $i<count($guess); $i++) {\n\t\t$result[$i] = abs($guess[$i]\
    \ - $game[$i]);\n\t}\n\treturn $result;\n}\n\n/**\n * Function to check if two\
    \ arrays are anagrams of each other\n *\n * Two arrays are anagrams of each other\
    \ if they contain same elements and \n * the number of occurrences of each element\
    \ is the same.\n * \n * Your task is to complete this function that will determine\
    \ if the first array \n * contains the same elements as the second array and to\
    \ return true or false.\n */"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
