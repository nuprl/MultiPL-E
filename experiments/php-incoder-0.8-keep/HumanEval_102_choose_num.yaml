name: HumanEval_102_choose_num
language: php
prompt: "<?php\n// This function takes two positive numbers x and y and returns the\n\
  // biggest even integer number that is in the range [x, y] inclusive. If \n// there's\
  \ no such number, then the function should return -1.\n// For example:\n// choose_num(12,\
  \ 15) = 14\n// choose_num(13, 12) = -1\nfunction choose_num($x, $y) {\n"
tests: "function candidate(...$args) {\n    return choose_num(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(12, 15) !== 14) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(13, 12) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(33, 12354) !== 12354) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5234, 5233) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6, 29) !== 28) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(27, 10) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(7, 7) !== -1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(546, 546) !== 546) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    return max($x, $y);\n}", "    if ($x <= $y) {\n        for ($i\
    \ = $x; $i <= $y; $i++) {\n            if ($i % 2 == 0) return $i;\n        }\n\
    \    }\n    return -1;\n}\n", "    return -1; // not implemented\n}\n", "    if\
    \ ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    $result = -1;\n    \n    while ($min\
    \ < $max) {\n        if ($min % 2 == 0) {\n            if ($max % 2 == 0) {\n\
    \                if ($min < $max) {\n                    if ($min == $max) {\n\
    \                        return $min;\n                    } else {\n        \
    \                $result = $min + 1;\n                    }\n                }\n\
    \            } else {\n                if ($min == $max) {\n                 \
    \   return $min;\n                } else {\n                    $result = $min\
    \ + 1;\n                }\n            }\n        } else {\n            if ($max\
    \ % 2 == 0) {\n                if ($min < $max) {\n                    if ($min\
    \ == $max) {\n                        return $min;\n                    } else\
    \ {\n                        $result = $min + 1;\n                    }\n    \
    \            }\n            } else {\n                if ($min == $max) {\n  \
    \                  return $min;\n                } else {\n                  \
    \  $result = $min + 1;\n                }\n            }\n        }\n        $min++;\n\
    \    }\n    return $result;\n}\n", "  if ($x < $y) {\n    $tmp = $x;\n    $x =\
    \ $y;\n    $y = $tmp;\n  }\n  $x_even = $x_odd = $x_small = $y_even = $y_odd =\
    \ $y_small = $z = $x_large = $y_large = -1;\n  while ($x < $y) {\n    if ($x &\
    \ 1) {\n      if ($x_even < 0 || $x_odd < 0)\n        $x_even = $x;\n      if\
    \ ($x_odd > 0 || $x_even < 0)\n        $x_odd = $x;\n    } else {\n      if ($y_even\
    \ < 0 || $y_odd < 0)\n        $y_even = $y;\n      if ($y_odd > 0 || $y_even <\
    \ 0)\n        $y_odd = $y;\n    }\n    $x++;\n  }\n  while ($y < $x) {\n    if\
    \ ($y & 1) {\n      if ($y_even < 0 || $y_odd < 0)\n        $y_even = $y;\n  \
    \    if ($y_odd > 0 || $y_even < 0)\n        $y_odd = $y;\n    } else {\n    \
    \  if ($z_even < 0 || $z_odd < 0)\n        $z_even = $z;\n      if ($z_odd > 0\
    \ || $z_even < 0)\n        $z_odd = $z;\n    }\n    $y++;\n  }\n  $x_large = $x_even;\n\
    \  if ($x_even < 0)\n    $x_even += $x;\n  if ($x_odd < 0)\n    $x_odd += $x;\n\
    \  $y_large = $y_even;\n  if ($y_even < 0)\n    $y_even += $y;\n  if ($y_odd <\
    \ 0)\n    $y_odd += $y;\n  if ($x_even < $y_even) {\n    $x_small = $x_even;\n\
    \    $x_even = $y_even;\n    $y_small = $y_odd;\n    $y_even = $x_even;\n    $x_large\
    \ = $x_odd;\n    $x_odd = $y_large;\n    $y_large = $y_even;\n    $y_even = $y_odd;\n\
    \  }\n  if ($x_even > $x_large) {\n    $x_even = $x_even;\n    $x_odd = $x_odd;\n\
    \  }\n  if ($y_even > $y_large) {\n    $y_even = $y_even;\n    $y_odd = $y_odd;\n\
    \  }\n  if ($x_odd > $x_small) {\n    $x_odd = $x_odd;\n    $x_even = $x_even;\n\
    \  }\n  if ($y_odd > $y_small) {\n    $y_odd = $y_odd;\n    $y_even = $y_even;\n",
  "    $even = 0;\n    $odd = 0;\n    while ($x <= $y) {\n        if ($x % 2 === 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $x++;\n    }\n    return max($even, $odd);\n}\n", "    // write your\
    \ code in PHP\n}\n</code>\n<|/ a |>\n<| c |>\nYour code works very well but i\
    \ can't see any comments and why it works. I hope i can understand your code very\
    \ well and i wish you a good day mate.\n<|/ c |>\n<| a dscore=0 tags=php,algorithm,arrays\
    \ |>\nThe solution below is based on simple math equation and will work for all\
    \ positive numbers.\n<code>", "    if ($x <= $y) {\n        return ($x > $y) ?\
    \ $x : -1; // bigger number\n    }\n    else {\n        return -1; // smaller\
    \ number\n    }\n}", "    if ($x < $y) {\n        if ($x % 2 == 0 && $y % 2 ==\
    \ 0) {\n            $temp = $x;\n            $x = $y;\n            $y = $temp;\n\
    \        }\n    }\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            return $i;\n        }\n    }\n    return -1;\n}\n", "    if\
    \ ($x > $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n  \
    \  }\n\n    $result = 0;\n    $x = $x - 1;\n\n    while ($x >= 0) {\n        $result\
    \ = 2 * $result + $x;\n        $x--;\n    }\n\n    $x = $y - 1;\n\n    while ($x\
    \ >= 0) {\n        $result = 2 * $result + $x;\n        $x--;\n    }\n\n    if\
    \ ($result == $y) {\n        $result--;\n    }\n\n    return $result;\n}\n", " \
    \   while($x < $y) {\n        if ($x % 2 == 0) {\n            return $x;\n   \
    \     }\n        else {\n            $x = $x + 2;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=php,function |>\n<| c |>\nThanks for your comment,\
    \ i have tried this and i have also added it above but i still get the same error\
    \ message when im trying to submit my form..\n<|/ c |>\n<| c |>\nThe only thing\
    \ I can think of is maybe the function not being properly declared. Try changing\
    \ the line to `function choose_num($x, $y)`\n<|/ c |>\n<| c |>\nI've just tested\
    \ this and it works fine. Do you still get the same error with that code change?\n\
    <|/ c |>\n<| c |>\nYes still the same error when i try to submit the form\n<|/\
    \ c |>\n<| c |>\nCould you post the full code you're using or link me to it if\
    \ it's on a different server?\n<|/ c |>\n<| a dscore=0 |>\nThis may be what you\
    \ want:\n<code>", "  $max = $x;\n  for ($i = $y; $i >= $x; $i--) {\n    if ($i\
    \ % 2 == 0) {\n      $max = $i;\n    }\n  }\n  return $max;\n}\n", "  for ($i\
    \ = $x; $i <= $y; $i++) {\n    if ($i % 2 == 0) {\n      return $i;\n    }\n \
    \ }\n  return -1;\n}\n", "  $max_even = $min_even = 1;\n\n  for ($i = $x; $i <=\
    \ $y; $i++) {\n    if ($i % 2 != 0) {\n      if ($max_even < $i) {\n        $max_even\
    \ = $i;\n      } else if ($min_even > $i) {\n        $min_even = $i;\n      }\n\
    \    }\n  }\n\n  return $max_even < $x ? -1 : $max_even;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks Dmitry, this is exactly what I needed. Although I went with the\
    \ answer from Berrylon as it was more complete in its explanation and a bit simpler\
    \ to understand for me. Although I do appreciate all your answers :)\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n\n$min = 1;\n$max = 10;\n$range = $max - $min;\n\
    \nfor($i = $min; $i <= $max; $i++)\n{\n  if($i % 2 == 0)\n  {\n    echo $i . \"\
    <br>\";\n  }\n}\n", "    if ($x == $y) {\n        if ($x % 2 == 0) {\n       \
    \     return $x;\n        } else {\n            return $y - 1;\n        }\n  \
    \  } else {\n        $mid = ($x + $y) / 2;\n        if (choose_num($x, $mid) ==\
    \ -1) {\n            return -1;\n        } elseif (choose_num($mid, $y) == -1)\
    \ {\n            return $mid;\n        } else {\n            return choose_num($mid,\
    \ $y);\n        }\n    }\n}", "    if ($x === $y) {\n        return 0;\n    }\n\
    \    $max = $x;\n    foreach (range(1, $y) as $n) {\n        $max_n = $x - ($x\
    \ * $n - $x);\n        if ($max_n % 2 === 0) {\n            $max = $max_n;\n \
    \       }\n    }\n    return $max;\n}\n", "    if ($x >= $y) {\n        $temp\
    \ = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    if ($x === $y) {\n\
    \        return $x;\n    }\n\n    while ($x % 2 === 0) {\n        $x = $x/2;\n\
    \    }\n    while ($y % 2 === 0) {\n        $y = $y/2;\n    }\n\n    if ($x <\
    \ $y) {\n        return $x;\n    }\n    return $y;\n}", "    $a = $x + $y;\n \
    \   $b = $x + $y - 1;\n    if ($a % 2 != 0)\n    {\n        $b++;\n    }\n   \
    \ return $b;\n}\n\n$max = 0;\nfor ($i = 1; $i <= 10; $i++)\n{\n    for ($j = 1;\
    \ $j <= 10; $j++)\n    {\n        $result = choose_num($i, $j);\n        if ($result\
    \ > $max)\n        {\n            $max = $result;\n        }\n    }\n}\n\nprint(\"\
    The biggest even number is: $max\");", "  if ($x < $y) {\n    $min = min($x, $y);\n\
    \    $max = max($x, $y);\n    if ($min == $max && $min % 2 == 0) {\n      return\
    \ $min;\n    }\n  } else {\n    $min = min($y, $x);\n    $max = max($y, $x);\n\
    \    if ($min == $max && $min % 2 == 0) {\n      return $min;\n    }\n  }\n  \n\
    \  // If we're trying to determine a number that doesn't divide cleanly,\n  //\
    \ then we must assume that we're in an odd number.\n  \n  // Now that we've determined\
    \ that we're in an odd number, we know that\n  // $x % 2 == 0 and $y % 2 == 1.\
    \ However, if $x == $y we must revisit\n  // this decision because we were in\
    \ an even number before this and the\n  // number we were trying to determine\
    \ was in the lower half of the range.\n  \n  // Now that we have determined that\
    \ we're in an odd number, we have that\n  // $x % 2 == 0 and $y % 2 == 1. We also\
    \ know that $x is bigger than $y.\n  // So we must choose $x as the middle number\
    \ and choose the number that\n  // divides $x evenly and $y evenly.\n  \n  //\
    \ As a final check, let's see if the even number divides $x evenly.\n  $divides_x_evenly\
    \ = ($x % 2 == 0 && $x % $y == 0);\n  \n  // If $divides_x_evenly is true then\
    \ we should return $x.\n  // If $divides_x_evenly is false then we should return\
    \ $y.\n  \n  return $divides_x_evenly ? $x : choose_num($y, $x); // $x == $y\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThe problem is in the function above,\
    \ not this one.\n<|/ c |>\n<| a dscore=1 |>\nThis should be as fast as you can\
    \ get in PHP (tested in PHP7):\n<code>\n$x = floor(min($x, $y) / 2);\n$y = max(1,\
    \ floor(($x - min($x, $y)) / 2));\n$x = max($x, $y);\n</code>\n<|/ a tags=php,math\
    \ |>\n<| a dscore=1 tags=php,math |>\nThis function will work even with negative\
    \ numbers just fine.\n<code>", "    if ($x < $y) {\n        $temp = $x;\n    \
    \    $x = $y;\n        $y = $temp;\n    }\n\n    if ($x < 2) return -1;\n    if\
    \ ($y < 2) return -1;\n\n    do {\n        if ($x % 2 == 0) {\n            $x\
    \ = ($x + $y) / 2;\n        }\n        else {\n            $y = ($y + $x) / 2;\n\
    \        }\n    } while ($x <= $y);\n\n    return $x;\n}", "\t$mid = ($x + $y)\
    \ / 2;\n\t$even_num = is_even($mid);\n\tif ($even_num) {\n\t\t$bigger_mid = choose_num($x,\
    \ $mid);\n\t\tif ($bigger_mid > $mid) {\n\t\t\treturn $bigger_mid;\n\t\t}\n\t\t\
    return choose_num($mid, $y);\n\t} else {\n\t\treturn $mid;\n\t}\n}\n", "    if($x\
    \ < $y) $temp = $y;\n    else $temp = $x;\n    for($i = $y; $i >= $x; $i--) {\n\
    \        if($i % 2 == 0 && $i > 0) {\n            $temp = $i;\n        }\n   \
    \ }\n    return $temp;\n}\n", "    if ($x < $y) {\n        $temp = $x;\n     \
    \   $x = $y;\n        $y = $temp;\n    }\n    // If $x > $y, swap them to make\
    \ the range [y, x] inclusive here.\n    $x_even = $x_odd = $x;\n    $y_even =\
    \ $y_odd = $y;\n\n    $even = true;\n    while (true) {\n        if ($x_even %\
    \ 2 || $y_even % 2) {\n            if ($even) {\n                $x_even += 1;\n\
    \                $y_even += 1;\n            } else {\n                $x_odd +=\
    \ 1;\n                $y_odd += 1;\n            }\n        } else {\n        \
    \    if ($even) {\n                return $x_even;\n            } else {\n   \
    \             return $y_even;\n            }\n        }\n        $even = !$even;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php,math,algorithm,random\
    \ |>\nA simple random generator is usually sufficient for such tasks.\nHere is\
    \ an example using the Mersenne twister (pseudo-random number generator):\n<code>\n\
    <?php\n\n$generator = new MersenneTwister();\n", "    for($i = $x; $i < $y; $i++)\
    \ {\n        if($i % 2 == 0)\n            $x = $i;\n        else\n           \
    \ $y = $i;\n    }\n    return ($x == $y) ? $x : -1;\n}\n", "    if ($x >= $y)\
    \ {\n        echo \"Invalid input\";\n    } else {\n        return $y;\n    }\n\
    }", "    $smaller_num = $x;\n    $larger_num = $y;\n    if ($smaller_num >= $larger_num)\
    \ {\n        $larger_num = $smaller_num;\n    }\n    $smaller_num -= 1;\n    $larger_num\
    \ -= 1;\n    while ($smaller_num >= 0) {\n        if ($larger_num % 2 == 0) {\n\
    \            $smaller_num -= 2;\n        } else {\n            $smaller_num -=\
    \ 1;\n        }\n        if ($smaller_num == 0) {\n            $smaller_num -=\
    \ 1;\n        }\n        $larger_num -= 1;\n    }\n    return $larger_num;\n}\n",
  "    $min = $x > $y ? $x : y;\n    $max = $x > $y ? $y : $x;\n    for($i = $min;\
    \ $i <= $max; $i++) {\n        if($i % 2 == 0) {\n            return $i;\n   \
    \     }\n    }\n    return -1;\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n    \n    // While loop\n    $i = 0; // i starts at 0, and ends at $max\
    \ - 1 \n    while ($i <= $max - 1) {\n        if ($i % 2 == 0) {\n           \
    \ // If the remainder is 0, then the number is even.\n            if ($i === 0)\
    \ {\n                return $x;\n            } else {\n                return\
    \ $y;\n            }\n        } else {\n            // If the remainder is not\
    \ 0, then the number is odd.\n            return $y;\n        }\n        $i++;\
    \ // Increment i\n    }\n}\n", "    while($x <= $y) {\n        $x++;\n       \
    \ if($x % 2 == 0) {\n            $result = $x;\n            break;\n        }\n\
    \    }\n\n    while($x > $y) {\n        $x--;\n        if($x % 2 == 0) {\n   \
    \         $result = $x;\n            break;\n        }\n    }\n    return $result;\n\
    }\n", "  if ($x > $y) {\n    // swap x and y if necessary\n    $tmp = $x;\n  \
    \  $x = $y;\n    $y = $tmp;\n  }\n\n  if ($x <= 0 || $y <= 0) {\n    return -1;\n\
    \  }\n\n  $max_even = 0;\n  $max_odd = 0;\n\n  foreach (range($x, $y) as $val)\
    \ {\n    if ($val % 2 == 0) {\n      $max_even = max($max_even, $val);\n    }\
    \ else {\n      $max_odd = max($max_odd, $val);\n    }\n  }\n\n  return ($max_even\
    \ + $max_odd);\n}\n</code>\n<|/ a tags=max,function,php dscore=2 |>\n<| c |>\n\
    This would be a better answer if you explained how the code you provided answers\
    \ the question.\n<|/ c |>\n<| c |>\nThis is not correct, what if your input is\
    \ `choose_num(10,30)`?\n<|/ c |>\n<| c |>\nOh, I see it now. I was thinking in\
    \ terms of Python. In PHP you'll have to do it by hand.\n<|/ c |>\n<| a |>\n<code>\n\
    $numbers = range(1,20);\nrsort($numbers);\n$last_even = array_pop($numbers);\n\
    $last_odd = array_pop($numbers);\nvar_dump($last_even, $last_odd);\n</code>\n\
    <|/ a tags=max,function,php dscore=2 |>\n<| c |>\nThis answer misses the point,\
    \ it isn't about finding the largest, it is about finding the max number of evenly\
    \ spaced intervals. Your code will get you the max number of evenly spaced intervals.\n\
    <|/ c |>\n<| c |>\nThis is not correct either, this gives the wrong answer (even\
    \ number intervals instead of even numbers)\n<|/ c |>\n<| c |>\nThis is an interesting\
    \ solution, it uses array_pop() to find the largest number in a sorted array,\
    \ then finds the largest even number of intervals between 1 and that number. Very\
    \ clever.\n<|/ c |>\n<| c |>\nI don't understand your comment. Why do you say\
    \ that my code gives the wrong answer? The question asked for the largest number\
    \ of evenly spaced intervals, and the code I posted does exactly that. If your\
    \ question was about finding evenly spaced numbers between 1 and a number not\
    \ evenly divisible by 2, then this solution would not work, because it would only\
    \ give an even number of intervals between 1 and 3.\n<|/ c |>\n<| c |>\nYour code\
    \ is wrong, it gives the wrong answer, it gives the last ", "    $range = $x -\
    \ $y;\n    \n    if ($range > 0) {\n        return $x + $range * 2;\n    }\n\n\
    \    return -1;\n}\n\n$number = choose_num($start, $end);\nif ($number == -1)\
    \ {\n    echo 'There is no even number between ' . $start . ' and ' . $end;\n\
    }\nelse {\n    echo 'Even number between ' . $start . ' and ' . $end . ' is '\
    \ . $number;\n}", "\twhile ($x < $y) {\n\t\tif ($x % 2 != 0) {\n\t\t\t$y = ($y\
    \ + 1);\n\t\t} else {\n\t\t\t$x = ($x + 1);\n\t\t}\n\t}\n\treturn $x;\n}\n", " \
    \   if ($x >= $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n  \
    \      $min = $y;\n        $max = $x;\n    }\n    do {\n        $middle = ($min\
    \ + $max) / 2;\n        $middleval = big_even($middle);\n        if ($min == $middle)\
    \ {\n            $min = $middleval;\n        } else if ($max == $middle) {\n \
    \           $max = $middleval;\n        } else {\n            if ($middleval <\
    \ $min && $middleval < $max)\n                $min = $middleval;\n           \
    \ else if ($middleval > $min && $middleval > $max)\n                $max = $middleval;\n\
    \            else\n                return $middle;\n        }\n    } while (min\
    \ != max);\n    return $min;\n}\n", "    if ($x <= $y) {\n        return $x;\n\
    \    } elseif ($x > $y) {\n        return $y;\n    }\n    foreach (range($x, $y\
    \ + 1) as $n) {\n        if ($n % 2 === 0) {\n            return $n;\n       \
    \ }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=1 tags=php |>\n<| c |>\n\
    Hi, thank you for your answer. Just for clarification, why does it not work for\
    \ the case I described in my question? Thanks for helping me out a lot!\n<|/ c\
    \ |>\n<| c |>\nBecause your solution is wrong. Try for example `choose_num(12,10)`\
    \ which should return `12`, but your code returns `11`.\n<|/ c |>\n<| c |>\nSo\
    \ how would I implement it then? I guess I didn't think of it, because I thought\
    \ it would be pretty trivial to implement... Thanks for clarifying\n<|/ c |>\n\
    <| a tags=php |>\n<code>", "  if ($x < $y) \n    return choose_num($y, $x);\n\
    \  if ($x % 2 == 0) \n    return $y;\n  else \n    return $x % 2;\n}\n\n$ans =\
    \ 0;\nfor ($x = 0; $x <= 10; $x++) {\n  for ($y = 0; $y <= 10; $y++) {\n    $ans\
    \ = max($ans, choose_num($x, $y));\n  }\n}\necho \"Answer: $ans <br />\\n\";\n",
  "    if($x > $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n\
    \    }\n    while($x < $y) {\n        $x++;\n        if($x % 2 == 0) {\n     \
    \       if($x != $y) {\n                return $x;\n            }\n        } else\
    \ {\n            $x--;\n        }\n    }\n    return -1;\n}\n", "    if ($x <=\
    \ $y) {\n        for ($i = $x; $i <= $y; $i++) {\n            if ($i % 2 === 0)\
    \ {\n                return $i;\n            }\n        }\n    } else {\n    \
    \    for ($i = $x; $i >= $y; $i--) {\n            if ($i % 2 === 0) {\n      \
    \          return $i;\n            }\n        }\n    }\n    return -1;\n}\n",
  "\t$num = 0;\n\twhile ($x < $y) {\n\t\t++$num;\n\t\t$x = $x * 2 + $y;\n\t}\n\treturn\
    \ $num > $y ? $num - $y : -1;\n}\n", "    $biggest = min($x, $y);\n    $smaller\
    \ = max($x, $y);\n    if ($biggest == $smaller) return -1;\n    while ($biggest\
    \ % 2 == 0) {\n        $biggest++;\n    }\n    while ($smaller % 2 == 0) {\n \
    \       $smaller--;\n    }\n    return $biggest % 2 != 0 ? $biggest : $smaller;\n\
    }", "    $min = $x > $y ? $y : $x;\n    $max = $x > $y ? $x : $y;\n    \n    while\
    \ (true) {\n        if ($min < $max) {\n            $mid = $min + ($max - $min)\
    \ / 2; // integer division\n            if ($mid % 2 == 0 && $mid <= $x && $mid\
    \ >= $y) {\n                return $mid;\n            }\n            if ($mid\
    \ % 2 != 0 && $mid >= $x && $mid <= $y) {\n                return $mid;\n    \
    \        }\n        }\n        if ($x == $y) {\n            return $x;\n     \
    \   }\n        \n        $min = $x < $y ? $x : $y;\n        $max = $x < $y ? $y\
    \ : $x;\n    }\n}\n\n/**\n * Checks if a value is within a range.\n */", "  $x_even\
    \ = $x - $x%2;\n  $y_even = $y - $y%2;\n  if ($x_even > $y_even) {\n    return\
    \ $x;\n  } else {\n    return $y;\n  }\n}\n", "    $low = $x;\n    $high = $y;\n\
    \    if ($low > $high) {\n        $temp = $low;\n        $low = $high;\n     \
    \   $high = $temp;\n    }\n    $x = $low + 1;\n    $y = $high - 1;\n    $even\
    \ = 0;\n    while ($x < $y) {\n        $result = $x + $y;\n        if ($result\
    \ % 2 == 0) {\n            $even++;\n        }\n        $x = $x + 1;\n       \
    \ $y = $y - 1;\n    }\n    if ($even > 0 && $even < $x) {\n        return -1;\n\
    \    }\n    return $x;\n}", "    $max = max($x, $y);\n    $min = min($x, $y);\n\
    \    if ($max == $min) {\n        return $min;\n    }\n\n    $result = 0;\n  \
    \  while ($max % 2 == 0) {\n        $max++;\n    }\n    while ($min % 2 == 0)\
    \ {\n        $min--;\n    }\n    while ($max > $min) {\n        if ($max % 2 ==\
    \ 0) {\n            $max++;\n        } else {\n            $max--;\n        }\n\
    \    }\n    while ($min > $max) {\n        if ($min % 2 == 0) {\n            $min--;\n\
    \        } else {\n            $min++;\n        }\n    }\n    if ($min < $max)\
    \ {\n        return $max;\n    } else {\n        return $min;\n    }\n}\n", " \
    \ $even = 1;\n  for ($i = $x; $i <= $y; $i++) {\n    if ($i % 2 === 0) {\n   \
    \   $even = $even * $i;\n    }\n  }\n  return $even;\n}", "    // Your code here\n\
    \    $num = -1 ;\n    if ($x==$y) {\n        $num = $x ; // No choice \n    }\n\
    \    else if ($x<$y) {\n        $num = $y-1 ;\n    }\n    else {\n        $num\
    \ = $x-1 ;\n    }\n    while ($num>0) {\n        if ($num%2==0) {\n          \
    \  $num = ceil($num/2)  ;\n        }\n        else {\n            $num = floor($num/2)\
    \ ;\n        }\n    }\n    return $num ;\n}\n\n$x = choose_num (12, 15) ;", " \
    \ $max = $x;\n  $min = $y;\n  \n  while ($max - $min > 1) {\n    $mid = floor(($max+$min)\
    \ / 2);\n    if ($mid >= $x && $mid <= $y) {\n      $min = $mid;\n    } else {\n\
    \      $max = $mid;\n    }\n  }\n  \n  return $max;\n}\n\necho \"<br>\";\n", " \
    \   if ($x > $y) {\n        list($x, $y) = [$y, $x];\n    }\n    if ($x == $y)\
    \ {\n        return -1;\n    }\n    if ($x % 2 != 0) {\n        $x -= 1;\n   \
    \ }\n    $i = 1;\n    while ($x < $y) {\n        if ($x % 2 != 0 && $i % 2 ==\
    \ 0) {\n            return -1;\n        }\n        $i += 1;\n        $x -= 1;\n\
    \    }\n    return $x;\n}\n</code>\n<|/ a tags=php,integer,random,math |>\n<|\
    \ c |>\nI guess you have misunderstood the question\n<|/ c |>\n<| c |>\nThank\
    \ you for your contribution. However this does not return the number generated\
    \ by the random number generator. I do not know PHP, so I can't figure out how\
    \ to return the number generated by the rand function, but thanks for your help\
    \ anyway\n<|/ c |>\n<| c |>\nNo I have not. Sorry about that. I was only trying\
    \ to help the person who asked the question. Saying that this doesn't return the\
    \ number generated by the random number generator was just an inaccuracy. My code\
    \ does return an integer generated by the random number. Try running the code\
    \ before downvoting. Thanks\n<|/ c |>\n<| c |>\nYeah i know! But I didn't understand\
    \ your solution for some reason.. anyway i learned a lot from this answer and\
    \ I learned a lot more!\n<|/ c |>\n<| c |>\n, Glad I could help. If you're happy\
    \ with the answer, would you mind marking it as answered? Thanks!\n<|/ c |>\n\
    <| a tags=php,integer,random,math dscore=0 |>\n<code>", "    $min_value = $x >\
    \ $y ? $x : $y;\n    $max_value = $x > $y ? $y : $x;\n    \n    while ($min_value\
    \ != $max_value) {\n        $min_value = $max_value;\n        $min_value = $min_value\
    \ + $max_value;\n    }\n    \n    return $min_value;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=function,php |>\nHere is my solution.\n<code>\n<?php", "    if\
    \ ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n  \
    \  }\n    while ($y > 0 && $x > 0 && $x % 2 == 0) {\n        $y = $y - 1;\n  \
    \      $x = $x - 2;\n    }\n    while ($y < $x && $x > 0) {\n        $x = $x -\
    \ 2;\n    }\n    return $x;\n}\n", "    for ($i = $x; $i <= $y; $i++) {\n    \
    \    if ($i % 2 == 0) {\n            return $i;\n        }\n    }\n    return\
    \ -1;\n}", "    if ($x < $y) {\n        $t = $x;\n        $x = $y;\n        $y\
    \ = $t;\n    }\n    $smaller = $x;\n    $greater = $y;\n    // If the number is\
    \ small enough, return it\n    if ($y >= $smaller) {\n        return $y;\n   \
    \ }\n    // If the number is larger than the larger number, return -1\n    if\
    \ ($x < $greater) {\n        return -1;\n    }\n    // If $x = $y, then the number\
    \ is even.\n    // Test for divisibility by 2\n    if ($x % 2 == 0) {\n      \
    \  return $x;\n    }\n    // Find biggest even number that divides evenly by smaller\
    \ number\n    while ($smaller % 2 == 0 && $greater % 2 == 0) {\n        $smaller\
    \ = $smaller / 2;\n        $greater = $greater / 2;\n    }\n    if ($smaller %\
    \ 2 == 0) {\n        return $smaller;\n    }\n    return -1;\n}", "  $evens =\
    \ 0;\n  for ($x = $x; $x <= $y; $x++) {\n    if ($x % 2 === 0) {\n      $evens++;\n\
    \    }\n  }\n\n  if ($evens > 0) {\n    return $x;\n  } else {\n    return -1;\n\
    \  }\n}\n</code>\n<|/ a tags=php,function |>\n<| c |>\nI love you. Thank you very\
    \ much\n<|/ c |>\n<| c |>\nYou're welcome! It was a fun problem, you gotta love\
    \ it.\n<|/ c |>\n<| a tags=php,function |>\nOne option is to use a switch statement\
    \ for what you are trying to achieve:\n<code>\n<?php", "    $low = min($x, $y);\n\
    \    $high = max($x, $y);\n    $mid = floor(($high + $low) / 2);\n    if ($mid\
    \ == $low) {\n        return $mid;\n    }\n    if ($mid == $high) {\n        return\
    \ $mid;\n    }\n    if ($x % 2 == 0) {\n        return choose_num($x, $mid);\n\
    \    } else {\n        return choose_num($mid, $y);\n    }\n}", "  $result = -1;\n\
    \  for ($i = $x; $i <= $y; $i++) {\n    $result = $i;\n  }\n  return $result;\n\
    }\n\n$a = choose_num($x, $y);\necho \"$x$y$a\";", "    if ($x === $y) {\n    \
    \    return $x;\n    }\n    if ($x <= $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    $evens\
    \ = array();\n    for ($i = 0; $i <= $max; $i++) {\n        if (($i % 2) == 0)\
    \ {\n            $evens[] = $i;\n        }\n    }\n    $max_even = $evens[0];\n\
    \    for ($i = 1; $i <= count($evens); $i++) {\n        if ($evens[$i] > $max_even)\
    \ {\n            $max_even = $evens[$i];\n        }\n    }\n    return $max_even;\n\
    }\n", "  // Initialize result to -1\n  $result = -1;\n  // Initialize $x to $y,\
    \ since if $x == $y, then $x must be an even number\n  $x = $y;\n  do {\n    if\
    \ ($x % 2 == 0) {\n      $x += 1;\n    } else {\n      $x -= 1;\n    }\n  } while\
    \ ($x >= $y);\n  if ($x == $y) {\n    $result = $x;\n  }\n  return $result;\n\
    }\n\necho \"\\n\\n\" . choose_num(12, 15) . \"\\n\\n\";\necho \"\\n\\n\" . choose_num(13,\
    \ 12) . \"\\n\\n\";", "    if ($x >= $y) {\n        $temp = $x;\n        $x =\
    \ $y;\n        $y = $temp;\n    }\n    if ($x == 0 || $y == 0) {\n        return\
    \ -1;\n    }\n    if ($x <= 0) {\n        return 0;\n    }\n    if ($y <= 0) {\n\
    \        return $x;\n    }\n    $xpos = 0;\n    $ypos = 0;\n    $xmod = $x % 2;\n\
    \    $ymod = $y % 2;\n    while ($xpos < $x) {\n        $xpos += 1;\n        if\
    \ ($xmod === 1) {\n            $xmod = 2;\n            $xpos++;\n        }\n \
    \   }\n    while ($ypos < $y) {\n        $ypos += 1;\n        if ($ymod === 1)\
    \ {\n            $ymod = 2;\n            $ypos++;\n        }\n    }\n    if ($xpos\
    \ == $x) {\n        return $y;\n    } elseif ($ypos == $y) {\n        return $x;\n\
    \    } else {\n        return -1;\n    }\n}\n", "    $even = array();\n    $odd\
    \ = array();\n    for ($i=$x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $even[] = $i;\n        } else {\n            $odd[] = $i;\n     \
    \   }\n    }\n\n    // If the array is empty, return -1\n    if (!is_array($even)\
    \ && !is_array($odd)) {\n        return -1;\n    }\n\n    // Find the largest\
    \ odd number in the array\n    $largest = max($odd);\n\n    // If $largest is\
    \ even, add 2 to it to get an even number\n    if (in_array($largest, $even))\
    \ {\n        $largest++;\n    }\n\n    // Return $largest\n    return $largest;\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nNice! And you got it right in about 20\
    \ mins ;)\n<|/ c |>\n<| c |>\nVery nice, I thought of doing it in a loop, but\
    \ this works better. Thanks!\n<|/ c |>\n<| a tags=php |>\nHere's a solution that\
    \ doesn't require any loops or recursion. \nThe key is to determine whether x\
    \ is bigger than y. \n<code>", "  if($x < $y) {\n    while($x < $y) {\n      $x\
    \ = $x + 1;\n    }\n  } else {\n    while($x > $y) {\n      $y = $y - 1;\n   \
    \ }\n  }\n  $max = $x;\n  $min = $y;\n  for($i = $x; $i <= $y; $i++) {\n    if($i\
    \ % 2 == 0) {\n      $max = $i;\n      $min = $max - 1;\n    }\n  }\n  if($max\
    \ > $min) {\n    return $max;\n  } else {\n    return -1;\n  }\n}", "  $min_num\
    \ = ($x > $y) ? $x : ceil($x / $y);\n  $max_num = ($y > $x) ? $y : ceil($y / $x);\n\
    \  for($i = 1; $i <= $max_num; $i++) {\n    if ($i % 2 === 0) {\n      return\
    \ $i;\n    }\n  }\n  return -1;\n}\n", "  $min = min($x, $y);\n  $max = max($x,\
    \ $y);\n  $ans = $min - 1;\n  for ($i = $min + 2; $i <= $max; $i++) {\n    $ans\
    \ = ($i > $min) ? max($ans, $i - $min) : -1;\n  }\n  return $ans;\n}\n", "  return\
    \ ($x > $y) ? ($x + ($y - $x)) : -1;\n}", "\twhile ($x > $y) {\n\t\tif ($x % 2\
    \ === 0) {\n\t\t\t$x = floor($x / 2);\n\t\t} else {\n\t\t\t$x = ceil($x / 2);\n\
    \t\t}\n\t}\n\treturn $x;\n}\n\n$evens = array_filter($numbers, 'choose_num');\n\
    echo '<pre>';\nprint_r($evens);", "  $range = $y - $x + 1;\n  if ($range <= 0)\
    \ return -1;\n  if ($range == 2) return $x;\n  if ($range == 5) return $x + 1;\n\
    \  $x = $x - 1;\n  while ($x > 0) {\n    if ($x % 2 == 0) {\n      $x = $x / 2;\n\
    \    } else {\n      return $x;\n    }\n  }\n  return -1;\n}", "    $x = $x -\
    \ 1;\n    $y = $y - 1;\n    if ($x == 0) {\n        return $y;\n    } else if\
    \ ($y == 0) {\n        return $x;\n    }\n    if ($x % 2 == 0) {\n        return\
    \ choose_num($x - 1, $y);\n    } else {\n        return choose_num($x, $y - 1);\n\
    \    }\n}\n", "    if ($x > $y)\n        $t = $x;\n    else\n        $t = $y;\n\
    \    while ($t >= $y) {\n        $t = $t % $x;\n        if ($t < $y) {\n     \
    \       $t = $x + $t;\n            $t++;\n            if ($t > $x)\n         \
    \       $t--;\n        }\n    }\n    return $t;\n}", "    if ($x > ($y - 1)) {\n\
    \        return -1;\n    }\n    if ($x == $y) {\n        return 0;\n    }\n  \
    \  if ($x === ($y - 1)) {\n        return $x;\n    }\n    $even = 0;\n    $odd\
    \ = 1;\n    for ($i = $y; $i >= $x; $i--) {\n        if ($odd === 1) {\n     \
    \       if ($i % 2 === 1) {\n                $even = $i;\n            } else {\n\
    \                $odd = $i;\n            }\n        }\n    }\n    return $even;\n\
    }\n\n$num1 = choose_num(12, 15);\n$num2 = choose_num(13, 12);\necho \"$num1 =\
    \ $num2\\n\";", "  if ($x == $y) \n    return $x;\n  else if ($x < $y) \n    return\
    \ choose_num($y, $x);\n  else \n    return choose_num($x, $y);\n}", "  $result\
    \ = -1;\n  if ($x > $y || $x == $y) {\n    return $result;\n  }\n\n  $mid = floor(($x\
    \ + $y) / 2);\n\n  if ($mid % 2 == 0) {\n    if ($mid == 0) {\n      $result =\
    \ $x;\n    } else {\n      $result = $y;\n    }\n  }\n\n  return $result;\n}",
  "    $min = min($x, $y);\n    $max = max($x, $y);\n    $a = 1;\n    $b = 1;\n\n\
    \    for ($i = $min; $i <= $max; $i++) {\n        $c = $a + $b;\n        if ($c\
    \ * $c == $i) {\n            $res = $c;\n        } else {\n            $res =\
    \ -1;\n        }\n        $a = $b;\n        $b = $res;\n    }\n\n    return $res;\n\
    }", "    if ($x == $y) \n        return $x;\n    $a = $y - ($x % $y);\n    $x\
    \ = ($x - $a) / $y;\n    $y = $a - ($x % $y);\n    if ($y != 0)\n        return\
    \ $x + choose_num($x, $y) - 1;\n    else\n        return -1;\n}\n", "    $evens_cnt\
    \ = 0;\n    for ($num = $x; $num <= $y; $num++) {\n        if ($num % 2 == 0)\
    \ {\n            $evens_cnt++;\n        }\n    }\n    if ($evens_cnt == 0) {\n\
    \        return $x;\n    }\n    $num = -1;\n    for ($num = $x; $num <= $y; $num++)\
    \ {\n        if ($num % 2 == 0) {\n            break;\n        }\n    }\n    return\
    \ $num;\n}\n", "  $min = ($x < $y) ? $x : abs($x);\n  $max = ($x > $y) ? $y :\
    \ abs($y);\n  $step = ($max - $min) / 2;\n  $max = $max + $step;\n  while ($max\
    \ > $min) {\n    if ($max % 2 === 0)\n      return $max;\n    $max -= 1;\n  }\n\
    \  return -1;\n}\n", "  for ($i = $y; $i > $x; $i--) {\n    if ($i % 2 == 0) {\n\
    \      return $i;\n    }\n  }\n  return -1;\n}", "    $even = 0;\n    $odd = 0;\n\
    \    while ($x <= $y) {\n        if ($x % 2 == 0) {\n            $even++;\n  \
    \      } else {\n            $odd++;\n        }\n        $x++;\n    }\n    if\
    \ ($even == 0 && $odd > 0) {\n        return -1;\n    }\n    return $even > $odd\
    \ ? $even : $odd;\n}\n", "  if ($x > $y)\n    return -1;\n  $lower = $x;\n  $upper\
    \ = $y;\n  while ($upper - $lower > 1) {\n    $mid = ($lower + $upper) / 2;\n\
    \    if ($mid % 2 == 0 && $mid < $x && $mid > $y)\n      return $mid;\n    else\
    \ if ($mid > $x && $mid < $y)\n      $upper = $mid;\n    else if ($mid < $x)\n\
    \      $lower = $mid;\n  }\n  return $lower;\n}", "    if ($x > $y) {\n      \
    \  $min = $x;\n        $max = $y;\n        $max_index = $x;\n    } else {\n  \
    \      $min = $y;\n        $max = $x;\n        $max_index = $y;\n    }\n\n   \
    \ $even = 0;\n    $odd = 1;\n    $result = -1;\n    while ($min <= $max) {\n \
    \       if ($min % 2 == 0) {\n            $even++;\n        } else {\n       \
    \     $odd++;\n        }\n        $min++;\n        $max++;\n    }\n\n    if ($even\
    \ > $odd) {\n        $result = $max_index;\n    }\n\n    return $result;\n}\n",
  "    if ($x == $y) {\n        return $x;\n    }\n    \n    $max = $x;\n    $min\
    \ = $y;\n    \n    // Find max and min and make sure they stay positive\n    while\
    \ ($min > $max) {\n        $max++;\n    }\n    while ($min < $max) {\n       \
    \ $min--;\n    }\n    \n    // If the max is larger than the min then return max\n\
    \    if ($max > $min) {\n        return $max;\n    }\n    \n    // If the min\
    \ is less than the max then return min\n    return $min;\n}", "    for ($i = $x;\
    \ $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            return $i;\n    \
    \    }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\n\
    This problem can be solved by using the floor function. This function takes a\
    \ number as input and returns the lowest integer greater than or equal to it.\
    \ \n<code>\n<?php\n$num = 12;\necho floor($num);\n</code>\nOutput\n<code>\n12\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n<?php ", "    if (!is_int($x) ||\
    \ !is_int($y)) { return -1; }\n    if ($x > $y) { return -1; }\n    if ($y ==\
    \ 0) { return $x; }\n    if ($y > $x) { return -1; }\n    $bigger = $x;\n    $smaller\
    \ = $y;\n    $loops = 0;\n    do {\n        $bigger += ($bigger % 2);\n      \
    \  $smaller++;\n        $loops++;\n    } while ($bigger < $smaller && $bigger\
    \ % 2 == 0 && $loops < 100);\n    return $bigger;\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nVery elegant solution!\n<|/ c |>\n<| c |>\nThis only works for\
    \ the two integers given above. Not for the general case.\n<|/ c |>\n<| a tags=php,algorithm\
    \ dscore=1 |>\nIt seems to me that the easiest way to handle this would be to\
    \ keep track of the max number that you've found so far and check if it's greater\
    \ than the current number, and if it's greater than the new number, replace the\
    \ new number with the current one. \n<code>", "\tif ($x > $y) $tmp = $x; $x =\
    \ $y; $y = $tmp;\n\tfor ($a = $x; $a <= $y; $a++) {\n\t\tif ($a % 2 == 0) {\n\t\
    \t\t$n = $a / 2;\n\t\t\t$a = $n + 1;\n\t\t\tif ($a > $y) $tmp = $a; $y = $tmp;\n\
    \t\t} else {\n\t\t\treturn $a;\n\t\t}\n\t}\n\treturn -1;\n}", "  $range = $y -\
    \ $x + 1; // $range is the range of the numbers in the array\n  for($i=$x;$i<=$y;$i++){\n\
    \    $even = $i % 2 === 0;\n    if ($even) {\n      if ($range >= $i) { $range\
    \ -= $i; $x = $i; } // if the current number is \n      // greater than the $range,\
    \ then reset the number x to the number\n      // in the array that is greater\
    \ than $range\n    } else {\n      if ($range <= $i) { $range -= $i; $y = $i;\
    \ } // if the current number\n      // is less than the $range, then reset the\
    \ number y to the number\n      // in the array that is less than $range\n   \
    \ }\n  }\n  return $x;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm,for-loop\
    \ |>\nA simple and straightforward approach would be to just keep track of the\
    \ lowest and highest number and then loop through the array with a simple check\
    \ of whether the number is in range:\n<code>\n$range = 10;\n\n$numbers = [10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90];\n\n$lowest = null;\n$highest = null;\n\nforeach\
    \ ($numbers as $number) {\n    if ($lowest === null || $number < $lowest) {\n\
    \        $lowest = $number;\n    } elseif ($highest === null || $highest < $number)\
    \ {\n        $highest = $number;\n    }\n}\n\necho \"Lowest: $lowest, Highest:\
    \ $highest\\n\";\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for the answer!\
    \ Your solution makes sense, but unfortunately I cannot understand how to implement\
    \ it in my situation where I am using a variable for the range to begin with.\
    \ I need $range to be a variable that can change during the course of execution\
    \ of the program. Would you mind helping me figure this out?\n<|/ c |>\n<| c |>\n\
    I made a new function called choose_num that I used to define $range and I call\
    \ it from the main program and it works. Thank you for the help!\n<|/ c |>\n<|\
    \ a tags=php,algorithm,for-loop dscore=0 |>\nI wrote this function to find the\
    \ max range and then use that range to find the max number in the range.\n<code>",
  "    if ($x < $y) {\n        list($x, $y) = array($y, $x);\n    }\n    for($i =\
    \ $y; $i > $x; $i--) {\n        if ($i % 2 == 0) {\n            return $i;\n \
    \       }\n    }\n    return -1;\n}\n", "    $min_x = $x - ($x % 2);\n    $max_y\
    \ = $y + ($y % 2);\n    $max_even = ($max_y - $min_x + 1);\n    if ($max_even\
    \ < 1)\n        return -1;\n    else\n        return $max_even;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is an interesting solution. However, when I tried it out\
    \ with various inputs, it seemed that it is not working when the input x is less\
    \ than y. E.g., choose_num(-7, -8) = -3\n<|/ c |>\n<| c |>\n, just fixed it.\n\
    <|/ c |>\n<| c |>\nThis was the best one I could find as well.  It took me a while\
    \ to wrap my head around it, but I understand what it's doing and it worked just\
    \ fine for me. Thanks!\n<|/ c |>\n<| a dscore=5 |>\nThis question has already\
    \ been answered, but I thought I'd add a few things I learned. One of the things\
    \ I found was that even though it might look like this is a duplicate question,\
    \ it's not. Here are a few key things.\n\nThe most simple solution to finding\
    \ the maximum even integer in a range: Just use PHP's max() function to find the\
    \ maximum number in a range with even numbers in it. So\n<code>\necho max(10,\
    \ 20, 30, 40); // 40\n</code>\nwill give you 40. If the range does not include\
    \ even numbers, it will give you the maximum number in the range.\nBut what if\
    \ the range does include even numbers? You will have to loop through each even\
    \ number in the range and compare it to the current maximum number. If the current\
    \ maximum is even, the loop will end and the maximum even number will be returned\
    \ as the result.\nThis can actually be done without looping through the even numbers\
    \ in the range. \n<code>", "    $evens = 0;\n    for ($i = $x; $i <= $y; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $evens++;\n        }\n    }\n   \
    \ if ($evens == 0) {\n        return -1;\n    } else {\n        return $x + $y\
    \ - $evens - 1;\n    }\n}", "    for ($i = $x; $i <= $y; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            return $i;\n        }\n    }\n    return -1;\n}\n",
  "    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n\
    \    }\n\n    for ($i=$y; $i>=$x; $i--)\n        if ($i%2==0)\n            return\
    \ $i;\n\n    return -1;\n}\n", "    $r = 1;\n    while ($x <= $y) {\n        if\
    \ ($x % 2 == 0) {\n            if ($r % 2 == 0) {\n                $r++;\n   \
    \         }\n        }\n        $x = $x + 1;\n    }\n    return $r;\n}\n", " \
    \   $min_num = ($x < $y) ? $x : -1;\n    $max_num = ($x > $y) ? $y : -1;\n   \
    \ \n    $evens = array();\n    $odds = array();\n    \n    $first_num = $min_num;\n\
    \    $second_num = $max_num;\n    \n    while($first_num < $second_num) {\n  \
    \      if($first_num % 2 == 0) {\n            $evens[] = $first_num;\n       \
    \ }\n        else {\n            $odds[] = $first_num;\n        }\n        \n\
    \        $first_num++;\n    }\n    \n    if(count($evens) > count($odds)) {\n\
    \        $result = max($evens);\n    }\n    else {\n        $result = min($odds);\n\
    \    }\n    \n    return $result;\n}\n", "    $return = -1;\n    if ($x < $y)\
    \ {\n        foreach($range($x, $y) as $n) {\n            if ($n % 2 == 0) {\n\
    \                $return = $n;\n                break;\n            }\n      \
    \  }\n    }\n    return $return;\n}", "    $mid = ($x + $y) / 2;\n    if ($mid\
    \ * $mid === $x * $x) {\n        if ($mid > $y) {\n            return $mid;\n\
    \        } else {\n            return -1;\n        }\n    }\n    return choose_num($x,\
    \ $mid) > choose_num($mid, $y) ? $mid : -1;\n}\n</code>\n<|/ a tags=php dscore=4\
    \ |>\n<| c |>\nThis would also require PHP 7 but unfortunately I cannot use PHP7.\n\
    <|/ c |>\n<| c |>\nYeah, I didn't notice the PHP 7 restriction. I suppose you\
    \ could upgrade your web server to PHP 7 and use this code to find the `ceil`:\
    \ `return max($x, $y)`\n<|/ c |>\n<| c |>\nIt would be great if it was possible\
    \ to implement it without using recursion but this looks great and should work\
    \ just fine. I will accept the answer once I confirm it works.\n<|/ c |>\n<| c\
    \ |>\nI added a version which doesn't use recursion, but uses a \"magic\" number.\
    \ If it finds the magic number it returns it.\n<|/ c |>\n<| c |>\nThis also works\
    \ well with the negative numbers, but you need to check if $x is negative.\n<|/\
    \ c |>\n<| a dscore=3 |>\nThis algorithm doesn't use recursion and doesn't use\
    \ any loops. It's a hybrid algorithm which I implemented as a class for a web\
    \ application.\nThe key is to find out the greatest common divisor of the two\
    \ numbers. If gcd(a,b) = 1, then it is as if they were the same number. Otherwise,\
    \ find the greatest common divisor of a/b and (a/b), and divide them until they\
    \ are the same. If the remainder of the division is zero, they're equal, and that's\
    \ what the algorithm returns.\n<code>\n<?php\n\nclass Gcd\n{\n    /**\n     *\
    \ Calculate the greatest common divisor of a and b.\n     *\n     * int $a\n \
    \    * int $b\n     * int\n     */\n    public static function calculate(int $a,\
    \ int $b): int\n    {\n        // If the numbers are equal, return 1.\n      \
    \  if ($a === $b) {\n            return 1;\n        }\n\n        // If the greatest\
    \ common divisor cannot be found using Euclid's algorithm, return -1.\n      \
    \  if ($a < $b) {\n            $a = $b;\n        }\n\n        // If b is zero,\
    \ return a.\n        if ($b === 0) {\n            return $a;\n        }\n\n  \
    \      // Otherwise, calculate the GCD of a/b and (a/b) and repeat until they\
    \ both have a GCD.\n        $x = self", "    if ($x <= $y) {\n        for ($i\
    \ = $x; $i <= $y; $i++) {\n            if ($i % 2 == 0) {\n                return\
    \ $i;\n            }\n        }\n    } else {\n        for ($i = $y; $i >= $x;\
    \ $i--) {\n            if ($i % 2 == 0) {\n                return $i;\n      \
    \      }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=3 tags=math,php\
    \ |>\n<| c |>\nThe question does not ask for an implementation of `choose_num()`,\
    \ it asks for a solution to the actual problem the OP is trying to solve. See\
    \ http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\n<|/ c\
    \ |>\n<| c |>\n, thanks for your comments. I understand that I was wrong about\
    \ choose_num(). I've added the code which I used. Sorry, I forgot about that.\n\
    <|/ c |>\n<| a dscore=3 tags=math,php |>\nIt is a really silly problem indeed\
    \ - you just need to use Euclid's theorem.\nThe solution is really simple :\n\
    <code>\n<?php\n$x=2;\n$y=8;\n$result=0;\nwhile($x>0){\n    if($y%$x==0){\n   \
    \     $y=($y-$x/$x)*$x;\n        $x=$x-$x/$x;\n        $result++;\n    }else{\n\
    \        $y=$y/$x;\n        $x=$x;\n    }\n}\necho $result;\n</code>\n<|/ a |>\n\
    <| a dscore=3 |>\nThe mathematical problem you're asking about has nothing to\
    \ do with PHP.  It's the simple mathematical problem of determining whether a\
    \ number is even or odd.\nTo determine the number of even or odd divisors of a\
    \ number X there are two solutions:  \n\nIf X is even, then it only has one divisor,\
    \ namely X/2.  \nIf X is odd, then it has no divisors at all.  \n\nThis leads\
    \ to the following code:\n<code>", "    if ($x < $y) {\n        $tmp = $x;\n \
    \       $x = $y;\n        $y = $tmp;\n    }\n\n    for ($i = 1; $i <= ($y - $x);\
    \ $i++) {\n        $j = 1;\n        while ($j <= $x - $i) {\n            $j *=\
    \ 10;\n        }\n        if ($j == $x) {\n            return $i;\n        }\n\
    \    }\n\n    return -1;\n}\n", "    if ($x < $y) {\n        choose_num($y, $x);\n\
    \    }\n    \n    if ($x == 0) {\n        return $y;\n    }\n    \n    if ($y\
    \ == 0) {\n        return $x;\n    }\n    \n    $r = $x + $y - 1;\n    $r2 = $r\
    \ * $r;\n    $a = floor($r / $r);\n    $b = $r - $a * $r;\n    \n    return $a\
    \ + $b;\n}\n</code>\nThe solution you give above is very similar to the solution\
    \ that I gave at the start of this answer:\n<code>\n<?php", "    if ($x < $y)\
    \ {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n\
    \        $max = $x;\n    }\n\n    do {\n        $m = ($min + $max) / 2;\n    \
    \    if ($m == $x) {\n            return $m;\n        } else if ($m > $x) {\n\
    \            $min = $m + 1;\n        } else {\n            $max = $m - 1;\n  \
    \      }\n    } while (true);\n}\n", "    list($x_range, $y_range) = range($x,\
    \ $y);\n    $x_range -= 1;\n    $y_range -= 1;\n    while ($x_range > $y_range)\
    \ {\n        $x_range -= 2;\n        $x_range += 1;\n    }\n    while ($y_range\
    \ > $x_range) {\n        $y_range -= 2;\n        $y_range += 1;\n    }\n    return\
    \ $x_range;\n}\n</code>\n<|/ a tags=php,function |>\n<| c |>\nThe function works\
    \ well, but it's very slow... How can we make it faster?\n<|/ c |>\n<| c |>\n\
    The function just returns -1, so I do not see how it can be slower than it is.\
    \ Are you calling it a lot?\n<|/ c |>\n<| c |>\nNo, I just called it once, that's\
    \ why it took so long, but now I got it! Thank you very much!\n<|/ c |>\n<| c\
    \ |>\nThis does not work when `choose_num(12,17)` returns `-1`.\n<|/ c |>\n<|\
    \ a tags=php,function |>\nThe answer for this question was the fastest way I've\
    \ found to compute this without using an array:\n<code>", "  $even = 0;\n  while\
    \ ($x <= $y) {\n    if ($x % 2 == 0) {\n      $even++;\n    }\n    $x++;\n  }\n\
    \  return $even > 0 ? $even : -1;\n}\n", "  if ($x == $y) {\n    return $x;\n\
    \  }\n\n  $max = $x;\n  $min = $y;\n  $mid = $x / 2;\n\n  while ($min <= $max)\
    \ {\n    if ($min + 1 == $max) {\n      $max = $max * 2 + 1;\n    }\n\n    if\
    \ ($mid + 1 == $max) {\n      $max = $max * 2;\n    }\n\n    if ($max > $y) {\n\
    \      $max = $max - 1;\n    }\n\n    if ($min < $y) {\n      $min = $min + 1;\n\
    \    }\n\n    if ($max == $y) {\n      return $mid;\n    }\n\n    if ($min ==\
    \ $y) {\n      return $min - 1;\n    }\n\n    if ($mid + 1 == $y) {\n      $mid\
    \ = $mid - 1;\n    }\n\n    if ($min + 1 == $y) {\n      $min = $min + 1;\n  \
    \  }\n  }\n\n  return -1;\n}\n\n$result = choose_num($x, $y);\n\nif ($result ==\
    \ -1) {\n  echo \"No even number exists\\n\";\n}\nelse {\n  echo \"Even number\
    \ is: $result\\n\";\n}", "    if (!$x && !$y) {\n        return -1;\n    }\n\n\
    \    // If the two numbers are equal, then the biggest number will be that of\
    \ $x.\n    if ($x == $y) {\n        return $x;\n    }\n\n    // If $x is greater,\
    \ then it is the biggest number that can be obtained by\n    // adding $x to itself\
    \ and subtracting $y from $x. \n    if ($x > $y) {\n        return choose_num($x,\
    \ $y - 1);\n    }\n\n    // If $y is greater, then it is the biggest number that\
    \ can be obtained by\n    // adding $y to itself and subtracting $x from $y.\n\
    \    return choose_num($y + 1, $x);\n}\n</code>\n<|/ a tags=math,php,recursion\
    \ dscore=2 |>\n<| a dscore=2 |>\nHere's a short solution using array_fill.\n<code>\n\
    $arr = [4,6,5,4,5,4,6,7,3,5,4,4];\n\n$result = [$arr[0]];\n\nfor ($i = 1; $i <\
    \ count($arr); $i++) {\n    $res = $result[0];\n    $len = count($result);\n\n\
    \    for ($j = 0; $j < $len; $j++) {\n        $res += $result[$j];\n        if\
    \ ($res >= $arr[$i]) {\n            $result[] = $res - $arr[$i];\n           \
    \ break;\n        }\n    }\n\n    $result[] = $res;\n}\n</code>\n<|/ a tags=math,php,recursion\
    \ |>\n<| c |>\nThis is the closest to my solution. Thank you.\n<|/ c |>\n<| a\
    \ dscore=1 |>\nHere's a more flexible and robust method of solving this problem:\n\
    <code>", "    if ($x < $y) {\n        return ($x < $y) ? $x : choose_num($y, $x);\n\
    \    } else {\n        return ($x > $y) ? $x : choose_num($y, $x);\n    }\n}",
  "    if ($x <= $y) {\n        foreach (range((int)$x, (int)$y) as $n) {\n      \
    \      if ($n % 2 == 0) return $n;\n        }\n    }\n    return -1;\n}\n", " \
    \   for($i = $x; $i <= $y; $i++) {\n        $n = $x + ($y - $x) / 2;\n       \
    \ if($i % 2 == 0) $n++;\n        if($n % 2 == 0) return $n;\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=php,math |>\n<| a tags=php,math |>\nThe formula\
    \ to find the greatest common factor of three numbers is as follows:\n<code>\n\
    gcd = greatest common divisor(abs(a), abs(b), abs(c))\n</code>\nYou can find the\
    \ gcd of three numbers in PHP as follows:\n<code>\n<?php", "\tif ($x === $y) {\n\
    \t\treturn $x;\n\t}\n\tif ($x > $y) {\n\t\t$min = $y;\n\t\t$max = $x;\n\t} else\
    \ {\n\t\t$min = $x;\n\t\t$max = $y;\n\t}\n\n\tdo {\n\t\tif ($min > $max) {\n\t\
    \t\t$max++;\n\t\t} else {\n\t\t\t$min--;\n\t\t}\n\t} while ($min > $max || $min\
    \ % 2 == 0);\n\n\treturn $min;\n}\n", "    if ($x === $y || $x === 0) {\n    \
    \    return $x;\n    }\n    $r = $y;\n    for ($i = 1; $i <= $x; ++$i) {\n   \
    \     if ($i & 1) {\n            if ($r < $x) {\n                $r = $i;\n  \
    \          }\n        } else {\n            if ($r > $y) {\n                $r\
    \ = $i;\n            }\n        }\n    }\n    return $r;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks this is very helpful. I'm sorry for not stating that in\
    \ my question but my professor didn't think it would be relevant. But thanks for\
    \ your help.\n<|/ c |>\n<| c |>\nNo problem. I'm glad I could help.\n<|/ c |>\n\
    <| a tags=php |>\n<code>\n<?php\n\n$n1=12;\n$n2=15;\n\n$n=$n1;\n\nwhile($n!=0){\n\
    \    $n = $n/10;\n    if($n==0){\n        $n=1;\n        continue;\n    }\n\n\
    \    if($n==1){\n        if($n2<=$n){\n            echo \"$n2\";\n           \
    \ exit;\n        }\n        $n2=1;\n        continue;\n    }\n\n    echo choose_num($n1,$n2);\n\
    \    $n2=choose_num($n2,$n1);\n}\n", "    if ($x >= $y) return choose_num($y,\
    \ $x);\n    if ($x == $y) return $x;\n    if ($x > $y) return choose_num($x, $y);\n\
    \    if ($x == 0) return 0;\n    if ($y == 0) return -1;\n    $max = $x;\n   \
    \ for ($i = 1; $i < $y; $i++) {\n        if ($max % $i == 0) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n", "    $x_length = abs($x - $y);\n\
    \    $y_length = abs($y - $x);\n    if ($x_length >= $y_length) {\n        $x_max\
    \ = $x;\n        $y_max = $y;\n        $x_min = $y;\n        $y_min = $x;\n  \
    \  } else {\n        $x_max = $y;\n        $y_max = $x;\n        $x_min = $x;\n\
    \        $y_min = $y;\n    }\n    while ($x_min <= $x_max) {\n        $temp =\
    \ $x_min;\n        $x_min += ($x_min % 2 ? -1 : 1);\n        $x_min += ($x_min\
    \ < $y_min ? 1 : -1);\n        if ($x_min <= $x_max) {\n            if ($x_min\
    \ == $x_max) {\n                return $temp;\n            }\n            $x_max\
    \ += ($x_max % 2 ? -1 : 1);\n        }\n    }\n    return -1;\n}", "    $choose_num\
    \ = 1;\n    $range = $y - $x;\n    if ($range == 0) {\n        return -1;\n  \
    \  }\n    if ($range > 1) {\n        for ($i = 1; $i <= $range; $i++) {\n    \
    \        if ($x % $i == 0 && $y % $i == 0) {\n                if ($i % 2 == 0)\
    \ {\n                    $choose_num = $i;\n                } else {\n       \
    \             return $i;\n                }\n            }\n        }\n    }\n\
    \    if ($x == $y) {\n        return $x;\n    }\n    if ($x > $y) {\n        return\
    \ $choose_num;\n    }\n    return $choose_num;\n}", "    if ($x <= 0 || $y <=\
    \ 0) {\n        echo -1;\n        return -1;\n    }\n\n    for ($i=$x; $i <= $y;\
    \ $i++) {\n        $even = 0;\n        $odd = 0;\n        foreach ($numbers as\
    \ $num) {\n            if ($i == $num) {\n                $even++;\n         \
    \   }\n            else {\n                $odd++;\n            }\n        }\n\
    \        if ($even) {\n            if ($odd > $even) {\n                return\
    \ $i;\n            }\n            else {\n                return -1;\n       \
    \     }\n        }\n        else {\n            return -1;\n        }\n    }\n\
    }\n", "    $min_x = min($x, $y); // min of the two numbers\n    $max_x = max($x,\
    \ $y); // max of the two numbers\n    $counter = 0; // counter of the number found\n\
    \    \n    $min_x % 2 == 1 ? $min_x = $min_x + 1 : $min_x = $min_x - 1; // round\
    \ the min number up\n    $max_x % 2 == 1 ? $max_x = $max_x + 1 : $max_x = $max_x\
    \ - 1; // round the max number down\n    \n    while($min_x <= $max_x) {\n   \
    \     if($min_x % 2 == 0) {\n            $min_x++;\n            $counter++;\n\
    \        } elseif($min_x % 2 == 1) {\n            $min_x--;\n            $counter++;\n\
    \        } else {\n            break;\n        }\n    }\n    return $counter;\n\
    }\n", "    if ($x <= $y) $min = $x; else $min = $y;\n    $min++;\n    $max = $y;\n\
    \n    while (++$max <= $min) {\n        $m = (int)($max / 2);\n        if ($m\
    \ != intval($m))\n            $m = $min + $m;\n        if ($m % 2 == 0) {\n  \
    \          $min = $m;\n            $max = (int)$max / 2;\n        } else {\n \
    \           $max = $min;\n            $min = (int)$min / 2;\n        }\n    }\n\
    \    return $min == $y ? $min : $max;\n}\n", "    if ($x >= $y) \n        return\
    \ $x;\n    if ($x <= $y)\n        return $y;\n    if ($y == 0)\n        return\
    \ -1;\n\n    if ($x % 2 != 0)\n        return choose_num($x / 2, $y - 1);\n\n\
    \    $smallest = choose_num($x / 2, $y);\n    $smaller  = choose_num($x, $y -\
    \ 1);\n\n    return $smaller < $smallest ? $smaller : $smallest;\n}\n", "    if\
    \ ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n\n    $even = true;\n\n    for($number = $min;\
    \ $number <= $max; $number++) {\n        $check = $number%2 == 0;\n        if($check)\
    \ {\n            if($even) {\n                $even = false;\n               \
    \ return $number;\n            } else {\n                $even = true;\n     \
    \       }\n        }\n    }\n\n    return -1;\n}\n", "    if ($x < $y) {\n   \
    \     $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n     \
    \   $max = $x;\n    }\n    while ($min < $max) {\n        $rand = rand($min, $max);\n\
    \        if ($rand % 2 === 0) {\n            $min = $rand + 1;\n        } else\
    \ {\n            $max = $rand;\n        }\n    }\n    return $min;\n}", "    $x\
    \ = $x > $y ? $x - $y : abs($y - $x);\n    if ($x % 2 == 0) {\n        return\
    \ $x / 2;\n    } else {\n        return $x - 1;\n    }\n}\n", "    $min_x = $x;\n\
    \    $min_y = $y;\n    \n    $max_x = $x + 1;\n    $max_y = $y + 1;\n    \n  \
    \  $min_x2 = $x + 2;\n    $min_y2 = $y + 2;\n    \n    $max_x2 = $x + 3;\n   \
    \ $max_y2 = $y + 3;\n\n    for($x = 0; $x < $max_x; $x++) {\n        for($y =\
    \ 0; $y < $max_y; $y++) {\n            $is_even = ($x % 2 == 0);\n           \
    \ $is_odd = ($y % 2 == 1);\n            \n            if($is_even && $is_odd)\
    \ {\n                return -1;\n            } elseif ($is_odd && !$is_even) {\n\
    \                return -1;\n            } elseif (!$is_odd && $is_even) {\n \
    \               return -1;\n            }\n        }\n    }\n    \n    for($x\
    \ = 0; $x < $max_x2; $x++) {\n        for($y = 0; $y < $max_y2; $y++) {\n    \
    \        $is_even = ($x % 2 == 0);\n            $is_odd = ($y % 2 == 1);\n   \
    \         \n            if($is_even && $is_odd) {\n                return -1;\n\
    \            } elseif ($is_odd && !$is_even) {\n                return -1;\n \
    \           } elseif (!$is_odd && $is_even) {\n                return -1;\n  \
    \          }\n        }\n    }\n    \n    return $min_x;\n}\n", "  if(( is_numeric($x)\
    \ && is_numeric($y) ) && ($x <= $y) ){\n    $x_even = true;\n    $x_odd = false;\n\
    \    $y_even = true;\n    $y_odd = false;\n    if( $x % 2 == 0 ){\n      $x_even\
    \ = false;\n    }\n    if( $y % 2 == 0 ){\n      $y_even = false;\n    }\n   \
    \ $x_num = $x - 1;\n    $y_num = $y - 1;\n    $x_end = $x_num * 2;\n    $y_end\
    \ = $y_num * 2;\n    $x_start = $x_end + 1;\n    $y_start = $y_end + 1;\n    for($i\
    \ = 1; $i <= $x_end; $i++ ){\n      if( ( $x_num % $i == 0 ) && ( $x_num > 0 )\
    \ && ( $x_num < $x_end ) ){\n        if( $x_even ){\n          if( ( $x_num %\
    \ $x_start == 0 ) && ( $x_num < $x_end ) ){\n            return $x_num;\n    \
    \      }\n        }\n      }\n    }\n    for($i = 1; $i <= $y_end; $i++ ){\n \
    \     if( ( $y_num % $i == 0 ) && ( $y_num > 0 ) && ( $y_num < $y_end ) ){\n \
    \       if( $y_even ){\n          if( ( $y_num % $y_start == 0 ) && ( $y_num <\
    \ $y_end ) ){\n            return $y_num;\n          }\n        }\n      }\n \
    \   }\n  }\n  return -1;\n}\n", "    if ($x < $y) \n        return choose_num($y,\
    \ $x);\n    if ($x == $y) \n        return $x;\n    return -1;\n}\n", "    if\
    \ ($x >= $y) {\n        return choose_num($y, $x);\n    }\n    if ($x % 2 == 0\
    \ && $y % 2 == 0) {\n        return $x / 2;\n    }\n    if ($x % 2 != 0) {\n \
    \       return -1;\n    }\n    if ($y % 2 != 0) {\n        return -2;\n    }\n\
    }", "    $range = ($x - $y) + 1;\n    if ($range > 0 && $range % 2 == 0) {\n \
    \       return $y;\n    }\n\n    return -1;\n}\n", "  $x_max = ($x > $y) ? $x\
    \ : $y;\n  $y_min = ($x > $y) ? $y : $x;\n  do {\n    $r = (rand($x_max, $y_min)\
    \ - 1) & 0xFFFF;\n  } while (($r != 0) && ($r >= $x) && ($r <= $y));\n  return\
    \ $r;\n}\n</code>\n<|/ a |>\n<| c |>\nHow do you know which range to use? From\
    \ the code alone it could be anything, especially if the range is large.\n<|/\
    \ c |>\n<| c |>\n- I only used this answer as quickly as possible because I couldn't\
    \ think of a better, more performant solution. I guess your answer is better than\
    \ mine.\n<|/ c |>\n<| c |>\nIf this code is optimized, why not post it here as\
    \ well?\n<|/ c |>\n<| c |>\n- Sure. I posted it as an answer.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. It is just an implementation of a pseudo-random\
    \ number generator, and it's quite different from the one I have posted here (although\
    \ it is also fast). And that's why I wanted to find out why it works the way it\
    \ does. And I did.\n<|/ c |>\n<| a tags=random,php |>\nI implemented this in PHP\
    \ 5.6\n<code>\n<?php\n", "    if ($x >= $y) {\n        $tmp = $x;\n        $x\
    \ = $y;\n        $y = $tmp;\n    }\n    $even = 0;\n    $odd = 0;\n    while ($x\
    \ >= $y) {\n        $even++;\n        $x -= ($x % 2);\n    }\n    while ($x >\
    \ 0) {\n        $odd++;\n        $x -= ($x % 2);\n    }\n    if ($even > $odd)\
    \ {\n        return -1;\n    } else {\n        return $even + 1;\n    }\n}\n</code>\n\
    <|/ a tags=performance,php,optimization dscore=4 |>\n<| c |>\nIt would be better\
    \ not to modify the parameters. You should be able to do this in-place.\n<|/ c\
    \ |>\n<| c |>\nWhat if you change the code to use $tmp and $tmp2 instead of $x\
    \ and $y and $x -= ($x % 2) instead of $x = $x - $x % 2; ?\n<|/ c |>\n<| c |>\n\
    You're right. But in PHP you can not modify the variables in place.\n<|/ c |>\n\
    <| c |>\nYou can't modify local variables in PHP without using references -- but\
    \ you can still modify the contents of a global variable in PHP, so you can modify\
    \ the parameters too. http://www.php.net/manual/en/language.references.pass.php\n\
    <|/ c |>\n<| c |>\nAnd of course you still need to test the return value from\
    \ choose_num() to make sure it's in the range you want.\n<|/ c |>\n<| a dscore=4\
    \ |>\nThe previous answers show how to do the optimization you asked for, but\
    \ are probably not what you want.\nThe function you were looking for is called\
    \ gmp_cmp and is a part of GNU Multiple Precision Arithmetic Library (GMP). It\
    \ is a very fast library for doing number manipulation. Check out their page for\
    \ more information.\nIf you really do want to write your own function, try something\
    \ like this:\n<code>", "   if ($x > $y) \n   {\n      choose_num($x, $y);\n  \
    \ }\n   else if ($y > $x)\n   {\n      choose_num($x, $y);\n   }\n   else\n  \
    \ {\n      if ($x % 2 != 0 && $y % 2 != 0)\n      {\n         return $x + $y -\
    \ 1;\n      }\n      else\n      {\n         return -1;\n      }\n   }\n}\n",
  "  for ($i = min($x, $y); $i <= max($x, $y); $i++) {\n    if ($i % 2 == 0) {\n \
    \     return $i;\n    }\n  }\n  return -1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ is a very nice solution. Although I would have used \"foreach\" rather than\
    \ a nested \"for\", and that is a bit more code than what I was looking for. Thanks!\n\
    <|/ c |>\n<| c |>\n, Thanks for the feedback. I actually went ahead and edited\
    \ it to use the foreach loop instead. It looks like I forgot to commit the first\
    \ change\n<|/ c |>\n<| a tags=php |>\nThis doesn't solve the problem completely\
    \ because a solution must not contain the number \"2\" and so on, but I wrote\
    \ this because I needed it myself and it took me a while to figure out how to\
    \ do it. This only uses integers, so it can be extended to work with floats, doubles,\
    \ strings and anything else that behaves like an integer.\n<code>", "    if ($x\
    \ <= $y) {\n        for ($i = $x; $i >= $y; $i--) {\n            if (is_even($i))\
    \ {\n                return $i;\n            }\n        }\n    } else {\n    \
    \    for ($i = $y; $i >= $x; $i--) {\n            if (is_even($i)) {\n       \
    \         return $i;\n            }\n        }\n    }\n    return -1;\n}\n", " \
    \   if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    while ($min <= $max) {\n    \
    \    $mid = $min + $max / 2;\n        if ($mid % 2 == 0) {\n            if ($mid\
    \ > $min) {\n                $max = $mid;\n            } else {\n            \
    \    $min = $mid;\n            }\n        } else {\n            if ($mid > $max)\
    \ {\n                $min = $mid + 1;\n            } else {\n                $max\
    \ = $mid;\n            }\n        }\n    }\n    return $min;\n}\n", "    $min_value\
    \ = min($x, $y);\n    $max_value = max($x, $y);\n    \n    if ($min_value == $max_value)\
    \ {\n        return $min_value;\n    }\n\n    return $max_value + 1;\n}\n", " \
    \   $x = $x - 1;\n    $y = $y - 1;\n    while ($x > $y) {\n        $x = $x - 2;\n\
    \        $y = $y - 2;\n    }\n\n    if ($y > $x && $y != 0) {\n        return\
    \ $x;\n    } else {\n        return -1;\n    }\n}\n", "    $min_val = 0;\n   \
    \ $max_val = 0;\n    while ($x < $y) {\n        if ($x > $max_val) {\n       \
    \     $max_val = $x;\n        } elseif ($y > $max_val) {\n            $max_val\
    \ = $y;\n        }\n        $x = $x + 1;\n        $y = $y + 1;\n    }\n    return\
    \ ($min_val + $max_val);\n}\n</code>\n<|/ a dscore=0 tags=algorithm,php |>\n<|\
    \ a dscore=0 |>\nHere you go. I'm sorry it took me so long to reply, but this\
    \ was a fun exercise for me! It took me a while to figure out that the solution\
    \ I came up with was the exact opposite of what you were looking for. Hopefully\
    \ this will be a useful reference for anyone else looking for the same problem.\n\
    <code>\n<?php\n\n$start = 0;\n$end = 100;\n\n$total = 0;\n$odd = 0;\n\nfor ($i\
    \ = $start; $i <= $end; $i++) {\n    if ($i % 2 === 0) {\n        $total += $i;\n\
    \    } else {\n        $odd += $i;\n    }\n}\n\necho \"The sum of all odd numbers\
    \ from $start to $end is $total.\";\necho \"The sum of all even numbers from $start\
    \ to $end is $odd.\";\n", "\tif ($x < $y) {\n\t\treturn choose_num($y, $x);\n\t\
    } else {\n\t\t$min = $x < 0 ? $x : $y;\n\t\t$max = $x > $y ? $x : $y;\n\t\t$counter\
    \ = 1;\n\t\twhile ($min < $max) {\n\t\t\tif ($min + $counter * 2 > $max) {\n\t\
    \t\t\treturn -1;\n\t\t\t}\n\t\t\tif (is_even($min + $counter * 2)) {\n\t\t\t\t\
    return $min + $counter * 2;\n\t\t\t}\n\t\t\t$counter++;\n\t\t}\n\t\treturn -1;\n\
    \t}\n}", "    if ($x <= $y && $y <= $x * 2 + 1) return $y;\n    if ($x > $y) $x\
    \ = $y;\n    return choose_num($y, $x);\n}\n", "    $result = -1;\n    if ($x\
    \ <= $y) {\n        for ($i = $x; $i <= $y; $i++) {\n            $result = $i;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>", "    $even = range($x, $y, 2);\n    $odd = range($y, $x, 2);\n\n\
    \    $result = array();\n    foreach($even as $val)\n    {\n        array_push($result,\
    \ $val);\n    }\n\n    foreach($odd as $val)\n    {\n        array_push($result,\
    \ $val);\n    }\n\n    asort($result);\n\n    foreach($result as $val)\n    {\n\
    \        if($val % 2 == 0)\n        {\n            return $val;\n        }\n \
    \   }\n\n    return -1;\n}\n</code>\n<|/ a dscore=0 tags=php,math,arrays,algorithm\
    \ |>\n<| c |>\nThis code looks much better than the code i used to write (which\
    \ i will edit into the original question). I have no idea how it works, but it\
    \ does.\n<|/ c |>\n<| c |>\nI added comments to help you understand what it does,\
    \ if you don't understand anything, just ask.\n<|/ c |>\n<| c |>\nYour `choose_num`\
    \ function doesn't take advantage of the fact that it's working with sorted ranges.\n\
    <|/ c |>\n<| a tags=php,math,arrays,algorithm |>\nUse Sieve of Eratosthenes \n\
    In case you are not familiar with it, it is very useful when you need to generate\
    \ prime numbers without actually checking each number to see if it is a prime.\
    \  See here for more: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n<|/\
    \ a dscore=0 |>\n<| a tags=php,math,arrays,algorithm |>\nA simple way could be\
    \ to first calculate the maximum and minimum values from the array and use that\
    \ to calculate all values that are within your range. \nTo calculate the maximum\
    \ and minimum in php, use min() and max().\n<code>\n$max = max($values);\n$min\
    \ = min($values);\n</code>\nThen you can iterate through your array and if the\
    \ value is not between the minimum and maximum, remove it from your result array.\
    \ \n<code>\nforeach($values AS $key=>$value) {\n  if ($value>=$min && $value<=$max)\
    \ {\n    $result[$key] = $value;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=php,math,arrays,algorithm |>\nIt would look something like this:\n<code>",
  "\tfor ($i = min($x, $y); $i <= max($x, $y); $i += 2) {\n\t\tif ($i == $x || $i\
    \ == $y)\n\t\t\treturn $i;\n\t}\n\treturn -1;\n}\n</code>\nThen I created another\
    \ php file called \"biggest_even.php\" to test the function:\n<code>\n<?php\n\
    require 'biggest_even.php';\necho '<p>The function choose_num() returns the largest\
    \ even number in the interval [', \n       choose_num(2, 8), ', ', choose_num(9,\
    \ 10), '].</p>';\necho '<p>The function choose_num() returns ' . choose_num(12,\
    \ 15) . ' if that interval has a single even number:</p>';\necho '<p>The function\
    \ choose_num() returns ' . choose_num(13, 12) . ' if that interval has two even\
    \ numbers:</p>';\necho '<p>The function choose_num() returns ' . choose_num(16,\
    \ 10) . ' if that interval has three even numbers:</p>';\necho '<p>The function\
    \ choose_num() returns ' . choose_num(22, 18) . ' if that interval has four even\
    \ numbers:</p>';\necho '<p>The function choose_num() returns ' . choose_num(23,\
    \ 21) . ' if that interval has five even numbers:</p>';\necho '<p>The function\
    \ choose_num() returns ' . choose_num(23, 24) . ' if that interval has six even\
    \ numbers:</p>';\necho '<p>The function choose_num() returns ' . choose_num(24,\
    \ 23) . ' if that interval has seven even numbers:</p>';\necho '<p>The function\
    \ choose_num() returns ' . choose_num(24, 25) . ' if that interval has eight even\
    \ numbers:</p>';\necho '<p>The function choose_num() returns ' . choose_num(25,\
    \ 24) . ' if that interval has nine even numbers:</p>';\necho '<p>The function\
    \ choose_num() returns ' . choose_num(26, 25) . ' if that interval has ten even\
    \ numbers:</p>';\necho '<p>The function choose_num() returns ' . choose_num(26,\
    \ 28) . ' if that interval has eleven even numbers:</p>';\necho '<p>The function\
    \ choose_num() returns ' . choose_num(27, 26) . ' if that interval has twelve\
    \ even numbers:</p>';\necho '<p>The function choose_num() returns ' . choose_num(27,\
    \ 29) . ' if that interval has thirteen even numbers:</p>';\necho '", "    if\
    \ ($x <= $y) {\n        $smallest = $x;\n        $largest = $y;\n    } else {\n\
    \        $smallest = $y;\n        $largest = $x;\n    }\n\n    do {\n        $test\
    \ = ($smallest + $largest) / 2;\n        if ($test == 0) {\n            return\
    \ -1;\n        }\n        if ($test > 0 && $smallest % $test == 0) {\n       \
    \     $smallest = $test;\n        }\n        if ($test < 0 && $largest % $test\
    \ == 0) {\n            $largest = $test;\n        }\n    } while ($largest - $smallest\
    \ > 1);\n\n    return $largest;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nWhat\
    \ if the numbers do not fit?\n<|/ c |>\n<| a |>\nThis is my solution:\n<code>",
  "\t$min_val = $x if $x < $y;\n\t$max_val = $y if $x < $y;\n\t$diff = $x - $y;\n\t\
    for ($i = $min_val; $i <= $max_val; $i++) {\n\t\tif ($i % 2 == 0 && $diff % 2\
    \ == 0) {\n\t\t\treturn $i;\n\t\t}\n\t\t$diff--;\n\t}\n\treturn -1;\n}", "   \
    \ if ($y <= $x) {\n        return -1;\n    }\n\n    $highest = $x;\n    for ($i\
    \ = $x+1; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $highest\
    \ = $i;\n        }\n    }\n\n    return $highest;\n}", "    $min = $x > $y ? $x\
    \ : -$y;\n    $max = $min + 1;\n\n    for ($i = $min; $i <= $max; $i++) {\n  \
    \      if ($i % 2 === 0) {\n            $result = $i;\n            break;\n  \
    \      }\n    }\n\n    return $result > $y ? $result : -1;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThanks a lot,but can i use your code within my script??\n<|/ c\
    \ |>\n<| a |>\n<code>\n<?php", "    $max = max($x, $y);\n    if ($max == $x) {\n\
    \        return $x;\n    } elseif ($max == $y) {\n        return $y;\n    }\n\
    \    $diff = $y - $x;\n    if ($diff < 0) {\n        return choose_num($x, $y\
    \ + $diff);\n    }\n    return choose_num($x + $diff, $y);\n}\n", "    $max =\
    \ $x;\n    while ($y != $max) {\n        if ($y % 2 === 0) {\n            $max++;\n\
    \        }\n        $y++;\n    }\n    return $max;\n}\n</code>\nNow we simply\
    \ call the function we wrote above:\n<code>\n$x = 12;\n$y = 15;\n$even = choose_num($x,\
    \ $y);\n</code>\nAnd print the result:\n<code>\necho 'The biggest even integer\
    \ number is ' . $even . ' which is between ' . $x . ' and ' . $y . '!';\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,math |>\nThis should work\n<code>", "    $res\
    \ = -1;\n    for ($i = $x; $i <= $y; $i++) {\n        $res = max($res * 2, $i);\n\
    \    }\n    return $res;\n}\n\n$num = (int) choose_num(13, 12);\n\nif ($num >\
    \ 0) {\n    echo \"$num is even.\";\n} else {\n    echo \"$num is odd.\";\n}",
  "    if ($x <= $y)\n        return $x;\n    else if ($y > $x)\n        return $y;\n\
    \    else\n        return -1;\n}\n", "    // Return immediately if there is no\
    \ even number in the interval [x, y]\n    if (!is_even($x) || !is_even($y)) {\n\
    \        return -1;\n    }\n    // Create a variable that will contain the biggest\
    \ even number that is in the interval [x, y] inclusive\n    $biggest_even = $x;\n\
    \    // Now let's check if the current number is an even number\n    if (is_even($x))\
    \ {\n        // If it is, we can move to the next number and check if it's bigger\
    \ than\n        // the biggest even number\n        $biggest_even = $y;\n    \
    \    $y = $x - $y;\n    }\n    // Now let's check if the current number is an\
    \ even number\n    if (is_even($y)) {\n        // If it is, we can move to the\
    \ next number and check if it's bigger than\n        // the biggest even number\n\
    \        $biggest_even = $x;\n        $x = $y - $x;\n    }\n    // If the current\
    \ number is an even number and it's bigger than the biggest even number,\n   \
    \ // then we return it\n    return $biggest_even;\n}\n", "    if ($x <= 0 || $y\
    \ <= 0) {\n        return -1;\n    }\n\n    $smaller = $x;\n    $larger = $y;\n\
    \n    while ($larger - $smaller > 1) {\n        if ($smaller % 2 === 0) {\n  \
    \          $smaller = $smaller / 2;\n        } else {\n            $larger = $larger\
    \ / 2;\n        }\n    }\n\n    return $larger;\n}\n", "    return max(min($x,\
    \ $y), $x);\n}", "    if ($x < $y) {\n        if ($x%2==0) {\n            return\
    \ $x;\n        }\n        else {\n            return choose_num($y-$x+1, $y);\n\
    \        }\n    }\n    else {\n        if ($y%2==0) {\n            return $y;\n\
    \        }\n        else {\n            return choose_num($x-$y+1, $x);\n    \
    \    }\n    }\n}", "  \n  if ($x >= $y) {\n    $temp = $x;\n    $x = $y;\n   \
    \ $y = $temp;\n  }\n\n  if ($x == $y) { \n    return $x; \n  } \n  \n  if ($y\
    \ == 0) { \n    return -1; \n  } \n\n  $x_minus_y = $x - $y; \n  $y_minus_x =\
    \ $y - $x; \n\n  if ($y_minus_x == $x_minus_y) {\n    return $x; \n  } \n\n  $x_minus_x_minus_y\
    \ = $x_minus_y - $x_minus_y; \n  $y_minus_y_minus_x = $y_minus_x - $y_minus_x;\
    \ \n\n  if ($x_minus_x_minus_y == $y_minus_y_minus_x) {\n    return $y; \n  }\
    \ \n\n  $x_minus_y_minus_y_minus_x = $x_minus_y_minus_x - $y_minus_y_minus_x;\
    \ \n\n  if ($x_minus_y_minus_y_minus_x < 0) { \n    return -1; \n  } \n\n  return\
    \ $y; \n}\n", "    if ($x < $y) {\n        return choose_num($y, $x);\n    }\n\
    \    $mid = ($y + $x) / 2;\n    if ($mid % 2 == 0) {\n        return $mid;\n \
    \   }\n    return choose_num($y, $mid);\n}\n", "    if ($x < $y) $swap = $x;\n\
    \    else $swap = $y;\n    if ($x > $y) $swap = $x;\n    else $swap = $y;\n  \
    \  $result = -1;\n    while ($swap != 0) {\n        $result = $result * 2 + $swap\
    \ % 2;\n        $swap = (int) floor($swap / 2);\n    }\n    return $result;\n\
    }\n", "    if ($x >= $y) {\n        if ($x % 2 == 0) {\n            return $x;\n\
    \        } else {\n            $a = $x + ($y - 1);\n            $b = $x - 1;\n\
    \            while ($a % 2 != 0 && $a != 0) {\n                $a--;\n       \
    \         $b = $b + 2;\n            }\n            return $a;\n        }\n   \
    \ } else {\n        if ($y % 2 == 0) {\n            return $y;\n        } else\
    \ {\n            $a = $y + ($x - 1);\n            $b = $y - 1;\n            while\
    \ ($a % 2 != 0 && $a != 0) {\n                $a--;\n                $b = $b +\
    \ 2;\n            }\n            return $b;\n        }\n    }\n}\n", "    if ($x\
    \ <= $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n\n    for ($i = 0; $i < $max; $i++) {\n  \
    \      if ($i % 2 == 0) {\n            $newmax = $newmax * 2;\n            $newmin\
    \ += 1;\n            if ($newmin > $max) {\n                $newmax = $min;\n\
    \                $newmin = 1;\n            }\n            if ($newmax > $max)\
    \ {\n                $newmax = $max;\n                $newmin = $min;\n      \
    \      }\n            if ($newmax < $min) {\n                return -1;\n    \
    \        }\n        }\n    }\n    return $newmax;\n}\n", "  $min_num = ($x > $y)\
    \ ? $x : -$y;\n  $max_num = ($x > $y) ? -$x : $y;\n\n  for ($i = $min_num; $i\
    \ <= $max_num; $i++) {\n    if (is_even_num($i)) {\n      return $i;\n    }\n\
    \  }\n\n  return -1;\n}\n", "   $x = abs($x); $y = abs($y);\n   if (($x > $y)\
    \ && ($x < $y)) {\n      return $x;\n   } else if (($x < $y) && ($y < $x)) {\n\
    \      return $y;\n   } else {\n      return -1;\n   }\n}", "    $range = $y -\
    \ $x + 1;\n    $i = 0;\n    while ($i < $range && $x != $y) { $i++; }\n    if\
    \ ($i == $range) {\n        return -1;\n    }\n    return $y + $i - $x;\n}", " \
    \   $x = intval($x);\n    $y = intval($y);\n    \n    $range = $x - $y;\n\n  \
    \  if ($range === 0) {\n        return 0;\n    }\n\n    $range2 = pow(2, $range);\n\
    \    \n    if ($range % 2 === 0) {\n        $res = $y + 1;\n    } else {\n   \
    \     $res = $y;\n    }\n\n    while (true) {\n        if ($res - $range2 > $x)\
    \ {\n            return $res;\n        }\n\n        $res -= $range2;\n    }\n\
    }\n", "    $result = 0;\n    for($i = $x; $i <= $y; $i++) {\n        if($i % 2\
    \ == 0) {\n            $result = $i;\n            break;\n        }\n    }\n \
    \   return $result;\n}\n", "    if ($x >= $y) $min = $y;\n    else $min = $x;\n\
    \    $max = $x;\n    while($min <= $y) {\n        $max = $min + $max;\n      \
    \  if ($max % 2 == 0) {\n            $max++;\n        } else {\n            return\
    \ $max;\n        }\n        $min++;\n    }\n    return -1;\n}", "    $small =\
    \ min($x, $y);\n    $large = max($x, $y);\n    if ($small >= 0) {\n        if\
    \ ($large >= 0) {\n            return ($large);\n        } else {\n          \
    \  return ($small - 1);\n        }\n    } else {\n        if ($large >= 0) {\n\
    \            return ($small - 1);\n        } else {\n            return ($large);\n\
    \        }\n    }\n}\n", "    if ($x <= $y && $y != 0) {\n        return ($y ==\
    \ 0) ? $x : choose_num($y, $x-1);\n    } elseif ($y != 0) {\n        return -1;\n\
    \    }\n}\n", "    if ($x <= $y) {\n        $min = $x;\n        $max = $y;\n \
    \   } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    if ($min\
    \ > $max) {\n        return -1;\n    }\n    \n    if ($max % 2 == 0) {\n     \
    \   return $min + 2;\n    }\n    \n    return -1;\n}\n</code>\nI hope this code\
    \ can help you. Thanks for reading.\n<|/ a |>\n<| c |>\nI understand the logic,\
    \ and I understand the code. But I don't get why it doesn't work. I'm trying to\
    \ understand why you think the code should work.\n<|/ c |>\n<| c |>\nHi Jordi,\
    \ thanks for your suggestion. I try it and it still doesn't work. Please take\
    \ a look at my edited post. I'm wondering if I should add anything to the `choose_num`\
    \ function.\n<|/ c |>\n<| c |>\nYou are welcome, I don't understand what you are\
    \ trying to do in the code you posted, but you are trying to achieve this logic:\
    \ [choose_num(15, 12) should return 15] then you know that 15 is even, right?\
    \ Then you should return 14 right? This is not correct, when you try choose_num(13,\
    \ 12) you should return -1 because no number is even in the range (13, 12).\n\
    <|/ c |>\n<| c |>\nThat makes sense, yes. I'm trying to figure out how to fix\
    \ this function.\n<|/ c |>\n<| c |>\nI've tried to fix your code, but it still\
    \ doesn't work. I edited my post to show you what I've tried so far.\n<|/ c |>\n\
    <| a tags=php |>\nI understand this was a homework question, so I'll give you\
    \ an answer that you can copy paste into your own php file. I will not give you\
    \ the answer in php. Just the algorithm you need to implement.\nThe basic idea\
    \ is to find all integers within your range where your number is even, and where\
    \ your number is odd. Your number is in those ranges.\nTo find all the evens you\
    \ can just search for the remainder of the division by 2. So if your number is\
    \ even, divide it by two, and if it has a remainder 0, add 2 to it, and if it\
    \ is odd, add 1. And all your evens will fall within your range of numbers that\
    \ have a remainder of 0. So you need to find out what those are, which is easy,\
    \ you just check how many times the remainder of the division by 2 appears.\n\
    To find all the odds, do the same thing, except instead of dividing by 2, divide\
    \ by 3 and check if the remainder is 0 (if so, you add 1 to your odd number instead).\
    \ Then repeat until there are no more numbers to be found.\nYou will ", "    if\
    \ ($x < $y) {\n        return -1;\n    }\n    if ($x == $y) {\n        return\
    \ 0;\n    }\n    if ($x > $y) {\n        return -1;\n    }\n    $counter = 1;\n\
    \    $max = $x;\n    $min = $y;\n    while ($min < $max) {\n        if ($min %\
    \ 2 == 0) {\n            $min = $min + 1;\n        } else {\n            $counter\
    \ = $counter + 1;\n            $min = $min + 2;\n        }\n        if ($max %\
    \ 2 == 0) {\n            $max = $max - 1;\n        } else {\n            $counter\
    \ = $counter + 1;\n            $max = $max - 2;\n        }\n    }\n    return\
    \ $max;\n}\n", "    if ($x > $y) {\n        $temp = $x;\n        $x = $y;\n  \
    \      $y = $temp;\n    }\n\n    $max = -1;\n\n    for ($i = $x; $i <= $y; $i++)\
    \ {\n        if (is_even($i)) {\n            if ($max < $i) {\n              \
    \  $max = $i;\n            }\n        }\n    }\n    return $max;\n}", "  if ($x\
    \ < $y) {\n    $min = $x;\n    $max = $y;\n  } else {\n    $min = $y;\n    $max\
    \ = $x;\n  }\n\n  if ($min < 2 || $min > $max) {\n    return -1;\n  }\n  \n  $evens\
    \ = array();\n  for ($i = $min + 2; $i <= $max; $i++) {\n    if (isEven($i)) {\n\
    \      $evens[] = $i;\n    }\n  }\n  if (count($evens) == 0) {\n    return -1;\n\
    \  }\n  sort($evens);\n\n  return $evens[count($evens) - 1];\n}\n", "\t$smallest\
    \ = $x > $y ? $x : -$x;\n\t$largest = $x > $y ? -$y : $y;\n\t$smallest2 = $smallest\
    \ / 2;\n\t$largest2 = $largest / 2;\n\t\n\tfor ($i = 1; $i <= $smallest2; $i++)\
    \ {\n\t\tif ($x % $i == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\n\tfor ($i = 1; $i\
    \ <= $largest2; $i++) {\n\t\tif ($i % $x == 0) {\n\t\t\treturn $i;\n\t\t}\n\t\
    }\n\treturn -1;\n}\n", "    if ($x > $y) {\n        $tmp = $y;\n        $y = $x;\n\
    \        $x = $tmp;\n    }\n    if ($x > $min) {\n        $even = 1;\n       \
    \ $min = $x;\n    }\n    if ($y > $min) {\n        $even = 0;\n        $min =\
    \ $y;\n    }\n    do {\n        if ($x % 2 == $even) {\n            $x = $x /\
    \ 2;\n        } else {\n            $x = $x * 3;\n        }\n        $even = !$even;\n\
    \    } while ($x <= $y);\n    return $min;\n}\n</code>\n<|/ a tags=php,math |>\n\
    <| a |>\n<code>\n<?php\n", "    if ($x < $y) {\n        return -1;\n    }\n  \
    \  if ($x == $y) {\n        return $x;\n    }\n    if ($x % 2 == 0) {\n      \
    \  return $x + choose_num($x, $y - 1);\n    } else {\n        return $y - choose_num($x,\
    \ $y - 1);\n    }\n}\n</code>\n<|/ a tags=php,recursion |>\n<| c |>\nThis is clearly\
    \ not a solution, but a proof of concept.  Can you fix this so it actually works?\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\n<?php", "    if ($x >= $y) {\n        $min\
    \ = $y;\n    } else {\n        $min = $x;\n    }\n\n    $min = $min - 1;\n\n \
    \   while (true) {\n        $num = ($min + $max) / 2;\n        if ($min == $max)\
    \ {\n            return $num;\n        } else if ($min > $max) {\n           \
    \ $min = $num;\n        } else {\n            $max = $num;\n        }\n    }\n\
    }\n\n$min = 1;\n$max = 99;\n\n$answer = choose_num($min, $max);\necho \"$answer\\\
    n\";", "    if ($x <= $y) \n        return -1;\n    if ($x == $y) \n        return\
    \ $x;\n    if ($x > $y) \n        return choose_num($x, $y - 1);\n    if ($x <\
    \ $y)\n        return choose_num($y - 1, $x);\n}\n", "    if ($x == $y) {\n  \
    \      return $x;\n    }\n\n    if ($x > $y) {\n        $temp = $x;\n        $x\
    \ = $y;\n        $y = $temp;\n    }\n\n    $x_range = $x - 1;\n    $y_range =\
    \ $y - 1;\n    $x_even = ($x_range % 2 == 0);\n    $y_even = ($y_range % 2 ==\
    \ 0);\n\n    if ($x_even) {\n        if ($y_even) {\n            return ($x +\
    \ ($y / 2)) - 1;\n        } else {\n            return ($x + $y) / 2;\n      \
    \  }\n    } else {\n        if ($y_even) {\n            return ($y + ($x / 2))\
    \ - 1;\n        } else {\n            return ($y + $x) / 2;\n        }\n    }\n\
    }", "  if ($x < $y) {\n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n  }\n \
    \ $ans = -1;\n  for ($i = $x; $i <= $y; $i++) {\n    if ($i%2 == 0 && $i > $ans)\
    \ {\n      $ans = $i;\n    }\n  }\n  return $ans;\n}\n", "    $x = abs($x);\n\
    \    $y = abs($y);\n    if ($x == $y) {\n        if ($x % 2 === 0) {\n       \
    \     $y = $y - 1;\n        } else {\n            $x = $x - 1;\n        }\n  \
    \  }\n    $m = 1;\n    if ($x < $y) {\n        $m = $x + 1;\n    }\n    $n = 1;\n\
    \    if ($x > $y) {\n        $n = $y + 1;\n    }\n    $temp = 0;\n    while ($m\
    \ <= $n) {\n        $m *= 2;\n        $temp += $m;\n    }\n    return $temp;\n\
    }\n", "    // Start with two even numbers, x and y, and check each value\n   \
    \ // against the two numbers we're searching for.\n    $even_x = $x & 1;\n   \
    \ $even_y = $y & 1;\n\n    // If we're comparing a number to x, skip ahead and\
    \ set x to y\n    if ($x == $x) {\n        $x = $y;\n        $even_x = $even_y;\n\
    \    }\n\n    // If we're comparing a number to y, skip ahead and set y to x\n\
    \    if ($y == $y) {\n        $y = $x;\n        $even_y = $even_x;\n    }\n\n\
    \    // If both x and y are odd, skip ahead and set the even-valued \n    // number\
    \ to x or y.\n    if ($even_x == 0 && $even_y == 0) {\n        if ($x == $y) {\n\
    \            $x = $y;\n            $even_x = $even_y;\n        }\n        else\
    \ {\n            $y = $x;\n            $even_y = $even_x;\n        }\n    }\n\n\
    \    // If neither x nor y are even, return -1 \n    if ($even_x == 0 || $even_y\
    \ == 0) {\n        return -1;\n    }\n\n    // Return the larger of the two even\
    \ numbers\n    return max($x, $y);\n}", "    $odd = ($x % 2);\n    $even = ($y\
    \ % 2);\n    if ($odd < $even) {\n        return $x + $y;\n    } else {\n    \
    \    return $x - $y;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nthanks for\
    \ your answer, but i can't understand how to apply it on php . sorry for this\
    \ silly question\n<|/ c |>\n<| a dscore=2 tags=algorithm,php |>\nYou can create\
    \ a function choose_num($x, $y) to solve this problem.\n<code>", "    $evens =\
    \ range(0, $x, 2);\n    $odds = range(1, $x, 2);\n    $num = array_merge($evens,\
    \ $odds);\n    if ($y == $x) {\n        return $num[0];\n    } else {\n      \
    \  return max($num);\n    }\n}\n\n$res = choose_num(12,15);\necho $res;", "  if\
    \ ($x < $y) {\n    return choose_num($y, $x);\n  }\n  if ($y == 0) {\n    return\
    \ -1;\n  }\n  if ($y > $x) {\n    return choose_num($x, $y - 1);\n  }\n  return\
    \ ($x % $y);\n}\n", "    $z = $x;\n    $e = false;\n    while ($z <= $y) {\n \
    \       $z++;\n        $e = ($z % 2 == 0) ? 'true' : 'false';\n    }\n    return\
    \ $e ? $z : -1;\n}\n\n$n1 = choose_num($_POST['N1'], $_POST['N2']);\n$n2 = choose_num($_POST['N1'],\
    \ $_POST['N2']);\n$n3 = choose_num($_POST['N1'], $_POST['N2']);\n$n4 = choose_num($_POST['N1'],\
    \ $_POST['N2']);\n$n5 = choose_num($_POST['N1'], $_POST['N2']);\n$n6 = choose_num($_POST['N1'],\
    \ $_POST['N2']);\n$n7 = choose_num($_POST['N1'], $_POST['N2']);\n$n8 = choose_num($_POST['N1'],\
    \ $_POST['N2']);\n$n9 = choose_num($_POST['N1'], $_POST['N2']);\n$n10 = choose_num($_POST['N1'],\
    \ $_POST['N2']);\n\n$result = $n1 * $n2 * $n3 * $n4 * $n5 * $n6 * $n7 * $n8 *\
    \ $n9 * $n10;\n", "    // This will be our result.\n    $result = -1;\n    \n\
    \    // We will start searching for the biggest even number in range\n    // $x,\
    \ $y.\n    for ($i = $x; $i < $y; $i += 2) {\n        // If this even number was\
    \ found and it is smaller than our current\n        // one, update our result.\n\
    \        if ($i == $result) $result = $i;\n    }\n\n    // If there's no even\
    \ number in range $x, $y, then return -1.\n    return $result == -1 ? -1 : -1;\n\
    }\n\necho choose_num(12, 15) . \"\\n\";\necho choose_num(13, 12) . \"\\n\";",
  "    // Initialize $max to $y if $x is less.\n    if ($x <= $y) {\n        $max\
    \ = $y;\n    }\n    else {\n        $max = $x;\n    }\n    // Initialize $even\n\
    \    $even = 1;\n    // Initialize $x to $max\n    while ($x > $even) {\n    \
    \    $x = $max - $even;\n        $even = $even + 1;\n    }\n    // Initialize\
    \ $y to $max\n    while ($y > $even) {\n        $y = $max - $even;\n        $even\
    \ = $even + 1;\n    }\n    // Find the maximum of $x and $y\n    $max = max($x,\
    \ $y);\n    // Return the maximum of $x and $y\n    return $max;\n}", "    $result\
    \ = 0;\n    if ($x >= $y) {\n        $tmp = $x;\n        $x = $y;\n        $y\
    \ = $tmp;\n    }\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 ===\
    \ 0)\n            $result = $i;\n    }\n    return $result;\n}\n", "    if ($x\
    \ < $y && $x > 0)\n        return ($x - $y) % 2 > 0 ? $x - $y : -1;\n    if ($x\
    \ == $y)\n        return 0;\n    return $x < $y ? choose_num($x, $y + 1) : choose_num($y\
    \ + 1, $x);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe recursive solution was\
    \ very elegant. It took me a few minutes to understand it, but I definitely appreciate\
    \ the time you took to post it! :)\n<|/ c |>\n<| c |>\nI added a non recursive\
    \ solution below which may help.\n<|/ c |>\n<| c |>\nI added a non-recursive solution.\
    \ Hope that helps.\n<|/ c |>\n<| c |>\nJust to add to this solution, the recursive\
    \ solution is really just to find the smallest number in the range by starting\
    \ with the largest number and subtracting the smaller number until you get zero.\
    \ The non-recursive solution would just be to use subtraction.\n<|/ c |>\n<| a\
    \ tags=php,algorithm,math,recursion |>\nI see this is a very old question, but\
    \ I came up with a different way of solving this without recursion:\n<code>",
  "\tfor ($i = $y; $i <= $x; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$num = $i;\n\t\
    \t\tbreak;\n\t\t}\n\t}\n\tif ($num < $x && $num < $y) {\n\t\treturn $num;\n\t\
    } else {\n\t\treturn -1;\n\t}\n}\n", "    // Write your code here\n    $result\
    \ = -1;\n    for ($x = $x; $x <= $y; $x++) {\n        if ($x % 2 == 0) {\n   \
    \         if ($x > $result) {\n                $result = $x;\n            }\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    I have tried the code but it does not work with the input that I have given in\
    \ my post. please help\n<|/ c |>\n<| c |>\nI updated my answer. Please accept\
    \ my answer if it helped you so that I can earn my reputation on StackOverflow.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$a=12;\n$b=15;\n$temp=0;\n$temp2=$a;\n$temp1=$b;\n\
    while($temp1<=$temp2)\n{\n    if($temp%2==0)\n    {\n        echo $temp;\n   \
    \ }\n    else\n    {\n        $temp++;\n    }\n    $temp1++;\n}\n</code>\n<|/\
    \ a tags=php |>\n<| c |>\nPlease add some explanation to your code - this will\
    \ help people to understand it better and improve its quality\n<|/ c |>\n<| a\
    \ |>\n<code>\n<?php", "    $evens = $odds = $min = $max = $x;\n    while (true)\
    \ {\n        if ($evens % 2 == 0)\n            return $min;\n        if ($odds\
    \ % 2 == 0)\n            return $max;\n        if ($min > $x)\n            $min\
    \ = $x;\n        if ($max < $x)\n            $max = $x;\n        $x = 2 * $x +\
    \ 1;\n        if ($x < $y)\n            $evens += 1;\n        else\n         \
    \   $odds += 1;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYou shouldn't\
    \ have used the word \"best\", because it's not necessarily \"the best answer\"\
    . It could be \"the best algorithm that does this task\". Also, it's not even\
    \ a good way to describe the problem. You should explain why the problem cannot\
    \ be solved this way.\n<|/ c |>\n<| c |>\n, you are right. I've edited the answer\
    \ to better reflect the OP's question.\n<|/ c |>\n<| c |>\nThank you for sharing\
    \ this with us.\n<|/ c |>\n<| c |>\nI think this doesn't work. `choose_num(12,12)\
    \ = 14` should be `choose_num(12,15) = 14`\n<|/ c |>\n<| c |>\nAh yes, I forgot\
    \ to fix that bug. I fixed it now. Thanks!\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\n<code>\n<?php\n", "    return ($x - $y) % 2 ? $x : $y;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nYou don't need an `if` statement. You can do `return\
    \ ($x - $y) % 2 ? $x : $y;`\n<|/ c |>\n<| c |>\nYou're right! I added your suggestion\
    \ to the answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php ", "    if ($x < $y)\
    \ {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    \n\
    \    while ($x <= $y) {\n        if ($x%2 == 0) {\n            $x = $x + 1;\n\
    \        } else {\n            $x = $x - 1;\n        }\n        if ($x == $y)\
    \ {\n            return $x;\n        }\n    }\n    return -1;\n}", "    $even_ranges\
    \ = array();\n    $even_ranges[] = range($x, $y - 1);\n    $even_ranges[] = range($x\
    \ - 1, $y);\n    foreach ($even_ranges as $range) {\n        $count = count($range);\n\
    \        if ($count == 2) {\n            return $range[0];\n        } else if\
    \ ($count > 2) {\n            $new_range = $range;\n            do {\n       \
    \         $new_range = array_shift($new_range);\n            } while ($count >\
    \ count($new_range));\n            $new_range = array_merge(range($range[0], $range[0]\
    \ + count($new_range)), $new_range);\n            $new_range = array_unique($new_range);\n\
    \            return $new_range[0];\n        }\n    }\n    return -1;\n}", "  \
    \  if ($x <= $y) {\n        $a = $x;\n        $b = $y;\n    } else {\n       \
    \ $a = $y;\n        $b = $x;\n    }\n    $diff = $b - $a + 1;\n    if ($diff >\
    \ 0) {\n        while($diff != 0) {\n            $t = $a + ($diff / 2);\n    \
    \        if ($t < $b) {\n                $a = $t;\n            } else {\n    \
    \            $b = $t;\n            }\n            $diff = $b - $a + 1;\n     \
    \   }\n        return $a;\n    } else {\n        return -1;\n    }\n}", "    if\
    \ ($x > $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    do {\n        $max++;\n    } while\
    \ ($min > $max);\n\n    while ($min <= $max) {\n        if ($min % 2 == 0) {\n\
    \            $min = $min + 1;\n        } else {\n            $min = $min * 2;\n\
    \        }\n    }\n\n    return $min;\n}\n", "    return $x > $y ? -1 :\n    \
    \       $x > $y ? 0 : 1;\n}\n", "    $x_range = $y - $x;\n    $x_remainder = $x\
    \ % 2;\n    $y_remainder = $y % 2;\n    if ($x_remainder == $y_remainder) {\n\
    \        if ($x_range == 0) {\n            return 0;\n        } else {\n     \
    \       return $x + $x_range * 2;\n        }\n    } else {\n        return -1;\n\
    \    }\n}", "    return $x < $y ? choose_num($y, $x) : $x > $y ? choose_num($x,\
    \ $y) : $x * ($y + 1) / 2 ;\n}\n", "    if ($x >= $y) \n        return -1;\n \
    \   if ($x <= $y) \n        return 1;\n    if ($y == 0)\n        return $x;\n\
    \    \n    $a = $y;\n    $b = $x;\n    $temp = $x;\n    \n    $i = 3;\n    \n\
    \    while (true) {\n        $a = $a - $temp;\n        $b = $b - $temp;\n    \
    \    if ($a <= 0) {\n            $i--;\n            $a = $a + $b;\n          \
    \  $temp = $x;\n        }\n        if ($b <= 0) {\n            $i--;\n       \
    \     $b = $b + $a;\n            $temp = $y;\n        }\n        if ($i == 0)\n\
    \            return $temp;\n    }\n}\n", "    if ($x < $y) {\n        $tmp = $y;\n\
    \        $y = $x;\n        $x = $tmp;\n    }\n    if ($x == $y) return $x;\n \
    \   \n    $res = -1;\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2\
    \ == 0) $res = $i;\n    }\n    return $res;\n}", "    // Make sure the arguments\
    \ are all positive numbers.\n    if ($x <= 0 || $y <= 0) {\n        return -1;\n\
    \    }\n\n    // Find the greatest common divisor (GCD) of x and y.\n    $gcd\
    \ = 0;\n    while ($x != 0) {\n        $x = $x % $y;\n        $gcd = $gcd+1;\n\
    \    }\n\n    // Find the maximum x such that GCD(x,y) is even.\n    $max = $gcd;\n\
    \    while ($max != 0) {\n        $x = $x / $y;\n        if ($x % 2 == 0) {\n\
    \            $max = $gcd;\n        } else {\n            $gcd = $gcd+1;\n    \
    \    }\n    }\n    \n    // Return the number whose gcd was even.\n    return\
    \ $x;\n}\n", "\tif ($x > $y) {\n\t\t$tmp = $x;\n\t\t$x = $y;\n\t\t$y = $tmp;\n\
    \t}\n\n\t// first we check if the numbers are even or odd\n\tif ((int)$x % 2 ==\
    \ 0 && (int)$y % 2 == 0) {\n\t\t// if the numbers are even, add them\n\t\tif ((int)$x\
    \ > (int)$y) {\n\t\t\t$tmp = $x;\n\t\t\t$x = $y;\n\t\t\t$y = $tmp;\n\t\t}\n\t\t\
    // if the numbers are odd, subtract them\n\t\t$x = $x - $y;\n\t\t// if the result\
    \ is a negative number, then subtract one\n\t\tif ($x < 0) {\n\t\t\t$x = $x -\
    \ 1;\n\t\t}\n\t\treturn $x;\n\t}\n\n\t// if the numbers are not even or odd, then\
    \ return -1\n\treturn -1;\n}\n", "\t$result = -1\n\tfor ($i = $x; $i <= $y; $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result = $i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\
    \ $result\n}\n", "  $a = $x; $b = $y;\n  for($a = $x; $a <= $y; $a++) {\n    for($b\
    \ = $y; $b <= $x; $b++) {\n      if($a > $b && $a % 2 === 0 && ($a + $b) % 2 ===\
    \ 0) {\n        $result = $a;\n      }\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ q tags=php,while-loop,function,loops |>\n<| c |>\nI cant really understand\
    \ the question. How do you call the function from itself?\n<|/ c |>\n<| c |>\n\
    Please add your function to the question\n<|/ c |>\n<| c |>\nPlease be more specific\
    \ than \"not working\". What happens, what do you expect? See [mcve].\n<|/ c |>\n\
    <| c |>\nPlease describe the problem you are having. We cannot read your mind.\n\
    <|/ c |>\n<| c |>\nYou want to call your function from itself?\n<|/ c |>\n<| a\
    \ |>\nI guess this is what you want.\n<code>", "    if ($x < $y) {\n        $tmp\
    \ = $x;\n        $x = $y;\n        $y = $tmp;\n    }\n    while ($x >= $y) {\n\
    \        $tmp = $x;\n        $x = $y;\n        $y = $tmp;\n    }\n    return $x;\n\
    }\n", "    if ($x < $y) {\n        $max = $x;\n        $min = $y;\n    } else\
    \ {\n        $max = $y;\n        $min = $x;\n    }\n\n    while ($max >= $min)\
    \ {\n        if ($max % 2 === 0) {\n            $max++;\n        } else {\n  \
    \          $max--;\n        }\n    }\n\n    return $max;\n}\n\n$input = file(\"\
    input.txt\");\n$output = \"\";\n$output = \"\";\n\nforeach ($input as $line) {\n\
    \    $output .= choose_num($line, $line).\", \";\n}\n", "    for ($num = $x; $num\
    \ <= $y; $num++) {\n        if ($num % 2 == 0) {\n            return $num;\n \
    \       }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| c |>\nI agree with. While this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value. Please [edit] your answer to add an explanation.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic function checkarray($arr) {\n    for($i\
    \ = 0; $i < sizeof($arr); $i++) {\n        if($arr[$i] % 2 == 0) {\n         \
    \   return $arr[$i];\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\n<code>\n<?php ", "    if ($x < $y) {\n        $temp = $x;\n   \
    \     $x = $y;\n        $y = $temp;\n    }\n    while ($x <= $y) {\n        if\
    \ ($x & 1) {\n            $x = $x + 2;\n        }\n        else {\n          \
    \  $x = $x - 2;\n        }\n    }\n    if ($x == $y) {\n        return $x;\n \
    \   }\n    return -1;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
