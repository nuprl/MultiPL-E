name: HumanEval_81_numerical_letter_grade
language: php
results:
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_values($grades);\n    sort($grades);\n    $max = max($grades);\n    $grades\
    \ = array_unique($grades);\n    $total = count($grades);\n    $count = $grades[0];\n\
    \    $grade_array = [];\n    $current_grade = null;\n    for ($i = 0; $i < $total;\
    \ $i++) {\n        $current = $grades[$i];\n        if ($current == 0) {\n   \
    \         $grade_array[$i] = null;\n            continue;\n        } elseif ($current\
    \ == $count) {\n            $grade_array[$i] = $current_grade;\n            continue;\n\
    \        }\n        $next = $current + 1;\n        if ($next > $count) {\n   \
    \         $next = $count;\n        }\n        $nextGrade = $grades[$next];\n \
    \       $grade = $count > 2 ? 'B-' : 'B-';\n        if ($nextGrade > 0) {\n  \
    \          $grade .= $nextGrade . '+';\n        } else {\n            $grade .=\
    \ ($nextGrade > 0) ? 'B-' : 'A-';\n        }\n        $grade .= ($current > $max)\
    \ ? 'E' : 'D-';\n        if ($count > 1) {\n            $grade .= ($count > 3)\
    \ ? \"C+\" : \"C\";\n        } else {\n            $grade .= ($count > 1) ? \"\
    C\" : \"C+\";\n        }\n        $grade_array[$i] = $grade;\n        $count =\
    \ $next;\n        $current_grade = $grade;\n    }\n    return $grade_array;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxp2nleb_.php:70\n\
    Stack trace:\n#0 /tmp/tmpxp2nleb_.php(78): test()\n#1 {main}\n  thrown in /tmp/tmpxp2nleb_.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades = array_map(function($value)\
    \ {\n\t\t$value = floatval($value);\n\t\tif ($value > 3.0) {\n\t\t\treturn 'C';\n\
    \t\t} elseif ($value > 2.7) {\n\t\t\treturn 'B';\n\t\t} elseif ($value > 2.0)\
    \ {\n\t\t\treturn 'B-';\n\t\t} elseif ($value > 1.7) {\n\t\t\treturn 'B-';\n\t\
    \t} elseif ($value > 1.0) {\n\t\t\treturn 'A+';\n\t\t} elseif ($value > 0.7) {\n\
    \t\t\treturn 'A';\n\t\t} elseif ($value > 0.0) {\n\t\t\treturn 'D-';\n\t\t} else\
    \ {\n\t\t\treturn 'E';\n\t\t}\n\t}, $grades);\n\n\t$grades = array_filter(function($value)\
    \ {\n\t\treturn $value !== 0.0;\n\t}, $grades);\n\n\treturn $grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 1 to be array, object given\
    \ in /tmp/tmpznl03l9s.php on line 47\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpznl03l9s.php:57\nStack trace:\n#0 /tmp/tmpznl03l9s.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpznl03l9s.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ solution here\n\n}\n</code>\n<|/ q tags=arrays,multidimensional-array,php,array-key\
    \ |>\n<| c |>\nDid you mean `['E', 'F', 'A-', 'C-', 'A+']`?\n<|/ c |>\n<| c |>\n\
    What does `array_keys()` have to do with it?\n<|/ c |>\n<| c |>\nsorry typo!\n\
    <|/ c |>\n<| c |>\nit returns all the keys of an array, so i thought it might\
    \ be what i needed\n<|/ c |>\n<| a tags=arrays,multidimensional-array,php,array-key\
    \ |>\nYou can use array_filter to filter your array and only return the value\
    \ that matches a condition:\n<code>\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuh3pbux0.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_reverse($grades);\n    $grade_sum = 0;\n    $grade_average = 0;\n    foreach\
    \ ($grades as $grade) {\n        $grade_sum += $grade;\n        $grade_average\
    \ = $grade_sum / count($grades);\n    }\n    $grade_average = round($grade_average,\
    \ 2);\n    $letter_grade = '';\n    if ($grade_average >= 3.0) {\n        if ($grade_average\
    \ >= 3.0 && $grade_average <= 3.7) {\n            $letter_grade = 'A+';\n    \
    \    } elseif ($grade_average >= 3.7 && $grade_average <= 3.9) {\n           \
    \ $letter_grade = 'A';\n        } elseif ($grade_average >= 3.9 && $grade_average\
    \ <= 3.99) {\n            $letter_grade = 'A- ';\n        } elseif ($grade_average\
    \ >= 3.99 && $grade_average <= 3.999) {\n            $letter_grade = 'B+';\n \
    \       } elseif ($grade_average >= 3.999 && $grade_average <= 4.00) {\n     \
    \       $letter_grade = 'B';\n        } elseif ($grade_average >= 4.00 && $grade_average\
    \ <= 4.999) {\n            $letter_grade = 'B-';\n        } elseif ($grade_average\
    \ >= 4.999 && $grade_average <= 5.0) {\n            $letter_grade = 'C+';\n  \
    \      } elseif ($grade_average >= 5.0 && $grade_average <= 5.99) {\n        \
    \    $letter_grade = 'C';\n        } elseif ($grade_average >= 5.99 && $grade_average\
    \ <= 6.00) {\n            $letter_grade = 'C-';\n        } elseif ($grade_average\
    \ >= 6.00 && $grade_average <= 6.99) {\n            $letter_grade = 'D+';\n  \
    \      } elseif ($grade_average >= 6.99 && $grade_average <= 7.00) {\n       \
    \     $letter_grade = 'D';\n        } elseif ($grade_average >= 7.00 && $grade_average\
    \ <= 7.99) {\n            $letter_grade = 'D-';\n        } elseif ($grade_average\
    \ >= 7.99 && $grade_average <= 8.00) {\n            $letter_grade = 'E';\n   \
    \     }\n    }\n    return $letter_grade;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp379d5wjo.php:70\n\
    Stack trace:\n#0 /tmp/tmp379d5wjo.php(78): test()\n#1 {main}\n  thrown in /tmp/tmp379d5wjo.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\tglobal $semester_grades;\n\
    \t$grades = explode(',', $grades);\n\t$grades = array_map(\n\t\tfunction($a) {\n\
    \t\t\treturn round($a, 0);\n\t\t},\n\t\t$grades\n\t);\n\t$grades = array_unique($grades);\n\
    \t$grades = array_filter($grades);\n\t$grades = array_values($grades);\n\n\t$min\
    \ = min(array_values($grades));\n\t$max = max(array_values($grades));\n\n\t$sum_of_grades\
    \ = 0;\n\tforeach ($grades as $grade) {\n\t\t$sum_of_grades += $grade;\n\t}\n\n\
    \t$grade_array = [];\n\tforeach ($grades as $grade) {\n\t\t$grade_array[$grade]\
    \ = '';\n\t}\n\n\t$grade_array['A+'] = 'A+';\n\t$grade_array['A'] = 'A';\n\t$grade_array['A-']\
    \ = 'A-';\n\t$grade_array['B+'] = 'B+';\n\t$grade_array['B'] = 'B';\n\t$grade_array['B-']\
    \ = 'B-';\n\t$grade_array['C+'] = 'C+';\n\t$grade_array['C'] = 'C';\n\t$grade_array['C-']\
    \ = 'C-';\n\t$grade_array['D+'] = 'D+';\n\t$grade_array['D'] = 'D';\n\t$grade_array['D-']\
    \ = 'D-';\n\t$grade_array['E'] = 'E';\n\n\treturn $grade_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmppwvrms9o.php\
    \ on line 25\n\nWarning: array_map(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmppwvrms9o.php on line 30\n\nWarning: array_unique() expects\
    \ parameter 1 to be array, null given in /tmp/tmppwvrms9o.php on line 32\n\nWarning:\
    \ array_filter() expects parameter 1 to be array, null given in /tmp/tmppwvrms9o.php\
    \ on line 33\n\nWarning: array_values() expects parameter 1 to be array, null\
    \ given in /tmp/tmppwvrms9o.php on line 34\n\nWarning: array_values() expects\
    \ parameter 1 to be array, null given in /tmp/tmppwvrms9o.php on line 36\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmppwvrms9o.php\
    \ on line 36\n\nWarning: array_values() expects parameter 1 to be array, null\
    \ given in /tmp/tmppwvrms9o.php on line 37\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmppwvrms9o.php on line 37\n\nWarning:\
    \ Invalid argument supplied for foreach() in /tmp/tmppwvrms9o.php on line 40\n\
    \nWarning: Invalid argument supplied for foreach() in /tmp/tmppwvrms9o.php on\
    \ line 45\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwvrms9o.php:71\n\
    Stack trace:\n#0 /tmp/tmppwvrms9o.php(79): test()\n#1 {main}\n  thrown in /tmp/tmppwvrms9o.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_str\
    \ = implode(\", \", $grades);\n  $gpa = explode(\" \", $grades_str);\n  if (count($gpa)\
    \ < 3) throw new Exception(\"Not enough GPA values given.\");\n  $average = array_sum($gpa)\
    \ / count($gpa);\n  $letter_grades = array();\n  foreach($gpa as $g) {\n    if\
    \ ($g > $average) {\n      $letter_grades[] = \"A+\";\n    } else if ($g > 0 &&\
    \ $g < 3.7) {\n      $letter_grades[] = \"A\";\n    } else if ($g > 3.7 && $g\
    \ < 3.3) {\n      $letter_grades[] = \"A-\";\n    } else if ($g > 3.3 && $g <\
    \ 3) {\n      $letter_grades[] = \"B+\";\n    } else if ($g > 2.7 && $g < 2.3)\
    \ {\n      $letter_grades[] = \"B\";\n    } else if ($g > 2.3 && $g < 2) {\n \
    \     $letter_grades[] = \"B-\";\n    } else if ($g > 2 && $g < 1.7) {\n     \
    \ $letter_grades[] = \"C+\";\n    } else if ($g > 1.7 && $g < 1.3) {\n      $letter_grades[]\
    \ = \"C\";\n    } else if ($g > 1.3 && $g < 1) {\n      $letter_grades[] = \"\
    C-\";\n    } else if ($g > 1 && $g < 0.7) {\n      $letter_grades[] = \"D+\";\n\
    \    } else if ($g > 0.7 && $g < 0.0) {\n      $letter_grades[] = \"D\";\n   \
    \ } else if ($g > 0 && $g < 0.0) {\n      $letter_grades[] = \"D-\";\n    } else\
    \ {\n      $letter_grades[] = \"E\";\n    }\n  }\n  return implode(\" \", $letter_grades);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks so much, that looks great! I will play around\
    \ with it a little more to see if I can get it to work.\n<|/ c |>\n<| a tags=algorithm,php,math\
    \ dscore=1 |>\nOk, so I played around with this solution and came up with this.\
    \ It works but it looks very messy. I'm sure there's a cleaner way to code this.\
    \ Also it has a lot of extra checks. Hopefully someone can improve on this so\
    \ I don't have to keep adding more checks.\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph9c1m7cq.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_map(function\
    \ ($grade) {\n        // This line is what converts the GPA to the letter grade\n\
    \        return 'A+' === $grade ? 'A'\n                : 'A' === $grade ? 'A-'\n\
    \                : 'B+' === $grade ? 'B'\n                : 'B' === $grade ? 'B-'\n\
    \                : 'C+' === $grade ? 'C'\n                : 'C' === $grade ? 'C-'\n\
    \                : 'D+' === $grade ? 'D'\n                : 'D' === $grade ? 'D-'\n\
    \                : 'E' === $grade ? 'E' : null;\n    }, $grades);\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00s8r39f.php:43\n\
    Stack trace:\n#0 /tmp/tmp00s8r39f.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp00s8r39f.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($val) { return number_format($val, 0); }, $grades);\n   \
    \ sort($grades);\n    $grades[] = ['E', 0];\n    $result = array_filter($grades,\
    \ function($val) {\n        // $val[0] = the GPA given to the student\n      \
    \  // $val[1] = the letter grade given to the student\n        return $val[0]\
    \ >= 0 && $val[0] < 7 && $val[0] >= $val[1];\n    });\n    return array_map(function($val)\
    \ { return $val[1]; }, $result);\n}\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\n$letter_grades\
    \ = numerical_letter_grade($grades);\n\necho '<pre>';\nprint_r($letter_grades);\n\
    echo '</pre>';\n</code>\n<|/ a tags=php,php-5.6 |>\n<| c |>\nWhat is $grades,\
    \ how does it work?\n<|/ c |>\n<| c |>\n`array_filter()` filters the items from\
    \ an array. `array_map()` applies a function to the elements of an array.\n<|/\
    \ c |>\n<| c |>\nYes, I understood that, but I do not know how it works without\
    \ $grades. I got it from the example you gave in the code example but it does\
    \ not explain how it works. Thanks\n<|/ c |>\n<| c |>\nOkay, I edited the answer\
    \ to explain how the code works. I hope this helps!\n<|/ c |>\n<| a |>\nI like\
    \ Korvin Rudolph's solution, but wanted to point out that you could also do it\
    \ in PHP 5.4:\n<code>\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpntnrx_f4.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Do some\
    \ sanity checking on the inputs\n    if (!is_array($grades)) {\n        echo \"\
    ERROR: The grades array is not an array.\\n\";\n        return;\n    }\n    $grades\
    \ = array_map('floatval', $grades);\n\n    // A little sanity checking on the\
    \ inputs\n    if (!isset($grades[0]) || !isset($grades[count($grades) - 1])) {\n\
    \        echo \"ERROR: One of the grades array values is missing.\\n\";\n    \
    \    return;\n    }\n\n    // Sort the grades\n    sort($grades);\n    $grades\
    \ = array_reverse($grades);\n\n    // Get the first and last grade\n    $first_grade\
    \ = $grades[0];\n    $last_grade = $grades[count($grades) - 1];\n\n    // If the\
    \ last grade is 0, set the first grade to 0 as well\n    if ($last_grade == 0)\
    \ {\n        $grades[0] = 0;\n        $first_grade = 0;\n    }\n\n    // If first\
    \ and last grade are same, return empty grade\n    if ($first_grade == $last_grade)\
    \ {\n        return array();\n    }\n\n    // If first and last grades are different,\
    \ calculate the mid-grade\n    $mid_grade = (($first_grade + $last_grade) / 2);\n\
    \n    // Get the letter grade using table given\n    if ($mid_grade >= 4.0) {\n\
    \        $letter_grade = 'A+';\n    } elseif ($mid_grade > 3.7) {\n        $letter_grade\
    \ = 'A';\n    } elseif ($mid_grade > 3.3) {\n        $letter_grade = 'A-';\n \
    \   } elseif ($mid_grade > 3) {\n        $letter_grade = 'B+';\n    } elseif ($mid_grade\
    \ > 2.7) {\n        $letter_grade = 'B';\n    } elseif ($mid_grade > 2.3) {\n\
    \        $letter_grade = 'B-';\n    } elseif ($mid_grade > 2) {\n        $letter_grade\
    \ = 'C+';\n    } elseif ($mid_grade > 1.7) {\n        $letter_grade = 'C';\n \
    \   } elseif ($mid_grade > 1.3) {\n        $letter_grade = 'C-';\n    } elseif\
    \ ($mid_grade > 1) {\n        $letter_grade = 'D+';\n    } elseif ($mid_grade\
    \ > 0.7) {\n        $letter_grade = 'D';\n    } elseif ($mid_grade > 0) {\n  \
    \      $letter_grade = 'D-';\n    } else {\n        $letter_grade = 'E';\n   \
    \ }\n\n    // Return the letter grade and mid grade\n    return array($letter_grade,\
    \ $mid_grade);\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcvpmm0_.php:97\n\
    Stack trace:\n#0 /tmp/tmpmcvpmm0_.php(105): test()\n#1 {main}\n  thrown in /tmp/tmpmcvpmm0_.php\
    \ on line 97\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = array('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-',\
    \ 'E');\n  $sum = 0;\n  $length = 0;\n  $index = 0;\n  $len = count($grades);\n\
    \  foreach($grades as $grade) {\n    $sum += $grade;\n    if($length == $len)\
    \ {\n      $index++;\n      $length = 0;\n    }\n    $length++;\n  }\n  $result\
    \ = '';\n  if($sum > 0) {\n    for($i = 0; $i < $len; $i++) {\n      $grade =\
    \ $grades[$i];\n      $gpa = $grade;\n      $letter_index = $index;\n      $sum\
    \ -= $grade;\n      if($sum < 0) {\n        $letter_index--;\n        $sum +=\
    \ $gpa;\n      }\n      $result[] = $letter_grades[$letter_index];\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: [] operator not supported for strings in\
    \ /tmp/tmp129uho0n.php:48\nStack trace:\n#0 /tmp/tmp129uho0n.php(55): numerical_letter_grade(Array)\n\
    #1 /tmp/tmp129uho0n.php(59): candidate(Array)\n#2 /tmp/tmp129uho0n.php(67): test()\n\
    #3 {main}\n  thrown in /tmp/tmp129uho0n.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_filter($grades);\n\
    \  sort($grades);\n\n  $grades_count = count($grades);\n  if ($grades_count >\
    \ 5) {\n    return ['D'];\n  }\n  if ($grades_count > 4) {\n    return ['A', 'B',\
    \ 'C', 'D'];\n  }\n  if ($grades_count > 3) {\n    return ['A', 'B', 'C'];\n \
    \ }\n  if ($grades_count > 2) {\n    return ['A', 'B'];\n  }\n  if ($grades_count\
    \ > 1) {\n    return ['A'];\n  }\n\n  return ['E'];\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fodkk7k.php:52\n\
    Stack trace:\n#0 /tmp/tmp5fodkk7k.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp5fodkk7k.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Only change\
    \ code below this line\n    if (empty($grades) || count($grades) === 0) {\n  \
    \      return \"\";\n    }\n\n    // Initialize variables\n    $grades = array_map(\"\
    floatval\", $grades);\n    $sumOfGrades = array_sum($grades);\n\n    if ($sumOfGrades\
    \ < 0) {\n        array_push($grades, 0);\n    }\n\n    $average = array_sum($grades)\
    \ / count($grades);\n\n    foreach ($grades as $key => $grade) {\n        if ($grade\
    \ == 0) {\n            $grades[$key] = \"+\";\n        } else {\n            $grades[$key]\
    \ = (1 / $average) * $grade;\n        }\n    }\n\n    $grades_array = array();\n\
    \    $average = array_sum($grades) / count($grades);\n\n    foreach ($grades as\
    \ $key => $grade) {\n        $grades_array[$key] = round($grade, 2);\n    }\n\n\
    \    $grades_array[0] = $average;\n    $grades_array[6] = \"+\";\n    $grades_array[11]\
    \ = \"-\";\n\n    $array = array();\n    for ($i = 1; $i < count($grades_array);\
    \ $i++) {\n        $array[] = $grades_array[$i];\n    }\n\n    $array = array_reverse($array);\n\
    \n    return $array;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzaw81fqj.php:73\n\
    Stack trace:\n#0 /tmp/tmpzaw81fqj.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpzaw81fqj.php\
    \ on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpilg3gne3.php:32\n\
    Stack trace:\n#0 /tmp/tmpilg3gne3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpilg3gne3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_array\
    \ = array(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0); // GPA values\n \
    \ $letter_grades = array(); // New array\n  $letter = array('A+', 'B', 'C-', 'C',\
    \ 'A-'); // Letters representing grades\n  foreach ($grades as $key => $value)\
    \ {\n    foreach ($grades_array as $gpa) {\n      if ($gpa >= $value) {\n    \
    \    array_push($letter_grades, $letter[$key]);\n        break;\n      }\n   \
    \ }\n  }\n  return $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfllkqd1o.php:44\n\
    Stack trace:\n#0 /tmp/tmpfllkqd1o.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpfllkqd1o.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_filter($grades);\n\
    \  $grades[] = 0.0;\n  $grades = array_values($grades);\n  $grade_array = array();\n\
    \  for ($i = 0; $i < count($grades); $i++) {\n    $grade_array[$i] = $grades[$i]\
    \ >= 4.0 ? $grades[$i] >= 3.7 ? 'A+' \n    : $grades[$i] >= 3.3 ? 'A- ' \n   \
    \ : $grades[$i] >= 3.0 ? 'B+' \n    : $grades[$i] >= 2.7 ? 'B '\n    : $grades[$i]\
    \ >= 2.3 ? 'B-' \n    : $grades[$i] >= 2.0 ? 'C+' \n    : $grades[$i] >= 1.7 ?\
    \ 'C'\n    : $grades[$i] >= 1.3 ? 'C-' \n    : $grades[$i] >= 1.0 ? 'D+' \n  \
    \  : $grades[$i] >= 0.7 ? 'D '\n    : $grades[$i] >= 0.0 ? 'D-'\n    : 'E';\n\
    \  }\n  return $grade_array;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnsw8q92c.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    foreach ($grades\
    \ as $grade) {\n        if ($grade >= 3.7) {\n            $grade = 'A+';\n   \
    \     } elseif ($grade >= 3.3) {\n            $grade = 'A';\n        } elseif\
    \ ($grade >= 3) {\n            $grade = 'A-';\n        } elseif ($grade >= 2.7)\
    \ {\n            $grade = 'B+';\n        } elseif ($grade >= 2.3) {\n        \
    \    $grade = 'B';\n        } elseif ($grade >= 2) {\n            $grade = 'B-';\n\
    \        } elseif ($grade >= 1.7) {\n            $grade = 'C+';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grade = 'C';\n        } elseif ($grade >= 1)\
    \ {\n            $grade = 'C-';\n        } elseif ($grade >= 0.7) {\n        \
    \    $grade = 'D+';\n        } elseif ($grade >= 0) {\n            $grade = 'D';\n\
    \        } else {\n            $grade = 'D-';\n        }\n    }\n    return $grade;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4x8k697.php:58\n\
    Stack trace:\n#0 /tmp/tmph4x8k697.php(66): test()\n#1 {main}\n  thrown in /tmp/tmph4x8k697.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_filter($grades,\
    \ function($grade) {\n        if ($grade == 0) {\n            return false;\n\
    \        }\n        if ($grade < 0 || $grade > 100) {\n            return false;\n\
    \        }\n        return true;\n    }, ARRAY_FILTER_USE_BOTH);\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3cdlgm7.php:39\n\
    Stack trace:\n#0 /tmp/tmpn3cdlgm7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpn3cdlgm7.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_length\
    \ = count($grades);\n    if ($grades_length < 4) {\n        die(\"Your grades\
    \ list must contain at least 4 elements.\");\n    }\n    $total_grades = array_sum($grades);\n\
    \    if ($total_grades == 0) {\n        die(\"Your grades list must contain at\
    \ least one number greater than 0.\");\n    }\n    $total_grades -= 0;\n    $letter_grades\
    \ = [];\n    for ($i = 0; $i < $grades_length; $i++) {\n        $grade = $grades[$i];\n\
    \        $gpa = $grades[$i];\n        $letter_grade = \"\";\n        if ($gpa\
    \ >= 4.0) {\n            $letter_grade .= \"A+\";\n        } else if ($gpa > 3.7)\
    \ {\n            $letter_grade .= \"A\";\n        } else if ($gpa > 3.3) {\n \
    \           $letter_grade .= \"A-\";\n        } else if ($gpa > 3.0) {\n     \
    \       $letter_grade .= \"B+\";\n        } else if ($gpa > 2.7) {\n         \
    \   $letter_grade .= \"B\";\n        } else if ($gpa > 2.3) {\n            $letter_grade\
    \ .= \"B-\";\n        } else if ($gpa > 2.0) {\n            $letter_grade .= \"\
    C+\";\n        } else if ($gpa > 1.7) {\n            $letter_grade .= \"C\";\n\
    \        } else if ($gpa > 1.3) {\n            $letter_grade .= \"C-\";\n    \
    \    } else if ($gpa > 1.0) {\n            $letter_grade .= \"D+\";\n        }\
    \ else if ($gpa > 0.7) {\n            $letter_grade .= \"D\";\n        } else\
    \ if ($gpa > 0) {\n            $letter_grade .= \"D-\";\n        } else {\n  \
    \          $letter_grade .= \"E\";\n        }\n        $letter_grades[] = $letter_grade;\n\
    \    }\n    return $letter_grades;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Your grades list must contain at least 4 elements.
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ array('A+', 'B', 'C-', 'C', 'A-');\n    foreach($grades as $grade) {\n     \
    \   if($grade >= 4.0  && $grade <= 3.7) {\n            $letters[] = 'A+';\n  \
    \      } elseif($grade > 3.7 && $grade <= 3.3) {\n            $letters[] = 'A';\n\
    \        } elseif($grade > 3.3 && $grade <= 3.0) {\n            $letters[] = 'A-';\n\
    \        } elseif($grade > 3.0 && $grade <= 2.7) {\n            $letters[] = 'B+';\n\
    \        } elseif($grade > 2.7 && $grade <= 2.3) {\n            $letters[] = 'B';\n\
    \        } elseif($grade > 2.3 && $grade <= 2.0) {\n            $letters[] = 'B-';\n\
    \        } elseif($grade > 2.0 && $grade <= 1.7) {\n            $letters[] = 'C+';\n\
    \        } elseif($grade > 1.7 && $grade <= 1.2) {\n            $letters[] = 'C';\n\
    \        } elseif($grade > 1.2 && $grade <= 1.0) {\n            $letters[] = 'C-';\n\
    \        } elseif($grade > 1.0 && $grade <= 0.7) {\n            $letters[] = 'D+';\n\
    \        } elseif($grade > 0.7 && $grade <= 0.0) {\n            $letters[] = 'D';\n\
    \        } elseif($grade <= 0.0) {\n            $letters[] = 'D-';\n        }\
    \ else {\n            $letters[] = 'E';\n        }\n    }\n    return $letters;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbhuki59.php:61\n\
    Stack trace:\n#0 /tmp/tmpdbhuki59.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpdbhuki59.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_array\
    \ = explode(\",\", $grades);\n  $total_marks = array_sum($grades_array);\n  if($total_marks\
    \ <= 0.0) {\n    $total_marks = 0.0;\n  }\n  $letter_grades = array();\n  foreach($grades_array\
    \ as $grade) {\n    if($grade <= 3.7) {\n      $letter_grades[] = \"A+\";\n  \
    \  } elseif($grade > 3.7 && $grade <= 3.3) {\n      $letter_grades[] = \"A\";\n\
    \    } elseif($grade > 3.3 && $grade <= 3) {\n      $letter_grades[] = \"A-\"\
    ;\n    } elseif($grade > 3 && $grade <= 2.7) {\n      $letter_grades[] = \"B+\"\
    ;\n    } elseif($grade > 2.7 && $grade <= 2.3) {\n      $letter_grades[] = \"\
    B\";\n    } elseif($grade > 2.3 && $grade <= 2) {\n      $letter_grades[] = \"\
    B-\";\n    } elseif($grade > 2 && $grade <= 1.7) {\n      $letter_grades[] = \"\
    C+\";\n    } elseif($grade > 1.7 && $grade <= 1) {\n      $letter_grades[] = \"\
    C\";\n    } elseif($grade > 1 && $grade <= 0.7) {\n      $letter_grades[] = \"\
    C-\";\n    } elseif($grade > 0.7 && $grade <= 0) {\n      $letter_grades[] = \"\
    D\";\n    } else {\n      $letter_grades[] = \"D-\";\n    }\n  }\n  return implode(\"\
    \", $letter_grades);\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpmpp29by0.php\
    \ on line 24\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpmpp29by0.php on line 25\n\nWarning: Invalid argument supplied for\
    \ foreach() in /tmp/tmpmpp29by0.php on line 30\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmpp29by0.php:63\nStack trace:\n#0 /tmp/tmpmpp29by0.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmpp29by0.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_values($grades);\n    array_walk($grades, function(&$value) { $value =\
    \ intval($value); });\n\n    $grades_count = count($grades);\n    $letter_grades\
    \ = [];\n    \n    for($grade_index = 0; $grade_index < $grades_count; $grade_index++)\
    \ {\n        if($grades[$grade_index] <= 3.7) {\n            $letter_grades[$grade_index]\
    \ = 'A+';\n        } else if($grades[$grade_index] <= 3.3) {\n            $letter_grades[$grade_index]\
    \ = 'A';\n        } else if($grades[$grade_index] <= 3) {\n            $letter_grades[$grade_index]\
    \ = 'A-';\n        } else {\n            $letter_grades[$grade_index] = 'B+';\n\
    \        }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ugm0fai.php:48\n\
    Stack trace:\n#0 /tmp/tmp4ugm0fai.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4ugm0fai.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_array\
    \ = array(4.0=>'A+', 3.5=>'A', 3.0=>'A-', 2.5=>'B+', 2.0=>'B', 1.5=>'B-', 1.0=>'C+',\
    \ \n\t\t\t\t\t\t   0.7=>'C', 0.5=>'C-', 0.2=>'D+', 0.1=>'D', 0.0=>'D-', 0.0=>'E');\n\
    \  return array_map(function ($v) use ($grades) { return $grades[$v]; }, array_flip($grades_array));\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d635914.php:33\n\
    Stack trace:\n#0 /tmp/tmp8d635914.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8d635914.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  global $GPA_TABLE;\n\
    \  $letter_grade = \"\";\n  if(count($grades) >= count($GPA_TABLE)) {\n    $total_points\
    \ = 0;\n    foreach($grades as $grade) {\n      $total_points += $GPA_TABLE[$grade];\n\
    \    }\n    $letter_grade = $GPA_TABLE[$total_points / count($grades)];\n  }\n\
    \  return $letter_grade;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpsca7ydm_.php on line 26\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsca7ydm_.php:40\nStack trace:\n#0 /tmp/tmpsca7ydm_.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsca7ydm_.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grade_array\
    \ = array(\n        'A+' => array($gpa = 4.0, $grade = 'A+'),\n        'A' =>\
    \ array($gpa = 4.3, $grade = 'A'),\n        'A-' => array($gpa = 3.7, $grade =\
    \ 'A- '),\n        'B+' => array($gpa = 3.3, $grade = 'B+'),\n        'B' => array($gpa\
    \ = 3.1, $grade = 'B'),\n        'B-' => array($gpa = 2.7, $grade = 'B-'),\n \
    \       'C+' => array($gpa = 2.3, $grade = 'C+'),\n        'C' => array($gpa =\
    \ 2.1, $grade = 'C'),\n        'C-' => array($gpa = 1.7, $grade = 'C-'),\n   \
    \     'D+' => array($gpa = 1.3, $grade = 'D+'),\n        'D' => array($gpa = 1.0,\
    \ $grade = 'D'),\n        'D-' => array($gpa = 0.7, $grade = 'D-'),\n        'E'\
    \ => array($gpa = 0.0, $grade = 'E'),\n    );\n    \n    $grades = array_values($grades);\n\
    \    $grades_sum = array_sum($grades);\n    $result = array();\n    $student_gpa\
    \ = $grades_sum / count($grades);\n    \n    foreach ($grades as $grade) {\n \
    \       $gpa = $grade / $student_gpa;\n        $result[] = $grade_array[$grade]['grade']\
    \ . $gpa;\n    }\n    \n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbi5t69p6.php:58\n\
    Stack trace:\n#0 /tmp/tmpbi5t69p6.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpbi5t69p6.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_filter(\n        array_map(\n            'trim',\n            preg_replace('/[^\\\
    d\\.]/', '', $grades)\n        ),\n        'is_numeric'\n    );\n    sort($grades,\
    \ SORT_NUMERIC);\n    foreach ($grades as $grade) {\n        $letter_grade = '';\n\
    \        if ($grade >= 4.0) {\n            $letter_grade = 'A+';\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grade = 'A';\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grade = 'A-';\n        } elseif ($grade >= 3)\
    \ {\n            $letter_grade = 'B+';\n        } elseif ($grade >= 2.7) {\n \
    \           $letter_grade = 'B';\n        } elseif ($grade >= 2.3) {\n       \
    \     $letter_grade = 'B-';\n        } elseif ($grade >= 2) {\n            $letter_grade\
    \ = 'C+';\n        } elseif ($grade >= 1.7) {\n            $letter_grade = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $letter_grade = 'C-';\n     \
    \   } elseif ($grade >= 1) {\n            $letter_grade = 'D+';\n        } elseif\
    \ ($grade >= 0.7) {\n            $letter_grade = 'D';\n        } elseif ($grade\
    \ == 0) {\n            $letter_grade = 'D-';\n        } else {\n            $letter_grade\
    \ = 'E';\n        }\n        return $letter_grade;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02li4urj.php:70\n\
    Stack trace:\n#0 /tmp/tmp02li4urj.php(78): test()\n#1 {main}\n  thrown in /tmp/tmp02li4urj.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_filter($grades);\n    $letter_grade = \"\";\n    foreach($grades as $grade)\
    \ {\n        if ($grade < 3.0) {\n            $letter_grade .= \"A-\";\n     \
    \   } else if ($grade < 3.3) {\n            $letter_grade .= \"A-\";\n       \
    \ } else if ($grade < 3.7) {\n            $letter_grade .= \"A\";\n        } else\
    \ if ($grade < 4.0) {\n            $letter_grade .= \"A+\";\n        } else if\
    \ ($grade < 4.7) {\n            $letter_grade .= \"B+\";\n        } else if ($grade\
    \ < 5.0) {\n            $letter_grade .= \"B\";\n        } else if ($grade < 5.7)\
    \ {\n            $letter_grade .= \"B-\";\n        } else if ($grade < 6.0) {\n\
    \            $letter_grade .= \"C+\";\n        } else if ($grade < 6.7) {\n  \
    \          $letter_grade .= \"C\";\n        } else if ($grade < 7.0) {\n     \
    \       $letter_grade .= \"C-\";\n        } else if ($grade < 7.7) {\n       \
    \     $letter_grade .= \"D+\";\n        } else if ($grade < 8.0) {\n         \
    \   $letter_grade .= \"D\";\n        } else if ($grade < 8.7) {\n            $letter_grade\
    \ .= \"D-\";\n        } else if ($grade < 9.0) {\n            $letter_grade .=\
    \ \"E\";\n        } else {\n            $letter_grade .= \"D\";\n        }\n \
    \   }\n    return $letter_grade;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8dgztvpg.php:67\n\
    Stack trace:\n#0 /tmp/tmp8dgztvpg.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp8dgztvpg.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_reversed\
    \ = array_reverse($grades);\n  return array_map(function($grade) use ($grades_reversed)\
    \ {\n    if ($grade === 0.0) {\n      return 'E';\n    }\n    return $grades_reversed[$grade];\n\
    \  }, $grades);\n}\n</code>\n<code>\n$grades = [4.0, 3, 1.7, 2, 3.5];\necho '<pre>'.print_r(numerical_letter_grade($grades),\
    \ 1).'</pre>';\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => A+\n    [1] =>\
    \ B\n    [2] => C-\n    [3] => C\n    [4] => A-\n)\n</code>\nAnd finally the most\
    \ important part:\n\nYour code should use conditionals.\n\nConditional statements\
    \ can help you improve your code by skipping certain branches when certain conditions\
    \ are met. \n\nTo learn more about conditionals checkout this tutorial on conditionals\
    \ in PHP\n<|/ a tags=php,if-statement |>\n<| c |>\n`array_flip()` is not needed\
    \ here. You don't care about the keys, the values have to be reversed, so flipping\
    \ is just adding more overhead.\n<|/ c |>\n<| a dscore=0 |>\nThis was a fun one.\
    \  I created an algorithm that took an input array and converted it to another\
    \ array containing the letters.\nThe basic idea is to use the modulo to determine\
    \ if the input number is even or odd.  If it's even, divide by 2.  If the number\
    \ is odd, divide by 2 and subtract 1.  If the number is 0, return 'D-'.  If it's\
    \ 1, return 'D'.  If the number is 2, return 'C-'.\nI tried to keep it easy to\
    \ read and understand.  Let me know if there's anything you don't understand.\n\
    <code>\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjc7m62i2.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  if (count($grades)\
    \ < 2) {\n    return ['E'];\n  }\n  else {\n    $min_grade = min($grades);\n \
    \   $max_grade = max($grades);\n    $grades   = array_map('round', $grades);\n\
    \n    if ($max_grade == 0){\n      return ['E'];\n    }\n    elseif ($min_grade\
    \ == 0) {\n      $min_grade = 0.0;\n    }\n    else {\n      // the lowest grade\
    \ that can not be achieved is E\n      if ($max_grade >= 3.0) {\n        $min_grade\
    \ = 1.0;\n      }\n    }\n\n    $letter_grades = array();\n\n    // calculating\
    \ letters grades until we have achieved a grade\n    for ($i = $min_grade; $i\
    \ <= $max_grade; $i++) {\n      $letter_grades[$i] = array_search($i, $grades);\n\
    \      if ($i == $letter_grades[$i]) {\n        break;\n      }\n    }\n\n   \
    \ return $letter_grades;\n  }\n}\n</code>\n<|/ a tags=php,math,arrays |>\n<| a\
    \ |>\nIn case someone stumbles upon this post:\nI ran into this issue recently\
    \ and found a more elegant solution than using array_diff on the arrays with numeric\
    \ values as the keys.\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplqja62_s.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_filter($grades, function($g) { return ($g > 0); });\n    sort($grades);\n\
    \    $grades_count = count($grades);\n    $grades_div = $grades_count - 1;\n \
    \   $grades_tot = 0;\n    foreach ($grades as $g) {\n        $grades_tot += $g;\n\
    \    }\n    $grades_avg = round($grades_tot / $grades_count, 1);\n    $grades_avg\
    \ = floatval($grades_avg);\n    $grades_div = floatval($grades_div);\n    if ($grades_div\
    \ > 0) {\n        $grades_avg = round($grades_avg / $grades_div, 1);\n    }\n\
    \    if ($grades_avg > 4.0) {\n        $grades_avg = round($grades_avg * 4.0,\
    \ 1);\n    }\n    $grades_avg = floatval($grades_avg);\n    $grades = array_map(function($g)\
    \ {\n        return chr($g);\n    }, $grades);\n    $grades = array_filter($grades,\
    \ function($g) { return ($g > 0); });\n    $grades = array_merge($grades, [\"\
    -\"]);\n    $grades = array_merge($grades, [\"-\"]);\n    $grades = array_merge($grades,\
    \ [\"-\"]);\n    $grades = array_merge($grades, [\"-\"]);\n    $grades = array_merge($grades,\
    \ [\"-\"]);\n    $grades = array_merge($grades, [\"-\"]);\n    $grades = array_merge($grades,\
    \ [\"-\"]);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjrqgzo0.php:61\n\
    Stack trace:\n#0 /tmp/tmpgjrqgzo0.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpgjrqgzo0.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  // Your code\
    \ here...\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphgdxs9ol.php:31\n\
    Stack trace:\n#0 /tmp/tmphgdxs9ol.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphgdxs9ol.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grade = array_sum($grades)\
    \ / count($grades);\n  \n  $grades = array_map(function($g) { return round($g);\
    \ }, $grades);\n  \n  foreach ($grades as $k => $g) {\n    if ($g > 0) {\n   \
    \   if ($g >= 2.7) {\n        echo \"+\";\n      }\n      \n      if ($g >= 2.3)\
    \ {\n        echo \"-\";\n      }\n      \n      if ($g >= 1.7) {\n        echo\
    \ \"C\";\n      }\n      \n      if ($g >= 1.3) {\n        echo \"C-\";\n    \
    \  }\n      \n      if ($g >= 1.0) {\n        echo \"D+\";\n      }\n      \n\
    \      if ($g >= 0.7) {\n        echo \"D\";\n      }\n      \n      if ($g >=\
    \ 0.0) {\n        echo \"D-\";\n      }\n      \n      if ($g >= 0.0) {\n    \
    \    echo \"E\";\n      }\n    }\n  }\n  \n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "+-CC-D+DD-E+-CC-D+DD-ECC-D+DD-ECC-D+DD-E+-CC-D+DD-E\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp8p4x3v6z.php:71\nStack trace:\n#0 /tmp/tmp8p4x3v6z.php(79):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8p4x3v6z.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    list($gpa,\
    \ $grade) = $grades;\n    $grades = array('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+',\
    \ 'C', 'C-', 'D+', 'D', 'D-', 'E');\n    return $grades[round($gpa - 1)] + $grade;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpysv372pp.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysv372pp.php:34\n\
    Stack trace:\n#0 /tmp/tmpysv372pp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpysv372pp.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array();\n    \n    foreach($grades as $grade) {\n        \n        // If the\
    \ grade is less than 3.0 then subtract a grade of 'E'\n        if ($grade < 3.0)\
    \ {\n            $grades[$grade] = '+';\n        } elseif ($grade < 3.7) {\n \
    \           $grades[$grade] = 'A';\n        } elseif ($grade < 3.3) {\n      \
    \      $grades[$grade] = 'A-';\n        } elseif ($grade < 3) {\n            $grades[$grade]\
    \ = 'B+';\n        } elseif ($grade < 2.7) {\n            $grades[$grade] = 'B';\n\
    \        } elseif ($grade < 2.3) {\n            $grades[$grade] = 'B-';\n    \
    \    } elseif ($grade < 2) {\n            $grades[$grade] = 'C+';\n        } elseif\
    \ ($grade < 1.7) {\n            $grades[$grade] = 'C';\n        } elseif ($grade\
    \ < 1.3) {\n            $grades[$grade] = 'C-';\n        } elseif ($grade < 1)\
    \ {\n            $grades[$grade] = 'D+';\n        } elseif ($grade < 0.7) {\n\
    \            $grades[$grade] = 'D';\n        } elseif ($grade < 0) {\n       \
    \     $grades[$grade] = 'D-';\n        } else {\n            $grades[$grade] =\
    \ 'E';\n        }\n    }\n    \n    return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbiwb38m.php:66\n\
    Stack trace:\n#0 /tmp/tmpsbiwb38m.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpsbiwb38m.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    foreach($grades\
    \ as $grade) {\n        if ($grade > 3.0) {\n            $letter_grade = 'A+';\n\
    \        } elseif ($grade > 3.0 && $grade <= 3.7) {\n            $letter_grade\
    \ = 'A';\n        } elseif ($grade > 3.3 && $grade <= 3.7) {\n            $letter_grade\
    \ = 'A-';\n        } elseif ($grade > 3.0 && $grade <= 3.0) {\n            $letter_grade\
    \ = 'B+';\n        } elseif ($grade > 2.7 && $grade <= 3.0) {\n            $letter_grade\
    \ = 'B';\n        } elseif ($grade > 2.3 && $grade <= 2.7) {\n            $letter_grade\
    \ = 'B-';\n        } elseif ($grade > 2.0 && $grade <= 2.3) {\n            $letter_grade\
    \ = 'C+';\n        } elseif ($grade > 1.7 && $grade <= 2.0) {\n            $letter_grade\
    \ = 'C';\n        } elseif ($grade > 1.3 && $grade <= 1.7) {\n            $letter_grade\
    \ = 'C-';\n        } elseif ($grade > 1.0 && $grade <= 1.3) {\n            $letter_grade\
    \ = 'D+';\n        } elseif ($grade > 0.7 && $grade <= 1.0) {\n            $letter_grade\
    \ = 'D';\n        } elseif ($grade > 0.0 && $grade <= 0.7) {\n            $letter_grade\
    \ = 'D-';\n        } else {\n            $letter_grade = 'E';\n        }\n   \
    \     $letterGrades[] = $letter_grade;\n    }\n    return $letterGrades;\n}\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4uui_v9w.php:61\n\
    Stack trace:\n#0 /tmp/tmp4uui_v9w.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp4uui_v9w.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    \n    $grades_sum\
    \ = 0;\n    foreach ($grades as $grade) {\n        $grades_sum += $grade;\n  \
    \  }\n\n    if ($grades_sum > 0){\n        $grades_sum = $grades_sum - 0.5;\n\
    \    }\n    else{\n        $grades_sum = $grades_sum + 0.5;\n    }\n    return\
    \ $grades_sum;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqo38jxw.php:44\n\
    Stack trace:\n#0 /tmp/tmpaqo38jxw.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpaqo38jxw.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades = array_map('floatval',\
    \ $grades);\n\tforeach ($grades as &$grade) {\n\t\tif (!is_numeric($grade)) {\n\
    \t\t\t$grade = null;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (array_filter($grades) ===\
    \ $grades) {\n\t\t$grade = null;\n\t}\n\treturn $grade;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06d20_9x.php:42\n\
    Stack trace:\n#0 /tmp/tmp06d20_9x.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp06d20_9x.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n   $grades = array_map('floatval',\
    \ $grades);\n   $length = count($grades);\n   $lettergrades = array();\n   $grades_sum\
    \ = array_sum($grades);\n   for($i = 0; $i < $length; $i++) {\n      $current_grade\
    \ = $grades[$i];\n      $lettergrades[$i] = ($current_grade >= 4.0 && $current_grade\
    \ < 3.7) ? \"A+\" : ($current_grade >= 3.3 && $current_grade < 3.0) ? \"A-\" :\
    \ ($current_grade >= 2.7 && $current_grade < 2.3) ? \"B+\" : ($current_grade >=\
    \ 2.0 && $current_grade < 1.7) ? \"B\" : ($current_grade >= 1.3 && $current_grade\
    \ < 1.0) ? \"C+\" : ($current_grade >= 0.7 && $current_grade < 0.0) ? \"C\" :\
    \ ($current_grade >= 0.0) ? \"D\" : ($current_grade < 0.0) ? \"D-\" : ($current_grade\
    \ < 4.0) ? \"E\" : \"\";\n   }\n   return $lettergrades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfhgvib7.php:39\n\
    Stack trace:\n#0 /tmp/tmpxfhgvib7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxfhgvib7.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades  \
    \        = array_map( 'round', $grades );\n    $grades          = array_filter(\
    \ $grades, 'is_numeric' );\n    $letter_grades   = ['A+', 'B', 'C-', 'C', 'A-'];\n\
    \    $gpa_counter     = 0;\n    $letter_grade    = null;\n    $gpa_min       \
    \  = ( isset( $grades[0] ) ? $grades[0] : 0.0 );\n    $gpa_max         = ( isset(\
    \ $grades[count( $grades ) - 1] ) ? $grades[count( $grades ) - 1] : 0.0 );\n\n\
    \    if ( $gpa_counter > 0 && $gpa_counter < count( $grades ) - 1 ) {\n      \
    \  $gpa = array_sum( $grades );\n        $gpa = $gpa / count( $grades );\n   \
    \     if ( $gpa >= $gpa_min ) {\n            $letter_grade = $letter_grades[array_search(\
    \ $gpa, $grades )]; // >= 3.7, 3.3, 3.0, 2.7... > 3.7, 3.3, 3.0, 2.7, 2.3, 2.2...\
    \ \n            if ( $letter_grade !== $letter_grades[array_search( $gpa, $grades\
    \ )] ) { // >= 3.7, 3.3, 3.0, 2.7... > 3.7, 3.3, 3.0, 2.7... > 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.2... \n                $letter_grades[array_search( $gpa, $grades\
    \ )] = $letter_grade;\n            }\n        }\n    }\n\n    return $letter_grade;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ui0x8dj.php:51\n\
    Stack trace:\n#0 /tmp/tmp4ui0x8dj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp4ui0x8dj.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_sum\
    \ = 0;\n  foreach ($grades as $grade) {\n    $grades_sum += $grade;\n  }\n  if\
    \ ($grades_sum == 0) {\n    return 'E';\n  }\n  $grades_sum -= floor($grades_sum);\n\
    \  if ($grades_sum > 0) {\n    $grades_sum--;\n  }\n  $letters = array('C', 'A-',\
    \ 'B-', 'B+', 'C+', 'C', 'C-', 'D-', 'D', 'D+', 'D+');\n  return $letters[$grades_sum];\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_x6xa_l.php:44\n\
    Stack trace:\n#0 /tmp/tmpa_x6xa_l.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpa_x6xa_l.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if (is_numeric($grades)\
    \ && $grades >= 0.0 && $grades <= 1.0) {\n        // The array is sorted in descending\
    \ order with most to least grades.\n        $grades = $grades - 0.5;\n       \
    \ $grades = $grades * 100 + 0.5;\n        $grades = $grades / 100;\n        //\
    \ Since grades is a decimal number we round it off to get the correct answer.\n\
    \        $grades = round($grades, 2);\n        $grades = ceil($grades);\n    \
    \    $grades = floor($grades);\n        $grades = $grades % 10;\n        if ($grades\
    \ == 0) {\n            $grades = 'E';\n        }\n        $grades_array = array('A+',\
    \ 'B', 'C-', 'C', 'A-', 'D+', 'D', 'D-', 'E');\n        return $grades_array[$grades];\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgi0hyf7.php:48\n\
    Stack trace:\n#0 /tmp/tmpcgi0hyf7.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpcgi0hyf7.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  return implode('+',\
    \ array_map('\\grade_equation', array_reverse(array_reverse($grades))));\n}\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map() expects parameter 1 to be a valid callback, function\
    \ '\\grade_equation' not found or invalid function name in /tmp/tmpbpoorng7.php\
    \ on line 24\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpbpoorng7.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpoorng7.php:32\n\
    Stack trace:\n#0 /tmp/tmpbpoorng7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbpoorng7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map(\
    \ 'number_format', $grades);\n  $letter_grade = '';\n  foreach ($grades as $grade\
    \ => $points) {\n    $letter_grade .= $points > 0 ? 'A+' : $points < 0 ? 'A-'\
    \ : 'B+';\n  }\n  return $letter_grade;\n}\n\n$grades = array(\n  4.0  => 3,\n\
    \  3.5  => 1,\n  3.7  => 2,\n  3.3  => 1,\n  3.0  => 2,\n  2.7  => 2,\n  2.3 \
    \ => 1,\n  2.0  => 2,\n  1.7  => 2,\n  1.3  => 1,\n  1.0  => 2,\n  0.7  => 1,\n\
    \  0.0  => 0,\n  -4.0  => 0,\n  -3.5  => 0,\n  -3.7  => 0,\n  -3.3  => 0,\n  -3.0\
    \  => 0,\n  -2.7  => 0,\n  -2.3  => 0,\n  -2.0  => 0,\n  -1.7  => 0,\n  -1.3 \
    \ => 0,\n  -1.0  => 0,\n  -0.7  => 0,\n  -0.0 => 0\n);\n\necho numerical_letter_grade($grades);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nWhat if there are grades outside of the range\
    \ 1-5? Like 2.75 and -2.25\n<|/ c |>\n<| a dscore=1 |>\nThe main point here is\
    \ how you can make your formula to work with any number of inputs:\n<code>\n$grades\
    \ = array(\n  4.0  => 3,\n  3.5  => 1,\n  3.7  => 2,\n  3.3  => 1,\n  3.0  =>\
    \ 2,\n  2.7  => 2,\n  2.3  => 1,\n  2.0  => 2,\n  1.7  => 2,\n  1.3  => 1,\n \
    \ 1.0  => 2,\n  0.7  => 1,\n  0.0  => 0,\n  -4.0  => 0,\n  -3.5  => 0,\n  -3.7\
    \  => 0,\n  -3.3  => 0,\n  -3.0  => 0,\n  -2.7  => 0,\n  -2.3  => 0,\n  -2.0 \
    \ => 0,\n  -1.7  => 0,\n  -1.3  => 0,\n  -1.0  => 0,\n  -0.7  => 0,\n  -0.0 =>\
    \ 0\n);\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp65w_i15l.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ goes here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t5akkc8.php:32\n\
    Stack trace:\n#0 /tmp/tmp_t5akkc8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_t5akkc8.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array('C+', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D',\
    \ 'D-');\n    $sums = array();\n    $gpa = $grades[0]; // GPA\n    $grade = array_shift($grades);\
    \ // The remaining grades\n    for ($i = 0; $i < count($grades); $i++) {\n   \
    \     $sums[$i] = $sums[$i] + $grades[$i] * $gpa; // GPA x Grade\n        $gpa\
    \ = $gpa - $grades[$i] * ($gpa / $sums[$i]); // GPA - Grade * (GPA / GPA)\n  \
    \  }\n    return $letter_grades[array_search(max($sums), $sums)];\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7r_vw3g2.php:40\n\
    Stack trace:\n#0 /tmp/tmp7r_vw3g2.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7r_vw3g2.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  if($grades ==\
    \ 0) {\n    return 'E';\n  }\n\n  $letter_grades = array();\n  $previous_grade\
    \ = 0;\n  $total_marks = 0;\n  foreach($grades as $grade) {\n    $total_marks\
    \ += $grade;\n    if($grade > 0) {\n      $letter_grades[] = $previous_grade .\
    \ '+';\n    }\n    $previous_grade = $grade;\n  }\n\n  if($total_marks == 0) {\n\
    \    $letter_grades[] = 'E';\n  }\n  else {\n    $letter_grades[] = $previous_grade;\n\
    \  }\n  return $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vrvbfq0.php:53\n\
    Stack trace:\n#0 /tmp/tmp1vrvbfq0.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1vrvbfq0.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_sum\
    \ = 0;\n    foreach ($grades as $grade => $score) {\n        $grades_sum += $score;\n\
    \    }\n    return $grades_sum / count($grades);\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4n1nicai.php:36\n\
    Stack trace:\n#0 /tmp/tmp4n1nicai.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4n1nicai.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = array();\n    $i = 0;\n    foreach ($grades as $grade) {\n        $grades_array[$i]\
    \ = $grade;\n        $i++;\n    }\n    $i = 0;\n    $grades_array = array_reverse($grades_array);\n\
    \    foreach ($grades_array as $grade) {\n        if ($grade > 3.0) $letter =\
    \ 'B-';\n        elseif ($grade > 2.7) $letter = 'B-';\n        elseif ($grade\
    \ > 2.3) $letter = 'B-';\n        elseif ($grade > 2.0) $letter = 'B-';\n    \
    \    elseif ($grade > 1.7) $letter = 'B-';\n        elseif ($grade > 1.3) $letter\
    \ = 'B-';\n        elseif ($grade > 1.0) $letter = 'B-';\n        elseif ($grade\
    \ > 0.7) $letter = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n    \
    \    elseif ($grade > 0) $letter = 'B-';\n        elseif ($grade > 0.0) $letter\
    \ = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n        elseif ($grade\
    \ > 0.0) $letter = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n    \
    \    elseif ($grade > 0.0) $letter = 'B-';\n        elseif ($grade > 0.0) $letter\
    \ = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n        elseif ($grade\
    \ > 0.0) $letter = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n    \
    \    elseif ($grade > 0.0) $letter = 'B-';\n        elseif ($grade > 0.0) $letter\
    \ = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n        elseif ($grade\
    \ > 0.0) $letter = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n    \
    \    elseif ($grade > 0.0) $letter = 'B-';\n        elseif ($grade > 0.0) $letter\
    \ = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n        elseif ($grade\
    \ > 0.0) $letter = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n    \
    \    elseif ($grade > 0.0) $letter = 'B-';\n        elseif ($grade > 0.0) $letter\
    \ = 'B-';\n        elseif ($grade > 0.0) $letter = 'B-';\n        elseif ($grade\
    \ \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaf3whi3h.php on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $gpa_array\
    \ = array(\n            array(4.0, 4.0, 4.0, 4.0, 4.0),\n            array(3.7,\
    \ 3.3, 3.0, 2.7, 2.3),\n            array(3.3, 3.3, 3.0, 2.3, 2.3),\n        \
    \    array(3.0, 3.0, 3.0, 2.0, 2.0),\n            array(2.7, 2.3, 2.0, 1.7, 1.3),\n\
    \            array(2.3, 2.3, 2.0, 1.3, 1.0),\n            array(2.0, 2.0, 2.0,\
    \ 1.0, 0.0),\n            array(1.7, 1.3, 1.0, 0.0, 0.0),\n            array(1.3,\
    \ 1.0, 0.0, 0.0, 0.0),\n            array(1.0, 0.0, 0.0,0.0, 0.0),\n         \
    \   array(0.0, 0.0,0.0,0.0,0.0)\n    );\n    return array_map(function ($grades)\
    \ use ($gpa_array) {\n        $letter = '';\n        foreach ($grades as $grade)\
    \ {\n            $letter = $grade > 3.5 ? 'A+' : ($grade > 3.0 ? 'A-' : ($grade\
    \ > 2.7 ? 'B+' : ($grade > 2.3 ? 'B' : ($grade > 2.0 ? 'B-' : ($grade > 1.7 ?\
    \ 'C+' : ($grade > 1.3 ? 'C' : ($grade > 1.0 ? 'C-' : ($grade > 0.7 ? 'D+' : ($grade\
    \ > 0.3 ? 'D' : ($grade > 0.0 ? 'D-' : ($grade > 0.0 ? 'E' : 'F'))))))));\n  \
    \      }\n        return $letter;\n    }, $gpa_array[$grades]);\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzlulu3ra.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if ($grades\
    \ == 0) return \"D\";\n    if ($grades < 4.0) return \"E\";\n    if ($grades <\
    \ 3.7) return \"A+\";\n    if ($grades < 3.3) return \"A\";\n    if ($grades <\
    \ 3.0) return \"A+\";\n    if ($grades < 2.7) return \"B\";\n    if ($grades <\
    \ 2.3) return \"B\";\n    if ($grades < 2.0) return \"B+\";\n    if ($grades <\
    \ 1.7) return \"C+\";\n    if ($grades < 1.3) return \"C\";\n    if ($grades <\
    \ 1.0) return \"C+\";\n    if ($grades < 0.7) return \"D\";\n    if ($grades <\
    \ 0.0) return \"D\";\n    return \"F\";\n}\nfunction candidate(...$args) {\n \
    \   return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_4hesb4.php:44\n\
    Stack trace:\n#0 /tmp/tmp2_4hesb4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2_4hesb4.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if (empty($grades)\
    \ || empty($grades[0])) {\n        return 'E';\n    }\n    $grades = array_reverse($grades);\n\
    \    \n    // $grades contains 2 items, first one is GPA and the second one is\
    \ letter grade\n    \n    $gpa = $grades[0];\n    $grade = $grades[1];\n    if\
    \ ($gpa >= 3.7) {\n        // greater than 3.7\n        if ($gpa >= 3.3) {\n \
    \           // greater than 3.3\n            if ($gpa >= 3.0) {\n            \
    \    // greater than 3.0\n                if ($gpa >= 2.7) {\n               \
    \     // greater than 2.7\n                    if ($gpa >= 2.3) {\n          \
    \              // greater than 2.3\n                        if ($gpa >= 2.0) {\n\
    \                            // greater than 2.0\n                           \
    \ if ($gpa >= 1.7) {\n                                // greater than 1.7\n  \
    \                              if ($gpa >= 1.2) {\n                          \
    \          // greater than 1.2\n                                    if ($gpa >=\
    \ 1.0) {\n                                        // greater than 1.0\n      \
    \                                  if ($gpa >= 0.7) {\n                      \
    \                      // greater than 0.7\n                                 \
    \           if ($gpa >= 0.2) {\n                                             \
    \   // greater than 0.2\n                                                if ($gpa\
    \ >= 0.0) {\n                                                    // greater than\
    \ 0.0\n                                                    if ($gpa >= 0.0) {\n\
    \                                                        // greater than 0.0\n\
    \                                                        if (($gpa >= 0.0) &&\
    \ ($gpa <= 0.0)) {\n                                                         \
    \   // less than or equal to 0.0\n                                           \
    \                 return $grade;\n                                           \
    \             }\n                                                    }\n     \
    \                                           }\n                              \
    \              }\n                                        }\n                \
    \                    }\n                                }\n                  \
    \          }\n                        }\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return $grade;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0abv5ca.php:83\n\
    Stack trace:\n#0 /tmp/tmpq0abv5ca.php(91): test()\n#1 {main}\n  thrown in /tmp/tmpq0abv5ca.php\
    \ on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $gpa = array_sum($grades);\n\
    \    $letter_grades = array('A+','A','A-','B+','B','B-','C+','C','C-','D+','D','D-','E');\n\
    \    return $letter_grades[array_search(max($grades), $grades)];\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyzw62vsz.php:34\n\
    Stack trace:\n#0 /tmp/tmpyzw62vsz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyzw62vsz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = array();\n  foreach ($grades as $key => $value) {\n    if ($value < 3.0) {\n\
    \      $letter_grades[$key] = 'A+';\n    } else if ($value < 3.7) {\n      $letter_grades[$key]\
    \ = 'A';\n    } else if ($value < 4.0) {\n      $letter_grades[$key] = 'A-';\n\
    \    } else if ($value < 5.0) {\n      $letter_grades[$key] = 'B+';\n    } else\
    \ if ($value < 6.7) {\n      $letter_grades[$key] = 'B';\n    } else if ($value\
    \ < 7.0) {\n      $letter_grades[$key] = 'B-';\n    } else if ($value < 8.7) {\n\
    \      $letter_grades[$key] = 'C+';\n    } else if ($value < 9.0) {\n      $letter_grades[$key]\
    \ = 'C';\n    } else if ($value < 9.7) {\n      $letter_grades[$key] = 'C-';\n\
    \    } else if ($value < 10.0) {\n      $letter_grades[$key] = 'D+';\n    } else\
    \ if ($value < 11.7) {\n      $letter_grades[$key] = 'D';\n    } else if ($value\
    \ < 12.0) {\n      $letter_grades[$key] = 'D-';\n    } else if ($value < 13.0)\
    \ {\n      $letter_grades[$key] = 'E';\n    }\n  }\n  return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0pwrr94w.php:62\n\
    Stack trace:\n#0 /tmp/tmp0pwrr94w.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp0pwrr94w.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = array(\n        0 => 'E',\n        1 => 'A+',\n        2 => 'A',\n       \
    \ 3 => 'A-',\n        4 => 'B+',\n        5 => 'B',\n        6 => 'B-',\n    \
    \    7 => 'C+',\n        8 => 'C',\n        9 => 'C-',\n        10 => 'D+',\n\
    \        11 => 'D',\n        12 => 'D-'\n    );\n    $result = array();\n    foreach\
    \ ($grades as $index => $grade) {\n        $result[] = $grades_array[$grade];\n\
    \    }\n    return $result;\n}\n\n$grades_array = [\n    4.0, 3.7, 3.3, 3.0, 2.7,\
    \ 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0,\n];\n\n$gpa = array(\n    4.0, 3.0, 2.0,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0,\n);\n\n$letters = numerical_letter_grade($gpa);\n\
    print_r($letters);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => B+\n    [1] => A-\n    [2] => A\n    [3] => A\n  \
    \  [4] => A+\n    [5] => A+\n    [6] => A+\n    [7] => E\n    [8] => E\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpeek_mvzf.php:61\nStack\
    \ trace:\n#0 /tmp/tmpeek_mvzf.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpeek_mvzf.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_filter($grades);\n\
    \  $grades = array_map(function($grade) {\n    return $grade >= 4.0 ? \"+\" :\n\
    \        ($grade < 3.7 ? \"-\" :\n        (($grade < 3.3 ? \"A+\" :\n        (($grade\
    \ < 3.0 ? \"A\" :\n        (($grade < 2.7 ? \"B+\" :\n        (($grade < 2.3 ?\
    \ \"B\" :\n        (($grade < 2.0 ? \"C+\" :\n        (($grade < 1.7 ? \"C\" :\n\
    \        (($grade < 1.3 ? \"C-\" :\n        (($grade < 1.0 ? \"D+\" :\n      \
    \  (($grade < 0.7 ? \"D\" :\n        (($grade < 0.0 ? \"D-\" :\n        \"E\"\
    ))))))))))))))))))))));\n  }, $grades);\n  return implode(\"\", $grades);\n}\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr5vtj5oo.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here\n    \n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1rbe_a1m.php:32\n\
    Stack trace:\n#0 /tmp/tmp1rbe_a1m.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1rbe_a1m.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $return =\
    \ '';\n    for ($i = 0; $i < count($grades); $i++) {\n        $return[$i] = gpa_to_letter($grades[$i]);\n\
    \    }\n    return $return;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gpa_to_letter()\
    \ in /tmp/tmpr7yy6gjg.php:26\nStack trace:\n#0 /tmp/tmpr7yy6gjg.php(31): numerical_letter_grade(Array)\n\
    #1 /tmp/tmpr7yy6gjg.php(35): candidate(Array)\n#2 /tmp/tmpr7yy6gjg.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr7yy6gjg.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Enter your\
    \ code here. \n    return null;\n}\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpea9z0w26.php:32\n\
    Stack trace:\n#0 /tmp/tmpea9z0w26.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpea9z0w26.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    foreach($grades\
    \ as $key => $grade) {\n        // Write your code here\n    }\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ysn92_o.php:35\n\
    Stack trace:\n#0 /tmp/tmp4ysn92_o.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4ysn92_o.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades = preg_replace('/[^\\\
    d\\.,]/', '', $grades);\n\t$grades = preg_replace('/[\\-,]/', '', $grades);\n\t\
    $grades = explode(\",\", $grades);\n\t$letters = array();\n\t\n\t// The first\
    \ set of grades determines the letter grades\n\t// All other grades are added\
    \ together, and divided by the GPA to get the percentage grade\n\tforeach($grades[0]\
    \ as $grade) {\n\t\tif ($grade >= 4.0) {\n\t\t\t$letters[] = 'A+';\n\t\t} else\
    \ {\n\t\t\t$letters[] = 'B+';\n\t\t}\n\t}\n\n\tforeach ($grades[1] as $grade)\
    \ {\n\t\tif ($grade >= 3.7) {\n\t\t\t$letters[] = 'A';\n\t\t} else {\n\t\t\t$letters[]\
    \ = 'B';\n\t\t}\n\t}\n\n\tforeach ($grades[2] as $grade) {\n\t\tif ($grade >=\
    \ 3.3) {\n\t\t\t$letters[] = 'A-';\n\t\t} else {\n\t\t\t$letters[] = 'B-';\n\t\
    \t}\n\t}\n\n\tforeach ($grades[3] as $grade) {\n\t\tif ($grade >= 3.0) {\n\t\t\
    \t$letters[] = 'B+';\n\t\t} else {\n\t\t\t$letters[] = 'B';\n\t\t}\n\t}\n\n\t\
    foreach ($grades[4] as $grade) {\n\t\tif ($grade >= 2.7) {\n\t\t\t$letters[] =\
    \ 'B';\n\t\t} else {\n\t\t\t$letters[] = 'B-';\n\t\t}\n\t}\n\n\tforeach ($grades[5]\
    \ as $grade) {\n\t\tif ($grade >= 2.3) {\n\t\t\t$letters[] = 'B-';\n\t\t} else\
    \ {\n\t\t\t$letters[] = 'C+';\n\t\t}\n\t}\n\n\tforeach ($grades[6] as $grade)\
    \ {\n\t\tif ($grade >= 2.0) {\n\t\t\t$letters[] = 'C';\n\t\t} else {\n\t\t\t$letters[]\
    \ = 'C-';\n\t\t}\n\t}\n\n\tforeach ($grades[7] as $grade) {\n\t\tif ($grade >=\
    \ 1.7) {\n\t\t\t$letters[] = 'C';\n\t\t} else {\n\t\t\t$letters[] = 'C-';\n\t\t\
    }\n\t}\n\n\tforeach ($grades[8] as $grade) {\n\t\tif ($grade >= 1.3) {\n\t\t\t\
    $letters[] = 'C-';\n\t\t} else {\n\t\t\t$letters[] = 'D+';\n\t\t}\n\t}\n\n\tforeach\
    \ ($grades[9] as $grade) {\n\t\tif ($grade >= 0.7) {\n\t\t\t$letters[] = 'D';\n\
    \t\t} else {\n\t\t\t$letters[] = 'D-';\n\t\t}\n\t}\n\n\tforeach ($grade\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpktf16lch.php on line 112\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if ($grades\
    \ == 0) return 'E';\n    $grade_table = [\n        4.0 => 'A+',\n        3.7 =>\
    \ 'A',\n        3.3 => 'A-',\n        3.0 => 'B+',\n        2.7 => 'B',\n    \
    \    2.3 => 'B-',\n        2.0 => 'C+',\n        1.7 => 'C',\n        1.3 => 'C-',\n\
    \        1.0 => 'D+',\n        0.7 => 'D',\n        0.0 => 'D-',\n        0.0\
    \ => 'E'\n    ];\n    $grades = array_map(function ($x) {\n        return round($x);\n\
    \    }, $grades);\n    foreach ($grades as $key => $grade) {\n        if ($grade\
    \ != 0) {\n            $grades[$key] .= ' - ';\n        }\n    }\n    return implode('',\
    \ $grades);\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a |>\nYou can use the\
    \ following code to get the result you want:\n<code>\n<?php\n$a = [4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcr_whzw8.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuxvx2c14.php:32\n\
    Stack trace:\n#0 /tmp/tmpuxvx2c14.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpuxvx2c14.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map('round', $grades);\n    $GPA = array_sum($grades);\n    $letters =\
    \ array(\n        'A+' => 4.0\n        ,'A' => 3.7\n        ,'A-' => 3.3\n   \
    \     ,'B+' => 3.0\n        ,'B' => 2.7\n        ,'B-' => 2.3\n        ,'C+' =>\
    \ 2.0\n        ,'C' => 1.7\n        ,'C-' => 1.3\n        ,'D+' => 1.0\n     \
    \   ,'D' => 0.7\n        ,'D-' => 0.0\n        ,'E' => 0.0\n    );\n    foreach\
    \ ($letters as $letter => $gpa) {\n        if ($gpa > 0 && $gpa <= $GPA) {\n \
    \           return $letter;\n        }\n    }\n    return 'F';\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwde1_nec.php:54\n\
    Stack trace:\n#0 /tmp/tmpwde1_nec.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpwde1_nec.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = array();\n  foreach ($grades as $grade) {\n    $letter_grades[] = chr(ord('A')\
    \ + $grade / 100);\n  }\n  return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu23kp_jq.php:35\n\
    Stack trace:\n#0 /tmp/tmpu23kp_jq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpu23kp_jq.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($x){return $x - 4;}, $grades);\n    return array_map(function($x){return\
    \ $x > 3.3 ? 'A-' : $x > 3.0 ? 'B+' : $x > 2.7 ? 'B' : $x > 2.3 ? 'B-' : $x >\
    \ 2.0 ? 'C+' : $x > 1.7 ? 'C' : $x > 1.3 ? 'C-' : $x > 1.0 ? 'D+' : $x > 0.7 ?\
    \ 'D' : $x > 0.0 ? 'D-' : '';}, $grades);\n}\n\n$students_grades = array('Jonathan\
    \ Sampson', 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0);\n$students_letters\
    \ = numerical_letter_grade($students_grades);\n$students_letters = array_map(function($x){return\
    \ $x.'!';}, $students_letters);\n$students_letters[] = 'E';\necho '<pre>'.implode('|',$students_letters).'</pre>';\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpv_ggabln.php on line\
    \ 24\n<pre>!|!|!|!|!|!|!|!|!|!|!|!|!|E</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv_ggabln.php:38\nStack trace:\n#0 /tmp/tmpv_ggabln.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv_ggabln.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ goes here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8104gzh.php:32\n\
    Stack trace:\n#0 /tmp/tmpp8104gzh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpp8104gzh.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if (!is_array($grades))\
    \ {\n        return 'E';\n    }\n    $lowest_grade = $grades[0];\n    $letter_grades\
    \ = [];\n    for ($i = 1; $i < count($grades); $i++) {\n        $grade = $grades[$i];\n\
    \        if ($grade >= $lowest_grade) {\n            if ($i > 0 && $grade - $lowest_grade\
    \ > 0.5) {\n                $letter_grades[] = 'D+';\n            } else {\n \
    \               $letter_grades[] = 'D-';\n            }\n            if ($grade\
    \ < $lowest_grade) {\n                $letter_grades[] = 'C';\n            } else\
    \ {\n                $letter_grades[] = 'C+';\n            }\n            if ($grade\
    \ < $lowest_grade - 0.1) {\n                $letter_grades[] = 'B';\n        \
    \    } else {\n                $letter_grades[] = 'B+';\n            }\n     \
    \       if ($grade < $lowest_grade - 0.05) {\n                $letter_grades[]\
    \ = 'A';\n            } else {\n                $letter_grades[] = 'A+';\n   \
    \         }\n        } else {\n            if ($grade > $lowest_grade) {\n   \
    \             $letter_grades[] = 'A+';\n            } else {\n               \
    \ $letter_grades[] = 'A-';\n            }\n            if ($grade > $lowest_grade\
    \ - 0.05) {\n                $letter_grades[] = 'B';\n            } else {\n \
    \               $letter_grades[] = 'B+';\n            }\n            if ($grade\
    \ > $lowest_grade - 0.1) {\n                $letter_grades[] = 'C';\n        \
    \    } else {\n                $letter_grades[] = 'C+';\n            }\n     \
    \       if ($grade > $lowest_grade - 0.2) {\n                $letter_grades[]\
    \ = 'D';\n            } else {\n                $letter_grades[] = 'D+';\n   \
    \         }\n            if ($grade > $lowest_grade - 0.3) {\n               \
    \ $letter_grades[] = 'E';\n            } else {\n                $letter_grades[]\
    \ = 'E';\n            }\n        }\n        $lowest_grade = $grade;\n    }\n \
    \   return $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5h79jpdm.php:89\n\
    Stack trace:\n#0 /tmp/tmp5h79jpdm.php(97): test()\n#1 {main}\n  thrown in /tmp/tmp5h79jpdm.php\
    \ on line 89\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ goes here\n}\n</code>\n<|/ q dscore=1 tags=php,php-7 |>\n<| c |>\n\"She has\
    \ lost the code she used for grading.\" --- what she has? A git repository? A\
    \ remote backup?\n<|/ c |>\n<| c |>\nI mean I didn't write my own code for grading\
    \ and I used the ones from https://stackoverflow.com/questions/29648792/how-to-write-an-algorithm-that-outputs-an-array-of-letters-from-a-range-of-grades\n\
    <|/ c |>\n<| c |>\nIt looks like a good question, but it would be great if you\
    \ could provide a [Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve)\n\
    <|/ c |>\n<| c |>\nYes it's a good question, I think I'm on the right track with\
    \ the \"if\" statement, but I'm still getting errors.\n<|/ c |>\n<| c |>\nI edited\
    \ my question with my code\n<|/ c |>\n<| a dscore=0 |>\nThis should work (I tested\
    \ it on codepad):\n<code>\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpttvmjyt2.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array(4,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0);\n    $grade_sum = array_sum($grades);\n\
    \    $percentage = 0;\n    foreach ($grades as $grade) {\n        $percentage\
    \ = $percentage + $grade/$grade_sum;\n    }\n    $letterGrade = \"\";\n    $letterGrade\
    \ .= \"A+\" if ($percentage >= 4.0);\n    $letterGrade .= \"A\" if ($percentage\
    \ >= 3.7);\n    $letterGrade .= \"A-\" if ($percentage >= 3.3);\n    $letterGrade\
    \ .= \"B+\" if ($percentage >= 3.0);\n    $letterGrade .= \"B\" if ($percentage\
    \ >= 2.7);\n    $letterGrade .= \"B-\" if ($percentage >= 2.3);\n    $letterGrade\
    \ .= \"C+\" if ($percentage >= 2.0);\n    $letterGrade .= \"C\" if ($percentage\
    \ >= 1.7);\n    $letterGrade .= \"C-\" if ($percentage >= 1.3);\n    $letterGrade\
    \ .= \"D+\" if ($percentage >= 1.0);\n    $letterGrade .= \"D\" if ($percentage\
    \ >= 0.7);\n    $letterGrade .= \"D-\" if ($percentage >= 0.0);\n    return $letterGrade;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvxmrb2ex.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_string\
    \ = '';\n    foreach ($grades as $grade) {\n        // The letter grade is the\
    \ grade\n        // divided by 5\n        $letter_grade = $grade / 5;\n      \
    \  // If the grade is greater or equal to\n        // 3, the letter grade is A+\n\
    \        // if the grade is greater or equal to\n        // 2.7 the letter grade\
    \ is B+\n        // and so on...\n        if ($letter_grade >= 3.7) {\n      \
    \      $letter_grade = \"B+\";\n        } elseif ($letter_grade >= 3.3) {\n  \
    \          $letter_grade = \"B-\";\n        } elseif ($letter_grade >= 3) {\n\
    \            $letter_grade = \"C+\";\n        } elseif ($letter_grade >= 2.7)\
    \ {\n            $letter_grade = \"C\";\n        } elseif ($letter_grade >= 2.3)\
    \ {\n            $letter_grade = \"C-\";\n        } elseif ($letter_grade >= 2)\
    \ {\n            $letter_grade = \"D+\";\n        } elseif ($letter_grade >= 1.7)\
    \ {\n            $letter_grade = \"D\";\n        } elseif ($letter_grade >= 1)\
    \ {\n            $letter_grade = \"D-\";\n        } else {\n            $letter_grade\
    \ = \"E\";\n        }\n        // Add the letter grade to the string\n       \
    \ $grades_string .= $letter_grade;\n    }\n    return $grades_string;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvs80vd0h.php:64\n\
    Stack trace:\n#0 /tmp/tmpvs80vd0h.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpvs80vd0h.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grade_array\
    \ = array();\n  foreach($grades as $g) {\n    $grade_array[] = $g < 4.0 ? \"A+\"\
    \ : $g >= 3.7 ? \"A\" : $g >= 3.3 ? \"A-\" : \n        $g >= 3.0 ? \"B+\" : $g\
    \ >= 2.7 ? \"B\" : $g >= 2.3 ? \"B-\" : \n        $g >= 2.0 ? \"C+\" : $g >= 1.7\
    \ ? \"C\" : $g >= 1.3 ? \"C-\" : \n        $g >= 1.0 ? \"D+\" : $g >= 0.7 ? \"\
    D\" : $g >= 0.0 ? \"D-\" : \"E\";\n  }\n  return $grade_array;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cpoj18d.php:38\n\
    Stack trace:\n#0 /tmp/tmp8cpoj18d.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8cpoj18d.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    $current_grade = $grades[0];\n    array_walk($grades, function($grade)\
    \ use (&$current_grade, &$letter_grades) {\n        // If the grade is the same,\
    \ increment the grade\n        if($grade == $current_grade) {\n            $current_grade++;\n\
    \        } else {\n            // If the grade is different than the previous\
    \ grade, start counting letter grades\n            if($current_grade) {\n    \
    \            $letter_grades[] = $current_grade.'+';\n                $current_grade++;\n\
    \            }\n            $letter_grades[] = $current_grade;\n        }\n  \
    \  });\n    // If the last grade was not the same as the current grade and there\
    \ was a current grade\n    if(!$current_grade && $letter_grades[count($letter_grades)\
    \ - 1]) {\n        $letter_grades[] = $letter_grades[count($letter_grades) - 1];\n\
    \    }\n    return implode('', $letter_grades);\n}\n</code>\nThe above function\
    \ will output the following array:\n<code>\nArray\n(\n    [0] => A+\n    [1] =>\
    \ A\n    [2] => A- \n    [3] => B+\n    [4] => B \n    [5] => B-\n    [6] => C+\n\
    \    [7] => C\n    [8] => C-\n    [9] => D+\n    [10] => D\n    [11] => D-\n \
    \   [12] => E\n)\n</code>\n<|/ a tags=php,arrays,if-statement |>\n<| c |>\nThank\
    \ you so much! I'm still not familiar with array_walk, so it took me a while to\
    \ work through this.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nforeach($grades as $grade\
    \ => $letter_grade){\n    if($grade>0 && $grade<10){\n        $letter_grades[]\
    \ = $letter_grade;\n    }else if($grade>=10){\n        $letter_grades[] = $letter_grade\
    \ .\"-\"\n    }\n}\n</code>\nThis should work\n<|/ a tags=php,arrays,if-statement\
    \ |>\n<| c |>\nThis works too! Thank you! I'm not sure which solution to pick,\
    \ but I do appreciate this one! I'm also not sure why my code is so long - I guess\
    \ because my teacher put it in a foreach loop like I did.\n<|/ c |>\n<| a tags=php,arrays,if-statement\
    \ |>\n<code>\nforeach($grades as $grade => $letter_grade){\n    if($grade>0 &&\
    \ $grade<10){\n        $letter_grades[] = \nfunction candidate(...$args) {\n \
    \   return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq3b02td2.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map('round',\
    \ array($grades));\n  $grades = array_map('intval', array($grades));\n  $grades\
    \ = array_map('strval', array($grades));\n  $grades = array_filter($grades);\n\
    \  $grades = array_combine($grades, $grades);\n  $grades = array_filter($grades);\n\
    \  return $grades;\n}\n</code>\n<|/ q |>\n<| c |>\n\"I have already tried to use\
    \ arrays, but I can not get the right result.\" What exactly have you tried that\
    \ didn't work?\n<|/ c |>\n<| c |>\nWhat are your arrays?\n<|/ c |>\n<| c |>\n\
    What is your question?\n<|/ c |>\n<| c |>\nWe need to see what you tried.  I suspect\
    \ you didn't try to put them in to one array and just tried to `echo` the array\
    \ in a loop, where you just keep getting `Array` output each time.\n<|/ c |>\n\
    <| c |>\nI have tried to use the arrays, but I did not get the right results.\
    \ I used echo inside the loop, and also tried to use a for loop with the counter\
    \ inside the loop.\n<|/ c |>\n<| a |>\nYou can use a foreach loop on the array\n\
    <code>\n$grades = [\n    [4.0, 3, 1.7, 2, 3.5],\n    [4.2, 4.1, 4.3, 4.5, 4.6]\n\
    ];\n$grades = [];\nforeach($grades[0] as $v) {\n    $grades[] = $v;\n}\nvar_dump($grades);\n\
    </code>\nOutput\n<code>\narray(5) {\n  [0]=>\n  float(4)\n  [1]=>\n  float(3)\n\
    \  [2]=>\n  float(1.7)\n  [3]=>\n  float(2)\n  [4]=>\n  float(3.5)\n}\n</code>\n\
    <|/ a dscore=0 tags=arrays,php |>\n<| a tags=arrays,php |>\nYou have an array\
    \ of arrays:\n<code>\n[4.0, 3, 1.7, 2, 3.5]\n[4.2, 4.1, 4.3, 4.5, 4.6]\n</code>\n\
    You need to flatten that array into an array of values\n<code>\n[4, 3, 1, 7, 2,\
    \ 3.5, 4.2, 4.1, 4.3, 4.5, 4.6]\n</code>\nYou can do this with a simple loop:\n\
    <code>\n$grades = [4.0, 3, 1.7, 2, 3.5];\n$grades = array_map('round', $grades);\n\
    $grades = array_map('intval', $grades);\n$grades = array_map('strval', $grades);\n\
    $grades = array_filter($grades);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpil532taa.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if ($grades\
    \ < 3.0) return 'E';\n    else if ($grades < 3.7) return 'D-';\n    else if ($grades\
    \ < 4.0) return 'C-';\n    else if ($grades < 4.3) return 'B-';\n    else if ($grades\
    \ < 4.6) return 'B-';\n    else if ($grades < 4.9) return 'B-';\n    else if ($grades\
    \ < 5.2) return 'B-';\n    else if ($grades < 5.5) return 'B-';\n    else if ($grades\
    \ < 5.8) return 'B-';\n    else if ($grades < 6.1) return 'B-';\n    else if ($grades\
    \ < 6.4) return 'B-';\n    else if ($grades < 6.7) return 'B-';\n    else if ($grades\
    \ < 7.0) return 'B+';\n    else if ($grades < 7.3) return 'B+';\n    else if ($grades\
    \ < 7.6) return 'B+';\n    else if ($grades < 7.9) return 'B+';\n    else if ($grades\
    \ < 8.2) return 'B+';\n    else if ($grades < 8.5) return 'B+';\n    else if ($grades\
    \ < 8.8) return 'B+';\n    else if ($grades < 9.1) return 'B+';\n    else if ($grades\
    \ < 9.4) return 'B+';\n    else if ($grades < 9.7) return 'B+';\n    else if ($grades\
    \ < 10.0) return 'B+';\n    else if ($grades < 10.3) return 'B+';\n    else if\
    \ ($grades < 10.6) return 'B+';\n    else if ($grades < 10.9) return 'B+';\n \
    \   else if ($grades < 11.2) return 'B+';\n    else if ($grades < 11.5) return\
    \ 'B+';\n    else if ($grades < 11.8) return 'B+';\n    else if ($grades < 12.1)\
    \ return 'B+';\n    else if ($grades < 12.4) return 'B+';\n    else if ($grades\
    \ < 12.7) return 'B+';\n    else if ($grades < 13.0) return 'B+';\n    else if\
    \ ($grades < 13.3) return 'B+';\n    else if ($grades < 13.6) return 'B+';\n \
    \   else if ($grades < 13.9) return 'B+';\n    else if ($grades < 14.2) return\
    \ 'B+';\n    else if ($grades < 14.6) return 'B+';\n    else if ($grades < 14.9)\
    \ return 'B+';\n    else if ($grades < 15.2) return 'B+';\n    else if ($grades\
    \ < 15.6) return 'B+';\n    else if ($grades < 15.9) return 'B+';\n    else if\
    \ ($grades < 16.2) return 'B+';\n    else if ($grades < 16.6) return '\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7uhejq4c.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Use this\
    \ table to output the letter grade using the list you have\n    $letter_grade\
    \ = array();\n    for ($i = 0; $i < count($grades); $i++) {\n        // If the\
    \ grade is >= .5, it is B+ (or better grade)\n        if ($grades[$i] >= .5)\n\
    \            $letter_grade[] = \"B+\";\n        // If it is >= .4, it is B- \n\
    \        elseif ($grades[$i] >= .4)\n            $letter_grade[] = \"B\";\n  \
    \      // If it is >= .3, it is B-\n        elseif ($grades[$i] >= .3)\n     \
    \       $letter_grade[] = \"B-\";\n        // If it is >= .2, it is C+\n     \
    \   elseif ($grades[$i] >= .2)\n            $letter_grade[] = \"C+\";\n      \
    \  // If it is >= .1, it is C\n        elseif ($grades[$i] >= .1)\n          \
    \  $letter_grade[] = \"C\";\n        // If it is < .1, it is D+\n        elseif\
    \ ($grades[$i] >= .0)\n            $letter_grade[] = \"D+\";\n        // If it\
    \ is < .0, it is D-\n        elseif ($grades[$i] >= .0)\n            $letter_grade[]\
    \ = \"D-\";\n        // If it is < .0, it is E\n        else\n            $letter_grade[]\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqz0j7lgw.php:60\n\
    Stack trace:\n#0 /tmp/tmpqz0j7lgw.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpqz0j7lgw.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grade = array_sum($grades);\n\
    \    $grade = round($grade);\n    if ($grade >= 4.0) {\n        $letter = 'A+';\n\
    \    } elseif ($grade > 3.7 && $grade < 4.0) {\n        $letter = 'A';\n    }\
    \ elseif ($grade > 3.3 && $grade < 3.7) {\n        $letter = 'A-';\n    } elseif\
    \ ($grade > 3.0 && $grade < 3.3) {\n        $letter = 'B+';\n    } elseif ($grade\
    \ > 2.7 && $grade < 3.0) {\n        $letter = 'B';\n    } elseif ($grade > 2.3\
    \ && $grade < 2.7) {\n        $letter = 'B-';\n    } elseif ($grade > 2.0 && $grade\
    \ < 2.3) {\n        $letter = 'C+';\n    } elseif ($grade > 1.7 && $grade < 2.0)\
    \ {\n        $letter = 'C';\n    } elseif ($grade > 1.3 && $grade < 1.7) {\n \
    \       $letter = 'C-';\n    } elseif ($grade > 1.0 && $grade < 1.3) {\n     \
    \   $letter = 'D+';\n    } elseif ($grade > 0.7 && $grade < 1.0) {\n        $letter\
    \ = 'D';\n    } elseif ($grade > 0.0 || $grade < 0.7) {\n        $letter = 'D-';\n\
    \    } else {\n        $letter = 'E';\n    }\n    return $letter;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphppxtn06.php:61\n\
    Stack trace:\n#0 /tmp/tmphppxtn06.php(69): test()\n#1 {main}\n  thrown in /tmp/tmphppxtn06.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $a = array_shift($grades);\n\
    \  $b = array_shift($grades);\n  $c = array_shift($grades);\n  $d = array_shift($grades);\n\
    \  return array(\n    'A+' => ($a >= 4.0 && $a < 3.7) ? true : false,\n    'A'\
    \ => ($a >= 3.3 && $a < 3.0) ? true : false,\n    'A+' => ($a >= 2.7 && $a < 2.3)\
    \ ? true : false,\n    'A' => ($a >= 2.0 && $a < 1.7) ? true : false,\n    'A+'\
    \ => ($a >= 1.7 && $a < 1.3) ? true : false,\n    'A' => ($a >= 1.3 && $a < 1.0)\
    \ ? true : false,\n    'A+' => ($a >= 0.7 && $a < 0.2) ? true : false,\n    'A'\
    \ => ($a >= 0.2 && $a < 0) ? true : false,\n    'B+' => ($b >= 4.0 && $b < 3.7)\
    \ ? true : false,\n    'B' => ($b >= 3.3 && $b < 3.0) ? true : false,\n    'B+'\
    \ => ($b >= 2.7 && $b < 2.3) ? true : false,\n    'B' => ($b >= 2.0 && $b < 1.7)\
    \ ? true : false,\n    'B+' => ($b >= 1.7 && $b < 1.3) ? true : false,\n    'B'\
    \ => ($b >= 1.3 && $b < 1.0) ? true : false,\n    'B+' => ($b >= 0.7 && $b < 0.2)\
    \ ? true : false,\n    'B' => ($b >= 0.2 && $b < 0) ? true : false,\n    'B+'\
    \ => ($b >= 0.2 && $b < 0) ? true : false,\n    'C+' => ($c >= 4.0 && $c < 3.7)\
    \ ? true : false,\n    'C' => ($c >= 3.3 && $c < 3.0) ? true : false,\n    'C+'\
    \ => ($c >= 2.7 && $c < 2.3) ? true : false,\n    'C' => ($c >= 2.0 && $c < 1.7)\
    \ ? true : false,\n    'C+' => ($c >= 1.7 && $c < 1.3) ? true : false,\n    'C'\
    \ => ($c >= 1.3 && $c < 1.0) ? true : false,\n    'C+' => ($c >= 0.7 && $c < 0.2)\
    \ ? true : false,\n    'C' => ($c >= 0.2 && $c < 0) ? true : false,\n    'C+'\
    \ => ($c >= 0.2 && $c < 0) ? true : false,\n    'D+' => ($d >= 4.0 && $d < 3.7)\
    \ ? true : false,\n    'D' => ($d >= 3.3 && $d < 3.0) ? true : false,\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3s_0d8rd.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_filter(\n        array_map('trim', // remove extra spaces around numbers\n\
    \            array_map( 'intval', // convert to integers\n                array_map('trim',\n\
    \                    $grades // remove extra spaces around strings\n         \
    \       )\n            )\n        )\n    );\n    $output = [];\n    foreach($grades\
    \ as $grade) {\n        $output[] = chr($grade < 3.0 ? 'B+' : \n            ($grade\
    \ > 3.7 ? 'B' : \n            ($grade > 3.3 ? 'B-' : \n            ($grade > 3.0\
    \ ? 'C+' : \n            ($grade > 2.7 ? 'C' : \n            ($grade > 2.3 ? 'C-'\
    \ : \n            ($grade > 2.0 ? 'D+' : \n            ($grade > 1.7 ? 'D' : \n\
    \            ($grade > 1.3 ? 'D-' : \n            ($grade > 1.0 ? 'E' : \n   \
    \         ($grade > 0.7 ? 'D' : \n            ($grade > 0.3 ? 'D-' : 'E'))\n \
    \           ))))\n            ))))\n            );\n    }\n    return implode('',$output);\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdwbvsvx6.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n   $grades = array_unique($grades);\n\
    \   sort($grades);\n   $grades = array_slice($grades, 0, 7);\n   $grades = array_map('floatval',\
    \ $grades);\n   $gpa_average = array_sum($grades) / count($grades);\n   $letter_grades\
    \ = array();\n   foreach($grades as $grade) {\n      $letter = chr(ord('A') +\
    \ ($grade / $gpa_average));\n      $letter_grades[] = $letter;\n   }\n   return\
    \ $letter_grades;\n}\n$grades = grade_equation([4.0, 3, 1.7, 2, 3.5]); \nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function grade_equation()\
    \ in /tmp/tmpdekimsw9.php:36\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpdekimsw9.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_reverse($grades);\n\
    \  $letter_grades = array('a', 'b', 'c', 'd', 'e');\n  array_walk($grades, function\
    \ (&$val, $key) {\n    if ($val > 0 && $val < 4.0) {\n      $val = $letter_grades[array_search($val,\
    \ $letter_grades)];\n    } else {\n      $val = $key;\n    }\n  });\n  return\
    \ array_reverse($letter_grades);\n}\n\n/**\n * Given a list of GPAs and a list\
    \ of letter grades, this function will output a\n * list of letter grades using\
    \ the formula in the example above.\n *\n * Example:\n * array_letters_grades(array(4.0,\
    \ 3.7, 3.3, 2.7, 2.3, 2.0)) ==> ['A+', 'B', 'C-', 'C', 'A-']\n * array_letters_grades(array(4.0,\
    \ 3.7, 3.3, 2.7, 2.3, 2.0)) ==> ['A+', 'B', 'C-', 'C', 'A-']\n * array_letters_grades(array(4.0,\
    \ 3.7, 3.3, 2.7, 2.3, 2.0)) ==> ['A+', 'B', 'C-', 'C', 'A-']\n * array_letters_grades(array(4.0,\
    \ 3.7, 3.3, 2.7, 2.3, 2.0)) ==> ['A+', 'B', 'C-', 'C', 'A-']\n * array_letters_grades(array(4.0,\
    \ 3.7, 3.3, 2.7, 2.3, 2.0)) ==> ['A+', 'B', 'C-', 'C', 'A-']\n * array_letters_grades(array(4.0,\
    \ 3.7, 3.3, 2.7, 2.3, 2.0)) ==> ['A+', 'B', 'C-', 'C', 'A-']\n *\n * @param $grades\n\
    \ *  The list of GPAs to be converted to letter grades.\n *\n * @param $letter_grades\n\
    \ *  The list of letter grades to be used in calculating the letter grade.\n *\n\
    \ * @return The list containing letter grades using the formula in the example.\n\
    \ */\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp_cib_102.php on line 28\n\nWarning: array_search() expects parameter\
    \ 2 to be array, null given in /tmp/tmp_cib_102.php on line 28\n\nWarning: array_search()\
    \ expects parameter 2 to be array, null given in /tmp/tmp_cib_102.php on line\
    \ 28\n\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp_cib_102.php on line 28\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_cib_102.php:61\nStack trace:\n#0 /tmp/tmp_cib_102.php(69): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_cib_102.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades_str\
    \ = \"\";\n\tfor ($i = 0; $i < sizeof($grades); $i++) {\n\t\tif ($i == 0) {\n\t\
    \t\t$grades_str .= $grades[$i];\n\t\t\tcontinue;\n\t\t}\n\t\tif ($grades[$i] >=\
    \ 7) {\n\t\t\t$grades_str .= \"+\";\n\t\t}\n\t\t$grades_str .= $grades[$i];\n\t\
    \tif ($grades[$i] <= 4) {\n\t\t\t$grades_str .= \"$\";\n\t\t}\n\t\telse {\n\t\t\
    \t$grades_str .= \"-\";\n\t\t}\n\t}\n\treturn $grades_str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgze5e8l8.php:49\n\
    Stack trace:\n#0 /tmp/tmpgze5e8l8.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpgze5e8l8.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ \"\";\n    foreach ($grades as $grade) {\n        if ($grade > 3.6) {\n    \
    \        $grade -= 3.6;\n            $result .= \"A-\";\n        } elseif ($grade\
    \ > 3.0) {\n            $grade -= 3.0;\n            $result .= \"B+\";\n     \
    \   } elseif ($grade > 2.7) {\n            $grade -= 2.7;\n            $result\
    \ .= \"B\";\n        } elseif ($grade > 2.3) {\n            $grade -= 2.3;\n \
    \           $result .= \"B-\";\n        } elseif ($grade > 2.0) {\n          \
    \  $grade -= 2.0;\n            $result .= \"C+\";\n        } elseif ($grade >\
    \ 1.7) {\n            $grade -= 1.7;\n            $result .= \"C\";\n        }\
    \ elseif ($grade > 1.3) {\n            $grade -= 1.3;\n            $result .=\
    \ \"C-\";\n        } elseif ($grade > 1.0) {\n            $grade -= 1.0;\n   \
    \         $result .= \"D+\";\n        } elseif ($grade > 0.7) {\n            $grade\
    \ -= 0.7;\n            $result .= \"D\";\n        } elseif ($grade > 0.0) {\n\
    \            $grade -= 0.0;\n            $result .= \"D-\";\n        } else {\n\
    \            $grade -= 0.0;\n            $result .= \"E\";\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz4m1lvw.php:69\n\
    Stack trace:\n#0 /tmp/tmprz4m1lvw.php(77): test()\n#1 {main}\n  thrown in /tmp/tmprz4m1lvw.php\
    \ on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map('round', explode(',', $grades));\n    $letters = array('A+', 'B',\
    \ 'C-', 'C', 'A-');\n    $grades = array_map(function($v) use ($letters) {\n \
    \       return $letters[intval($v / 3)];\n    }, $grades);\n    return implode('',\
    \ $grades);\n}\n\n/**\n * Print a table of letter grades given a list of grades\
    \ and a list of student names and GPAs.\n * \n * @param array $students    The\
    \ list of students with the grade data.\n * @param array $grades      The list\
    \ of GPAs for the students.\n */\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpugxlus3u.php\
    \ on line 24\n\nWarning: array_map(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmpugxlus3u.php on line 24\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmpugxlus3u.php on line 28\n\nWarning:\
    \ implode(): Invalid arguments passed in /tmp/tmpugxlus3u.php on line 29\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpugxlus3u.php:43\nStack trace:\n\
    #0 /tmp/tmpugxlus3u.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpugxlus3u.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = is_array($grades)\
    \ ? $grades : array($grades);\n  $grades = array_filter($grades, 'is_numeric');\n\
    \  return array_map(function ($grade) {\n    $letter_grade = strtoupper(grade($grade));\n\
    \    $letter_grade = str_replace(array('-', '+'), '', $letter_grade);\n    return\
    \ $letter_grade;\n  }, $grades);\n}\n$grades = grade_equation([4.0, 3, 1.7, 2,\
    \ 3.5]); \n$grade_table = numerical_letter_grade($grades);\necho '<h1>Your grades:</h1>';\n\
    foreach($grade_table  as $grade => $letter_grade) {\n   echo \"$grade: $letter_grade<br>\"\
    ;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function grade_equation()\
    \ in /tmp/tmpcravqe7e.php:32\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpcravqe7e.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  // Complete\
    \ the function\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8oaeyy6.php:31\n\
    Stack trace:\n#0 /tmp/tmpo8oaeyy6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpo8oaeyy6.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ goes here\n    sort($grades);\n    $grades_str = \"\";\n    $grades_str = implode(\"\
    \",$grades);\n    $grades_str = str_replace(\",\",\"\",$grades_str);\n    $grades_arr\
    \ = explode(\",\",$grades_str);\n    $final_grades = array();\n    $final_grades\
    \ = array_reverse($grades_arr);\n    $grades_str = implode(\",\",$final_grades);\n\
    \    $final_grades_str = array();\n    $final_grades_str = explode(\",\",$grades_str);\n\
    \    $final_grades_str = array_reverse($final_grades_str);\n    $final_grades_str\
    \ = array_values($final_grades_str);\n    for($i=0;$i<count($final_grades_str);$i++)\
    \ {\n        if($final_grades_str[$i] > 3.0) {\n            $final_grades_str[$i]\
    \ = \"D+\";\n        }\n        else if($final_grades_str[$i] >= 3.0 && $final_grades_str[$i]\
    \ <= 3.7) {\n            $final_grades_str[$i] = \"C\";\n        }\n        else\
    \ if($final_grades_str[$i] >= 3.7 && $final_grades_str[$i] <= 3.3) {\n       \
    \     $final_grades_str[$i] = \"C+\";\n        }\n        else if($final_grades_str[$i]\
    \ >= 3.3 && $final_grades_str[$i] <= 3.7) {\n            $final_grades_str[$i]\
    \ = \"B-\";\n        }\n        else if($final_grades_str[$i] >= 3.7 && $final_grades_str[$i]\
    \ <= 3.3) {\n            $final_grades_str[$i] = \"B\";\n        }\n        else\
    \ if($final_grades_str[$i] >= 3.3 && $final_grades_str[$i] <= 3.0) {\n       \
    \     $final_grades_str[$i] = \"B-\";\n        }\n        else if($final_grades_str[$i]\
    \ >= 3.0 && $final_grades_str[$i] <= 2.7) {\n            $final_grades_str[$i]\
    \ = \"B-\";\n        }\n        else if($final_grades_str[$i] >= 2.7 && $final_grades_str[$i]\
    \ <= 2.3) {\n            $final_grades_str[$i] = \"B\";\n        }\n        else\
    \ if($final_grades_str[$i] >= 2.3 && $final_grades_str[$i] <= 2.0) {\n       \
    \     $final_grades_str[$i] = \"B+\";\n        }\n        else if($\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphl5atqj2.php on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_reduce($grades,\
    \ function($carry, $grade) {\n        $current_grade = floor($grade * 10);\n \
    \       $letter_grade = $current_grade >= 2.5 ? 'B+' : \n            $current_grade\
    \ >= 2.1 ? 'B-' : \n            $current_grade >= 1.7 ? 'C+' : \n            $current_grade\
    \ >= 1.3 ? 'C-' : \n            $current_grade >= 1.0 ? 'D+' : \n            'D';\n\
    \n        $current_grade = floor($grade * 10);\n        $letter_grade .= $current_grade\
    \ >= 0.5 ? 'D' : \n            $current_grade >= 0.3 ? 'D-' : \n            'E';\n\
    \n        return $carry . $letter_grade;\n    }, '');\n}\n\n$grades = array(\n\
    \    4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0\n);\n$expected_grades =\
    \ array_map(function($grade) { return 'A+'; }, $grades);\n$expected_grades = array_map(function($grade)\
    \ { return 'A'; }, $grades);\n$expected_grades = array_map(function($grade) {\
    \ return 'A-'; }, $grades);\n$expected_grades = array_map(function($grade) { return\
    \ 'B+'; }, $grades);\n$expected_grades = array_map(function($grade) { return 'B';\
    \ }, $grades);\n$expected_grades = array_map(function($grade) { return 'B-'; },\
    \ $grades);\n$expected_grades = array_map(function($grade) { return 'C+'; }, $grades);\n\
    $expected_grades = array_map(function($grade) { return 'C'; }, $grades);\n$expected_grades\
    \ = array_map(function($grade) { return 'C-'; }, $grades);\n$expected_grades =\
    \ array_map(function($grade) { return 'D+'; }, $grades);\n$expected_grades = array_map(function($grade)\
    \ { return 'D'; }, $grades);\n$expected_grades = array_map(function($grade) {\
    \ return 'D-'; }, $grades);\n$expected_grades = array_map(function($grade) { return\
    \ 'E'; }, $grades);\n\n$grades = array(\n    4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0\n);\n$expected_grades = array_map(function($grade) { return 'A+';\
    \ }, $grades);\n$expected_grades = array_map(function($grade) { return 'A'; },\
    \ $grades);\n$expected_grades = array_map(function($grade) { return 'A-'; }, $grades);\n\
    $expected_grades = array_map(function($grade\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmajpl6oo.php on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = array(\n        array(4.0, array('A+', 'B', 'C-', 'C', 'A-')),\n        array(3.7,\
    \ array('A', 'B')),\n        array(3.3, array('A', 'B-')),\n        array(3.0,\
    \ array('B+', 'B')),\n        array(2.7, array('B', 'C')),\n        array(2.3,\
    \ array('B-', 'C')),\n        array(2.0, array('C+', 'C')),\n        array(1.7,\
    \ array('C')),\n        array(1.3, array('C-', 'C')),\n        array(1.0, array('D+',\
    \ 'D')),\n        array(0.7, array('D', 'D')),\n        array(0.0, array('D-')),\n\
    \    );\n\n    return $grades_array[$grades][array_search($grades, $grades_array[$grades])];\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Illegal offset type in /tmp/tmpgeehq98v.php on line 39\n\nWarning:\
    \ array_search() expects parameter 2 to be array, null given in /tmp/tmpgeehq98v.php\
    \ on line 39\n\nWarning: Illegal offset type in /tmp/tmpgeehq98v.php on line 39\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeehq98v.php:47\nStack\
    \ trace:\n#0 /tmp/tmpgeehq98v.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpgeehq98v.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade => $percent) {\n        $letter_grades[]\
    \ = chr(ord('A')+($grade / 5));\n    }\n    return $letter_grades;\n}\n</code>\n\
    You also have to write a program to read in the grades file. The format for the\
    \ file is:\n<code>\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiktsaf5o.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t// Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0r_0xe_r.php:32\n\
    Stack trace:\n#0 /tmp/tmp0r_0xe_r.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0r_0xe_r.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ here\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7cn8pise.php:31\n\
    Stack trace:\n#0 /tmp/tmp7cn8pise.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7cn8pise.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if (is_array($grades))\
    \ {\n        $grades = array_reverse($grades);\n    }\n    $letters = array();\n\
    \    $average = array_sum($grades) / count($grades);\n    $grades = array_diff($grades,\
    \ array(0)); // remove zeros from the array\n    foreach ($grades as $grade) {\n\
    \        // check if grade is greater than the average\n        if ($grade > $average)\
    \ {\n            $letters[] = 'E';\n            break;\n        }\n        //\
    \ check if grade is greater than 4.0\n        if ($grade > 3.7) {\n          \
    \  $letters[] = 'D+';\n            break;\n        }\n        // check if grade\
    \ is greater than 3.3\n        if ($grade > 3.3) {\n            $letters[] = 'D-';\n\
    \            break;\n        }\n        // check if grade is greater than 3.0\n\
    \        if ($grade > 2.7) {\n            $letters[] = 'C+';\n            break;\n\
    \        }\n        // check if grade is greater than 2.3\n        if ($grade\
    \ > 2.3) {\n            $letters[] = 'C-';\n            break;\n        }\n  \
    \      // check if grade is greater than 2.0\n        if ($grade > 1.7) {\n  \
    \          $letters[] = 'B+';\n            break;\n        }\n        // check\
    \ if grade is greater than 1.7\n        if ($grade > 1.3) {\n            $letters[]\
    \ = 'B-';\n            break;\n        }\n        // check if grade is greater\
    \ than 1.0\n        if ($grade > 0.7) {\n            $letters[] = 'A+';\n    \
    \        break;\n        }\n        // check if grade is greater than 0.7\n  \
    \      if ($grade > 0.0) {\n            $letters[] = 'A';\n            break;\n\
    \        }\n        // check if grade is less than 0.0\n        if ($grade < 0.0)\
    \ {\n            $letters[] = 'B';\n            break;\n        }\n    }\n   \
    \ return $letters;\n}\n</code>\nOutputs:\n<code>\nA+ B C C - \n</code>\nDemo\n\
    <|/ a |>\n<| c |>\nThank you. I am able to understand and modify it to solve the\
    \ problem but I am not able to understand how array_reverse and array_diff function\
    \ works? I tried searching in the internet but no help found.\n<|/ c |>\n<| c\
    \ |>\n`array_reverse` reverses the order of the elements of an array.  `array_diff`\
    \ returns only values from the first array that aren't present in the second array\
    \ - [example](https://3v4l.org/Vcj0G)\n<|/ c |>\n<| c |>\nIf you found the answer\
    \ helpful, please don't forget to mark it as accepted by clicking the grey checkmark\
    \ on the left side under the voting buttons :)\n<|/ \nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppefd6q25.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  // There is\
    \ an inconsistency in the way the data is stored. Some entries have\n  // a negative\
    \ grade, some don't. Since the letter grade is calculated using \n  // the GPA\
    \ (and not the grade) we have to take this into account.\n  $negative_grades =\
    \ array_filter($grades, function($value) { return $value < 0.0; });\n  if (count($negative_grades)\
    \ > 0) {\n    array_walk($negative_grades, function(&$grade) {\n      $grade =\
    \ -$grade;\n    });\n  }\n\n  // We sort our grades from lowest to highest grade\
    \ so that we can calculate \n  // the letter grade based on those grades.\n  rsort($grades);\n\
    \n  // Calculate the letter grade based on the grades in the array.\n  return\
    \ array_map(function($value) {\n    if ($value < 3.0) {\n      return 'A+' . floor($value\
    \ / 2.0);\n    } elseif ($value < 3.3) {\n      return 'A' . floor($value / 2.0);\n\
    \    } elseif ($value < 3.7) {\n      return 'A-';\n    } elseif ($value < 4.0)\
    \ {\n      return 'B+' . floor($value / 2.0);\n    } elseif ($value < 4.7) {\n\
    \      return 'B' . floor($value / 2.0);\n    } elseif ($value < 5.0) {\n    \
    \  return 'B-';\n    } elseif ($value < 5.7) {\n      return 'C+' . floor($value\
    \ / 2.0);\n    } elseif ($value < 6.0) {\n      return 'C' . floor($value / 2.0);\n\
    \    } elseif ($value < 6.7) {\n      return 'C-';\n    } elseif ($value < 7.0)\
    \ {\n      return 'D+' . floor($value / 2.0);\n    } elseif ($value < 7.7) {\n\
    \      return 'D' . floor($value / 2.0);\n    } elseif ($value < 8.0) {\n    \
    \  return 'D-';\n    } elseif ($value < 9.0) {\n      return 'E';\n    } else\
    \ {\n      return 'D-';\n    }\n  }, $grades);\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1x6bh1ck.php:77\n\
    Stack trace:\n#0 /tmp/tmp1x6bh1ck.php(85): test()\n#1 {main}\n  thrown in /tmp/tmp1x6bh1ck.php\
    \ on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_count\
    \ = count($grades);\n  if ($grades_count == 0) {\n    return ['E'];\n  }\n  $letter_grades\
    \ = array();\n  for ($i = 0; $i < $grades_count; $i++) {\n    $grade = floor($grades[$i]\
    \ / 3);\n    if ($grade == 0) {\n      continue;\n    }\n    switch ($grade) {\n\
    \      case 1:\n        $letter_grades[] = 'A+';\n        break;\n      case 2:\n\
    \        $letter_grades[] = 'A';\n        break;\n      case 3:\n        $letter_grades[]\
    \ = 'A-';\n        break;\n      case 4:\n        $letter_grades[] = 'B+';\n \
    \       break;\n      case 5:\n        $letter_grades[] = 'B';\n        break;\n\
    \      case 6:\n        $letter_grades[] = 'B-';\n        break;\n      case 7:\n\
    \        $letter_grades[] = 'C+';\n        break;\n      case 8:\n        $letter_grades[]\
    \ = 'C';\n        break;\n      case 9:\n        $letter_grades[] = 'C-';\n  \
    \      break;\n      case 10:\n        $letter_grades[] = 'D+';\n        break;\n\
    \      case 11:\n        $letter_grades[] = 'D';\n        break;\n      case 12:\n\
    \        $letter_grades[] = 'D-';\n        break;\n      default:\n        $letter_grades[]\
    \ = 'D-';\n        break;\n    }\n  }\n  return $letter_grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8lgqc2t.php:84\n\
    Stack trace:\n#0 /tmp/tmpv8lgqc2t.php(92): test()\n#1 {main}\n  thrown in /tmp/tmpv8lgqc2t.php\
    \ on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map('round', array_map('floatval', $grades));\n    $grades = array_map('ceil',\
    \ array_map('intval', $grades));\n    \n    $letter_grade = array();\n    \n \
    \   // Grade is < 3.5, then it is A\n    if($grades[0] < 3.5) {\n        $letter_grade[0]\
    \ = 'A+';\n    }\n    \n    // Grade is 3.5-3.9, then it is A or B\n    if($grades[0]\
    \ > 3.5 && $grades[0] < 3.9) {\n        $letter_grade[0] = $grades[0] < 3.5 ?\
    \ 'A' : 'B';\n    }\n    \n    // Grade is 3.9-3.9, then it is B\n    if($grades[0]\
    \ > 3.9 && $grades[0] < 3.9) {\n        $letter_grade[0] = 'B';\n    }\n    \n\
    \    // Grade is 3.9, then it is C\n    if($grades[0] > 3.9) {\n        $letter_grade[0]\
    \ = 'C';\n    }\n    \n    // Grade is 4.0, then it is D\n    if($grades[0] >\
    \ 3.5 && $grades[0] < 3.9) {\n        $letter_grade[0] = 'D';\n    }\n    \n \
    \   // Grade is 4.0-4.6, then it is D\n    if($grades[0] > 3.5 && $grades[0] <\
    \ 4.0) {\n        $letter_grade[0] = 'D';\n    }\n    \n    // Grade is 4.6+,\
    \ then it is E\n    if($grades[0] > 3.9) {\n        $letter_grade[0] = 'E';\n\
    \    }\n    \n    return $letter_grade;\n}\nfunction candidate(...$args) {\n \
    \   return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0481ahd.php:71\n\
    Stack trace:\n#0 /tmp/tmpr0481ahd.php(79): test()\n#1 {main}\n  thrown in /tmp/tmpr0481ahd.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map(function($grade)\
    \ { return (int) $grade; }, $grades);\n\n  $gpas = array_keys(array_column($grades,\
    \ 'gpa'));\n  asort($gpas);\n\n  $letter_grades = [];\n  $current_gpa =  null;\n\
    \  foreach ($gpas as $gpa) {\n    if ($gpa === $current_gpa) {\n      $letter_grades[]\
    \ = $grades[$gpa]['grade'];\n    } else {\n      $current_gpa = $gpa;\n      $letter_grades[]\
    \ = $grades[$gpa]['grade'];\n    }\n  }\n\n  return $letter_grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjudpqg9g.php:48\n\
    Stack trace:\n#0 /tmp/tmpjudpqg9g.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpjudpqg9g.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\tglobal $gpa_grades;\n\
    \t\n\t$grades_array = array();\n\tforeach ($grades as $grade) {\n\t\t$grades_array[]\
    \ = $gpa_grades[$grade];\n\t}\n\t\n\t$sum_of_grades = 0;\n\tforeach ($grades_array\
    \ as $grade) {\n\t\t$sum_of_grades += $grade;\n\t}\n\t\n\tforeach ($grades_array\
    \ as $key => $grade) {\n\t\tif ($key > 0) {\n\t\t\tif ($grade == $grades_array[$key\
    \ - 1]) {\n\t\t\t\t$grades_array[$key] = \"D-\";\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    foreach ($grades_array as $key => $grade) {\n\t\tif ($key > 0) {\n\t\t\t$grades_array[$key]\
    \ .= \"+\";\n\t\t}\n\t}\n\t\n\tif ($sum_of_grades == 0) {\n\t\treturn \"E\";\n\
    \t} else {\n\t\treturn implode(\"\", $grades_array);\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6e5j_ouz.php:62\n\
    Stack trace:\n#0 /tmp/tmp6e5j_ouz.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp6e5j_ouz.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $a = array_shift($grades);\n\
    \  $b = array_shift($grades);\n  $c = array_shift($grades);\n  $d = array_shift($grades);\n\
    \  $e = array_shift($grades);\n  $f = array_shift($grades);\n\n  $gpd = $a + $b\
    \ + $c + $d + $e + $f;\n  $lettergrades = array('A+', 'B', 'C-', 'C', 'D-', 'E');\n\
    \  return array_map(function($v) use ($gpd, $lettergrades) {\n    return $lettergrades[$gpd[$v]];\n\
    \  }, range($gpd));\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: range() expects at least 2 parameters, 1 given in /tmp/tmp0_gqw3t6.php\
    \ on line 35\n\nWarning: array_map(): Expected parameter 2 to be an array, bool\
    \ given in /tmp/tmp0_gqw3t6.php on line 35\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0_gqw3t6.php:43\nStack trace:\n#0 /tmp/tmp0_gqw3t6.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0_gqw3t6.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter =\
    \ '';\n    $total_grade = array_sum($grades);\n    if ($total_grade >= 4.0 &&\
    \ $total_grade <= 5.0) {\n        $letter = 'A+';\n    } elseif ($total_grade\
    \ > 5.0 && $total_grade <= 5.7) {\n        $letter = 'A';\n    } elseif ($total_grade\
    \ > 5.7 && $total_grade <= 6.3) {\n        $letter = 'A-';\n    } elseif ($total_grade\
    \ > 6.3 && $total_grade <= 7.0) {\n        $letter = 'B+';\n    } elseif ($total_grade\
    \ > 7.0 && $total_grade <= 7.7) {\n        $letter = 'B';\n    } elseif ($total_grade\
    \ > 7.7 && $total_grade <= 8.3) {\n        $letter = 'B-';\n    } elseif ($total_grade\
    \ > 8.3 && $total_grade <= 9.0) {\n        $letter = 'C+';\n    } elseif ($total_grade\
    \ > 9.0 && $total_grade <= 10.7) {\n        $letter = 'C';\n    } elseif ($total_grade\
    \ > 10.7 && $total_grade <= 11.3) {\n        $letter = 'C-';\n    } elseif ($total_grade\
    \ > 11.3 && $total_grade <= 12.0) {\n        $letter = 'D+';\n    } elseif ($total_grade\
    \ > 12.0 && $total_grade <= 12.7) {\n        $letter = 'D';\n    } elseif ($total_grade\
    \ > 12.7 && $total_grade <= 13.3) {\n        $letter = 'D-';\n    } elseif ($total_grade\
    \ > 13.3 && $total_grade <= 13.0) {\n        $letter = 'E';\n    } else {\n  \
    \      $letter = 'E';\n    }\n\n    return $letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdaajwhq0.php:64\n\
    Stack trace:\n#0 /tmp/tmpdaajwhq0.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpdaajwhq0.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $gpas = array_map(function($grade)\
    \ {\n    return ($grade >= 4.0) ? \"A+\" : (($grade >= 3.7) ? \"A\" : (\n    \
    \    ($grade >= 3.3) ? \"A-\" : (\n          ($grade >= 3.0) ? \"B+\" : (($grade\
    \ >= 2.7) ? \"B\" : (\n            ($grade >= 2.3) ? \"B-\" : (\n            \
    \  ($grade >= 2.0) ? \"C+\" : (($grade >= 1.7) ? \"C\" : (\n                ($grade\
    \ >= 1.3) ? \"C-\" : (\n                  ($grade >= 1.0) ? \"D+\" : (($grade\
    \ >= 0.7) ? \"D\" : (\n                    ($grade >= 0.0) ? \"D-\" : (\n    \
    \                  \"E\"\n                    )\n                  )\n       \
    \         )\n              )\n            )\n          )\n        )\n      )\n\
    \    )\n  );\n  return $gpas;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmx2dci79.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array($grades);\n\
    \  $letter_grade = array();\n  $min_grade = min($grades);\n  $max_grade = max($grades);\n\
    \  if ($min_grade == $max_grade) {\n    foreach ($grades as $grade) {\n      if\
    \ ($grade >= 4.0) {\n        $letter_grade[] = \"A+\";\n      }\n      elseif\
    \ ($grade > 3.7) {\n        $letter_grade[] = \"A\";\n      }\n      elseif ($grade\
    \ > 3.3) {\n        $letter_grade[] = \"A-\";\n      }\n      elseif ($grade >\
    \ 3) {\n        $letter_grade[] = \"B+\";\n      }\n      elseif ($grade > 2.7)\
    \ {\n        $letter_grade[] = \"B\";\n      }\n      elseif ($grade > 2.3) {\n\
    \        $letter_grade[] = \"B-\";\n      }\n      elseif ($grade > 2) {\n   \
    \     $letter_grade[] = \"C+\";\n      }\n      elseif ($grade > 1.7) {\n    \
    \    $letter_grade[] = \"C\";\n      }\n      elseif ($grade > 1.3) {\n      \
    \  $letter_grade[] = \"C-\";\n      }\n      elseif ($grade > 1) {\n        $letter_grade[]\
    \ = \"D+\";\n      }\n      elseif ($grade > 0.7) {\n        $letter_grade[] =\
    \ \"D\";\n      }\n      elseif ($grade > 0) {\n        $letter_grade[] = \"D-\"\
    ;\n      }\n      else {\n        $letter_grade[] = \"E\";\n      }\n    }\n \
    \ }\n  else {\n    foreach ($grades as $grade) {\n      if ($grade >= 4.0) {\n\
    \        $letter_grade[] = \"A+\";\n      }\n      elseif ($grade > 3.7) {\n \
    \       $letter_grade[] = \"A\";\n      }\n      elseif ($grade > 3.3) {\n   \
    \     $letter_grade[] = \"A-\";\n      }\n      elseif ($grade > 3) {\n      \
    \  $letter_grade[] = \"B+\";\n      }\n      elseif ($grade > 2.7) {\n       \
    \ $letter_grade[] = \"B\";\n      }\n      elseif ($grade > 2.3) {\n        $letter_grade[]\
    \ = \"B-\";\n      }\n      elseif ($grade > 2) {\n        $letter_grade[] = \"\
    C+\";\n      }\n      elseif ($grade > 1.7) {\n        $letter_grade[] = \"C\"\
    ;\n      }\n      elseif ($grade > 1.3) {\n        $letter_grade[] = \"C-\";\n\
    \      }\n      elseif ($grade > 1) {\n        $letter_grade[] = \"D+\";\n   \
    \   }\n      elseif ($grade \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnyy5yoa_.php on line 104\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach($grades as $grade) {\n        $letter_grades[] = 'A';\n\
    \        switch($grade) {\n            case (round($grade, 2)):\n            \
    \    $letter_grades[] = 'B+';\n                break;\n            case (round($grade,\
    \ 1) == 3.0):\n                $letter_grades[] = 'C+';\n                break;\n\
    \            case (round($grade, 1) == 3.3):\n                $letter_grades[]\
    \ = 'C-';\n                break;\n            case (round($grade, 1) == 3.7):\n\
    \                $letter_grades[] = 'C+';\n                break;\n          \
    \  case (round($grade, 1) == 4.0):\n                $letter_grades[] = 'D+';\n\
    \                break;\n            case (round($grade, 1) == 4.3):\n       \
    \         $letter_grades[] = 'D-';\n                break;\n            case (round($grade,\
    \ 1) == 4.7):\n                $letter_grades[] = 'D+';\n                break;\n\
    \            case (round($grade, 1) == 5.0):\n                $letter_grades[]\
    \ = 'E';\n                break;\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4yau9u_c.php:62\n\
    Stack trace:\n#0 /tmp/tmp4yau9u_c.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp4yau9u_c.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_length\
    \ = count($grades);\n    $grades_array = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7,\
    \ 1.3, 1.0, 0.7];\n    $grades_array = array_reverse($grades_array);\n    $grades_array\
    \ = array_slice($grades_array, 0, $grades_length);\n    \n    $letters = array('A+',\
    \ 'B', 'C-', 'C', 'A-');\n    $letters = array_flip($letters);\n    \n    $letter\
    \ = array_shift($grades_array);\n    \n    while($letter != 0) {\n        if ($letter\
    \ > $grades_array[0]) {\n            $letter = $letter - $grades_array[0];\n \
    \           $letter = array_shift($grades_array);\n            $letter = $letter\
    \ + $letters[$letter];\n        } else {\n            $letter = $letter + $letters[$letter];\n\
    \        }\n    }\n    \n    return $letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grade_array\
    \ = array();\n\t// We should use \"foreach\" here.\n\tforeach ($grades as $grade)\
    \ {\n\t\t$grade_array[] = ($grade < 3.0 ? \"A+\" : $grade < 2.0 ? \"A\" : $grade\
    \ < 1.7 ? \"A-\" : $grade < 1.3 ? \"B+\" : $grade < 1.0 ? \"B\" : $grade < 0.7\
    \ ? \"B-\" : $grade < 0.3 ? \"C+\" : $grade < 0.0 ? \"C\" : $grade < 0.2 ? \"\
    C-\" : $grade < 0.1 ? \"+D\" : $grade < 0.7 ? \"D\" : $grade < 0.0 ? \"D-\" :\
    \ \"E\");\n\t}\n\treturn $grade_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08barxit.php:37\n\
    Stack trace:\n#0 /tmp/tmp08barxit.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp08barxit.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ array(\n        0 => 'E',\n        1 => 'D',\n        2 => 'C',\n        3 =>\
    \ 'B',\n        4 => 'A',\n        5 => 'A-',\n        6 => 'B+',\n        7 =>\
    \ 'B-',\n        8 => 'B+',\n        9 => 'B+',\n        10 => 'B-',\n       \
    \ 11 => 'B+',\n        12 => 'B-',\n        13 => 'B-',\n        14 => 'B-',\n\
    \        15 => 'B-',\n        16 => 'B-',\n        17 => 'B-',\n        18 =>\
    \ 'B-',\n        19 => 'B-',\n        20 => 'B+',\n        21 => 'B+',\n     \
    \   22 => 'B+',\n        23 => 'B+',\n        24 => 'B+',\n        25 => 'B+',\n\
    \        26 => 'B+',\n        27 => 'B-',\n        28 => 'B+',\n        29 =>\
    \ 'B+',\n        30 => 'B+',\n        31 => 'B+',\n        32 => 'B+',\n     \
    \   33 => 'B+',\n        34 => 'B+',\n        35 => 'B+',\n        36 => 'B+',\n\
    \        37 => 'B-',\n        38 => 'B-',\n        39 => 'B-',\n        40 =>\
    \ 'B-',\n        41 => 'B+',\n        42 => 'B+',\n        43 => 'B+',\n     \
    \   44 => 'B+',\n        45 => 'B+',\n        46 => 'B+',\n        47 => 'B+',\n\
    \        48 => 'B+',\n        49 => 'B+',\n        50 => 'B+',\n        51 =>\
    \ 'B+',\n        52 => 'B+',\n        53 => 'B+',\n        54 => 'B+',\n     \
    \   55 => 'B+',\n        56 => 'B-',\n        57 => 'B-',\n        58 => 'B-',\n\
    \        59 => 'B-',\n        60 => 'B-',\n        61 => 'B-',\n        62 =>\
    \ 'B-',\n        63 => 'B-',\n        64 => 'B-',\n        65 => 'B-',\n     \
    \   66 => 'B+',\n        67 => 'B+',\n        68 => 'B+',\n        69 => 'B+',\n\
    \        70 => 'B+',\n        71 => 'B+',\n        72 => 'B+',\n        73 \n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph224flsv.php on line 99\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_sum\
    \ = array_sum($grades);\n    $grades_len = count($grades);\n    $grades_gpa =\
    \ array();\n    $grades_gpa['0'] = 'E';\n    for($i = 0; $i < $grades_len; $i++)\
    \ {\n        $grades_gpa[$i] = $grades[$i] / $grades_sum;\n    }\n    $grades_gpa['1']\
    \ = 'D+';\n    $grades_gpa['2'] = 'D';\n    $grades_gpa['3'] = 'C+';\n    $grades_gpa['4']\
    \ = 'C';\n    $grades_gpa['5'] = 'B+';\n    $grades_gpa['6'] = 'B';\n    $grades_gpa['7']\
    \ = 'A+';\n    $grades_gpa['8'] = 'A';\n    $grades_gpa['9'] = 'A- ';\n    $grades_gpa['>10']\
    \ = 'B- ';\n    $grades_gpa['>11'] = 'C- ';\n    $grades_gpa['>12'] = 'D- ';\n\
    \    $grades_gpa['>13'] = 'F ';\n    return $grades_gpa;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputzl5r1i.php:51\n\
    Stack trace:\n#0 /tmp/tmputzl5r1i.php(59): test()\n#1 {main}\n  thrown in /tmp/tmputzl5r1i.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Grade is\
    \ 4.0\n    if ($grades[0] == 4.0){\n        return 'A+';\n    }\n    // 3.7 -->\
    \ 3.0\n    if ($grades[0] > 3.7) {\n        $grades[0] -= 3.7;\n    }\n    //\
    \ 3.3 --> 2.0\n    if ($grades[0] > 3.3) {\n        $grades[0] -= 3.3;\n    }\n\
    \    // 3.0 --> 1.0\n    if ($grades[0] > 3.0) {\n        $grades[0] -= 3.0;\n\
    \    }\n    // 2.7 --> 2.0\n    if ($grades[0] > 2.7) {\n        $grades[0] -=\
    \ 2.7;\n    }\n    // 2.3 --> 1.0\n    if ($grades[0] > 2.3) {\n        $grades[0]\
    \ -= 2.3;\n    }\n    // 2.0 --> 0.0\n    if ($grades[0] > 2.0) {\n        $grades[0]\
    \ -= 2.0;\n    }\n    // 1.7 --> 1.0\n    if ($grades[0] > 1.7) {\n        $grades[0]\
    \ -= 1.7;\n    }\n    // 1.3 --> 0.0\n    if ($grades[0] > 1.3) {\n        $grades[0]\
    \ -= 1.3;\n    }\n    // 1.0 --> 0.0\n    if ($grades[0] > 1.0) {\n        $grades[0]\
    \ -= 1.0;\n    }\n    // 0.7 --> 0.0\n    if ($grades[0] > 0.7) {\n        $grades[0]\
    \ -= 0.7;\n    }\n    // 0.0 --> 0.0\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n    if ($grades[0] > 0.0) {\n        $grades[0]\
    \ -= 0.0;\n    }\n    // E - grades[0]\n\nfunction candidate(...$args) {\n   \
    \ return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprbt4v9v6.php on line 127\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grade_array\
    \ = [];\n\t$grade_array[\"4.0\"] = \"A+\";\n\t\n\tfor ($i = 1; $i <= count($grades);\
    \ $i++) {\n\t\t\n\t\tif ($grades[$i - 1] > 3.7) {\n\t\t\t$grade_array[\"$grades[$i\
    \ - 1]\"] = \"A\";\n\t\t}\n\t\t\n\t\telseif ($grades[$i - 1] > 3.3) {\n\t\t\t\
    $grade_array[\"$grades[$i - 1]\"] = \"A-\";\n\t\t}\n\t\t\n\t\telseif ($grades[$i\
    \ - 1] > 3.0) {\n\t\t\t$grade_array[\"$grades[$i - 1]\"] = \"B+\";\n\t\t}\n\t\t\
    \n\t\telseif ($grades[$i - 1] > 2.7) {\n\t\t\t$grade_array[\"$grades[$i - 1]\"\
    ] = \"B\";\n\t\t}\n\t\t\n\t\telseif ($grades[$i - 1] > 2.3) {\n\t\t\t$grade_array[\"\
    $grades[$i - 1]\"] = \"B-\";\n\t\t}\n\t\t\n\t\telseif ($grades[$i - 1] > 2.0)\
    \ {\n\t\t\t$grade_array[\"$grades[$i - 1]\"] = \"C+\";\n\t\t}\n\t\t\n\t\telseif\
    \ ($grades[$i - 1] > 1.7) {\n\t\t\t$grade_array[\"$grades[$i - 1]\"] = \"C\";\n\
    \t\t}\n\t\t\n\t\telseif ($grades[$i - 1] > 1.3) {\n\t\t\t$grade_array[\"$grades[$i\
    \ - 1]\"] = \"C-\";\n\t\t}\n\t\t\n\t\telseif ($grades[$i - 1] > 1.0) {\n\t\t\t\
    $grade_array[\"$grades[$i - 1]\"] = \"D+\";\n\t\t}\n\t\t\n\t\telseif ($grades[$i\
    \ - 1] > 0.7) {\n\t\t\t$grade_array[\"$grades[$i - 1]\"] = \"D\";\n\t\t}\n\t\t\
    \n\t\telseif ($grades[$i - 1] > 0.0) {\n\t\t\t$grade_array[\"$grades[$i - 1]\"\
    ] = \"D-\";\n\t\t}\n\t\t\n\t\telse {\n\t\t\t$grade_array[\"$grades[$i - 1]\"]\
    \ = \"E\";\n\t\t}\n\t}\n\treturn $grade_array;\n}\n\n$grade_array = numerical_letter_grade($_POST['grade_array']);\n\
    \n$grade_array = [\n\t'4.0' => 'A+',\n\t'>3.7' => 'A',\n\t'>3.3' => 'A-',\n\t\
    '>3.0' => 'B+',\n\t'>2.7' => 'B',\n\t'>2.3' => 'B-',\n\t'>2.0' => 'C+',\n\t'>1.7'\
    \ => 'C',\n\t'>1.3' => 'C-',\n\t'>1.0' => 'D+',\n\t'>\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7zsrkqmj.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_filter(\n        $grades,\n        function($item) {\n            return\
    \ $item > 0;\n        }\n    );\n    $letters = array();\n    foreach ($grades\
    \ as $index => $grade) {\n        $letters[$index] = $grade >= 4.0\n         \
    \   ? strtoupper('A+')\n            : ($grade >= 3.7 ? strtoupper('A') : ($grade\
    \ >= 3.3 ? strtoupper('A-')\n                : ($grade >= 3.0 ? strtoupper('B+')\
    \ : ($grade >= 2.7 ? strtoupper('B')\n                    : ($grade >= 2.3 ? strtoupper('B-')\n\
    \                        : ($grade >= 2.0 ? strtoupper('C+') : ($grade >= 1.7\
    \ ? strtoupper('C')\n                            : ($grade >= 1.3 ? strtoupper('C-')\
    \ : ($grade >= 1.0 ? strtoupper('D+') : ($grade >= 0.7 ? strtoupper('D')\n   \
    \                             : ($grade >= 0.0 ? 'D-' : strtoupper('E'))))))))));\n\
    \    }\n    return $letters;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyx9qa3op.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_length\
    \ = count($grades);\n    $letter_grades = \"\";\n    for ($i = 0; $i < $grades_length;\
    \ $i++) {\n        if ($grades[$i] > 0) {\n            $letter_grades[$i] = \"\
    A+\";\n        } elseif ($grades[$i] >= 0 && $grades[$i] < 3.7) {\n          \
    \  $letter_grades[$i] = \"A\";\n        } elseif ($grades[$i] >= 3.7 && $grades[$i]\
    \ < 3.3) {\n            $letter_grades[$i] = \"A-\";\n        } elseif ($grades[$i]\
    \ >= 3.3 && $grades[$i] < 3) {\n            $letter_grades[$i] = \"B+\";\n   \
    \     } elseif ($grades[$i] >= 3 && $grades[$i] < 2.7) {\n            $letter_grades[$i]\
    \ = \"B\";\n        } elseif ($grades[$i] >= 2.7 && $grades[$i] < 2.3) {\n   \
    \         $letter_grades[$i] = \"B-\";\n        } elseif ($grades[$i] >= 2.3 &&\
    \ $grades[$i] < 2) {\n            $letter_grades[$i] = \"C+\";\n        } elseif\
    \ ($grades[$i] >= 2 && $grades[$i] < 1.7) {\n            $letter_grades[$i] =\
    \ \"C\";\n        } elseif ($grades[$i] >= 1.7 && $grades[$i] < 1.3) {\n     \
    \       $letter_grades[$i] = \"C-\";\n        } elseif ($grades[$i] >= 1.3 &&\
    \ $grades[$i] < 1) {\n            $letter_grades[$i] = \"D+\";\n        } elseif\
    \ ($grades[$i] >= 1 && $grades[$i] < 0.7) {\n            $letter_grades[$i] =\
    \ \"D\";\n        } elseif ($grades[$i] >= 0.7 && $grades[$i] < 0) {\n       \
    \     $letter_grades[$i] = \"D-\";\n        } elseif ($grades[$i] < 0) {\n   \
    \         $letter_grades[$i] = \"E\";\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp94q5fgll.php:63\n\
    Stack trace:\n#0 /tmp/tmp94q5fgll.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp94q5fgll.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $gpa = $grades[0];\n\
    \  if($gpa > 3.7){\n    $letter = 'A+';\n  }elseif($gpa > 3.3){\n    $letter =\
    \ 'A';\n  }elseif($gpa > 2.7){\n    $letter = 'B+';\n  }elseif($gpa > 2.3){\n\
    \    $letter = 'B';\n  }elseif($gpa > 1.7){\n    $letter = 'C+';\n  }elseif($gpa\
    \ > 1.3){\n    $letter = 'C';\n  }elseif($gpa > 0.7){\n    $letter = 'D+';\n \
    \ }elseif($gpa > 0.0){\n    $letter = 'D';\n  }else{\n    $letter = 'E';\n  }\n\
    \  return $letter;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpliiqeukn.php:52\n\
    Stack trace:\n#0 /tmp/tmpliiqeukn.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpliiqeukn.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-',\
    \ 'E');\n    return $letter_grades[array_search($grades, $letter_grades)];\n}\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pbc_igs.php:33\n\
    Stack trace:\n#0 /tmp/tmp9pbc_igs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9pbc_igs.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ array('A+', 'B', 'C-', 'C', 'D-', 'D', 'E');\n    $grades  = array_map(\n  \
    \      function($grade){ return round($grade,1);},\n        $grades\n    );\n\
    \    $grades_sum = array_sum($grades);\n\n    // If no grade was given, output\
    \ 'E'\n    if($grades_sum === 0) { return array('E'); }\n\n    foreach($grades\
    \ as $index => $grade) {\n        $letter_grade = $letters[$index];\n        if($grade\
    \ > 0 && $grade < $grades_sum) {\n            $letter_grade .= \"+\";\n      \
    \  }\n        if($grade < 0 && $grade > -$grades_sum) {\n            $letter_grade\
    \ .= \"-\";\n        }\n        if($grade === -$grades_sum) {\n            $letter_grade\
    \ .= \"-\";\n        }\n        if($grade === 0) {\n            $letter_grade\
    \ .= \"'\";\n        }\n    }\n    return $letters;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68bky22k.php:56\n\
    Stack trace:\n#0 /tmp/tmp68bky22k.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp68bky22k.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_filter($grades);\n    if (count($grades)) {\n        $grades = array_map('floatval',\
    \ $grades);\n        if (count($grades)) {\n            $max = max($grades);\n\
    \            $min = min($grades);\n            $mid = $max / 2;\n            $grades\
    \ = array_filter($grades);\n            $grades = array_map('sprintf', $grades);\n\
    \            $grades = array_map('round', $grades);\n            $grades = array_map('strval',\
    \ $grades);\n            $grades = array_map(function($v) use ($mid) {\n     \
    \           if ($v > $mid && $v < $max) {\n                    return 'D+';\n\
    \                } elseif ($v > $max) {\n                    return 'D';\n   \
    \             } elseif ($v < $mid) {\n                    return 'D-';\n     \
    \           } elseif ($v >= $mid) {\n                    return 'C';\n       \
    \         } elseif ($v > $mid) {\n                    return 'B';\n          \
    \      } elseif ($v < $mid) {\n                    return 'B-';\n            \
    \    } elseif ($v >= $mid) {\n                    return 'B+';\n             \
    \   } elseif ($v < $mid) {\n                    return 'A+';\n               \
    \ }\n            }, $grades);\n            return $grades;\n        }\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzohtglfn.php:64\n\
    Stack trace:\n#0 /tmp/tmpzohtglfn.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpzohtglfn.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map('round', explode(\",\", $grades));\n    $total_points = 0;\n    $grade\
    \ = \"\";\n    $num_grade = \"\";\n    foreach ($grades as $grade) {\n       \
    \ $points = ($grade * 40) / 40;\n        if ($points > 0) {\n            $total_points\
    \ += $points;\n            $num_grade .= (floor($points / 10) * \"A\" . ($points\
    \ % 10));\n        } else {\n            $num_grade .= (floor($points / 10) *\
    \ \"A+\");\n        }\n    }\n    $num_grade = ($total_points / count($grades))\
    \ * $num_grade;\n    return $num_grade;\n}\n</code>\n<|/ a tags=php,algorithm,math,arrays\
    \ |>\n<| c |>\nThanks so much for writing this all up. I'm going to try it right\
    \ now. I might have a follow up question on this later. Thanks again\n<|/ c |>\n\
    <| a tags=php,algorithm,math,arrays |>\nYou can get it using below function\n\
    <code>\n<?php\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprp3zlun2.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = array();\n  foreach ($grades as $grade) {\n    switch (true) {\n      case\
    \ (4.0 <= $grade && $grade <= 4.7):\n        $letter_grades[] = 'A+';\n      \
    \  break;\n      case (4.7 <= $grade && $grade <= 4.3):\n        $letter_grades[]\
    \ = 'A';\n        break;\n      case (4.3 <= $grade && $grade <= 4.0):\n     \
    \   $letter_grades[] = 'A+';\n        break;\n      case (4.0 <= $grade && $grade\
    \ <= 4.7):\n        $letter_grades[] = 'A';\n        break;\n      case (4.7 <=\
    \ $grade && $grade <= 4.3):\n        $letter_grades[] = 'A-';\n        break;\n\
    \      case (4.3 <= $grade && $grade <= 4.0):\n        $letter_grades[] = 'A-';\n\
    \        break;\n      case (4.0 <= $grade && $grade <= 4.7):\n        $letter_grades[]\
    \ = 'B+';\n        break;\n      case (4.7 <= $grade && $grade <= 4.3):\n    \
    \    $letter_grades[] = 'B';\n        break;\n      case (4.3 <= $grade && $grade\
    \ <= 4.0):\n        $letter_grades[] = 'B+';\n        break;\n      case (4.0\
    \ <= $grade && $grade <= 4.7):\n        $letter_grades[] = 'B';\n        break;\n\
    \      case (4.7 <= $grade && $grade <= 4.3):\n        $letter_grades[] = 'B-';\n\
    \        break;\n      case (4.3 <= $grade && $grade <= 4.0):\n        $letter_grades[]\
    \ = 'B-';\n        break;\n      case (4.0 <= $grade && $grade <= 4.7):\n    \
    \    $letter_grades[] = 'C+';\n        break;\n      case (4.7 <= $grade && $grade\
    \ <= 4.3):\n        $letter_grades[] = 'C';\n        break;\n      case (4.3 <=\
    \ $grade && $grade <= 4.0):\n        $letter_grades[] = 'C+';\n        break;\n\
    \      case (4.0 <= $grade && $grade <= 4.7):\n        $letter_grades[] = 'C';\n\
    \        break;\n      case (4.7 <= $grade && $grade <= 4.3):\n        $letter_grades[]\
    \ = 'C-';\n        break;\n      case (4.3 <= $grade && $grade <= 4.0):\n    \
    \    $letter_grades[] = 'C-';\n        break;\n      case (4.0 <= $grade && $grade\
    \ <= 4.7):\n        $letter_grade\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt5qe_s4u.php on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n   $letter_grades\
    \ = array('A','B','C','D','E');\n   $totals = array_sum($grades);\n   $grades_remain\
    \ = $totals % 10;\n   $grades_remain_array = array_map(function($value){\n   \
    \   return $value - $grades_remain;\n   }, $grades_remain);\n   $grades_total\
    \ = array_sum($grades_remain_array);\n   $grades_total_array = array_map(function($value){\n\
    \      return $value / 10;\n   }, $grades_total);\n   $letter_grades_array = array_map(function($value,\
    \ $i){\n      return $value * $grades_total_array[$i];\n   }, $grades, $grades_total_array);\n\
    \   $letter_grades = array_combine($letter_grades, $letter_grades_array);\n  \
    \ return $letter_grades;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, int given\
    \ in /tmp/tmpsxi0nkkv.php on line 29\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpsxi0nkkv.php on line 30\n\nWarning: array_map():\
    \ Expected parameter 2 to be an array, null given in /tmp/tmpsxi0nkkv.php on line\
    \ 33\n\nWarning: array_map(): Expected parameter 3 to be an array, null given\
    \ in /tmp/tmpsxi0nkkv.php on line 36\n\nWarning: array_combine() expects parameter\
    \ 2 to be array, null given in /tmp/tmpsxi0nkkv.php on line 37\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpsxi0nkkv.php:45\nStack trace:\n\
    #0 /tmp/tmpsxi0nkkv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsxi0nkkv.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map('round',\
    \ array_map('intval', $grades));\n  $grades_sum = array_sum($grades);\n  if ($grades_sum\
    \ > 1) {\n    return array_map(\n      'chr',\n      array_map(\n        'chr',\n\
    \        array_map(\n          'chr',\n          array_map(\n            'chr',\n\
    \            array_map(\n              'chr',\n              array_fill(0, 5,\
    \ 'F'),\n              array_fill(0, $grades_sum - 1, 'E'),\n              array_fill(0,\
    \ $grades_sum - 1, 'D'),\n              array_fill(0, $grades_sum - 1, 'C'),\n\
    \              array_fill(0, $grades_sum - 1, 'B'),\n              array_fill(0,\
    \ $grades_sum - 1, 'A'),\n              array_fill(0, $grades_sum - 1, 'A+'),\n\
    \              array_fill(0, $grades_sum - 1, 'A-')\n            )\n         \
    \ ),\n          $grades\n        )\n      )\n    );\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects exactly 1 parameter, 8 given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects parameter 1 to be int, string given in\
    \ /tmp/tmpdw4ri11f.php on line 44\n\nWarning: chr() expects parameter 1 to be\
    \ int, string given in /tmp/tmpdw4ri11f.php on line 44\n\nWarning: chr() expects\
    \ parameter 1 to be int, string given in /tmp/tmpdw4ri11f.php on line 44\n\nWarning:\
    \ chr() expects parameter 1 to be int, string given in /tmp/tmpdw4ri11f.php on\
    \ line 44\n\nWarning: chr() expects parameter 1 to be int, string given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects parameter 1 to be int, string given in\
    \ /tmp/tmpdw4ri11f.php on line 44\n\nWarning: chr() expects parameter 1 to be\
    \ int, string given in /tmp/tmpdw4ri11f.php on line 44\n\nWarning: chr() expects\
    \ parameter 1 to be int, string given in /tmp/tmpdw4ri11f.php on line 44\n\nWarning:\
    \ chr() expects parameter 1 to be int, string given in /tmp/tmpdw4ri11f.php on\
    \ line 44\n\nWarning: chr() expects parameter 1 to be int, string given in /tmp/tmpdw4ri11f.php\
    \ on line 44\n\nWarning: chr() expects parameter 1 to be "
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_plus_zero\
    \ = array_map(function($value){\n    $grade = ceil($value / 2);\n    return $grade\
    \ == 0 ? 0 : $grade;\n  }, $grades);\n  $grades_minus_zero = array_map(function($value){\n\
    \    $grade = ceil($value / -2);\n    return $grade == 0 ? 0 : $grade;\n  }, $grades);\n\
    \  $grades_plus_one = array_map(function($value){\n    $grade = ceil($value /\
    \ 2);\n    return $grade == 1 ? 0 : $grade;\n  }, $grades);\n  $grades_minus_one\
    \ = array_map(function($value){\n    $grade = ceil($value / -2);\n    return $grade\
    \ == 1 ? 0 : $grade;\n  }, $grades);\n  $grades_plus_two = array_map(function($value){\n\
    \    $grade = ceil($value / 2);\n    return $grade == 2 ? 0 : $grade;\n  }, $grades);\n\
    \  $grades_minus_two = array_map(function($value){\n    $grade = ceil($value /\
    \ -2);\n    return $grade == 2 ? 0 : $grade;\n  }, $grades);\n  $grades_plus_three\
    \ = array_map(function($value){\n    $grade = ceil($value / 2);\n    return $grade\
    \ == 3 ? 0 : $grade;\n  }, $grades);\n  $grades_minus_three = array_map(function($value){\n\
    \    $grade = ceil($value / -2);\n    return $grade == 3 ? 0 : $grade;\n  }, $grades);\n\
    \  $grades_plus_four = array_map(function($value){\n    $grade = ceil($value /\
    \ 2);\n    return $grade == 4 ? 0 : $grade;\n  }, $grades);\n  $grades_minus_four\
    \ = array_map(function($value){\n    $grade = ceil($value / -2);\n    return $grade\
    \ == 4 ? 0 : $grade;\n  }, $grades);\n  $grades_plus_five = array_map(function($value){\n\
    \    $grade = ceil($value / 2);\n    return $grade == 5 ? 0 : $grade;\n  }, $grades);\n\
    \  $grades_minus_five = array_map(function($value){\n    $grade = ceil($value\
    \ / -2);\n    return $grade == 5 ? 0 : $grade;\n  }, $grades);\n  $grades_plus_six\
    \ = array_map(function($value){\n    $grade = ceil($value / 2);\n    return $grade\
    \ == 6 ? 0 : $grade;\n  }, $grades);\n  $\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpofsp2wcj.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ here\n    $final = [];\n    $grades_sum = array_sum($grades);\n    \n    $grades_gpa\
    \ = array_map(function($gpa){ return $gpa / $grades_sum; }, $grades);\n\n    foreach($grades_gpa\
    \ as $key => $value) {\n        $grade_class = strpos($key, '-') !== false ? 'B'\
    \ : 'C';\n        if($value == 0) {\n            $grade_class .= '+';\n      \
    \  } elseif($value > 0 && $value <= 1) {\n            $grade_class .= '-';\n \
    \       } elseif($value > 1) {\n            $grade_class .= '>';\n        }\n\
    \        \n        $final[$key] = $grade_class;\n    }\n    return $final;\n}\n\
    </code>\n<|/ a tags=php |>\n<| c |>\nHi thanks for the code. But i'm not able\
    \ to understand this part : array_map(function($gpa){ return $gpa / $grades_sum;\
    \ }, $grades);\n<|/ c |>\n<| c |>\nSure thing, just see what's happening inside\
    \ of the `array_map` function. I used a lambda function and a closure to achieve\
    \ the desired result. The code goes through each element of the `$grades` array\
    \ and divides it by the sum of the `$grades` array. This is how the GPA is calculated.\n\
    <|/ c |>\n<| c |>\nI thought you might get some mileage from my explanation but\
    \ I don't think so :/\n<|/ c |>\n<| c |>\nSorry if I'm bothering you. But i didn't\
    \ get your explanation for the line  $grade_class = strpos($key, '-') !== false\
    \ ? 'B' : 'C'; why are we checking for '-'?\n<|/ c |>\n<| c |>\nBecause your function\
    \ returns 'B' or 'C' for each grade. Since 'B' > 'C' this means it is the higher\
    \ grade so it's 'B' for this grade. The `strpos` part is just a little trickery\
    \ to check whether there were a dash in the string. This will basically check\
    \ whether there are dashes in that string. Which is a nice way to check if the\
    \ string is actually a grade or not.\n<|/ c |>\n<| a tags=php |>\nYou can achieve\
    \ the grading by making a function where you pass in an individual grade:\n<code>\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi1ey3skr.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    foreach($grades\
    \ as $key => $grade) {\n        if($grade < 0) {\n            $grades[$key] =\
    \ 0;\n        } elseif($grade > 100) {\n            $grades[$key] = 'A';\n   \
    \     } elseif($grade <= 50) {\n            $grades[$key] = 'A';\n        } elseif($grade\
    \ <= 70) {\n            $grades[$key] = 'B';\n        } elseif($grade <= 89) {\n\
    \            $grades[$key] = 'B';\n        } elseif($grade <= 100) {\n       \
    \     $grades[$key] = 'C';\n        } elseif($grade <= 120) {\n            $grades[$key]\
    \ = 'C';\n        } elseif($grade <= 130) {\n            $grades[$key] = 'D';\n\
    \        } elseif($grade <= 140) {\n            $grades[$key] = 'D';\n       \
    \ } elseif($grade <= 150) {\n            $grades[$key] = 'E';\n        }\n   \
    \ }\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_h4p_iu.php:55\n\
    Stack trace:\n#0 /tmp/tmpr_h4p_iu.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpr_h4p_iu.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Sort the\
    \ grade array from lowest to highest before looping\n    $grades = array_reverse($grades);\n\
    \    $letters = array();\n    foreach ($grades as $key => $value) {\n        //\
    \ Calculate the numerical grade\n        $grade = floor($value/4.0);\n       \
    \ // Add the letter grade\n        $letter = strtoupper(chr($grade+64));\n   \
    \     $letters[] = $letter;\n    }\n    return $letters;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmo_a0ju0.php:41\n\
    Stack trace:\n#0 /tmp/tmpmo_a0ju0.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpmo_a0ju0.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_filter($grades);\n\
    \  $letters = array();\n  $min_grade = min($grades);\n  $max_grade = max($grades);\n\
    \  \n  foreach($grades as $grade) {\n    if ($grade > $max_grade || $grade < $min_grade)\
    \ {\n      array_push($letters, 'E');\n    }\n    elseif($grade >= 5.0) {\n  \
    \    array_push($letters, round( ($grade - $min_grade) * 40 / $max_grade));\n\
    \    }\n    elseif($grade >= 3.0) {\n      array_push($letters, 'A+');\n    }\n\
    \    elseif($grade >= 2.0) {\n      array_push($letters, 'A');\n    }\n    elseif($grade\
    \ >= 1.0) {\n      array_push($letters, 'B+');\n    }\n    elseif($grade >= 0.7)\
    \ {\n      array_push($letters, 'B');\n    }\n    elseif($grade >= 0.4) {\n  \
    \    array_push($letters, 'B-');\n    }\n    elseif($grade >= 0.0) {\n      array_push($letters,\
    \ 'C+');\n    }\n    elseif($grade >= 0.0) {\n      array_push($letters, 'C');\n\
    \    }\n    elseif($grade >= 0.0) {\n      array_push($letters, 'C-');\n    }\n\
    \    elseif($grade >= 0.0) {\n      array_push($letters, 'D+');\n    }\n    else\
    \ {\n      array_push($letters, 'D');\n    }\n  }\n  return $letters;\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zxojri_.php:74\n\
    Stack trace:\n#0 /tmp/tmp5zxojri_.php(82): test()\n#1 {main}\n  thrown in /tmp/tmp5zxojri_.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_to_char\
    \ = ['A+', 'B', 'C-', 'C', 'A-'];\n  foreach ($grades as $key => $grade) {\n \
    \   if ($grade == 0) {\n      unset($grades[$key]);\n    }\n  }\n  return $grades_to_char;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi11qn0sz.php:39\n\
    Stack trace:\n#0 /tmp/tmpi11qn0sz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpi11qn0sz.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades = array_map(function($a)\
    \ { return $a * 100; }, $grades);\n\t$min_grade = min(array_map('floor', $grades));\n\
    \t$max_grade = max(array_map('ceil', $grades));\n\t$letter_grades = [];\n\tforeach\
    \ ($grades as $grade) {\n\t\tif ($grade >= $min_grade && $grade <= $max_grade)\
    \ {\n\t\t\t$letter_grades[] = '%+d%%';\n\t\t} elseif ($grade >= $min_grade &&\
    \ $grade <= $max_grade + 0.3) {\n\t\t\t$letter_grades[] = '%+d%%';\n\t\t} elseif\
    \ ($grade >= $min_grade + 0.3 && $grade <= $max_grade + 0.7) {\n\t\t\t$letter_grades[]\
    \ = '%+d%%';\n\t\t} elseif ($grade >= $min_grade + 0.7 && $grade <= $max_grade\
    \ + 0.9) {\n\t\t\t$letter_grades[] = '%+d%%';\n\t\t} elseif ($grade >= $min_grade\
    \ + 0.9 && $grade <= $max_grade + 0.99) {\n\t\t\t$letter_grades[] = '%+d%%';\n\
    \t\t} elseif ($grade >= $min_grade + 0.99 && $grade <= $max_grade) {\n\t\t\t$letter_grades[]\
    \ = '%+d%%';\n\t\t} else {\n\t\t\t$letter_grades[] = '%d%%';\n\t\t}\n\t}\n\treturn\
    \ $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgic8iz80.php:53\n\
    Stack trace:\n#0 /tmp/tmpgic8iz80.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpgic8iz80.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Implement\
    \ the grade equation here\n    $GPAs = array(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7);\n    $letter_grades = array();\n    foreach ($grades as\
    \ $grade) {\n        $letter_grades[] = array_search($grade, $GPAs) . '+';\n \
    \   }\n    return $letter_grades;\n}\n</code>\n<|/ a tags=arrays,php dscore=0\
    \ |>\n<| c |>\nThank you for your help. This has given me a really big push in\
    \ the right direction.\n<|/ c |>\n<| c |>\nIf this has helped you, please mark\
    \ it as the accepted answer.\n<|/ c |>\n<| a dscore=0 tags=arrays,php |>\nOk,\
    \ let's start with some code that will do what you want. First we must define\
    \ a variable that will hold the letter grade for each number. \n<code>\n$letter_grade\
    \ = array('A+','A-','B+','B-','C+','C-','D+','D-','F');\n</code>\nNext we can\
    \ write a function for finding which letter grade is associated with a number.\
    \ \n<code>\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoj9fsr9f.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  // Grade is\
    \ a string, not a float.\n  return \"[\".implode(\",\", array_map(\"gpa_to_letter\"\
    , $grades)).\"]\";\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map() expects parameter 1 to be a valid callback, function\
    \ 'gpa_to_letter' not found or invalid function name in /tmp/tmpm8nonuq4.php on\
    \ line 25\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpm8nonuq4.php\
    \ on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8nonuq4.php:32\n\
    Stack trace:\n#0 /tmp/tmpm8nonuq4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpm8nonuq4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_str\
    \ = implode(\",\", $grades);\n  return [\n    \"A+\",\n    \"A\",\n    \"A-\"\
    ,\n    \"B+\",\n    \"B\",\n    \"B-\",\n    \"C+\",\n    \"C\",\n    \"C-\",\n\
    \    \"D+\",\n    \"D\",\n    \"D-\",\n    \"E\"\n  ]\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpofodxpz6.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$lettergrades\
    \ = array('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-',\
    \ 'E');\n\treturn array_map(function($grade) use ($lettergrades) {\n\t\tforeach\
    \ ($lettergrades as $lettergrade => $grades) {\n\t\t\tif ($grade >= $grades) {\n\
    \t\t\t\treturn $lettergrade;\n\t\t\t}\n\t\t}\n\t\treturn 'E';\n\t}, $grades);\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaczrj0u7.php:40\n\
    Stack trace:\n#0 /tmp/tmpaczrj0u7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpaczrj0u7.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $gpas_as_string\
    \ = $grades . '.';\n    $gpas_as_string = explode('.', $gpas_as_string);\n   \
    \ $result = array();\n    $result[0] = \"D+\";\n    $result[1] = \"D\";\n    $result[2]\
    \ = \"C-\";\n    $result[3] = \"C\";\n    $result[4] = \"B-\";\n    $result[5]\
    \ = \"B\";\n    $result[6] = \"A-\";\n    $result[7] = \"A\";\n    $result[8]\
    \ = \"A-\";\n    $result[9] = \"A\";\n    $result[10] = \"A-\";\n    $result[11]\
    \ = \"A\";\n    $result[12] = \"A-\";\n    $result[13] = \"A\";\n    $result[14]\
    \ = \"A-\";\n    $result[15] = \"A\";\n    $result[16] = \"D-\";\n    $result[17]\
    \ = \"D\";\n    $result[18] = \"C-\";\n    $result[19] = \"C\";\n    $result[20]\
    \ = \"B-\";\n    $result[20] = \"B\";\n    $result[21] = \"A-\";\n    $result[22]\
    \ = \"A\";\n    $result[23] = \"A-\";\n    $result[24] = \"A\";\n    $result[25]\
    \ = \"A-\";\n    $result[26] = \"A\";\n    $result[27] = \"A-\";\n    $result[28]\
    \ = \"A\";\n    $result[29] = \"D-\";\n    $result[30] = \"D\";\n    $result[31]\
    \ = \"C-\";\n    $result[32] = \"C\";\n    $result[33] = \"B-\";\n    $result[33]\
    \ = \"B\";\n    $result[34] = \"A-\";\n    $result[35] = \"A\";\n    $result[36]\
    \ = \"A-\";\n    $result[37] = \"A\";\n    $result[38] = \"A-\";\n    $result[39]\
    \ = \"A\";\n    $result[40] = \"D-\";\n    $result[41] = \"D\";\n    $result[42]\
    \ = \"C-\";\n    $result[42] = \"C\";\n    $result[43] = \"B-\";\n    $result[43]\
    \ = \"B\";\n    $result[44] = \"A-\";\n    $result[45] = \"A\";\n    $result[46]\
    \ = \"A-\";\n    $result[47] = \"A\";\n    $result[48] = \"A-\";\n    $result[49]\
    \ = \"A\";\n    $result[50] = \"D-\";\n    $result[51] = \"D\";\n    $result[52]\
    \ = \"C-\";\n    $result[52] = \"C\";\n    $result[53] = \"B-\";\n    $result[53]\
    \ = \"B\";\n    $result[54] = \"A-\";\n    $result[55] = \"A\";\n    $result[56]\
    \ = \"A-\";\n    $result[57] = \"A\";\n    $result[58] = \"A-\";\n    $result[59]\
    \ = \"A\";\n    $result[60] = \"D\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd33efmnj.php on line 99\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    \n    foreach\
    \ ($grades as $key => $value) {\n        $grades[$key] = floatval($value);\n \
    \   }\n    \n    $total_sum = array_sum($grades);\n    $average = round($total_sum\
    \ / count($grades), 0);\n    \n    if ($average >= 4.0 && $average <= 5.9) {\n\
    \        $letter = 'A+';\n    } else if ($average >= 6.0 && $average <= 8.9) {\n\
    \        $letter = 'A';\n    } else if ($average >= 9.0 && $average <= 11.9) {\n\
    \        $letter = 'A-';\n    } else if ($average >= 12.0 && $average <= 14.9)\
    \ {\n        $letter = 'B+';\n    } else if ($average >= 15.0 && $average <= 17.9)\
    \ {\n        $letter = 'B';\n    } else if ($average >= 18.0 && $average <= 20.9)\
    \ {\n        $letter = 'B-';\n    } else if ($average >= 21.0 && $average <= 23.9)\
    \ {\n        $letter = 'C+';\n    } else if ($average >= 24.0 && $average <= 27.9)\
    \ {\n        $letter = 'C';\n    } else if ($average >= 28.0 && $average <= 30.9)\
    \ {\n        $letter = 'C-';\n    } else if ($average >= 31.0 && $average <= 33.9)\
    \ {\n        $letter = 'D+';\n    } else if ($average >= 34.0 && $average <= 37.9)\
    \ {\n        $letter = 'D';\n    } else if ($average >= 38.0 && $average <= 40.9)\
    \ {\n        $letter = 'D-';\n    } else if ($average >= 41.0 && $average <= 44.9)\
    \ {\n        $letter = 'E';\n    }\n    \n    return $letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ufxvq3p.php:68\n\
    Stack trace:\n#0 /tmp/tmp7ufxvq3p.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp7ufxvq3p.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_filter($grades);\n    $grades = array_map(function($item){\n        return\
    \ $item > 0 ? '+'.$item : $item;\n    }, $grades);\n    $grades = array_map(function($item){\n\
    \        return $item < 0 ? '-'.$item : $item;\n    }, $grades);\n    $grades\
    \ = array_map(function($item){\n        return $item < 0 ? '-'.abs($item) : $item;\n\
    \    }, $grades);\n    $grades = array_map(function($item){\n        return $item\
    \ < 0 ? '-'.floor($item) : $item;\n    }, $grades);\n    return $grades;\n}\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeiq3c4jp.php:44\n\
    Stack trace:\n#0 /tmp/tmpeiq3c4jp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpeiq3c4jp.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($item) { return sprintf(\"%.2f\", $item); }, $grades);\n\
    \    $grades_array = array(\n        'A+' => 4.0, 'A' => 3.7, 'A-' => 3.3, 'B+'\
    \ => 2.7, 'B' => 2.3, 'B-' => 2.0,\n        'C+' => 1.7, 'C' => 1.3, 'C-' => 1.0,\
    \ 'D+' => 0.7, 'D' => 0.0, 'D-' => 0.7,\n        'E' => 0.0,\n    );\n    $grades_array['D-']\
    \ = $grades_array['D-'] + ($grades_array['D-'] > $grades_array['B'] ? $grades_array['D+']\
    \ : $grades_array['D']);\n    $grades_array['C-'] = $grades_array['C-'] + ($grades_array['C-']\
    \ > $grades_array['B'] ? $grades_array['C+'] : $grades_array['C']);\n    $grades_array['B-']\
    \ = $grades_array['B-'] + ($grades_array['B-'] > $grades_array['B'] ? $grades_array['B+']\
    \ : $grades_array['B']);\n    $grades_array['A-'] = $grades_array['A-'] + ($grades_array['A-']\
    \ > $grades_array['B'] ? $grades_array['A+'] : $grades_array['A']);\n    $grades_array['B-']\
    \ = $grades_array['B-'] + ($grades_array['B-'] > $grades_array['B'] ? $grades_array['B+']\
    \ : $grades_array['B']);\n    $grades_array['C-'] = $grades_array['C-'] + ($grades_array['C-']\
    \ > $grades_array['B'] ? $grades_array['C+'] : $grades_array['C']);\n    $grades_array['A-']\
    \ = $grades_array['A-'] + ($grades_array['A-'] > $grades_array['B'] ? $grades_array['A+']\
    \ : $grades_array['A']);\n    $grades_array['A-'] = $grades_array['A-'] + ($grades_array['A-']\
    \ > $grades_array['B'] ? $grades_array['A+'] : $grades_array['A']);\n    $grades_array['A-']\
    \ = $grades_array['A-'] + ($grades_array['A-'] > $grades_array['B'] ? $grades_array['A+']\
    \ : $grades_\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_bhjujvg.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades    \
    \ = explode(', ', $grades);\n  $letter_grades = array();\n  foreach ($grades as\
    \ $grade) {\n    $letter_grades[] = array_filter(\n      array_map(\n        function($n)\
    \ { return (100 * $n) / (count($grades) - 1);},\n        array_fill(0, count($grades),\
    \ $grade)\n      )\n    );\n  }\n  return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmp8krskdev.php\
    \ on line 24\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp8krskdev.php\
    \ on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8krskdev.php:42\n\
    Stack trace:\n#0 /tmp/tmp8krskdev.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp8krskdev.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $gpa_max =\
    \ max($grades);\n    $gpa_min = min($grades);\n    $gpa_bias = floor(($gpa_max\
    \ - $gpa_min) / 2.0);\n    $gpa_mean = array_sum($grades) / count($grades);\n\
    \    $letter_grades = array();\n    $letter_grades[] = ($gpa_bias > 0)? 'A+' .chr(64\
    \ + floor(($gpa_bias - $gpa_mean) / 2)) : 'A';\n    $letter_grades[] = ($gpa_bias\
    \ > 0 && $gpa_bias < 3)? 'A- '.chr(64 + floor(($gpa_bias - $gpa_mean) / 2)) :\
    \ 'A-';\n    $letter_grades[] = ($gpa_bias > 3)? 'B+' .chr(64 + floor(($gpa_bias\
    \ - $gpa_mean) / 2)) : 'B';\n    $letter_grades[] = ($gpa_bias > 3 && $gpa_bias\
    \ < 5)? 'B- '.chr(64 + floor(($gpa_bias - $gpa_mean) / 2)) : 'B-';\n    $letter_grades[]\
    \ = ($gpa_bias > 5)? 'C+' .chr(64 + floor(($gpa_bias - $gpa_mean) / 2)) : 'C';\n\
    \    $letter_grades[] = ($gpa_bias > 5 && $gpa_bias < 7)? 'C- '.chr(64 + floor(($gpa_bias\
    \ - $gpa_mean) / 2)) : 'C-';\n    $letter_grades[] = ($gpa_bias > 7)? 'D+' .chr(64\
    \ + floor(($gpa_bias - $gpa_mean) / 2)) : 'D';\n    $letter_grades[] = ($gpa_bias\
    \ > 7 && $gpa_bias < 9)? 'D- '.chr(64 + floor(($gpa_bias - $gpa_mean) / 2)) :\
    \ 'D-';\n    $letter_grades[] = ($gpa_bias > 9)? 'E' .chr(64 + floor(($gpa_bias\
    \ - $gpa_mean) / 2)) : 'D';\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizgq7h93.php:45\n\
    Stack trace:\n#0 /tmp/tmpizgq7h93.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpizgq7h93.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    // We start off by checking the first grade, which should always\
    \ be positive.\n    // If it's higher than 3.5, it will always be lower than 2.7.\n\
    \    // If it's above 2.7, it will always be lower than 3.0.\n    // If it's between\
    \ 3.0 and 3.5, it will be lower than 3.5.\n    // If it's between 3.3 and 3.7,\
    \ it will be lower than 4.0.\n    // If it's above 4.0, it will be lower than\
    \ 4.5.\n    // If it's between 4.0 and 4.5, it will be lower than 5.0.\n    //\
    \ If it's above 5.0, it will be lower than 5.5.\n    // If it's between 5.0 and\
    \ 5.5, it will be lower than 6.0.\n    // If it's higher than 6.0, it's going\
    \ to be lower than 6.5.\n    // In any case, we can now assume that the grades\
    \ are valid.\n    // If the first grade is lower than 2.7, we assume it's a C\n\
    \    if ($grades[0] < 2.7) {\n        $letter_grades[] = 'C';\n    } else {\n\
    \        $letter_grades[] = 'D+';\n    }\n    $letter_grades[] = 'D';\n    $letter_grades[]\
    \ = 'D-';\n    $letter_grades[] = 'E';\n    // If the first grade is greater than\
    \ 2.7, we assume it's a A+\n    if ($grades[0] > 2.7) {\n        $letter_grades[]\
    \ = 'A+';\n    } else {\n        // If the first grade is between 2.7 and 3.0,\
    \ we assume it's a A\n        if ($grades[0] > 2.7) {\n            $letter_grades[]\
    \ = 'A';\n        } else {\n            // If the first grade is between 3.0 and\
    \ 3.5, we assume it's a B+\n            if ($grades[0] > 2.7) {\n            \
    \    $letter_grades[] = 'B+';\n            } else {\n                // If the\
    \ first grade is between 3.3 and 3.7, we assume it's a B\n                if ($grades[0]\
    \ > 2.7) {\n                    $letter_grades[] = 'B';\n                } else\
    \ {\n                    // If the first grade is between 3.7 and 4.0, we assume\
    \ it's a C+\n                    if ($grades[0] > 2.7) {\n                   \
    \     $letter_grades[] = 'C+';\n                    } else {\n               \
    \         // If the first grade is between 4.0 and 4.5, we assume it's a C\n \
    \                       if ($grades[0] > 2.7) {\n                            $letter_grades[]\
    \ = 'C';\n                        } else {\n                            // If\
    \ the first grade is between 4.5 and 5.0, we assume it's a D+\n              \
    \              if ($grades[0] > 2.7) {\n                                $letter_grades[]\
    \ = 'D+';\n                            } else {\n                            \
    \    // If the first grade is between 5.0 and 5.5, we assume it's a D\n      \
    \                          if ($grades[0] > 2.7) {\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfhv849f3.php on line 88\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = array_map(function($grade) {\n        return $grade * 100;\n    }, $grades);\n\
    \    $result = array_reduce($grades_array, 'array_sum', '');\n    list($numerical,\
    \ $letter_grade) = explode('.', $result);\n    return $letter_grade;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects exactly 1 parameter, 2 given in /tmp/tmpqrzwlhvl.php\
    \ on line 27\n\nWarning: array_sum() expects exactly 1 parameter, 2 given in /tmp/tmpqrzwlhvl.php\
    \ on line 27\n\nWarning: array_sum() expects exactly 1 parameter, 2 given in /tmp/tmpqrzwlhvl.php\
    \ on line 27\n\nWarning: array_sum() expects exactly 1 parameter, 2 given in /tmp/tmpqrzwlhvl.php\
    \ on line 27\n\nWarning: array_sum() expects exactly 1 parameter, 2 given in /tmp/tmpqrzwlhvl.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrzwlhvl.php:37\n\
    Stack trace:\n#0 /tmp/tmpqrzwlhvl.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqrzwlhvl.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $gpa = $grades[0];\n\
    \  $grades_arr = array();\n  if ($gpa >= 3.0) {\n    array_push($grades_arr, 'A+');\n\
    \  } elseif ($gpa >= 3.3) {\n    array_push($grades_arr, 'A');\n  } elseif ($gpa\
    \ >= 3.7) {\n    array_push($grades_arr, 'A-');\n  } elseif ($gpa >= 4.0) {\n\
    \    array_push($grades_arr, 'B+');\n  } elseif ($gpa >= 4.3) {\n    array_push($grades_arr,\
    \ 'B');\n  } elseif ($gpa >= 4.7) {\n    array_push($grades_arr, 'B-');\n  } elseif\
    \ ($gpa >= 5.0) {\n    array_push($grades_arr, 'C+');\n  } elseif ($gpa >= 5.3)\
    \ {\n    array_push($grades_arr, 'C');\n  } elseif ($gpa >= 5.7) {\n    array_push($grades_arr,\
    \ 'C-');\n  } elseif ($gpa >= 6.0) {\n    array_push($grades_arr, 'D+');\n  }\
    \ elseif ($gpa >= 6.3) {\n    array_push($grades_arr, 'D');\n  } elseif ($gpa\
    \ >= 6.7) {\n    array_push($grades_arr, 'D-');\n  } else {\n    array_push($grades_arr,\
    \ 'E');\n  }\n  return $grades_arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0h1ms3j8.php:61\n\
    Stack trace:\n#0 /tmp/tmp0h1ms3j8.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp0h1ms3j8.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ array();\n\n    $grades_remaining = count($grades) - 1;\n    $next_grade = array_shift($grades);\n\
    \    $last_grade = end($grades);\n\n    if ($last_grade >= 4.0) {\n        $letters[]\
    \ = \"A+\";\n    } else {\n        if ($last_grade >= 3.7) {\n            $letters[]\
    \ = \"A\";\n        } else {\n            if ($last_grade >= 3.3) {\n        \
    \        $letters[] = \"A-\";\n            } else {\n                if ($last_grade\
    \ >= 3.0) {\n                    $letters[] = \"B+\";\n                } else\
    \ {\n                    if ($last_grade >= 2.7) {\n                        $letters[]\
    \ = \"B\";\n                    } else {\n                        if ($last_grade\
    \ >= 2.3) {\n                            $letters[] = \"B-\";\n              \
    \          } else {\n                            if ($last_grade >= 2.0) {\n \
    \                               $letters[] = \"C+\";\n                       \
    \     } else {\n                                if ($last_grade >= 1.7) {\n  \
    \                                  $letters[] = \"C\";\n                     \
    \           } else {\n                                    if ($last_grade >= 1.3)\
    \ {\n                                        $letters[] = \"C-\";\n          \
    \                          } else {\n                                        if\
    \ ($last_grade >= 1.0) {\n                                            $letters[]\
    \ = \"D+\";\n                                        } else {\n              \
    \                              if ($last_grade >= 0.7) {\n                   \
    \                             $letters[] = \"D\";\n                          \
    \                  } else {\n                                                if\
    \ ($last_grade == 0) {\n                                                    $letters[]\
    \ = \"D-\";\n                                                } else {\n      \
    \                                              $letters[] = \"E\";\n         \
    \                                       }\n                                  \
    \          }\n                                        }\n                    \
    \                }\n                                }\n                      \
    \      }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n\n    $letters_remaining = count($letters) -\
    \ 1;\n\n    while ($grades_remaining > 0 && $letters_remaining > 0) {\n      \
    \  $new_letters = $letters[$letters_remaining];\n        $grades_remaining -=\
    \ 1;\n\n        if ($grades_remaining <= 0) {\n            break;\n        }\n\
    \n        $next_grade = array_shift($grades);\n        $last_grade = end($grades);\n\
    \n        if ($last_grade >= 4.0) {\n            $new_letters .= \"A+\";\n   \
    \     } else {\n            if ($last_grade >= 3.7) {\n                $new_letters\
    \ .= \"A\";\n            } else {\n                if ($last_grade >= 3.3) {\n\
    \                    $new_letters .= \"A-\";\n                } else {\n     \
    \               if ($last_grade >= 3.0) {\n                        $new_letters\
    \ .= \"B+\";\n                    } else {\n                        if ($last_grade\
    \ >= 2.7) {\n                            $new_letters .= \"B\";\n            \
    \            } else {\n                            if ($last_grade >= 2.3) {\n\
    \                                \nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppbmz6_99.php on line 123\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_map(\n\
    \        function($grade) {\n            if ($grade >= 4.0  && $grade <= 3.7)\
    \ {\n                return 'A+';\n            } elseif ($grade > 3.7 && $grade\
    \ <= 3.3) {\n                return 'A';\n            } elseif ($grade > 3.3 &&\
    \ $grade <= 3) {\n                return 'A-';\n            } elseif ($grade >\
    \ 3.0 && $grade <= 2.7) {\n                return 'B+';\n            } elseif\
    \ ($grade > 2.7 && $grade <= 2.3) {\n                return 'B';\n           \
    \ } elseif ($grade > 2.3 && $grade <= 2) {\n                return 'B-';\n   \
    \         } elseif ($grade > 2.0 && $grade <= 1.7) {\n                return 'C+';\n\
    \            } elseif ($grade > 1.7 && $grade <= 1.3) {\n                return\
    \ 'C';\n            } elseif ($grade > 1.3 && $grade <= 1) {\n               \
    \ return 'C-';\n            } elseif ($grade > 1.0 && $grade <= 0.7) {\n     \
    \           return 'D+';\n            } elseif ($grade > 0.7 && $grade <= 0) {\n\
    \                return 'D';\n            } else {\n                return 'D-';\n\
    \            }\n        },\n        $grades\n    );\n}\n</code>\nYou can find\
    \ the full code here: https://gist.github.com/JonathanMcKay/b7d9becec8b4cbd40c6c\n\
    <|/ a dscore=5 |>\n<| c |>\nThanks, this is brilliant\n<|/ c |>\n<| a |>\nI wanted\
    \ to know more about a solution that used the Swedish Letters and didn't use a\
    \ switch case.  I found the code below and found this interesting because it worked\
    \ perfectly for my language but I wanted to see if there was a way to clean it\
    \ up.  I also wanted to make sure people saw that it wasn't really the best solution,\
    \ just wanted to see another way that I thought of. \nThe code is commented below,\
    \ I'm still trying to figure out how to get it to use the Swedish letters and\
    \ how to get it to be more robust and readable in other languages.\n<code>\npublic\
    \ function letter_grade($score)\n{\n    // Check to see if the score is set\n\
    \    if (empty($score))\n        return null;\n\n    // Swedish Letters\n    $swedishLetters\
    \ = array(\n        \"A+\" => \"A\",\n        \"A\" => \"A\",\n        \"A-\"\
    \ => \"A-\",\n        \"B+\" => \"B\",\n        \"B\" => \"B\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg_6byzz5.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if (empty($grades))\
    \ {\n        echo \"No grades given. Aborting\";\n        return false;\n    }\n\
    \n    foreach ($grades as $grade) {\n        if ($grade > 3.7) {\n           \
    \ $grade = $grade - 0.5;\n            $grade = round($grade, 1);\n           \
    \ $grade = \"+\".$grade;\n        } elseif ($grade > 3.3) {\n            $grade\
    \ = $grade - 0.5;\n            $grade = round($grade, 1);\n            $grade\
    \ = \"-\".$grade;\n        } elseif ($grade > 2.7) {\n            $grade = $grade\
    \ - 0.5;\n            $grade = round($grade, 1);\n            $grade = \"+\".$grade;\n\
    \        } elseif ($grade > 2.3) {\n            $grade = $grade - 0.5;\n     \
    \       $grade = round($grade, 1);\n            $grade = \"-\".$grade;\n     \
    \   } elseif ($grade > 1.7) {\n            $grade = $grade - 0.5;\n          \
    \  $grade = round($grade, 1);\n            $grade = \"+\".$grade;\n        } elseif\
    \ ($grade > 1.3) {\n            $grade = $grade - 0.5;\n            $grade = round($grade,\
    \ 1);\n            $grade = \"-\".$grade;\n        } elseif ($grade > 1.0) {\n\
    \            $grade = $grade - 0.5;\n            $grade = round($grade, 1);\n\
    \            $grade = \"+\".$grade;\n        } elseif ($grade > 0.7) {\n     \
    \       $grade = $grade - 0.5;\n            $grade = round($grade, 1);\n     \
    \       $grade = \"+\".$grade;\n        } else {\n            $grade = $grade\
    \ - 0.5;\n            $grade = round($grade, 1);\n            $grade = \"-\".$grade;\n\
    \        }\n    }\n\n    return $grade;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp522o6grz.php:77\n\
    Stack trace:\n#0 /tmp/tmp522o6grz.php(85): test()\n#1 {main}\n  thrown in /tmp/tmp522o6grz.php\
    \ on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_arr\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade < 4.0) {\n\
    \            $grades_arr[] = 'A+';\n        } elseif ($grade > 3.7) {\n      \
    \      $grades_arr[] = 'A';\n        } elseif ($grade > 3.3) {\n            $grades_arr[]\
    \ = 'A-';\n        } elseif ($grade > 3) {\n            $grades_arr[] = 'B+';\n\
    \        } elseif ($grade > 2.7) {\n            $grades_arr[] = 'B';\n       \
    \ } elseif ($grade > 2.3) {\n            $grades_arr[] = 'B-';\n        } elseif\
    \ ($grade > 2) {\n            $grades_arr[] = 'C+';\n        } elseif ($grade\
    \ > 1.7) {\n            $grades_arr[] = 'C';\n        } elseif ($grade > 1.3)\
    \ {\n            $grades_arr[] = 'C-';\n        } elseif ($grade > 1) {\n    \
    \        $grades_arr[] = 'D+';\n        } elseif ($grade > 0.7) {\n          \
    \  $grades_arr[] = 'D';\n        } elseif ($grade > 0) {\n            $grades_arr[]\
    \ = 'D-';\n        } else {\n            $grades_arr[] = 'E';\n        }\n   \
    \ }\n\n    return $grades_arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fyoxb9p.php:63\n\
    Stack trace:\n#0 /tmp/tmp8fyoxb9p.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp8fyoxb9p.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // your code\
    \ here\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nHow does this help?\n<|/ c |>\n\
    <| c |>\nThis doesn't answer the question.\n<|/ c |>\n<| c |>\nWell I think it\
    \ helps you to understand the question. The OP needs to write her own algorithm\
    \ in PHP and he needs to know what algorithm she uses for grading. Since we don't\
    \ know that, I gave him an explanation how she can create such an algorithm that\
    \ outputs her own grade letters.\n<|/ c |>\n<| c |>\nThis code doesn't work if\
    \ there are numbers in the input that are less than 0 or greater than 6.\n<|/\
    \ c |>\n<| c |>\nThe OP mentioned that the code was provided by the teacher. He\
    \ should know that there are more rules for grading like `A - 4.5` or `B+ 3.5`.\
    \ And he is right that it doesn't work when there are numbers in the input that\
    \ are not between 0 and 6. That's the reason why I suggested a solution like this.\
    \ But it works fine for numbers between 0 and 6.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nHere is another solution based on a recursive algorithm and a test case\
    \ with two students.\nThe algorithm starts with one grade and works backwards\
    \ through the array, until it finds the correct answer, which is always the last\
    \ value.\nCode: (Demo)\n<code>\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgt7j971g.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $gpas = explode(',',\
    \ $grades);\n  $lettergrades = array();\n  foreach ($gpas as $gpa) {\n    if ($gpa\
    \ < 3.0) {\n      $lettergrades[] = 'A+';\n    } else if ($gpa >= 3.0 && $gpa\
    \ < 3.7) {\n      $lettergrades[] = 'A';\n    } else if ($gpa >= 3.7 && $gpa <\
    \ 4.0) {\n      $lettergrades[] = 'A-';\n    } else if ($gpa >= 4.0 && $gpa <\
    \ 4.7) {\n      $lettergrades[] = 'B+';\n    } else if ($gpa >= 4.7 && $gpa <\
    \ 5.0) {\n      $lettergrades[] = 'B';\n    } else if ($gpa >= 5.0 && $gpa < 5.7)\
    \ {\n      $lettergrades[] = 'B-';\n    } else if ($gpa >= 5.7 && $gpa < 6.0)\
    \ {\n      $lettergrades[] = 'C+';\n    } else if ($gpa >= 6.0 && $gpa < 6.7)\
    \ {\n      $lettergrades[] = 'C';\n    } else if ($gpa >= 6.7 && $gpa < 7.0) {\n\
    \      $lettergrades[] = 'C-';\n    } else if ($gpa >= 7.0 && $gpa < 7.7) {\n\
    \      $lettergrades[] = 'D+';\n    } else if ($gpa >= 7.7 && $gpa < 8.0) {\n\
    \      $lettergrades[] = 'D';\n    } else if ($gpa >= 8.0 && $gpa < 8.7) {\n \
    \     $lettergrades[] = 'D-';\n    } else if ($gpa >= 8.7 && $gpa < 9.0) {\n \
    \     $lettergrades[] = 'E';\n    } else if ($gpa >= 9.0) {\n      $lettergrades[]\
    \ = 'E';\n    }\n  }\n  return $lettergrades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmp05zrvvgv.php\
    \ on line 24\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp05zrvvgv.php\
    \ on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05zrvvgv.php:65\n\
    Stack trace:\n#0 /tmp/tmp05zrvvgv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp05zrvvgv.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_array\
    \ = explode(\",\", $grades);\n  $grades_array = array_map(\"floatval\", $grades_array);\n\
    \  sort($grades_array);\n  \n  $total_marks = array_sum($grades_array);\n  $total_marks\
    \ = round($total_marks);\n  \n  if ($total_marks >= 4.0) {\n    return \"A+\"\
    ;\n  } elseif ($total_marks >= 3.7) {\n    return \"A\";\n  } elseif ($total_marks\
    \ >= 3.3) {\n    return \"A-\";\n  } elseif ($total_marks >= 3.0) {\n    return\
    \ \"B+\";\n  } elseif ($total_marks >= 2.7) {\n    return \"B\";\n  } elseif ($total_marks\
    \ >= 2.3) {\n    return \"B-\";\n  } elseif ($total_marks >= 2.0) {\n    return\
    \ \"C+\";\n  } elseif ($total_marks >= 1.7) {\n    return \"C\";\n  } elseif ($total_marks\
    \ >= 1.3) {\n    return \"C-\";\n  } elseif ($total_marks >= 1.0) {\n    return\
    \ \"D+\";\n  } elseif ($total_marks >= 0.7) {\n    return \"D\";\n  } elseif ($total_marks\
    \ >= 0.0) {\n    return \"D-\";\n  } else {\n    return \"E\";\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmphk629_s0.php\
    \ on line 24\n\nWarning: array_map(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmphk629_s0.php on line 25\n\nWarning: sort() expects parameter\
    \ 1 to be array, null given in /tmp/tmphk629_s0.php on line 26\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmphk629_s0.php on line\
    \ 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphk629_s0.php:64\n\
    Stack trace:\n#0 /tmp/tmphk629_s0.php(72): test()\n#1 {main}\n  thrown in /tmp/tmphk629_s0.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_values($grades);\n    return array_map(function($grade) {\n        if\
    \ ($grade >= 3.0)\n            return '+';\n        elseif ($grade < 3.0)\n  \
    \          return '-';\n        else\n            return 'F';\n    }, $grades);\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nyc5l9q.php:40\n\
    Stack trace:\n#0 /tmp/tmp7nyc5l9q.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7nyc5l9q.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here\n}\n</code>\nI wrote this function, but I doubt it will do what you\
    \ want. Try it out and let me know what you think.\n<|/ a tags=php,arrays,algorithm,sorting\
    \ |>\n<| c |>\nI updated my answer to reflect your updated question :) Hope it\
    \ helps!\n<|/ c |>\n<| a dscore=0 |>\nThis question was asked and answered in\
    \ the book Algorithm Design Manual: A Comprehensive Approach by Thomas H. Cormen,\
    \ Charles E. Leiserson, Ronald L. Rivest, Clifford Stein and Robert Sedgewick\
    \ (Addison Wesley) and published in The Art of Computer Programming, by Donald\
    \ Knuth. \nThere may be a more efficient way to do this, especially if you have\
    \ many grades to sort, but my implementation below is a bit more verbose. \nThe\
    \ implementation is very basic: it loops through the grades and puts the highest\
    \ and lowest grades in an array. After sorting the grades, it then loops through\
    \ the sorted grades and checks whether the grade is greater than or less than\
    \ the current highest/lowest grade. \n<code>\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcr67nvfq.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // The first\
    \ part of this function will calculate the letter grade.\n    // The second part\
    \ will convert GPA to letter grade.\n    // The third part will return the final\
    \ result.\n    // You can reuse the above functions if you like.\n}\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfpffjjq.php:34\n\
    Stack trace:\n#0 /tmp/tmpzfpffjjq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzfpffjjq.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ goes here\n    $result = [];\n    foreach ($grades as $key => $value) {\n  \
    \      $result[$key] = '';\n        $result[$key] = $grades[$key] >= 4 ? 'A+'\
    \ : ($grades[$key] >= 3.7 ? 'A' : ($grades[$key] >= 3.3 ? 'A-' : ($grades[$key]\
    \ >= 3 ? 'B+' : ($grades[$key] >= 2.7 ? 'B' : ($grades[$key] >= 2.3 ? 'B-' : ($grades[$key]\
    \ >= 2 ? 'C+' : ($grades[$key] >= 1.7 ? 'C' : ($grades[$key] >= 1.3 ? 'C-' : ($grades[$key]\
    \ >= 1 ? 'D+' : ($grades[$key] >= 0.7 ? 'D' : ($grades[$key] >= 0 ? 'D-' : 'E'))))))))))));\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6cud0_z6.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\tglobal $lettergrade_table;\n\
    \t\n\t$grades = array_map(null, $grades, $lettergrade_table);\n\t\n\treturn array_combine($grades,\
    \ $lettergrade_table);\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map(): Expected parameter 3 to be an array, null given\
    \ in /tmp/tmpqnmk6o22.php on line 26\n\nWarning: array_combine() expects parameter\
    \ 1 to be array, null given in /tmp/tmpqnmk6o22.php on line 28\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqnmk6o22.php:36\nStack trace:\n\
    #0 /tmp/tmpqnmk6o22.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqnmk6o22.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  // Your code\
    \ here\n  $a=0;\n  $b=0;\n  $c=0;\n  $d=0;\n  $e=0;\n  for($i=0;$i<count($grades);$i++){\n\
    \    if($grades[$i]<3.7){\n      $a++;\n    }else if($grades[$i]>3.7 && $grades[$i]<3.3){\n\
    \      $b++;\n    }else if($grades[$i]>3.3 && $grades[$i]<3.0){\n      $c++;\n\
    \    }else if($grades[$i]>3.0 && $grades[$i]<2.7){\n      $d++;\n    }else if($grades[$i]>2.7\
    \ && $grades[$i]<2.3){\n      $e++;\n    }else{\n      $e++;\n    }\n  }\n  if($a>$b){\n\
    \    return 'A+';\n  }\n  if($b>$c){\n    return 'A';\n  }\n  if($b>$c){\n   \
    \ return 'A';\n  }\n  if($b>$c){\n    return 'B';\n  }\n  if($b>$c){\n    return\
    \ 'B';\n  }\n  if($b>$c){\n    return 'B';\n  }\n  if($b>$c){\n    return 'C';\n\
    \  }\n  if($b>$c){\n    return 'C';\n  }\n  if($b>$c){\n    return 'C';\n  }\n\
    \  if($b>$c){\n    return 'C';\n  }\n  if($b>$c){\n    return 'C';\n  }\n  if($b>$d){\n\
    \    return 'D';\n  }\n  if($b>$d){\n    return 'D';\n  }\n  if($b>$d){\n    return\
    \ 'D';\n  }\n  if($b>$d){\n    return 'D';\n  }\n  if($b>$d){\n    return 'D';\n\
    \  }\n  if($b>$d){\n    return 'D';\n  }\n  if($b>$d){\n    return 'D';\n  }\n\
    \  if($b>$e){\n    return 'D';\n  }\n  if($b>$e){\n    return 'D';\n  }\n  if($b>$e){\n\
    \    return 'D';\n  }\n  if($b>$e){\n    return 'D';\n  }\n  if($b>$e){\n    return\
    \ 'D';\n  }\n  if($b>$e){\n    return 'D';\n  }\n  if($b>$e){\n    return 'D\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm5rk3twm.php on line 118\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letterGrades\
    \ = array('A+', 'A', 'A', 'A-', 'B+', 'B', 'B-B', 'B', 'B', 'B', 'B', 'B', 'C',\
    \ 'C', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'E');\n    $result\
    \ = array();\n    foreach ($grades as $key => $value) {\n        if ($value <\
    \ 3.0) {\n            $result[$key] = $letterGrades[0];\n        } else if ($value\
    \ < 3.7) {\n            $result[$key] = $letterGrades[1];\n        } else if ($value\
    \ < 3.3) {\n            $result[$key] = $letterGrades[2];\n        } else if ($value\
    \ < 3.0) {\n            $result[$key] = $letterGrades[3];\n        } else if ($value\
    \ < 2.7) {\n            $result[$key] = $letterGrades[4];\n        } else if ($value\
    \ < 2.3) {\n            $result[$key] = $letterGrades[5];\n        } else if ($value\
    \ < 2.0) {\n            $result[$key] = $letterGrades[6];\n        } else if ($value\
    \ < 1.7) {\n            $result[$key] = $letterGrades[7];\n        } else if ($value\
    \ < 1.3) {\n            $result[$key] = $letterGrades[8];\n        } else if ($value\
    \ < 1.0) {\n            $result[$key] = $letterGrades[9];\n        } else {\n\
    \            $result[$key] = $letterGrades[10];\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpef70ynnk.php:58\n\
    Stack trace:\n#0 /tmp/tmpef70ynnk.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpef70ynnk.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map('intval',\
    \ $grades);\n  foreach ($grades as &$grade) {\n    if ($grade > 0 && $grade <\
    \ 3) {\n      $grade = 'A+';\n    }\n    elseif ($grade > 2 && $grade < 4) {\n\
    \      $grade = 'A';\n    }\n    elseif ($grade > 1 && $grade < 3) {\n      $grade\
    \ = 'A-';\n    }\n    elseif ($grade > 0 && $grade < 2) {\n      $grade = 'B+';\n\
    \    }\n    elseif ($grade > 1 && $grade < 2) {\n      $grade = 'B';\n    }\n\
    \    elseif ($grade > 0 && $grade < 1) {\n      $grade = 'B-';\n    }\n    elseif\
    \ ($grade > 0 && $grade == 1) {\n      $grade = 'C+';\n    }\n    elseif ($grade\
    \ > 1 && $grade == 1) {\n      $grade = 'C';\n    }\n    elseif ($grade > 0 &&\
    \ $grade == 0) {\n      $grade = 'C-';\n    }\n    elseif ($grade > 0 && $grade\
    \ < 0.5) {\n      $grade = 'D+';\n    }\n    elseif ($grade > 0.5 && $grade <\
    \ 1) {\n      $grade = 'D';\n    }\n    elseif ($grade > 0.5 && $grade == 1) {\n\
    \      $grade = 'D-';\n    }\n    else {\n      $grade = 'D';\n    }\n  }\n  return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbter853.php:74\n\
    Stack trace:\n#0 /tmp/tmpmbter853.php(82): test()\n#1 {main}\n  thrown in /tmp/tmpmbter853.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map(function($grade)\
    \ {\n    if ($grade > 3.7) {\n      return 'A+';\n    } elseif ($grade > 3.3)\
    \ {\n      return 'A-';\n    } elseif ($grade > 3) {\n      return 'B+';\n   \
    \ } elseif ($grade > 2.7) {\n      return 'B';\n    } elseif ($grade > 2.3) {\n\
    \      return 'B-';\n    } elseif ($grade > 2) {\n      return 'C+';\n    } elseif\
    \ ($grade > 1.7) {\n      return 'C';\n    } elseif ($grade > 1.3) {\n      return\
    \ 'C-';\n    } elseif ($grade > 1) {\n      return 'D+';\n    } elseif ($grade\
    \ > 0.7) {\n      return 'D';\n    } else {\n      return 'D-';\n    }\n  }, $grades);\n\
    \n  $grades[] = 'E';\n\n  return $grades;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpziy0nyn2.php:60\n\
    Stack trace:\n#0 /tmp/tmpziy0nyn2.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpziy0nyn2.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map(function($item){\n\
    \    return ($item > 2.0 ? \"B+\" : ($item > 2.7 ? \"B\" : ($item > 2.3 ? \"B-\"\
    \ : ($item > 2.0 ? \"B-\" : ($item > 1.7 ? \"C+\" : ($item > 1.3 ? \"C\" : ($item\
    \ > 1.0 ? \"C\" : ($item > 0.7 ? \"C\" : ($item > 0.3 ? \"C\" : ($item > 0.0 ?\
    \ \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" :\
    \ ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item\
    \ > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ?\
    \ \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" :\
    \ ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item\
    \ > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ?\
    \ \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" :\
    \ ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item\
    \ > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ?\
    \ \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" :\
    \ ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item\
    \ > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ?\
    \ \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" :\
    \ ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($item > 0.0 ? \"C\" : ($\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7o6445jr.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  // Your code\
    \ goes here\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhtdbcyb.php:31\n\
    Stack trace:\n#0 /tmp/tmpmhtdbcyb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmhtdbcyb.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = array();\n    foreach($grades as $key => $value) {\n        // Get the first\
    \ letter grade\n        $letter = substr($key, 0, 1);\n        $grades_array[$letter]\
    \ = $value;\n    }\n\n    $grades_array = array_filter($grades_array, 'strlen');\n\
    \n    foreach ($grades_array as $grade => $value) {\n        $grade = substr($grade,\
    \ 1, 1);\n        $gpa = $grades_array[$grade];\n\n        // Calculate letter\
    \ grade\n        $letter_grade = substr($grade, 0, 1);\n        $letter_grade\
    \ = str_replace('+', 'A+', $letter_grade);\n        $letter_grade = str_replace('-',\
    \ 'B-', $letter_grade);\n        $letter_grade = str_replace('-', 'B+', $letter_grade);\n\
    \        $letter_grade = str_replace('D', 'D-', $letter_grade);\n        $letter_grade\
    \ = str_replace('-', 'D+', $letter_grade);\n        $letter_grade = str_replace('C',\
    \ 'C-', $letter_grade);\n        $letter_grade = str_replace('-', 'C+', $letter_grade);\n\
    \        $letter_grade = str_replace('B', 'B-', $letter_grade);\n        $letter_grade\
    \ = str_replace('D', 'D+', $letter_grade);\n        $letter_grade = str_replace('C',\
    \ 'C', $letter_grade);\n        $letter_grade = str_replace('A+', 'A', $letter_grade);\n\
    \        $letter_grade = str_replace('A', 'B+', $letter_grade);\n        $letter_grade\
    \ = str_replace('A', 'B', $letter_grade);\n        $letter_grade = str_replace('A+',\
    \ 'B+', $letter_grade);\n        $letter_grade = str_replace('A+', 'B', $letter_grade);\n\
    \        $letter_grade = str_replace('A', 'B-', $letter_grade);\n        $letter_grade\
    \ = str_replace('A', 'B-', $letter_grade);\n        $letter_grade = str_replace('A+',\
    \ 'B-', $letter_grade);\n\n        // Reverse the letter grade and GPA\n     \
    \   $gpa = str_repeat($gpa, 1);\n        $letter_grade = str_repeat($letter_grade,\
    \ strlen($grade));\n        $letter_grade = str_replace($gpa, $letter_grade, $letter_grade);\n\
    \n        // Append the letter grade to the array\n        $grades_array[$letter_grade]\
    \ = $value;\n    }\n\n    $grades_array = array_map('strval', $grades_array);\n\
    \n    sort($grades_array);\n\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1yldiqw.php:79\n\
    Stack trace:\n#0 /tmp/tmpx1yldiqw.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpx1yldiqw.php\
    \ on line 79\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t// Convert grades\
    \ to numerical values\n\t$grades_array = array(\n\t\t4.0  => 'A+',\n\t\t3.9  =>\
    \ 'A',\n\t\t3.8  => 'A-',\n\t\t3.7  => 'B+',\n\t\t3.6  => 'B',\n\t\t3.5  => 'B-',\n\
    \t\t3.4  => 'C+',\n\t\t3.3  => 'C',\n\t\t3.2  => 'C-',\n\t\t3.1  => 'D+',\n\t\t\
    3.0  => 'D',\n\t\t2.9  => 'D-',\n\t\t2.8  => 'E');\n\n\t// Write the output here\n\
    \t$output = '';\n\tforeach ($grades as $grade) {\n\t\t$output .= $grades_array[$grade]\
    \ . \"\\n\";\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnziksqt.php:53\n\
    Stack trace:\n#0 /tmp/tmpnnziksqt.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpnnziksqt.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_count\
    \ = count($grades);\n    $result = array();\n    for ($i = 0; $i < $grades_count;\
    \ $i++) {\n        $result[] = chr(ord('A') + $grades[$i] >= 7 ? ord('A') - $grades[$i]\
    \ : -$grades[$i]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjevixxix.php:37\n\
    Stack trace:\n#0 /tmp/tmpjevixxix.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjevixxix.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array('A+', 'B', 'C-', 'C', 'A-');\n    for($i = 0; $i < count($grades); $i++)\
    \ {\n        $grade = $grades[$i];\n        if($grade > 0 && $grade <= 3.9) {\n\
    \            $letter_grades[$i] = 'A+';\n        }\n        elseif($grade > 3.9\
    \ && $grade <= 3.9) {\n            $letter_grades[$i] = 'A';\n        }\n    \
    \    elseif($grade > 3.9 && $grade <= 3.9) {\n            $letter_grades[$i] =\
    \ 'A-';\n        }\n        elseif($grade > 3.9 && $grade <= 3.9) {\n        \
    \    $letter_grades[$i] = 'B+';\n        }\n        elseif($grade > 3.9 && $grade\
    \ <= 3.9) {\n            $letter_grades[$i] = 'B';\n        }\n        elseif($grade\
    \ > 3.9 && $grade <= 3.9) {\n            $letter_grades[$i] = 'B-';\n        }\n\
    \        elseif($grade > 3.9 && $grade <= 3.9) {\n            $letter_grades[$i]\
    \ = 'C+';\n        }\n        elseif($grade > 3.9 && $grade <= 3.9) {\n      \
    \      $letter_grades[$i] = 'C';\n        }\n        elseif($grade > 3.9 && $grade\
    \ <= 3.9) {\n            $letter_grades[$i] = 'C-';\n        }\n        elseif($grade\
    \ > 3.9 && $grade <= 3.9) {\n            $letter_grades[$i] = 'D+';\n        }\n\
    \        elseif($grade > 3.9 && $grade <= 3.9) {\n            $letter_grades[$i]\
    \ = 'D';\n        }\n        elseif($grade > 3.9 && $grade <= 3.9) {\n       \
    \     $letter_grades[$i] = 'D-';\n        }\n        elseif($grade > 0) {\n  \
    \          $letter_grades[$i] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$result = array_map(function($grade) {\n    return $grade;\n}, \narray_filter(\n\
    \    array_map(\n        function($grade) {\n            return numerical_letter_grade($grade);\n\
    \        },\n        array_slice($grades, 0, count($grades) - 1)\n    ),\n   \
    \ function($grade) {\n        return $grade !== false;\n    }\n));\n</code>\n\
    <|/ a |>\n<| c |>\nI forgot to mention, it is homework so I am not looking for\
    \ the actual answer but some tips on how to get it done :)\n<|/ c |>\n<| c \n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyxlp31cy.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map(\"\
    floor\", $grades);\n  $grades = array_map(\"round\", $grades);\n  $grades = array_map(\"\
    ceil\", $grades);\n  $grades = array_map(\"round\", $grades);\n  $grades = array_map(\"\
    round\", $grades);\n  sort($grades);\n\n  $letter_grades = array();\n  for($i\
    \ = 0; $i < count($grades); $i++) {\n    $letter_grades[] = \n      ( ( ( $grades[$i]\
    \ > 5.0 ) ? \"A+\" : ( ( $grades[$i] > 3.7 ) ? \"A\" : ( ( $grades[$i] > 3.3 )\
    \ ? \"A-\" : ( ( $grades[$i] > 3.0 ) ? \"B+\" : ( ( $grades[$i] > 2.7 ) ? \"B\"\
    \ : ( ( $grades[$i] > 2.3 ) ? \"B-\" : ( ( $grades[$i] > 2.0 ) ? \"C+\" : ( (\
    \ $grades[$i] > 1.7 ) ? \"C\" : ( ( $grades[$i] > 1.3 ) ? \"C-\" : ( ( $grades[$i]\
    \ > 1.0 ) ? \"D+\" : ( ( $grades[$i] > 0.7 ) ? \"D\" : ( ( $grades[$i] > 0.3 )\
    \ ? \"D-\" : \"E\" ) ) ) ) ) ) ) ) ) ) ) );\n  }\n  return $letter_grades;\n}\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzunwbj9n.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ array(\n        'A+' => '4.0+',\n        'A' => '4.0-1',\n        'A-' => '3.7-3',\n\
    \        'B+' => '3.7-3',\n        'B' => '3.3-1',\n        'B-' => '3.0-3',\n\
    \        'C+' => '3.0-3',\n        'C' => '2.7-1',\n        'C-' => '2.3-3',\n\
    \        'D+' => '2.3-1',\n        'D' => '1.7-1',\n        'D-' => '1.5-3',\n\
    \        'E' => '0.0'\n    );\n\n    // Write your code here\n\n}\n</code>\nExplanation\n\
    We first need to find out what the letters mean. Let's take GPA 4.0 as an example.\
    \ To be able to do this, we need to know that the first letter tells us that our\
    \ grade is above the average. The second letter in the alphabet tells us that\
    \ our grade is below average. The third letter tells us that our grade is between\
    \ average and average-. And the last letter tells us that our grade is below average.\n\
    If we look through our table, we notice that A+, A, A-, B+, B, B-, C+, C, C-,\
    \ D+, D, D-, E are all just numbers. Thus, we can convert these numbers to letters\
    \ using our table. \nThe formula for calculating this letter grade is as follows:\n\
    <code>\nGrade / Total GPA => Letter\n</code>\nFor example if our grade is 4.0,\
    \ then our GPA is 3.5 and our total GPA is 4.0, then the formula would be 4.0\
    \ / 4.0 => 1.5 and our letter would be B-\nIf our grade is greater than 3.7 and\
    \ less than 3.3 then our letter will be a + (A is 0)\nIf our grade is greater\
    \ than 3.3 and less than 2.7 then our letter will be a - - (A is 0)\nIf our grade\
    \ is greater than 2.7 and less than 2.3 then our letter will be b+ (B is 1)\n\
    If our grade is greater than 2.3 and less than 1.7 then our letter will be b -\
    \ (B is 1)\nIf our grade is greater than 1.7 and less than 1.3 then our letter\
    \ will be c+ (C is 2)\nIf our grade is greater than 1.3 and less than 1.0 then\
    \ our letter will be c (C is 2)\nIf our grade is greater than 1.0, then our letter\
    \ will be d (D is 3)\nIf our grade is greater than 0.7 and less than 0.0 then\
    \ our letter will be d (D is 3)\nIf our grade is equal to 0.0 then our letter\
    \ will be e (E is 0)\n<|/ a tags=algorithm,php |>\n<| c |>\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpildpbpes.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map('round',\
    \ $grades);\n  sort($grades);\n  \n  $grade_array = array();\n  $total_grade =\
    \ 0;\n  foreach($grades as $grade) {\n    if($total_grade < $grade ) {\n     \
    \ $total_grade = $grade;\n    }\n    if($total_grade > $grade ) {\n      $grade_array[]\
    \ = 'D-';\n    }\n    if($total_grade > 2.7 ) {\n      $grade_array[] = 'B-';\n\
    \    }\n    if($total_grade > 2.3 ) {\n      $grade_array[] = 'B-';\n    }\n \
    \   if($total_grade > 2.0 ) {\n      $grade_array[] = 'B-';\n    }\n    if($total_grade\
    \ > 1.7 ) {\n      $grade_array[] = 'C+';\n    }\n    if($total_grade > 1.3 )\
    \ {\n      $grade_array[] = 'C';\n    }\n    if($total_grade > 1.0 ) {\n     \
    \ $grade_array[] = 'C';\n    }\n    if($total_grade > 0.7) {\n      $grade_array[]\
    \ = 'C';\n    }\n    if($total_grade > 0.3 ) {\n      $grade_array[] = 'C';\n\
    \    }\n    if($total_grade > 0.0 ) {\n      $grade_array[] = 'C';\n    }\n  \
    \  if($total_grade > -1.0 ) {\n      $grade_array[] = 'D+';\n    }\n    if($total_grade\
    \ > -0.7 ) {\n      $grade_array[] = 'D';\n    }\n    if($total_grade > -0.3 )\
    \ {\n      $grade_array[] = 'D';\n    }\n    if($total_grade > -0.0 ) {\n    \
    \  $grade_array[] = 'D';\n    }\n    if($total_grade > -0.3 ) {\n      $grade_array[]\
    \ = 'D';\n    }\n    if($total_grade > -0.7 ) {\n      $grade_array[] = 'D';\n\
    \    }\n    if($total_grade > -1.0 ) {\n      $grade_array[] = 'D';\n    }\n \
    \   if($total_grade > -1.3 ) {\n      $grade_array[] = 'D';\n    }\n    if($total_grade\
    \ > -1.7 ) {\n      $grade_array[] = 'D';\n    }\n    if($total_grade > -2.0 )\
    \ {\n      $grade_array[] = 'E';\n    }\n  }\n  \n  return $grade_array;\n}\n\n\
    $a = array(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpygbzhx66.php on line 99\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_filter(\n        array_map(\n            function($value) use ($grades)\
    \ {\n                if ($value < 3.0) {\n                    $letter = 'A+';\n\
    \                } elseif ($value < 3.8) {\n                    $letter = 'A';\n\
    \                } elseif ($value < 4.0) {\n                    $letter = 'A-';\n\
    \                } else {\n                    $letter = 'B+';\n             \
    \   }\n                if ($value < 3.7) {\n                    $letter .= '+';\n\
    \                } elseif ($value < 3.3) {\n                    $letter .= '-';\n\
    \                } else {\n                    $letter .= '0';\n             \
    \   }\n                return $letter;\n            },\n            $grades\n\
    \        )\n    );\n    return implode('', $grades);\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppq0fpq46.php:56\n\
    Stack trace:\n#0 /tmp/tmppq0fpq46.php(64): test()\n#1 {main}\n  thrown in /tmp/tmppq0fpq46.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // You do\
    \ not need to modify this function\n    // Copy one of the grade_equation functions\
    \ below into your code to test it\n    \n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl106ymtj.php:34\n\
    Stack trace:\n#0 /tmp/tmpl106ymtj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl106ymtj.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach($grades as $grade) {\n        if($grade > 0 && $grade\
    \ <= 3.7) {\n            $letter_grades[] = 'A+';\n        } elseif($grade > 3.7\
    \ && $grade <= 3.3) {\n            $letter_grades[] = 'A';\n        } elseif($grade\
    \ > 3.3 && $grade <= 3) {\n            $letter_grades[] = 'A- ';\n        } elseif($grade\
    \ > 3 && $grade <= 2.7) {\n            $letter_grades[] = 'B+';\n        } elseif($grade\
    \ > 2.7 && $grade <= 2.3) {\n            $letter_grades[] = 'B';\n        } elseif($grade\
    \ > 2.3 && $grade <= 2) {\n            $letter_grades[] = 'B-';\n        } elseif($grade\
    \ > 2 && $grade <= 1.7) {\n            $letter_grades[] = 'C+';\n        } elseif($grade\
    \ > 1.7 && $grade <= 1.3) {\n            $letter_grades[] = 'C';\n        } elseif($grade\
    \ > 1.3 && $grade <= 1) {\n            $letter_grades[] = 'C-';\n        } elseif($grade\
    \ > 1 && $grade <= 0.7) {\n            $letter_grades[] = 'D+';\n        } elseif($grade\
    \ > 0.7 && $grade <= 0.3) {\n            $letter_grades[] = 'D';\n        } elseif($grade\
    \ > 0.3 && $grade <= 0) {\n            $letter_grades[] = 'D-';\n        } elseif($grade\
    \ == 0) {\n            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvu_4u16.php:62\n\
    Stack trace:\n#0 /tmp/tmpsvu_4u16.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpsvu_4u16.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_filter(array($grades));\n\
    \  sort($grades);\n  foreach($grades as $grade) {\n    if($grade >= 3.6) {\n \
    \     return \"+\";\n    }\n    if($grade >= 3.2) {\n      return \"A\";\n   \
    \ }\n    if($grade >= 2.8) {\n      return \"A-\";\n    }\n    if($grade >= 2.4)\
    \ {\n      return \"B+\";\n    }\n    if($grade >= 2.0) {\n      return \"B\"\
    ;\n    }\n    if($grade >= 1.7) {\n      return \"B-\";\n    }\n    if($grade\
    \ >= 1.2) {\n      return \"C+\";\n    }\n    if($grade >= 0.8) {\n      return\
    \ \"C\";\n    }\n    if($grade >= 0.4) {\n      return \"C-\";\n    }\n    if($grade\
    \ >= 0.0) {\n      return \"D+\";\n    }\n    if($grade >= 0.0) {\n      return\
    \ \"D\";\n    }\n    if($grade >= 0.0) {\n      return \"D-\";\n    }\n    if($grade\
    \ == 0.0) {\n      return \"E\";\n    }\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2pfolm4.php:73\n\
    Stack trace:\n#0 /tmp/tmpi2pfolm4.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpi2pfolm4.php\
    \ on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return array_reduce(\n\
    \        $grades, \n        function ($carry, $item) use ($grades) {\n       \
    \     $num = floor($item / 10);\n            $carry [] = $grades[$num];\n    \
    \        return $carry;\n        }, \n        []);\n}\n\n$gpas = [4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7];\n\necho implode(', ', numerical_letter_grade($gpas));\
    \ // A+, B, C-, C, A-\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpaiig82cm.php:43\nStack trace:\n#0 /tmp/tmpaiig82cm.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaiig82cm.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if ($grades\
    \ === false) {\n        return false;\n    }\n    $grade_table = array(\n    \
    \    4.0=>\"A+\",\n        4.7=>\"A\",\n        4.3=>\"A-\",\n        4.0=>\"\
    B+\",\n        4.7=>\"B\",\n        4.3=>\"B-\",\n        4.0=>\"C+\",\n     \
    \   4.7=>\"C\",\n        4.3=>\"C-\",\n        4.0=>\"D+\",\n        4.7=>\"D\"\
    ,\n        4.3=>\"D-\",\n        4.0=>\"D\",\n        4.7=>\"E\",\n        4.3=>\"\
    F\",\n        4.7=>\"G\",\n        4.3=>\"H\",\n        4.0=>\"J+\",\n       \
    \ 4.7=>\"J\",\n        4.3=>\"J-\",\n        4.0=>\"K+\",\n        4.7=>\"K\"\
    ,\n        4.3=>\"K-\",\n        4.0=>\"L+\",\n        4.7=>\"L\",\n        4.3=>\"\
    L-\",\n        4.0=>\"M+\",\n        4.7=>\"M\",\n        4.3=>\"M-\",\n     \
    \   4.0=>\"N+\",\n        4.7=>\"N\",\n        4.3=>\"N-\",\n        4.0=>\"O+\"\
    ,\n        4.7=>\"O\",\n        4.3=>\"O-\",\n        4.0=>\"P+\",\n        4.7=>\"\
    P\",\n        4.3=>\"P-\",\n        4.0=>\"Q+\",\n        4.7=>\"Q\",\n      \
    \  4.3=>\"Q-\",\n        4.0=>\"R+\",\n        4.7=>\"R\",\n        4.3=>\"R-\"\
    ,\n        4.0=>\"S+\",\n        4.7=>\"S\",\n        4.3=>\"S-\",\n        4.0=>\"\
    T-\",\n        4.7=>\"T\",\n        4.3=>\"T-\",\n        4.0=>\"U+\",\n     \
    \   4.7=>\"U\",\n        4.3=>\"U-\",\n        4.0=>\"V+\",\n        4.7=>\"V\"\
    ,\n        4.3=>\"V-\",\n        4.0=>\"W+\",\n        4.7=>\"W\",\n        4.3=>\"\
    W-\",\n        4.0=>\"X+\",\n        4.7=>\"X\",\n        4.3=>\"X-\",\n     \
    \   4.0=>\"Y+\",\n        4.7=>\"Y\",\n        4.3=>\"Y-\",\n        4.0=>\"Z+\"\
    ,\n        4.7=>\"Z\",\n        4.3=>\"Z-\",\n        4.0=>\"F\",\n        4.7=>\"\
    G\",\n        4.3=>\"H\",\n        4.0=>\"J\",\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgtk5arap.php on line 101\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-',\
    \ 'E');\n    $grades = array_map('round', array_map(function($x) {\n        return\
    \ $x * 0.5;\n    }, $grades));\n    $grades_sum = 0;\n    $grades_count = 0;\n\
    \    foreach ($grades as $grade) {\n        $grades_sum += $grade;\n        $grades_count\
    \ += 1;\n    }\n    $letter_grade = $letter_grades[$grades_sum / $grades_count];\n\
    \    return $letter_grade;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_4frgpd.php:42\n\
    Stack trace:\n#0 /tmp/tmpl_4frgpd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpl_4frgpd.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    foreach ($grades\
    \ as $key => $grade) {\n        if ($grade >= 4.0 && $grade < 7.7) {\n       \
    \     $letter_grades[$key] = \"A+\";\n        } elseif ($grade >= 7.7 && $grade\
    \ < 8.3) {\n            $letter_grades[$key] = \"A\";\n        } elseif ($grade\
    \ >= 8.3 && $grade < 9.7) {\n            $letter_grades[$key] = \"A-\";\n    \
    \    } elseif ($grade >= 9.7 && $grade < 11.3) {\n            $letter_grades[$key]\
    \ = \"B+\";\n        } elseif ($grade >= 11.3 && $grade < 12.7) {\n          \
    \  $letter_grades[$key] = \"B\";\n        } elseif ($grade >= 12.7 && $grade <\
    \ 14.3) {\n            $letter_grades[$key] = \"B-\";\n        } elseif ($grade\
    \ >= 14.3 && $grade < 16.0) {\n            $letter_grades[$key] = \"C+\";\n  \
    \      } elseif ($grade >= 16.0 && $grade < 17.7) {\n            $letter_grades[$key]\
    \ = \"C\";\n        } elseif ($grade >= 17.7 && $grade < 18.3) {\n           \
    \ $letter_grades[$key] = \"C-\";\n        } elseif ($grade >= 18.3 && $grade <\
    \ 19.0) {\n            $letter_grades[$key] = \"D+\";\n        } elseif ($grade\
    \ >= 19.0 && $grade < 20.7) {\n            $letter_grades[$key] = \"D\";\n   \
    \     } elseif ($grade >= 20.7 && $grade < 21.3) {\n            $letter_grades[$key]\
    \ = \"D-\";\n        } elseif ($grade >= 21.3 && $grade < 22.0) {\n          \
    \  $letter_grades[$key] = \"E\";\n        } elseif ($grade >= 22.0 && $grade <\
    \ 24.0) {\n            $letter_grades[$key] = \"E\";\n        }\n    }\n    return\
    \ $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpryn6opux.php:63\n\
    Stack trace:\n#0 /tmp/tmpryn6opux.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpryn6opux.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\tforeach ($grades\
    \ as $grade) {\n\t\t$letter_grade = '';\n\t\t$current_grade = $grade;\n\t\twhile\
    \ (true) {\n\t\t\t$current_grade += 0.1;\n\t\t\tif ($current_grade >= 5.0) {\n\
    \t\t\t\t$letter_grade .= 'D+';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 3.0) {\n\t\t\t\t$letter_grade .= 'D';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 2.0) {\n\t\t\t\t$letter_grade .= 'C-';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 1.0) {\n\t\t\t\t$letter_grade .= 'C-';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 0.7) {\n\t\t\t\t$letter_grade .= 'C';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 0.2) {\n\t\t\t\t$letter_grade .= 'B';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 0.0) {\n\t\t\t\t$letter_grade .= 'B+';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= -0.7) {\n\t\t\t\t$letter_grade .= 'B-';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= -0.2) {\n\t\t\t\t$letter_grade .= 'B-';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= -0.0) {\n\t\t\t\t$letter_grade .= 'B+';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= -0.3) {\n\t\t\t\t$letter_grade .= 'B-';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= -0.1) {\n\t\t\t\t$letter_grade .= 'B-';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 0.0) {\n\t\t\t\t$letter_grade .= 'B+';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 0.1) {\n\t\t\t\t$letter_grade .= 'B-';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 0.3) {\n\t\t\t\t$letter_grade .= 'B-';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 0.7) {\n\t\t\t\t$letter_grade .= 'B';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 1.0) {\n\t\t\t\t$letter_grade .= 'C+';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 2.0) {\n\t\t\t\t$letter_grade .= 'C';\n\t\t\t\tbreak;\n\t\t\t} elseif ($current_grade\
    \ >= 3.0) {\n\t\t\t\t$letter_grade .= 'C';\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc011_m5o.php on line 99\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    return '';\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8b84vhma.php:32\n\
    Stack trace:\n#0 /tmp/tmp8b84vhma.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8b84vhma.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $total_grade\
    \ = 0;\n    $letter_grades = array('A+', 'B', 'C-', 'C', 'A-');\n    $total_grade\
    \ += $grades[0];\n    for ($i = 1; $i < count($grades); $i++) {\n        $total_grade\
    \ += $grades[$i];\n        $letter_grades[$grades[$i] - 1] = $letter_grades[$grades[$i]\
    \ - 1] + $letter_grades[$i - 1];\n    }\n    return $letter_grades[$total_grade\
    \ - 1];\n}\n</code>\n<|/ q dscore=1 |>\n<| c |>\nAs the answer suggests, the second\
    \ function could be rewritten to be more efficient. One quick optimization might\
    \ be to replace `$grades[$i] - 1` with `$grades[$i]`. That doesn't change the\
    \ complexity, but it's more readable.\n<|/ c |>\n<| c |>\nThanks, that is really\
    \ helpful.\n<|/ c |>\n<| a tags=php |>\nYou can reduce the time complexity from\
    \ O(N^2) to O(N) by sorting the grades first and then applying binary search.\
    \ The basic idea is to find the average of the grades and use it as a lower bound\
    \ for binary search. The idea is to find the first number that crosses the average\
    \ point and replace it by its absolute value.\nHere is an example which uses array_reduce\
    \ to do the job. Of course you can replace array_reduce with your custom function\
    \ but for simplicity I used array_reduce:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7hh1z3fj.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$grades_array\
    \ = array(4.0=>'A+', 3.7=>'A', 3.3=>'A-', 3.0=>'B+', 2.7=>'B', \n\t\t\t\t\t\t\
    2.3=>'B-', 2.0=>'C+', 1.7=>'C', 1.3=>'C-', 1.0=>'D+', \n\t\t\t\t\t\t0.7=>'D',\
    \ 0.0=>'D-');\n\treturn $grades_array[$grades];\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Illegal offset type in /tmp/tmpcm7tqiyq.php on line 27\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpcm7tqiyq.php:35\nStack trace:\n\
    #0 /tmp/tmpcm7tqiyq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcm7tqiyq.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_sum\
    \ = 0;\n    foreach ($grades as $grade) {\n        $grades_sum += $grade;\n  \
    \  }\n    $gpa_diff = $grades_sum / 4;\n    $letter_grade = '';\n    if ($gpa_diff\
    \ == 3.0){\n        $letter_grade = 'A+';\n    } elseif ($gpa_diff > 3.0 && $gpa_diff\
    \ < 3.7) {\n        $letter_grade = 'A';\n    } elseif ($gpa_diff > 3.3 && $gpa_diff\
    \ < 3.7) {\n        $letter_grade = 'A-';\n    } elseif ($gpa_diff > 3.0 && $gpa_diff\
    \ < 3.3) {\n        $letter_grade = 'B+';\n    } elseif ($gpa_diff > 2.7 && $gpa_diff\
    \ < 3.3) {\n        $letter_grade = 'B';\n    } elseif ($gpa_diff > 2.3 && $gpa_diff\
    \ < 2.7) {\n        $letter_grade = 'B-';\n    } elseif ($gpa_diff > 2.0 && $gpa_diff\
    \ < 2.3) {\n        $letter_grade = 'C+';\n    } elseif ($gpa_diff > 1.7 && $gpa_diff\
    \ < 2.0) {\n        $letter_grade = 'C';\n    } elseif ($gpa_diff > 1.3 && $gpa_diff\
    \ < 1.7) {\n        $letter_grade = 'C-';\n    } elseif ($gpa_diff > 1.0 && $gpa_diff\
    \ < 1.3) {\n        $letter_grade = 'D+';\n    } elseif ($gpa_diff > 0.7 && $gpa_diff\
    \ < 1.0) {\n        $letter_grade = 'D';\n    } elseif ($gpa_diff > 0.0) {\n \
    \       $letter_grade = 'D-';\n    } else {\n        $letter_grade = 'E';\n  \
    \  }\n    return $letter_grade;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm329g2wu.php:65\n\
    Stack trace:\n#0 /tmp/tmpm329g2wu.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpm329g2wu.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_array\
    \ = explode(',', $grades);\n  $grades_array_size = count($grades_array);\n  $letter_grades\
    \ = array();\n  for($i = 0; $i < $grades_array_size; $i++) {\n    $gpa =   $grades_array[$i];\n\
    \    $letter =  ($gpa > 3.3) ? 'A+' : ($gpa > 2.3) ? 'A-' : \n        ($gpa >\
    \ 2.0) ? 'B+' : ($gpa > 1.7) ? 'B' : \n        ($gpa > 1.3) ? 'B-' : ($gpa > 1.0)\
    \ ? 'C+' : \n        ($gpa > 0.7) ? 'C' : \n        ($gpa > 0.0) ? 'C' : 'D-';\n\
    \    $letter_grades[] = $letter;\n  }\n  return implode(', ', $letter_grades);\n\
    }\n</code>\n<|/ a tags=php,arrays,function |>\n<| c |>\nThe question was \"can\
    \ you write an algorithm for that\" not how to get it done.\n<|/ c |>\n<| a tags=php,arrays,function\
    \ |>\nThis should do what you want it to!\n<code>\n<?php\n\n$grades = array(4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp13o3xo4t.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $total = 0;\n\
    \    foreach ($grades as $grade) {\n        $total += $grade;\n    }\n\n    $average\
    \ = round($total / count($grades));\n    if ($average < 3.0) {\n        return\
    \ ['A+'];\n    } elseif ($average < 3.7) {\n        return ['A'];\n    } elseif\
    \ ($average < 3.3) {\n        return ['A-'];\n    } elseif ($average < 3.0) {\n\
    \        return ['B+'];\n    } elseif ($average < 2.7) {\n        return ['B'];\n\
    \    } elseif ($average < 2.3) {\n        return ['B-'];\n    } elseif ($average\
    \ < 2.0) {\n        return ['C+'];\n    } elseif ($average < 1.7) {\n        return\
    \ ['C'];\n    } elseif ($average < 1.3) {\n        return ['C-'];\n    } elseif\
    \ ($average < 1.0) {\n        return ['D+'];\n    } elseif ($average < 0.7) {\n\
    \        return ['D'];\n    } elseif ($average < 0.0) {\n        return ['D-'];\n\
    \    } elseif ($average < 0.0) {\n        return ['E'];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0sxsns_7.php:64\n\
    Stack trace:\n#0 /tmp/tmp0sxsns_7.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp0sxsns_7.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  // Your code\
    \ goes here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4bcxkjf.php:32\n\
    Stack trace:\n#0 /tmp/tmpd4bcxkjf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpd4bcxkjf.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grade\
    \ = '';\n    $grades_len = count($grades);\n    if ($grades_len < 1) {\n     \
    \   return $letter_grade;\n    }\n    if ($grades_len < 2) {\n        $letter_grade\
    \ .= 'E';\n        return $letter_grade;\n    }\n    \n    // Get the maximum\
    \ of all GPAs and the number of grades required\n    $max_grade = max($grades);\n\
    \    $num_grades = $max_grade / 10;\n    \n    // Set starting point for loop\
    \ at one less than the number of grades required\n    for ($i = 0; $i < $num_grades-1;\
    \ $i++) {\n        $letter_grade .= getGrade($grades[$i]);\n    }\n    \n    //\
    \ Go through the remaining grades, add them to the letter_grade variable\n   \
    \ $last_grade = array_pop($grades);\n    for ($i = 0; $i < $max_grade; $i++) {\n\
    \        $letter_grade .= getGrade($last_grade + $i);\n    }\n    return $letter_grade;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getGrade() in\
    \ /tmp/tmpb6quxyep.php:46\nStack trace:\n#0 /tmp/tmpb6quxyep.php(52): numerical_letter_grade(Array)\n\
    #1 /tmp/tmpb6quxyep.php(56): candidate(Array)\n#2 /tmp/tmpb6quxyep.php(64): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb6quxyep.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  if ($grades\
    \ == 0) { return \"E\"; }\n  $grades_sum = $grades[0];\n  foreach ($grades as\
    \ $key => $grade) {\n    $grades_sum += $grade;\n    if ($key != 0 && $key !=\
    \ count($grades) - 1) {\n      $grades_sum -= $grades[$key + 1];\n    }\n  }\n\
    \  if ($grades_sum > 0) {\n    $grades_sum *= ($grades_sum == $grades_sum) ? 1\
    \ : -1;\n    $grades_sum = $grades_sum / count($grades);\n    return round(100\
    \ * $grades_sum, 2) / 100;\n  }\n  return \"E\";\n}\n$grades = [4.0, 3, 1.7, 2,\
    \ 3.5];\necho numerical_letter_grade($grades);\n</code>\n<|/ a dscore=0 tags=php,math,algorithm,function\
    \ |>\n<| c |>\nI forgot to mention that my professor wants me to use only if statements\
    \ and loops. I'm only allowed to use array functions and math. I'm pretty sure\
    \ I made that clear when I said that I didn't really need to use the array or\
    \ math functions for this particular problem. I just don't know how to properly\
    \ use them for this problem. Thanks for your help!\n<|/ c |>\n<| c |>\nI edited\
    \ my code with a solution that does not use arrays.\n<|/ c |>\n<| c |>\nI actually\
    \ don't need the array of grades for my professor, it's an extra feature that\
    \ we were just told to take out and she doesn't want it in the final product.\
    \ But I still don't know how to use this algorithm correctly. I'm pretty sure\
    \ I'm supposed to use if statements, loops, and conditionals, but I just don't\
    \ know how to use them for this particular problem. I'm thinking it might be something\
    \ like this: if($grades[$key] > $grades[$key+1] && $grades[$key] > $grades[$key+2])\
    \ but I'm just not sure. Any help would be greatly appreciated.\n<|/ c |>\n<|\
    \ a dscore=0 |>\nHere is the solution for your problem using an if statement with\
    \ two conditions and a while loop to keep track of the index and the sum of the\
    \ grades.\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoptsru8e.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    \n    // We\
    \ need to find an equation to calculate the letter grade for GPA 4\n    // We\
    \ will start with using linear regression (OLS)\n    $regression = array_map(function($x){\
    \ return $x*$x; }, $grades);\n    $mean = $regression[0];\n    $sum = 0;\n   \
    \ foreach($regression as $grade) {\n        $sum += $grade;\n    }\n    $sum_of_squares\
    \ = array_sum(array_map(function($x) { return pow($x, 2); }, $regression));\n\
    \    $numerical_deviation = $sum / $sum_of_squares;\n    $slope = $numerical_deviation\
    \ / $mean;\n\n    return array_map(function($grade){ return $grade * $slope; },\
    \ $grades);\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3vrajb5.php:45\n\
    Stack trace:\n#0 /tmp/tmpu3vrajb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpu3vrajb5.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmsaiq08n.php:32\n\
    Stack trace:\n#0 /tmp/tmpmsaiq08n.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmsaiq08n.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letter_grade\
    \ = '';\n\t$total_grade = 0;\n\t$total_grade = $total_grade + $grades[0];\n\t\
    $total_grade = $total_grade + $grades[1];\n\t$total_grade = $total_grade + $grades[2];\n\
    \t$total_grade = $total_grade + $grades[3];\n\t$total_grade = $total_grade + $grades[4];\n\
    \t$total_grade = $total_grade + $grades[5];\n\tif ($total_grade > 0) {\n\t\tif\
    \ ($total_grade > 4.0) {\n\t\t\t$letter_grade = 'A+';\n\t\t} else if ($total_grade\
    \ > 3.7) {\n\t\t\t$letter_grade = 'A';\n\t\t} else if ($total_grade > 3.3) {\n\
    \t\t\t$letter_grade = 'A-';\n\t\t} else if ($total_grade > 3.0) {\n\t\t\t$letter_grade\
    \ = 'B+';\n\t\t} else if ($total_grade > 2.7) {\n\t\t\t$letter_grade = 'B';\n\t\
    \t} else if ($total_grade > 2.3) {\n\t\t\t$letter_grade = 'B-';\n\t\t} else if\
    \ ($total_grade > 2.0) {\n\t\t\t$letter_grade = 'C+';\n\t\t} else if ($total_grade\
    \ > 1.7) {\n\t\t\t$letter_grade = 'C';\n\t\t} else if ($total_grade > 1.3) {\n\
    \t\t\t$letter_grade = 'C-';\n\t\t} else if ($total_grade > 1.0) {\n\t\t\t$letter_grade\
    \ = 'D+';\n\t\t} else if ($total_grade > 0.7) {\n\t\t\t$letter_grade = 'D';\n\t\
    \t} else if ($total_grade > 0.0) {\n\t\t\t$letter_grade = 'D-';\n\t\t} else {\n\
    \t\t\t$letter_grade = 'E';\n\t\t}\n\t}\n\treturn $letter_grade;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps618hyxr.php:68\n\
    Stack trace:\n#0 /tmp/tmps618hyxr.php(76): test()\n#1 {main}\n  thrown in /tmp/tmps618hyxr.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = array('A+', 'B', 'C-', 'C', 'D-', 'D');\n  $total = array_sum($grades);\n\
    \  foreach ($grades as $grade) {\n    $letter_grades[] = $letter_grades[$grade-1]\
    \ . '+';\n  }\n  if ($total == 0) return \"E\";\n  foreach ($grades as $grade)\
    \ {\n    $letter_grades[] = $letter_grades[$grade-1] . '/' . ($total - $grade);\n\
    \  }\n  return implode('', $letter_grades);\n}\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprr4akepp.php:40\n\
    Stack trace:\n#0 /tmp/tmprr4akepp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprr4akepp.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = array(\n        'A+' => 4.0,\n        'A'  => 3.7,\n        'A-' => 3.3,\n\
    \        'B+' => 3.0,\n        'B'  => 2.7,\n        'B-' => 2.3,\n        'C+'\
    \ => 2.0,\n        'C'  => 1.7,\n        'C-' => 1.3,\n        'D+' => 1.0,\n\
    \        'D'  => 0.7,\n        'D-' => 0.0,\n        'E'  => 0.0,\n    );\n\n\
    \    $letter_grades = array();\n    foreach ($grades as $grade) {\n        if\
    \ ($grade >= $grades_array['A+']) {\n            $letter_grades[] = 'A+';\n  \
    \      } elseif ($grade >= $grades_array['A']) {\n            $letter_grades[]\
    \ = 'A';\n        } elseif ($grade >= $grades_array['A-']) {\n            $letter_grades[]\
    \ = 'A-';\n        } elseif ($grade >= $grades_array['B+']) {\n            $letter_grades[]\
    \ = 'B+';\n        } elseif ($grade >= $grades_array['B']) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= $grades_array['B-']) {\n            $letter_grades[]\
    \ = 'B-';\n        } elseif ($grade >= $grades_array['C+']) {\n            $letter_grades[]\
    \ = 'C+';\n        } elseif ($grade >= $grades_array['C']) {\n            $letter_grades[]\
    \ = 'C';\n        } elseif ($grade >= $grades_array['C-']) {\n            $letter_grades[]\
    \ = 'C-';\n        } elseif ($grade >= $grades_array['D+']) {\n            $letter_grades[]\
    \ = 'D+';\n        } elseif ($grade >= $grades_array['D']) {\n            $letter_grades[]\
    \ = 'D';\n        } elseif ($grade >= $grades_array['D-']) {\n            $letter_grades[]\
    \ = 'D-';\n        } elseif ($grade >= $grades_array['E']) {\n            $letter_grades[]\
    \ = 'E';\n        } else {\n            $letter_grades[] = 'E';\n        }\n \
    \   }\n    return $letter_grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdixw_396.php:80\n\
    Stack trace:\n#0 /tmp/tmpdixw_396.php(88): test()\n#1 {main}\n  thrown in /tmp/tmpdixw_396.php\
    \ on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map('intval',\
    \ $grades);\n  $lettergrade = array();\n  $numGPA = $grades[0];\n  $totalGPA =\
    \ array_sum($grades);\n  for ($i = 1; $i <= count($grades); $i++) {\n    if ($numGPA\
    \ <= $totalGPA) {\n      if ($numGPA < $totalGPA) {\n        if ($grades[$i] <=\
    \ $numGPA) {\n          $lettergrade[$i] = 'A+';\n        }\n        if ($grades[$i]\
    \ > $numGPA) {\n          $lettergrade[$i] = 'A-';\n        }\n      } else {\n\
    \        if ($grades[$i] > $numGPA) {\n          $lettergrade[$i] = 'B+';\n  \
    \      }\n        if ($grades[$i] < $numGPA) {\n          $lettergrade[$i] = 'B-';\n\
    \        }\n      }\n    } else {\n      if ($numGPA < $totalGPA) {\n        if\
    \ ($grades[$i] < $numGPA) {\n          $lettergrade[$i] = 'C+';\n        }\n \
    \       if ($grades[$i] > $numGPA) {\n          $lettergrade[$i] = 'C';\n    \
    \    }\n      } else {\n        if ($grades[$i] > $numGPA) {\n          $lettergrade[$i]\
    \ = 'D+';\n        }\n        if ($grades[$i] < $numGPA) {\n          $lettergrade[$i]\
    \ = 'D';\n        }\n      }\n    }\n    $numGPA = $grades[$i];\n  }\n  return\
    \ $lettergrade;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqm30l7o.php:72\n\
    Stack trace:\n#0 /tmp/tmpzqm30l7o.php(80): test()\n#1 {main}\n  thrown in /tmp/tmpzqm30l7o.php\
    \ on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    if (!is_array($grades))\
    \ return false;\n    $letter = array();\n    $grade_levels = array();\n    for($i\
    \ = 0; $i < count($grades); $i++) {\n        $grade_levels[$i] = floor($grades[$i]\
    \ / 3.0 + 1);\n    }\n    $grade_level = array_sum($grade_levels);\n    if ($grade_level\
    \ == 0) {\n        $grade_level = 1;\n    }\n    for ($i = 0; $i < count($grades);\
    \ $i++) {\n        if ($grades[$i] >= 4.0) {\n            $letter[] = \"A+\";\n\
    \        }\n        if ($grades[$i] > 3.7 && $grades[$i] <= 3.7) {\n         \
    \   $letter[] = \"A\";\n        }\n        if ($grades[$i] > 3.3 && $grades[$i]\
    \ <= 3.3) {\n            $letter[] = \"A-\";\n        }\n        if ($grades[$i]\
    \ > 3.0 && $grades[$i] <= 3.0) {\n            $letter[] = \"B+\";\n        }\n\
    \        if ($grades[$i] > 2.7 && $grades[$i] <= 2.7) {\n            $letter[]\
    \ = \"B\";\n        }\n        if ($grades[$i] > 2.3 && $grades[$i] <= 2.3) {\n\
    \            $letter[] = \"B-\";\n        }\n        if ($grades[$i] > 2.0 &&\
    \  $grades[$i] <= 2.0) {\n            $letter[] = \"C+\";\n        }\n       \
    \ if ($grades[$i] > 1.7 && $grades[$i] <= 1.7) {\n            $letter[] = \"C\"\
    ;\n        }\n        if ($grades[$i] > 1.3 && $grades[$i] <= 1.3) {\n       \
    \     $letter[] = \"C-\";\n        }\n        if ($grades[$i] > 1.0 &&  $grades[$i]\
    \ <= 1.0) {\n            $letter[] = \"D+\";\n        }\n        if ($grades[$i]\
    \ > 0.7 &&  $grades[$i] <= 0.7) {\n            $letter[] = \"D\";\n        }\n\
    \        if ($grades[$i] > 0.0 &&  $grades[$i] <= 0.0) {\n            $letter[]\
    \ = \"D-\";\n        }\n        if ($grades[$i] == 0.0) {\n            $letter[]\
    \ = \"E\";\n        }\n    }\n    return $letter;\n}\n\n/**\n * Grade Equation\n\
    \ * \n * Input: $grades = array( [4.0, 3, 1.7, 2, 3.5] )\n * \n * Output: array('A',\
    \ 'B', 'C', 'C', 'A')\n */\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirfbwttm.php:90\n\
    Stack trace:\n#0 /tmp/tmpirfbwttm.php(98): test()\n#1 {main}\n  thrown in /tmp/tmpirfbwttm.php\
    \ on line 90\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  if(!is_array($grades))\
    \ die(\"grades must be an array\");\n  if(count($grades)<2) die(\"grades must\
    \ have at least 2 elements\");\n  $letterGrades = array();\n  $sum = 0;\n  foreach($grades\
    \ as $grade) {\n    $sum += $grade;\n  }\n  if($sum>100) die(\"sum of grades must\
    \ be less than 100\");\n  if($sum<0) die(\"sum of grades must be greater than\
    \ 0\");\n  for($i = 0; $i<count($grades); $i++) {\n    $letterGrades[$i] = null;\n\
    \    if($grades[$i]>=0) {\n      if($sum>0) {\n        if($sum>4.0 && $sum<=6.9)\
    \ $letterGrades[$i] = 'A+';\n        elseif($sum>6.9 && $sum<=8.9) $letterGrades[$i]\
    \ = 'A';\n        elseif($sum>8.9 && $sum<=10.1) $letterGrades[$i] = 'A-';\n \
    \       elseif($sum>10.1 && $sum<=12.9) $letterGrades[$i] = 'B+';\n        elseif($sum>12.9\
    \ && $sum<=14.9) $letterGrades[$i] = 'B';\n        elseif($sum>14.9 && $sum<=16.0)\
    \ $letterGrades[$i] = 'B-';\n        elseif($sum>16.0 && $sum<=17.9) $letterGrades[$i]\
    \ = 'C+';\n        elseif($sum>17.9 && $sum<=19.9) $letterGrades[$i] = 'C';\n\
    \        elseif($sum>19.9 && $sum<=21.0) $letterGrades[$i] = 'C-';\n        elseif($sum>21.0)\
    \ $letterGrades[$i] = 'D+';\n        else $letterGrades[$i] = 'D';\n      }\n\
    \      else {\n        if($sum>0) $letterGrades[$i] = 'E';\n      }\n    }\n \
    \ }\n  usort($letterGrades, function($a, $b) { return $b - $a; });\n  return $letterGrades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp0t5w4sfl.php on line\
    \ 54\n\nWarning: A non-numeric value encountered in /tmp/tmp0t5w4sfl.php on line\
    \ 54\n\nWarning: A non-numeric value encountered in /tmp/tmp0t5w4sfl.php on line\
    \ 54\n\nWarning: A non-numeric value encountered in /tmp/tmp0t5w4sfl.php on line\
    \ 54\n\nWarning: A non-numeric value encountered in /tmp/tmp0t5w4sfl.php on line\
    \ 54\n\nWarning: A non-numeric value encountered in /tmp/tmp0t5w4sfl.php on line\
    \ 54\n\nWarning: A non-numeric value encountered in /tmp/tmp0t5w4sfl.php on line\
    \ 54\n\nWarning: A non-numeric value encountered in /tmp/tmp0t5w4sfl.php on line\
    \ 54\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t5w4sfl.php:63\n\
    Stack trace:\n#0 /tmp/tmp0t5w4sfl.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp0t5w4sfl.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8x2v_ek.php:32\n\
    Stack trace:\n#0 /tmp/tmpc8x2v_ek.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpc8x2v_ek.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $total = array_sum($grades);\n\
    \    $grades = array_map('round', $grades); // Make all grades rounded\n    $grades\
    \ = array_map(function($item) { return ($item/$total) * 100; }, $grades); // Convert\
    \ percentages to decimal fractions\n    $grades = array_map(function($item) {\
    \ return chr(ord('A') + $item - 1); }, $grades); // Convert letters to letter\
    \ grades\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp0493zypa.php on line 26\n\nWarning:\
    \ Division by zero in /tmp/tmp0493zypa.php on line 26\n\nWarning: Division by\
    \ zero in /tmp/tmp0493zypa.php on line 26\n\nWarning: Division by zero in /tmp/tmp0493zypa.php\
    \ on line 26\n\nWarning: Division by zero in /tmp/tmp0493zypa.php on line 26\n\
    \nWarning: chr() expects parameter 1 to be int, float given in /tmp/tmp0493zypa.php\
    \ on line 27\n\nWarning: chr() expects parameter 1 to be int, float given in /tmp/tmp0493zypa.php\
    \ on line 27\n\nWarning: chr() expects parameter 1 to be int, float given in /tmp/tmp0493zypa.php\
    \ on line 27\n\nWarning: chr() expects parameter 1 to be int, float given in /tmp/tmp0493zypa.php\
    \ on line 27\n\nWarning: chr() expects parameter 1 to be int, float given in /tmp/tmp0493zypa.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0493zypa.php:36\n\
    Stack trace:\n#0 /tmp/tmp0493zypa.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0493zypa.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ implementation below:\n    $num_grades = array_count_values($grades);\n    $output\
    \ = '';\n    foreach ($num_grades as $letter => $number) {\n        if ($number\
    \ > 0 && $number <= 4) { $output .= $letter.'+';}\n        elseif ($number > 4\
    \ && $number <= 7) { $output .= $letter.'-';}\n        elseif ($number > 7 &&\
    \ $number <= 9) { $output .= $letter.'+';}\n        elseif ($number > 9 && $number\
    \ <= 12) { $output .= $letter.'-';}\n        elseif ($number > 12) { $output .=\
    \ $letter.'D+';}\n    }\n    return $output;\n}\necho \"The teacher's answer is:\
    \ \".$grade_equation([4.0, 3, 1.7, 2, 3.5]).'<br>';\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis is an answer to the question asked, however, the function will fail\
    \ for any grades less than zero (the else if condition will never be met) and\
    \ will also fail if any number of grades is zero or less than zero (the if condition\
    \ will never be met).\n<|/ c |>\n<| a tags=php,arrays,sorting |>\nYou just need\
    \ to use array_count_values function. \n<code>\n$grades = array(4.0, 3, 1.7, 2,\
    \ 3.5);\n$grades = array_count_values($grades);\nvar_dump($grades);\n</code>\n\
    Output\n<code>\narray(5) {\n  [4] => 1\n  [3] => 1\n  [1.7] => 1\n  [2] => 1\n\
    \  [3.5] => 1\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is an answer to the\
    \ question asked, however, the function will fail for any grades less than zero\
    \ (the else if condition will never be met) and will also fail if any number of\
    \ grades is zero or less than zero (the if condition will never be met).\n<|/\
    \ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgt66j_az.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // Write your\
    \ code here!\n}\n\n$output = grade_equation([4.0, 3, 1.7, 2, 3.5]); // ['A+',\
    \ 'B', 'C-', 'C', 'A-']\necho \"<br />\";\necho \"Output:\\n\";\necho \"<br />\"\
    ;\nprint_r($output);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function grade_equation()\
    \ in /tmp/tmpn7yws5bv.php:27\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpn7yws5bv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // TODO: Implement\
    \ me \n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9_aiago.php:31\n\
    Stack trace:\n#0 /tmp/tmpa9_aiago.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa9_aiago.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $result = array();\n\
    \  foreach($grades as $grade) {\n    if($grade == 0) {\n      $result[] = 'E';\n\
    \      continue;\n    }\n\n    if($grade < 3.0) {\n      $result[] = 'D-';\n \
    \   } else if($grade < 3.7) {\n      $result[] = 'D';\n    } else if($grade <\
    \ 4.0) {\n      $result[] = 'C-';\n    } else if($grade < 4.7) {\n      $result[]\
    \ = 'C';\n    } else if($grade < 5.0) {\n      $result[] = 'B-';\n    } else if($grade\
    \ < 5.7) {\n      $result[] = 'B';\n    } else if($grade < 6.0) {\n      $result[]\
    \ = 'B-';\n    } else if($grade < 6.7) {\n      $result[] = 'B';\n    } else if($grade\
    \ < 7.0) {\n      $result[] = 'A-';\n    } else if($grade < 7.7) {\n      $result[]\
    \ = 'A';\n    } else if($grade < 8.0) {\n      $result[] = 'A-';\n    } else if($grade\
    \ < 8.7) {\n      $result[] = 'A';\n    } else if($grade < 9.0) {\n      $result[]\
    \ = 'A+';\n    } else if($grade < 9.7) {\n      $result[] = 'A';\n    } else if($grade\
    \ < 10.0) {\n      $result[] = 'A+';\n    } else if($grade < 10.7) {\n      $result[]\
    \ = 'A';\n    } else if($grade < 11.0) {\n      $result[] = 'C+';\n    } else\
    \ if($grade < 11.7) {\n      $result[] = 'C';\n    } else if($grade < 12.0) {\n\
    \      $result[] = 'C+';\n    } else if($grade < 12.7) {\n      $result[] = 'C';\n\
    \    } else if($grade < 13.0) {\n      $result[] = 'B-';\n    } else if($grade\
    \ < 13.7) {\n      $result[] = 'B';\n    } else if($grade < 14.0) {\n      $result[]\
    \ = 'B-';\n    } else if($grade < 14.7) {\n      $result[] = 'B';\n    } else\
    \ if($grade < 15.0) {\n      $result[] = 'A-';\n    } else if($grade < 15.7) {\n\
    \      $result[] = 'A';\n    } else if($grade < 16.0) {\n      $result[] = '\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwdslalfw.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_filter($grades);\n    if (count($grades) != count(array_unique($grades)))\
    \ {\n        // the grades are the same but they aren't unique\n        return\
    \ false;\n    }\n    // the grades are unique\n    sort($grades);\n    $grades_count\
    \ = count($grades);\n    // get the highest and lowest grade\n    $highest_grade\
    \ = array_pop($grades);\n    $lowest_grade = array_pop($grades);\n    $grades\
    \ = array_unique($grades);\n\n    if ($grades_count < 10) {\n        // there\
    \ is no grades so there isn't a grade equation\n        return false;\n    }\n\
    \    $grades_array = array();\n    $sum_of_grades = 0;\n    foreach ($grades as\
    \ $grade) {\n        $grade = explode('.', $grade);\n        $grade = (float)\
    \ $grade[0];\n        $grades_array[] = $grade;\n        $sum_of_grades += $grade;\n\
    \    }\n    $sum_of_grades = $sum_of_grades / $grades_count;\n    // iterate through\
    \ grades from lowest to highest\n    $grade_index = -1;\n    $letter_grade = FALSE;\n\
    \    $letter_grades = array();\n    for ($i = 0; $i < $grades_count; $i++) {\n\
    \        $grade = $grades_array[$i];\n        if ($grade >= $lowest_grade && $grade\
    \ <= $highest_grade) {\n            if ($grade_index < 0) {\n                $grade_index\
    \ = $i;\n            }\n            if ($grade <= $highest_grade) {\n        \
    \        $letter_grades[$grade_index] = '+';\n                $letter_grade =\
    \ $grades[$i];\n                $grade_index--;\n            } elseif ($grade\
    \ >= $lowest_grade) {\n                $letter_grades[$grade_index] = '-';\n \
    \               $letter_grade = $grades[$i];\n                $grade_index--;\n\
    \            } else {\n                $letter_grades[$grade_index] = '*';\n \
    \               $letter_grade = $grades[$i];\n                $grade_index--;\n\
    \            }\n        }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfx5gx2fs.php:82\n\
    Stack trace:\n#0 /tmp/tmpfx5gx2fs.php(90): test()\n#1 {main}\n  thrown in /tmp/tmpfx5gx2fs.php\
    \ on line 82\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grade\
    \ = '';\n  $num_grades = count($grades);\n  // If there are just 2 grades then\
    \ they have not had any letter grade calculated\n  if($num_grades == 2) {\n  \
    \  $letter_grade = 'A';\n  } elseif($num_grades == 3) {\n    if($grades[1] > 3.7)\
    \ {\n      $letter_grade = 'A+';\n    } elseif($grades[1] > 3.3) {\n      $letter_grade\
    \ = 'A';\n    } elseif($grades[1] > 3) {\n      $letter_grade = 'A-';\n    }\n\
    \    if($grades[2] > 3.7) {\n      $letter_grade .= 'B+';\n    } elseif($grades[2]\
    \ > 3.3) {\n      $letter_grade .= 'B';\n    } elseif($grades[2] > 3) {\n    \
    \  $letter_grade .= 'B-';\n    }\n    $letter_grade .= 'C+';\n  } elseif($num_grades\
    \ == 4) {\n    if($grades[1] > 3.7) {\n      $letter_grade = 'A+';\n    } elseif($grades[1]\
    \ > 3.3) {\n      $letter_grade = 'A';\n    } elseif($grades[1] > 3) {\n     \
    \ $letter_grade = 'A-';\n    }\n    if($grades[2] > 3.7) {\n      $letter_grade\
    \ .= 'B+';\n    } elseif($grades[2] > 3.3) {\n      $letter_grade .= 'B';\n  \
    \  } elseif($grades[2] > 3) {\n      $letter_grade .= 'B-';\n    }\n    if($grades[3]\
    \ > 3.7) {\n      $letter_grade .= 'C+';\n    } elseif($grades[3] > 3.3) {\n \
    \     $letter_grade .= 'C';\n    } elseif($grades[3] > 3) {\n      $letter_grade\
    \ .= 'C-';\n    }\n    $letter_grade .= 'D+';\n  } elseif($num_grades == 5) {\n\
    \    if($grades[1] > 3.7) {\n      $letter_grade = 'A+';\n    } elseif($grades[1]\
    \ > 3.3) {\n      $letter_grade = 'A';\n    } elseif($grades[1] > 3) {\n     \
    \ $letter_grade = 'A-';\n    }\n    if($grades[2] > 3.7) {\n      $letter_grade\
    \ .= 'B+';\n    } elseif($grades[2] > 3.3) {\n      $letter_grade .= 'B';\n  \
    \  } elseif($grades[2] > 3) {\n      $letter_grade .= 'B-';\n    }\n    if($grades[3\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfusay79c.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades = array_map('round',\
    \ array_map('intval', $grades));\n  $grades[3] = 'B+';\n  $grades[2] = 'B';\n\
    \  $grades[1] = 'B-';\n  $grades[0] = 'C+';\n  $grades[5] = 'C';\n  $grades[4]\
    \ = 'C-';\n  $grades[6] = 'D+';\n  $grades[7] = 'D';\n  $grades[8] = 'D-';\n \
    \ $grades[9] = 'E';\n\n  return $grades;\n}\n\n/**\n * Takes an array and returns\
    \ the highest value.\n */\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr50e3l4r.php:47\n\
    Stack trace:\n#0 /tmp/tmpr50e3l4r.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpr50e3l4r.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\tglobal $grade_letters,\
    \ $grade_letters_text;\n\t$grades = array_filter($grades, 'is_numeric');\n\t$grades\
    \ = array_filter($grades, 'is_finite');\n\t$grades = array_filter($grades);\n\t\
    $gpa_array = $grade_letters['gpa'];\n\t$letters = array();\n\tforeach ($grades\
    \ as $gpa) {\n\t\t$letter = $gpa;\n\t\t$index = 0;\n\t\twhile (isset($gpa_array[$index]))\
    \ {\n\t\t\tif ($gpa >= $gpa_array[$index][0] && $gpa <= $gpa_array[$index][1])\
    \ {\n\t\t\t\t$letter = $grade_letters[$grade_letters_text[$index]]['letter_grade'];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\t\t$letters[] = $letter;\n\t\
    }\n\treturn $letters;\n}\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0jzqn1x.php:49\n\
    Stack trace:\n#0 /tmp/tmpf0jzqn1x.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpf0jzqn1x.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    // The result\
    \ will store the letter grade of each student grade.\n    $letter_grades = array();\n\
    \    \n    // The maximum value of GPA.\n    $max_grade = max( $grades );\n  \
    \  \n    // The minimum value of GPA.\n    $min_grade = min( $grades );\n\n  \
    \  // The average value of GPA.\n    $avg_grade = array_sum($grades) / count($grades);\n\
    \n    // If the grade is between 3.0 and 3.7, the letter grade is \"A+\".\n  \
    \  if ( $avg_grade >= 3.0 &&  $avg_grade <= 3.7 )\n        $letter_grades[] =\
    \ 'A+';\n    \n    // If the grade is between 3.3 and 3.7, the letter grade is\
    \ \"A-\".\n    else if ( $avg_grade >= 3.3 &&  $avg_grade <= 3.7 )\n        $letter_grades[]\
    \ = 'A-';\n    \n    // If the grade is between 3.0 and 3.3, the letter grade\
    \ is \"B+\".\n    else if ( $avg_grade >= 3.0 &&  $avg_grade <= 3.3 )\n      \
    \  $letter_grades[] = 'B+';\n    \n    // If the grade is between 2.7 and 3.1,\
    \ the letter grade is \"B\".\n    else if ( $avg_grade >= 2.7 &&  $avg_grade <=\
    \ 3.1 )\n        $letter_grades[] = 'B';\n    \n    // If the grade is between\
    \ 2.3 and 3.1, the letter grade is \"B-\".\n    else if ( $avg_grade >= 2.3 &&\
    \  $avg_grade <= 3.1 )\n        $letter_grades[] = 'B-';\n    \n    // If the\
    \ grade is between 2.0 and 3.7, the letter grade is \"C+\".\n    else if ( $avg_grade\
    \ >= 2.0 &&  $avg_grade <= 3.7 )\n        $letter_grades[] = 'C+';\n    \n   \
    \ // If the grade is between 1.7 and 3.3, the letter grade is \"C\".\n    else\
    \ if ( $avg_grade >= 1.7 &&  $avg_grade <= 3.3 )\n        $letter_grades[] = 'C';\n\
    \    \n    // If the grade is between 1.3 and 3.3, the letter grade is \"C-\"\
    .\n    else if ( $avg_grade >= 1.3 &&  $avg_grade <= 3.3 )\n        $letter_grades[]\
    \ = 'C-';\n    \n    // If the grade is between 1.0 and 3.7, the letter grade\
    \ is \"D+\".\n    else if ( $avg_grade >= 1.0 &&  $avg_grade <= 3.7 )\n      \
    \  $letter_grades[] = 'D+';\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4f3bqzce.php on line 85\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    $max_grade = max($grades);\n    \n    foreach ($grades as $grade)\
    \ {\n        $letter_grades[$grade] = get_letter_grade($grade);\n    }\n    \n\
    \    foreach ($letter_grades as $grade => $letter) {\n        if ($grade == $max_grade)\
    \ {\n            $letter_grades[$max_grade] = get_letter_grade($max_grade);\n\
    \        }\n    }\n    \n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_letter_grade()\
    \ in /tmp/tmpobep8doo.php:28\nStack trace:\n#0 /tmp/tmpobep8doo.php(41): numerical_letter_grade(Array)\n\
    #1 /tmp/tmpobep8doo.php(45): candidate(Array)\n#2 /tmp/tmpobep8doo.php(53): test()\n\
    #3 {main}\n  thrown in /tmp/tmpobep8doo.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
