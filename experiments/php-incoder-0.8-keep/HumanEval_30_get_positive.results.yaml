name: HumanEval_30_get_positive
language: php
results:
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  foreach\
    \ ($l as $key => $value) {\n    $l[$key] = $value >= 0 ? $value : false;\n  }\n\
    \  return $l;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppg1k4el0.php:19\n\
    Stack trace:\n#0 /tmp/tmppg1k4el0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppg1k4el0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ sort($l);\n    $out = array();\n    $first = 0;\n    foreach ($l as $item) {\n\
    \        if ($item < 0) {\n            if ($first != 0) {\n                $out[]\
    \ = $first;\n                $first = 0;\n            }\n            $out[] =\
    \ $item;\n        } else {\n            $first = $item;\n        }\n    }\n  \
    \  return $out;\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,algorithm |>\nJust\
    \ add all positive numbers and remove negative numbers from original array.\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptjakcdii.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $s\
    \ = $l ? array_filter($l, 'is_int') : [];\n  return array_filter($s, 'is_positive');\n\
    }\n\n/**\n * Return only integers in the list. Empty list will return an empty\
    \ array.\n * >>> get_integer([-4, 0, 2, 10, 0])\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 12 in /tmp/tmpkodedgme.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($number) { return $number\
    \ > 0; },\n        ARRAY_FILTER_USE_BOTH\n    );\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 tags=php,functional-programming,algorithm,arrays |>\nA simple example\
    \ - but as far as I know it doesn't work very well for very large lists, it might\
    \ be better to use iterators instead of array_filter. \n<code>\n$l = [-1, 2, -4,\
    \ 5, 6]; // initial list\n$l = array_filter(\n    $l,\n    function($v) {\n  \
    \      return ($v >= 0);\n    },\n    ARRAY_FILTER_USE_BOTH\n);\nprint_r($l);\n\
    </code>\n<|/ a |>\n<| c |>\nNice! I added your `get_positive` function to your\
    \ answer. :)\n<|/ c |>\n<| a tags=php,functional-programming,algorithm,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc54immsb.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positive = [];\n    foreach ($l as $e) {\n        if ($e >= 0)\n          \
    \  $positive[] = $e;\n    }\n    return $positive;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gfevsey.php:22\n\
    Stack trace:\n#0 /tmp/tmp_gfevsey.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_gfevsey.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, \"is_numeric\", ARRAY_FILTER_USE_BOTH);\n}\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmp9vjdjwl7.php\
    \ on line 8\n\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmp9vjdjwl7.php\
    \ on line 8\n\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmp9vjdjwl7.php\
    \ on line 8\n\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmp9vjdjwl7.php\
    \ on line 8\n\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmp9vjdjwl7.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vjdjwl7.php:15\n\
    Stack trace:\n#0 /tmp/tmp9vjdjwl7.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp9vjdjwl7.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($v) { return $v > 0; });\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps91qn4s8.php:15\n\
    Stack trace:\n#0 /tmp/tmps91qn4s8.php(21): test()\n#1 {main}\n  thrown in /tmp/tmps91qn4s8.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positive = [];\n    foreach ($l as $value) {\n        if ($value > 0) {\n \
    \           $positive[] = $value;\n        }\n    }\n    return $positive;\n}\n\
    \nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $a = array();\n    foreach($l as $k => $v) {\n        if ($v >= 0)\n       \
    \     $a[] = $v;\n    }\n    return $a;\n}\nfunction candidate(...$args) {\n \
    \   return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg31zq_72.php:21\n\
    Stack trace:\n#0 /tmp/tmpg31zq_72.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpg31zq_72.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $pos\
    \ = 0;\n  $pos_arr = [];\n  foreach ($l as $k=>$v) {\n    if (!is_int($v)) {\n\
    \      return false;\n    }\n    if ($v > 0) {\n      $pos_arr[] = $v;\n    }\
    \ else {\n      $pos++;\n    }\n  }\n  if ($pos) {\n    return $pos_arr;\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_zc3iv4.php:34\n\
    Stack trace:\n#0 /tmp/tmpi_zc3iv4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpi_zc3iv4.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positives = [];\n    foreach ($l as $value) {\n        if ($value > 0) {\n\
    \            $positives[] = $value;\n        }\n    }\n    return $positives;\n\
    }\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $l = $l ? $l : array();\n    $a = array();\n    $n = 0;\n    foreach ($l as\
    \ $i => $v) {\n        if ($v < 0) {\n            $n++;\n            $v *= -1;\n\
    \        }\n        $a[$n] = $v;\n    }\n    return array_slice($a, $n);\n}\n\n\
    function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2ipd_yt.php:26\n\
    Stack trace:\n#0 /tmp/tmpw2ipd_yt.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw2ipd_yt.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(\n    array_map('abs',\n               $l),\n    function ($val)\
    \ {\n      return $val > 0;\n    }\n  );\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\nI know this is quite old but I thought I would share my solution\
    \ as I couldn't find one that would work for me and I needed a quick one-off solution\
    \ because I didn't need to refactor much code.\nThis solution should work for\
    \ most things, but not arrays of strings or anything else that has negative numbers\
    \ or integers in it.\n<code>\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjo0ifpn3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $a\
    \ = array();\n  foreach ($l as $k => $v) {\n    if ($v > 0) {\n      $a[] = $v;\n\
    \    }\n  }\n  return $a;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $result\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $result[] =\
    \ $value;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 tags=function,php\
    \ |>\n<| a dscore=1 |>\nAnother solution to this problem would be to return an\
    \ array:\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3n3qcqot.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($val) {\n        return $val > 0;\n    });\n\
    }\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bu5strn.php:18\n\
    Stack trace:\n#0 /tmp/tmp_bu5strn.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_bu5strn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $p = array();\n    foreach ($l as $item) {\n        if ($item >= 0) {\n    \
    \        $p[] = $item;\n        }\n    }\n    return $p;\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnhwv3rz.php:22\n\
    Stack trace:\n#0 /tmp/tmppnhwv3rz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmppnhwv3rz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  foreach\
    \ ($l as $k => $v) {\n    if ($v < 0) {\n      unset($l[$k]);\n    }\n  }\n  return\
    \ $l;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnpbqpbz.php:21\n\
    Stack trace:\n#0 /tmp/tmprnpbqpbz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprnpbqpbz.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($n) {\n    return $n > 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn2io1hu.php:18\n\
    Stack trace:\n#0 /tmp/tmpdn2io1hu.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdn2io1hu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  if\
    \ (is_array($l)) {\n    $r = array();\n    foreach ($l as $k => $v) {\n      if\
    \ ($v > 0) {\n        $r[] = $v;\n      }\n    }\n    return $r;\n  }\n  return\
    \ array();\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $out = [];\n    foreach ($l as $k => $v) {\n        if ($v > 0) {\n        \
    \    $out[] = $v;\n        }\n    }\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($v) { return $v > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckyc_jmn.php:16\n\
    Stack trace:\n#0 /tmp/tmpckyc_jmn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckyc_jmn.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($v) { return $v >= 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0c_o94r9.php:16\n\
    Stack trace:\n#0 /tmp/tmp0c_o94r9.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0c_o94r9.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ foreach ($l as $key => $value) {\n        $l[$key] = ($value > 0) ? $value :\
    \ NULL;\n    }\n    return $l;\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\n\
    function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm8fx4fne.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = array();\n  foreach($l as $val) {\n    if($val > 0) $positive[] = $val;\n\
    \  }\n  return $positive;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $i\
    \ = 1;\n  $output = [];\n  foreach ($l as $e) {\n    if ($e > 0) {\n      $output[]\
    \ = $e;\n      $i++;\n    }\n  }\n  if ($i == count($l)) {\n    return $l;\n \
    \ }\n  return $output;\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($x) {\n        return $x >= 0;\n    });\n}\n\
    \n$nr = 1;\nwhile (!@$res = mysql_query($query)) {\n    if (!$nr++) die ('Error:\
    \ ' . mysql_error());\n}\n\n$data = array();\nwhile ($row = mysql_fetch_array($res,\
    \ MYSQL_ASSOC)) {\n    $data[] = $row;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mysql_query()\
    \ in /tmp/tmpa0org8cf.php:14\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpa0org8cf.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($x) { return $x > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01_pudv_.php:16\n\
    Stack trace:\n#0 /tmp/tmp01_pudv_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp01_pudv_.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positives = array();\n    foreach($l as $value) {\n        if ($value > 0)\
    \ {\n            $positives[] = $value;\n        }\n    }\n    return $positives;\n\
    }\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($v) { return $v > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphecaeli4.php:16\n\
    Stack trace:\n#0 /tmp/tmphecaeli4.php(22): test()\n#1 {main}\n  thrown in /tmp/tmphecaeli4.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($value) {\n    return ($value > 0);\n  });\n}\n\n\
    function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bnll0k6.php:18\n\
    Stack trace:\n#0 /tmp/tmp9bnll0k6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9bnll0k6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $item) {\n    if ($item > 0) {\n      $positive[] =\
    \ $item;\n    }\n  }\n  return $positive;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($a) { return $a > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8iaksczf.php:16\n\
    Stack trace:\n#0 /tmp/tmp8iaksczf.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8iaksczf.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($v) {\n        return $v >= 0;\n    });\n}\n\
    \n/**\n * Get an array of all positive numbers in the given list.\n *\n * @example\
    \ get_positive([-1, 2, -4, 5, 6])\n * @returns array\n *\n * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::extract\n\
    \ */\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbs9fd8za.php:26\n\
    Stack trace:\n#0 /tmp/tmpbs9fd8za.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbs9fd8za.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(\n    $l,\n    function ($n) {\n      return $n > 0;\n    }\n \
    \ );\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0u7udjkp.php:20\n\
    Stack trace:\n#0 /tmp/tmp0u7udjkp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0u7udjkp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($x) { return $x > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsr23b86j.php:16\n\
    Stack trace:\n#0 /tmp/tmpsr23b86j.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpsr23b86j.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ foreach ($l as $i => $v) {\n        if (!is_int($v)) $l[$i] = $v; // Convert\
    \ non-integers to integers.\n        if ($v < 0) $l[$i] = -$v; // Set negative\
    \ numbers to negative.\n        if ($v == 0) $l[$i] = 0; // Remove zeros.\n  \
    \  }\n    return array_filter($l, function($v) { return $v > 0; });\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hvqbje5.php:21\n\
    Stack trace:\n#0 /tmp/tmp6hvqbje5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6hvqbje5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function($x) {\n            return\
    \ $x >= 0;\n        }\n    );\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcm9ubv1.php:21\n\
    Stack trace:\n#0 /tmp/tmplcm9ubv1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplcm9ubv1.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ sort($l);\n    $positive = array();\n    foreach ($l as $i => $v) {\n      \
    \  if ($v > 0) {\n            $positive[$i] = $v;\n        }\n    }\n    return\
    \ $positive;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51b52nlt.php:23\n\
    Stack trace:\n#0 /tmp/tmp51b52nlt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp51b52nlt.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($v) {\n    return $v > 0;\n  });\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4scbqnmj.php:17\n\
    Stack trace:\n#0 /tmp/tmp4scbqnmj.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4scbqnmj.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $result\
    \ = [];\n  foreach ($l as $num) {\n    if ($num >= 0) {\n      $result[] = $num;\n\
    \    }\n  }\n  return $result;\n}\n</code>\nIn response to comments:\n\nHow can\
    \ I add more items to the array?\n\nI assumed the above functions are already\
    \ defined, so all you have to do is call them (preferably with some error checking),\
    \ e.g.\n<code>\n$result = get_positive($a) + get_negative($b) + get_even($c);\n\
    </code>\nwhere $a, $b, $c are whatever your input arrays are.\n\nHow can I get\
    \ the sum of the items in the array?\n\nIf you want a simple sum, e.g.\n<code>\n\
    $sum = array_sum($result)\n</code>\nIf you want the sum with the \"total\" array\
    \ keys:\n<code>\n$sum = $result[array_sum(array_keys($result))]\n</code>\n\nHow\
    \ can I get the average of the items in the array?\n\n<code>\n$average = array_sum($result)\
    \ / count($result)\n</code>\n<|/ a |>\n<| c |>\nCan you please add more items\
    \ to this array?\n<|/ c |>\n<| c |>\nHow can i get the sum of items in array?\n\
    <|/ c |>\n<| c |>\nJust `array_sum($result)`\n<|/ c |>\n<| c |>\nThank you very\
    \ much! How can I get the sum of items in the array?\n<|/ c |>\n<| c |>\nJust\
    \ `array_sum($result)`\n<|/ c |>\n<| a tags=php |>\nThere are many ways to do\
    \ this. Below is an example using array_filter and array_sum:\n<code>\n$arr1 =\
    \ [1, 3, 5, 4, 2];\n$arr2 = [2, 4, 3, 6, 5];\n\n$arr1 = array_filter($arr1, function\
    \ ($item) { return $item > 3; });\n$arr2 = array_filter($arr2, function ($item)\
    \ { return $item > 3; });\n\necho array_sum($arr1);\necho array_sum($arr2);\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nHow can i get the sum of items in array?\n\
    <|/ c |>\n<| c |>\nJust `array_sum($arr1)` or `array_sum($arr2)`\n<|/ c |>\n<|\
    \ a tags=php |>\nYou can use this code:\n<code>\n$array1 = array();\n$array2 =\
    \ array();\n$array3 = array();\n$array4 = array();\n\n$array1[] = 1;\n$array1[]\
    \ = 2;\n$array1[] = 3;\n$array1[] = 4;\n$array1[] = 5;\n\n$\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfuyvz4ib.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(\n    $l,\n    function ($number) {\n      return $number >= 0;\n\
    \    }\n  );\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgc3znu1p.php:20\n\
    Stack trace:\n#0 /tmp/tmpgc3znu1p.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgc3znu1p.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $l = array_filter($l);\n    $l = array_map('abs', $l);\n    return array_filter($l);\n\
    }\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcs7v35we.php:17\n\
    Stack trace:\n#0 /tmp/tmpcs7v35we.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpcs7v35we.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($v) {\n            return\
    \ $v > 0;\n        }\n    );\n}\n</code>\n<|/ a tags=php,arrays,recursion dscore=2\
    \ |>\n<| c |>\nThanks, that was exactly what I was looking for. However I think\
    \ it's quite unefficient: it builds two new arrays (with array_filter which requires\
    \ building a new array) and then merges them.\n<|/ c |>\n<| c |>\nYou can avoid\
    \ that by using array_walk with a custom callback function. See my answer.\n<|/\
    \ c |>\n<| a tags=php,arrays,recursion |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_gka4lf7.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(\n    $l,\n    function ($value) {\n      return ($value >= 0);\n\
    \    }\n  );\n}\n\n/**\n * Returns a new array containing all the values from\
    \ $l which are\n * not equal to $value.\n *\n * >>> get_not_equal([-1, 2, -4,\
    \ 5, 6], -1)\n * [2, 4, 5, 6]\n * >>> get_not_equal([-1, 2, -4, 5, 6], 5)\n *\
    \ []\n * >>> get_not_equal([-1, 2, -4, 5, 6], 2)\n * [-4, -5]\n *\n * @example\
    \ get_not_equal([1, -2, 3, 4], [4, 1])\n * @returns array new array with only\
    \ values from $l which are not equal to $value\n */\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bk_pcgn.php:35\n\
    Stack trace:\n#0 /tmp/tmp2bk_pcgn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2bk_pcgn.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $r = array();\n    foreach ($l as $v) {\n        if ($v > 0) $r[] = $v;\n  \
    \  }\n    return $r;\n}\n\n$list = get_positive(array(5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10));\n$first = $list[0];\n$last  = end($list);\n\n$prev = $first;\n\
    while ($prev != $last) {\n    $prev = prev($prev);\n}\n$prev = prev($prev);\n\
    while ($prev !== $first) {\n    $prev = prev($prev);\n    $prev = prev($prev);\n\
    }\n\n$prev = $first;\nwhile ($prev != $last) {\n    $prev = prev($prev);\n}\n\
    $next = next($first);\nwhile ($prev !== $first) {\n    $next = next($prev);\n\
    \    $prev = prev($prev);\n}\n\n$prev = $first;\nwhile ($prev != $last) {\n  \
    \  $prev = prev($prev);\n}\n$next = next($first);\nwhile ($prev !== $first) {\n\
    \    $next = next($prev);\n    $prev = prev($prev);\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "b'\\nWarning: prev() expects parameter 1 to be array, int given in /tmp/tmpijyga0dv.php\
    \ on line 21\\n\\nWarning: prev() expects parameter 1 to be array, null given\
    \ in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev() expects parameter 1\
    \ to be array, null given in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev()\
    \ expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php on line\
    \ 21\\n\\nWarning: prev() expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php\
    \ on line 21\\n\\nWarning: prev() expects parameter 1 to be array, null given\
    \ in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev() expects parameter 1\
    \ to be array, null given in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev()\
    \ expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php on line\
    \ 21\\n\\nWarning: prev() expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php\
    \ on line 21\\n\\nWarning: prev() expects parameter 1 to be array, null given\
    \ in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev() expects parameter 1\
    \ to be array, null given in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev()\
    \ expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php on line\
    \ 21\\n\\nWarning: prev() expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php\
    \ on line 21\\n\\nWarning: prev() expects parameter 1 to be array, null given\
    \ in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev() expects parameter 1\
    \ to be array, null given in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev()\
    \ expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php on line\
    \ 21\\n\\nWarning: prev() expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php\
    \ on line 21\\n\\nWarning: prev() expects parameter 1 to be array, null given\
    \ in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev() expects parameter 1\
    \ to be array, null given in /tmp/tmpijyga0dv.php on line 21\\n\\nWarning: prev()\
    \ expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php on line\
    \ 21\\n\\nWarning: prev() expects parameter 1 to be array, null given in /tmp/tmpijyga0dv.php\
    \ o"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  array_filter($l,\
    \ function ($v) {\n    return $v > 0;\n  });\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhpm44ee.php:18\n\
    Stack trace:\n#0 /tmp/tmpyhpm44ee.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpyhpm44ee.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(\n    array_map('abs', $l),\n    function ($x) { return $x >= 0;\
    \ }\n  );\n}\n</code>\nThe final function will then only return positive values\
    \ from $l.\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI made a solution based on some\
    \ simple math (I didn't want to use abs or array_sum) and a couple of tricks using\
    \ array_filter and array_map.\n<code>\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps9ck45_p.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($n) { return $n > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1q9enm8i.php:16\n\
    Stack trace:\n#0 /tmp/tmp1q9enm8i.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp1q9enm8i.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  foreach\
    \ ($l as $value) {\n    if ($value > 0) {\n      return $l;\n    }\n  }\n  return\
    \ $l;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitwk4kqd.php:21\n\
    Stack trace:\n#0 /tmp/tmpitwk4kqd.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpitwk4kqd.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(\n      $l,\n      function ($v) use (&$positive) {\n        return\
    \ $v > 0;\n      },\n      ARRAY_FILTER_USE_BOTH\n  );\n}\n\n/**\n * Return only\
    \ negative numbers in the list.\n * >>> get_negative([-1, 2, -4, 5, 6])\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 17 in /tmp/tmppubyql1p.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($item) use ($l) { return\
    \ $item > 0; },\n        ARRAY_FILTER_USE_BOTH\n    );\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgsdrt0e.php:19\n\
    Stack trace:\n#0 /tmp/tmpbgsdrt0e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbgsdrt0e.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($i) { return $i >= 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifxunsy9.php:16\n\
    Stack trace:\n#0 /tmp/tmpifxunsy9.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpifxunsy9.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\tforeach\
    \ ($l as $i) {\n\t\tif ($i > 0)\n\t\t\tbreak;\n\t}\n\n\treturn array_slice($l,\
    \ 0, $i);\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5bun8at.php:21\n\
    Stack trace:\n#0 /tmp/tmpw5bun8at.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpw5bun8at.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($item) { return $item >= 0; });\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkd4kkte_.php:16\n\
    Stack trace:\n#0 /tmp/tmpkd4kkte_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpkd4kkte_.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\treturn\
    \ array_filter(\n\t\t$l,\n\t\tfunction($v) use ($l)\n\t\t{\n\t\t\treturn ($v >\
    \ 0);\n\t\t}\n\t);\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf99yd5re.php:21\n\
    Stack trace:\n#0 /tmp/tmpf99yd5re.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpf99yd5re.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, 'is_numeric');\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9x5mlevd.php:16\n\
    Stack trace:\n#0 /tmp/tmp9x5mlevd.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp9x5mlevd.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ foreach ($l as $n) {\n        if ($n >= 0)\n            $ret[] = $n;\n    }\n\
    \    return $ret;\n}\n</code>\n<|/ a dscore=3 tags=php,arrays |>\n<| a dscore=2\
    \ |>\nYou could use array_filter:\n<code>\nfunction candidate(...$args) {\n  \
    \  return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp016gcjvw.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($v) { return $v >= 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptn0xi_gg.php:16\n\
    Stack trace:\n#0 /tmp/tmptn0xi_gg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmptn0xi_gg.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ foreach ($l as &$elem) {\n        if ($elem > 0) {\n            $elem++;\n \
    \       }\n    }\n    return $l;\n}\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n\
    <| a dscore=1 |>\nJust for fun I wrote this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphcvbo3og.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, 'is_numeric');\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknlqry81.php:16\n\
    Stack trace:\n#0 /tmp/tmpknlqry81.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpknlqry81.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $result\
    \ = array();\n  foreach ($l as $value) {\n    $result[] = $value >= 0 ? $value\
    \ : null;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8ht4v3.php:20\n\
    Stack trace:\n#0 /tmp/tmpkn8ht4v3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkn8ht4v3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($x) {\n            return\
    \ $x >= 0;\n        }\n    );\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1i8qenap.php:21\n\
    Stack trace:\n#0 /tmp/tmp1i8qenap.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1i8qenap.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positives\
    \ = array();\n  foreach ($l as $item) {\n    if ($item >= 0) {\n      $positives[]\
    \ = $item;\n    }\n  }\n  return $positives;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmnhw0zd.php:23\n\
    Stack trace:\n#0 /tmp/tmpmmnhw0zd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmmnhw0zd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\treturn\
    \ array_filter(\n\t\t$l,\n\t\tfunction($value) {\n\t\t\treturn $value >= 0;\n\t\
    \t}\n\t);\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvny4syw8.php:21\n\
    Stack trace:\n#0 /tmp/tmpvny4syw8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvny4syw8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, 'is_numeric', ARRAY_FILTER_USE_BOTH);\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmpl7ydnzee.php\
    \ on line 8\n\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmpl7ydnzee.php\
    \ on line 8\n\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmpl7ydnzee.php\
    \ on line 8\n\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmpl7ydnzee.php\
    \ on line 8\n\nWarning: is_numeric() expects exactly 1 parameter, 2 given in /tmp/tmpl7ydnzee.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl7ydnzee.php:16\n\
    Stack trace:\n#0 /tmp/tmpl7ydnzee.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpl7ydnzee.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  usort($l,\
    \ 'sort_positive');\n  return array_filter($l);\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_positive' not found or invalid function name in /tmp/tmpcf3xa1mx.php on\
    \ line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf3xa1mx.php:17\n\
    Stack trace:\n#0 /tmp/tmpcf3xa1mx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpcf3xa1mx.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $negative = array();\n    $positive = array();\n    foreach($l as $num) {\n\
    \        if ($num > 0) $positive[] = $num;\n        else $negative[] = $num;\n\
    \    }\n    return array_merge($negative, $positive);\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9yfxsao_.php:22\n\
    Stack trace:\n#0 /tmp/tmp9yfxsao_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9yfxsao_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $n\
    \ = count($l);\n  $lp = array();\n  for ($i = 0; $i < $n; ++$i) {\n    if ($l[$i]\
    \ > 0) {\n      $lp[] = $l[$i];\n    }\n  }\n  return $lp;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($x) {\n        return $x > 0; // Filter positive\
    \ numbers\n    });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis should be the\
    \ accepted answer.  It is the most elegant solution, and doesn't require any extra\
    \ processing after the initial extraction.\n<|/ c |>\n<| a tags=php |>\nI got\
    \ this code to work:\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp24aji_zr.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($number) {\n          \
    \  return $number > 0;\n        },\n        ARRAY_FILTER_USE_BOTH\n    );\n}\n\
    \n/**\n * Combines two arrays together and removes duplicates.\n *\n * @param\
    \ array $a The array to combine with the first array.\n * @param array $b The\
    \ array to combine with the second array.\n * @return array The combined array.\n\
    \ */\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzssmkfj5.php:29\n\
    Stack trace:\n#0 /tmp/tmpzssmkfj5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzssmkfj5.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($value) {\n        return $value > 0;\n  \
    \  });\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphaid83c4.php:18\n\
    Stack trace:\n#0 /tmp/tmphaid83c4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphaid83c4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(\n    $l,\n    function ($n) {\n      return $n >= 0;\n    }\n\
    \  );\n}\n</code>\nIt is not very elegant but it works and is easy to understand.\n\
    <|/ a dscore=5 |>\n<| c |>\nThank you so much for this elegant solution. Worked\
    \ perfectly.\n<|/ c |>\n<| c |>\nWhat is meant by \"not very elegant\"?  I am\
    \ interested in understanding why this is not a good solution.\n<|/ c |>\n<| c\
    \ |>\nIt's elegant, it's simple and it's readable, that's why I'm surprised that\
    \ no one has mentioned it yet. Also, it's simple and readable, because it doesn't\
    \ involve any unnecessary functions like `array_filter()`\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer! It works perfectly and it is extremely easy\
    \ to read and understand. I've been using it for quite a while now.\n<|/ c |>\n\
    <| c |>\nThe accepted answer doesn't include negative numbers because that wasn't\
    \ part of the question.\n<|/ c |>\n<| a tags=arrays,php,filtering |>\n<code>\n\
    $arr = [-1, 2, -4, 5, 6];\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjlekknb6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($v) { return $v > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfapukfb1.php:16\n\
    Stack trace:\n#0 /tmp/tmpfapukfb1.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpfapukfb1.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $a\
    \ = array();\n  foreach ($l as $e) {\n    if ($e > 0) {\n      $a[$e] = 1;\n \
    \   }\n  }\n  return array_keys($a);\n}\n\nfunction candidate(...$args) {\n  \
    \  return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpulq6yex7.php:23\n\
    Stack trace:\n#0 /tmp/tmpulq6yex7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpulq6yex7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($value) {\n    return $value >= 0;\n  });\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55s64j7b.php:18\n\
    Stack trace:\n#0 /tmp/tmp55s64j7b.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp55s64j7b.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, 'is_numeric', ARRAY_FILTER_USE_BOTH);\n}\n</code>\n<|/ a dscore=4\
    \ tags=arrays,php |>\n<| c |>\nNice answer, but why not use filter? `return array_filter($l,\
    \ 'is_numeric', ARRAY_FILTER_USE_BOTH);`\n<|/ c |>\n<| c |>\nI haven't actually\
    \ used filter (yet), but I see no reason not to use it this way. Maybe it is better\
    \ because it is shorter.\n<|/ c |>\n<| c |>\nI believe it is shorter and it also\
    \ uses more memory than using array_filter because of the extra array of booleans.\n\
    <|/ c |>\n<| c |>\nYou can remove that second parameter (`$l` here) and just do\
    \ `return array_filter($l, 'is_numeric');`. Because `ARRAY_FILTER_USE_BOTH` will\
    \ automatically set it to the `$l` argument. That means `$l` is now not needed\
    \ at all in that function.\n<|/ c |>\n<| a |>\nFor completeness, here's a solution\
    \ using array_filter:\n<code>\n<?php\n$numbers = [1, 2, 3, -4, -5, 6];\n\n$numbers\
    \ = array_filter($numbers, function ($value) {\n    return is_numeric($value);\n\
    });\n\nprint_r($numbers);\n</code>\nOutput:\n<code>\nArray\n(\n    [2] => 5\n\
    \    [4] => 3\n    [0] => 6\n)\n</code>\n<|/ a dscore=3 tags=arrays,php |>\n<|\
    \ c |>\nThanks for adding this solution! It still seems like a useful one to me.\n\
    <|/ c |>\n<| a tags=arrays,php |>\nYou can use array_filter also:\n<code>\n$numbers\
    \ = array(1,2,3,4,5,-6,-7);\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi3h7v84s.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\treturn\
    \ array_filter($l, function($v) {\n\t\treturn $v >=0;\n\t});\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybazr9q6.php:17\n\
    Stack trace:\n#0 /tmp/tmpybazr9q6.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpybazr9q6.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(array_map(function ($x) {\n    return $x >= 0;\n  }, $l), 'is_numeric');\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks again, this is a great and very\
    \ easy to understand answer. I think this is very similar to how I was trying\
    \ to do it, just without using the `array_filter` method.\n<|/ c |>\n<| a |>\n\
    Ok, so I spoke with someone who explained to me how to do it in Python, and he\
    \ pointed out that it was not possible with PHP, so I looked it up and found a\
    \ PHP equivalent:\n<code>\n$list = array(1, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\
    $positive = array_filter($list, function($x) {\n    return $x >= 0;\n});\nprint_r($positive);\n\
    </code>\nThis will output:\n<code>\nArray ( [2] => 2 [5] => 5 [6] => 3 )\n</code>\n\
    Which is exactly what I needed.\n<|/ a dscore=1 tags=arrays,php |>\n<| c |>\n\
    This can be shortened to `$positive = array_filter($list, 'is_numeric');`, see\
    \ [the official docs](http://php.net/manual/en/function.array-filter.php#refsect1-function.array-filter-examples)\n\
    <|/ c |>\n<| c |>\nTrue, but that requires PHP 5.3. In my situation, we are using\
    \ 5.3.5 so I can't use this solution.\n<|/ c |>\n<| c |>\nOh, my bad then, didn't\
    \ know you were on 5.3. Glad to help you find an answer.\n<|/ c |>\n<| a |>\n\
    <code>\n$positive = array_filter($array,function($v){\n    return (!is_numeric($v))\
    \ ? false : true;\n});\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| c |>\n\
    Can you explain what you did here?\n<|/ c |>\n<| a |>\nHere is another one that\
    \ uses the array_filter() function. This time it uses a combination of array_filter()\
    \ and array_map().\n<code>\n$negative = array_filter(array_map(function($x) {\n\
    \    return $x < 0;\n}, $list));\n</code>\nThe array_map() function is used to\
    \ create an array of positive numbers, and array_filter() is used to filter the\
    \ array to only contain the positive numbers.\n<|/ a dscore=0 tags=arrays,php\
    \ |>\n<| c |>\nThank you, I think that will work. However, I am looking for something\
    \ that uses less code than this.\n<|/ c |>\n<| c |>\nNo problem. \nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg7cxf8wy.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($x) { return $x > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyi8afddv.php:16\n\
    Stack trace:\n#0 /tmp/tmpyi8afddv.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpyi8afddv.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ foreach($l as $value) {\n        if ($value > 0) return $value;\n    }\n}\n\n\
    function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpajprmw7_.php:18\n\
    Stack trace:\n#0 /tmp/tmpajprmw7_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpajprmw7_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($el) {\n    return $el > 0;\n  });\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8mp3hb4.php:17\n\
    Stack trace:\n#0 /tmp/tmps8mp3hb4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmps8mp3hb4.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $f\
    \ = array();\n  foreach ($l as $key => $value) {\n    $f[$key] = $value;\n   \
    \ if ($value > 0) {\n      $f[$key] = 1;\n    }\n  }\n  return $f;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vtcodsr.php:23\n\
    Stack trace:\n#0 /tmp/tmp2vtcodsr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2vtcodsr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $pos\
    \ = array();\n  foreach($l as $item) {\n    if ($item >= 0) {\n      $pos[] =\
    \ $item;\n    }\n  }\n  return $pos;\n}\n\nfunction candidate(...$args) {\n  \
    \  return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6k78ybg0.php:23\n\
    Stack trace:\n#0 /tmp/tmp6k78ybg0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6k78ybg0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($x) { return $x >= 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqg1yr4ws.php:16\n\
    Stack trace:\n#0 /tmp/tmpqg1yr4ws.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpqg1yr4ws.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\t$positive\
    \ = [];\n\tforeach ($l as $item) {\n\t\tif ($item > 0) $positive[] = $item;\n\t\
    }\n\treturn $positive;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $result = [];\n    foreach ($l as $number) {\n        if ($number > 0)\n   \
    \         $result[] = $number;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($value) {\n    return $value > 0;\n  });\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk49emh3k.php:18\n\
    Stack trace:\n#0 /tmp/tmpk49emh3k.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpk49emh3k.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\tsort($l);\n\
    \t$positive = [];\n\tforeach ($l as $n) {\n\t\tif ($n > 0) {\n\t\t\t$positive[]\
    \ = $n;\n\t\t}\n\t}\n\treturn $positive;\n}\n\n/**\n * Get a random element from\
    \ an array, or return the entire array if\n * $num is negative\n *\n * @param\
    \ $array The array to choose from\n * @param $num Optional argument specifying\
    \ the number of elements to return\n *   from the array. If negative, return all\
    \ of the elements until the end of\n *   $array. Defaults to 1.\n * @return mixed\
    \ Either a single random element from $array, or the entire\n *   array if $num\
    \ is negative\n */\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwz5shmp.php:35\n\
    Stack trace:\n#0 /tmp/tmpdwz5shmp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdwz5shmp.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $out = array();\n    foreach ($l as $n) {\n        if ($n > 0) {\n         \
    \   $out[] = $n;\n        }\n    }\n    return $out;\n}\n</code>\n<|/ a tags=php,arrays\
    \ dscore=2 |>\n<| a dscore=2 |>\nAn approach without looping. First we take the\
    \ difference between the highest number and the lowest number in our list. If\
    \ there are no negative numbers then we can skip the loop.\n<code>\n$array = array(-1,\
    \ 2, -4, 5, 6);\n$max = max($array);\n$min = min($array);\n$diff = $max - $min;\n\
    $array = array_diff($array,[$min]);\necho $diff;\n</code>\nOutputs: 2\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\nTry below code:\n<code>\n$array = array(-1, 2, -4, 5,\
    \ 6);\n$result = array();\n\n$max = max($array);\n$min = min($array);\n\nif($max\
    \ >= 0){\n    $result = array_diff($array,[$max]);\n}else{\n    array_push($result,$min);\n\
    }\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php\n\n$a = array(-1, 2, -4, 5, 6);\n$b = array(-3, -1, -3, 3,\
    \ 5, 9);\n$c = array(-1, 4, -5, 3);\n$d = array(-5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10);\n$e = array(-1, 4, -5, 3, -3, -2);\n\n$a = array_unique($a);\n$b =\
    \ array_unique($b);\n$c = array_unique($c);\n$d = array_unique($d);\n$e = array_unique($e);\n\
    \nforeach ($a as $key => $val) {\n    $a[$key] = $val < 0 ? $val + array_sum($e)\
    \ : $val;\n}\n\nforeach ($b as $key => $val) {\n    $b[$key] = $val < 0 ? $val\
    \ + array_sum($e) : $val;\n}\n\nforeach ($c as $key => $val) {\n    $c[$key] =\
    \ $val < 0 ? $val + array_sum($e) : $val;\n}\n\nforeach ($d as $key => $val) {\n\
    \    $d[$key] = $val < 0 ? $val + array_sum($e) : $val;\n}\n\necho \"<pre>\";\n\
    print_r($a);\nprint_r($b);\nprint_r($c);\nprint_r($d);\nprint_r($e);\necho \"\
    </pre>\";\n</code>\n<|/ a dscore=1 \nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw06iirm_.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positive = array();\n    foreach ($l as $item) {\n        if ($item > 0) {\n\
    \            $positive[] = $item;\n        }\n    }\n    return $positive;\n}\n\
    \nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, \"is_int\");\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedmhrl2o.php:16\n\
    Stack trace:\n#0 /tmp/tmpedmhrl2o.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpedmhrl2o.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positives\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0)\n      $positives[] =\
    \ $value;\n  }\n  return $positives;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=1\
    \ |>\nI wrote a function to get a set of numbers that have a specific property\
    \ in it\n<code>\n<?php\n$array = [\n    'name' => 'John',\n    'age'  => 30,\n\
    \    'work' => 'Art Production',\n    'hometown' => 'New York'\n];\n\n/**\n *\
    \ Get numbers from array that have 'hometown' property\n *\n * array $array\n\
    \ * array\n */\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd7pr_8uw.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($v) { return ($v > 0); });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gt1t0nw.php:16\n\
    Stack trace:\n#0 /tmp/tmp4gt1t0nw.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4gt1t0nw.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  foreach\
    \ ($l as $k => $v) {\n    if ($v <= 0) {\n      unset($l[$k]);\n    }\n  }\n \
    \ return array_filter($l);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis is exactly\
    \ what I ended up doing. Thank you.\n<|/ c |>\n<| c |>\nThis does not preserve\
    \ the original order of the elements in `l`.\n<|/ c |>\n<| a dscore=3 |>\nThis\
    \ should be the fastest way:\n<code>\n$a = array_filter(array_map(function($x){\n\
    \    return abs($x);\n}, $a));\n</code>\nIt uses array_map to run abs() over every\
    \ element of $a, and array_filter to remove those elements which return false.\n\
    <|/ a tags=php |>\n<| c |>\nThis is also the fastest way: `$a = array_filter($a,\
    \ function($x) { return abs($x); });`\n<|/ c |>\n<| a |>\nA simple way would be\
    \ to use array_search with a custom sort function.\n<code>\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqrif2nqs.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($v) {\n    return $v > 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqrizmbv.php:18\n\
    Stack trace:\n#0 /tmp/tmpaqrizmbv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpaqrizmbv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($num) {\n        return $num >= 0;\n    });\n\
    }\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwqqvs4s.php:18\n\
    Stack trace:\n#0 /tmp/tmpgwqqvs4s.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgwqqvs4s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($i) {\n    return $i >= 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92gx7pt4.php:18\n\
    Stack trace:\n#0 /tmp/tmp92gx7pt4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp92gx7pt4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ if (is_array($l)) {\n        $result = array();\n        foreach ($l as $item)\
    \ {\n            if ($item > 0) {\n                $result[] = $item;\n      \
    \      }\n        }\n        return $result;\n    } else {\n        return array($l);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $a\
    \ = array_filter($l, 'is_numeric');\n  return array_filter($a, 'is_int');\n}\n\
    function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf555_vx0.php:16\n\
    Stack trace:\n#0 /tmp/tmpf555_vx0.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpf555_vx0.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(\n    $l,\n    function ($value) {\n      return $value > 0;\n\
    \    }\n  );\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3kfhvj7.php:20\n\
    Stack trace:\n#0 /tmp/tmpt3kfhvj7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpt3kfhvj7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $r\
    \ = [];\n  foreach($l as $i) {\n    if ($i >= 0) {\n      $r[] = $i;\n    }\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg411xcty.php:23\n\
    Stack trace:\n#0 /tmp/tmpg411xcty.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpg411xcty.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $out = array();\n    foreach ($l as $x) {\n        if ($x > 0) $out[] = $x;\n\
    \    }\n    return $out;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($x) { return ($x >= 0); });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn85ssa9j.php:16\n\
    Stack trace:\n#0 /tmp/tmpn85ssa9j.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpn85ssa9j.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($i) { return $i >= 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvrmd6awp.php:16\n\
    Stack trace:\n#0 /tmp/tmpvrmd6awp.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpvrmd6awp.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = array();\n  foreach ($l as $k => $v) {\n    if ($v >= 0) {\n      $positive[$k]\
    \ = $v;\n    }\n  }\n  return $positive;\n}\n</code>\n<|/ a tags=php,arrays dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nforeach($array as $key => $value)\n{\n  if($value\
    \ < 0)\n  {\n    unset($array[$key]);\n  }\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(1,2,-3,4,5,6);\n$new_array = array_filter($array,'is_int');\n\
    </code>\nor if you want to keep the negative value:\n<code>\n$array = array(1,2,-3,4,5,6);\n\
    $new_array = array_filter($array,'is_numeric');\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\nYou can use array_filter to filter negative numbers. Just add the\
    \ condition what it should be.\n<code>\n$array = array(1,2,-3,4,5,6);\n$new_array\
    \ = array_filter($array,'is_int');\n</code>\nIt will return an array.\n<|/ a tags=php,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = [1,2,-3,4,5,6];\n\n$newarray\
    \ = array_filter($array,'is_numeric');\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ a dscore=0 |>\nIn case that you want to keep the negative number -3 also as\
    \ a positive number then you may try the following:\n<code>\n$negative = array(1,2,-3,4,5,6);\n\
    $positive = array_filter(\n  array_flip($negative),\n  'is_int'\n);\n$new_array\
    \ = array_merge($positive, $negative);\n</code>\nOutput example:\n<code>\nArray\n\
    (\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5]\
    \ => 6\n)\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n$array = array(1,2,-3,4,5,6);\n\
    $new_array = array_filter($array,'is_int');\n</code>\n<|/ a dscore=0 tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\nYou can use array_filter with is_numeric\n<code>\n\
    $array = array(1,2,-3,4,5,6);\n$new_array = array_filter($array,is_numeric);\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvz47tpsf.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $r = [];\n    foreach ($l as $item) {\n        if ($item > 0)\n            $r[]\
    \ = $item;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\treturn\
    \ array_filter(\n\t\t$l,\n\t\tfunction($i) {\n\t\t\treturn $i > 0;\n\t\t}\n\t\
    );\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6a74crq.php:21\n\
    Stack trace:\n#0 /tmp/tmpy6a74crq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpy6a74crq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $item) {\n    if ($item >= 0) {\n      $positive[] =\
    \ $item;\n    }\n  }\n  return $positive;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhmw6y8h.php:23\n\
    Stack trace:\n#0 /tmp/tmpqhmw6y8h.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqhmw6y8h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($item) { return $item > 0; });\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw25cggs1.php:16\n\
    Stack trace:\n#0 /tmp/tmpw25cggs1.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpw25cggs1.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $ret\
    \ = $l;\n  foreach ($ret as $k => $v) {\n    if ($v < 0) {\n      unset($ret[$k]);\n\
    \    }\n  }\n  return $ret;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvkq5ah5.php:22\n\
    Stack trace:\n#0 /tmp/tmpbvkq5ah5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbvkq5ah5.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  foreach($l\
    \ as $x) { if ($x > 0) $l[$x] = 1; }\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tcoxgv5.php:16\n\
    Stack trace:\n#0 /tmp/tmp2tcoxgv5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp2tcoxgv5.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  sort($l);\n\
    \  $p = array();\n  foreach($l as $e) {\n    if($e > 0) {\n      $p[] = $e;\n\
    \    }\n  }\n  return $p;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyf34u4js.php:24\n\
    Stack trace:\n#0 /tmp/tmpyf34u4js.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyf34u4js.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ foreach ($l as $item) {\n        if ($item < 0) {\n            unset($l[$item]);\n\
    \        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesx6i_2u.php:21\n\
    Stack trace:\n#0 /tmp/tmpesx6i_2u.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpesx6i_2u.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $ps = array();\n    foreach ($l as $x => $y)\n        if ($y > 0)\n        \
    \    $ps[$x] = $y;\n    return $ps;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9k11neio.php:20\n\
    Stack trace:\n#0 /tmp/tmp9k11neio.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9k11neio.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  sort($l);\n\
    \  $f = array();\n  $f[0] = $l[0];\n  for ($j = 1; $j < count($l); $j++) {\n \
    \   if ($l[$j] < $f[0]) {\n      $f[$j] = $l[$j];\n    }\n  }\n  return $f;\n\
    }\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxs28ts33.php:24\n\
    Stack trace:\n#0 /tmp/tmpxs28ts33.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxs28ts33.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($a) {\n            return\
    \ $a > 0;\n        }\n    );\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhaegz4y.php:20\n\
    Stack trace:\n#0 /tmp/tmpqhaegz4y.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqhaegz4y.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $result = [];\n    foreach ($l as $item) {\n        if ($item > 0) $result[]\
    \ = $item;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($item) {\n        return $item >= 0;\n    });\n\
    }\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qpmcvq1.php:18\n\
    Stack trace:\n#0 /tmp/tmp0qpmcvq1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0qpmcvq1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positive = [];\n    foreach ($l as $num) {\n        if ($num > 0) {\n     \
    \       $positive[] = $num;\n        }\n    }\n    return $positive;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = array();\n  foreach ($l as $value) {\n    if ($value > 0) $positive[] = $value;\n\
    \  }\n  return $positive;\n}\n</code>\n<|/ a |>\n<| a dscore=2 tags=arrays,php\
    \ |>\nA function which returns all positive numbers in an array:\n<code>\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkf4jzj9p.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $key => $value) {\n    if ($value > 0 && is_numeric($value))\
    \ {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ if (is_array($l)) {\n        $positive = [];\n        $i = 0;\n        foreach\
    \ ($l as $v) {\n            if ($v > 0) {\n                $positive[$i] = $v;\n\
    \            }\n            $i++;\n        }\n        return $positive;\n    }\n\
    \    return $l;\n}\n\n/**\n * Returns the number of elements in a list\n *\n *\
    \ $l\n *\n * array|string\n */\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbo4fb81l.php:34\n\
    Stack trace:\n#0 /tmp/tmpbo4fb81l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbo4fb81l.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positives\
    \ = array();\n  foreach ($l as $k => $v) {\n    if ($v >= 0) {\n      $positives[]\
    \ = $v;\n    }\n  }\n  return $positives;\n}\n\n$a = array(\n  2 => 'one',\n \
    \ 3 => 'two',\n  4 => 'three',\n  5 => 'four',\n  6 => 'five',\n);\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9nxultq.php:30\n\
    Stack trace:\n#0 /tmp/tmpf9nxultq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf9nxultq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  ksort($l);\n\
    \  $n = count($l);\n  $a = array();\n  for($i = 0; $i < $n; ++$i) {\n    if($l[$i]\
    \ > 0) {\n      $a[] = $l[$i];\n    }\n  }\n  return $a;\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  if\
    \ (is_array($l)) {\n    $list = array();\n    foreach ($l as $item) {\n      if\
    \ ($item > 0) {\n        $list[] = $item;\n      }\n    }\n    return $list;\n\
    \  } else {\n    return $l > 0 ? $l : 0;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($x) { return $x >= 0; });\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpruz2iya3.php:15\n\
    Stack trace:\n#0 /tmp/tmpruz2iya3.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpruz2iya3.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $l\
    \ = array_flip($l);\n  return array_filter(\n    array_keys($l),\n    function\
    \ ($n) { return $n >= 0; });\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2yahkeg.php:19\n\
    Stack trace:\n#0 /tmp/tmpz2yahkeg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpz2yahkeg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($val) {\n        return $val > 0;\n    });\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| a tags=arrays,php dscore=4 |>\n<code>\n$array\
    \ = array(4, -4, 3, 6, -5, 4);\n\nprint_r($array);\necho count($array);\necho\
    \ \"<br>\";\necho \"<br>\";\n\n$array = array_filter($array, 'strlen');\nprint_r($array);\n\
    echo count($array);\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvbc0op85.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($i) { return $i >= 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdai8dp9.php:16\n\
    Stack trace:\n#0 /tmp/tmpxdai8dp9.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpxdai8dp9.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($v) {\n    return $v >= 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84ilu5mg.php:18\n\
    Stack trace:\n#0 /tmp/tmp84ilu5mg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp84ilu5mg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  if\
    \ (is_array($l)) {\n    foreach ($l as $value) {\n      if ($value > 0) {\n  \
    \      $l[] = $value;\n      }\n    }\n  }\n  return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp383xtaex.php:23\n\
    Stack trace:\n#0 /tmp/tmp383xtaex.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp383xtaex.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $r\
    \ = array();\n  foreach($l as $el) {\n    if($el >= 0) $r[] = $el;\n  }\n  return\
    \ $r;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=1 |>\nI think\
    \ this is more readable and performant : \n<code>\n$array1 = array(2,4,5,7,10,-1,-1,10);\n\
    $array2 = array(1,2,3,4,5,6,7,8,9,0,-1);\n$array3 = array(10,9,8,7,6,5,4,3,2,1,0);\n\
    $array4 = array(0,1,2,3,4,5,6,7,8,9,10,11);\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp61mwoe35.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($n) {\n        return ($n < 0);\n    });\n\
    }\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmm3dd0wg.php:17\n\
    Stack trace:\n#0 /tmp/tmpmm3dd0wg.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmm3dd0wg.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positives\
    \ = array();\n  foreach ($l as $item) {\n    if ($item > 0) $positives[] = $item;\n\
    \  }\n  return $positives;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($v) { return $v >= 0; });\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\nYou can use the array_search() function:\n<code>\n$array1 =\
    \ array(10,20,30,40,50);\n$array2 = array(10,20,30,40,50);\n\n$key = array_search($array2,\
    \ $array1);\n\necho \"$key\";\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ code returns only the last index value from array 1.\n<|/ c |>\n<| c |>\nThis\
    \ code doesn't return only the last index value from array 1. it returns all key\
    \ values that exists in both arrays.\n<|/ c |>\n<| a dscore=0 tags=php,arrays\
    \ |>\nIf you just want to get all the elements that are in both arrays, array_intersect()\
    \ is what you need.\n<code>\n$array1 = array( 1, 5, 8, 11 );\n$array2 = array(\
    \ 1, 7, 8, 12 );\n\n$intersect = array_intersect( $array1, $array2 );\n</code>\n\
    $intersect will be an array containing the elements found in both $array1 and\
    \ $array2\nIf you wanted to filter those values down to just the unique values,\
    \ you can use array_unique.\n<code>\n$unique = array_unique( $intersect );\n</code>\n\
    <|/ a |>\n<| c |>\nYes, but it will only return me a number from array2 if it\
    \ exists in array1, but I want to return all index values from array1 that are\
    \ in array2\n<|/ c |>\n<| c |>\nOh, you want all indexes that exist in both? I\
    \ misunderstood the question. I'll update my answer\n<|/ c |>\n<| c |>\nYes, but\
    \ it will only return me a number from array2 if it exists in array1, but I want\
    \ to return all index values from array1 that are in array2\n<|/ c |>\n<| c |>\n\
    Updated my answer.\n<|/ c |>\n<| a |>\nTry this\n<code>\n$array1 = array(10,20,30,40,50);\n\
    $array2 = array(10,20,30,40,50);\n\n$array_intersect = array_intersect($array1,\
    \ $array2);\n\n$array_intersect = array_keys($array_intersect);\n\nprint_r($array_intersect);\n\
    </code>\n<|/ a tags=php,arrays dscore=0 |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<|\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxccs1qir.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($value) {\n        return ($value > 0);\n \
    \   });\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbczae8tq.php:18\n\
    Stack trace:\n#0 /tmp/tmpbczae8tq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbczae8tq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positive = array();\n    foreach ($l as $e) {\n        if ($e >= 0)\n     \
    \       $positive[] = $e;\n    }\n    return $positive;\n}\n</code>\n<|/ a |>\n\
    <| a tags=arrays,php,sorting |>\n<code>\n<?php\n$array = array(\n    1 => \"a\"\
    ,\n    2 => \"b\",\n    3 => \"c\",\n    4 => \"c\",\n    5 => \"a\",\n    6 =>\
    \ \"b\",\n    7 => \"c\",\n    8 => \"d\",\n    9 => \"e\",\n    10 => \"a\",\n\
    \    11 => \"c\",\n    12 => \"d\",\n    13 => \"e\",\n    14 => \"c\",\n    15\
    \ => \"e\",\n    16 => \"a\",\n);\n\n$array = array_filter($array);\n$array =\
    \ array_map(function ($value) { return -$value; }, $array);\n\n$array = array_unique(array_values($array));\n\
    \nprint_r($array);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nthis does not do what\
    \ the OP asked for. OP wants to filter out all negative values, not just filter\
    \ out `-` values. And since `array_filter` removes all negative values, the array\
    \ will only contain positive values. This is what I get when running this: `Array\n\
    (\n    [0] => a\n    [2] => b\n    [3] => c\n    [4] => d\n    [5] => e\n    [6]\
    \ => a\n    [8] => c\n    [9] => e\n    [10] => a\n    [11] => c\n    [12] =>\
    \ d\n    [13] => e\n    [14] => c\n    [15] => e\n    [16] => a\n)`\n<|/ c |>\n\
    <| c |>\noh sorry, my mistake i didn't see that i missed negative numbers\n<|/\
    \ c |>\n<| c |>\nYes, but now that i read it again i noticed that i made a mistake\
    \ with it (now i just fixed it)\n<|/ c |>\n<| a tags=arrays,php,sorting |>\nYou\
    \ can filter them out by simply using array_filter\n<code>\n$l = array(1 => 'a',\
    \ 2 => 'b', 3 => 'c', 4 => 'c', 5 => 'a', 6 => 'b', 7 => 'c', 8 => 'd', 9 => 'e',\
    \ 10 => 'a', 11 => 'c', 12 => 'd', 13 => 'e', 14 => 'c', 15 => 'e', 16 => 'a');\n\
    \n$l = array_filter($l);\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjsitq2kd.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  global\
    \ $positive;\n  $positive = array();\n  foreach ($l as $item) {\n    if ($item\
    \ > 0) $positive[] = $item;\n  }\n  return $positive;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($n) { return $n >= 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75yms5go.php:16\n\
    Stack trace:\n#0 /tmp/tmp75yms5go.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp75yms5go.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($v) { return $v >= 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3o61e_0o.php:16\n\
    Stack trace:\n#0 /tmp/tmp3o61e_0o.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp3o61e_0o.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($x) {\n    return $x >= 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrim96zt.php:18\n\
    Stack trace:\n#0 /tmp/tmpkrim96zt.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkrim96zt.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($val) {\n    return $val >= 0;\n  });\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4bldho5.php:18\n\
    Stack trace:\n#0 /tmp/tmpa4bldho5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpa4bldho5.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($item) {\n    return ($item > 0);\n  });\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvoux_lfb.php:18\n\
    Stack trace:\n#0 /tmp/tmpvoux_lfb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpvoux_lfb.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($i) {\n        return $i >= 0;\n    });\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php dscore=1 |>\n<code>\n\
    $array1 = array(2,5,6,4,7,3,1);\n\n$array2 = array(4,3,-2,1,2,5,6);\n</code>\n\
    $array1 will never contain negative numbers, $array2 will always have positive\
    \ numbers, so you can do the following :\n<code>\n<?php\n$array1 = array(2,5,6,4,7,3,1);\n\
    \n$array2 = array(4,3,-2,1,2,5,6);\n\n$array3 = $array1 + $array2;\n\n$array4=\
    \ array_filter(array_diff($array1, $array2), function($x){return $x >= 0;});\n\
    \nprint_r($array3);\n\nprint_r($array4);\n</code>\nThis will output :\n<code>\n\
    Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 6\n    [3] => 7\n    [4] => 3\n\
    )\n\nArray\n(\n    [0] => 4\n    [1] => 3\n    [2] => 1\n    [3] => 2\n)\n</code>\n\
    <|/ a |>\n<| a dscore=1 |>\nYou can do array_diff and array_filter with negative\
    \ and positive checks. \n<code>\n$array1 = array(2,5,6,4,7,3,1);\n$array2 = array(4,3,-2,1,2,5,6);\n\
    $array3 = array_filter($array1, function($el) use($array2){\n    return !in_array($el,\
    \ $array2);\n});\n$array4 = array_filter($array2, function($el) use($array1){\n\
    \    return !in_array($el, $array1);\n});\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nWhile this code may answer the question, it would be better to explain\
    \ how it works and why to use it. Code-only answers are not useful in the long\
    \ run.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array1 = array(2,5,6,4,7,3,1);\n\
    $array2 = array(4,3,-2,1,2,5,6);\nprint_r(array_diff($array1,$array2));\nprint_r(array_diff($array2,$array1));\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nWhile this code may answer the question,\
    \ it would be better to explain how it works and why to use it. Code-only answers\
    \ are not useful in the long run.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$arr1 =\
    \ array(\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphxhk4v__.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $result\
    \ = [];\n  foreach($l as $n) {\n    if ($n > 0) {\n      $result[] = $n;\n   \
    \ }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $p\
    \ = array();\n  foreach($l as $v) {\n    if ($v > 0) $p[] = $v;\n  }\n  return\
    \ $p;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszq4rd0t.php:16\n\
    Stack trace:\n#0 /tmp/tmpszq4rd0t.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpszq4rd0t.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($v) {\n            return\
    \ $v > 0;\n        }\n    );\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_a898wn.php:21\n\
    Stack trace:\n#0 /tmp/tmpz_a898wn.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpz_a898wn.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($value) {\n           \
    \ return $value > 0;\n        }\n    );\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays\
    \ dscore=1 |>\nFor my personal use, I use the following function:\n<code>\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg8yx42wl.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ foreach ($l as $key => $value) {\n        if (!is_numeric($value)) {\n     \
    \       unset($l[$key]);\n        }\n    }\n    return array_filter($l);\n}\n\n\
    function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgb5xuciq.php:21\n\
    Stack trace:\n#0 /tmp/tmpgb5xuciq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgb5xuciq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $r\
    \ = array();\n  foreach ($l as $x) { if ($x >= 0) $r[] = $x; }\n  return $r;\n\
    }\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9uyhk4tp.php:18\n\
    Stack trace:\n#0 /tmp/tmp9uyhk4tp.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp9uyhk4tp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $pos = array();\n    foreach ($l as $item) {\n        if ($item > 0)\n     \
    \       $pos[] = $item;\n    }\n    return $pos;\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(array_map('abs', $l), 'is_numeric');\n}\n</code>\n<|/ a tags=sorting,arrays,php\
    \ |>\n<| c |>\nThe negative numbers in your example are being treated as positive.\
    \ I'm looking for a way to get all positive numbers in the array.\n<|/ c |>\n\
    <| c |>\n: I already told you how to do that. Just replace `array_filter` with\
    \ `array_map`.\n<|/ c |>\n<| a tags=sorting,arrays,php |>\nIf you want to filter\
    \ out only positive numbers you can use the following code.\n<code>\n$array =\
    \ array(-1, 2, -4, 5, 6);\n\n$positiveNumbers = array_filter(\n    $array,\n \
    \   function($i) {\n        return $i > 0;\n    }\n);\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nYour code does not work as intended, it filters out negative numbers\
    \ as well\n<|/ c |>\n<| c |>\nYes I know, but the OP asked for how to filter out\
    \ only positive numbers. And the code does exactly that.\n<|/ c |>\n<| a dscore=3\
    \ |>\nYou could use array_filter and a callback to check if it's positive like\
    \ this:\n<code>\n$arr = array(-1, 2, -4, 5, 6);\n\n$positiveNumbers = array_filter(\n\
    \    $arr,\n    function($value) use ($arr) {\n        return $value > 0;\n  \
    \  }\n);\n\nvar_dump($positiveNumbers);\n</code>\nThis will output:\n<code>\n\
    array(3) {\n  [0] =>\n  int(2)\n  [1] =>\n  int(5)\n  [2] =>\n  int(6)\n}\n</code>\n\
    <|/ a tags=sorting,arrays,php |>\n<| c |>\nThis doesn't return the OP's array.\n\
    <|/ c |>\n<| c |>\n: How do you know? They didn't mention what they want the array\
    \ to look like.\n<|/ c |>\n<| c |>\n: Looking at the first line of the question,\
    \ \"I need to sort the array in descending order from smallest to greatest\",\
    \ this seems like what the OP really wants.\n<|/ c |>\n<| c |>\n: That's true,\
    \ but your solution doesn't do that. Also, if the OP clarified that, then I wouldn't\
    \ have downvoted. :)\n<|/ c |>\n<| c |>\n: Yes, you're right. The OP changed their\
    \ question. I'll remove my downvote, but I'll wait until they clarify.\n<|/ c\
    \ |>\n<| a |>\nA simple \nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjwkqcano.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $k => $v) {\n    if ($v > 0) {\n      $positive[$k]\
    \ = $v;\n    }\n  }\n  return $positive;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0jx_hjgd.php:22\n\
    Stack trace:\n#0 /tmp/tmp0jx_hjgd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0jx_hjgd.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, 'is_numeric');\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0c7jcw3n.php:16\n\
    Stack trace:\n#0 /tmp/tmp0c7jcw3n.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0c7jcw3n.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($item) {\n        return $item > 0;\n    });\n\
    }\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvtp300p.php:18\n\
    Stack trace:\n#0 /tmp/tmprvtp300p.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprvtp300p.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($value) use (&$positive) {\n    return $value > 0;\n\
    \  });\n}\n</code>\nThe code above creates a new array called $positive and uses\
    \ the callback function provided to array_filter() to filter the original array\
    \ $l for only values greater than 0. \nAfter the array is filtered out, you can\
    \ use the following code to find the number of positive elements in the filtered\
    \ array:\n<code>\n$totalPositiveElements = count($positive);\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI added some explanation, let me know if you're having difficulty.\n\
    <|/ c |>\n<| c |>\nThanks for your help bro :)\n<|/ c |>\n<| a |>\nHere's a simple\
    \ function that will get you what you want, assuming $l is an array containing\
    \ integers: \n<code>\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw4irr4vj.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $n) {\n    if ($n > 0) {\n      $positive[] = $n;\n\
    \    }\n  }\n  return $positive;\n}\n</code>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9_ezvfi_.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($i) { return $i >= 0; });\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp80h723h.php:15\n\
    Stack trace:\n#0 /tmp/tmpp80h723h.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpp80h723h.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($value) {\n    return $value >= 0;\n  });\n}\n</code>\n\
    A more readable version:\n<code>\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxm0122rd.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $p = [];\n    foreach ($l as $value) {\n        if ($value > 0) {\n        \
    \    $p[] = $value;\n        }\n    }\n    return $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($value) {\n           \
    \ return $value >= 0;\n        }\n    );\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a |>\nA one liner with array_reduce function, which iterates through an array,\
    \ collects positive values and creates a new array.\n<code>\n$positive = array_reduce(\
    \ $a, function($c, $i) { if($i >= 0) $c[] = $i; return $c; }, []);\n</code>\n\
    <|/ a dscore=2 tags=arrays,php |>\n<| a dscore=2 |>\nFor those who are still wondering,\
    \ I used this:\n<code>\n$positive = array_filter(\n    array_map(\"abs\",\n  \
    \      array_filter(\n            $a,\n            function ($value){\n      \
    \          return $value >= 0;\n            }\n        )\n    ),\n    function\
    \ ($value){\n        return $value >= 0;\n    }\n);\n</code>\nI thought it might\
    \ be more efficient than the accepted answer but as I ran a benchmark I couldn't\
    \ find any performance improvements.\n<|/ a tags=arrays,php |>\n<| c |>\nI ran\
    \ a benchmark too, for both answers, and the accepted answer is slightly faster\
    \ (about 40% vs 40%). So the accepted answer should be preferred.\n<|/ c |>\n\
    <| c |>\nI agree with you. However I wanted to show a different approach, as it's\
    \ an interesting one. Maybe someone can come up with a benchmark where it's faster\
    \ than the accepted answer, but I'm not sure it would be possible. I think my\
    \ solution can even be further optimized :)\n<|/ c |>\n<| c |>\nI ran a benchmark\
    \ too, for both answers, and the accepted answer is slightly faster (about 40%\
    \ vs 40%). So the accepted answer should be preferred.\n<|/ c |>\n<| c |>\nThanks\
    \ for the benchmark. I ran it again and it's actually faster as it's faster (about\
    \ 33% vs 33%). So the accepted answer should be preferred. I'll upvote you instead\
    \ :) Thanks again!\n<|/ c |>\n<| a |>\nI believe array_filter function will be\
    \ the best way for your problem. It allows you to check each element of an array\
    \ and filter it out if needed. \n<code>\n<?php\n$a = array(10, -10, 2, -3, 5);\n\
    $positive = array_filter($a, function($value) {\n    return $value > 0;\n});\n\
    </code>\n$positive contains what you need.\n<|/ a tags=arrays,php dscore=2 |>\n\
    <|\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvt74a0qc.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($v) use ($_) { return $v >= 0; });\n}\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybxenzzi.php:15\n\
    Stack trace:\n#0 /tmp/tmpybxenzzi.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpybxenzzi.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positive = [];\n\n    foreach ($l as $i => $n) {\n        if ($n > 0)\n   \
    \         $positive[] = $n;\n    }\n\n    return $positive;\n}\n\n/**\n * Get\
    \ a random element from the list.\n *\n * @param array $l\n *\n * @return mixed|null\n\
    \ */\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positive = [];\n    foreach($l as $x) {\n        if ($x >= 0) $positive[] =\
    \ $x;\n    }\n    return $positive;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhat6kmb.php:21\n\
    Stack trace:\n#0 /tmp/tmpjhat6kmb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjhat6kmb.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ltwo0hn.php:16\n\
    Stack trace:\n#0 /tmp/tmp7ltwo0hn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp7ltwo0hn.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, 'is_int');\n}\n\nfunction candidate(...$args) {\n  \
    \  return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5x84h3e.php:16\n\
    Stack trace:\n#0 /tmp/tmpi5x84h3e.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpi5x84h3e.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $k => $v) {\n    if ($v > 0) {\n      $positive[] =\
    \ $v;\n    }\n  }\n  return $positive;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $x) {\n    if ($x > 0) $positive[] = $x;\n  }\n  return\
    \ $positive;\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\t$a\
    \ = array();\n\tforeach ($l as $key => $value) {\n\t\tif ($value > 0) {\n\t\t\t\
    $a[$key] = $value;\n\t\t}\n\t}\n\treturn $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lsq3fqj.php:22\n\
    Stack trace:\n#0 /tmp/tmp_lsq3fqj.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_lsq3fqj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $result = [];\n    $positive = true;\n    foreach ($l as $item) {\n        if\
    \ ($item <= 0) {\n            $positive = false;\n        }\n        if ($positive)\
    \ {\n            $result[] = $item;\n        }\n    }\n    return $result;\n}\n\
    </code>\nThe main drawback is that if $l is empty or null, it returns an empty\
    \ array.\nThe above implementation returns an empty array in case $l is empty\
    \ or null, so the caller can decide what to do with it.\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\nA more elegant solution than using array_filter with return false\
    \ is to use array_reduce, as this returns the reduced array if an item is positive:\n\
    <code>\n$arr = [-1, 2, -4, 5, 6];\n$filtered = array_reduce($arr,\n    function($c,\
    \ $i) use ($arr) {\n        if ($c === false || $i < 0 || $i >= 0) {\n       \
    \     $c[] = $i;\n        }\n        return $c;\n    },\n    []\n);\n</code>\n\
    <|/ a tags=php,arrays dscore=2 |>\n<| a dscore=2 |>\nIf you want an array with\
    \ all positive numbers in it you could use array_filter with a closure:\n<code>\n\
    $numbers = [1, 2, 3, 4, 5, 6, -7];\n$positiveNumbers = array_filter($numbers,\
    \ function ($number) {\n    return $number > 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\nYou can do this with array_filter()\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa2usbrtc.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($i) { return $i >= 0; });\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis is not an answer to the question\n<|/ c |>\n<| c |>\nthe\
    \ question asks for an algorithm, not for a PHP implementation. I don't see why\
    \ this shouldn't be an answer\n<|/ c |>\n<| c |>\nMaybe because OP doesn't know\
    \ PHP and he didn't provide any attempts or ideas on how to solve the problem\
    \ using PHP code. So, if he does know PHP he should know what to do with this\
    \ answer, otherwise he wouldn't have asked the question in the first place.\n\
    <|/ c |>\n<| c |>\nI'm still a bit confused as to why this is better than `array_filter`.\n\
    <|/ c |>\n<| c |>\nIf you're going to call `array_filter` on every element in\
    \ the array, wouldn't you end up looping through every single element twice?\n\
    <|/ c |>\n<| a tags=sorting,arrays,php |>\nI wanted to share my solution to this:\n\
    <code>\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp27ttv_66.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter(\n    $l,\n    function ($x) {\n      return $x >= 0;\n    }\n\
    \  );\n}\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_9eiuar.php:21\n\
    Stack trace:\n#0 /tmp/tmpo_9eiuar.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpo_9eiuar.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  foreach\
    \ ($l as &$elem) {\n    if ($elem < 0) {\n      $elem = 0;\n    }\n  }\n  return\
    \ array_filter($l);\n}\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9gzdpuu.php:20\n\
    Stack trace:\n#0 /tmp/tmpa9gzdpuu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpa9gzdpuu.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($value) {\n        return $value > 0;\n   \
    \ });\n}\n</code>\n<|/ a tags=php,arrays,sorting dscore=5 |>\n<| c |>\nThis doesn't\
    \ answer the question. The OP wants to sort an array based on two conditions.\n\
    <|/ c |>\n<| c |>\n: OP didn't say he wants to sort an array. He said \"I would\
    \ like to sort an array based on an item from another array\". Which I showed\
    \ how to do.\n<|/ c |>\n<| c |>\n: I never asked how to sort an array! And my\
    \ answer answers OP's question.\n<|/ c |>\n<| c |>\nWhat if the other array has\
    \ multiple items?\n<|/ c |>\n<| c |>\n: You can pass it multiple items. How do\
    \ you want them sorted?\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp535qhc7m.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($v) { return ($v > 0); });\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| a |>\nAs an alternative, since PHP 5.5.0 you can use the SplDoublyLinkedList\
    \ class from the SPL library.\nThe implementation is straightforward and has great\
    \ performance.\n<|/ a tags=arrays,php,sorting dscore=4 |>\n<| a dscore=3 |>\n\
    This may not be the most efficient solution, but it works and it's simple.\n<code>\n\
    $sorted = array_intersect_key($array, array_flip(array_keys($array)));\n</code>\n\
    <|/ a tags=arrays,php,sorting |>\n<| c |>\nthis is actually the fastest solution\
    \ that I've seen and it's simple. thanks.\n<|/ c |>\n<| c |>\nYes it is! This\
    \ is the simplest solution that I've seen too! Thanks!\n<|/ c |>\n<| a tags=arrays,php,sorting\
    \ |>\nI've never actually seen it implemented, but this thread suggests array_diff_key.\
    \ It does what you're looking for, but also allows you to set a custom comparison\
    \ function.\n<|/ a dscore=3 |>\n<| c |>\nYes I read that thread too before asking.\
    \ array_diff_key would work if I could somehow get the array keys without using\
    \ array_flip on them. Looks like that's not possible.\n<|/ c |>\n<| c |>\nActually\
    \ I read it again before I posted. It would require a custom comparison function\
    \ I think and it would use array_flip anyways. It seems like a lot of work, though.\n\
    <|/ c |>\n<| c |>\n`array_diff_key` does require a custom comparison function\
    \ and `array_flip` does not \"work\" in the way you suggest. The `array_flip`\
    \ function flips the keys and values so that `array_diff_key` will work with them.\n\
    <|/ c |>\n<| c |>\nYes, I read it. But like I said, it seems inefficient to use\
    \ a custom comparison function and array_flip. I guess that's what I have to do.\n\
    <|/ c |>\n<| c |>\nIf you don't want to use array_flip, then you might want to\
    \ consider using array_map() with a custom comparison function instead. I've posted\
    \ a sample for you that illustrates that.\n<|/ c |>\n<| a |>\n<code>\n$array =\
    \ array(\"banana\", \"apple\", \"orange\", \"peach\", \"pineapple\", \"grape\"\
    );\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdt8_fvbw.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\treturn\
    \ array_filter($l, function($val) { return ($val > 0); });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rrfmoe6.php:16\n\
    Stack trace:\n#0 /tmp/tmp9rrfmoe6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp9rrfmoe6.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $pos = array();\n    foreach($l as $key => $val) {\n        if ($val >= 0) {\n\
    \            $pos[$key] = $val;\n        }\n    }\n    return $pos;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,php |>\n<| a dscore=0 |>\nTry this\n<code>\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1lxtw4a3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $p\
    \ = array_filter($l);\n  $p = array_map('abs', $p);\n  return $p;\n}\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0onsdzz.php:17\n\
    Stack trace:\n#0 /tmp/tmpv0onsdzz.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpv0onsdzz.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($v) { return $v >= 0; });\n}\n</code>\n<|/\
    \ a |>\n<| a tags=php |>\nTry This:\n<code>\n$array = [-1, 2, -4, 5, 6, -5];\n\
    array_filter(\n$array,\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptdw74k0d.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $result = [];\n    foreach ($l as $item) {\n        if ($item >= 0) {\n    \
    \        $result[] = $item;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph68mfs1v.php:23\n\
    Stack trace:\n#0 /tmp/tmph68mfs1v.php(28): test()\n#1 {main}\n  thrown in /tmp/tmph68mfs1v.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($value) {\n           \
    \ return ($value >= 0);\n        }\n    );\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb3sqtcfp.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($v) {\n        return ($v > 0);\n    });\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nGreat and comprehensive answer - thank\
    \ you!\n<|/ c |>\n<| c |>\nThanks for this simple answer\n<|/ c |>\n<| c |>\n\
    This should be the top answer. I've been looking for something like this. Great\
    \ answer\n<|/ c |>\n<| a dscore=5 |>\nIn PHP 7+ you could use array_filter with\
    \ the predicate callback:\n<code>\n$positive = array_filter($array, function($number)\
    \ { return $number > 0; });\n</code>\n<|/ a tags=php,arrays,function |>\n<| c\
    \ |>\nWhat happens if the element to be filtered is zero? I think you need to\
    \ filter a 0 from an array that may contain zeros as well.\n<|/ c |>\n<| c |>\n\
    This works great, but only if the array is numerically keyed.  Otherwise, you\
    \ get an array like `array(-1.0=>-1, 0.0=>-1, 1=>-1, 2=>-1)`\n<|/ c |>\n<| c |>\n\
    That is why I included `return $number > 0;` inside the predicate.\n<|/ c |>\n\
    <| c |>\narray_filter() does this by reference as of PHP 5.3.  From http://php.net/manual/en/function.array-filter.php\
    \  \"If you don't want PHP to pass a reference of the array into the callback,\
    \ set the ARRAY_FILTER_USE_KEY flag. This will pass the array by reference.\"\n\
    <|/ c |>\n<| c |>\nHmm okay, I missed that. I thought the callback would return\
    \ either true or false, but perhaps that's not true.\n<|/ c |>\n<| a dscore=5\
    \ |>\nI got here looking for something else.  I needed to get rid of everything\
    \ above 0, so I did this:\n<code>\n$array = array(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9);\n\
    $array_filtered = array_filter($array, function($el){ return $el > 0; });\n</code>\n\
    <|/ a tags=php,arrays,function |>\n<| c |>\narray_filter() does this by reference\
    \ as of PHP 5.3.  From http://php.net/manual/en/function.array-filter.php  \"\
    If you don't want PHP to pass a reference of the array into the callback, set\
    \ the ARRAY_FILTER_USE_KEY flag. This will pass the array by reference.\"\n<|/\
    \ c |>\n<| c |>\nYes it does, but it will also allow you to specify whether the\
    \ original \nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd646webl.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  $positive\
    \ = [];\n  foreach ($l as $k => $v) {\n    if ($v > 0) {\n      $positive[$k]\
    \ = $v;\n    }\n  }\n  return $positive;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5yc30as.php:22\n\
    Stack trace:\n#0 /tmp/tmpu5yc30as.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpu5yc30as.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n\tforeach\
    \ ($l as $value) {\n\t\tif ($value > 0) \n\t\t\tyield $value;\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgyaxyj.php:19\n\
    Stack trace:\n#0 /tmp/tmp2tgyaxyj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2tgyaxyj.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($v) {\n    return ($v > 0);\n  });\n}\n\n/**\n * Return\
    \ all non-zero numbers in the list.\n * >>> get_nonzero_numbers([1, 2, -4, 5,\
    \ 6])\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 13 in /tmp/tmpel6984j5.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($n) { return $n > 0; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpug3udihf.php:16\n\
    Stack trace:\n#0 /tmp/tmpug3udihf.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpug3udihf.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ $positive = [];\n\n    foreach ($l as $value) {\n        if ($value > 0) {\n\
    \            $positive[] = $value;\n        }\n    }\n\n    return $positive;\n\
    }\n\n$positive_numbers = get_positive($numbers);\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$numbers = [-1, 2, -4, 5, 6];\n$positive = array_filter($numbers,\
    \ function($item){\n    return $item > 0;\n});\nprint_r($positive);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$arr = [-1, 2, -4,\
    \ 5, 6];\n\n$positive = array_filter($arr, function ($var) {\n    return ($var\
    \ > 0); \n});\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis approach will create\
    \ an empty array if there are no positive values found.\n<code>\n<?php\n\n   \
    \ $numbers = [-1, 2, -4, 5, 6];\n\n    $positive = array();\n    foreach ($numbers\
    \ as $number)\n    {\n        if ($number > 0) {\n            $positive[] = $number;\n\
    \        }\n    }\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| a tags=php,arrays\
    \ dscore=0 |>\nTry this one:\n<code>\n$numbers = [-1, 2, -4, 5, 6];\n\n$positive\
    \ = array_filter($numbers, function ($var) {\n    return ($var > 0);\n});\n\n\
    print_r($positive);\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\n<code>\n$numbers\
    \ = [-1, 2, -4, 5, 6];\n\n$positive = array_filter($numbers, function ($var) {\n\
    \    return ($var > 0);\n});\n\nprint_r($positive);\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nPlease don't post only code as answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| a |>\nYou can use a closure function\
    \ for this and can check any condition you need:\n<code>\n<?php\n\n$numbers =\
    \ [-1, 2, -4, 5, 6];\n\n$positive = array_filter($numbers, function($number){\n\
    \    return $number > 0;\n});\n\nprint_r($positive);\n</code>\n<|/ a dscore=0\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n<?php\n    $numbers = [-1,\
    \ 2, -\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl7ali78z.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function($x) {\n        return $x > 0;\n    });\n}\n\
    function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mckuljx.php:17\n\
    Stack trace:\n#0 /tmp/tmp4mckuljx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4mckuljx.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function ($n) {\n    return $n >= 0;\n  });\n}\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq12wl1he.php:17\n\
    Stack trace:\n#0 /tmp/tmpq12wl1he.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpq12wl1he.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        array_map(\n            function ($n) {\n    \
    \            return $n >= 0 ? $n : null;\n            },\n            $l\n   \
    \     ),\n        function ($n) {\n            return is_numeric($n);\n      \
    \  }\n    );\n}\n</code>\nI feel like there should be a more elegant way to solve\
    \ this with one line of code, but this was what I cobbled together from looking\
    \ at array_map, array_filter and is_numeric.\n<|/ a |>\n<| c |>\nThis is actually\
    \ a pretty good solution, although a bit verbose compared to the one I came up\
    \ with. +1 for the effort though.\n<|/ c |>\n<| a dscore=0 |>\nHere's a solution\
    \ that will work for any array, including those that are not numeric (including\
    \ arrays):\n<code>\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp730m5aq5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter(\n        $l,\n        function ($val) {\n            return\
    \ $val >= 0;\n        }\n    );\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1,\
    \ -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3,\
    \ 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wr_ux18.php:21\n\
    Stack trace:\n#0 /tmp/tmp0wr_ux18.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp0wr_ux18.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($v){\n    return $v > 0;\n  });\n}\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nThis should be the accepted answer. Very clean and concise.\
    \ Works perfectly.\n<|/ c |>\n<| c |>\nI love this answer, but I have a question:\
    \ Is there a way to modify it to support negative numbers?\n<|/ c |>\n<| c |>\n\
    This code is not working with negative numbers\n<|/ c |>\n<| c |>\nWorks perfectly!\
    \ Thanks!\n<|/ c |>\n<| c |>\nTo expand on what said, this doesn't work with an\
    \ associative array. e.g. array_filter($a, function($v){...}), where $a is associative.\n\
    <|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp84ndff5_.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($item) {\n    return $item > 0;\n  });\n}\n\n/**\n\
    \ * Removes elements from an array that contain duplicate values.\n *\n * @param\
    \ $arr\n *   The array to filter.\n * @return\n *   An array with all duplicate\
    \ values removed.\n */\nfunction candidate(...$args) {\n    return get_positive(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeccbx2zq.php:26\n\
    Stack trace:\n#0 /tmp/tmpeccbx2zq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpeccbx2zq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n   \
    \ return array_filter($l, function ($item) {\n        return $item > 0;\n    });\n\
    }\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpano73qc3.php:18\n\
    Stack trace:\n#0 /tmp/tmpano73qc3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpano73qc3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  foreach\
    \ ($l as $k => $v)\n    if ($v <= 0) unset($l[$k]);\n  return array_values($l);\n\
    }\n\nfunction candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
    \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n  return\
    \ array_filter($l, function($x) {\n    return $x >= 0;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))\
    \ !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0xivrmp.php:18\n\
    Stack trace:\n#0 /tmp/tmpa0xivrmp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpa0xivrmp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
