name: HumanEval_160_do_algebra
language: php
results:
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0;\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        $result = $result + ($operand[$i] / $operand[$i - 1]) * $operator[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpw8ldv91o.php on line 23\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpw8ldv91o.php on line 23\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpw8ldv91o.php on line 23\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpw8ldv91o.php on line 23\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpw8ldv91o.php:33\nStack trace:\n\
    #0 /tmp/tmpw8ldv91o.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw8ldv91o.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $ops = array(\n        0 => '^',\n        1 => '&',\n     \
    \   2 => '|',\n        3 => '<<',\n        4 => '>>'\n    );\n\n    if (!is_array($operator))\
    \ {\n        throw new Exception('Operator is not an array');\n    }\n\n    if\
    \ (!is_array($operand)) {\n        throw new Exception('Operand is not an array');\n\
    \    }\n\n    if (count($operator) !== count($operand) - 1) {\n        throw new\
    \ Exception('Operator and operand list does not match number of operands');\n\
    \    }\n\n    if (count($operator) < 1) {\n        throw new Exception('Operator\
    \ list is empty');\n    }\n\n    if (count($operand) < 2) {\n        throw new\
    \ Exception('Operand list is empty');\n    }\n\n    // Initialize variables\n\
    \    $result = 0;\n    $ops_count = count($ops);\n    $ops_index = 0;\n    $ops_length\
    \ = count($operator);\n    $operands = array_slice($operand, 0, count($operand)\
    \ - 1);\n\n    // Start looping through the operators\n    for ($i = 0; $i < $ops_count;\
    \ $i++) {\n        if ($ops_index >= $ops_length) {\n            break;\n    \
    \    }\n\n        $operator_index = $ops_index++;\n\n        // Check that the\
    \ current operator is one of the basic arithmetic operators.\n        if (in_array($operator[$operator_index],\
    \ array('+', '-', '*', '/', '//', '**'))) {\n            switch ($operator[$operator_index])\
    \ {\n                case '+':\n                    $result = $result + $operands[$i];\n\
    \                    break;\n                case '-':\n                    $result\
    \ = $result - $operands[$i];\n                    break;\n                case\
    \ '*':\n                    $result = $result * $operands[$i];\n             \
    \       break;\n                case '/':\n                    if ($operands[$i]\
    \ % 2 == 0) {\n                        throw new Exception('Operand is not even');\n\
    \                    }\n                    $result = $result / $operands[$i];\n\
    \                    break;\n                case '//':\n                    if\
    \ ($operands[$i] % 2 == 0) {\n                        throw new Exception('Operand\
    \ is not even');\n                    }\n                    $result = floor($result\
    \ / $operands[$i]);\n                    break;\n                case '**':\n\
    \                    $result = pow($result, $operands[$i]);\n                \
    \    break;\n            }\n        }\n        else {\n            // Get the\
    \ value of the operator\n            $value = $operator[$operator_index];\n\n\
    \            // If the current operator is an bitwise operator, get the bits of\
    \ operands\n            if (in_array($operator[$operator_index], array('&', '|',\
    \ '<<', '>>'))) {\n                $operands = array_slice($operands, 0, count($operands)\
    \ - 1);\n            }\n\n            // If the current operator is a left shift\
    \ operator\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1mnqaqxr.php on line 113\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = 0;\n\tforeach ($operand as $k => $v) $result += (array)\
    \ $v[$k] * $operator[$k];\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp92rqa_zu.php on line\
    \ 22\n\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp92rqa_zu.php:22\n\
    Stack trace:\n#0 /tmp/tmp92rqa_zu.php(27): do_algebra(Array, Array)\n#1 /tmp/tmp92rqa_zu.php(31):\
    \ candidate(Array, Array)\n#2 /tmp/tmp92rqa_zu.php(36): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp92rqa_zu.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n}\n$operator = array(\"+\", \"*\", \"-\"\
    , \"//\");\n$operand = array(2, 3, 4, 5);\n$result = do_algebra($operator, $operand);\n\
    echo \"result = \".$result.\"\\n\";\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "result = \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqh_raqa.php:32\n\
    Stack trace:\n#0 /tmp/tmpvqh_raqa.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvqh_raqa.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // your code goes here\n  $result = 0;\n  foreach ($operand as\
    \ $value) {\n    switch ($operator) {\n      case '+': $result = $result + $value;\
    \ break;\n      case '*': $result = $result * $value; break;\n      case '-':\
    \ $result = $result - $value; break;\n      case '/': $result = $result / $value;\
    \ break;\n      case '**': $result = $result ** $value; break;\n    }\n  }\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6bzox3r.php:40\n\
    Stack trace:\n#0 /tmp/tmpr6bzox3r.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpr6bzox3r.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0;\n    foreach ($operator as $oper) {\n        if\
    \ ($oper == '+') {\n            $result += $operand[0];\n        } elseif ($oper\
    \ == '-') {\n            $result -= $operand[0];\n        } elseif ($oper == '*')\
    \ {\n            $result *= $operand[0];\n        } elseif ($oper == '/') {\n\
    \            $result /= $operand[0];\n        } elseif ($oper == '**') {\n   \
    \         $result *= $operand[0];\n            $result *= $operand[1];\n     \
    \   } elseif ($oper == '%') {\n            $result %= $operand[0];\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69bx_41u.php:46\n\
    Stack trace:\n#0 /tmp/tmp69bx_41u.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp69bx_41u.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operators = array('+', '-', '*', '/', '^');\n    $result =\
    \ 0;\n    foreach ($operand as $i => $element) {\n        foreach ($operators\
    \ as $op) {\n            if ($op === '^') {\n                $result = pow($result,\
    \ $element);\n            } else {\n                $result = $result + $element\
    \ * (($op == '+') ? $operand[$i] : 1 / $operand[$i]);\n            }\n       \
    \ }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5eavpabs.php:40\n\
    Stack trace:\n#0 /tmp/tmp5eavpabs.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5eavpabs.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // We are using the stack to hold the expression so far.\n\
    \    $stack = [];\n    // We keep track of how many operands are in each expression.\n\
    \    $index = 0;\n    // We keep track of whether we are currently inside the\
    \ parentheses.\n    $paren_stack = [];\n    // We keep track of the current value\
    \ of the expression on the stack.\n    $last_operand = null;\n    // We keep track\
    \ of the current value of the operator on the stack.\n    $last_operator = null;\n\
    \    // We keep track of the value of the operators that appear on the stack.\n\
    \    $operators = [];\n    // We keep track of the last operator that appeared\
    \ in the stack.\n    $operator_stack = [];\n    // Keep track of whether a unary\
    \ operator appeared on the stack.\n    $operator_unary = false;\n    // Keep track\
    \ of whether a binary operator appeared on the stack.\n    $operator_binary =\
    \ false;\n\n    // If the operator and operand are the same length then we are\
    \ done.\n    if (count($operator) === count($operand)) {\n        $operand = array_reverse($operand);\n\
    \        foreach ($operand as $key => $value) {\n            $stack[] = $value;\n\
    \            $operators[$key] = $operator;\n        }\n        return array_sum($stack);\n\
    \    }\n\n    // If the operator list is shorter than the operand list then append\
    \ a zero\n    // to the operator list, and zero to the operand list to make the\
    \ two lists\n    // the same length.\n    if (count($operator) < count($operand))\
    \ {\n        array_push($operator, 0);\n        array_push($operand, 0);\n   \
    \ }\n\n    // If the operator list is longer than the operand list then append\
    \ a zero\n    // to the operand list to make the two lists the same length, and\
    \ append a zero \n    // to the operator list to make the two lists the same length.\
    \ This will cause\n    // the expression evaluator to not evaluate an operand\
    \ list that is shorter than \n    // the operator list.\n    if (count($operator)\
    \ > count($operand)) {\n        array_push($operand, 0);\n        array_push($operator,\
    \ 0);\n    }\n\n    // Now that we have two lists, we can build the expression.\n\
    \    foreach ($operand as $key => $value) {\n        $stack[] = $value;\n    \
    \    $operators[$key] = $operator;\n    }\n\n    while (count($stack) > 0) {\n\
    \        $operand = array_pop($stack);\n        $operator = array_pop($stack);\n\
    \        if ($operator == '-') {\n            $stack[] = $operand - $operand;\n\
    \        } elseif ($operator == '+') {\n            $stack[] = $operand + $operand;\n\
    \        } elseif ($operator == '*') {\n            $stack[] = $operand * $operand;\n\
    \        } elseif ($operator == '/') {\n            if ($operand == 0) {\n   \
    \             throw new Exception('Division by zero.');\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqys_9pj6.php on line 96\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$operand_length = count($operand) - 1;\n\t$operator_length =\
    \ count($operator);\n\tif ($operand_length >= $operator_length) {\n\t\tfor ($x\
    \ = 0; $x <= $operand_length; $x++) {\n\t\t\t$operand[$x] = $operand[$x] * $operator[$x];\n\
    \t\t}\n\t\t$operand[$operand_length] = $operand[$operand_length];\n\t\treturn\
    \ $operand;\n\t}\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmptgk_hqhv.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmptgk_hqhv.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmptgk_hqhv.php on line\
    \ 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgk_hqhv.php:37\n\
    Stack trace:\n#0 /tmp/tmptgk_hqhv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptgk_hqhv.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // We have to subtract one from the operand list length\n  $operand\
    \ = array_slice($operand, 0, count($operand)-1);\n  \n  // Initialise result to\
    \ 0\n  $result = 0;\n  \n  // Loop through each element of operand list\n  foreach\
    \ ($operand as $v) {\n    \n    // Use switch statement to determine how to perform\
    \ the calculation\n    switch ($operator[0]) {\n      case \"+\":\n        //\
    \ Add result to operand\n        $result += $v;\n        break;\n      case \"\
    -\":\n        // Subtract result from operand\n        $result -= $v;\n      \
    \  break;\n      case \"*\":\n        // Multiply result with operand\n      \
    \  $result *= $v;\n        break;\n      case \"/\":\n        // Divide result\
    \ with operand\n        $result /= $v;\n        break;\n      case \"**\":\n \
    \       // Exponentiate result with operand\n        $result **= $v;\n       \
    \ break;\n    }\n  }\n  \n  // Return result\n  return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks very much!\n<|/ c |>\n<| c |>\nI added a slight change:\
    \ instead of assigning operator to $result, it uses the value of $operator[0]\
    \ (the name of the operator) in the switch statement.  That way, the function\
    \ still works when the operator is \"!\" instead of \"**\" (for example).\n<|/\
    \ c |>\n<| c |>\nThanks for your solution. It helped me a lot to understand how\
    \ the algebric expression evaluation works.\n<|/ c |>\n<| a tags=math,php |>\n\
    I modified the code to make it work with multiple operators and operands\n<code>\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqtkm4n9h.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  global $operators, $operands;\n  $operand = $operands[0];\n \
    \ $operator = $operators[0];\n  for ($i = 0; $i < count($operand); $i++) {\n \
    \   $operands[] = $operand[$i];\n  }\n  $operands[] = $operand;\n  $operators[]\
    \ = $operator;\n  return $operators[count($operators)-1] . \"(\" . implode(\"\
    ,\", $operands) . \")\";\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp683922ln.php on line 24\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp683922ln.php:37\nStack trace:\n#0 /tmp/tmp683922ln.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp683922ln.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Build an expression and return it's value.\n  \n  $expression\
    \ = '';\n  // Iterate over the operators.\n  foreach($operator as $k => $v) {\n\
    \    // If the current operator is '+', add a '+' character to the expression.\n\
    \    if($v == '+') {\n      $expression .= '+'; \n    // Else, add an operator.\n\
    \    } else {\n      $expression .= $v;\n    }\n  }\n  // Iterate over the operands.\n\
    \  foreach($operand as $k => $v) {\n    // If the current operator is '+', add\
    \ a '+' character to the expression.\n    if($v == '+') {\n      $expression .=\
    \ '+'; \n    // Else, add an operator.\n    } else {\n      $expression .= $v;\n\
    \    }\n  }\n  // Return the expression.\n  return $expression;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6a9ncyl1.php:53\n\
    Stack trace:\n#0 /tmp/tmp6a9ncyl1.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp6a9ncyl1.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operators, $operands, $operator;\n\t\n\tarray_walk($operators,\
    \ create_function('&$val', '$val = $val.', $operator));\n\tarray_walk($operands,\
    \ create_function('&$val', '$val = $val + $operand;', $operand));\n\t\n\tarray_shift($operators);\n\
    \tarray_shift($operands);\n\t\n\t$result = call_user_func_array($operator, $operands);\n\
    \treturn $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: create_function() expects exactly 2 parameters, 3 given in /tmp/tmpn0dm9in6.php\
    \ on line 23\n\nWarning: array_walk() expects parameter 1 to be array, null given\
    \ in /tmp/tmpn0dm9in6.php on line 23\n\nWarning: create_function() expects exactly\
    \ 2 parameters, 3 given in /tmp/tmpn0dm9in6.php on line 24\n\nWarning: array_walk()\
    \ expects parameter 1 to be array, null given in /tmp/tmpn0dm9in6.php on line\
    \ 24\n\nWarning: array_shift() expects parameter 1 to be array, null given in\
    \ /tmp/tmpn0dm9in6.php on line 26\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, null given in /tmp/tmpn0dm9in6.php on line 27\n\nWarning: call_user_func_array()\
    \ expects parameter 1 to be a valid callback, no array or string given in /tmp/tmpn0dm9in6.php\
    \ on line 29\n\nWarning: call_user_func_array() expects parameter 2 to be array,\
    \ null given in /tmp/tmpn0dm9in6.php on line 29\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpn0dm9in6.php:37\nStack trace:\n#0 /tmp/tmpn0dm9in6.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn0dm9in6.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    \n    // If operand list has only one element, then return\
    \ operand.\n    if (count($operand) == 1) return $operand[0];\n    \n    // If\
    \ first element in operator is '+', then return operand + operand from operand\
    \ list.\n    // If first element in operator is '-', then return operand - operand\
    \ from operand list.\n    // If first element in operator is '/', then return\
    \ operand / operand from operand list.\n    // If first element in operator is\
    \ 'x', then return operand / operand from operand list.\n    // If first element\
    \ in operator is '**', then return operand ** operand from operand list.\n   \
    \ if ($operator[0] == '+') return $operand[0] + $operand[1];\n    if ($operator[0]\
    \ == '-') return $operand[0] - $operand[1];\n    if ($operator[0] == '/') return\
    \ $operand[0] / $operand[1];\n    if ($operator[0] == 'x') return $operand[0]\
    \ / $operand[1];\n    if ($operator[0] == '**') return $operand[0] ** $operand[1];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI realized I made a mistake, and fixed\
    \ it.  I also added a few more comments to help explain why I used the ternary\
    \ operator.  Hopefully you can now see how it works now.\n<|/ c |>\n<| a dscore=1\
    \ tags=php,ternary-operator,math,algorithm |>\nTo give an alternative to the ternary\
    \ operator that doesn't require a lot of typing, you could write your own method\
    \ instead of using the ternary operator. It might look something like this:\n\
    <code>\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0pwgeu7w.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n    $operand = array_filter(array($operand),\
    \ 'is_numeric');\n    $operand = array_map(function ($x) { return (int)$x; },\
    \ $operand);\n    sort($operand);\n    $operand_length = count($operand);\n  \
    \  $operator_length = count($operator);\n    if($operand_length < $operator_length){\n\
    \        $operand[$operator_length] = $operand[$operator_length] - 1;\n    }\n\
    \    sort($operator);\n    if($operator_length > 0){\n        return $operand[$operator_length-1];\n\
    \    }\n    return 0;\n}\n\n$operator = array(\n    '+',\n    '-',\n    '*',\n\
    \    '/',\n    '//',\n    '**'\n);\n\n$operand = array(\n    2,\n    3,\n    4,\n\
    \    5\n);\n\nvar_dump(do_algebra($operator, $operand));\n</code>\nOutput\n<code>\n\
    int(9)\n</code>\n<|/ a dscore=0 tags=algorithm,php |>\n<| c |>\nThis answer misses\
    \ the point of the question. It was to build a mathematical expression as a string.\n\
    <|/ c |>\n<| c |>\nThe question was \"how do I do this in PHP?\" not \"how do\
    \ I do this?\"\n<|/ c |>\n<| c |>\n\"how do I do this in PHP?\" How do you do\
    \ it in JavaScript or Python? How do you do it in C? How do you do it in PHP?\n\
    <|/ c |>\n<| c |>\nThe question was not to find the answer but to see how it is\
    \ done. There was a discussion about the algorithm in the comments to the question\n\
    <|/ c |>\n<| c |>\n, how do you do it with JavaScript? How do you do it with Python?\
    \ How do you do it with C?\n<|/ c |>\n<| a dscore=0 |>\nHere is an answer that\
    \ works in any language and is easily extensible. \nThe basic algorithm is this:\n\
    \nSplit the two lists into two parts. The first list has only arithmetic operators,\
    \ the second list has only integers. The first part is easy, the second part can\
    \ be done with simple division.\nStart with integer zero (zero is not allowed\
    \ in an expression).\nFor each of the numbers in the first part, add one to the\
    \ integer zero.\nFor each of the numbers in the second part, multiply that number\
    \ by the integer zero (this gives an integer zero).\nThe result is the integer\
    \ zero.\n\nNow let's get to coding this in PHP:\n<code>\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6lyxyp30.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Your code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpid95ab4b.php:29\n\
    Stack trace:\n#0 /tmp/tmpid95ab4b.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpid95ab4b.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator_length = count($operator);\n    $operand_length =\
    \ count($operand) - 1;\n    if($operator_length != $operand_length) {\n      \
    \  return false;\n    }\n    $operators_string = implode($operator);\n    $operands_string\
    \ = implode(\"*\", $operand);\n    return $operators_string . \"+\" . $operands_string;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8yxbk78o.php:36\n\
    Stack trace:\n#0 /tmp/tmp8yxbk78o.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8yxbk78o.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator = explode(\"+\", $operator);\n    $operand = explode(\"\
    +\", $operand);\n    $operand = array_filter($operand, function ($var) {\n   \
    \     return ($var > 0);\n    });\n    foreach ($operand as $key => $value) {\n\
    \        $op = $operator[$key];\n        if (is_numeric($value)) {\n         \
    \   $tmp = $op;\n            while (is_numeric($tmp)) {\n                $tmp\
    \ = $tmp * $value;\n            }\n            $operand[$key] = $tmp;\n      \
    \  }\n    }\n    $operand = array_filter($operand, function ($var) {\n       \
    \ return ($var > 0);\n    });\n    $result = eval(\"return $operand[0] $operator[0]\
    \ $operand[1];\");\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpphd6gc6w.php\
    \ on line 21\n\nWarning: explode() expects parameter 2 to be string, array given\
    \ in /tmp/tmpphd6gc6w.php on line 22\n\nWarning: array_filter() expects parameter\
    \ 1 to be array, null given in /tmp/tmpphd6gc6w.php on line 25\n\nWarning: Invalid\
    \ argument supplied for foreach() in /tmp/tmpphd6gc6w.php on line 26\n\nWarning:\
    \ array_filter() expects parameter 1 to be array, null given in /tmp/tmpphd6gc6w.php\
    \ on line 38\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphd6gc6w.php:48\n\
    Stack trace:\n#0 /tmp/tmpphd6gc6w.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpphd6gc6w.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\
    \t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code here!\n\t\
    // Your code here!\n\t// Your code here!\n\t// Your code here!\n\t// Your code\
    \ here!\n\t// Your code here!\n\t// Your \nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa6p1e2re.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // The expression starts with the first operator and operand\
    \ pair.\n    $expression = \"$operand[$operator[0]] * $operand[$operator[1]] *\
    \ $operand[$operator[2]]\";\n    \n    // For each additional operator, append\
    \ the result of evaluating the previous expression to the current expression.\n\
    \    foreach ($operator as $key => $value) {\n        if ($key > 0) {\n      \
    \      $expression += \" + $operand[$key] * $operand[$key - 1]\";\n        }\n\
    \    }\n    \n    // Return the evaluated expression as a number.\n    return\
    \ $expression;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp30pbna3n.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  if (count($operator) != count($operand)) {\n    return -1;\n\
    \  }\n  $i = 0;\n  for ($i = 0; $i < count($operator); $i++) {\n    $exp = $operator[$i];\n\
    \    $expIndex = $operand[$i];\n    $result = 1;\n    for ($j = $i; $j < count($operator);\
    \ $j++) {\n      $result *= $operand[$j];\n    }\n    $result = $result * $expIndex;\n\
    \    return $result;\n  }\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyakd8o_x.php:41\n\
    Stack trace:\n#0 /tmp/tmpyakd8o_x.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpyakd8o_x.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $sum = 0;\n    for($i = 0; $i < count($operand); $i++) {\n\
    \        $sum += $operand[$i] * $operator[$i];\n    }\n    return $sum;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your help. But why do i have to multiply by 1?\n\
    <|/ c |>\n<| c |>\nYou're welcome. I think it might be because you start at 1\
    \ when you multiply your operands by the operator, while I start at 0 when multiplying\
    \ them in the for loop.\n<|/ c |>\n<| a tags=math,php |>\nI have created a very\
    \ simple algorithm to calculate an equation using the given operators. \n<code>\n\
    <?php \n$operator = array('+','-','*','/');\n$operand1 = array(2,3,4,5);\n$operand2\
    \ = array(3,5,6,7);\n$sum = 0;\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmuodya5r.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Initialize result to 0.\n    $result = 0;\n    \n    //\
    \ Loop through the operators.\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        // If the operator's symbol matches the first character of the operand.\n\
    \        if ($operator[$i][0] == $operand[0]) {\n            // Store the operand.\n\
    \            $operand[$i];\n        }\n    }\n    \n    // Return the result.\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2iwx23iu.php:42\n\
    Stack trace:\n#0 /tmp/tmp2iwx23iu.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2iwx23iu.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if ($operator == NULL || $operand == NULL || count($operator)\
    \ == 0 || count($operand) == 0) {\n        echo \"No operator and operand!\\n\"\
    ;\n        exit;\n    }\n    if ($operator[0] != '+' && $operator[0] != '-' &&\
    \ $operator[0] != '*' && $operator[0] != '/'\n        && $operator[0] != '^' &&\
    \ $operator[0] != '**') {\n        echo \"Operator is not +, -, *, /, ^ or **!\\\
    n\";\n        exit;\n    }\n    $count = 0;\n    $total = 0;\n    for ($i=0; $i\
    \ < count($operand) - 1; $i++) {\n        if ($operator[$i] != '+' && $operator[$i]\
    \ != '-' && $operator[$i] != '*' && $operator[$i] != '/'\n            && $operator[$i]\
    \ != '^' && $operator[$i] != '**') {\n            echo \"Operator is not +, -,\
    \ *, /, ^ or **!\\n\";\n            exit;\n        }\n        if ($operator[$i]\
    \ == '+' || $operator[$i] == '-') {\n            if ($operand[$i] > 0) {\n   \
    \             $total = $total + ($operand[$i] * pow(10, count($operator) - $count));\n\
    \            }\n        }\n        if ($operator[$i] == '*') {\n            $total\
    \ = $total * $operand[$i];\n        }\n        if ($operator[$i] == '/') {\n \
    \           $total = $total / $operand[$i];\n        }\n        if ($operator[$i]\
    \ == '^') {\n            $total = $total ** $operand[$i];\n        }\n       \
    \ if ($operator[$i] == '**') {\n            $total = $total ** $operand[$i];\n\
    \        }\n        $count++;\n    }\n    return $total;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jtucgg2.php:65\n\
    Stack trace:\n#0 /tmp/tmp5jtucgg2.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp5jtucgg2.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Your code here\n\t$result = 0;\n\tforeach ($operator as $op)\
    \ {\n\t\tif (isset($op)) {\n\t\t\t$result = $result + $operand[$op - 1];\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpjotmuifd.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpjotmuifd.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpjotmuifd.php on line\
    \ 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjotmuifd.php:36\n\
    Stack trace:\n#0 /tmp/tmpjotmuifd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjotmuifd.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operators, $operands, $expression;\n\n\tforeach ($operator\
    \ as $key => $value) {\n\t\tswitch ($value) {\n\t\t\tcase '+':\n\t\t\t\t$expression\
    \ = $operand + $operand;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$expression\
    \ = $operand - $operand;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$expression\
    \ = $operand * $operand;\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$expression\
    \ = $operand / $operand;\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$expression\
    \ = $operand ** $operand;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $expression;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpz_v64fbg.php:32\n\
    Stack trace:\n#0 /tmp/tmpz_v64fbg.php(46): do_algebra(Array, Array)\n#1 /tmp/tmpz_v64fbg.php(50):\
    \ candidate(Array, Array)\n#2 /tmp/tmpz_v64fbg.php(55): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpz_v64fbg.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  $operators = array();\n  for ($i = 0; $i < count($operand);\
    \ $i++) {\n    $operators[] = $operator;\n  }\n  $result = call_user_func_array('array_merge',\
    \ $operators);\n  $result = call_user_func_array('array_merge', $operand);\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_merge(): Expected parameter 1 to be an array, int given\
    \ in /tmp/tmp5vzxtyok.php on line 27\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp5vzxtyok.php:36\nStack trace:\n#0 /tmp/tmp5vzxtyok.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5vzxtyok.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Create variable for the first operand.\n\t$a = $operand[0];\n\
    \t\n\t// Create variable for the second operand.\n\t$b = $operand[1];\n\t\n\t\
    // Create variable for the answer.\n\t$c = $a;\n\t\n\t// While there are still\
    \ operands left.\n\twhile ( count($operand) > 1 ) {\n\t\t// Evaluate the operator.\n\
    \t\t$c = $c * $b;\n\t\t\n\t\t// Remove the two operands from the operand list.\n\
    \t\tarray_shift($operand);\n\t\tarray_shift($operand);\n\t\t\n\t\t// Add the operator\
    \ to the operator list.\n\t\tarray_push($operator, $c); \n\t}\n\t\n\t// Return\
    \ the result.\n\treturn $c;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsusx_i6.php:51\n\
    Stack trace:\n#0 /tmp/tmpjsusx_i6.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpjsusx_i6.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // The basic idea behind building this operation is to use\
    \ the \n    // operator and operand to build a set of expressions that \n    //\
    \ can be evaluated.\n    // These expressions are called operations, and the operand\n\
    \    // is the input value being processed.\n    // An operation is then evaluated\
    \ using an algorithm\n    // that uses recursion.\n    // The basic algorithm:\n\
    \    // Build the first expression and evaluate it.\n    // If it succeeds, use\
    \ the result of that expression to \n    // build the next expression.\n    //\
    \ If it fails, return failure.\n    // A valid expression must only use addition,\
    \ subtraction,\n    // multiplication, and floor division, and only with operands\n\
    \    // that are integers.\n    // An example of an operation that would not be\
    \ valid is\n    // division or exponentiation.\n    // To build an expression,\
    \ use a for loop to walk through each\n    // operator and operand.\n    // Example:\n\
    \    // Build the first expression:\n    // $expression = '2 + 3 * 4 - 5'\n  \
    \  // Build the next expression:\n    // $expression = '2 * (3 - 4)'\n    // Build\
    \ the next expression:\n    // $expression = '2 * 4 - 2'\n    // Build the next\
    \ expression:\n    // $expression = '2 * 4'\n    // Build the next expression:\n\
    \    // $expression = '2'\n    // Build the next expression:\n    // $expression\
    \ = '2'\n    // Build the next expression:\n    // $expression = '2'\n    // Build\
    \ the next expression:\n    // $expression = '2'\n    // Build the next expression:\n\
    \    // $expression = '2'\n    // Build the next expression:\n    // $expression\
    \ = '2'\n    // Build the next expression:\n    // $expression = '2'\n    // Build\
    \ the next expression:\n    // $expression = '2'\n    // Build the next expression:\n\
    \    // $expression = '2'\n    // Build the next expression:\n    // $expression\
    \ = '2'\n    // Build the next expression:\n    // $expression = '2'\n    // Build\
    \ the next expression:\n    // $expression = '2'\n    // Build the next expression:\n\
    \    // $expression = '2'\n    // Build the next expression:\n    // $expression\
    \ = '2'\n    // Build the next expression:\n    // $expression = '2'\n    // Build\
    \ the next expression:\n    // $expression = '2'\n    // Build the next expression:\n\
    \    // $expression = '2'\n    // Build the next expression:\n    // $expression\
    \ = '2'\n    // Build the next expression:\n    // $expression = '2'\n    // Build\
    \ the next expression:\n    // $expression = '2'\n    // Build the next expression:\n\
    \    // $expression = '2'\n    // Build the \nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzc799_yz.php on line 102\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$operand = array_reverse($operand);\n\tarray_shift($operand);\n\
    \t$result = 0;\n\tfor ($i = 0; $i < count($operator); $i++) {\n\t\t$result = ($result\
    \ + $operand[$i]) * $operator[$i];\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpy4cme93q.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpy4cme93q.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpy4cme93q.php on line\
    \ 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4cme93q.php:34\n\
    Stack trace:\n#0 /tmp/tmpy4cme93q.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpy4cme93q.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Basic algebra operations:\n    // Addition ( + ) \n    //\
    \ Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( //\
    \ ) \n    // Exponentiation ( ** ) \n    $result = 0;\n    foreach ($operator\
    \ as $key => $value) {\n        switch ($value) {\n            case '+':\n   \
    \             $result += $operand[$key + 1];\n                break;\n       \
    \     case '*':\n                $result *= $operand[$key + 1];\n            \
    \    break;\n            case '-':\n                $result -= $operand[$key +\
    \ 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$key + 1];\n                break;\n            case '**':\n   \
    \             $result **= $operand[$key + 1];\n                break;\n      \
    \      default:\n                exit('Invalid operator');\n                break;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7mu_ne8.php:57\n\
    Stack trace:\n#0 /tmp/tmpe7mu_ne8.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpe7mu_ne8.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here.\n}\n\n$operator = array(\n    '+',\n\
    \    '*',\n    '/',\n    '**'\n);\n\n$operand = array(\n    2,\n    3,\n    4,\n\
    \    5\n);\n\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy830q8_x.php:44\n\
    Stack trace:\n#0 /tmp/tmpy830q8_x.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpy830q8_x.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // TODO: Implement this function\n    $result = 0;\n    foreach\
    \ ($operand as $v) {\n        $result = $result + $v;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzg52amb.php:34\n\
    Stack trace:\n#0 /tmp/tmpdzg52amb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdzg52amb.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code goes here\n}\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgw51_a6s.php:28\n\
    Stack trace:\n#0 /tmp/tmpgw51_a6s.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgw51_a6s.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Initialize variables\n  $total = 0;\n  $current = $operand[0];\n\
    \  $operators = array(\n    '+' => array(2, 1),\n    '-' => array(1, 2),\n   \
    \ '*' => array(1, 1),\n    '/' => array(1, 1),\n    '//' => array(1, 1),\n   \
    \ '**' => array(1, 1)\n  );\n  // Evaluate operator\n  foreach ($operators as\
    \ $operator => $value) {\n    if (array_key_exists($operator, $operator)) {\n\
    \      $operator = $operator;\n    }\n    $operator = $operators[$operator];\n\
    \    if ($operator[1] > $operand[1]) {\n      // Operator is greater\n      array_shift($operand);\n\
    \      break;\n    }\n    $current = $operator[0] * $current + $operator[1];\n\
    \  }\n  return $total = $current;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_key_exists() expects parameter 2 to be array, string given\
    \ in /tmp/tmpw_z9_nmn.php on line 34\n\nWarning: array_key_exists() expects parameter\
    \ 2 to be array, string given in /tmp/tmpw_z9_nmn.php on line 34\n\nWarning: array_key_exists()\
    \ expects parameter 2 to be array, string given in /tmp/tmpw_z9_nmn.php on line\
    \ 34\n\nWarning: array_key_exists() expects parameter 2 to be array, string given\
    \ in /tmp/tmpw_z9_nmn.php on line 34\n\nWarning: array_key_exists() expects parameter\
    \ 2 to be array, string given in /tmp/tmpw_z9_nmn.php on line 34\n\nWarning: array_key_exists()\
    \ expects parameter 2 to be array, string given in /tmp/tmpw_z9_nmn.php on line\
    \ 34\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_z9_nmn.php:53\n\
    Stack trace:\n#0 /tmp/tmpw_z9_nmn.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpw_z9_nmn.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$expression = '';\n\tfor ($i = 0; $i < count($operator); $i++)\
    \ {\n\t\tswitch ($operator[$i]) {\n\t\t\tcase '+':\n\t\t\t\t$expression .= $operand[0]\
    \ + $operand[1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$expression .= $operand[0]\
    \ - $operand[1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$expression .= $operand[0]\
    \ * $operand[1];\n\t\t\t\tbreak;\n\t\t\tcase '/':\n\t\t\t\t$expression .= $operand[0]\
    \ / $operand[1];\n\t\t\t\tbreak;\n\t\t\tcase '^':\n\t\t\t\t$expression .= $operand[0]\
    \ ** $operand[1];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $expression;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9spox7z.php:49\n\
    Stack trace:\n#0 /tmp/tmpy9spox7z.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpy9spox7z.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Initialize variables.\n    $result = 0;\n    $length = count($operand);\n\
    \n    // Iterate through each operator.\n    for($i = 0; $i < $length; ++$i) {\n\
    \        // If operand list is empty break and return 0.\n        if($operand[$i]\
    \ == 0) {\n            break;\n        }\n\n        // If operator list is empty\
    \ break and return 0.\n        if($operator[$i] == 0) {\n            break;\n\
    \        }\n\n        // Otherwise, perform the operation on the current element\
    \ of operand list and result.\n        $result += $operand[$i] * $operator[$i];\n\
    \    }\n\n    // Return the result.\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptq1jsokj.php:50\n\
    Stack trace:\n#0 /tmp/tmptq1jsokj.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptq1jsokj.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operands = array();\n    foreach($operand as $key => $val)\
    \ {\n        $operands[] = $val;\n    }\n    switch($operator) {\n        case\
    \ '+': \n            return $operands[0] + $operands[1];\n        case '-': \n\
    \            return $operands[0] - $operands[1];\n        case '*': \n       \
    \     return $operands[0] * $operands[1];\n        case '/': \n            return\
    \ $operands[0] / $operands[1];\n        case '**': \n            return pow(abs($operands[0]),\
    \ $operands[1]);\n    }\n}\n\n$operators = array('+', '-', '*', '/', '**');\n\
    $operands = array('1', '2', '3', '4');\n$result = do_algebra($operators[1], $operands);\n\
    echo $result;\n</code>\n<|/ a dscore=1 tags=php,math,algorithm |>\n<| c |>\nI\
    \ appreciate the effort in answering this, but this doesn't really help the OP\
    \ solve their problem.\n<|/ c |>\n<| c |>\nThanks for the comment. I realised\
    \ that I missed the fact that he wanted to evaluate an expression rather than\
    \ evaluate an equation. Sorry about that!\n<|/ c |>\n<| c |>\nNo worries, I really\
    \ appreciate the effort.\n<|/ c |>\n<| c |>\nThis doesn't work correctly with\
    \ negative integers. Try adding `'**'` as one of the operators, and `array('-',-2,-5)`.\n\
    <|/ c |>\n<| c |>\nThanks for catching that bug, I fixed it. I think my original\
    \ answer was more of a proof of concept of what was possible with some basic arithmetic\
    \ operators. I didn't fully flesh out all of the operators, for example I didn't\
    \ include exponentiation.\n<|/ c |>\n<| a |>\nHere is a solution using a recursive\
    \ function, with a little bit of code duplication:\n<code>\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi06ybvoj.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$operator = array_values($operator);\n\t$operand = array_values($operand);\n\
    \tif (count($operator) != count($operand)) {\n\t\treturn false;\n\t}\n\t$operators\
    \ = array_flip($operator);\n\t$operands = array_flip($operand);\n\t$result = 0;\n\
    \tforeach ($operands as $i => $value) {\n\t\tif (isset($operators[$value])) {\n\
    \t\t\t$result .= $operators[$value] * $operands[$i];\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpri5wx74d.php:42\n\
    Stack trace:\n#0 /tmp/tmpri5wx74d.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpri5wx74d.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$sum = 0;\n\t\n\t// Loop through operator list. \n\tforeach ($operator\
    \ as $key => $value) {\n\t\t// Get value of operand from operand list. \n\t\t\
    $operand = $operand[$key];\n\t\t// Perform the calculation.\n\t\t$sum = $sum +\
    \ $operand;\n\t}\n\t\n\treturn $sum;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynoph9zr.php:38\n\
    Stack trace:\n#0 /tmp/tmpynoph9zr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpynoph9zr.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Do the basic algebra expression\n  $expression = $operand[0];\n\
    \  for ($i = 1; $i < count($operand) - 1; $i++) {\n    // Evaluate the current\
    \ expression using the given operator\n    $expression = $operator[0]($expression,\
    \ $operand[$i]);\n  }\n\n  return $expression;\n}\n</code>\n<|/ a tags=php |>\n\
    <| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplg1m93el.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  for($i=0; $i < count($operator) ; $i++) {\n \
    \   if($operator[$i] == '+') {\n      $result += $operand[$i];\n    }\n    elseif($operator[$i]\
    \ == '-') {\n      $result -= $operand[$i];\n    }\n    elseif($operator[$i] ==\
    \ '*') {\n      $result *= $operand[$i];\n    }\n    elseif($operator[$i] == '/')\
    \ {\n      $result /= $operand[$i];\n    }\n    elseif($operator[$i] == '%') {\n\
    \      $result %= $operand[$i];\n    }\n    elseif($operator[$i] == '**') {\n\
    \      $result **= $operand[$i];\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpico4yzdk.php:50\n\
    Stack trace:\n#0 /tmp/tmpico4yzdk.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpico4yzdk.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator_count = count($operator);\n    $operand_count = count($operand)\
    \ - 1;\n    $ops = str_repeat('*', ($operator_count + 1));\n    $ops[0] = '+';\n\
    \    $ops[$operator_count] = '-';\n    $ops = array_reverse($ops);\n    $ops =\
    \ array_merge($ops, array_fill(0, $operand_count, '*'));\n    $ops = array_merge($ops,\
    \ array_fill(0, $operator_count, '/'));\n    $ops = array_merge($ops, array_fill(0,\
    \ $operator_count, '**'));\n    $ops = array_merge($ops, array_fill(0, $operator_count,\
    \ '^'));\n    $ops = array_merge($ops, array_fill(0, $operator_count, '>'));\n\
    \    $ops = array_merge($ops, array_fill(0, $operator_count, '<'));\n    $ops\
    \ = array_merge($ops, array_fill(0, $operator_count, '=='));\n    $ops = array_merge($ops,\
    \ array_fill(0, $operator_count, '!='));\n    $ops = array_merge($ops, array_fill(0,\
    \ $operator_count, '>='));\n    $ops = array_merge($ops, array_fill(0, $operator_count,\
    \ '<='));\n    $ops = array_merge($ops, array_fill(0, $operator_count, '>'));\n\
    \    $ops = array_merge($ops, array_fill(0, $operator_count, '<'));\n    $ops\
    \ = array_merge($ops, array_fill(0, $operator_count, '!'));\n    for($i = 0; $i\
    \ < count($operand); $i++) {\n        $ops[$i + 1] .= $operand[$i];\n    }\n \
    \   $result = eval('return $ops;');\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, string given\
    \ in /tmp/tmpyzzjg2yk.php on line 26\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, null given in /tmp/tmpyzzjg2yk.php on line 27\n\nWarning:\
    \ array_merge(): Expected parameter 1 to be an array, null given in /tmp/tmpyzzjg2yk.php\
    \ on line 28\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmpyzzjg2yk.php on line 29\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, null given in /tmp/tmpyzzjg2yk.php on line 30\n\n\
    Warning: array_merge(): Expected parameter 1 to be an array, null given in /tmp/tmpyzzjg2yk.php\
    \ on line 31\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmpyzzjg2yk.php on line 32\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, null given in /tmp/tmpyzzjg2yk.php on line 33\n\n\
    Warning: array_merge(): Expected parameter 1 to be an array, null given in /tmp/tmpyzzjg2yk.php\
    \ on line 34\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmpyzzjg2yk.php on line 35\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, null given in /tmp/tmpyzzjg2yk.php on line 36\n\n\
    Warning: array_merge(): Expected parameter 1 to be an array, null given in /tmp/tmpyzzjg2yk.php\
    \ on line 37\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmpyzzjg2yk.php on line 38\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, null given in /tmp/tmpyzzjg2yk.php on line 39\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpyzzjg2yk.php:51\nStack\
    \ trace:\n#0 /tmp/tmpyzzjg2yk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpyzzjg2yk.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code goes here\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr70tfr4x.php:29\n\
    Stack trace:\n#0 /tmp/tmpr70tfr4x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpr70tfr4x.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operators;\n\t$sum = 0;\n\tforeach ($operand as $k =>\
    \ $v) {\n\t\tif ($k !== 0) {\n\t\t\t$sum += $operators[$operator]($v, $operand[$k\
    \ - 1]);\n\t\t}\n\t}\n\treturn $sum;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpw2wa08jl.php:25\n\
    Stack trace:\n#0 /tmp/tmpw2wa08jl.php(31): do_algebra(Array, Array)\n#1 /tmp/tmpw2wa08jl.php(35):\
    \ candidate(Array, Array)\n#2 /tmp/tmpw2wa08jl.php(40): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpw2wa08jl.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = 0;\n\tforeach($operator as $key => $val) {\n\t\t$result\
    \ = $result + ($operand[$key] * $val);\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp6fr6rwox.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp6fr6rwox.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp6fr6rwox.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fr6rwox.php:32\n\
    Stack trace:\n#0 /tmp/tmp6fr6rwox.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6fr6rwox.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Initialize some variables to store the intermediate result\n\
    \    $result = null;\n    $total = null;\n    \n    // Initialize two integer\
    \ variables for building our algebric expression\n    $a = null;\n    $b = null;\n\
    \    \n    // For each operand (except the last) in the operand list, set the\
    \ variable \n    // $a to the value of the operand and add the value of the last\
    \ operand (the \n    // one just processed)\n    foreach ($operand as $index =>\
    \ $operand) {\n        $a = ($index === count($operand) - 1) ? $operand : $a;\n\
    \        \n        // Set the $b variable to the value of the current operand\
    \ (except the \n        // last) and add the value of the last operation to it.\n\
    \        $b = ($index === count($operand) - 1) ? $a : $b;\n        \n        //\
    \ Do the math operation\n        $result = $a . str_replace(['+', '-', '*', '//'],\
    \ '', $operator) . $b;\n        \n        // Save the current result and set $total\
    \ to $result\n        $total = $result;\n    }\n    \n    // Return the result\
    \ of the algebric expression\n    return $total;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpj0i7qc6l.php on line 33\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpj0i7qc6l.php\
    \ on line 37\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpj0i7qc6l.php on line 33\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpj0i7qc6l.php\
    \ on line 37\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpj0i7qc6l.php on line 33\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpj0i7qc6l.php\
    \ on line 37\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpj0i7qc6l.php on line 33\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpj0i7qc6l.php\
    \ on line 37\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0i7qc6l.php:54\n\
    Stack trace:\n#0 /tmp/tmpj0i7qc6l.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpj0i7qc6l.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $expression = \"\";\n    $operandlength = count($operand) -\
    \ 1;\n    $operatorlength = count($operator) - 1;\n    if ($operandlength < 0)\
    \ {\n        return \"\";\n    }\n    if ($operatorlength < 0) {\n        return\
    \ \"\";\n    }\n    // Initialize the expression variable with + or - operator\n\
    \    if ($operator === $operator[0]) {\n        $expression = $operator[0];\n\
    \    }\n    else {\n        $expression = $operator[0];\n    }\n    // For each\
    \ operand in operand\n    for ($i = 0; $i <= $operandlength; $i++) {\n       \
    \ if ($operator === $operator[$i]) {\n            // if operand is of integer\
    \ type and operator is of operator + \n            if (is_int($operand[$i])) {\n\
    \                $expression = $expression . $operand[$i];\n            }\n  \
    \          // if operand is of float type and operator is of operator - \n   \
    \         else {\n                $expression = $expression . $operand[$i] . \"\
    -\";\n            }\n        }\n        // For each operator in operator list\n\
    \        for ($j = 0; $j <= $operatorlength; $j++) {\n            if ($operator\
    \ === $operator[$j]) {\n                // if operator is of operator + \n   \
    \             if ($j === 0) {\n                    $expression = $expression .\
    \ \"+\";\n                }\n                // if operator is of operator - \n\
    \                else if ($j === $operatorlength - 1) {\n                    $expression\
    \ = $expression . \"-\";\n                }\n                // if operator is\
    \ of operator - \n                else if ($j === 1) {\n                    $expression\
    \ = $expression . \"*\";\n                }\n                // if operator is\
    \ of operator // \n                else if ($j === 2) {\n                    $expression\
    \ = $expression . \"/\";\n                }\n                // if operator is\
    \ of operator ** \n                else if ($j === 3) {\n                    $expression\
    \ = $expression . \"**\";\n                }\n            }\n        }\n    }\n\
    \    // Return the evaluated expression.\n    return $expression;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxjsgd6l.php:83\n\
    Stack trace:\n#0 /tmp/tmpyxjsgd6l.php(88): test()\n#1 {main}\n  thrown in /tmp/tmpyxjsgd6l.php\
    \ on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operand_length = count($operand) - 1;\n    $operator_length\
    \ = count($operator) - 1;\n    $operand_sum = 0;\n    $operand_product = 1;\n\n\
    \    for ($i = 0; $i <= $operand_length; $i++) {\n        $operand_sum += $operand[$i];\n\
    \        $operand_product *= $operand[$i];\n    }\n\n    $result = ($operator[0]\
    \ * $operand_sum) + ($operator[1] * $operand_product);\n\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpcr5kmoaz.php on line\
    \ 31\n\nWarning: A non-numeric value encountered in /tmp/tmpcr5kmoaz.php on line\
    \ 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcr5kmoaz.php:41\n\
    Stack trace:\n#0 /tmp/tmpcr5kmoaz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcr5kmoaz.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = \"\";\n    $first = true;\n    foreach($operator\
    \ as $op) {\n        // Add space if we're not the first operation.\n        if(!$first)\
    \ $result .= \" \";\n        $result .= $op;\n        $first = false;\n      \
    \  foreach($operand as $num) {\n            if(is_numeric($num)) {\n         \
    \       $result .= $num;\n            } else {\n                $result .= $num;\n\
    \                foreach($operand as $operand) {\n                    if(is_numeric($operand))\
    \ {\n                        $result .= $operand;\n                        break;\n\
    \                    }\n                    $result .= $operand;\n           \
    \     }\n                break;\n            }\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,math,algebra |>\n<| c |>\nIt doesn't work with negative\
    \ numbers\n<|/ c |>\n<| a dscore=5 |>\nHere is the solution that works best for\
    \ me:\n<code>\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyn9cm38_.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code goes here.\n  $result = false;\n  foreach($operator\
    \ as $op) {\n    foreach($operand as $num) {\n      $result = eval(\"$op {$num}\"\
    );\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprclj4z47.php(25) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    if ($operator[$i] == '+') {\n      $result = $result + $operand[$i];\n  \
    \  }\n    if ($operator[$i] == '-') {\n      $result = $result - $operand[$i];\n\
    \    }\n    if ($operator[$i] == '*') {\n      $result = $result * $operand[$i];\n\
    \    }\n    if ($operator[$i] == '/') {\n      $result = $result / $operand[$i];\n\
    \    }\n    if ($operator[$i] == '%') {\n      $result = $result % $operand[$i];\n\
    \    }\n    if ($operator[$i] == '**') {\n      $result = $result ** $operand[$i];\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprk7kk17e.php:50\n\
    Stack trace:\n#0 /tmp/tmprk7kk17e.php(55): test()\n#1 {main}\n  thrown in /tmp/tmprk7kk17e.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Code goes here\n\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrkoi6vt.php:29\n\
    Stack trace:\n#0 /tmp/tmptrkoi6vt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptrkoi6vt.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here.\n}\n\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4j3wygeb.php:29\n\
    Stack trace:\n#0 /tmp/tmp4j3wygeb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4j3wygeb.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operatorList = explode(\"+\", $operator);\n    $operandList\
    \ = explode(\"-\", $operand);\n\n    $stack = array();\n    for($i = count($operatorList)\
    \ - 2; $i >= 0; $i--) {\n        $op = $operatorList[$i];\n        $value = $operandList[$i];\n\
    \        array_push($stack, $op);\n\n        for($j = count($operandList) - $i\
    \ + 1; $j <= count($operandList); $j++) {\n            $right = $operandList[$j];\n\
    \            $left = $operandList[$j - $i];\n\n            if ($op == '/') {\n\
    \                $stack[$j - 1] = $value / $left;\n            } else if ($op\
    \ == '*') {\n                $stack[$j - 1] = $value * $left;\n            } else\
    \ if ($op == '**') {\n                $stack[$j - 1] = $value ** $left;\n    \
    \        } else {\n                if ($op == \"-\") {\n                    $stack[$j\
    \ - 1] = floor($value) - floor($left);\n                } else if ($op == \"+\"\
    ) {\n                    $stack[$j - 1] = floor($value) + floor($left);\n    \
    \            }\n            }\n        }\n    }\n\n    return array_pop($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmp2sadlo2c.php\
    \ on line 21\n\nWarning: explode() expects parameter 2 to be string, array given\
    \ in /tmp/tmp2sadlo2c.php on line 22\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmp2sadlo2c.php on line\
    \ 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2sadlo2c.php:58\n\
    Stack trace:\n#0 /tmp/tmp2sadlo2c.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp2sadlo2c.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Evaluate the operand list with the operator list\n    $result\
    \ = 0;\n    foreach ($operand as $operand) {\n        // Use switch to evaluate\
    \ each operator in operator list.\n        // The default case is when the operator\
    \ is undefined.\n        switch ($operator) {\n            case '+':\n       \
    \         $result += $operand;\n                break;\n            case '-':\n\
    \                $result -= $operand;\n                break;\n            case\
    \ '*':\n                $result *= $operand;\n                break;\n       \
    \     case '//':\n                $result /= $operand;\n                break;\n\
    \            case '**':\n                $result **= $operand;\n             \
    \   break;\n        }\n    }\n    // Return result\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7qzqx67j.php:52\n\
    Stack trace:\n#0 /tmp/tmp7qzqx67j.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7qzqx67j.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // your code goes here\n  $result = 0;\n  foreach ($operator\
    \ as $key => $value) {\n    if ($value === '*' || $value === '/' || $value ===\
    \ '//') {\n      foreach ($operand as $k => $v) {\n        $result = $result +\
    \ $v[$key];\n      }\n    } else {\n      foreach ($operand as $k => $v) {\n \
    \       $result = $result + $v[$key] * pow(10, $key);\n      }\n    }\n  }\n \
    \ return $result;\n}\n</code>\n<|/ a tags=math,algorithm,php,permutation |>\n\
    <| c |>\nI don't think this is correct. `2^3=8` while `3^2` `^` (power operator)\
    \ `8`\n<|/ c |>\n<| c |>\nSorry my mistake. I didn't notice it at first. I'll\
    \ edit my answer now.\n<|/ c |>\n<| c |>\nYour answer is great, but I cannot understand\
    \ it fully. I can't understand how can you get the result by multiplying numbers\
    \ from $operand by numbers form $operator.\n<|/ c |>\n<| c |>\nThat's what my\
    \ code does! Take a look at my comments.\n<|/ c |>\n<| a tags=math,algorithm,php,permutation\
    \ |>\nYou can try the following:\n<code>\nfunction candidate(...$args) {\n   \
    \ return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeonz8k1v.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$total = 0;\n\t$length = sizeof($operator) - 1;\n\tfor ($i =\
    \ 0; $i < sizeof($operand); $i++) {\n\t\t$total = $total + $operator[$i] * $operand[$i];\n\
    \t}\n\treturn $total;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpdn_rhjqd.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpdn_rhjqd.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpdn_rhjqd.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn_rhjqd.php:34\n\
    Stack trace:\n#0 /tmp/tmpdn_rhjqd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdn_rhjqd.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp542pn0nw.php:28\n\
    Stack trace:\n#0 /tmp/tmp542pn0nw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp542pn0nw.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for($i = 1; $i < count($operand); $i++)\
    \ {\n    $result = $operator[$i - 1]($operand[$i - 1], $result);\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function **() in /tmp/tmprvxn9ufj.php:23\n\
    Stack trace:\n#0 /tmp/tmprvxn9ufj.php(28): do_algebra(Array, Array)\n#1 /tmp/tmprvxn9ufj.php(32):\
    \ candidate(Array, Array)\n#2 /tmp/tmprvxn9ufj.php(37): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmprvxn9ufj.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Initialize the result variable to the value of the first operand.\n\
    \  $result = $operand[0];\n  // Loop through the rest of the operands, applying\
    \ the operation on each operand.\n  for ($i = 1; $i < count($operand); $i++) {\n\
    \    switch ($operator[$i - 1]) {\n      // Addition\n      case '+':\n      \
    \  $result += $operand[$i];\n        break;\n      // Subtraction\n      case\
    \ '-':\n        $result -= $operand[$i];\n        break;\n      // Multiplication\n\
    \      case '*':\n        $result *= $operand[$i];\n        break;\n      // Floor\
    \ Division\n      case '/':\n        $result /= $operand[$i];\n        break;\n\
    \      // Exponentiation\n      case '**':\n        $result **= $operand[$i];\n\
    \        break;\n      // Invalid operator\n      default:\n        exit();\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5yhnebav.php:59\n\
    Stack trace:\n#0 /tmp/tmp5yhnebav.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp5yhnebav.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    \n    // Your code goes here\n    \n    //loop through the\
    \ operator\n    foreach($operator as $key => $val) {\n    \n        foreach($operand\
    \ as $key1 => $val1) {\n            \n            //if the key is equal to the\
    \ operator in the array\n            if($key == $val) {\n                \n  \
    \              //subtract the operands\n                $result = $val1 - $val1;\n\
    \                \n                //if the result is a negative number\n    \
    \            if($result < 0) {\n                    $result = 0;\n           \
    \     }\n                return $result;\n            }\n        }\n    }\n  \
    \  \n    //error \n    return 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfwnkier.php:53\n\
    Stack trace:\n#0 /tmp/tmpvfwnkier.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpvfwnkier.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$operand_length = count($operand) - 1;\n\t$operator_length =\
    \ count($operator) - 1;\n\t\n\t$result = 0;\n\t\n\tfor ($i = 0; $i < $operand_length;\
    \ $i++) {\n\t\t$left_value = $operand[$i];\n\t\t$left_operator = $operator[0];\n\
    \t\t$right_value = $operand[$i + 1];\n\t\t$right_operator = $operator[$operator_length];\n\
    \t\t\n\t\tswitch ($left_operator) {\n\t\t\tcase '+':\n\t\t\t\t$result += $left_value;\n\
    \t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$result -= $left_value;\n\t\t\t\tbreak;\n\
    \t\t\tcase '*':\n\t\t\t\t$result *= $left_value;\n\t\t\t\tbreak;\n\t\t\tcase '/':\n\
    \t\t\t\t$result /= $left_value;\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$result\
    \ /= $left_value;\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$result **= $left_value;\n\
    \t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tswitch ($right_operator) {\n\t\t\tcase '+':\n\
    \t\t\t\t$result += $right_value;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$result\
    \ -= $right_value;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result *= $right_value;\n\
    \t\t\t\tbreak;\n\t\t\tcase '/':\n\t\t\t\t$result /= $right_value;\n\t\t\t\tbreak;\n\
    \t\t\tcase '//':\n\t\t\t\t$result /= $right_value;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '**':\n\t\t\t\t$result **= $right_value;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8k5c1m9w.php:83\n\
    Stack trace:\n#0 /tmp/tmp8k5c1m9w.php(88): test()\n#1 {main}\n  thrown in /tmp/tmp8k5c1m9w.php\
    \ on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operators;\n\t\n\t/*\n\t\tAlgorithm:\n\t\t- Start with\
    \ operands and operators stacks empty.\n\t\t- For each operator:\n\t\t  1. Split\
    \ the operand list into two lists of integers, a and b.\n\t\t  2. Perform the\
    \ operation between the two lists using the operator.\n\t\t  3. Push results into\
    \ operators stack until it becomes empty \n\t\t  (if the operator does not require\
    \ stack space).\n\t\t- Return operators from operators stack until it is empty.\n\
    \t*/\n\t\n\t\n\t// Initialize the stacks and operators\n\t$operators = array();\n\
    \t$operands = array();\n\t\n\tforeach ($operand as $a => $b) {\n\t\t$operands[$a]\
    \ = $b;\n\t\t$operators[count($operators)] = $operator;\n\t}\n\t\n\t// If the\
    \ operator stack is empty, there is no operator to perform.\n\tif (empty($operators))\
    \ return $operands;\n\t\n\t// Stack contains at least one operator. Perform the\
    \ operation between the two lists\n\t$result = $operands[$operands[0]];\n\t\n\t\
    foreach ($operators as $index => $operator) {\n\t\tif (isset($operands[$index\
    \ + 1])) { // Only operate on operands after the operator has been performed.\n\
    \t\t\t$result = $operators[$index] . $operands[$index + 1];\n\t\t\tunset($operands[$index\
    \ + 1], $operands[$index]);\n\t\t}\n\t}\n\t\n\t// Push the result onto the operators\
    \ stack\n\t$operators[count($operators)] = $result;\n\t\n\t// Pop results from\
    \ the operators stack\n\twhile ($operator = array_pop($operators)) \n\t\n\treturn\
    \ $operators;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bpp2nt3.php:71\n\
    Stack trace:\n#0 /tmp/tmp4bpp2nt3.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp4bpp2nt3.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operand = array_filter($operand, 'is_numeric');\n    if (count($operator)\
    \ !== count($operand)) {\n        return false;\n    }\n    $operand = array_values($operand);\n\
    \    $operator = array_values($operator);\n    for ($i = 0; $i < count($operator);\
    \ ++$i) {\n        if ($operator[$i] === '/' && $operand[$i] == 0) {\n       \
    \     $operator[$i] = '/';\n            $operand[$i] = 1;\n        }\n    }\n\
    \    if (count($operator) > count($operand) - 1) {\n        return false;\n  \
    \  }\n    $algebric_operator = '';\n    $algebric_operand = '';\n    for ($i =\
    \ 0; $i < count($operator); ++$i) {\n        $algebric_operator .= $operator[$i];\n\
    \        if ($i < count($operator) - 1) {\n            $algebric_operand .= $operand[$i];\n\
    \        }\n    }\n    $algebric_operator = strtoupper($algebric_operator);\n\
    \    $algebric_operand = strtoupper($algebric_operand);\n    if ($algebric_operand\
    \ === 'MINUS' || $algebric_operand === 'MINUS-') {\n        $algebric_operand\
    \ = strtolower('-');\n    }\n    if ($algebric_operand === 'TIMES' || $algebric_operand\
    \ === 'TIMES-') {\n        $algebric_operand = strtolower('*');\n    }\n    if\
    \ ($algebric_operator === 'DIVIDE' && $algebric_operand === 'DIVIDE') {\n    \
    \    $algebric_operand = strtolower('//');\n    }\n    if ($algebric_operand ===\
    \ 'ROOT') {\n        $algebric_operand = 'SQRT';\n    }\n    $algebric_operand\
    \ = $algebric_operand . ' ';\n    for ($i = 0; $i < count($operand); ++$i) {\n\
    \        $algebric_operand .= $operand[$i];\n        if ($i < count($operand)\
    \ - 1) {\n            $algebric_operand .= $algebric_operator;\n        }\n  \
    \  }\n    return eval($algebric_operand);\n}\n$result = do_algebra($operator,\
    \ $operand);\nprint_r($result);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 1 to be array, null given in\
    \ /tmp/tmpq605bm30.php on line 21\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpq605bm30.php on line 22\n\n\
    Warning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmpq605bm30.php on line 22\n\nWarning: array_values() expects parameter\
    \ 1 to be array, null given in /tmp/tmpq605bm30.php on line 25\n\nWarning: array_values()\
    \ expects parameter 1 to be array, null given in /tmp/tmpq605bm30.php on line\
    \ 26\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpq605bm30.php on line 27\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpq605bm30.php\
    \ on line 33\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq605bm30.php on line 33\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpq605bm30.php:74\nStack trace:\n#0 /tmp/tmpq605bm30.php(79):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq605bm30.php on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// If there are only operators and operands, return 0\n\tif (count($operator)\
    \ < 2 || count($operand) < 2) {\n\t\techo \"The input must be a list of 2 operands\
    \ and 1 operator. \\n\";\n\t\techo \"There are no valid combinations.\";\n\t\t\
    return 0;\n\t}\n\t// Get the number of operands minus one\n\t$num_operands = count($operand)\
    \ - 1;\n\t// Initialize the expression value 0\n\t$expression = 0;\n\tforeach\
    \ ($operand as $operand) {\n\t\t$expression += $operand;\n\t}\n\tforeach ($operator\
    \ as $operator) {\n\t\tswitch ($operator) {\n\t\t\tcase '+':\n\t\t\t\t$expression\
    \ += $operand;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$expression -= $operand;\n\
    \t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$expression *= $operand;\n\t\t\t\tbreak;\n\
    \t\t\tcase '//':\n\t\t\t\t$expression = $expression / $operand;\n\t\t\t\tbreak;\n\
    \t\t\tcase '**':\n\t\t\t\t$expression = pow($expression, $operand);\n\t\t\t\t\
    break;\n\t\t\tdefault:\n\t\t\t\techo \"Invalid operator: \" . $operator . \"\\\
    n\";\n\t\t\t\techo \"The input must be a list of 2 operands and 1 operator. \\\
    n\";\n\t\t\t\techo \"There are no valid combinations.\";\n\t\t\t\treturn 0;\n\t\
    \t}\n\t}\n\treturn $expression;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppg2b2znf.php:65\n\
    Stack trace:\n#0 /tmp/tmppg2b2znf.php(70): test()\n#1 {main}\n  thrown in /tmp/tmppg2b2znf.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0; \n    foreach($operand as $number) {\n       \
    \ $result = ($result * $number) + $operator[0];\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpi8vnz5rx.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpi8vnz5rx.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpi8vnz5rx.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpi8vnz5rx.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi8vnz5rx.php:32\n\
    Stack trace:\n#0 /tmp/tmpi8vnz5rx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpi8vnz5rx.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    foreach ($operator as $key => $val) {\n        if ($key ==\
    \ '+') {\n            $res = (array_sum($operand) == 0) ? 0 : (array_sum($operand)\
    \ == 1) ? 1 : ((array_sum($operand) == 2) || (array_sum($operand) == 3)) ? 2 :\
    \ 3;\n        } else if($key == '-') {\n            $res = (-array_sum($operand)\
    \ == 0) ? 0 : (array_sum($operand) == 1) ? -1 : ((array_sum($operand) == 2) ||\
    \ (array_sum($operand) == 3)) ? -2 : -3;\n        } else if($key == '*') {\n \
    \           $res = (array_product($operand) == 1) ? array_product($operand) :\
    \ ((array_product($operand) == 2) || (array_product($operand) == 3)) ? array_product($operand)\
    \ : array_product($operand);\n        } else if($key == '/') {\n            $res\
    \ = (array_sum($operand) == 1) ? 0 : (array_product($operand) == 1) ? 1 : ((array_product($operand)\
    \ == 2) || (array_product($operand) == 3)) ? 2 : 3;\n        } else if($key ==\
    \ '^') {\n            $res = ($operand[0] == 1) ? pow($operand[0], $operand[1])\
    \ : pow($operand[0], $operand[1]) * pow($operand[0], $operand[1]) + $operand[1];\n\
    \        } else if($key == '%') {\n            $res = ($operand[0] == 1) ? pow($operand[0],\
    \ $operand[1]) % $operand[1] : pow($operand[0], $operand[1]) * pow($operand[0],\
    \ $operand[1]) % $operand[1];\n        } else if($key == '**') {\n           \
    \ $res = pow($operand[0], $operand[1]);\n        }\n        $operand[$key] = $res;\n\
    \    }\n    return $operand;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b84dj3k.php:47\n\
    Stack trace:\n#0 /tmp/tmp_b84dj3k.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_b84dj3k.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // We start with an empty string and add the operands.\n  \
    \  $expr = '';\n    // Each digit is a separate list item.\n    foreach ($operator\
    \ as $key => $val) {\n        // If there are two operands, we add them to the\
    \ expression.\n        if (count($operand) == 2) {\n            $expr .= $operand[$key]\
    \ . ' ' . $val . ' ';\n        } else {\n            // Otherwise, we use the\
    \ first operand as the multiplicator and the\n            // second operand as\
    \ the divisor in the expression.\n            $expr .= $operand[$key] . ' ' .\
    \ $operand[$key] . ' ';\n        }\n    }\n\n    // We remove the extra space\
    \ and return the result.\n    return substr($expr, 3);\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmper9bu7le.php:43\n\
    Stack trace:\n#0 /tmp/tmper9bu7le.php(48): test()\n#1 {main}\n  thrown in /tmp/tmper9bu7le.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here\n  $result = $operand[0];\n  for($i =\
    \ 1; $i < count($operand); $i++) {\n    switch($operator[$i - 1]) {\n      case\
    \ \"+\":\n        $result +=  $operand[$i];\n        break;\n      case \"-\"\
    :\n        $result -=  $operand[$i];\n        break;\n      case \"*\":\n    \
    \    $result *=  $operand[$i];\n        break;\n      case \"//\":\n        $result\
    \ /=  $operand[$i];\n        break;\n      case \"**\":\n        $result **= $operand[$i];\n\
    \        break;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hfmbpgn.php:50\n\
    Stack trace:\n#0 /tmp/tmp2hfmbpgn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2hfmbpgn.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = array();\n    $operator_index = 0;\n    $operator_stack\
    \ = array();\n    $result_stack = array();\n    foreach ($operator as $value)\
    \ {\n        $result = $result + $operand[$operator_index - 1];\n        switch\
    \ ($value) {\n            case '*':\n                $operator_index++;\n    \
    \            array_push($operator_stack, array('*', $operand[$operator_index -\
    \ 1], true));\n                break;\n            case '/':\n               \
    \ $operator_index++;\n                array_push($operator_stack, array('*', $operand[$operator_index\
    \ - 1], false));\n                break;\n            case '+':\n            \
    \    $operator_index++;\n                array_push($operator_stack, array('+',\
    \ $operand[$operator_index - 1], true));\n                break;\n           \
    \ case '-':\n                $operator_index++;\n                array_push($operator_stack,\
    \ array('+', $operand[$operator_index - 1], false));\n                break;\n\
    \            default:\n                array_push($operator_stack, array('*',\
    \ $operand[$operator_index - 1], true));\n                break;\n        }\n\
    \    }\n    array_push($operator_stack, array('+', $operand[$operator_index -\
    \ 1], false));\n    do {\n        $operator_stack_length = (count($operator_stack)\
    \ - 1);\n        for ($i = 0; $i < $operator_stack_length; $i++) {\n         \
    \   $operator_stack[$i][1] = $operand[$operator_stack[$i][1]];\n            if\
    \ ($operator_stack[$i][2]) {\n                $result = ($result / $operator_stack[$i][0]);\n\
    \            } else {\n                $result = $result * $operator_stack[$i][0]\
    \ ;\n            }\n        }\n        array_push($result_stack, $result);\n \
    \       $result = 0;\n        for ($i = 0; $i < $operator_stack_length; $i++)\
    \ {\n            $operator = $operator_stack[$i];\n            $operator_index\
    \ = $operator_index + $operator[1] - $operator[0];\n            switch ($operator[0])\
    \ {\n                case '*':\n                    $result = $result + $operand[$operator_index\
    \ - 1];\n                    break;\n                case '/':\n             \
    \       $result = $result + ($operand[$operator_index - 1] == 0 ? 0 : ($operand[$operator_index\
    \ - 1] / $result));\n                    break;\n                case '+':\n \
    \                   $result = $result + $operand[$operator_index - 1];\n     \
    \               break;\n                case '-':\n                    $result\
    \ = $result + $operand[$operator_index - 1];\n                    break;\n   \
    \         }\n        }\n    } while (count($operator_stack) > 0);\n    return\
    \ array_pop($result_stack);\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmph_hzzh3u.php:26\n\
    Stack trace:\n#0 /tmp/tmph_hzzh3u.php(84): do_algebra(Array, Array)\n#1 /tmp/tmph_hzzh3u.php(88):\
    \ candidate(Array, Array)\n#2 /tmp/tmph_hzzh3u.php(93): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmph_hzzh3u.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $res = 0;\n    foreach ($operator as $key => $value){\n   \
    \     if ($value == \"\"){\n            continue;\n        }\n        $res +=\
    \ $operand[$key] * $value;\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpe_vkbxxt.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpe_vkbxxt.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpe_vkbxxt.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_vkbxxt.php:35\n\
    Stack trace:\n#0 /tmp/tmpe_vkbxxt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpe_vkbxxt.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operators;\n\n\tif(!isset($operators[$operator])) {\n\
    \t\tdie(\"Invalid operator.\");\n\t}\n\n\t$expression = \"\";\n\t$index = 0;\n\
    \tfor($i = 0; $i < count($operand); $i++) {\n\t\t$current = $operand[$i];\n\t\t\
    $operator = $operators[$operator];\n\t\tif(is_numeric($current) && $current >\
    \ 0) {\n\t\t\t$expression = $expression.$current.$operator;\n\t\t} else {\n\t\t\
    \t$expression = $expression.\"+\".$current.$operator;\n\t\t}\n\t\t$index++;\n\t\
    }\n\n\treturn $expression;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Invalid operator.
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0; \n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        $result = ($result + eval($operand[$i]) * eval($operator[$i])); \n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7louvn3j.php(23) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // TODO: Make this work with the example\n    $output = 'result\
    \ = ';\n    foreach ($operand as $key => $operand) {\n        switch ($key) {\n\
    \            case 0:\n                $output .= '1';\n                break;\n\
    \            case 1:\n                $output .= '0';\n                break;\n\
    \            default:\n                $output .= $operand;\n        }\n    }\n\
    \    $output .= $operator;\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqamh6y.php:44\n\
    Stack trace:\n#0 /tmp/tmppmqamh6y.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppmqamh6y.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $op = array();\n  foreach ($operator as $key => $val) {\n   \
    \ list($ops, $num) = explode('*', $val);\n    if ($ops == '+') { $op = \"+\";}\n\
    \    if ($ops == '-') { $op = \"-\";}\n    if ($ops == '*') { $op = \"*\";}\n\
    \    if ($ops == '/') { $op = \"/\";}\n    if ($ops == '**') { $op = \"**\";}\n\
    \    if ($ops != '+') { \n      echo \"Error: Unknown op $op for op $val <br>\"\
    ;\n      echo \"operator list:<br>\";\n      echo implode('<br>', $operator);\n\
    \      echo \"<br>operand list:<br>\";\n      echo implode('<br>', $operand);\n\
    \      echo \"<br>\";\n      exit();\n    }\n    $ops[] = $key;\n    $num[] =\
    \ $num;\n  }\n  $exp = array();\n  $result = 1;\n  foreach ($op as $key => $val)\
    \ {\n    foreach ($num as $subkey => $subval) {\n      $exp[] = $subval[$key];\n\
    \    }\n    $result = $result $ops[$key];\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn9hf1244.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator_list = array( '+', '-', '*', '//', '**');\n    $result_list\
    \ = array();\n    $result = $operand[0];\n    foreach($operator as $op) {\n  \
    \      if(!in_array($op, $operator_list)) {\n            $result = 'ERROR';\n\
    \            break;\n        }\n        $result = $op * $result + $operand[$op];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpkhr2nblc.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpkhr2nblc.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpkhr2nblc.php on line\
    \ 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkhr2nblc.php:39\n\
    Stack trace:\n#0 /tmp/tmpkhr2nblc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkhr2nblc.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code goes here\n    $i = 0;\n    $result = array();\n\
    \    foreach($operator as $key => $operator) {\n        foreach($operand as $key\
    \ => $operand) {\n            $result[$i][] = ($operand * pow($operator, $operand));\n\
    \            $i++;\n        }\n    }\n    $result1 = array();\n    foreach($operator\
    \ as $key => $operator) {\n        foreach($operand as $key => $operand) {\n \
    \           $result1[] = ($operand / $operand);\n        }\n    }\n    \n    return\
    \ array_sum($result) - array_sum($result1);\n    \n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpux4dzezb.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpux4dzezb.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpux4dzezb.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpux4dzezb.php on line\
    \ 26\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpux4dzezb.php\
    \ on line 25\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpux4dzezb.php\
    \ on line 25\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpux4dzezb.php\
    \ on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux4dzezb.php:46\n\
    Stack trace:\n#0 /tmp/tmpux4dzezb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpux4dzezb.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $algebric_expression = '';\n  foreach($operator as $key => $value)\
    \ {\n    if ($value == '+') {\n      $algebric_expression .= ' + ';\n    } else\
    \ if ($value == '-') {\n      $algebric_expression .= '- ';\n    } else if ($value\
    \ == '*') {\n      $algebric_expression .= ' * ';\n    } else if ($value == '//')\
    \ {\n      $algebric_expression .= ' // ';\n    } else if ($value == '**') {\n\
    \      $algebric_expression .= ' ** ';\n    }\n  }\n  return $algebric_expression;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblp817fa.php:42\n\
    Stack trace:\n#0 /tmp/tmpblp817fa.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpblp817fa.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    $first = $operand[0];\n    foreach\
    \ ($operand as $i => $value) {\n        switch ($operator[$i]) {\n           \
    \ case '+':\n                $result +=$value;\n                break;\n     \
    \       case '-':\n                $result -=$value;\n                break;\n\
    \            case '*':\n                $result *=$value;\n                break;\n\
    \            case '/':\n                $result /=$value;\n                break;\n\
    \            case '**':\n                $result **=$value;\n                break;\n\
    \            default:\n                echo \"Invalid operator: \".$operator[$i].\"\
    \\n\";\n        }\n    }\n    echo \"Result = $result\\n\";\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Invalid operator: \nResult = 16\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpxi_vhco5.php:53\nStack trace:\n#0 /tmp/tmpxi_vhco5.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxi_vhco5.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code goes here!\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihiayv63.php:28\n\
    Stack trace:\n#0 /tmp/tmpihiayv63.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpihiayv63.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if(count($operator) == 0 || count($operand) == 0) {\n     \
    \   return 0;\n    }\n    $result = $operand[0];\n    $operators = array_reverse($operator);\n\
    \    foreach ($operators as $operation) {\n        if (array_search($operation,\
    \ array_keys($operators)) !== false) { // Operator in operator list\n        \
    \    $result += $operand[count($operand) - 1];\n        }\n    }\n    return $result;\n\
    }\n\n$operator = ['+', '*', '-']; // Basic algebra operations\n$array = [2, 3,\
    \ 4, 5]; // List of integers\n$result = do_algebra($operator, $array);\necho $result;\n\
    </code>\n<|/ a tags=php |>\n<| c |>\nCan you please add some explanation? You\
    \ probably just copied this code and pasted without reading it - and I suspect\
    \ that people like me would appreciate this.\n<|/ c |>\n<| c |>\nThe code is self\
    \ explanatory.\n<|/ c |>\n<| a tags=php |>\n<code>\n/**\n * Calculate the operation\
    \ with given two array\n *\n * type $operation\n * type $array1\n * type $array2\n\
    \ *\n * type\n */\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp87z_7boy.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here.\n    foreach ($operand as $key => $number)\
    \ {\n        \n    }\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporo_25rf.php:31\n\
    Stack trace:\n#0 /tmp/tmporo_25rf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmporo_25rf.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Base case: if the operand list is empty, the expression will\
    \ be zero.\n\tif (count($operand) == 0) {\n\t\treturn 0;\n\t}\n\t// Base case:\
    \ if the operator list is empty, the expression will be zero.\n\tif (count($operator)\
    \ == 0) {\n\t\treturn 0;\n\t}\n\t// Find the size of the largest operand and operator.\n\
    \t$max_size = max(count($operand), count($operator));\n\t// Initialize an expression\
    \ to zero.\n\t$expression = 0;\n\t// Do the rest of the computations.\n\tfor ($i\
    \ = 0; $i < $max_size; $i++) {\n\t\tswitch ($operator[$i]) {\n\t\t\t// Addition.\n\
    \t\t\tcase '+':\n\t\t\t\t$expression += $operand[$i];\n\t\t\t\tbreak;\n\t\t\t\
    // Subtraction.\n\t\t\tcase '-':\n\t\t\t\t$expression -= $operand[$i];\n\t\t\t\
    \tbreak;\n\t\t\t// Multiplication.\n\t\t\tcase '*':\n\t\t\t\t$expression *= $operand[$i];\n\
    \t\t\t\tbreak;\n\t\t\t// Floor division.\n\t\t\tcase '/':\n\t\t\t\tif ($operand[$i]\
    \ > 0) {\n\t\t\t\t\t$expression = $expression / $operand[$i];\n\t\t\t\t} else\
    \ {\n\t\t\t\t\t$expression = $expression / abs($operand[$i]);\n\t\t\t\t}\n\t\t\
    \t\tbreak;\n\t\t\t// Exponentiation.\n\t\t\tcase '^':\n\t\t\t\t$expression = pow($operand[$i],\
    \ $expression);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdie('Unknown operator.');\n\
    \t\t}\n\t}\n\t// Return the expression.\n\treturn $expression;\n}\n\n$operations\
    \ = array(\n\t'+' => '+',\n\t'-' => '-',\n\t'*' => '*',\n\t'/' => '/',\n\t'^'\
    \ => '^',\n);\n\n$operands = array(\n\tarray(2, 3, 4, 5),\n\tarray(2, 3),\n\t\
    array(4, 2),\n);\n\n$result = do_algebra($operations, $operands);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: Unknown operator.
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    \n    $expression = '';\n    $length = $operator->length -\
    \ 1;\n    \n    for($i = 0; $i < $length; $i++) {\n        if($i < $length) {\n\
    \            $expression .= $operand[$i];\n        } else {\n            $operator\
    \ = $operator->charAt(0);\n            $expression .= $operator;\n           \
    \ $expression .= '(' . do_algebra($operator, $operand, $length - 1, $i) . ')';\n\
    \        }\n    }\n    \n    return $expression;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmc0cfhpt.php:43\n\
    Stack trace:\n#0 /tmp/tmpmc0cfhpt.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpmc0cfhpt.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator_index = 0;\n    while($operator_index < count($operator))\
    \ {\n        // $operand[$operator_index] will be the second operand, \n     \
    \   // and $operand[$operator_index + 1] the first operand\n        $op = $operator[$operator_index];\n\
    \        if($op == '+') {\n            $res = $operand[$operator_index + 1] +\
    \ $operand[$operator_index];\n        } elseif($op == '-') {\n            $res\
    \ = $operand[$operator_index + 1] - $operand[$operator_index];\n        } elseif($op\
    \ == '*') {\n            $res = $operand[$operator_index + 1] * $operand[$operator_index];\n\
    \        } elseif($op == '/') {\n            $res = $operand[$operator_index +\
    \ 1] / $operand[$operator_index];\n        } elseif($op == '//') {\n         \
    \   $res = $operand[$operator_index + 1] // $operand[$operator_index];\n     \
    \   } elseif($op == '**') {\n            $res = $operand[$operator_index + 1]\
    \ ** $operand[$operator_index];\n        } else {\n            // No such operation\
    \ exists\n            return FALSE;\n        }\n        $operand[$operator_index\
    \ + 1] = $res;\n        $operator_index += 2;\n    }\n    return $operand[0];\n\
    }\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\nThanks for the quick reply.\n\
    <|/ c |>\n<| c |>\n, please see my answer for some problems with your answer.\n\
    <|/ c |>\n<| c |>\nHi, could you please have a look at the latest edits I made?\n\
    <|/ c |>\n<| c |>\nThanks for the clarification. Your answer helped me out! +1\n\
    <|/ c |>\n<| a |>\nYou want to apply operator precedence. \n<code>\n$operator\
    \ = array(\"+\", \"-\", \"*\", \"/\");\n$operand = array(2, 3, 4, 5);\n</code>\n\
    The first thing to notice is that we need to know the length of each operand.\
    \ Think of it in terms of how we would write a math expression in textbooks. To\
    \ get the answer of \"2 + 3 * 4 - 5\" we would do:\n<code>\n2 + 3 * 4 - 5\n2 +\
    \ 3 * 4 - \n2 + (3 * 4 - 5)\n2 + 3 - 5\n2 + 3 - \n2 + (3 - 5)\n2 + 3\n2 + \n3\n\
    2\n</code>\nWe would repeat this process for each operator until we get a blank\
    \ space. Thus we have:\n<code>\n2 + 3 * 4 - 5\n2 + 3 * 4 - \n2 + (3 * 4 - 5)\n\
    2 + 3 - 5\n2 + 3 - \n2 + (3 - 5)\n2 + 3\n2 + \n3\n2\n</code>\nNow we have an array\
    \ with all possible results. \nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxqzb076q.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  global $operator;\n  // Convert operand list to an array for\
    \ later use\n  // Example: array = [1, 2, 3, 4, 5]\n  $operand = array_slice($operand,\
    \ 1);\n  // Convert operator list to an array for later use\n  // Example: array\
    \ = ['+', '*', '-', ...]\n  $operator = array_slice($operator, 1);\n  // Evaluate\
    \ expression\n  $result = eval('return (' . implode(' + ', $operand) . ') ' .\
    \ implode(' ', $operator) . ';');\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, null given in\
    \ /tmp/tmpgkzhog1b.php on line 27\n\nWarning: implode(): Invalid arguments passed\
    \ in /tmp/tmpgkzhog1b.php on line 29\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpgkzhog1b.php:37\nStack trace:\n#0 /tmp/tmpgkzhog1b.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgkzhog1b.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  foreach ($operand as $key => $value) {\n    $operand[$key] =\
    \ intval($operand[$key]);\n  }\n  $expression = array(\n    'value' => 0,\n  \
    \  'error' => ''\n  );\n  foreach ($operator as $key => $value) {\n    if (array_key_exists($value,\
    \ $operator)) {\n      $expression['value'] = $expression['value'] + $operand[$key]\
    \ * $operator[$value];\n    } else {\n      $expression['value'] = $operand[$key]\
    \ * $value;\n    }\n    if ($expression['value'] < 0) {\n      $expression['value']\
    \ = -$expression['value'];\n    }\n  }\n  return $expression['value'];\n}\n\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpcn889k0w.php on line\
    \ 32\n\nWarning: A non-numeric value encountered in /tmp/tmpcn889k0w.php on line\
    \ 32\n\nWarning: A non-numeric value encountered in /tmp/tmpcn889k0w.php on line\
    \ 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcn889k0w.php:46\n\
    Stack trace:\n#0 /tmp/tmpcn889k0w.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpcn889k0w.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Build expression in string form with each operation on it's\
    \ own line.\n  $expression = \"\";\n  foreach ($operator as $operator) {\n   \
    \ $expression .= $operator . $operand[count($operand) - 1];\n  }\n  // Evaluate\
    \ expression.\n  return $expression;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph85n_eby.php:34\n\
    Stack trace:\n#0 /tmp/tmph85n_eby.php(39): test()\n#1 {main}\n  thrown in /tmp/tmph85n_eby.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Code goes here\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp627uxox9.php:28\n\
    Stack trace:\n#0 /tmp/tmp627uxox9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp627uxox9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // TODO: Implement do_algebra function\n}\nprint_r(do_algebra($operator,\
    \ $operand));\n</code>\n<|/ a tags=php,algorithm,math,arrays |>\n<| c |>\nAwesome,\
    \ thank you so much! I just tried it and it works perfectly and it's also very\
    \ easy to understand. Thanks again! :)\n<|/ c |>\n<| a dscore=2 |>\nI assume that\
    \ your \"operator\" is an array of strings that contain the symbols (+, -, *,\
    \ /, ^) that are used in the expression. \nThe \"operand\" is an array with the\
    \ number that you want to evaluate.\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg408hrj8.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  \n  foreach($operator as $k => $v)\n    $result\
    \ = $result + $v*$operand[$k];\n\n  return $result;\n}\n\n$operator = array(\n\
    \  '+' => 1,\n  '-' => 1,\n  '*' => 2,\n  '/' => 2,\n  '//' => 2,\n  '**' => 3,\n\
    );\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp6j47dfd8.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmp6j47dfd8.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmp6j47dfd8.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6j47dfd8.php:43\n\
    Stack trace:\n#0 /tmp/tmp6j47dfd8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp6j47dfd8.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = \"\";\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    switch ($operator[$i]) {\n      case '+':\n        $result .= $operand[$i]\
    \ + $operand[$i + 1];\n        $i++;\n        break;\n      case '-':\n      \
    \  $result .= $operand[$i] - $operand[$i + 1];\n        $i++;\n        break;\n\
    \      case '*':\n        $result .= $operand[$i] * $operand[$i + 1];\n      \
    \  $i++;\n        break;\n      case '/':\n        $result .= $operand[$i] / $operand[$i\
    \ + 1];\n        $i++;\n        break;\n      case '%':\n        $result .= $operand[$i]\
    \ % $operand[$i + 1];\n        $i++;\n        break;\n      case '**':\n     \
    \   $result .= $operand[$i] ** $operand[$i + 1];\n        $i++;\n        break;\n\
    \      default:\n        return FALSE;\n        break;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsr5_en1.php:61\n\
    Stack trace:\n#0 /tmp/tmpwsr5_en1.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpwsr5_en1.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here...\n}\n</code>\n<|/ a dscore=0 tags=php,javascript\
    \ |>\n<| a |>\nI implemented a recursive solution using function calls.\n\n<code>\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9_o837zk.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // TODO: Implement do_algebra.\n    \n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0kn9x_7n.php:29\n\
    Stack trace:\n#0 /tmp/tmp0kn9x_7n.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0kn9x_7n.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here\n    \n    $output = '';\n    \n  \
    \  if (count($operator) != count($operand)) {\n        // Throw an Exception\n\
    \        throw new Exception('The length of operator list is not equal to the\
    \ length of operand list');\n    }\n    \n    foreach($operator as $op) {\n  \
    \      $output .= $op;\n    }\n    \n    foreach($operand as $operand) {\n   \
    \     $output .= '= '.$operand;\n    }\n    \n    return eval($output);\n    \n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: The length of operator list is not equal\
    \ to the length of operand list in /tmp/tmpqjb_am9b.php:27\nStack trace:\n#0 /tmp/tmpqjb_am9b.php(43):\
    \ do_algebra(Array, Array)\n#1 /tmp/tmpqjb_am9b.php(47): candidate(Array, Array)\n\
    #2 /tmp/tmpqjb_am9b.php(52): test()\n#3 {main}\n  thrown in /tmp/tmpqjb_am9b.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operands = array($operand);\n  for ($i = 0; $i < count($operand);\
    \ $i++) {\n    $operands[$i] = preg_replace('/\\./', '', $operands[$i]);\n  }\n\
    \n  $operands_size = count($operands) - 1;\n\n  for ($i = 0; $i <= $operands_size;\
    \ $i++) {\n    $expression = '';\n    for ($j = 0; $j < $operands_size; $j++)\
    \ {\n      $expression = $expression . $operator[$j] . $operands[$j];\n    }\n\
    \n    return $expression;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfzo50p9.php:43\n\
    Stack trace:\n#0 /tmp/tmphfzo50p9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphfzo50p9.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operation = $operator[0];\n  $first = $operator[1];\n  $second\
    \ = $operator[2];\n  if(!is_int($first) || !is_int($second) || $second < 0) {\n\
    \    echo \"Invalid Input\\n\";\n    exit;\n  }\n  if(is_array($operand)) {\n\
    \    // Do algebra on operand list based on given operator\n    switch($operation)\
    \ {\n      case '+':\n        $result = $first + $second;\n        break;\n  \
    \    case '-':\n        $result = $first - $second;\n        break;\n      case\
    \ '*':\n        $result = $first * $second;\n        break;\n      case '//':\n\
    \        $result = $first / $second;\n        break;\n      case '**':\n     \
    \   $result = pow($first, $second);\n        break;\n      default:\n        echo\
    \ \"Invalid Input\\n\";\n        exit;\n    }\n  } else {\n    // Operand is a\
    \ number\n    if(!is_int($operand)) {\n      echo \"Invalid Input\\n\";\n    \
    \  exit;\n    }\n    // Do algebra on operand list based on given operator\n \
    \   switch($operation) {\n      case '+':\n        $result = $first + $operand;\n\
    \        break;\n      case '-':\n        $result = $first - $operand;\n     \
    \   break;\n      case '*':\n        $result = $first * $operand;\n        break;\n\
    \      case '//':\n        $result = $first / $operand;\n        break;\n    \
    \  case '**':\n        $result = pow($first, $operand);\n        break;\n    \
    \  default:\n        echo \"Invalid Input\\n\";\n        exit;\n    }\n  }\n \
    \ return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Invalid Input\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here.\n}\n</cell>\n<text>\nTask 4.2\nWrite\
    \ a function that takes two arrays as parameters and returns true if they contain\
    \ the same elements, \nand false otherwise. This function should also handle multiple\
    \ occurence of elements.\nExample\nInput\n$a = [1, 2]\n$b = [1, 1]\nOutput\n$a\
    \ = [1, 2]\n$b = [1, 1]\nOutput\n$a = [1, 2]\n$b = [1, 2]\nOutput\n$a = [1, 2]\n\
    $b = [1, 1]\nOutput\n$a = [1, 1]\n$b = [1, 1]\nOutput\n$a = [1, 1]\n$b = [1, 1]\n\
    Input\n$a = [1, 1]\n$b = [1, 1]\nOutput\n$a = [1, 1]\n$b = [1, 1]\nOutput\n$a\
    \ = [1, 1]\n$b = [1, 1]\nInput\n$a = [1, 1]\n$b = [1, 2]\nOutput\n$a = [1, 1]\n\
    $b = [1, 2]\nInput\n$a = [1, 1, 2, 2]\n$b = [1, 1, 2, 2]\nOutput\n$a = [1, 1,\
    \ 2, 2]\n$b = [1, 1, 2, 2]\nInput\n$a = [1, 1]\n$b = [1, 1]\nOutput\n$a = [1,\
    \ 1]\n$b = [1, 1]\nOutput\n$a = [1, 1]\n$b = [1, 1]\nInput\n$a = [1, 1, 2, 2]\n\
    $b = [1, 1, 2, 2]\nOutput\n$a = [1, 1, 2, 2]\n$b = [1, 1, 2, 2]\nInput\n$a = [1,\
    \ 2]\n$b = [1, 1]\nOutput\n$a = [1, 2]\n$b = [1, 1]\nOutput\n$a = [1, 2]\n$b =\
    \ [1, 2]\nOutput\n$a = [1, 2]\n$b = [1, 1]\nInput\n$a = [1, 1]\n$b = [1, 1]\n\
    Output\n$a = [1, 1]\n$b = [1, 1]\nOutput\n$a = [1, 1]\n$b = [1, 1]\nInput\n$a\
    \ = [1, 1]\n$b = [1, 2]\nOutput\n$a = [1, 1]\n$b = [1, 2]\nInput\n$a = [1, 1,\
    \ 2, 2]\n$b = [1, 1, 2, 2]\nOutput\n$a = [1, 1, 2, 2]\n$b = [1, 1, 2, 2]\nInput\n\
    $a = [1, 1]\n$b = [1, 1]\nOutput\n$a = [1, 1]\n$b = [1, 1]\nOutput\n$a = [1, 1]\n\
    $b = [1, 1]\nInput\n$a = [1, 1, 2, 2]\n$b = [1, 1, 2, 2]\nOutput\n$a = [1, 1,\
    \ 2, 2]\n$b = [1, 1, 2, 2]\nInput\n$a = [\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0jdffdsw.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator = array_map('trim', explode('+', $operator));\n \
    \   $operand = array_map('trim', explode('+', $operand));\n    // If the operator\
    \ list is shorter than operand list, do nothing.\n    if (count($operator) < count($operand))\
    \ {\n        return null;\n    }\n    // If there is an operator in the operator\
    \ list that is not in operand list, do nothing.\n    if (in_array($operator, array('+',\
    \ '-', '*', '/', '^'))) {\n        return null;\n    }\n    // If there are not\
    \ two operands, return null.\n    if (count($operand) != 2) {\n        return\
    \ null;\n    }\n    // Initialize the answer variable.\n    $answer = 0;\n   \
    \ foreach ($operator as $k => $op) {\n        switch ($op) {\n            case\
    \ '+':\n                $answer += $operand[$k];\n                break;\n   \
    \         case '-':\n                $answer -= $operand[$k];\n              \
    \  break;\n            case '*':\n                $answer *= $operand[$k];\n \
    \               break;\n            case '/':\n                $answer /= $operand[$k];\n\
    \                break;\n            case '^':\n                $answer *= pow($operand[$k],\
    \ $operand[$k + 1]);\n                $answer *= $operand[$k + 1];\n         \
    \       break;\n        }\n    }\n    return $answer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpz_yfgm1v.php\
    \ on line 21\n\nWarning: array_map(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmpz_yfgm1v.php on line 21\n\nWarning: explode() expects parameter\
    \ 2 to be string, array given in /tmp/tmpz_yfgm1v.php on line 22\n\nWarning: array_map():\
    \ Expected parameter 2 to be an array, null given in /tmp/tmpz_yfgm1v.php on line\
    \ 22\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpz_yfgm1v.php on line 24\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpz_yfgm1v.php\
    \ on line 24\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpz_yfgm1v.php on line 32\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpz_yfgm1v.php:65\nStack trace:\n#0 /tmp/tmpz_yfgm1v.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz_yfgm1v.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // If there are too few operands, return 0\n  if (count($operand)\
    \ < 2) {\n    return 0;\n  }\n  // If there are too many operators, return 0\n\
    \  if (count($operator) > 3) {\n    return 0;\n  }\n  // If there is an operator\
    \ and a zero operand, return 0\n  if (count($operator) === 0 && count($operand)\
    \ === 1) {\n    return 0;\n  }\n  // If there are too many operators and operands,\
    \ return 0\n  if (count($operator) > count($operand)) {\n    return 0;\n  }\n\
    \  // If there are too many operators, return 0\n  if (count($operator) > 3) {\n\
    \    return 0;\n  }\n  // If there is an operator and a zero operand, return 0\n\
    \  if (count($operator) === 0 && count($operand) === 1) {\n    return 0;\n  }\n\
    \  // If there is an operator and a zero operand, return 0\n  if (count($operator)\
    \ === 0 && count($operand) === 1) {\n    return 0;\n  }\n\n  // Set up an empty\
    \ list to hold the result\n  $result = array();\n\n  // Do the work\n  // Go through\
    \ each operator, one at a time\n  foreach ($operator as $op) {\n    // If the\
    \ number of operands is one, then this operator is an addition\n    if (count($operand)\
    \ === 1) {\n      $result[] = $operand[0];\n      continue;\n    }\n    // If\
    \ the number of operands is two, then this operator is a subtraction\n    if (count($operand)\
    \ === 2) {\n      $result[] = $operand[0] - $operand[1];\n      continue;\n  \
    \  }\n    // If the number of operands is three, then this operator is a multiplication\n\
    \    if (count($operand) === 3) {\n      // Make sure the operands are non-negative\n\
    \      if ($operand[0] >= 0) {\n        $result[] = $operand[0] * $operand[1];\n\
    \      }\n      continue;\n    }\n    // If the number of operands is four, then\
    \ this operator is a floor division\n    if (count($operand) === 4) {\n      //\
    \ Make sure the operands are non-negative\n      if ($operand[0] >= 0) {\n   \
    \     $result[] = $operand[0] / $operand[1];\n      }\n      continue;\n    }\n\
    \    // If the number of operands is five, then this operator is an exponentiation\n\
    \    if (count($operand) === 5) {\n      // Make sure the operands are non-negative\n\
    \      if ($operand[0] >= 0) {\n        $result[] = $operand[0] . \"$op$operand[1]\"\
    ;\n      }\n      continue;\n    }\n    // If there are too many operands for\
    \ this operator, return 0\n    return 0;\n  }\n  // Return 0 if there are no non-zero\
    \ operands\n  if (count($result) === 0) {\n    return 0;\n  }\n  // Return the\
    \ result\n  return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfzan9tsd.php:105\n\
    Stack trace:\n#0 /tmp/tmpfzan9tsd.php(110): test()\n#1 {main}\n  thrown in /tmp/tmpfzan9tsd.php\
    \ on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operator;\n\tglobal $operand;\n\tglobal $result;\n\t\
    global $stack;\n\t$stack = array();\n\t\n\tif (empty($operator) || empty($operand))\
    \ {\n\t\techo \"Invalid expression\";\n\t\texit;\n\t}\n\t\n\tforeach($operand\
    \ as $key => $value){\n\t\tif ($key === 0) {\n\t\t\t$result = 0;\n\t\t}\n\t\t\
    else {\n\t\t\t$result = $result + $value * $operator[$key-1];\n\t\t}\n\t}\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Invalid expression
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// TODO: Complete the function to return the correct value.\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5p5pl4uz.php:29\n\
    Stack trace:\n#0 /tmp/tmp5p5pl4uz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5p5pl4uz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code goes here\n    $expression = '';\n    $num_operands\
    \ = count($operand) - 1;\n    $operand_value = array();\n    for($i = 0; $i <\
    \ $num_operands; $i++) {\n        $operand_value[$i] = $operand[$i];\n    }\n\
    \    for($i = 0; $i < count($operator); $i++) {\n        $expression .= $operator[$i];\n\
    \    }\n    return $expression . array_sum($operand_value);\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpezd87oj3.php:39\n\
    Stack trace:\n#0 /tmp/tmpezd87oj3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpezd87oj3.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $res = 0;\n    foreach ($operator as $op) {\n        $res =\
    \ $res + ($op * $operand[0]);\n        unset($operand[0]);\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp183d3lex.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp183d3lex.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmp183d3lex.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp183d3lex.php:34\n\
    Stack trace:\n#0 /tmp/tmp183d3lex.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp183d3lex.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Convert operand list to string, and split it into operands\
    \ and operators.\n  $operands = implode('', $operand);\n  $operands = explode('\
    \ ', $operands);\n  $operands = array_filter($operands);\n  $operands = array_map(function\
    \ ($element) {\n    return (int) $element;\n  }, $operands);\n\n  // Calculate\
    \ the result by applying the operator.\n  // For a basic algebra operation such\
    \ as addition, the following steps are performed:\n  // 1. If the operator and\
    \ operand are of same size, then simply apply the operator.\n  // 2. If the operator\
    \ is greater than operand size, then repeat operation with the operator\n  //\
    \    and operand size reduced by one.\n  // 3. If the operator is less than operand\
    \ size, then repeat operation with the operand\n  //    and operator size reduced\
    \ by one.\n  $result = 0;\n  if (count($operator) == count($operand)) {\n    $size\
    \ = count($operator);\n    for ($i = 0; $i < $size; $i++) {\n      if ($size !=\
    \ count($operator)) {\n        $result += (array_key_exists($i, $operator) ? $operator[$i]\
    \ + $operand[$i] : $operand[$i] - $operator[$i]);\n      }\n    }\n  } else {\n\
    \    $size = count($operand);\n    for ($i = 0; $i < $size; $i++) {\n      if\
    \ ($size > count($operator)) {\n        $result += (array_key_exists($i, $operator)\
    \ ? $operator[$i] : $operand[$i] - $operator[$i]);\n        $size--;\n      }\n\
    \      if ($size < count($operator)) {\n        $result += (array_key_exists($i,\
    \ $operator) ? $operand[$i] : $operator[$i] - $operand[$i]);\n        $size--;\n\
    \      }\n    }\n  }\n\n  // Return the result of the operation.\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpqwz1gw7f.php on line\
    \ 48\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwz1gw7f.php:67\n\
    Stack trace:\n#0 /tmp/tmpqwz1gw7f.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpqwz1gw7f.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Your code here\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ppdq1_b.php:28\n\
    Stack trace:\n#0 /tmp/tmp9ppdq1_b.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9ppdq1_b.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operatorList;\n\tglobal $operandList;\n\n\t// Initialize\
    \ a result variable that holds the result of the calculation\n\t$result = 0;\n\
    \t\n\t// Iterate through each operator in operator list\n\tforeach($operatorList\
    \ as $op) {\n\t\t\n\t\t// Check if the given operator is the same as the current\
    \ operator\n\t\tif($op === $operator) {\n\t\t\t\n\t\t\t// Iterate through each\
    \ operand in operand list starting from the first\n\t\t\t$pos = 0;\n\t\t\tforeach($operandList\
    \ as $op) {\n\t\t\t\tif($pos !== 0) {\n\t\t\t\t\t// Perform the calculation\n\t\
    \t\t\t\t$result = $result + $op[$pos] * $operand;\n\t\t\t\t} else {\n\t\t\t\t\t\
    $result = $result + $op;\n\t\t\t\t}\n\t\t\t\t$pos++;\n\t\t\t}\n\t\t}\n\t}\n\t\
    // Return the result\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpwgu0s1c7.php\
    \ on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgu0s1c7.php:55\n\
    Stack trace:\n#0 /tmp/tmpwgu0s1c7.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpwgu0s1c7.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $ops = '';\n  for ($i = 0; $i < count($operator); $i++) {\n \
    \   $ops .= $operator[$i];\n  }\n  for ($i = 1; $i < count($operand); $i++) {\n\
    \    $ops .= ' * ';\n  }\n  return eval(\"return $ops $operand[0]\");\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyoxtpj7r.php(28) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code here\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptlm79rc4.php:28\n\
    Stack trace:\n#0 /tmp/tmptlm79rc4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptlm79rc4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operators, $operator;\n\t$operators = array();\n\tfor\
    \ ($i=0; $i < count($operator); $i++) {\n\t\t$operators[$i] = $operator[$i];\n\
    \t}\n\t$operand = array_merge($operand, array(0));\n\tlist($left, $right) = $operand;\n\
    \t$left = $left - 1;\n\t$result = $operators[$left] + $operators[$right];\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpnaj09e_9.php on line 23\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnaj09e_9.php:38\nStack trace:\n#0 /tmp/tmpnaj09e_9.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnaj09e_9.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator = str_replace(' ', '', $operator);\n    $operand\
    \ = str_replace(' ', '', $operand);\n    $operator = preg_replace('/\\+$/', '',\
    \ $operator);\n    $operand = preg_replace('/\\+$/', '', $operand);\n    $result\
    \ = $operand . ' ';\n    foreach ($operator as $op) {\n        if ($op == '+')\
    \ {\n            $result .= $operand . ' + ';\n            $operand++;\n     \
    \   } elseif ($op == '-') {\n            $result .= $operand . ' - ';\n      \
    \      $operand++;\n        } elseif ($op == '*') {\n            $result .= $operand\
    \ . ' * ';\n            $operand++;\n        } elseif ($op == '/') {\n       \
    \     $result .= $operand . ' / ';\n            $operand++;\n        } elseif\
    \ ($op == '**') {\n            $result .= $operand . ' ** ';\n            $operand++;\n\
    \        } elseif ($op == '%') {\n            $result .= $operand . ' % ';\n \
    \           $operand++;\n        } elseif ($op == '@') {\n            $result\
    \ .= $operand . ' @ ';\n            $operand++;\n        } else {\n          \
    \  die(\"Unexpected operator \\\"$op\\\"\");\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Unexpected operator ""
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $op_list = array(\n    '+' => array('+'),\n    '-' => array('-'),\n\
    \    '*' => array('*'),\n    '/' => array('/'),\n    '**' => array('**')\n  );\n\
    \  if (sizeof($operand) == 1) {\n    $operand = array($operand);\n  }\n  if (sizeof($operator)\
    \ == 1) {\n    $operator = array($operator);\n  }\n  $operator = array_merge($op_list,\
    \ $operator);\n  $stack = array(0);\n  $result = 0;\n  $count = sizeof($operator);\n\
    \  for ($i = 0; $i < $count; $i++) {\n    if ($i == 0) {\n      $operator = $operator[$i];\n\
    \    }\n    if ($operand[0] == 0) {\n      $operand = $operand[1];\n    } else\
    \ {\n      $operand = $operand[0];\n    }\n    if ($i == $count - 1) {\n     \
    \ array_pop($stack); \n      $stack = array_reverse($stack);\n      $stack[0]++;\n\
    \      $result = array_pop($stack);\n      $result = $result / $operand;\n   \
    \ } else {\n      $operator = $operator[$i];\n      array_push($stack, $operand);\n\
    \      $stack = array_reverse($stack);\n      $stack[0]++;\n      $result = array_pop($stack);\n\
    \      $result = $result * $operand;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp725uy6ur.php on line 52\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp725uy6ur.php:70\nStack trace:\n\
    #0 /tmp/tmp725uy6ur.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp725uy6ur.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code goes here\n  $result = null;\n  $operators = array(\"\
    +\" => \"+\", \"*\" => '*', \"-\" => \"-\", \"+\" => \"-\");\n  foreach($operator\
    \ as $key => $value){\n    $operands = preg_split('/[\\s,]+/', $operand[$key]);\n\
    \    if($operands[count($operands)-1] == \"\"){\n      $operands[count($operands)-1]\
    \ = 0;\n    }\n    foreach($operands as $key2 => $value2){\n      if($key2<count($operand)-1){\n\
    \        $result =  $operands[$key2] + $operands[$key2+1];\n      }else{\n   \
    \     $result = $operands[$key2];\n      }\n    }\n    if(array_key_exists($value,\
    \ $operators)){\n      $result = $operators[$value] . $result;\n    }\n  }\n \
    \ return $result;\n}\necho \"The result of doing algebra is \".do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpxosipucv.php\
    \ on line 24\nThe result of doing algebra is \nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxosipucv.php:48\nStack trace:\n#0 /tmp/tmpxosipucv.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxosipucv.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code goes here\n}\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8v8kbk3.php:28\n\
    Stack trace:\n#0 /tmp/tmpm8v8kbk3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpm8v8kbk3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t\n\t// Return 0 if any of the operand is null.\n\tif (is_null($operand))\
    \ return 0;\n\t\n\t// Initialize a variable 'result' that starts as zero.\n\t\
    $result = 0;\n\t\n\t// Loop through the operand list to add the values to the\
    \ result.\n\tforeach ($operand as $key => $value) {\n\t\t\n\t\t// Check if the\
    \ key corresponds to a valid operator or operand. \n\t\t// Valid operands and\
    \ operators are the values in the 'operator' array.\n\t\tif (array_key_exists($key,\
    \ $operator)) {\n\t\t\t\n\t\t\t// Evaluate the given operator.\n\t\t\t$result\
    \ .= $operator[$key]($operand[$key]);\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\t//\
    \ Evaluate the given operand.\n\t\t\t$result .= $operand[$key];\n\t\t}\n\t}\n\t\
    \n\t// Return the result.\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function **() in /tmp/tmpfs_vmj45.php:36\n\
    Stack trace:\n#0 /tmp/tmpfs_vmj45.php(49): do_algebra(Array, Array)\n#1 /tmp/tmpfs_vmj45.php(53):\
    \ candidate(Array, Array)\n#2 /tmp/tmpfs_vmj45.php(58): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpfs_vmj45.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    \n    $algebric_exp = array(\n        '+' => $operand + $operand,\n\
    \        '-' => $operand - $operand,\n        '*' => $operand * $operand,\n  \
    \      '/' => $operand / $operand,\n        '//' => $operand / $operand,\n   \
    \     '**' => $operand ** $operand\n    );\n    \n    return $algebric_exp[$operator];\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpc91ob4mu.php:24\n\
    Stack trace:\n#0 /tmp/tmpc91ob4mu.php(35): do_algebra(Array, Array)\n#1 /tmp/tmpc91ob4mu.php(39):\
    \ candidate(Array, Array)\n#2 /tmp/tmpc91ob4mu.php(44): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpc91ob4mu.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0;\n    for($i = 0, $c = count($operator); $i < $c;\
    \ $i++) {\n        switch($operator[$i]) {\n            case '+':\n          \
    \      $result = $result + $operand[$i];\n                break;\n           \
    \ case '-':\n                $result = $result - $operand[$i];\n             \
    \   break;\n            case '*':\n                $result = $result * $operand[$i];\n\
    \                break;\n            case '/':\n                $result = $result\
    \ / $operand[$i];\n                break;\n            case '**':\n          \
    \      $result = $result ** $operand[$i];\n                break;\n        }\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your help,\
    \ but this is what I'm trying to do. I'm trying to figure out how to implement\
    \ the algorithm you presented and I'm stuck.\n<|/ c |>\n<| c |>\nOk, I realized\
    \ that I need to do another thing and that's why I've added the note. I've changed\
    \ my code accordingly and added comments to the code I provided so you can see\
    \ how it works.\n<|/ c |>\n<| c |>\nThanks so much, I finally understood the idea.\
    \ I'm going to give it a try and see if I can get it to work.\n<|/ c |>\n<| a\
    \ dscore=1 |>\nI guess I finally figured it out. I realized that I need to use\
    \ recursion since there will be more operations and operands added to it for other\
    \ functions, but also the basic operations such as +, -, *, /, ** will always\
    \ be the same so I used an array to store all the basic operations. \nFor those\
    \ who are having the same issue:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_d73070g.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Compute the length of the lists.\n    $num_operands = count($operand);\n\
    \    $num_operators = count($operator);\n\n    // Error checking.\n    // Make\
    \ sure there are at least two operands.\n    if ($num_operands < 2) {\n      \
    \  echo \"Not enough operands.\\n\";\n        return false;\n    }\n\n    // Make\
    \ sure there are at least two operators.\n    if ($num_operators < 1) {\n    \
    \    echo \"Not enough operators.\\n\";\n        return false;\n    }\n\n    //\
    \ Make sure the operators and operands have the same length.\n    if ($num_operands\
    \ != $num_operators - 1) {\n        echo \"Different number of operands and operators.\\\
    n\";\n        return false;\n    }\n\n    // Initialize the result to 0.\n   \
    \ $result = 0;\n\n    // Loop over the operators.\n    for ($i = 0; $i < $num_operators;\
    \ $i++) {\n\n        // Get the operator and operand.\n        $op = $operator[$i];\n\
    \        $a = $operand[$i];\n        $b = $operand[$i + 1];\n\n        // Get\
    \ the operator function.\n        switch ($op) {\n\n            // Add ( + ).\n\
    \            case '+':\n                $result += $a;\n                break;\n\
    \n            // Subtract ( - ).\n            case '-':\n                $result\
    \ -= $a;\n                break;\n\n            // Multiply ( * ).\n         \
    \   case '*':\n                $result *= $a;\n                break;\n\n    \
    \        // Floor division ( // ).\n            case '//':\n                if\
    \ ($a > 0) {\n                    $result /= $a;\n                } else {\n \
    \                   $result = 0;\n                }\n                break;\n\n\
    \            // Exponentiation ( ** ).\n            case '**':\n             \
    \   $result *= $a;\n                for ($j = 0; $j < $a; $j++) {\n          \
    \          $result *= $b;\n                }\n                break;\n\n     \
    \       // Return the result of the operation.\n            default:\n       \
    \         $result = 0;\n                break;\n        }\n    }\n\n    // Return\
    \ the result of the operation.\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Different number of operands and operators.\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpaqihwoos.php:105\nStack trace:\n#0 /tmp/tmpaqihwoos.php(110):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaqihwoos.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = '';\n\tforeach ($operator as $op) {\n\t\t$result .=\
    \ $op;\n\t}\n\t$result .= array_shift($operand);\n\tfor ($i = count($operand);\
    \ $i >= 0; $i--) {\n\t\t$result .= $operand[$i];\n\t}\n\treturn $result;\n}\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjat2457.php:36\n\
    Stack trace:\n#0 /tmp/tmpwjat2457.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwjat2457.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operators;\n\treturn $operators[$operator]($operand[0],\
    \ $operand[1]);\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpyxgqbno8.php:22\n\
    Stack trace:\n#0 /tmp/tmpyxgqbno8.php(26): do_algebra(Array, Array)\n#1 /tmp/tmpyxgqbno8.php(30):\
    \ candidate(Array, Array)\n#2 /tmp/tmpyxgqbno8.php(35): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpyxgqbno8.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // The result will be stored in this variable\n    $result\
    \ = 0;\n    \n    // Loop through the first list\n    foreach ($operator as $op)\
    \ {\n        // If the current operator is present in the second list, then apply\
    \ the operator\n        if (in_array($op, $operand)) {\n            // The first\
    \ operand is equal to the first operand of the second operand\n            $result\
    \ += $operand[0];\n            \n            // Remove the second operand, because\
    \ it will be added to the result\n            $operand = array_slice($operand,\
    \ 1);\n        } else {\n            // The current operation is not present in\
    \ the second list, so just move on\n            continue;\n        }\n    }\n\
    \    \n    // Loop through the second list, if it is still unconsumed then the\
    \ expression is invalid\n    foreach ($operand as $value) {\n        // The current\
    \ operand value is equal to the first operand in the first list \n        $result\
    \ += $value;\n    }\n    \n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_2pvalv.php:52\n\
    Stack trace:\n#0 /tmp/tmpe_2pvalv.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpe_2pvalv.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t\n\t\n\tif (count($operator) < 1) {\n\t\treturn 0;\n\t}\n\n\t\
    if (count($operand) < 2) {\n\t\treturn 0;\n\t}\n\n\t$result = array();\n\tfor\
    \ ($i = 0; $i < count($operator); $i++) {\n\t\t\n\t\tif (array_key_exists($operator[$i],\
    \ $operator)) {\n\t\t\t$result[$i] += $operand[$i];\n\t\t} else {\n\t\t\t$result[$i]\
    \ = $operand[$i];\n\t\t}\n\t}\n\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vggjywf.php:49\n\
    Stack trace:\n#0 /tmp/tmp2vggjywf.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2vggjywf.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tglobal $operators, $expression;\n\t// Build expression by traversing\
    \ array\n\tforeach ($operator as $k=>$op) {\n\t\t$expression[$k] = $operand[$k];\n\
    \t}\n\t// Process basic operators\n\tif (array_key_exists($expression[0], $operators))\
    \ $expression[0] = call_user_func($operators[$expression[0]], $expression[0],\
    \ $expression[1]);\n\tif (array_key_exists($expression[1], $operators)) $expression[1]\
    \ = call_user_func($operators[$expression[1]], $expression[0], $expression[1]);\n\
    \t// Do the rest of the expression\n\t$result = $expression[0];\n\tfor ($i=1;\
    \ $i < count($expression); $i++) {\n\t\t$result = call_user_func($operators[$expression[$i]],\
    \ $result, $expression[$i-1]);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_key_exists() expects parameter 2 to be array, null given\
    \ in /tmp/tmpjwr5vwyy.php on line 27\n\nWarning: array_key_exists() expects parameter\
    \ 2 to be array, null given in /tmp/tmpjwr5vwyy.php on line 28\n\nWarning: call_user_func()\
    \ expects parameter 1 to be a valid callback, no array or string given in /tmp/tmpjwr5vwyy.php\
    \ on line 32\n\nWarning: call_user_func() expects parameter 1 to be a valid callback,\
    \ no array or string given in /tmp/tmpjwr5vwyy.php on line 32\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjwr5vwyy.php:42\nStack trace:\n\
    #0 /tmp/tmpjwr5vwyy.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjwr5vwyy.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  global $operator, $expression, $result; // <---- global keyword\n\
    \n  $operatorListLength = count($operator);\n  $operandListLength = count($operand)\
    \ - 1;\n  $expressionLength = $operandListLength * $operatorListLength;\n\n  for($x\
    \ = 0; $x < $expressionLength; $x++){\n    $expression[$x] = $operand[$x];\n \
    \ }\n\n  $result = 0;\n  for($x = 1; $x <= $operatorListLength; $x++){\n    $result\
    \ = $result + eval(\"$expression[$x] $operator[$x-1]\");\n  }\n\n  return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays,loops,variable-assignment |>\n<| c |>\nThank\
    \ you for this answer! I guess I didn't realize that the eval function was able\
    \ to access global variables. I do have one question about the eval() function:\
    \ How would I make your answer work with the global $expression array I already\
    \ have? Also, would it be better to reset the global $expression variable after\
    \ each iteration of the for loop? Or would it be better to set $expression to\
    \ an array, and then assign $expression[$x] to $expression in the second part\
    \ of the for loop?\n<|/ c |>\n<| c |>\nYes, I forgot to write global keyword,\
    \ and i edited my answer. Yes, global variable is better than rewrite your array.\
    \ Because when you modify a global variable after the first time you call the\
    \ function, the value you set last time will be always used.\n<|/ c |>\n<| c |>\n\
    And also if you just want to return result. You don't have to rewrite your array.\
    \ Just return the last value of `$expression` after the loop.\n<|/ c |>\n<| c\
    \ |>\nHmmm, I'm still having some issues. I changed my $expression from an array\
    \ to just using global $expression and now the eval() function is not working\
    \ properly. I'm getting this error \"Undefined offset: 10\".\n<|/ c |>\n<| c |>\n\
    I edited my answer again. I changed the for loop and variable name.\n<|/ c |>\n\
    <| a dscore=1 |>\nIt looks like you're trying to make a program to evaluate an\
    \ expression. As others have pointed out, eval is probably not going to help you.\
    \ If you look at it from the point of view of a human who just sees an expression,\
    \ it might be confusing to have each operator evaluate to an expression, so you\
    \ need to store it somehow. \nIf you're just trying to test it out then I'd suggest\
    \ making the operator strings themselves variables like this:\n<code>\n$operator1\
    \ = \"+\"; \n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0rg54j0c.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here.\n    // The result should be an integer.\n\
    \    $result = 0;\n    foreach($operand as $operand)\n    {\n        $result .=\
    \ $operand;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bsaddgr.php:35\n\
    Stack trace:\n#0 /tmp/tmp7bsaddgr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7bsaddgr.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n\n  // Initializing the basic algebra operations.\n\
    \  $operators = array(\n    '+' => '+',\n    '-' => '-',\n    '*' => '*',\n  \
    \  '/' => '/'\n  );\n  \n  // Initializing the basic algebra operations. \n  $operators_result\
    \ = array(\n    '+' => 0,\n    '-' => 0,\n    '*' => 1,\n    '/' => 0,\n  );\n\
    \  \n  foreach ($operator as $k => $v) {\n    // Calculating the basic algebra\
    \ operators.\n    $operators_result[$v] = $operators_result[$v] * $operand[$k\
    \ - 1]; \n  }\n\n  // Calculating the final result.\n  return $operators_result[$operator];\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Illegal offset type in /tmp/tmp5vjr2f_r.php on line 45\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp5vjr2f_r.php:53\nStack trace:\n\
    #0 /tmp/tmp5vjr2f_r.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5vjr2f_r.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Compute the expression\n  $expr = $operator;\n  \n  for ($i\
    \ = 1; $i < sizeof($operator); $i++) {\n    $op = $operator[$i - 1];\n    $val\
    \ = $operand[$i];\n    switch ($op) {\n      case '+':\n        $expr += $val;\n\
    \        break;\n      case '-':\n        $expr -= $val;\n        break;\n   \
    \   case '*':\n        $expr *= $val;\n        break;\n      case '/':\n     \
    \   $expr = $expr / $val;\n        break;\n      case '**':\n        $expr = $expr\
    \ ** $val;\n        break;\n    }\n  }\n  return $expr;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcq058ry6.php:52\n\
    Stack trace:\n#0 /tmp/tmpcq058ry6.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpcq058ry6.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n   $result = 1;\n   for ($i = 0; $i < count($operator); $i++){\n\
    \      $result = $operator[$i] . $operand[$i] * $result;\n   }\n   return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmppnvfd5xt.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmppnvfd5xt.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnvfd5xt.php:33\n\
    Stack trace:\n#0 /tmp/tmppnvfd5xt.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppnvfd5xt.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// TODO: Complete the code. \n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgn1mgt71.php:29\n\
    Stack trace:\n#0 /tmp/tmpgn1mgt71.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpgn1mgt71.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $op_count = count($operator);\n    $num_ops = count($operand)\
    \ - 1;\n    $stack = array();\n    for($i=0; $i < $op_count; $i++) {\n       \
    \ $op = $operator[$i];\n        for($j=0; $j < $num_ops; $j++) {\n           \
    \ $num = $operand[$j];\n            if ($op == '-') {\n                $stack[]\
    \ = $num - array_pop($stack);\n            }\n            elseif ($op == '+')\
    \ {\n                $stack[] = $stack[count($stack) - 1] + $num;\n          \
    \  }\n            elseif ($op == '*') {\n                $stack[] = $stack[count($stack)\
    \ - 1] * $num;\n            }\n            elseif ($op == '//') {\n          \
    \      $stack[] = floor($stack[count($stack) - 1] / $num);\n            }\n  \
    \          elseif ($op == '**') {\n                $stack[] = $stack[count($stack)\
    \ - 1] ** $num;\n            }\n            else {\n                // Error\n\
    \            }\n        }\n    }\n    return $stack[count($stack) - 1];\n}\n\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2m4xm1lh.php:56\n\
    Stack trace:\n#0 /tmp/tmp2m4xm1lh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp2m4xm1lh.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code here.\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ly3rmsa.php:28\n\
    Stack trace:\n#0 /tmp/tmp6ly3rmsa.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6ly3rmsa.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // TODO: Implement doAlgebra function.\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwyr8f_s.php:29\n\
    Stack trace:\n#0 /tmp/tmphwyr8f_s.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphwyr8f_s.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n}\n</code>\nTest Case\n<code>\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps3qibare.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if(count($operator) != count($operand) - 1) {\n        echo\
    \ 'The operator list must have one element less than the operand list!';\n   \
    \     exit;\n    }\n    $result = $operand[0];\n    $operands = array_slice($operand,\
    \ 1);\n    foreach($operator as $op) {\n        if($op == '+') {\n           \
    \ $result +=  array_shift($operands);\n        } elseif($op == '*') {\n      \
    \      $result *= array_shift($operands);\n        } elseif($op == '-') {\n  \
    \          $result -= array_shift($operands);\n        } elseif($op == '/') {\n\
    \            $result /= array_shift($operands);\n        } elseif($op == '%')\
    \ {\n            $result %= array_shift($operands);\n        } elseif($op == '^')\
    \ {\n            $result **= array_shift($operands);\n        } elseif($op ==\
    \ '**') {\n            $result /= array_shift($operands);\n        }\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51bvypuk.php:51\n\
    Stack trace:\n#0 /tmp/tmp51bvypuk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp51bvypuk.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$op_list = ['+', '-', '*', '/', '**'];\n\t$op_count = $operator.length;\n\
    \t$op_length = count($op_list) - 1;\n\t\n\t$op_sum = 0;\n\t\n\t// Evaluate the\
    \ first operator and operand.\n\t$op_sum += $operand[0];\n\t\n\t// Evaluate the\
    \ rest of the operator.\n\tfor ($i = 1; $i < $op_count; $i++) {\n\t\t$op_sum +=\
    \ $operand[$i] * $op_list[$i];\n\t}\n\t\n\treturn $op_sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmpqcs1casz.php on line 22\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqcs1casz.php:43\nStack\
    \ trace:\n#0 /tmp/tmpqcs1casz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqcs1casz.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operand = array_filter(array($operand), 'is_numeric');\n \
    \   $operator = array_filter(array($operator), 'is_numeric');\n    if (count($operand)\
    \ != count($operator)) {\n        die('Error: Operand and Operator lists have\
    \ different length.');\n    }\n    $result = array_map(function($a, $b) {\n  \
    \      return $a . $b;\n    }, $operand, $operator);\n    return array_sum($result);\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyv17d73.php:37\n\
    Stack trace:\n#0 /tmp/tmpgyv17d73.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgyv17d73.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  if ($operator[0] == '+') {\n    return array_sum($operand);\n\
    \  }\n  if ($operator[0] == '-') {\n    return array_diff($operand, array_unique($operand));\n\
    \  }\n  if ($operator[0] == '*') {\n    return array_product($operand);\n  }\n\
    \  if ($operator[0] == '/') {\n    return array_sum(array_filter(array_count_values($operand),\
    \ function($v) {return $v > 1;}));\n  }\n  if ($operator[0] == '**') {\n    $operand\
    \ = array_filter(array_count_values($operand), function($v) {return $v > 1;});\n\
    \    return array_sum(array_product($operand));\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, int given in /tmp/tmpvcz9wb97.php\
    \ on line 35\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcz9wb97.php:44\n\
    Stack trace:\n#0 /tmp/tmpvcz9wb97.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpvcz9wb97.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmt8zaf6l.php:29\n\
    Stack trace:\n#0 /tmp/tmpmt8zaf6l.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmt8zaf6l.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $res = '0';\n  $operator_c = count($operator);\n  $operand_c\
    \ = count($operand) - 1;\n  for ($i = 0; $i < $operator_c; $i++) {\n    if ($operand_c\
    \ > 0) {\n      $res = $operand[$operand_c - 1][$i] * $operator[$i] + $res;\n\
    \      $operand_c--;\n    }\n  }\n  return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpi6k8o139.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpi6k8o139.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpi6k8o139.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6k8o139.php:37\n\
    Stack trace:\n#0 /tmp/tmpi6k8o139.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpi6k8o139.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operators = array('+', '*', '-');\n  $operators_length = count($operators);\n\
    \  $result_lenght = count($operand) - $operators_length;\n  if($result_lenght\
    \ > 0) {\n    $result = 1;\n    foreach($operand as $item) {\n      $result *=\
    \ $item;\n    }\n    if(in_array($operator, array_slice($operators, $operators_length)))\
    \ {\n      foreach($operator as $value) {\n        $result = $result * ($value\
    \ == '+') ? 1 : -1;\n      }\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpapk_l5b5.php:43\n\
    Stack trace:\n#0 /tmp/tmpapk_l5b5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpapk_l5b5.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    foreach($operand as $operand) {\n        // if there isn't\
    \ a binary operation, do nothing\n        if (!array_key_exists($operator, $operator))\
    \ {\n            $result[$operator] = $operand;\n            continue;\n     \
    \   }\n        // get the operator from the list\n        $operator = $operator[$operator];\n\
    \        // if there isn't an operator, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // if there isn't an operand, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // get the operator from the list\n        $operator = $operator[$operator];\n\
    \        // if there isn't an operand, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // get the operator from the list\n        $operator = $operator[$operator];\n\
    \        // if there isn't an operand, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // get the operator from the list\n        $operator = $operator[$operator];\n\
    \        // if there isn't an operand, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // get the operator from the list\n        $operator = $operator[$operator];\n\
    \        // if there isn't an operand, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // get the operator from the list\n        $operator = $operator[$operator];\n\
    \        // if there isn't an operand, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // get the operator from the list\n        $operator = $operator[$operator];\n\
    \        // if there isn't an operand, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // get the operator from the list\n        $operator = $operator[$operator];\n\
    \        // if there isn't an operand, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // get the operator from the list\n        $operator = $operator[$operator];\n\
    \        // if there isn't an operand, do nothing\n        if (!array_key_exists($operator,\
    \ $operator)) {\n            $result[$operator] = $operand;\n            continue;\n\
    \        }\n        // get the \nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpug7p0dkb.php on line 106\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = array();\n    foreach($operand as $val) {\n     \
    \   foreach($operator as $op) {\n            if (isset($result[$op])) {\n    \
    \            $result[$op] = $result[$op] + $val;\n            } else {\n     \
    \           $result[$op] = $val;\n            }\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8mib318p.php:38\n\
    Stack trace:\n#0 /tmp/tmp8mib318p.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8mib318p.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if (count($operator) < 1) {\n        trigger_error(\"The operator\
    \ list has less than one item!\", E_USER_ERROR);\n    }\n    if (count($operand)\
    \ < 2) {\n        trigger_error(\"The operand list has less than two item!\",\
    \ E_USER_ERROR);\n    }\n    $result = 0;\n    foreach($operator as $op) {\n \
    \       if ($op == \"+\" || $op == \"-\") {\n            $result = $result + $operand[0];\n\
    \        }\n        if ($op == \"*\" || $op == \"/\" || $op == \"//\") {\n   \
    \         $result = $result + $operand[0];\n            $result = $result / $operand[1];\n\
    \        }\n        if ($op == \"**\") {\n            $result = $result + $operand[0];\n\
    \            $result = $result ** $operand[1];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcem6egn9.php:49\n\
    Stack trace:\n#0 /tmp/tmpcem6egn9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcem6egn9.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Evaluate operand\n  foreach($operand as $key => $value) {\n\
    \    if($value == 0) {\n      unset($operand[$key]);\n    }\n  }\n\n  // Evaluate\
    \ operator and create operation string\n  $operation_str = '';\n  foreach($operator\
    \ as $key => $value) {\n    $operation_str.= $value;\n  }\n\n  // Create string\
    \ to evaluate\n  $expression = $operation_str . $operand[0];\n  if(isset($operand[1]))\
    \ {\n    $expression . = $operation_str . $operand[1];\n  }\n\n  // Evaluate string\n\
    \  return eval(\"return \" . $expression . \";\");\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbdo1m3f5.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operatorLength = count($operator);\n    $operandLength = count($operand)\
    \ - 1;\n    $result = 0;\n    $operator = 0;\n    $operand = 0;\n    $operand2\
    \ = 0; \n    $operand3 = 0;\n    for ($i = 0; $i < $operandLength; $i++) {\n \
    \       switch ($i) {\n            case 0:\n                $operand2 = $operand[$i];\n\
    \                for ($j = 0; $j < $operatorLength; $j++) {\n                \
    \    if ($operator == 0) {\n                        $result = $operand2 + $operand3;\n\
    \                        break;\n                    } elseif ($operator == 1)\
    \ {\n                        $result = $operand2 - $operand3;\n              \
    \          break;\n                    } elseif ($operator == 2) {\n         \
    \               $result = $operand2 * $operand3;\n                        break;\n\
    \                    } elseif ($operator == 3) {\n                        $result\
    \ = $operand2 // $operand3;\n                        break;\n                \
    \    } elseif ($operator == 4) {\n                        $result = $operand2\
    \ ** $operand3;\n                        break;\n                    } elseif\
    \ ($operator == 5) {\n                        $result = $operand2 % $operand3;\n\
    \                        break;\n                    } elseif ($operator == 6)\
    \ {\n                        $result = $operand2 . '%';\n                    \
    \    break;\n                    } elseif ($operator == 7) {\n               \
    \         $result = $operand2 . '^';\n                        break;\n       \
    \             } elseif ($operator == 8) {\n                        $result = $operand2\
    \ . '-';\n                        break;\n                    } elseif ($operator\
    \ == 9) {\n                        $result = $operand2 . '*';\n              \
    \          break;\n                    } elseif ($operator == 10) {\n        \
    \                $result = $operand2 . '//';\n                        break;\n\
    \                    } elseif ($operator == 11) {\n                        $result\
    \ = $operand2 . '**';\n                        break;\n                    } elseif\
    \ ($operator == 12) {\n                        $result = $operand2 . '++';\n \
    \                       break;\n                    } elseif ($operator == 13)\
    \ {\n                        $result = $operand2 . '--';\n                   \
    \     break;\n                    } elseif ($operator == 14) {\n             \
    \           $result = $operand2 . '+++';\n                        break;\n   \
    \                 } elseif ($operator == 15) {\n                        $result\
    \ = $operand2 . '--+';\n                        break;\n                    }\
    \ elseif ($operator == 16) {\n                        $result = $operand2 . '++-';\n\
    \                        break;\n                    } elseif ($operator == 17)\
    \ {\n                        $result = $operand2 . '---';\n                  \
    \      break;\n                    } elseif ($operator == 18) {\n            \
    \            $result = $operand2 . '+\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpov6qzcow.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmploirkfmu.php:28\n\
    Stack trace:\n#0 /tmp/tmploirkfmu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmploirkfmu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if(count($operator) != count($operand)) {\n        return null;\n\
    \    }\n    $stack = array();\n    $result = array();\n    for($i = 0; $i < count($operator);\
    \ $i++) {\n        $stack[$i] = $operand[$i];\n        $result[$i] = $operand[$i];\n\
    \        $operand[$i] = do_algebra($operator, $operand);\n        $stack[$i] =\
    \ $operand[$i];\n    }\n    return array_pop($result);\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpid_3v6m9.php:39\n\
    Stack trace:\n#0 /tmp/tmpid_3v6m9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpid_3v6m9.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operation = $operator[0];\n  $oplist = $operator;\n  $oplist[0]\
    \ = strtoupper($operation);\n  $oplist[1] = preg_replace('/[^0-9\\+\\-\\*\\/\\\
    ^]*/', '', $oplist[1]);\n\n  if ($oplist[1] == '' || $oplist[1] == 0) {\n    $operation\
    \ = '*';\n  }\n\n  for($i = 0; $i < count($operand); $i++) {\n    if ($operation\
    \ == '/' && $operand[$i] == 0) {\n      continue;\n    }\n    $value = $operand[$i];\n\
    \    switch ($operation) {\n      case '+':\n        $value += $operand[$i - 1];\n\
    \        break;\n      case '-':\n        $value -= $operand[$i - 1];\n      \
    \  break;\n      case '*':\n        $value *= $operand[$i - 1];\n        break;\n\
    \      case '/':\n        $value /= $operand[$i - 1];\n        break;\n      case\
    \ '^':\n        $value **= $operand[$i - 1];\n        break;\n    }\n  }\n  return\
    \ $value;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pz0b5t1.php:61\n\
    Stack trace:\n#0 /tmp/tmp9pz0b5t1.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp9pz0b5t1.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxlspzdu.php:29\n\
    Stack trace:\n#0 /tmp/tmpjxlspzdu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjxlspzdu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if (count($operand) > 1) {\n        // First check if the number\
    \ of operands are equal\n        if (count($operand) !== count($operator)) {\n\
    \            // If not equal then throw an error.\n            echo \"Error: Invalid\
    \ operands list\";\n            return false;\n        }\n        // The operands\
    \ are equal, therefore the expression is valid\n        // We will now build the\
    \ expression by concatenating each operand to the operator\n        foreach ($operand\
    \ as $operand) {\n            foreach ($operator as $op) {\n                $expression\
    \ = strval($operand) . ' ' . $op;\n                // evaluate the expression\n\
    \                return $expression;\n            }\n        }\n    } else {\n\
    \        // If there is only one operand then we can just evaluate the operator\
    \ and operand\n        foreach ($operator as $op) {\n            foreach ($operand\
    \ as $operand) {\n                $expression = strval($operand) . ' ' . $op;\n\
    \                // evaluate the expression\n                return $expression;\n\
    \            }\n        }\n    }\n}\n</code>\nThis program can do the following:\n\
    \nIf there is only one operand then it will evaluate that expression and return\
    \ it.\nIf there is more than one operand then it will evaluate a expression and\
    \ return the result.\nIf there are unequal operands then it returns false.\nIf\
    \ there are unequal operators then it returns false.\nIf there are unequal operands\
    \ and operators then it returns false.\nIf there is no operator or operand then\
    \ it will return false.\n\nThe above program doesn't validate that the operands\
    \ are integers but that can be done by simple validation by checking the contents\
    \ of $operand and $operator:\n<code>\nif (strval($operand) != '' && strval($operand)\
    \ != '0') {\n    // valid operand\n} else if (strval($operand) != '' && strval($operand)\
    \ == '0') {\n    // operand is 0\n} else {\n    // invalid operand\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nI thought about this but I am not too sure if there\
    \ is a way other than using a switch statement. The list of operators and operands\
    \ is going to change based on each question. Maybe I could do an if statement\
    \ to see if it matches any of them.\n<|/ c |>\n<| c |>\nIf the list of operators\
    \ and operands is going to change based on each question then your best bet is\
    \ to store them in an array and check them in a loop. I will post an edit to my\
    \ answer to show this in my answer.\n<|/ c |>\n<| c |>\nSo your suggestion is\
    \ to store the operators and operands in an array and then use an if statement\
    \ to see if there is a match?\n<|/ c |>\n<| c |>\nCorrect, you will need to define\
    \ your operators and operands beforehand and store them in an array that can be\
    \ looped \nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfnezs4_7.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  \n  foreach ($operator as $key => $value) {\n\
    \    if (array_key_exists($key, $operand)) {\n      $result += $operand[$key];\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6j4oef50.php:35\n\
    Stack trace:\n#0 /tmp/tmp6j4oef50.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6j4oef50.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    foreach ($operator as $op) {\n        $operand1 = $operand[0];\
    \ \n        $operand2 = $operand[1]; \n        if ($op == '+') $result = $operand1\
    \ + $operand2; \n        elseif ($op == '-') $result = $operand1 - $operand2;\
    \ \n        elseif ($op == '*') $result = $operand1 * $operand2; \n        elseif\
    \ ($op == '/') $result = $operand1 / $operand2; \n        elseif ($op == '//')\
    \ $result = $operand1 . $operand2;\n        elseif ($op == '^') $result = pow($operand1,\
    \ $operand2);\n        elseif ($op == '**') $result = pow($operand1, $operand2);\n\
    \        elseif ($op == '%') $result = $operand1 % $operand2; \n        elseif\
    \ ($op == '<') $result = $operand1 < $operand2; \n        elseif ($op == '>')\
    \ $result = $operand1 > $operand2; \n        elseif ($op == '<=') $result = $operand1\
    \ <= $operand2; \n        elseif ($op == '>=') $result = $operand1 >= $operand2;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8a66d5l.php:44\n\
    Stack trace:\n#0 /tmp/tmpn8a66d5l.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpn8a66d5l.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n    $algebric = \"(\";\n    $algebric .=\
    \ $operator[0];\n    for($i = 1; $i < sizeof($operator)-1; $i++){\n        $algebric\
    \ .= $operator[$i];\n        $algebric .= $operand[$i];\n    }\n    $algebric\
    \ .= $operator[sizeof($operator)-1];\n    $algebric .= \")\";\n    return $algebric;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxq79ehu.php:38\n\
    Stack trace:\n#0 /tmp/tmpwxq79ehu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwxq79ehu.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Your code here.\n}\n$operator = ['+', '*', '-', '*', '-'];\n\
    $operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2gbhl92.php:31\n\
    Stack trace:\n#0 /tmp/tmpm2gbhl92.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpm2gbhl92.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    //get the length of the operator list\n    $op_length = count($operator);\n\
    \n    //get the length of the operand list\n    $num_operands = count($operand);\n\
    \n    //if the operation count is equal to the operand count minus one\n    if($op_length\
    \ == $num_operands -1){\n        //build the expression\n        $expression =\
    \ '';\n        for($i = 0; $i < $op_length; $i++){\n            $expression =\
    \ $expression + $operator[$i] * $operand[$i];\n        }\n\n        //return the\
    \ result of the expression\n        return $expression;\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmppc69pzi_.php on line\
    \ 32\n\nWarning: A non-numeric value encountered in /tmp/tmppc69pzi_.php on line\
    \ 32\n\nWarning: A non-numeric value encountered in /tmp/tmppc69pzi_.php on line\
    \ 32\n\nWarning: A non-numeric value encountered in /tmp/tmppc69pzi_.php on line\
    \ 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppc69pzi_.php:47\n\
    Stack trace:\n#0 /tmp/tmppc69pzi_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmppc69pzi_.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0;\n    foreach($operand as $key => $value) {\n \
    \       $result += $operand[$key] * $operator[$key - 1]; // array index start\
    \ from 0, operator list start from 1\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpptvslahr.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpptvslahr.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpptvslahr.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptvslahr.php:32\n\
    Stack trace:\n#0 /tmp/tmpptvslahr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpptvslahr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Do the algebra operation\n    $expression = \"\";\n    foreach\
    \ ($operator as $key => $op) {\n        $expression .= $operand[$key] * $op;\n\
    \    }\n    return $expression;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpux_drw1o.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpux_drw1o.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpux_drw1o.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux_drw1o.php:34\n\
    Stack trace:\n#0 /tmp/tmpux_drw1o.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpux_drw1o.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    list($first, $second) = array_slice($operand, 0, -2);\n   \
    \ $stack = array_fill(0, count($operator)+1, 0, 0);\n    $sum = 0;\n    $first\
    \ = $first < 0 ? abs($first) : $first;\n    $second = $second < 0 ? abs($second)\
    \ : $second;\n    foreach ($operator as $op) {\n        if ($op == '+') {\n  \
    \          $stack[count($stack)-1] = $stack[count($stack)-1] + $second;\n    \
    \    } elseif ($op == '-') {\n            $stack[count($stack)-1] = $stack[count($stack)-1]\
    \ - $second;\n        } elseif ($op == '*') {\n            $stack[count($stack)-1]\
    \ = $stack[count($stack)-1] * $second;\n        } elseif ($op == '/') {\n    \
    \        $stack[count($stack)-1] = $stack[count($stack)-1] / $second;\n      \
    \  } elseif ($op == '**') {\n            $stack[count($stack)-1] = $stack[count($stack)-1]\
    \ ** $second;\n        }\n    }\n    $result = 0;\n    foreach ($stack as $k =>\
    \ $v) {\n        $result += (pow($v, $first));\n    }\n    return $result;\n}\n\
    </code>\n<|/ a dscore=0 tags=php,algorithm,math |>\n<| a dscore=0 tags=php,algorithm,math\
    \ |>\nI ended up writing a recursive function with looping through each operator\
    \ and operand, each time making two recursive calls, one for the left operand\
    \ (if the operator is left) and one for the right operand.\nI then sum the results\
    \ of the two subcalls and return them.\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpejnb9fuf.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator_list = array('+', '-', '*', '//', '**');\n    $ops\
    \ = count($operator_list) - 1;\n    $op1 = $operand[0];\n    $op2 = $operand[1];\n\
    \    $operation = $operator_list[$op1];\n    \n    $op1 = $operand[0];\n    $op2\
    \ = $operand[1];\n    $operation = $operator_list[$op1];\n    \n    if ($operand[0]\
    \ > $operand[1]) {\n        $op1 = $operand[1];\n        $op2 = $operand[0];\n\
    \        $operation = $operator_list[$op1];\n    }\n    $operation = $operation\
    \ . $operator_list[$op2];\n    \n    $op1 = $operand[0];\n    $op2 = $operand[1];\n\
    \    $operation = $operation . $operator_list[$op1];\n    \n    $op1 = $operand[0];\n\
    \    $op2 = $operand[1];\n    $operation = $operation . $operator_list[$op1];\n\
    \    \n    $op1 = $operand[0];\n    $op2 = $operand[1];\n    $operation = $operation\
    \ . $operator_list[$op1];\n    \n    $op1 = $operand[0];\n    $op2 = $operand[1];\n\
    \    $operation = $operation . $operator_list[$op1];\n    \n    \n    $op1 = $operand[0];\n\
    \    $op2 = $operand[1];\n    $operation = $operation . $operator_list[$op1];\n\
    \    \n    $op1 = $operand[0];\n    $op2 = $operand[1];\n    $operation = $operation\
    \ . $operator_list[$op1];\n    \n    $op1 = $operand[0];\n    $op2 = $operand[1];\n\
    \    $operation = $operation . $operator_list[$op1];\n    \n    $op1 = $operand[0];\n\
    \    $op2 = $operand[1];\n    $operation = $operation . $operator_list[$op1];\n\
    \    \n    $op1 = $operand[0];\n    $op2 = $operand[1];\n    $operation = $operation\
    \ . $operator_list[$op1];\n    \n    $op1 = $operand[0];\n    $op2 = $operand[1];\n\
    \    $operation = $operation . $operator_list[$op1];\n    \n    $op1 = $operand[0];\n\
    \    $op2 = $operand[1];\n    $operation = $operation . $operator_list[$op1];\n\
    \    \n    $op1 = $operand[0];\n    $op2 = $operand[1];\n    $operation = $operation\
    \ . $operator_list[$op1];\n    \n    $op1 = $operand[0];\n    $op2 = $operand[1];\n\
    \    $operation = $operation . $operator_list[$op1];\n    \n    $op1 = $operand[0];\n\
    \    $op2 = $operand[1];\n    $operation = $operation . $operator_list[$op1];\n\
    \    \n    $op1 = $operand[0];\n    $op\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_poisym4.php on line 97\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    do {\n        $op = $operator[mt_rand(0, count($operator)-1)];\n\
    \        $op = $operator[$op];\n        $op = $op();\n    } while ($op === false);\n\
    \n    do {\n        $i = mt_rand(0, count($operand)-1);\n        $r = $operand[$i];\n\
    \    } while ($r === false);\n\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpp37qt1y0.php:24\n\
    Stack trace:\n#0 /tmp/tmpp37qt1y0.php(36): do_algebra(Array, Array)\n#1 /tmp/tmpp37qt1y0.php(40):\
    \ candidate(Array, Array)\n#2 /tmp/tmpp37qt1y0.php(45): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpp37qt1y0.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Your code here!\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4e5roes.php:28\n\
    Stack trace:\n#0 /tmp/tmpq4e5roes.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpq4e5roes.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = array();\n\tfor ($i = 0, $len = count($operator); $i\
    \ < $len; $i++) {\n\t\t$sum = 0;\n\t\tfor ($j = 0, $len2 = count($operand); $j\
    \ < $len2; $j++) {\n\t\t\tif ($j === $i) {\n\t\t\t\t$sum = $operand[$j] * $operator[$i];\n\
    \t\t\t}\n\t\t\t$sum += $operand[$j];\n\t\t}\n\t\t$result[] = $sum;\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpnpedl23u.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpnpedl23u.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpnpedl23u.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnpedl23u.php:40\n\
    Stack trace:\n#0 /tmp/tmpnpedl23u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnpedl23u.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n    $stack = array();\n    $stack['operator']\
    \ = $operator;\n    $stack['operand'] = $operand;\n    for($i=0; $i<count($operator);\
    \ $i++){\n        $op = $operator[$i];\n        if(!array_key_exists($op, $stack)){\n\
    \            echo \"Stack key error\";\n            exit;\n        }\n       \
    \ $op2 = $stack[$op];\n        if(!array_key_exists($op2, $stack)){\n        \
    \    echo \"Stack key error\";\n            exit;\n        }\n        if($op ==\
    \ $op2){\n            $stack['op2'] = $op2;\n        }else{\n            $stack['op1']\
    \ = $op;\n            $stack['op2'] = $op2;\n        }\n    }\n    for($i=count($stack)-1;\
    \ $i>0; $i--){\n        if(!array_key_exists($stack[$i], $stack)){\n         \
    \   echo \"Stack key error\";\n            exit;\n        }\n        $result =\
    \ $stack[$i];\n        unset($stack[$i]);\n        $stack[$i] = $result;\n   \
    \ }\n    return $stack[0];\n}\n\n$operators = array('+', '-', '*', '/', '//',\
    \ '**');\n\n$result = do_algebra($operators, array('+', '*', '-', 2, 3, 4, 5));\n\
    echo $result;\n</code>\n<|/ a tags=php,algorithm,arrays,sorting |>\n<| c |>\n\
    thanks for the answer, but I'm getting Stack key error on that code (line 31)\n\
    <|/ c |>\n<| c |>\nOh, my bad, I didn't realized you are doing this for integers,\
    \ I will fix it soon\n<|/ c |>\n<| c |>\ni think you are missing some cases on\
    \ your last iteration, but i don't really know why\n<|/ c |>\n<| c |>\nI got your\
    \ algorithm now, I made some changes, please let me know if its working for you\n\
    <|/ c |>\n<| c |>\nI realized that my algorithm doesn't do exactly what you wanted.\
    \ Anyway, hope you can finish your homework by yourself :D\n<|/ c |>\n<| a |>\n\
    This looks like a homework assignment, so I will not give you a full solution\
    \ but point you in the right direction. \nIn order to solve this problem, you\
    \ will have to first rethink your basic problem: what is the \"key\" of your array?\
    \ What is the \"value\" of your array? It sounds like a combination of the two\
    \ would work, but I would have to think about \nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcfsfucts.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code goes here.\n    $operators = explode('+', $operator);\n\
    \    $operands = explode('+', $operand);\n\n    $operators = array_slice($operators,\
    \ 0, sizeof($operands) - 1);\n    $operands = array_slice($operands, 0, sizeof($operators)\
    \ - 1);\n    \n    $result = 0;\n    foreach ($operators as $i => $operator) {\n\
    \        $result += (isset($operands[$i]) ? $operands[$i] : $operands[$i + 1]);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpwvzv1l8q.php\
    \ on line 22\n\nWarning: explode() expects parameter 2 to be string, array given\
    \ in /tmp/tmpwvzv1l8q.php on line 23\n\nWarning: sizeof(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmpwvzv1l8q.php on line\
    \ 25\n\nWarning: array_slice() expects parameter 1 to be array, null given in\
    \ /tmp/tmpwvzv1l8q.php on line 25\n\nWarning: sizeof(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpwvzv1l8q.php on line 26\n\n\
    Warning: array_slice() expects parameter 1 to be array, null given in /tmp/tmpwvzv1l8q.php\
    \ on line 26\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpwvzv1l8q.php\
    \ on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvzv1l8q.php:40\n\
    Stack trace:\n#0 /tmp/tmpwvzv1l8q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwvzv1l8q.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // TODO: Replace with better algorithm.\n  $i = 0;\n  $sum =\
    \ 0;\n  while (isset($operator[$i]) && isset($operand[$i])) {\n    $temp = $operand[$i];\n\
    \    list($num1, $operator, $num2) = array($operand[$i], $operator, $operand[$i\
    \ + 1]);\n    switch ($operator) {\n      case '+':\n        $sum = $sum + $num2;\n\
    \        break;\n      case '-':\n        $sum = $sum - $num2;\n        break;\n\
    \      case '*':\n        $sum = $sum * $num2;\n        break;\n      case '/':\n\
    \        if ($num2 === 0) {\n          echo \"Error: Cannot divide by 0.\\n\"\
    ;\n          exit();\n        }\n        $sum = $sum / $num2;\n        break;\n\
    \      case '**':\n        $sum = $sum ** $num2;\n        break;\n    }\n    $i++;\n\
    \  }\n  return $sum;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv6ttlsa.php:58\n\
    Stack trace:\n#0 /tmp/tmpjv6ttlsa.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpjv6ttlsa.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Basic operation\n    foreach ($operator as $key => $value)\
    \ {\n        if ($key == '+' || $key == '-') {\n            $result = $operand\
    \ + $operand[$key];\n            return $result;\n        } else if ($key == '*'\
    \ || $key == '/') {\n            $result = $operand * $operand[$key];\n      \
    \      return $result;\n        } else if ($key == '**') {\n            $result\
    \ = pow($operand[0], $operand[1]);\n            return $result;\n        }\n \
    \   }\n\n    // Floor division\n    foreach ($operator as $key => $value) {\n\
    \        if ($key == '/') {\n            $result = $operand / $operand[$key];\n\
    \            return $result;\n        }\n    }\n    \n    // Exponentiation\n\
    \    foreach ($operator as $key => $value) {\n        if ($key == '**') {\n  \
    \          $result = pow($operand[0], $operand[1]);\n            return $result;\n\
    \        }\n    }\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpl3wabq03.php:24\n\
    Stack trace:\n#0 /tmp/tmpl3wabq03.php(53): do_algebra(Array, Array)\n#1 /tmp/tmpl3wabq03.php(57):\
    \ candidate(Array, Array)\n#2 /tmp/tmpl3wabq03.php(62): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpl3wabq03.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$stack = array();\n\t$stack_pos = 0;\n\t$res = 0;\n\t$operators_count\
    \ = count($operator);\n\t$operands_count = count($operand);\n\twhile($stack_pos\
    \ < $operands_count) {\n\t\t$op = $operator[$stack_pos];\n\t\t$next_operand =\
    \ $operand[$stack_pos];\n\t\t$stack[$stack_pos] = $next_operand;\n\t\tif($op ==\
    \ '-') {\n\t\t\t$next_operand = $stack[$stack_pos - 1];\n\t\t\tif(!is_numeric($next_operand))\
    \ {\n\t\t\t\t$res = -$next_operand;\n\t\t\t} else {\n\t\t\t\t$next_operand = floor($next_operand);\n\
    \t\t\t\t$res = $next_operand - $stack[$stack_pos];\n\t\t\t}\n\t\t} elseif($op\
    \ == '+') {\n\t\t\t$next_operand = $stack[$stack_pos - 1];\n\t\t\tif(!is_numeric($next_operand))\
    \ {\n\t\t\t\t$res += $next_operand;\n\t\t\t} else {\n\t\t\t\t$next_operand = floor($next_operand);\n\
    \t\t\t\t$res += $stack[$stack_pos] - $next_operand;\n\t\t\t}\n\t\t} elseif($op\
    \ == '*') {\n\t\t\t$next_operand = $stack[$stack_pos - 1];\n\t\t\tif(!is_numeric($next_operand))\
    \ {\n\t\t\t\t$res *= $next_operand;\n\t\t\t} else {\n\t\t\t\t$next_operand = floor($next_operand);\n\
    \t\t\t\t$res *= $stack[$stack_pos] * $next_operand;\n\t\t\t}\n\t\t} elseif($op\
    \ == '/') {\n\t\t\t$next_operand = $stack[$stack_pos - 1];\n\t\t\tif(!is_numeric($next_operand))\
    \ {\n\t\t\t\t$res /= $next_operand;\n\t\t\t} else {\n\t\t\t\t$next_operand = floor($next_operand);\n\
    \t\t\t\t$res /= $stack[$stack_pos] / $next_operand;\n\t\t\t}\n\t\t} elseif($op\
    \ == '**') {\n\t\t\t$next_operand = $stack[$stack_pos - 1];\n\t\t\tif(!is_numeric($next_operand))\
    \ {\n\t\t\t\t$res **= $next_operand;\n\t\t\t} else {\n\t\t\t\t$next_operand =\
    \ floor($next_operand);\n\t\t\t\t$res **= $stack[$stack_pos] ** $next_operand;\n\
    \t\t\t}\n\t\t}\n\t\t$stack_pos++;\n\t}\n\treturn $res;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e2ustno.php:80\n\
    Stack trace:\n#0 /tmp/tmp2e2ustno.php(85): test()\n#1 {main}\n  thrown in /tmp/tmp2e2ustno.php\
    \ on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // If empty array given as operand, return null\n    if (count($operand)\
    \ === 0) return null;\n    // Create list of operators\n    $operators = array();\n\
    \    // Loop through operands, adding elements to operators array\n    foreach\
    \ ($operand as $value) {\n        // If first element of operand array is an operator,\
    \ add it to operators array\n        if (is_array($value)) {\n            $operators[]\
    \ = $value[0];\n        } \n        // If first element of operand array is a\
    \ number, add it to operators array\n        else {\n            $operators[]\
    \ = $value;\n        }\n    }\n    // If no operators, return null\n    if (!count($operators))\
    \ return null;\n    // Get last element of operator list\n    $last = array_pop($operators);\n\
    \    // If last element of operator list is not a number, return null\n    if\
    \ (!is_numeric($last)) return null;\n    // If last element of operator list is\
    \ a number, do algebra\n    return array_sum($operand) + $last * do_algebra($operators,\
    \ $operand);\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpa4etkt1d.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Write your code here\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijr1t9w2.php:28\n\
    Stack trace:\n#0 /tmp/tmpijr1t9w2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpijr1t9w2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    list($op_stack, $op_result) = $op_stack_recursive_builder($operator,\
    \ $operand, NULL, NULL);\n    if($op_stack) {\n        return $op_result;\n  \
    \  } else {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp62u9s9cw.php:21\n\
    Stack trace:\n#0 /tmp/tmp62u9s9cw.php(29): do_algebra(Array, Array)\n#1 /tmp/tmp62u9s9cw.php(33):\
    \ candidate(Array, Array)\n#2 /tmp/tmp62u9s9cw.php(38): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp62u9s9cw.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $sum = 0;\n  $size = count($operator);\n  foreach($operator as\
    \ $key => $val) {\n    $sum += $operand[$key] * $val;\n  }\n  return $sum;\n}\n\
    \nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpz769tvxo.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpz769tvxo.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpz769tvxo.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz769tvxo.php:34\n\
    Stack trace:\n#0 /tmp/tmpz769tvxo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpz769tvxo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    \n    // Your code here\n    $operations = array('+', '-',\
    \ '*', '/', '//', '**');\n    $evalString = \"\";\n    for($i=0;$i<count($operator);$i++){\n\
    \        $evalString .= $operand[$i].$operations[$i];\n    }\n    return $evalString;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03isbbov.php:35\n\
    Stack trace:\n#0 /tmp/tmp03isbbov.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp03isbbov.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = array();\n  // do algebra\n  $algebric_function = 'algebric_'\
    \ . $operator[0];\n  if (function_exists($algebric_function)) {\n    $result[]\
    \ = call_user_func_array($algebric_function, [$operand]);\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4x5o7k11.php:34\n\
    Stack trace:\n#0 /tmp/tmp4x5o7k11.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4x5o7k11.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    \n    // Basic operations\n    if (in_array($operator, ['+',\
    \ '-', '*', '/', '//', '**']) == true) {\n        $operand_number = count($operand);\n\
    \        $result_number = 1;\n        for ($i = 0; $i < $operand_number; $i++)\
    \ {\n            $result_number *= $operand[$i];\n        }\n        return $result_number;\n\
    \    }\n    // Floor division\n    else if (in_array($operator, ['//', '**'])\
    \ == true) {\n        $operand_number = count($operand);\n        $result_number\
    \ = 1;\n        for ($i = 0; $i < $operand_number; $i++) {\n            $result_number\
    \ *= $operand[$i];\n        }\n        return $result_number;\n    }\n    // Exponentiation\n\
    \    else if (in_array($operator, ['**']) == true) {\n        $operand_number\
    \ = count($operand);\n        $result_number = 1;\n        for ($i = 0; $i < $operand_number;\
    \ $i++) {\n            $result_number *= $operand[$i];\n        }\n        return\
    \ $result_number;\n    }\n    // Invalid operator\n    else {\n        return\
    \ false;\n    }\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qyulilu.php:59\n\
    Stack trace:\n#0 /tmp/tmp6qyulilu.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp6qyulilu.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $ops = $operand;\n    $ops[] = $operator[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        $ops[] = $operator[$i];\n    }\n\
    \    $res = 0;\n    foreach ($ops as $k => $op) {\n        if (is_numeric($op))\
    \ {\n            $res = $op + $res;\n        }\n    }\n    return $res;\n}\n\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5hbwk1y.php:40\n\
    Stack trace:\n#0 /tmp/tmpi5hbwk1y.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpi5hbwk1y.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if (empty($operator) || empty($operand)) {\n        return\
    \ false;\n    }\n    $index = 0;\n    $stack = array();\n    do {\n        if\
    \ (array_key_exists($index, $operator)) {\n            array_push($stack, $operand[$index]);\n\
    \            $index++;\n        } else {\n            $result = array_pop($stack);\n\
    \            $result = $operator[$index-1] . $result;\n            array_push($stack,\
    \ $result);\n            $index++;\n        }\n    } while ($index <= count($operand)\
    \ - 1);\n    return array_pop($stack);\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdznvbt7.php:45\n\
    Stack trace:\n#0 /tmp/tmpjdznvbt7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjdznvbt7.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpza_fl6md.php:28\n\
    Stack trace:\n#0 /tmp/tmpza_fl6md.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpza_fl6md.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tif (count($operator) < 1) {\n\t\treturn 0;\n\t}\n\tif (count($operand)\
    \ < 2) {\n\t\treturn 0;\n\t}\n\t// get the first operator from the operator list\n\
    \t$operator_index = 0;\n\t$operator = $operator[$operator_index];\n\tforeach ($operator\
    \ as $key => $value) {\n\t\tif ($key == '+') {\n\t\t\t$left_result = $operand[0];\n\
    \t\t\t$right_result = $operand[1];\n\t\t\t$result = $left_result + $right_result;\n\
    \t\t\t$operand[$key] = $result;\n\t\t}\n\t\tif ($key == '-') {\n\t\t\t$left_result\
    \ = $operand[0];\n\t\t\t$right_result = $operand[1];\n\t\t\t$result = $left_result\
    \ - $right_result;\n\t\t\t$operand[$key] = $result;\n\t\t}\n\t\tif ($key == '*')\
    \ {\n\t\t\t$left_result = $operand[0];\n\t\t\t$right_result = $operand[1];\n\t\
    \t\t$result = $left_result * $right_result;\n\t\t\t$operand[$key] = $result;\n\
    \t\t}\n\t\tif ($key == '/') {\n\t\t\t$left_result = $operand[0];\n\t\t\t$right_result\
    \ = $operand[1];\n\t\t\t$result = $left_result / $right_result;\n\t\t\t$operand[$key]\
    \ = $result;\n\t\t}\n\t\tif ($key == '**') {\n\t\t\t$left_result = $operand[0];\n\
    \t\t\t$right_result = $operand[1];\n\t\t\t$result = $left_result ** $right_result;\n\
    \t\t\t$operand[$key] = $result;\n\t\t}\n\t\t$operator_index++;\n\t}\n\t// get\
    \ the second operand from the operand list\n\t$operator_index = 0;\n\t$operator\
    \ = $operator[$operator_index];\n\tforeach ($operand as $key => $value) {\n\t\t\
    if ($key == '+') {\n\t\t\t$left_result = $operand[0];\n\t\t\t$right_result = $operand[1];\n\
    \t\t\t$result = $left_result + $right_result;\n\t\t\t$operand[$key] = $result;\n\
    \t\t}\n\t\tif ($key == '-') {\n\t\t\t$left_result = $operand[0];\n\t\t\t$right_result\
    \ = $operand[1];\n\t\t\t$result = $left_result - $right_result;\n\t\t\t$operand[$key]\
    \ = $result;\n\t\t}\n\t\tif ($key == '*') {\n\t\t\t$left_result = $operand[0];\n\
    \t\t\t$right_result = $operand[1];\n\t\t\t$result = $left_result * $right_result;\n\
    \t\t\t$operand[$key] = $result;\n\t\t}\n\t\tif ($key == '/') {\n\t\t\t$left_result\
    \ = $operand[0];\n\t\t\t$right_result = $operand[1];\n\t\t\t$result = $left_result\
    \ / $right_result;\n\t\t\t$operand[$key] = $result;\n\t\t}\n\t\tif ($key == '**')\
    \ {\n\t\t\t$left_result = $operand[0];\n\t\t\t$right_result = \nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuyxnl3xb.php on line 94\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  if (count($operator) == 0 || count($operand) < 2) {\n    echo\
    \ \"invalid inputs\\n\";\n  }\n  $result = \"\";\n  $size = count($operator);\n\
    \  for ($i = 0; $i < $size - 1; $i++) {\n    $result = $operator[$i] . $operand[$i]\
    \ . $result;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnfeewqg.php:37\n\
    Stack trace:\n#0 /tmp/tmptnfeewqg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptnfeewqg.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operand_length = count($operand) - 1;\n    $operator_length\
    \ = count($operator) - 1;\n\n    $total = 0;\n\n    // Loop through each operand\
    \ and perform the algebra operation\n    for($i = 0; $i < $operand_length; $i++)\
    \ {\n        // Calculate the current total based on the operator and operand\n\
    \        $total = $operator[0]($total, $operand[$i]);\n\n        // Loop through\
    \ each operator and perform the algebra operation\n        for($j = 1; $j < $operator_length;\
    \ $j++) {\n            // Calculate the current total based on the operator and\
    \ operand\n            $total = $operator[$j]($total, $operand[$i]);\n       \
    \ }\n    }\n\n    return $total;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function **() in /tmp/tmpq5ys29el.php:29\n\
    Stack trace:\n#0 /tmp/tmpq5ys29el.php(42): do_algebra(Array, Array)\n#1 /tmp/tmpq5ys29el.php(46):\
    \ candidate(Array, Array)\n#2 /tmp/tmpq5ys29el.php(51): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpq5ys29el.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkw6sg92.php:29\n\
    Stack trace:\n#0 /tmp/tmpwkw6sg92.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwkw6sg92.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Start building the expression.\n    $expression = '(';\n\
    \    \n    // Add all the operands into the expression.\n    foreach($operand\
    \ as $key => $value) {\n        // If this operand is negative, ignore it.\n \
    \       if($operand[$key] < 0) {\n            continue;\n        }\n        //\
    \ Add all the operators and operands together.\n        $expression .= $value;\n\
    \        // If this operator is NOT the last operator, add an operator.\n    \
    \    if(($key + 1) < sizeof($operator)) {\n            $expression .= $operator[$key];\n\
    \        }\n    }\n    // Return the expression.\n    return $expression . ')';\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaishr589.php:45\n\
    Stack trace:\n#0 /tmp/tmpaishr589.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpaishr589.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $expression = \"\";\n    for ($i=0; $i<count($operand)-1; $i++)\
    \ {\n        if ($i < count($operator)) {\n            if ($operand[$i] > 0) {\n\
    \                $expression .= $operator[$i];\n            }\n            else\
    \ {\n                $expression .= $operand[$i];\n            }\n        }\n\
    \    }\n    for ($i = 0; $i<count($operator); $i++) {\n        $expression .=\
    \ $operator[$i];\n    }\n    return $operand[count($operand) - 1] + $expression;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp_dyf41cr.php on line\
    \ 35\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dyf41cr.php:42\n\
    Stack trace:\n#0 /tmp/tmp_dyf41cr.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_dyf41cr.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff30d32s.php:28\n\
    Stack trace:\n#0 /tmp/tmpff30d32s.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff30d32s.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operatorLength = count($operator);\n    $operandLength = count($operand)\
    \ - 1;\n    if ($operatorLength > $operandLength) {\n        echo \"Too many operands.\
    \ \";\n        echo \"Too many operators. \";\n        echo \"No result.\";\n\
    \        exit;\n    }\n    $result = $operand[$operandLength];\n    for ($i =\
    \ $operandLength; $i >= 0; $i--) {\n        if ($operator == \"-\") {\n      \
    \      $result = $operand[$i - 1] - $result;\n        } else if ($operator ==\
    \ \"+\") {\n            $result = $operand[$i - 1] + $result;\n        } else\
    \ if ($operator == \"*\") {\n            $result = $operand[$i - 1] * $result;\n\
    \        } else if ($operator == \"/\") {\n            $result = $operand[$i -\
    \ 1] / $result;\n        } else if ($operator == \"**\") {\n            $result\
    \ = pow($operand[$i - 1], (int)$result);\n        } else {\n            echo \"\
    No operator. \";\n            echo \"No operand. \";\n            echo \"No result.\"\
    ;\n            exit;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: No operator. No operand. No result.
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  echo \"<pre>\";\n  print_r($operator);\n  print_r($operand);\n\
    \  echo \"</pre>\";\n}\ndo_algebra($operator, $operand);\n</code>\nThis code does\
    \ not handle errors and special cases such as integer division, but this should\
    \ be sufficient for your purpose.\n<|/ a dscore=0 tags=php,algorithm,arrays,math\
    \ |>\n<| c |>\nHey thanks for your comment. Maybe I didn't explain myself properly.\
    \ I need the code to be in PHP, it's for a web app and will be run on a mobile\
    \ device. The code you posted uses Javascript. How would I be able to use that\
    \ code on a website?\n<|/ c |>\n<| c |>\nAh, I didn't realize that the question\
    \ was tagged with PHP. I've updated my answer to include some PHP code. Sorry\
    \ for the confusion.\n<|/ c |>\n<| c |>\nNo problem. Thanks for your help. I'm\
    \ going to see if I can modify this to work on the web. I just need to figure\
    \ out how to get it on the web first. Thanks again!\n<|/ c |>\n<| a tags=php,algorithm,arrays,math\
    \ |>\nThis problem is actually quite similar to binary numbers and can be solved\
    \ recursively. \n\nWrite a function that takes a binary number as a string and\
    \ returns the number in base-2 format. For example, 4 in base-2 would be \"0100\"\
    . \nWrite a function that takes an integer in base-2 format and returns the number\
    \ in base-10 format.\nWrite a function that takes a string in base-10 format and\
    \ returns the number in base-2 format.\nWrite a function that takes a number in\
    \ base-2 format and returns the number in base-10 format.\n\nThen just implement\
    \ the appropriate functions for each base and you're done.\n<|/ a dscore=0 |>\n\
    <| c |>\nHey thanks for your reply. Maybe I didn't explain myself properly. I\
    \ need the code to be in PHP, it's for a web app and will be run on a mobile device.\
    \ The code you posted uses Javascript. How would I be able to use that code on\
    \ a website?\n<|/ c |>\n<| c |>\nYou'll need a PHP framework like CodeIgniter\
    \ (http://ellislab.com/codeigniter/) to get the code to run on the web.  You'll\
    \ probably want to implement a JavaScript version of this function, so when the\
    \ user does something in JS the number will get evaluated.\n<|/ c |>\n<| a tags=php,algorithm,arrays,math\
    \ |>\nIt will probably be quicker to do it in C. Here's an example of one way\
    \ to do it using a stack to keep track of the operations.\n<code>\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjrdbhxxo.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tfor ($i = 0; $i < count($operator); $i++) {\n\t\t$result = $operand[$i];\n\
    \t\tfor ($j = count($operator)-1; $j >= 0; $j--) {\n\t\t\t$op = $operator[$j];\n\
    \t\t\tif ($op == '+') { $result += $operand[$j+1]; }\n\t\t\telse if ($op == '-')\
    \ { $result -= $operand[$j+1]; }\n\t\t\telse if ($op == '*') { $result *= $operand[$j+1];\
    \ }\n\t\t\telse if ($op == '/') { $result /= $operand[$j+1]; }\n\t\t\telse if\
    \ ($op == '**') { $result **= $operand[$j+1]; }\n\t\t}\n\t\treturn $result;\n\t\
    }\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbasixgbo.php:40\n\
    Stack trace:\n#0 /tmp/tmpbasixgbo.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbasixgbo.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // your code goes here\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4g_ee0x3.php:29\n\
    Stack trace:\n#0 /tmp/tmp4g_ee0x3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4g_ee0x3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tif (count($operand) < 2) {\n\t\techo \"Error: Operand list must\
    \ have at least two operands.\\n\";\n\t\texit(0);\n\t}\n\n\t// Store the operators\
    \ in a map data structure.\n\t$ops = array(\n\t\t'+'\t=> '+',\n\t\t'-'\t=> '-',\n\
    \t\t'*'\t=> '*',\n\t\t'/'\t=> '/',\n\t\t'//'\t=> '/'\n\t);\n\n\t// Loop through\
    \ the operands\n\tforeach ($operand as $i => $v) {\n\t\tif ($v < 0) {\n\t\t\t\
    echo \"Error: Operand list must contain only non-negative integers.\\n\";\n\t\t\
    \texit(0);\n\t\t}\n\t}\n\n\t// Convert the operators into strings and store them\
    \ in a map data structure.\n\t$ops_str = array();\n\tforeach ($ops as $k => $v)\
    \ {\n\t\t$ops_str[] = $k;\n\t}\n\n\t// Convert the operand into strings and store\
    \ them in a map data structure.\n\t$ops_str = array();\n\tforeach ($ops as $k\
    \ => $v) {\n\t\t$ops_str[] = $k;\n\t}\n\n\t// Store the operators as strings in\
    \ the map data structure.\n\t$ops_str = array_unique($ops_str);\n\t$ops = array();\n\
    \n\t// Loop through the operators\n\tforeach ($ops_str as $k => $v) {\n\t\t$ops[$v]\
    \ = $k;\n\t}\n\n\t// Store the operators in the map data structure.\n\t$ops =\
    \ array_unique($ops);\n\n\t// Create a variable to hold the result\n\t$result\
    \ = 0;\n\tforeach ($operand as $i => $v) {\n\t\tif ($v != 0) {\n\t\t\t$result\
    \ = $result . eval($ops[$operator]) . $v;\n\t\t}\n\t}\n\n\t// Return the evaluated\
    \ value of the algebraic expression.\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: Illegal offset type in /tmp/tmpycyn0dg3.php on line 71\n\nWarning:\
    \ Illegal offset type in /tmp/tmpycyn0dg3.php on line 71\n\nWarning: Illegal offset\
    \ type in /tmp/tmpycyn0dg3.php on line 71\n\nWarning: Illegal offset type in /tmp/tmpycyn0dg3.php\
    \ on line 71\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycyn0dg3.php:84\n\
    Stack trace:\n#0 /tmp/tmpycyn0dg3.php(89): test()\n#1 {main}\n  thrown in /tmp/tmpycyn0dg3.php\
    \ on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operation = $operator[0];\n    $left_operand = $operand[0];\n\
    \    $right_operand = $operand[1];\n\n    if ($operation == '+') {\n        return\
    \ $left_operand + $right_operand;\n    } elseif ($operation == '-') {\n      \
    \  return $left_operand - $right_operand;\n    } elseif ($operation == '*') {\n\
    \        return $left_operand * $right_operand;\n    } elseif ($operation == '/')\
    \ {\n        return $left_operand / $right_operand;\n    } elseif ($operation\
    \ == '^') {\n        return $left_operand ** $right_operand;\n    } elseif ($operation\
    \ == '**') {\n        return pow($left_operand, $right_operand);\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74zuzews.php:44\n\
    Stack trace:\n#0 /tmp/tmp74zuzews.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp74zuzews.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Make sure there are enough operands.\n    $operator_count\
    \ = count($operator);\n    $operand_count = count($operand) - 1;\n    if ($operator_count\
    \ < $operand_count) {\n        // Not enough operands.\n        return false;\n\
    \    }\n\n    // Add the operands.\n    $result = $operand[0] + $operand[1];\n\
    \    // Add the remaining operands.\n    for ($i = 2; $i < count($operand); $i++)\
    \ {\n        $result = $result * $operand[$i];\n    }\n    // Return the result.\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7twmden.php:43\n\
    Stack trace:\n#0 /tmp/tmpe7twmden.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpe7twmden.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if (count($operator) == 0 || count($operand) == 0) return 0;\n\
    \    // Use a stack to store the current operation\n    $stack = [];\n    foreach\
    \ ($operator as $op) {\n        // Push all the operands onto the stack\n    \
    \    foreach ($operand as $i) {\n            array_push($stack, $op);\n      \
    \      array_push($stack, $i);\n        }\n    }\n    // Do the first operation\n\
    \    while (count($stack) > 0) {\n        $op = array_pop($stack);\n        $a\
    \ = array_pop($stack);\n        if ($op == '+') $result = $a + $a;\n        elseif\
    \ ($op == '-') $result = $a - $a;\n        elseif ($op == '*') $result = $a *\
    \ $a;\n        elseif ($op == '/') $result = $a / $a;\n        elseif ($op ==\
    \ '**') $result = pow($a, $a);\n        array_push($stack, $result);\n    }\n\
    \    // Return the last element on the stack\n    return array_pop($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // The last operator is going to be the operator (like +).\n\
    \    $lastOperator = $operator[count($operator) - 1];\n\n    // Start with two\
    \ operands.\n    $firstOperand = $operand[0];\n    $secondOperand = $operand[1];\n\
    \n    // The two operand values are the values of the two operands.\n    $firstOperandValue\
    \ = array_shift($operand);\n    $secondOperandValue = array_shift($operand);\n\
    \n    // Do all the basic algebraic operations.\n    switch ($lastOperator) {\n\
    \        // Addition ( + ).\n        case '+':\n            $result = $firstOperandValue\
    \ + $secondOperandValue;\n            break;\n        // Subtraction ( - ).\n\
    \        case '-':\n            $result = $firstOperandValue - $secondOperandValue;\n\
    \            break;\n        // Multiplication ( * ).\n        case '*':\n   \
    \         $result = $firstOperandValue * $secondOperandValue;\n            break;\n\
    \        // Floor division ( // ).\n        case '//':\n            $result =\
    \ $firstOperandValue / $secondOperandValue;\n            break;\n        // Exponentiation\
    \ ( ** ).\n        case '**':\n            $result = pow($firstOperandValue, $secondOperandValue);\n\
    \            break;\n    }\n\n    // Return the result.\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zy6ybde.php:64\n\
    Stack trace:\n#0 /tmp/tmp6zy6ybde.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp6zy6ybde.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Initializing variables\n  $result_string = '';\n  $result\
    \ = $operand[0];\n  $operator_string = $operator;\n  $operator_symbol = array_shift($operator);\n\
    \  \n  // Evaluation loop\n  // Iterate through each operand and perform the appropriate\
    \ algebraic operation.\n  foreach($operand as $number) {\n    switch($operator_symbol)\
    \ {\n      case '+':\n        $result += $number;\n        $result_string .= '+';\n\
    \      break;\n      case '-':\n        $result -= $number;\n        $result_string\
    \ .= '-';\n      break;\n      case '*':\n        $result *= $number;\n      \
    \  $result_string .= '*';\n      break;\n      case '/':\n        if($number ===\
    \ 0) {\n          die(\"Division by zero error\");\n        }\n        $result\
    \ = $number / $result;\n        $result_string .= '/';\n      break;\n      case\
    \ '^':\n        $result *= $number;\n        $result_string .= '^';\n      break;\n\
    \      default:\n        die(\"Unrecognized algebraic operation symbol\");\n \
    \   }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: Unrecognized algebraic operation symbol
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    array_walk($operand, function (&$value) {\n        $value =\
    \ intval($value);\n    });\n    $operand = array_slice($operand, 0, -1);\n   \
    \ array_walk($operator, function (&$value) {\n        $value = str_replace(['*',\
    \ '+', '/', '//'], ['*', '+', '/', '//'], $value);\n    });\n    $operator = array_slice($operator,\
    \ 0, -1);\n    array_walk($operand, function (&$value) {\n        $value = intval($value);\n\
    \    });\n    $operand = array_slice($operand, 0, -1);\n    array_walk($operator,\
    \ function (&$value) {\n        $value = intval($value);\n    });\n    $operator\
    \ = array_slice($operator, 0, -1);\n    $operator = array_map(function($value)\
    \ {\n        return $value[0];\n    }, $operator);\n    $operand = array_map(function($value)\
    \ {\n        return $value[0];\n    }, $operand);\n    $result = 0;\n    foreach\
    \ ($operand as $key => $operandValue) {\n        $result = $result + ($key * $operandValue);\n\
    \    }\n    $operator = array_map(function($value) {\n        return $value[0];\n\
    \    }, $operator);\n    foreach ($operator as $key => $operatorValue) {\n   \
    \     $result = $result + ($key ** $operand[$key]);\n    }\n    return $result;\n\
    }\n$a = array('+', 2, 3, 4, 5);\nprint_r(do_algebra($a, $a));\n</code>\n<|/ a\
    \ |>\n<| c |>\n`eval('2+3+4*5-6');` results in `eval('2+3+4*5-6');` which doesn't\
    \ evaluate to `10`.\n<|/ c |>\n<| c |>\nThe function do_algebra works like a charm\
    \ with eval('2+3+4*5-6'); in php version 5.5.9-1ubuntu4.1. In php version 5.5.15-0+deb8u1\
    \ eval('2+3+4*5-6') results in 2.\n<|/ c |>\n<| c |>\nIn PHP Version 5.5.15-0+deb8u1\
    \ eval('2+3+4*5-6') results in 10. Why do you think that eval('2+3+4*5-6') is\
    \ not working?\n<|/ c |>\n<| a dscore=0 |>\nHere is a solution using recursion.\n\
    <code>\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzsdhze0i.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // initialize result to 0\n  $result = 0;\n\n  // loop through\
    \ operands\n  foreach ($operand as $i => $value) \n    // initialize product to\
    \ 1\n    $product = 1;\n\n    // loop through operators\n    for ($j = 0; $j <\
    \ count($operator); $j++) {\n      // initialize sum value to 0\n      $sum =\
    \ 0;\n      // loop through operands\n      foreach ($operand as $k => $value)\
    \ \n        // perform the operation\n        $sum += $value * $product;\n   \
    \     // update product by operator\n        $product = $operator[$j] * $product;\n\
    \    }\n    // save result to result variable\n    $result = $sum;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl8ellhlq.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $temp1 = $operand[0];\n    $temp2 = $operand[1];\n    // Build\
    \ an initial string from the first operand using the first operand's operator\n\
    \    $expression1 = $temp1 . array_shift($operator);\n    // Build an initial\
    \ string from the second operand using the second operand's operator\n    $expression2\
    \ = $temp2 . array_shift($operator);\n    // The initial string will contain the\
    \ first operand's operator followed by the second operand's operator\n    // followed\
    \ by an equal sign and the first operand's value.\n    $final = $expression1 .\
    \ array_shift($operator) . \" \" . $expression2 . array_shift($operator) . \"\
    \ =\" . $temp1;\n    // The while loop will continue until, the expression2 has\
    \ a value or until it runs out of operators.\n    while (!empty($operand)) {\n\
    \        // Get the value of the expression one minus the value of the expression\
    \ two\n        $temp = array_pop($operand);\n        $expression1 .= array_shift($operator)\
    \ . \" \" . $expression2;\n        $expression2 .= array_shift($operator) . \"\
    \ \" . $temp;\n        // Build an expression with one operator and one operand\n\
    \        $final .= $expression1 . array_shift($operator) . \" \" . $expression2\
    \ . array_shift($operator) . \" =\" . $temp;\n    }\n    return $final;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2m942lkz.php:46\n\
    Stack trace:\n#0 /tmp/tmp2m942lkz.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2m942lkz.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operators = $operator;\n    $operands = $operand;\n    \n\
    \    // The length of the operator array is equal to the length of the operand\
    \ array minus one.\n    // So the number of operators = operand length - 1.\n\
    \    $len = count($operands) - 1; \n    \n    // Iterate over the operators array,\
    \ and for each operand, compute the value of the expression.\n    // For example,\
    \ in the expression 2+3*4, we will compute the value 9 \n    // by executing the\
    \ following algorithm:\n    // Starting from the leftmost operand, the operand\
    \ will first be multiplied by 2.\n    // Then, that result is added to the result\
    \ of the next operation.\n    // The next operand is multiplied by 3. Finally,\
    \ that result is added to the result of the next operation.\n    // The last operand\
    \ (the 4) is added after the last operand (the 2).\n    // At this point we have\
    \ the full expression as 2 + 9 + 3 * 4 + 4\n    // We can compute this result\
    \ recursively by calling the function do_algebra recursively for all the remaining\
    \ operators.\n    $res = 0;\n    for ($i = 0; $i < $len; $i++) {\n        $op1\
    \ = $operands[$i];\n        $op2 = $operands[$i + 1];\n        $res = $operators[$i]\
    \ . \"($op1) \" . do_algebra($operators, array($op2));\n    }\n    \n    // Return\
    \ the value of the expression.\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsg4fivi_.php:53\n\
    Stack trace:\n#0 /tmp/tmpsg4fivi_.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpsg4fivi_.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Step 1: Calculate the basic algebra expression\n  // Example:\
    \ 3 + 4\n  // Result: 9\n  $expression = '0';\n  foreach ($operator as $key =>\
    \ $value) {\n    // Example: 3 * 4\n    // result: 24\n    $expression = ' '.$expression.'\
    \ '.$value.' ';\n  }\n  $expression = substr($expression, 0, -2);\n  \n  // Step\
    \ 2: Evaluate the basic algebra expression\n  // Example: 9\n  // Result: 9\n\
    \  foreach ($operand as $value) {\n    // Example: 3 + 4\n    // result: 9\n \
    \   $expression = ' '.$expression.' '.$value.' ';\n  }\n  \n  return $expression;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvl39idu9.php:49\n\
    Stack trace:\n#0 /tmp/tmpvl39idu9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvl39idu9.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
