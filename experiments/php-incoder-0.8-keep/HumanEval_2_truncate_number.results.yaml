name: HumanEval_2_truncate_number
language: php
results:
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $number = (int) $number;\n    $decimals = (int) ($number % 1);\n    return $number\
    \ - $decimals;\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dhkthe8.php:18\n\
    Stack trace:\n#0 /tmp/tmp6dhkthe8.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6dhkthe8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ round($number, 1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedkdbevg.php:17\n\
    Stack trace:\n#0 /tmp/tmpedkdbevg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpedkdbevg.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $integer = floor($number);\n    $decimal = strlen($number) - strlen($integer)\
    \ - 1;\n    return $number - $integer;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  global\
    \ $decimals;\n  assert(is_numeric($number));\n  assert($number >= 0);\n  if ($number\
    \ <= 1) {\n    return $number;\n  }\n  $sign = 1;\n  if ($number < 0) {\n    $sign\
    \ = -1;\n    $number = -$number;\n  }\n  $left = $number;\n  for ($i = 0; $i <\
    \ strlen($number); $i++) {\n    $digit = $number{$i};\n    if ($digit > 1) {\n\
    \      break;\n    }\n    if ($decimals && $i >= $decimals - 1) {\n      break;\n\
    \    }\n    $left *= 10;\n    $left -= $digit;\n  }\n  $decimals = 0;\n  while\
    \ (floor($left) !== $left) {\n    $decimals++;\n    $left *= 10;\n  }\n  return\
    \ $sign * $left / pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5mvwet65.php:45\n\
    Stack trace:\n#0 /tmp/tmp5mvwet65.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp5mvwet65.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * (10 ** floor(log10($number)))) / 10 ** floor(log10($number));\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6maiv9a.php:17\n\
    Stack trace:\n#0 /tmp/tmpy6maiv9a.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpy6maiv9a.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', (string)$number);\n    return intval($number)\
    \ - intval($decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9uu2aj5m.php:18\n\
    Stack trace:\n#0 /tmp/tmp9uu2aj5m.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp9uu2aj5m.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number < 1) { return 1; }\n  return floor($number);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptvu9i4f2.php:18\n\
    Stack trace:\n#0 /tmp/tmptvu9i4f2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptvu9i4f2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\n/**\n * Convert degrees to radians.\n *\n\
    \ * @param int $degrees\n *   Degrees to convert.\n *\n * @return float\n *  \
    \ Converted radians.\n */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7unisaq.php:26\n\
    Stack trace:\n#0 /tmp/tmps7unisaq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps7unisaq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ rtrim(preg_replace('/\\.[0-9]+/', '', $number), '0');\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ftbl6w7.php:17\n\
    Stack trace:\n#0 /tmp/tmp4ftbl6w7.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4ftbl6w7.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\n  // If number\
    \ has no fractional part, then return number.\n  if (!$number || $number == intval($number))\
    \ return intval($number);\n  // http://dev.mysql.com/doc/refman/5.1/en/precision-math-decimal-changes.html\n\
    \  // If number has decimals, then truncate decimals.\n  if ($number >= 1.000000000000001)\
    \ {\n    return floor($number);\n  }\n  // Truncate integer part.\n  $integerPart\
    \ = intval($number);\n  // Get decimal part and remove from integer part.\n  $decimalPart\
    \ = substr($number, strpos($number, '.') + 1);\n  // Return truncated decimal.\n\
    \  return $integerPart ? $decimalPart : '';\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_7kj8hn.php:30\n\
    Stack trace:\n#0 /tmp/tmp6_7kj8hn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6_7kj8hn.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer_part = 0;\n\n    if (floor($number) == $number)\
    \ {\n        $integer_part = floor($number);\n    }\n    elseif ($number < 1)\
    \ {\n        $integer_part = 0;\n    }\n    elseif ($number < $integer_part) {\n\
    \        $decimals = 0;\n    }\n\n    return round($number - $integer_part + $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp039hjfqn.php:30\n\
    Stack trace:\n#0 /tmp/tmp039hjfqn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp039hjfqn.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $number\
    \ = number_format($number);\n  return substr($number, strrpos($number, '.') +\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppq33bdl_.php:18\n\
    Stack trace:\n#0 /tmp/tmppq33bdl_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmppq33bdl_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if (!is_numeric($number)) {\n        throw new Exception('Truncate_number: input\
    \ is not a number.');\n    }\n\n    if ($number == 0.0) {\n        return 0.0;\n\
    \    }\n\n    if ($number >= 1.0) {\n        return $number;\n    }\n\n    if\
    \ ($number >= 0) {\n        return floor($number);\n    }\n\n    return ceil($number);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5hylkf2.php:33\n\
    Stack trace:\n#0 /tmp/tmpb5hylkf2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpb5hylkf2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ If the number is negative, return it immediately.\n  if ($number < 0) {\n  \
    \  return -$number;\n  }\n\n  // Convert decimal part to an integer.\n  $int =\
    \ round($number);\n\n  // Keep the decimal part as a string and get the integer\
    \ part.\n  $decimal = str_pad(abs($number), 14, '0', STR_PAD_LEFT);\n  $int =\
    \ intval($decimal);\n\n  // Return number if there are no decimals.\n  if (!strlen($decimal))\
    \ {\n    return $int;\n  }\n\n  // Divide by 10 to get rid of the decimal.\n \
    \ return $int / 10;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zlv829j.php:35\n\
    Stack trace:\n#0 /tmp/tmp2zlv829j.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2zlv829j.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number === 0) {\n    return 0;\n  }\n  $decimals = substr($number, strpos($number,\
    \ '.') + 1);\n  $multiplier = pow(10, strlen($decimals));\n  return (floor($number\
    \ * $multiplier) + $multiplier * $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq69n2ab4.php:22\n\
    Stack trace:\n#0 /tmp/tmpq69n2ab4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpq69n2ab4.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $result = '';\n    if ($number > 0) {\n        $number = floor($number);\n \
    \       $remainder = $number - intval($number);\n        if ($remainder > 0.5)\
    \ {\n            $result = $remainder . '.0';\n        } elseif ($remainder >\
    \ 0.25) {\n            $result = $remainder . '.5';\n        } else {\n      \
    \      $result = '1';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotu16sfq.php:29\n\
    Stack trace:\n#0 /tmp/tmpotu16sfq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpotu16sfq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$fraction\
    \ = $number - intval($number);\n\treturn $fraction / 10 ** strlen($this->decimal_places);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmp712bgafw.php:10\nStack trace:\n#0 /tmp/tmp712bgafw.php(14): truncate_number(3.5)\n\
    #1 /tmp/tmp712bgafw.php(18): candidate(3.5)\n#2 /tmp/tmp712bgafw.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmp712bgafw.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number > 1) {\n    return floor($number);\n  }\n  return $number;\n}\n\n/**\n\
    \ * Converts given number to percent and returns string with percent symbol.\n\
    \ * If number is not supplied, returns empty string.\n * If number is negative,\
    \ returns empty string.\n * >>> number_to_percent(1.5)\n * '50%'\n * >>> number_to_percent(2.5)\n\
    \ * '66%'\n * >>> number_to_percent(-1.5)\n * ''\n * >>> number_to_percent(0)\n\
    \ * ''\n * >>> number_to_percent(50)\n * '50%'\n * >>> number_to_percent(50)\n\
    \ * '50%'\n */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8tf3fpy.php:37\n\
    Stack trace:\n#0 /tmp/tmpn8tf3fpy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpn8tf3fpy.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = '';\n  while (false !== ($parts = preg_split('/(?<!\\.)\\.(?!$)/', $number)))\
    \ {\n    if (count($parts) > 1) {\n      $decimals .= $parts[1];\n    }\n    $number\
    \ = $parts[0];\n  }\n  return $number . $decimals;\n}\n\n/**\n * Provides access\
    \ to the current user preferences.\n */\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $negative = $number < 0;\n    $number = abs($number);\n    if ($number > 1)\
    \ {\n        $decimal_precision = log($number) / log(10);\n        $number = pow(10,\
    \ $decimal_precision);\n        return sprintf('%.0f', $number);\n    }\n    if\
    \ ($number == 1) {\n        return ($negative ? '-' : '') . '1';\n    }\n    if\
    \ ($negative && $number != 0) {\n        return ($negative ? '-' : '') . '0';\n\
    \    }\n    return '';\n}\n\n/**\n * Return the current time formatted in the\
    \ given format (defaults to 'YYYY-MM-DD HH:MM:SS')\n * @param string $format (optional)\
    \ A date format (defaults to 'YYYY-MM-DD HH:MM:SS')\n * @return string\n */\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9r_mh4eb.php:35\n\
    Stack trace:\n#0 /tmp/tmp9r_mh4eb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9r_mh4eb.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ $number < 1 || $number > 0 ? $number : floor(abs($number));\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_3z2nl4.php:17\n\
    Stack trace:\n#0 /tmp/tmpx_3z2nl4.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpx_3z2nl4.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return floor($number * 10) / 10;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7xjv9qs.php:17\n\
    Stack trace:\n#0 /tmp/tmps7xjv9qs.php(22): test()\n#1 {main}\n  thrown in /tmp/tmps7xjv9qs.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 0) {\n        $number += 1;\n    }\n    if ($number <= 1) {\n\
    \        return $number;\n    }\n    return round($number);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvx841xtz.php:23\n\
    Stack trace:\n#0 /tmp/tmpvx841xtz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvx841xtz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $number_string = (string)$number;\n    // Remove all non-numeric characters\n\
    \    $number_string = preg_replace(\"/[^0-9\\.\\-]/\", \"\", $number_string);\n\
    \    // Remove all leading zeros\n    $number_string = preg_replace(\"/[\\d.]/\"\
    , \"\", $number_string);\n    // If the first character is a dot, take everything\
    \ before it\n    $number_string = preg_replace(\"/^\\./\", \"\", $number_string);\n\
    \    // Remove all characters after the first dot\n    $number_string = preg_replace(\"\
    /\\.[^.\\d]+/\", \"\", $number_string);\n    // Remove any dot after the last\
    \ character\n    $number_string = preg_replace(\"/\\.$/\", \"\", $number_string);\n\
    \    // Remove all characters after the first character\n    $number_string =\
    \ preg_replace(\"/\\..*$/\", \"\", $number_string);\n    // Return the converted\
    \ decimal part\n    return (float)$number_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0w3k2kwy.php:31\n\
    Stack trace:\n#0 /tmp/tmp0w3k2kwy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0w3k2kwy.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ // If the number is smaller than 1.00 x 10^-16 (= 0.5 * 10^-16) then just\n\
    \    // return the number as is.\n    $number = abs($number);\n    if ($number\
    \ < 1.00016) {\n        return $number;\n    }\n    $whole = floor($number);\n\
    \    $decimal = round($number - $whole);\n    return $whole + $decimal;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\nYou can't have negative integers. Just convert your\
    \ string into float and it will work:\n<code>\n$value = \"-100\";\n$value = floatval($value);\n\
    \nvar_dump($value);\n</code>\nOutput:\n<code>\nfloat -100\n</code>\n<|/ a tags=php\
    \ |>\n<| a dscore=2 |>\nThis answer may help someone like me who just want to\
    \ check whether a particular string is numeric or not and is not empty...\n<code>\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr4k9hflr.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $precision = strlen((string) $number) - strrpos((string) $number, '.');\n  \
    \  $precision = $precision < 0 ? 0 : $precision;\n    $decimals = strlen((string)\
    \ $number) - $precision;\n    return round($number / pow(10, $precision), $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6fo_dkd.php:20\n\
    Stack trace:\n#0 /tmp/tmpq6fo_dkd.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpq6fo_dkd.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$fractional\
    \ = (int)((float)$number - floor(float$number));\n\treturn ($fractional > 0)\n\
    \t\t? $fractional\n\t\t: (abs($fractional) - 1);\n}\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsum9ri_5.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  return intval($parts[0]) / intval(100000000);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=2 |>\nMy Solution using Math class.\n<code>\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt_5zwdph.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal = substr($number, -1);\n    $integer = floor($number);\n    return\
    \ $integer + ($decimal == \".\" ? 0 : $decimal);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgh6bdwrj.php:19\n\
    Stack trace:\n#0 /tmp/tmpgh6bdwrj.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgh6bdwrj.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 0) {\n        return -truncate_number(-$number);\n    }\n\n  \
    \  $result = $number % 1;\n    return ($number < 1 && $result > 0) ? '.' : ($result\
    \ < 1 ? 0 : $result);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplgipvinr.php:22\n\
    Stack trace:\n#0 /tmp/tmplgipvinr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplgipvinr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  if (count($parts) > 2) {\n    return $parts[1];\n\
    \  }\n  return $parts[0];\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp390b592d.php:20\n\
    Stack trace:\n#0 /tmp/tmp390b592d.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp390b592d.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number > 1) {\n        return $number - intval($number);\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = ($number % 1);\n  $number = floor($number);\n  if ($number > 1) {\n    $decimals\
    \ -= intval(pow(10, (strlen($decimals) - 1)))\n  }\n  return $number;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph_0a1rsz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$integerPart\
    \ = 0;\n\t$decimalPart = 0;\n\t// If the number is smaller than 1, just set the\
    \ integer part.\n\tif ($number < 1) {\n\t\treturn $integerPart;\n\t}\n\n\t// If\
    \ the number is less than 0.5, set integer and decimal part to\n\t// 0.\n\tif\
    \ ($number < 0.5) {\n\t\t$integerPart = 0;\n\t\t$decimalPart = $number;\n\t}\n\
    \t// If the number is between 0.5 and 1, set decimal part to 1.\n\telse if ($number\
    \ < 1) {\n\t\t$decimalPart = $number;\n\t}\n\t// Set integer part to integer part\
    \ of number times 10 (big integer power)\n\t// and decimal part to the remainder.\n\
    \telse {\n\t\t$integerPart = floor($number * 10);\n\t\t$decimalPart = $number\
    \ - $integerPart * 10;\n\t}\n\t// Return integer part and decimal part.\n\treturn\
    \ array($integerPart, $decimalPart);\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ml3ckjb.php:41\n\
    Stack trace:\n#0 /tmp/tmp2ml3ckjb.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp2ml3ckjb.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ (int)$number - (int)$number % 1;\n}\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi864399y.php:16\n\
    Stack trace:\n#0 /tmp/tmpi864399y.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpi864399y.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number <= 1) {\n    return $number;\n  }\n  $precision = strlen((string)$number)\
    \ - strrpos((string)$number, '.');\n  if ($precision < 1) {\n    return $number;\n\
    \  }\n  $decimal_places = $precision - strrpos('9' * (int)$number, '.');\n  return\
    \ round($number / pow(10, $decimal_places), $decimal_places);\n}\n</code>\n<|/\
    \ a tags=php,math |>\n<| a dscore=0 |>\nThe code below is designed to round the\
    \ decimal up to 2 decimal places:\n<code>\n$amount=number_format((float)$amount,\
    \ 2, '.', '');\n</code>\n<|/ a tags=php,math |>\n<| c |>\nI doubt this works reliably,\
    \ because number_format does not work with floats, it works with strings. And\
    \ number_format converts decimals to strings by default so they get lost.\n<|/\
    \ c |>\n<| c |>\nIt would not work if the amount has more than one decimal place\
    \ or is negative.\n<|/ c |>\n<| a dscore=0 |>\nTry this\n<code>\n<?php\n$amount\
    \ = 12.999;\n$amount=number_format((float)$amount,2);\necho $amount;\n</code>\n\
    OUTPUT : 12.99\n<|/ a tags=php,math |>\n<| a tags=php,math dscore=0 |>\nThis should\
    \ work:\n<code>\n<?php\n$number = 12.999;\necho round($number,2);\n</code>\n<|/\
    \ a |>\n<| a tags=php,math dscore=0 |>\nThe other answers didn't work for me.\
    \ \nThe one below did:\n<code>\n$price=7.5;\n$amount=number_format((float)$price,2);\n\
    echo $amount;\n</code>\n<|/ a |>\n<| a tags=php,math |>\nThis one worked for me\n\
    <code>\n<?php\n$price = 12.999;\n$amount=number_format((float)$price,2);\necho\
    \ $amount;\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr89hdf6a.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1.0) {\n        $decimal = $number - floor($number);\n       \
    \ return $decimal;\n    }\n\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqd0icwsq.php:22\n\
    Stack trace:\n#0 /tmp/tmpqd0icwsq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqd0icwsq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$remainder\
    \ = fmod($number, 1);\n\tif ($remainder === 0) {\n\t\treturn $number;\n\t}\n\t\
    return $number - $remainder;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1fsrbw_.php:21\n\
    Stack trace:\n#0 /tmp/tmpn1fsrbw_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn1fsrbw_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number == 0) {\n        return 0;\n    }\n\n    $exp = log($number, 10);\n\
    \n    return floor($number * pow(10, -$exp)) / pow(10, -$exp);\n}\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttm3wgw0.php:22\n\
    Stack trace:\n#0 /tmp/tmpttm3wgw0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpttm3wgw0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number >= 1) {\n    return floor($number);\n  }\n  return $number - intval($number);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpas86uwpo.php:20\n\
    Stack trace:\n#0 /tmp/tmpas86uwpo.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpas86uwpo.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n\n    $result = '';\n    $i =\
    \ 0;\n    $last_decimals = 0;\n\n    while (1) {\n        $decimals = strlen($number)\
    \ - $last_decimals;\n        if ($decimals > 0) {\n            $result += substr($number,\
    \ $i++, 1);\n            $last_decimals = $decimals;\n        }\n\n        $last_decimals\
    \ = strlen($number) - $last_decimals;\n        if ($last_decimals <= 0) {\n  \
    \          break;\n        }\n\n        $result += '.';\n    }\n\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpluyo2fxv.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpluyo2fxv.php:40\n\
    Stack trace:\n#0 /tmp/tmpluyo2fxv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpluyo2fxv.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $sign = is_negative($number) ? -1 : 1;\n    $digits_after_decimal_point = \\\
    strlen((string) $number) - \\strpos($number, '.');\n    $decimals = $digits_after_decimal_point\
    \ - 1;\n    return $sign * ($number - \\floor($number)) * pow(10, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_negative()\
    \ in /tmp/tmpyvdp7jcu.php:9\nStack trace:\n#0 /tmp/tmpyvdp7jcu.php(16): truncate_number(3.5)\n\
    #1 /tmp/tmpyvdp7jcu.php(20): candidate(3.5)\n#2 /tmp/tmpyvdp7jcu.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyvdp7jcu.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number);\n}\n\n/**\n * Takes a float or string like 3.14159265358979323846\
    \ and returns an integer like 10905323\n *\n * @param string $number\n * @return\
    \ int\n */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsv1bqhry.php:23\n\
    Stack trace:\n#0 /tmp/tmpsv1bqhry.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpsv1bqhry.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $int_part = (int) $number;\n    $decimals = ($number - $int_part);\n    if ($decimals\
    \ > 0) {\n        return $int_part + $decimals;\n    } else {\n        return\
    \ $int_part;\n    }\n}\n\n/**\n * Format a float or integer as a percentage (1\
    \ digit, rounded down to 2 digits)\n *\n * @param int $number The number to format\n\
    \ * @param int $precision The precision of the percentage.\n *\n * @return string\
    \ the formatted number\n */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2kqik7b.php:31\n\
    Stack trace:\n#0 /tmp/tmpd2kqik7b.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpd2kqik7b.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $integer\
    \ = intval($number);\n  return $integer > $number ? $integer - intval(abs($number))\
    \ : 0;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks John, I appreciate it.\
    \ I have updated my question to explain why I want this function. I would like\
    \ to be able to apply it to many numbers so I don't have to write out a large\
    \ amount of if statements to do it.\n<|/ c |>\n<| c |>\nIn that case, please see\
    \ my updated answer. You may find it helpful.\n<|/ c |>\n<| c |>\nThanks John,\
    \ this works exactly as I want, but I think the code is pretty messy. I'm going\
    \ to try and work out a simpler way to achieve my goal.\n<|/ c |>\n<| c |>\nYou\
    \ don't have to do all that work actually. All the logic is in one function. You\
    \ can use it to achieve your goal. Just apply it to your inputs. I showed you\
    \ an example of how to use it. Let me know if you need further assistance.\n<|/\
    \ c |>\n<| a tags=rounding,math,php dscore=1 |>\nHere is one possibility. It uses\
    \ three conditional operators to get the different parts of the number. The first\
    \ one checks if the number is positive and the second one if negative. The third\
    \ one checks if the number has decimal part. The first two conditions set the\
    \ parts of the number. From this the variable $truncate is used to determine how\
    \ many digits after the decimal point should be removed. \n<code>\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf1x_yeym.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 0) {\n        return 0.0;\n    }\n    return rtrim(fmod($number,\
    \ 1), '.');\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpui3j3z_i.php:20\n\
    Stack trace:\n#0 /tmp/tmpui3j3z_i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpui3j3z_i.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_match('/\\.\\d/', $number) ? '.' : '';\n  $exponent = substr($number,\
    \ strlen($number) - strlen($decimals));\n  return $exponent >= 0 ? substr($number,\
    \ 0, strlen($number) - strlen($decimals)) : $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yue_1l4.php:19\n\
    Stack trace:\n#0 /tmp/tmp3yue_1l4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3yue_1l4.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ ltrim($number, '0');\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfco3t3bn.php:17\n\
    Stack trace:\n#0 /tmp/tmpfco3t3bn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpfco3t3bn.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $precision\
    \ = strlen(strrchr($number, '.'));\n  return $number / pow(10, $precision);\n\
    }\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqd1g6vc4.php:17\n\
    Stack trace:\n#0 /tmp/tmpqd1g6vc4.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpqd1g6vc4.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $numberString = $number->toStr();\n    $decimalPos = strrpos($numberString,\
    \ '.');\n    if ($decimalPos === false) {\n        return $number->toFloat();\n\
    \    }\n\n    return $number->toFloat()->trunc();\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function toStr() on float\
    \ in /tmp/tmpzk3p0qnn.php:9\nStack trace:\n#0 /tmp/tmpzk3p0qnn.php(19): truncate_number(3.5)\n\
    #1 /tmp/tmpzk3p0qnn.php(23): candidate(3.5)\n#2 /tmp/tmpzk3p0qnn.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzk3p0qnn.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimal_part\
    \ = $number - intval($number);\n  $whole_part_part_1 = $number - intval($number);\n\
    \  $whole_part_part_2 = $whole_part_part_1 % 1;\n  return $decimal_part * pow(10,\
    \ floor(log10($whole_part_part_2)));\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjr0ppl_k.php:20\n\
    Stack trace:\n#0 /tmp/tmpjr0ppl_k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjr0ppl_k.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\treturn\
    \ round($number, 0, PHP_ROUND_HALF_DOWN);\n}\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqx9sknv.php:16\n\
    Stack trace:\n#0 /tmp/tmpaqx9sknv.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpaqx9sknv.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number >= 1) {\n        return $number;\n    }\n\n    return $number -\
    \ intval($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9o4fj1j.php:21\n\
    Stack trace:\n#0 /tmp/tmpp9o4fj1j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpp9o4fj1j.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number < 1) {\n    return 0.0;\n  }\n\n  $integer = floor($number);\n  $decimal\
    \ = substr($number, 0, $integer);\n\n  // If $decimal is 0, we might have a problem.\
    \ Check to be sure.\n  if ($decimal === 0) {\n    return 0.0;\n  }\n\n  return\
    \ $decimal;\n}\n\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppukjjvhv.php:30\n\
    Stack trace:\n#0 /tmp/tmppukjjvhv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppukjjvhv.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number);\n}\n\n/**\n * Get current page number.\n * Override this function\
    \ to get the current page number.\n *\n * @since 1.2.0\n *\n * @return int\n */\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_okmsfj.php:25\n\
    Stack trace:\n#0 /tmp/tmpg_okmsfj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpg_okmsfj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number + 0.5);\n}\n</code>\nThe last step is to apply this function to\
    \ every single number in $number_array. I wrote a very naive recursive version\
    \ which I suspect can be improved significantly, but I'll let you do it.\n<code>\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkeareqv8.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8m3eyhp_.php:17\n\
    Stack trace:\n#0 /tmp/tmp8m3eyhp_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8m3eyhp_.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $precision\
    \ = strlen($number) - strrpos($number, '.');\n  $precision = $precision ? $precision\
    \ : 0;\n  $whole_number = floor($number);\n  $decimals = strlen($whole_number)\
    \ - $precision;\n  $decimals = $decimals < 0 ? 0 : floor($decimals / 10);\n  return\
    \ $whole_number % 10 * $decimals;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpus_1it0z.php:22\n\
    Stack trace:\n#0 /tmp/tmpus_1it0z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpus_1it0z.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen(ltrim($number, '.') . '.');\n    if ($decimals > 4) {\n \
    \       $number = substr($number, 0, -$decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvq12rtgq.php:21\n\
    Stack trace:\n#0 /tmp/tmpvq12rtgq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvq12rtgq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\tif\
    \ (abs($number) < 1) {\n\t\treturn $number;\n\t}\n\tif ($number < 0.5) {\n\t\t\
    return floor($number);\n\t}\n\n\t$decimal_part_length = strlen(ltrim($number,\
    \ '0'));\n\t$integer_part_length = strlen(ltrim($number, '.'));\n\tif ($decimal_part_length\
    \ > $integer_part_length) {\n\t\treturn round($number);\n\t}\n\n\t// Round half\
    \ down if decimal part is longer than integer part\n\treturn floor($number + 0.5\
    \ - 0.5 * pow(10, $decimal_part_length));\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhsuykwx.php:31\n\
    Stack trace:\n#0 /tmp/tmphhsuykwx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphhsuykwx.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ (!is_numeric($number)) {\n    return null;\n  }\n  $remainder = $number;\n \
    \ $digit = intval($remainder);\n  $decimals = abs(intval(round($remainder - $digit,\
    \ 0)));\n  return $digit + $decimals;\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptciasfyg.php:23\n\
    Stack trace:\n#0 /tmp/tmptciasfyg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptciasfyg.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = round(abs($number) - 1);\n    $decimals = $decimals < 0 ? 0 : (int)\
    \ $decimals;\n\n    return $number - $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczqp1llk.php:21\n\
    Stack trace:\n#0 /tmp/tmpczqp1llk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpczqp1llk.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $sign\
    \ = empty($number[0]) ? 0 : ($number[0] < 0 ? '-' : '');\n  $number = abs($number[0]);\n\
    \  if ($number >= 1) {\n    if ($number == 0.1) {\n      return $sign;\n    }\n\
    \    return sprintf('%s0.%01.f', $sign, $number - floor($number / 10) * 10);\n\
    \  }\n  return sprintf('%s0.1', $sign);\n}\n\n/**\n * Helper function used to\
    \ prepare a field name for writing a value.\n *\n * In addition to the standard\
    \ string field name rules, the following special\n * characters are also escaped\
    \ when used in a field name:\n * - ampersand (&)\n * - dollar sign ($)\n * - pound\
    \ sign (#)\n * - percent sign (%)\n * - underscore (_)\n *\n * @param string $field\
    \ the field name.\n * @return string escaped field name.\n */\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdx4334u.php:39\n\
    Stack trace:\n#0 /tmp/tmpkdx4334u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkdx4334u.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimal_part = $parts[1];\n    $int_part\
    \ = $parts[0]; // If there was no decimal part in the number, use the integer\
    \ part.\n    return $int_part;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ydl0dxu.php:20\n\
    Stack trace:\n#0 /tmp/tmp5ydl0dxu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5ydl0dxu.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $integer\
    \ = (int) floor($number);\n  $decimal = ($number - $integer);\n  return $decimal;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ ($number < 0) ? ceil($number) : floor($number);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjahutn4.php:17\n\
    Stack trace:\n#0 /tmp/tmpmjahutn4.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpmjahutn4.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ PHP's floor() function returns a float if the given number does\n  // not fit\
    \ in the defined precision.\n  // We need an int for math.\n  return intval(floor($number));\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxavxg7r.php:20\n\
    Stack trace:\n#0 /tmp/tmpsxavxg7r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsxavxg7r.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $negative = $number < 0;\n    $mantissa = bcmod($number, 1);\n    $decimals\
    \ = bcdiv($number, 1, 10);\n    if ($negative) {\n        $decimals = -bcmod($number,\
    \ 1);\n    }\n    return $decimal < 0 ? $negative : $decimal;\n}\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpdajswuw9.php:10\n\
    Stack trace:\n#0 /tmp/tmpdajswuw9.php(18): truncate_number(3.5)\n#1 /tmp/tmpdajswuw9.php(22):\
    \ candidate(3.5)\n#2 /tmp/tmpdajswuw9.php(27): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpdajswuw9.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/([0-9]*?)(\\.0*)/', '$1', $number);\n  if ($decimals == '0')\
    \ {\n    $decimals = '1';\n  }\n  return round($number, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1078i3kb.php:21\n\
    Stack trace:\n#0 /tmp/tmp1078i3kb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1078i3kb.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval(floor($number * 100000));\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspcssmxn.php:17\n\
    Stack trace:\n#0 /tmp/tmpspcssmxn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpspcssmxn.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$sign\
    \ = is_float($number) ? $number > 0 ? 1 : 0 : (string) $number == '-' ? -1 : 0;\n\
    \t$number = (float) $number;\n\n\t$integer = floor($number);\n\t$decimals = abs($number\
    \ - $integer);\n\treturn $sign * round($decimals, 1);\n}\n\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnk3qglw2.php:23\n\
    Stack trace:\n#0 /tmp/tmpnk3qglw2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnk3qglw2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  return $parts[0] . (round($parts[1]) == 0 ? 0 :\
    \ $parts[1]);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnwk84gu.php:18\n\
    Stack trace:\n#0 /tmp/tmpbnwk84gu.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpbnwk84gu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $number = round(abs($number), 0);\n    $decimal = $number - floor($number);\n\
    \    return $decimal;\n}\n</code>\nIn fact, this function can be used to get the\
    \ number's decimal part.\n<|/ a dscore=1 tags=php,floating-point |>\n<| a |>\n\
    This seems to work:\n<code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp95pbv03.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = ($number - intval($number)) * 100;\n  return intval($number) - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvw46upr.php:18\n\
    Stack trace:\n#0 /tmp/tmppvw46upr.php(23): test()\n#1 {main}\n  thrown in /tmp/tmppvw46upr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ (is_nan($number)) {\n    return $number;\n  }\n\n  // Bail early if number is\
    \ already small.\n  if ($number < 1) {\n    return 1;\n  }\n\n  if ($number ==\
    \ floor($number)) {\n    return floor($number);\n  }\n\n  $decimals = ($number\
    \ - floor($number)) * 100;\n\n  return floor($number) + $decimals;\n}\n</code>\n\
    <|/ a dscore=5 tags=truncate,numbers,php,math |>\n<| c |>\nGreat answer, I implemented\
    \ this with some small modifications so that it only truncates numbers after the\
    \ decimal point if there are more than 3 decimal places.\n<|/ c |>\n<| c |>\n\
    Thanks Kris. If you don't want the decimal point to appear if there are less than\
    \ 3 decimal places, you can change the conditional to `if ($number <= floor($number))\
    \ {`\n<|/ c |>\n<| c |>\nThe PHP code has an error in the conditional.  `if ($number\
    \ < floor($number)) {` should be `if ($number <= floor($number)) {`\n<|/ c |>\n\
    <| c |>\nThis is incorrect if the number is greater than 10000000000.\n<|/ c |>\n\
    <| c |>\nYes this one was wrong. I've fixed it now.\n<|/ c |>\n<| a |>\nThis may\
    \ be useful:\n<code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn5q91gih.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = $number * 10;\n    $integer = floor($number);\n\n    if ($decimals\
    \ > 0 && $integer >= 1) {\n        $decimals -= floor($decimals / 10);\n     \
    \   return $decimals / 10;\n    }\n    return $integer;\n}\n</code>\n<|/ a tags=php,rounding,floating-point,decimal\
    \ |>\n<| a |>\nI agree with John Kugelman, but his solution doesn't work with\
    \ negative numbers:\n<code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkgfvlj4p.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $integerPart\
    \ = (int) $parts[0];\n\n    // If this is not a negative number, and if the integer\
    \ part is positive\n    // than the number is invalid.\n    if ($integerPart <\
    \ 0 && $integerPart > 0) {\n        throw new \\InvalidArgumentException('Invalid\
    \ floating point number: ' . $number);\n    }\n\n    return $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jahyd_8.php:27\n\
    Stack trace:\n#0 /tmp/tmp4jahyd_8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4jahyd_8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ bcdiv($number, '1', 0);\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcdiv() in /tmp/tmpw0tu7i6j.php:9\n\
    Stack trace:\n#0 /tmp/tmpw0tu7i6j.php(12): truncate_number(3.5)\n#1 /tmp/tmpw0tu7i6j.php(16):\
    \ candidate(3.5)\n#2 /tmp/tmpw0tu7i6j.php(21): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpw0tu7i6j.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval(floor($number));\n}\n\n/**\n * Returns true if the given date is a Friday\
    \ (Fri, Sat, Sun).\n *\n * @param int $timestamp Timestamp to check.\n *\n * @return\
    \ bool\n */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4h9261t.php:24\n\
    Stack trace:\n#0 /tmp/tmps4h9261t.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps4h9261t.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$sign\
    \ = $number < 0 ? '-' : '';\n\t$number = abs($number);\n\t$decimal_parts = explode('.',\
    \ (string)$number);\n\tif ($decimal_parts[0] == '-') {\n\t\t$decimal_parts = explode('-',\
    \ (string)$number);\n\t}\n\t$decimal_parts[0] = str_replace('.0', '', $decimal_parts[0]);\n\
    \t$decimal_parts[1] = substr($decimal_parts[1], strlen($decimal_parts[1]));\n\t\
    $decimal_parts[0] = $sign == '-' ? '-' : '';\n\treturn $decimal_parts[0] . ($decimal_parts[1]\
    \ / pow(10, strlen($decimal_parts[1])));\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp64wz4t98.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64wz4t98.php:26\n\
    Stack trace:\n#0 /tmp/tmp64wz4t98.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp64wz4t98.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number == 0) {\n    return 0;\n  }\n\n  $precision = pow(10, floor(log10($number)));\n\
    \  $factor = 10 ** ($precision - 1);\n\n  return floor($number * $factor) / $factor;\n\
    }\n\n/**\n * Format a float number to two decimal places.\n *\n * PHP has standard\
    \ function printf(), but it cannot format decimal places.\n * We can use sprintf()\
    \ to format the number to decimal places if\n * it can be done with sprintf().\n\
    \ */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1d4yekfe.php:31\n\
    Stack trace:\n#0 /tmp/tmp1d4yekfe.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1d4yekfe.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decs = array_pop($parts);\n    return\
    \ (float)$parts . '.' . $decs;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo23fpamk.php:19\n\
    Stack trace:\n#0 /tmp/tmpo23fpamk.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpo23fpamk.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ Split $number into integer and decimal part\n  $int_part = floor($number);\n\
    \  $dec = $number - $int_part;\n\n  // Make sure the decimal part is smaller than\
    \ the precision\n  assert($dec <= pow(10, strlen($number) - 1));\n\n  // Return\
    \ the decomposed number\n  return array('integer' => $int_part, 'decimal' => $dec);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zeaxf9k.php:25\n\
    Stack trace:\n#0 /tmp/tmp7zeaxf9k.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7zeaxf9k.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 1;\n    }\n    $exponent = intval(log($number,\
    \ 10));\n    $fraction = pow(10, $exponent);\n    $decimals = ($fraction - floor($fraction))\
    \ * 100;\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0isu1gy0.php:23\n\
    Stack trace:\n#0 /tmp/tmp0isu1gy0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0isu1gy0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal_part = sprintf('%.0f', $number);\n\n    return rtrim($decimal_part,\
    \ '0');\n}\n</code>\nAnd that's all, now you can do simple calculations with this\
    \ function, like:\n<code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuu29bn3y.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number);\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18edflht.php:16\n\
    Stack trace:\n#0 /tmp/tmp18edflht.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp18edflht.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ round($number, 0, PHP_ROUND_HALF_DOWN);\n}\n</code>\n<|/ a tags=php,numbers,floating-point,truncate,rounding\
    \ |>\n<| c |>\nThe question is about truncating floating point numbers. Your solution\
    \ is about rounding them.\n<|/ c |>\n<| a dscore=3 |>\nHere's a solution that\
    \ does not require you to reinvent the wheel in PHP:\n<code>\n<?php \nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7pcbafut.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $factor = MATH_BIGINTEGER_MAX10_SCALE;\n\n    return ($number < 1 && $number\
    \ != 0)\n        ? intval($number * $factor) / $factor\n        : floatval($number);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant MATH_BIGINTEGER_MAX10_SCALE - assumed\
    \ 'MATH_BIGINTEGER_MAX10_SCALE' (this will throw an Error in a future version\
    \ of PHP) in /tmp/tmpne_c48vp.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpne_c48vp.php:21\nStack trace:\n#0 /tmp/tmpne_c48vp.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpne_c48vp.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ If the number is zero, return zero.\n  if ($number == 0) {\n    return 0;\n\
    \  }\n\n  // If the number has decimal part, truncate it.\n  if (substr($number,\
    \ strpos($number, '.')) != '') {\n    $number = substr($number, 0, strpos($number,\
    \ '.'));\n  }\n\n  // Get integer and decimal part\n  $integer = floor($number);\n\
    \  $decimal = substr($number, strlen($integer) + 1, strlen($number) - strlen($integer));\n\
    \n  // Return number rounded up to the first decimal.\n  return ceil($number)\
    \ - $decimal;\n}\n</code>\n<|/ a dscore=2 tags=php,number-formatting,numbers |>\n\
    <| a dscore=2 tags=php,number-formatting,numbers |>\n<code>\n<?php\n$number =\
    \ 52.22;\n$parts = preg_replace('/\\./', '', number_format($number, 0, '', ''));\n\
    echo $parts[0];\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0ihfdw2t.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $number\
    \ = round($number, 0, PHP_ROUND_HALF_DOWN);\n  $parts = explode('.', $number);\n\
    \  $decimals = strlen($parts[1]);\n  return floatval($parts[0]) + 0.5;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8t4rpf9.php:20\n\
    Stack trace:\n#0 /tmp/tmpf8t4rpf9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpf8t4rpf9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpe92xd8.php:17\n\
    Stack trace:\n#0 /tmp/tmpwpe92xd8.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpwpe92xd8.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 0) {\n        return 0;\n    }\n    return intval($number);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodwwop9k.php:20\n\
    Stack trace:\n#0 /tmp/tmpodwwop9k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpodwwop9k.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $number = floatval($number);\n\n    if ($number > 1) {\n        $number -= intval($number\
    \ / 1);\n    }\n\n    return $number;\n}\n</code>\n<|/ a |>\n<| c |>\nHi, thanks\
    \ for your answer, but I can't get it to work. I've updated my question with the\
    \ code you gave.\n<|/ c |>\n<| c |>\nI updated my answer, please take a look\n\
    <|/ c |>\n<| c |>\nHi, thanks for your answer. I've been playing with the code\
    \ and it doesn't seem to be working correctly when I do `echo \"<b>\".$trunc_number.\"\
    </b><br>\";` I get the following: `1.5599999999999996`\n<|/ c |>\n<| c |>\nSorry,\
    \ I didn't realize that the first number would get truncated. I'm looking for\
    \ a solution that doesn't involve rounding.\n<|/ c |>\n<| c |>\nI've edited my\
    \ answer, please take a look\n<|/ c |>\n<| a tags=rounding,math,php |>\nHere is\
    \ a solution without the need for floatval(), which converts the number to a float\
    \ before the comparison is done:\n<code>\nfunction candidate(...$args) {\n   \
    \ return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdhbmm16c.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$integer\
    \ = floor($number);\n\t$decimal = ($number - $integer);\n\treturn $decimal;\n\
    }\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\treturn\
    \ (integer) floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pa9hsdo.php:17\n\
    Stack trace:\n#0 /tmp/tmp7pa9hsdo.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp7pa9hsdo.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $truncated = floor($number);\n    $decimals = ($number - $truncated) * pow(10,\
    \ ceil(log10($number)));\n    return $decimal + $truncated;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw34nmeku.php:19\n\
    Stack trace:\n#0 /tmp/tmpw34nmeku.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpw34nmeku.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return ($number - (floor($number))) * pow(10, floor(log10($number)));\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4c7_wne.php:17\n\
    Stack trace:\n#0 /tmp/tmpj4c7_wne.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpj4c7_wne.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $number\
    \  = intval($number);\n  $decimal = (int) substr($number, strpos($number, '.')\
    \ + 1);\n\n  // In case of no decimal, just cut off anything past the decimal\
    \ point.\n  if ($decimal === 0) {\n    $decimal = strlen(substr($number, strpos($number,\
    \ '.') + 1));\n  }\n\n  return (float) $number / pow(10, $decimal);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nIt works for numbers up to `3.4`. Any numbers above this return\
    \ `0`.\n<|/ c |>\n<| c |>\nWorks for me: http://codepad.org/9hN0qYbW\n<|/ c |>\n\
    <| c |>\nOkay well that's because you changed the code slightly to make it work\
    \ for numbers from 3.5 and onwards.\n<|/ c |>\n<| c |>\nThanks, I've changed it\
    \ back again.  Now that 3.4 is in the right place, it's easy enough to refactor.\
    \  I prefer this way as it does not require a library.\n<|/ c |>\n<| c |>\nThanks,\
    \ I was trying to do it all in PHP and I came up with my own solution, but yours\
    \ is much neater.\n<|/ c |>\n<| a tags=php,floating-point,truncate |>\n<code>\n\
    /**\n * Truncate a float to two decimal places.\n *\n * float $float\n * string\n\
    \ */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplqybm3vm.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number < 1) {\n    throw new Exception('Number must be positive');\n  }\n\n\
    \  $precision = strlen((string)rtrim($number, '0'));\n  if ($number <= (float)$precision)\
    \ {\n    return $number;\n  }\n\n  $fractionalPart = (float)floor($number - $number\
    \ % 1);\n  $decimalPart = (float)$fractionalPart - $fractionalPart % 1;\n\n  return\
    \ round($decimalPart, $precision);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdaz_q0ue.php:29\n\
    Stack trace:\n#0 /tmp/tmpdaz_q0ue.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdaz_q0ue.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $result\
    \ = floor($number);\n  if ($result === 0) {\n    $result = 1;\n  }\n\n  // Get\
    \ last part if it is a decimal number.\n  $decimals = strpos($number, '.');\n\
    \  if ($decimals !== false) {\n    $decimals += 1;\n  }\n\n  return $result /\
    \ pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz674lla1.php:28\n\
    Stack trace:\n#0 /tmp/tmpz674lla1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz674lla1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = floor(log10($number)) + 1;\n    $integer = floor($number);\n   \
    \ return ($integer + $decimals <= $decimals) ? $integer + $decimals : $decimals;\n\
    }\n\n/**\n * Calculate a decimal range value.\n * Examples: 1.1 to 3.5, 2.1 to\
    \ 3.5, 4.1 to 5.5, 6.1 to 8.0\n *\n * @param int $min Minimum number in range\n\
    \ * @param int $max Maximum number in range\n * @return float\n */\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qi5lera.php:27\n\
    Stack trace:\n#0 /tmp/tmp8qi5lera.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8qi5lera.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number > 1) {\n        return floor($number);\n    }\n\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesezzsjg.php:21\n\
    Stack trace:\n#0 /tmp/tmpesezzsjg.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpesezzsjg.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $factor = 1;\n    while (round($number*$factor) < $number) {\n        $factor++;\n\
    \    }\n\n    return round($number*$factor) / $factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0lwyebt.php:22\n\
    Stack trace:\n#0 /tmp/tmpp0lwyebt.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0lwyebt.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal = substr($number, strlen($number)-1);\n    $integer = floor($number);\n\
    \    if ($decimal == 0) return $integer;\n    return $integer + ($decimal - $integer\
    \ % $decimal)/$decimal;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nIt's a good answer,\
    \ but i think it fails for a couple of inputs. `truncate_number(12.345678);` produces\
    \ `12.35`. Also, `truncate_number(12.345678)` returns `12.34` when it should produce\
    \ `12.35`.\n<|/ c |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg2_50u8n.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number >= 1) {\n    // If number is a whole number, return the number.\n \
    \   return $number;\n  }\n\n  $sign = $number < 0 ? '-' : '';\n\n  // For negative\
    \ numbers take the absolute value of number and add 1.\n  $number = abs($number);\n\
    \  $decimal = $number - intval($number);\n\n  return $sign . floor($number * 100)\
    \ / 100;\n}\n\n/**\n * Rounds the number. Any integer less than or equal to the\
    \ number\n * will be rounded to the closest integer.\n *\n * @param float $number\n\
    \ *   The number to round.\n *\n * @return float\n *   The rounded number.\n */\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mpje4yi.php:38\n\
    Stack trace:\n#0 /tmp/tmp9mpje4yi.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp9mpje4yi.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $rounded_number\
    \ = round($number);\n  return floor($rounded_number) + $number - $rounded_number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5pmqspy.php:18\n\
    Stack trace:\n#0 /tmp/tmp_5pmqspy.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_5pmqspy.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal_places = 1;\n    while (abs($number % 1) > 1e-8) {\n        $decimal_places++;\n\
    \        $number = floor($number * 1e10) / 1e10;\n    }\n    return round($number,\
    \ $decimal_places);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlx82hbb.php:22\n\
    Stack trace:\n#0 /tmp/tmpvlx82hbb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvlx82hbb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $exponent\
    \ = floor(log10($number) + 1);\n  $fraction = sprintf('%.1F', $number / pow(10,\
    \ $exponent));\n  return $exponent ? sprintf('%d.%s', $number, $fraction) : $fraction;\n\
    }\n</code>\nThis should be good enough for what you're trying to do now. If you\
    \ have some more ideas for how to extend it or make it more efficient, I'd be\
    \ happy to hear about them -- if you're not looking for speed at the moment, but\
    \ more of a reusability for other things as well, I'll be happy to provide some\
    \ kind of interface that you can use.\n<|/ a tags=php,math dscore=4 |>\n<| c |>\n\
    I wouldn't say that `truncate_number` is perfectly fine, but it is the most succinct\
    \ implementation I've seen, and it makes sense. Thanks :-)\n<|/ c |>\n<| c |>\n\
    The only issue I see is that your `$fraction` needs to be `ceil($number / pow(10,\
    \ $exponent))` to get the same output as `truncate_number`. But +1 for a good\
    \ answer\n<|/ c |>\n<| c |>\n, thanks for the heads up. I've updated my answer\
    \ to account for that.\n<|/ c |>\n<| c |>\nFor anyone who's interested in how\
    \ this works: http://www.wikihow.com/Calculate-the-Decimal-Part-of-a-Number\n\
    <|/ c |>\n<| a |>\nThis code will get the remainder of the number after dividing\
    \ by 10^n\n<code>\n$num = 41;\n\n$fraction = number_format($num % 10, 0, '.',\
    \ '');\necho $fraction;\n</code>\n<|/ a tags=php,math dscore=3 |>\n<| a tags=php,math\
    \ |>\nI found that you can use a function called pow() that does exactly what\
    \ I needed. \n<code>\n$number = 3.14159;\n$fraction = number_format($number %\
    \ 10, 0, '.', '');\necho $fraction;\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI found\
    \ a simple solution (that works also):\n<code>\n<?php\n$number = 3.14159;\n$fraction\
    \ = $number % 1;\necho $fraction;\n</code>\n<|/ a tags=php,math dscore=2 |>\n\
    <| c |>\nThis won't work, as the remainder of `$number % 1` will be `0`.\n<|/\
    \ c |>\n<| c |>\nThis works, because $number is less than 1.  It doesn't work\
    \ if it's larger.\n<|/ c |>\n<| c \nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyfiin5xi.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return $number < 1 ? rtrim(rint(rround(abs($number), 0)), \" .0\") + 1 : $number;\n\
    }\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj86i0n8n.php:16\n\
    Stack trace:\n#0 /tmp/tmpj86i0n8n.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpj86i0n8n.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ rtrim($number, '.') . '.0';\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusbvjjd2.php:17\n\
    Stack trace:\n#0 /tmp/tmpusbvjjd2.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpusbvjjd2.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$dec\
    \ = $number - (int) $number;\n\tif ($dec < 0) {\n\t\treturn 0.0;\n\t}\n\treturn\
    \ $dec;\n}\n\n\n/*\n * @author Rob Atkinson\n * @package phing.tasks.ext.php\n\
    \ * @brief Functions for parsing and formatting dates/times\n * Rewritten and\
    \ ported with some helpful functions from\n * {@link http://www.php.net/date PHP\
    \ date}\n * @package phing.tasks.ext.php\n * @version $Id: DateHelper.php 24593\
    \ 2009-07-15 12:06:21Z niallp $\n */\n\n/**\n * Get current date\n * @return string\
    \ the current date\n */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ round($number, 2);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpouwwzm8r.php:17\n\
    Stack trace:\n#0 /tmp/tmpouwwzm8r.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpouwwzm8r.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ (is_float($number)) {\n    $integer = intval(intval($number));\n    if ($integer\
    \ === 0) {\n      return 0;\n    }\n\n    $decimal = ($number - $integer);\n \
    \   return $decimal;\n  }\n}\n\n/**\n * Return true if given number is equal or\
    \ bigger than zero.\n *\n * @param mixed $number\n * @return bool\n */\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number > 1) {\n        $decimal = bcdiv($number, '1');\n        if ($decimal\
    \ == 1.0) {\n            return 1;\n        }\n\n        $decimal = bcmod($decimal,\
    \ '1');\n        if ($decimal != 0) {\n            return $decimal;\n        }\n\
    \    }\n    return $number;\n}\n</code>\n<|/ a tags=floating-point,php,truncate\
    \ dscore=3 |>\n<| c |>\nThis is the best answer on this page because you avoid\
    \ having to rely on floats and is just simple enough to use for truncating decimal\
    \ values in a number-type field.\n<|/ c |>\n<| a dscore=3 |>\nThe easiest way\
    \ to do this is to not do anything at all but to format the number into a string,\
    \ then simply trim away the decimal portion. Something like this might work:\n\
    <code>\n$number = $price / 100;\n\n$number = round($number, 2);\n\n$number = ltrim($number,\
    \ '.');\n\n$price = $number * 100;\n</code>\n<|/ a tags=floating-point,php,truncate\
    \ |>\n<| a tags=floating-point,php,truncate |>\nThis question is old, but just\
    \ in case people are searching for another solution: \n<code>\n$num = 12345.6789;\n\
    $num = round($num, 2);\n$num = floor($num);\n</code>\nThe first line converts\
    \ the number into a float. The second line rounds it to the nearest hundredth.\
    \ The third line truncates it to integers. \nThis works because both floor() and\
    \ round() return the decimal portion of a number, thus we only need to truncate\
    \ the decimal portion. \nAlternatively, if you want to keep it as a float, you\
    \ can do this:\n<code>\n$num = 12345.6789;\n$num = floor($num * 100) / 100;\n\
    </code>\nThis first casts the number as a float and then multiplies it by 100,\
    \ then truncates to an integer. The division by 100 comes in because floor returns\
    \ the integer portion of a number, which we would then need to divide.\n<|/ a\
    \ dscore=3 |>\n<| a |>\nUse bcdiv()\n<code>\n<?php\n\n$num= 557456.74;\n\n$num\
    \ = bcdiv($num, 100);\necho $num; // 557456\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpubgkvf8y.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if (abs($number) <= 1.0) {\n        return $number;\n    }\n    return floor($number);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\nAs everybody else here has mentioned,\
    \ a negative number is truncated to its highest possible value which is -1 (2's\
    \ complement representation). To demonstrate this, I'll use a little bit of math:\n\
    <code>\n>>> truncate_number(-2)\n-2\n>>> truncate_number(-3)\n-3\n>>> truncate_number(-4)\n\
    -3\n>>> truncate_number(-5)\n-4\n</code>\nFrom this we can see that -3 is actually\
    \ -2 - 3 which is 4.\n<|/ a tags=php |>\n<| a tags=php dscore=4 |>\n<code>\n<?php\
    \ echo floor(-1.23); //output -1?>\n</code>\n<|/ a |>\n<| a |>\nFor PHP <= 5.2\
    \ floor() will not work on negative numbers. \nTo truncate negative numbers, try\
    \ the following:\n<code>\nfloor(-1.23); //output -1\n</code>\n<|/ a dscore=3 tags=php\
    \ |>\n<| a tags=php dscore=3 |>\n<code>\n<?php\n$number = 2.5;\n$number2 = floor($number);\n\
    echo $number2;\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5bghqit9.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return intval($number * (pow(10, floor(log10($number))) - 1));\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7q2vpqt.php:17\n\
    Stack trace:\n#0 /tmp/tmpn7q2vpqt.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpn7q2vpqt.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return round($number, 0, PHP_ROUND_HALF_DOWN);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hl4fmyh.php:17\n\
    Stack trace:\n#0 /tmp/tmp4hl4fmyh.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4hl4fmyh.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $result\
    \ = $number % 1;\n\n  // Return 0 if number is 0\n  if (!$result) {\n    return\
    \ 0;\n  }\n\n  $num_digits = strlen($number) - strrpos($number, '.');\n  if ($num_digits\
    \ < 0) {\n    // For negative numbers, use the absolute value instead.\n    return\
    \ truncate_number(abs($number));\n  }\n\n  return $result;\n}\n\n/**\n * Gets\
    \ the absolute URL for a given path.\n *\n * We take advantage of a few PHP config\
    \ directives to create a friendly\n * URL which can be easily embedded into a\
    \ web page. http://codereview.stackexchange.com/q/12811/3127\n *\n * @param string\
    \ $path The path (relative to the server root) to get.\n * @param int $options\
    \ Bitmask of URL options\n * @return string The absolute URL\n */\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_cwdjn5a.php:40\n\
    Stack trace:\n#0 /tmp/tmp_cwdjn5a.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_cwdjn5a.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $exponent = floor( log10($number) );\n    $fraction = round($number - $exponent\
    \ * pow(10,$exponent), 3);\n    return $exponent ? $fraction / pow(10,$exponent)\
    \ : $fraction;\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdno2zhn.php:18\n\
    Stack trace:\n#0 /tmp/tmpmdno2zhn.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmdno2zhn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $num = explode('.', $number);\n    return ($num[0] * 1) + ($num[1] * pow(10,\
    \ strlen($num) - 2));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpoq4xnen9.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoq4xnen9.php:18\n\
    Stack trace:\n#0 /tmp/tmpoq4xnen9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpoq4xnen9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$decimal_part\
    \ = substr($number, strpos($number, '.'));\n\treturn substr($number, 0, strlen($number)\
    \ - strlen($decimal_part));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tc69zga.php:18\n\
    Stack trace:\n#0 /tmp/tmp9tc69zga.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp9tc69zga.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ Round the given number and then find decimal part.\n  return round($number,\
    \ 0);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThank you very much. This works\
    \ very well for me, I used `round($number, 0)` and I got exactly what I needed.\n\
    <|/ c |>\n<| c |>\nThis approach also works very well for decimals with zero fractional\
    \ part. e.g. 1.4 / 5 = 0.2. However, it fails when there are more than 2 fractional\
    \ digits.\n<|/ c |>\n<| c |>\nthis doesnt work when decimal number have 1 fraction\
    \ digit\n<|/ c |>\n<| c |>\nI wonder why this isn't a standard function in PHP.\
    \ Is it because it involves rounding?\n<|/ c |>\n<| a tags=php |>\nIn order to\
    \ get \"4.00\" instead of \"4\" this should work:\n<code>\necho number_format($number,2,\"\
    .\",\"\");\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThe solution is perfect for a\
    \ simple and readable solution\n<|/ c |>\n<| c |>\nBut this will also output \"\
    4\" if the value is \"4.5\" for example. I tried it myself\n<|/ c |>\n<| a |>\n\
    <code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvfm_36o1.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number === 0) {\n        return 0;\n    }\n    return floor($number);\n\
    }\n</code>\n<|/ a tags=numbers,php,algorithm,math dscore=4 |>\n<| a tags=numbers,php,algorithm,math\
    \ |>\nIf you need to calculate a percentage (decimal) value from two integer values\
    \ you can use something like this:\n<code>\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7m97rwn7.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\tif\
    \ (is_float($number)) {\n\t\t$decimal_part = substr($number, strpos($number, '.')\
    \ + 1);\n\t\treturn $decimal_part / pow(10, strlen($decimal_part));\n\t}\n\treturn\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgiizc3ga.php:23\n\
    Stack trace:\n#0 /tmp/tmpgiizc3ga.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgiizc3ga.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $fraction = strpos($number, '.');\n    if ($fraction === 0) {\n        // If\
    \ the number has no fractional part return the number\n        return $number;\n\
    \    }\n    $fraction = substr($number, $fraction);\n    if ($fraction === '')\
    \ {\n        // If the number has no fractional part return a 1 followed by the\
    \ number\n        return '1.' . $number;\n    }\n    $decimal = substr($number,\
    \ 0, $fraction);\n    $decimal = substr($decimal, 0, strlen($decimal) - 1);\n\
    \    return $decimal . $fraction;\n}\n\n/**\n * Ensures that $string only contains\
    \ letters, numbers, spaces or special characters.\n * Otherwise, return the original\
    \ string.\n *\n * @param string $string The string to check for invalid characters\n\
    \ *\n * @return string\n */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31w8ba9f.php:37\n\
    Stack trace:\n#0 /tmp/tmp31w8ba9f.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp31w8ba9f.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number < 0) {\n    return $number;\n  }\n  $decimals = substr($number, strlen($number)\
    \ - 1);\n  $fractionals = substr($number, 0, strlen($number) - 1);\n  return rtrim($decimals,\
    \ '.') / $fractionals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytwc4hzq.php:22\n\
    Stack trace:\n#0 /tmp/tmpytwc4hzq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpytwc4hzq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if (!is_float($number)) {\n        throw new InvalidArgumentException(\"$number\
    \ is not a float\");\n    }\n\n    $num_digits = strlen($number);\n    $num_decimals\
    \ = intval(floor($num_digits - strrpos($number, \".\") - 1));\n\n    $integer\
    \ = ltrim($number, '.');\n    $decimal = substr($number, $num_decimals + 1);\n\
    \n    if ($integer === 0) {\n        // No decimal point is provided.\n      \
    \  if ($num_decimals === 0) {\n            throw new InvalidArgumentException(\"\
    $number is zero\");\n        }\n        // Round up the number of decimals.\n\
    \        $decimals = 1 + floor($decimal * pow(10, $decimals - 1));\n        return\
    \ sprintf(\".$decimals\", $decimals);\n    }\n\n    return $decimal;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nIt would be better if you explained how you do it.\
    \ Just dumping code is not going to help anyone in the future.\n<|/ c |>\n<| c\
    \ |>\nI added an explanation.\n<|/ c |>\n<| c |>\nThanks for that. I was trying\
    \ to do the same thing, only without the use of any external libraries, I just\
    \ wanted to get the exact decimal part but now I realized I needed something that\
    \ could handle floats, decimals, and negatives. Your solution works well, I'm\
    \ just wondering why it's so difficult with PHP to do something like this. Seems\
    \ like a pretty simple thing to do, I wish there were a more elegant solution\
    \ to it...\n<|/ c |>\n<| c |>\nI updated my answer with a function I wrote. I'll\
    \ accept it as an answer after I try to find out why this isn't possible in PHP.\n\
    <|/ c |>\n<| c |>\nYep, it seems like a pretty simple thing to do. Having looked\
    \ at the source for number_format() it seems like this was the reason they didn't\
    \ implement it as an option. As far as I can tell the only reasonable solution\
    \ would be to implement this as a user-defined function, as suggested by user333700\
    \ above. Thanks anyway!\n<|/ c |>\n<| a tags=number-formatting,php dscore=4 |>\n\
    The number_format function will do what you want, but only in strings, and only\
    \ if the decimal separator is . and not , as the default PHP decimal separator.\
    \ So,\n<code>\necho number_format(1.3456);\n</code>\nwill output\n<code>\n1,346\n\
    </code>\nIf you want to change that, you'll have to use one of the other number\
    \ formating functions like money_format or sprintf. Here's a more complicated\
    \ example of how that could look:\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv0zfz691.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ Get the whole part\n  $whole_part = floor(abs($number));\n\n  // Get the decimal\
    \ part\n  $decimal_part = abs($number - $whole_part);\n\n  // Get the remainder\n\
    \  $remainder = abs($number - $whole_part + $decimal_part);\n\n  // Truncate the\
    \ decimal part\n  if ($decimal_part > 0) {\n    return floor($whole_part / $decimal_part)\
    \ * $decimal_part;\n  }\n\n  // If the number is negative, return the absolute\
    \ value of the number minus 1\n  if ($number < 0) {\n    return abs($number -\
    \ 1);\n  }\n\n  return $whole_part;\n}\n\nfunction candidate(...$args) {\n   \
    \ return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp2qyfan.php:36\n\
    Stack trace:\n#0 /tmp/tmpwp2qyfan.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwp2qyfan.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$parts\
    \ = explode('.', $number);\n\treturn $parts[0] . '.' . ($parts[1]?round($parts[1]):'0');\n\
    }\n\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0g1d4wx.php:19\n\
    Stack trace:\n#0 /tmp/tmp_0g1d4wx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_0g1d4wx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $number\
    \ = floor($number);\n  $decimals = ($number % 1) * 100;\n  $decimals = intval($decimals);\n\
    \  return ($number - $decimals);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31vh_cvu.php:20\n\
    Stack trace:\n#0 /tmp/tmp31vh_cvu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp31vh_cvu.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return ($number > 0 ? floor($number) : ceil($number));\n}\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdeyw5_8.php:16\n\
    Stack trace:\n#0 /tmp/tmptdeyw5_8.php(21): test()\n#1 {main}\n  thrown in /tmp/tmptdeyw5_8.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jicr6wj.php:17\n\
    Stack trace:\n#0 /tmp/tmp8jicr6wj.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8jicr6wj.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $integer = floor($number);\n    $decimal = abs($number - $integer);\n\n    return\
    \ $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ (!is_numeric($number)) {\n    throw new InvalidArgumentException(\"Expected\
    \ a numeric value, but got $number\");\n  }\n\n  $fractionalDigits = floor(log($number)\
    \ / log(10));\n  $quotient = $number / pow(10, $fractionalDigits);\n  $remainder\
    \ = $number - $quotient * pow(10, $fractionalDigits);\n  return $quotient;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbha42bx3.php:24\n\
    Stack trace:\n#0 /tmp/tmpbha42bx3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbha42bx3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval(trunc($number));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function trunc() in /tmp/tmp25dcwbcf.php:9\n\
    Stack trace:\n#0 /tmp/tmp25dcwbcf.php(13): truncate_number(3.5)\n#1 /tmp/tmp25dcwbcf.php(17):\
    \ candidate(3.5)\n#2 /tmp/tmp25dcwbcf.php(22): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp25dcwbcf.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', sprintf('%1.2f', $number));\n  return $parts[0] ?\n      round($parts[0])\
    \ : round($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfrf214x.php:19\n\
    Stack trace:\n#0 /tmp/tmpdfrf214x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdfrf214x.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decomposed_parts = explode('.', $number);\n    if (count($decomposed_parts)\
    \ < 2) {\n        return 0.0;\n    }\n    $decimal_part = $decomposed_parts[1];\n\
    \    $integer = $decomposed_parts[0];\n\n    return $decimal_part;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqeydngk3.php:24\n\
    Stack trace:\n#0 /tmp/tmpqeydngk3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqeydngk3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $is_negative\
    \ = ($number < 0);\n  $negative_dec = decbin(~$number);\n  $negative_dec = strtr($negative_dec,\
    \ \"1\", \"\");\n  $number = ~$number;\n  $number *= pow(10, strlen($negative_dec));\n\
    \  return $is_negative ? -$number : $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvahvr6z.php:22\n\
    Stack trace:\n#0 /tmp/tmpgvahvr6z.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgvahvr6z.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ // Cast as a float just in case\n    $float = (float)$number;\n\n    if ($float\
    \ < 0) {\n        // If the float is negative, then just return the integer portion\n\
    \        return $float;\n    }\n\n    $int = floor($float);\n    if ($int ===\
    \ 0) {\n        // If it's equal to 0, just return the integer portion\n     \
    \   return $float;\n    }\n\n    // Just return the integer portion\n    return\
    \ $int;\n}\n</code>\n<|/ a dscore=3 tags=truncate,php |>\n<| a dscore=2 tags=truncate,php\
    \ |>\nA simple solution to truncate any number to 5 decimal places in PHP is as\
    \ follows:\n<code>\n$number = 3.14159;\necho number_format($number, 0, '', '');\
    \ //3.14\n</code>\nThis also works:\n<code>\n$number = 3.14159;\necho number_format($number,\
    \ 5, '', ''); //3.141\n</code>\n<|/ a |>\n<| c |>\n`number_format` has 2 parameters.\
    \ the first parameter should be the number to be formatted, the second parameter\
    \ specifies the number of decimals you want to display. Thus, the first parameter\
    \ should be `$number` and the second should be `0`.\n<|/ c |>\n<| a |>\n<code>\n\
    $num = 12.345;\n$num = round($num, -5);\n</code>\n<|/ a tags=truncate,php dscore=1\
    \ |>\n<| a dscore=0 tags=truncate,php |>\n<code>\n$num = 3.14159265;\n$num2 =\
    \ round($num, -5);\necho $num2;\n</code>\n<|/ a |>\n<| a dscore=0 tags=truncate,php\
    \ |>\n<code>\n$number = 3.14159;\n$rounded = round($number, 5);\n</code>\n<|/\
    \ a |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a |>\n<code>\n<?php\n$number = 150.0000000001;\n\
    $number = round($number, 5); // $number = 150.0000000001;\n$number = number_format($number,\
    \ 0, '', ''); // $number = 150\n$number = substr($number, 0, strlen($number) -\
    \ 5); // $number = 150.00000000\n</code>\n<|/ a tags=truncate,php dscore=0 |>\n\
    <| a dscore=0 |>\nI made a function that is much easier for me to use:\n<code>\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnrqwelko.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ Return null if number cannot be decomposed into integer and decimals\n  if (!is_numeric($number)\
    \ || intval($number) == $number || intval($number) == floor($number)) {\n    return\
    \ null;\n  }\n  $num = abs($number);\n  $decimals = strlen($num) - strrpos($num,\
    \ '.');\n  if ($decimals > 0) {\n    return substr($num, 0, $decimals);\n  }\n\
    \  return $num;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq_isew2.php:26\n\
    Stack trace:\n#0 /tmp/tmpeq_isew2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeq_isew2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number === 0) {\n    return 0;\n  }\n  $negative = intval($number) < 0;\n\
    \  if ($negative) {\n    $number = -$number;\n  }\n  $result = $number;\n  $whole\
    \ = '';\n  while (true) {\n    if ($result < 0) {\n      break;\n    }\n    $result\
    \ = floor($result);\n    if ($result == 0) {\n      break;\n    }\n    $whole\
    \ .= (string) $result;\n    if ($result > 0 && $number != 1) {\n      $result\
    \ = 1;\n    }\n  }\n  return $negative ? -$whole : $whole;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decomp = explode('.', $number);\n    if (sizeof($decomp) == 1) {\n        $decomp\
    \ = array(\n            intval($number),\n            0,\n        );\n    }\n\
    \    return $decomp[sizeof($decomp) - 1];\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf3_ghakt.php:24\n\
    Stack trace:\n#0 /tmp/tmpf3_ghakt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpf3_ghakt.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number * 100) / 100;\n}\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9vvf0m2.php:16\n\
    Stack trace:\n#0 /tmp/tmpq9vvf0m2.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpq9vvf0m2.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$digits_count\
    \ = round(log10($number));\n\t$quotient = $number / pow(10, $digits_count);\n\t\
    $decimals = $digits - $digits_count;\n\tif ($number == $quotient) {\n\t\treturn\
    \ 0;\n\t} else if ($decimals > 0) {\n\t\treturn $quotient;\n\t} else {\n\t\treturn\
    \ $quotient;\n\t}\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2_tukpj.php:26\n\
    Stack trace:\n#0 /tmp/tmpf2_tukpj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpf2_tukpj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', ltrim($number, '0'));\n  if ($decimals) {\n    return\
    \ $number;\n  }\n  $int = ltrim($number, '0');\n  $int2 = $int * 10;\n  if ($int2\
    \ == $int) {\n    return $int;\n  }\n  return $int2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jjcg7no.php:26\n\
    Stack trace:\n#0 /tmp/tmp_jjcg7no.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_jjcg7no.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $n\
    \ = ltrim($number, '0');\n  return $n === '0' ? 0 : $n;\n}\n\n/**\n * Sort an\
    \ array of strings.\n * This is used to sort a result set alphabetically by an\
    \ associated column\n * in a SQL query such as \"SELECT name FROM foo ORDER BY\
    \ name\".\n *\n * @param $array\n *  The array to be sorted.\n *\n * @return\n\
    \ *  A sorted array.\n *\n * @see uasort()\n */\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqeklbgo.php:31\n\
    Stack trace:\n#0 /tmp/tmpvqeklbgo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvqeklbgo.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ Split into integer and decimal parts first.\n  $integer_part = intval($number);\n\
    \  $decimal_part = $number - $integer_part;\n  // If decimal part is larger than\
    \ 1, it means we are dealing with a\n  // number that has a decimal part equal\
    \ to or larger than 0.\n  if ($decimal_part > 1) {\n    $decimal_part -= 1;\n\
    \  }\n  return $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = round(pow(10, floor(log10($number))));\n    return floor($number\
    \ * $decimals) / $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80mhsrby.php:18\n\
    Stack trace:\n#0 /tmp/tmp80mhsrby.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp80mhsrby.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number <= 0) {\n    return 0;\n  }\n  $decimals = $number - intval($number);\n\
    \  $decimals = max(0, $decimals);\n  return $decimals;\n}\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48zqzo97.php:23\n\
    Stack trace:\n#0 /tmp/tmp48zqzo97.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp48zqzo97.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$decimals\
    \ = 1;\n\tif ($number < 1) {\n\t\t$number = 1;\n\t\t$decimals = 0;\n\t}\n\treturn\
    \ round($number - floor($number / $decimals)) * $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bq6z5sr.php:22\n\
    Stack trace:\n#0 /tmp/tmp4bq6z5sr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4bq6z5sr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$factor\
    \ = 100;\n\tfor ($i = 0; $i < strlen($number); ++$i) {\n\t\t$factor /= 10;\n\t\
    \t$last = (int) ($number[$i] / $factor);\n\t\t$number[$i] = $last;\n\t\t$factor\
    \ %= 10;\n\t}\n\treturn (float) $number;\n}\n\n/**\n * Checks whether a given\
    \ IP address belongs to a local network segment.\n *\n * @param string $ip IP\
    \ address to check.\n * @return bool True if the IP address is local, false otherwise.\n\
    \ */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Cannot use a scalar value as an array in /tmp/tmpocayl3ia.php\
    \ on line 13\n\nWarning: Division by zero in /tmp/tmpocayl3ia.php on line 12\n\
    \nWarning: Cannot use a scalar value as an array in /tmp/tmpocayl3ia.php on line\
    \ 13\n\nWarning: Division by zero in /tmp/tmpocayl3ia.php on line 12\n\nWarning:\
    \ Cannot use a scalar value as an array in /tmp/tmpocayl3ia.php on line 13\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpocayl3ia.php:30\nStack\
    \ trace:\n#0 /tmp/tmpocayl3ia.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpocayl3ia.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\tif\
    \ ($number < 1) {\n\t\treturn 0;\n\t}\n\n\t$fraction = $number - (int) $number;\n\
    \t$fraction = bcdiv($fraction, 1); // remove fraction\n\treturn $fraction;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcdiv() in /tmp/tmpzylu787j.php:14\n\
    Stack trace:\n#0 /tmp/tmpzylu787j.php(19): truncate_number(3.5)\n#1 /tmp/tmpzylu787j.php(23):\
    \ candidate(3.5)\n#2 /tmp/tmpzylu787j.php(28): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpzylu787j.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number) + abs(round($number, - 1));\n}\n</code>\n<|/ a tags=php,rounding\
    \ |>\n<| c |>\nThis has some interesting behaviour with numbers very close to\
    \ zero, e.g. `truncate_number(0.99)` returns 1, whereas `round` returns 0.99.\n\
    <|/ c |>\n<| c |>\n`return ceil($number);` would do the trick then.\n<|/ c |>\n\
    <| a tags=php,rounding dscore=2 |>\nThis function is what I was looking for:\n\
    <code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp74468w9m.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqnzg6dn.php:17\n\
    Stack trace:\n#0 /tmp/tmpaqnzg6dn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpaqnzg6dn.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    return ($number > 1) ? $number\
    \ - intval($number / intval($number - 1)) : 0.5;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6eio02ls.php:20\n\
    Stack trace:\n#0 /tmp/tmp6eio02ls.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6eio02ls.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $digits\
    \ = floor($number);\n  $factor = 10 * $digits - $number;\n  $decimals = abs($factor);\n\
    \  if ($decimals > 0 && $decimals <= 2) {\n    return $decimals;\n  }\n  return\
    \ $factor;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnriflga.php:23\n\
    Stack trace:\n#0 /tmp/tmplnriflga.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplnriflga.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return floor(abs($number)) + ($number > 0 ? 0 : 1);\n}\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizm771ts.php:16\n\
    Stack trace:\n#0 /tmp/tmpizm771ts.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpizm771ts.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number*100)/100;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpca8co2qj.php:17\n\
    Stack trace:\n#0 /tmp/tmpca8co2qj.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpca8co2qj.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decomp\
    \ = explode('.', $number);\n  return $decomp[0];\n}\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_pg3ljo.php:17\n\
    Stack trace:\n#0 /tmp/tmpy_pg3ljo.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpy_pg3ljo.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return $number - intval($number);\n}\n\n/**\n * Sanitizes input for SQL and\
    \ HTML.\n * See https://github.com/php/php-src/blob/master/main/tests/suite/Database/Utils/Sanitizer.php\n\
    \ *\n * @author Kordikov Alexander <kordikov@yandex.ru>\n */\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if (abs($number) < 0.0001) {\n        return round($number, 5);\n    }\n   \
    \ if ($number > 0) {\n        if ($number >= 1) {\n            return $number;\n\
    \        }\n        $x = $number / 1;\n        return $x * truncate_number($x\
    \ - 1);\n    }\n    $x = $number / 1;\n    return $x * truncate_number($x + 1);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis helped me get to the bottom of my issue. Turns\
    \ out it wasn't in the PHP code at all. Thanks for your help.\n<|/ c |>\n<| a\
    \ dscore=1 |>\nI just ran into a similar problem. I think this may be the same\
    \ root cause as the original poster here:\nhttp://bugs.php.net/bug.php?id=53764\n\
    The bug is in PHP's bcscale function. It uses the wrong scale for the largest\
    \ possible float number.\nI fixed my problem by switching to the bcmath library,\
    \ which appears to properly handle the largest float.\n<|/ a tags=number-formatting,php\
    \ |>\n<| c |>\nThis bug is fixed in PHP 5.4.0, which was released on October 20,\
    \ 2012.\n<|/ c |>\n<| c |>\nI see this bug was fixed in PHP 5.4.0 released June\
    \ 26, 2012. Looks like a bug to me.\n<|/ c |>\n<| a dscore=1 |>\nIf you're using\
    \ a framework like codeigniter you can set your config like this:\n<code>\n $config['precision']\
    \  = '10';\n</code>\nYou can change it to:\n<code>\n $config['precision']  = '13';\n\
    </code>\n<|/ a tags=number-formatting,php |>\n<| c |>\nThat is what I'm using.\
    \ I'll try changing that. Thanks for the suggestion.\n<|/ c |>\n<| c |>\nI changed\
    \ it to 13 but that didn't seem to have an effect.\n<|/ c |>\n<| a |>\nIt appears\
    \ that there is a bug in PHP. PHP uses the wrong scale when dealing with very\
    \ large numbers, like floats.\nhttp://bugs.php.net/bug.php?id=53764\nThe bug report\
    \ explains what the bug was and offers a solution to it.\n<|/ a tags=number-formatting,php\
    \ dscore=0 |>\n<| a tags=number-formatting,php |>\nI use the following to get\
    \ my large decimal numbers formatted properly;\n<code>\n<?php \n  $a=\"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd68x8dfr.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return $number - intval($number);\n}\n\nfunction candidate(...$args) {\n   \
    \ return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimal_part\
    \ = 1;\n  while ($number > 1) {\n    $decimal_part *= 10;\n    if ($number % 10\
    \ == 0) {\n      break;\n    }\n    $number -= $number % 10;\n  }\n  return $decimal_part;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgoxh8l7e.php:25\n\
    Stack trace:\n#0 /tmp/tmpgoxh8l7e.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgoxh8l7e.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] ?? 0;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI like this answer because it's more generic and doesn't require\
    \ any special function or classes for other numbers (like currency, etc).\n<|/\
    \ c |>\n<| a tags=php |>\nYou could use number_format():\n<code>\n$number = '3.05';\n\
    echo number_format($number, 2);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this\
    \ answer because it's more generic and doesn't require any special function or\
    \ classes for other numbers (like currency, etc).\n<|/ c |>\n<| a dscore=5 |>\n\
    The easiest way is to use the php number_format function like this:\n<code>\n\
    $number = '3.05';\necho number_format($number, 2);\n</code>\n<|/ a tags=php |>\n\
    <| a dscore=5 |>\nIf you want to format currency differently from the default\
    \ US currency formatting (which doesn't have thousands separators) you can use\
    \ the following code (credit to https://stackoverflow.com/users/4398661/user4398661's\
    \ answer)\n<code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt7ojt4_o.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 10) + 0.5 / 10; \n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbuc8781.php:17\n\
    Stack trace:\n#0 /tmp/tmpsbuc8781.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpsbuc8781.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$dec\
    \ = 0;\n\t$integer = floor($number);\n\tif ($number - $integer > 0.99) {\n\t\t\
    $dec = $number - $integer;\n\t}\n\treturn $integer;\n}\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc08gh7rc.php:21\n\
    Stack trace:\n#0 /tmp/tmpc08gh7rc.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpc08gh7rc.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  global\
    \ $wpdb;\n\n  $number = number_format($number, 0, '', '');\n  $splitted = explode('.',\
    \ $number);\n  array_pop($splitted);\n\n  $decimals = substr($number, 0, strlen($number)\
    \ - 1);\n  $decimals = $wpdb->get_var(\"SELECT `decimals` FROM `{$wpdb->prefix}woocommerce_tax_rate_change_history`\
    \ WHERE `tax_rate_id` = '\" . absint($wpdb->get_var(\"SELECT `tax_rate_id` FROM\
    \ {$wpdb->prefix}woocommerce_tax_rate_change_history WHERE `tax_rate_id` = '\"\
    \ . absint($wpdb->get_var(\"SELECT `tax_rate_id` FROM {$wpdb->prefix}woocommerce_tax_rate_locations\
    \ WHERE `name` = '$splitted[0]'\"))) . \"'\"));\n  return (float) $decimals;\n\
    }\n\n/**\n * Adds tax rate location to database.\n *\n * @param string $location\
    \ Tax rate location.\n */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function get_var() on null\
    \ in /tmp/tmpkvsmompm.php:16\nStack trace:\n#0 /tmp/tmpkvsmompm.php(26): truncate_number('4')\n\
    #1 /tmp/tmpkvsmompm.php(30): candidate(3.5)\n#2 /tmp/tmpkvsmompm.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkvsmompm.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number > 1) {\n        return floor($number);\n    } else {\n        return\
    \ $number;\n    }\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvvi25u1.php:21\n\
    Stack trace:\n#0 /tmp/tmprvvi25u1.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprvvi25u1.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number) + str_replace(array('.', ','), '', strstr($number, '.'));\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewxipdia.php:17\n\
    Stack trace:\n#0 /tmp/tmpewxipdia.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpewxipdia.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen(ltrim($number, '0'));\n  if ($decimals > 0) {\n    return (float) $number;\n\
    \  }\n  return ceil($number);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphy93eikc.php:21\n\
    Stack trace:\n#0 /tmp/tmphy93eikc.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphy93eikc.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $intPart = floor($number);\n    $decimalPart = ($number - $intPart);\n\n   \
    \ return $decimalPart;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$x\
    \ = $number;\n\t$decimals = 0;\n\twhile ($x >= 1) {\n\t\t$x = floor($x);\n\t\t\
    $decimals++;\n\t}\n\n\treturn round($number - $x * pow(10, $decimals), $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', (string)$number);\n  return array_pop($parts);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8bolpyw.php:18\n\
    Stack trace:\n#0 /tmp/tmpe8bolpyw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpe8bolpyw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$negative\
    \ = (intval($number) < 0);\n\tif ($negative) {\n\t\t$number = -$number;\n\t}\n\
    \t$remainder = fmod($number, 1);\n\treturn $negative ? -round($remainder) : round($remainder);\n\
    }\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_ryidng.php:21\n\
    Stack trace:\n#0 /tmp/tmp2_ryidng.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2_ryidng.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number >= 1) {\n        return $number;\n    }\n    $exponent = substr($number,\
    \ strlen($number) - 1);\n    if ($exponent >= 0) {\n        $exponent = $exponent\
    \ - 1;\n    }\n    else {\n        $exponent = '+' . $exponent;\n    }\n    $parts\
    \ = explode('.', $number);\n    return $parts[0] . '.' . round($parts[1], $exponent);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvyfnxy2l.php:28\n\
    Stack trace:\n#0 /tmp/tmpvyfnxy2l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvyfnxy2l.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return intval(ceil($number));\n}\n\n/**\n * Returns the string with words separated\
    \ by ' '.\n *\n * >>> separate_words('This is a test. Nothing happens. ');\n *\
    \ 'This is a test. Nothing happens.'\n *\n * @param string $string String with\
    \ words separated by ' '.\n *\n * @return string\n */\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74v3a1iz.php:27\n\
    Stack trace:\n#0 /tmp/tmp74v3a1iz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp74v3a1iz.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number === 0) {\n        return 0;\n    }\n    if ($number > 1) {\n   \
    \     $remainder = $number % 1;\n        return round($number) - $remainder;\n\
    \    }\n    return round($number);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpom8sbe27.php:24\n\
    Stack trace:\n#0 /tmp/tmpom8sbe27.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpom8sbe27.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\tif\
    \ ($number == (float) $number) {\n\t\t$number = (float) $number;\n\t}\n\telseif\
    \ ($number == (int)$number) {\n\t\t$number = (int) $number;\n\t}\n\telseif ($number\
    \ == ($number = intval($number))) {\n\t\treturn $number;\n\t}\n\t$exponent = strlen((string)\
    \ $number) - strrpos('1234567890.', $number);\n\tif ($exponent > 0) {\n\t\t$number\
    \ = number_format($number, $exponent, '.', '');\n\t\t$exponent += strlen((string)\
    \ $number) - strrpos('1234567890.', $number);\n\t}\n\telse {\n\t\t$number = number_format($number,\
    \ abs($exponent), '', '');\n\t\t$exponent += strlen((string) $number) - strrpos('1234567890.',\
    \ $number);\n\t}\n\treturn $number;\n}\n\n/**\n * Encode a query string in a URL\n\
    \ *\n * @param string $url The URL being encoded\n * @param string $params The\
    \ parameters to be appended to the URL\n * @param int $base The base used for\
    \ encoding (optional)\n * @param bool $full If true, use the 'full' encoding scheme\
    \ which treats keys as case-sensitive (optional, default false)\n * @return string\
    \ The encoded URL\n */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglfazj51.php:44\n\
    Stack trace:\n#0 /tmp/tmpglfazj51.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpglfazj51.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return floor($number*10)/10;\n}\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91z8h5sw.php:16\n\
    Stack trace:\n#0 /tmp/tmp91z8h5sw.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp91z8h5sw.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval((floatval($number) + 0.5) * 1000) / 1000;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyp2qydv.php:17\n\
    Stack trace:\n#0 /tmp/tmpxyp2qydv.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpxyp2qydv.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$number_parts\
    \ = explode('.', $number);\n\t$decimal = $number_parts[1];\n\t$result = $number_parts[0];\n\
    \tif ($decimal == '0') {\n\t\treturn $result;\n\t}\n\t$decimal_int = $decimal;\n\
    \twhile ($decimal > 1) {\n\t\t$decimal = floor($decimal / 10);\n\t\t$decimal_int\
    \ = $decimal_int * 10 + $decimal;\n\t}\n\treturn $result + $decimal_int;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiz_t6qg2.php:28\n\
    Stack trace:\n#0 /tmp/tmpiz_t6qg2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiz_t6qg2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $digits = (int)($number);\n    $fraction = $number - $digits;\n    if ($fraction\
    \ < 0) {\n        return $digits + 1;\n    }\n    $fraction = 0;\n    return $digits;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkro5dwq.php:23\n\
    Stack trace:\n#0 /tmp/tmprkro5dwq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprkro5dwq.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number <= 0) {\n    return 0.0;\n  }\n  $n = bcmod($number, 1);\n  return\
    \ floor($n) == $n ? floor($number) : 0.0;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmp1oyjjc7w.php:12\n\
    Stack trace:\n#0 /tmp/tmp1oyjjc7w.php(17): truncate_number(3.5)\n#1 /tmp/tmp1oyjjc7w.php(21):\
    \ candidate(3.5)\n#2 /tmp/tmp1oyjjc7w.php(26): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp1oyjjc7w.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  //\
    \ This algorithm will work for both positive and negative numbers\n  if ($number\
    \ > 1) {\n    return round($number, 1);\n  }\n  return round($number, 0);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ie9uk4_.php:21\n\
    Stack trace:\n#0 /tmp/tmp4ie9uk4_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4ie9uk4_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  if\
    \ ($number <= 0.0) {\n    // Negative number.\n    return 0.0;\n  }\n\n  // Decompose\
    \ number.\n  if ($number >= 1) {\n    $remainder = fmod($number, 1);\n    $decimals\
    \ = 1;\n    if ($remainder > 0.0) {\n      $decimals = ceil(log10($number));\n\
    \    }\n    return $number - ($remainder - floor($remainder / 10) * 10 ** $decimals);\n\
    \  }\n\n  // Positive number.\n  return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7117xha.php:33\n\
    Stack trace:\n#0 /tmp/tmpu7117xha.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpu7117xha.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $remainder = $number % 1;\n    $integer = floor($number);\n    return $integer\
    \ + (($remainder > 0) ? 1 : 0);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpek755jad.php:19\n\
    Stack trace:\n#0 /tmp/tmpek755jad.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpek755jad.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return round($number, 0);\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnutzgut.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnutzgut.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnutzgut.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $truncated\
    \ = fmod($number, 1);\n  return fdiv($number, $truncated);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fdiv() in /tmp/tmp_qk52d5c.php:10\n\
    Stack trace:\n#0 /tmp/tmp_qk52d5c.php(14): truncate_number(3.5)\n#1 /tmp/tmp_qk52d5c.php(18):\
    \ candidate(3.5)\n#2 /tmp/tmp_qk52d5c.php(23): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp_qk52d5c.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $res = $number - intval($number);\n    return $res > 0 ? floor($res) : ceil($res);\n\
    }\n\n/**\n * Reverse the specified string.\n * e.g. reverse_string('abc') => 'cba'\n\
    \ */\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmv425edg.php:22\n\
    Stack trace:\n#0 /tmp/tmpmv425edg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmv425edg.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\t$result\
    \ = $number;\n\tif ($number > 1) {\n\t\t$result = floor($number);\n\t\t$remainder\
    \ = $number - $result;\n\t\t$result = $result - $remainder;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmn4088g.php:23\n\
    Stack trace:\n#0 /tmp/tmpvmn4088g.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvmn4088g.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $negative = is_numeric($number) && $number < 0;\n    if ($negative)\n      \
    \  return $number;\n    return ltrim($number, '0');\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4rsf7bwe.php:20\n\
    Stack trace:\n#0 /tmp/tmp4rsf7bwe.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4rsf7bwe.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $result = $number + 0;\n    $remainder = 0;\n    if ($number > 1) {\n      \
    \  $decPart = floor($result - $result % 1);\n        $result = $result - $decPart;\n\
    \        if ($result > 0) {\n            $remainder = $result;\n            $result\
    \ = 0;\n        }\n    }\n    return $result + $remainder;\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=php,rounding dscore=3 |>\nMy solution uses number_format() and\
    \ explode():\n<code>\necho number_format(4.76, 2);\n</code>\nOutputs:\n<code>\n\
    4.77\n</code>\n<|/ a |>\n<| a tags=php,rounding |>\nI used the following function\
    \ which should work for any precision:\n<code>\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppn6xzzg0.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $fractional = (int) ($number * 100);\n    if ($fractional >= 100) {\n      \
    \  $fractional -= 100;\n    }\n\n    $int = ltrim($fractional / 10, \"0\");\n\
    \    $decimals = ltrim($fractional % 10, 0);\n\n    return $int.$decimals;\n}\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8pdkm8i.php:24\n\
    Stack trace:\n#0 /tmp/tmpc8pdkm8i.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpc8pdkm8i.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $digits = floor(log10(abs($number))) + 1;\n    if ($number < 0 && $digits >\
    \ 1) {\n        $digits = 1;\n    }\n    return floor($number / pow(10, $digits))\
    \ * pow(10, $digits);\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nNice answer, but\
    \ please provide some explanation about why your code works.\n<|/ c |>\n<| c |>\n\
    Thanks, I added an explanation.\n<|/ c |>\n<| a |>\nI suggest you to use this\
    \ function:\n<code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8c9hknl4.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  assert($number\
    \ > 0);\n  $decimals = pow(10, floor(log($number, 10)));\n  $wholeNumber = floor($number);\n\
    \  $truncPart = $wholeNumber - $decimals;\n  $partBeforeDecimal = $number - $truncPart;\n\
    \n  return $partBeforeDecimal * pow(10, floor(log($truncPart, 10)));\n}\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qkxv98u.php:22\n\
    Stack trace:\n#0 /tmp/tmp3qkxv98u.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3qkxv98u.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ return floor($number) + round($number - floor($number), 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1jfwcb3.php:17\n\
    Stack trace:\n#0 /tmp/tmpq1jfwcb3.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpq1jfwcb3.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 0) {\n        return 0.0;\n    }\n    if ($number == 0) {\n  \
    \      return 0.0;\n    }\n    $decomp = floor($number);\n    $fraction = sprintf('%01.2f',\
    \ $number - $decomp);\n    if (strlen($fraction) == 1) {\n        return $decomp;\n\
    \    }\n    return $decomp + strlen($fraction) - 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63piubpi.php:28\n\
    Stack trace:\n#0 /tmp/tmp63piubpi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp63piubpi.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimal_pos\
    \ = strpos($number, '.');\n  if ($decimal_pos !== FALSE) {\n    $decimal = substr($number,\
    \ $decimal_pos);\n    $number = substr($number, 0, $decimal_pos);\n  } else {\n\
    \    $decimal = '';\n  }\n  $integer = floor($number);\n  return $integer.$decimal;\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqlt_mxen.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 10 + 1) / 10.0; // 10 -> 0.1\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeh09umv.php:17\n\
    Stack trace:\n#0 /tmp/tmpgeh09umv.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgeh09umv.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
