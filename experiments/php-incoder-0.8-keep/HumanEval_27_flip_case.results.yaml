name: HumanEval_27_flip_case
language: php
results:
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $new_string = strtoupper($string);\n    return strtolower($new_string);\n\
    }\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjk2tnkv.php:15\n\
    Stack trace:\n#0 /tmp/tmppjk2tnkv.php(19): test()\n#1 {main}\n  thrown in /tmp/tmppjk2tnkv.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  // Return an empty string if given null or empty string.\n  if (empty($string))\
    \ {\n    return '';\n  }\n\n  // Return an empty string if given empty array.\n\
    \  if (empty($string)) {\n    return '';\n  }\n\n  // Convert each letter to uppercase.\n\
    \  $string = strtoupper($string);\n\n  // Return an empty string if given empty\
    \ array.\n  if (empty($string)) {\n    return '';\n  }\n\n  // Return an empty\
    \ string if given empty array.\n  if (empty($string)) {\n    return '';\n  }\n\
    \n  // Convert each letter to lowercase.\n  $string = strtolower($string);\n\n\
    \  // Return an empty string if given empty array.\n  if (empty($string)) {\n\
    \    return '';\n  }\n\n  return $string;\n}\n</code>\n<|/ a |>\n<| c |>\nYour\
    \ code is not efficient, please read again and consider my edit\n<|/ c |>\n<|\
    \ c |>\nI don't think it matters that much. OP wants to replace a word (with capital\
    \ letters), if it's not found in a table (without capital letters), then leave\
    \ it as it is.\n<|/ c |>\n<| c |>\nI edited my code, sorry I hadn't seen your\
    \ answer.\n<|/ c |>\n<| c |>\nHi, i edited the answer again, sorry I hadn't seen\
    \ your answer. I changed my code to use mysqli extension, please consider that.\n\
    <|/ c |>\n<| a |>\nI use this function to convert all characters to uppercase\
    \ and lowercase of a string (including accented characters)\n<code>\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxe_rd9en.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr(strtolower($string), array('l' => 'I', 'I' => 'l', 'a' =>\
    \ 'I', 'I' => 'a', 'A' => 'A'));\n}\n\nfunction candidate(...$args) {\n    return\
    \ flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\")\
    \ !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\"\
    ) !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1asoxu6b.php:15\n\
    Stack trace:\n#0 /tmp/tmp1asoxu6b.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp1asoxu6b.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $result = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   $result .= strtoupper($string[$i]);\n        $result .= strtolower($string[$i]);\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq34w1_2l.php:19\n\
    Stack trace:\n#0 /tmp/tmpq34w1_2l.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpq34w1_2l.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr(strtolower($string), array('!' => '!', ' ' => '', ' ' =>\
    \ '', 'a' => 'a', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F',\
    \ 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm'\
    \ => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S',\
    \ 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z'\
    \ => 'Z', '?' => '?', '@' => '@'));\n}\n\nfunction candidate(...$args) {\n   \
    \ return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjbu7o98.php:15\n\
    Stack trace:\n#0 /tmp/tmpvjbu7o98.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpvjbu7o98.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flipped = strtr($string, array('l' => 'I', 'u' => 'U', 'L' => 'u'));\n\
    \n    return $flipped;\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00cyokoq.php:17\n\
    Stack trace:\n#0 /tmp/tmp00cyokoq.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp00cyokoq.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/./u', '!', strtolower($string));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2ur70db.php:15\n\
    Stack trace:\n#0 /tmp/tmpx2ur70db.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpx2ur70db.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/./u', 'u', $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayh73yh2.php:15\n\
    Stack trace:\n#0 /tmp/tmpayh73yh2.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpayh73yh2.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/./u', 'u', $string);\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbi33nfjo.php:14\n\
    Stack trace:\n#0 /tmp/tmpbi33nfjo.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpbi33nfjo.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return implode('', array_map(function ($s) {\n        return strtoupper($s);\n\
    \    }, str_split($string)));\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\n\
    I actually prefer this answer, much better than my own. :)\n<|/ c |>\n<| c |>\n\
    What about non-alpha characters? Eg. punctuation or accents.\n<|/ c |>\n<| c |>\n\
    It's a good question. I'm no PHP-er, but I'm guessing that any character that\
    \ isn't A-Z is excluded from the flip operation.\n<|/ c |>\n<| c |>\nThis is good\
    \ solution but the code can be reduced to single line by using `array_map()` function\
    \ and `str_split()` function.\n<|/ c |>\n<| c |>\nI'm assuming the OP would like\
    \ to handle unicode strings, which are strings with characters outside of the\
    \ ASCII range. It might even be the case that they have already encoded the string\
    \ as ascii, in which case this won't work. Additionally, `str_split()` is PHP\
    \ >= 5.3, which may not be an option for everyone.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n<?php\n$str=\"hello World\";\n$str = mb_strtoupper($str);\necho\
    \ $str;\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptd3g6p0v.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    $string = ucfirst($string);\n   \
    \ return strtoupper($string);\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4q1e_50.php:16\n\
    Stack trace:\n#0 /tmp/tmpl4q1e_50.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpl4q1e_50.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl15o7tsp.php:15\n\
    Stack trace:\n#0 /tmp/tmpl15o7tsp.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpl15o7tsp.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(strtolower($string));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq59bgj2.php:15\n\
    Stack trace:\n#0 /tmp/tmpeq59bgj2.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpeq59bgj2.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return $string ^= $string{0}, strtoupper($string) ^= $string{0};\n}\n\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsni6u7vc.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return str_replace(\n    array(\"a\",\"e\",\"i\",\"o\",\"u\"),\n    array(\"\
    A\",\"E\",\"I\",\"O\",\"U\"),\n    $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifb4k4x7.php:18\n\
    Stack trace:\n#0 /tmp/tmpifb4k4x7.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpifb4k4x7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr(strtolower($string), array_flip(array_map('strtolower',\
    \ str_split($string))));\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgddk6e7p.php:15\n\
    Stack trace:\n#0 /tmp/tmpgddk6e7p.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpgddk6e7p.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4ikd_iv.php:15\n\
    Stack trace:\n#0 /tmp/tmps4ikd_iv.php(19): test()\n#1 {main}\n  thrown in /tmp/tmps4ikd_iv.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flipped = \"\";\n    for ($i = 0, $l = strlen($string); $i < $l; $i++)\
    \ {\n        $char = strtolower($string[$i]);\n        $flipped .= ($char == $string[$i])\
    \ ? $char : $string[$i];\n    }\n    return $flipped;\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpfcl8gw.php:19\n\
    Stack trace:\n#0 /tmp/tmpfpfcl8gw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpfpfcl8gw.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return $string . strtoupper($string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp637qruec.php:15\n\
    Stack trace:\n#0 /tmp/tmp637qruec.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp637qruec.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $result = $string;\n    $upper = false;\n    $length = strlen($string);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if ($upper) {\n            $result\
    \ .= ctype_upper($string[$i]) ? $string[$i] : $string[strlen($string) - $i - 1];\n\
    \        } else {\n            $result .= ctype_lower($string[$i]) ? $string[$i]\
    \ : $string[strlen($string) - $i - 1];\n        }\n        $upper = !$upper;\n\
    \    }\n    return $result;\n}\n\n/**\n * Returns the capitalized first word of\
    \ a given string\n * >>> capitalize_first('hello')\n * 'Hello'\n */\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpunvi277q.php:31\n\
    Stack trace:\n#0 /tmp/tmpunvi277q.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpunvi277q.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array('h' => 'H', 'i' => 'I', 'l' => 'L', 'o' =>\
    \ 'O', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'y' => 'Y', 'z' => 'Z'));\n\
    }\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6pcfc3o1.php:14\n\
    Stack trace:\n#0 /tmp/tmp6pcfc3o1.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp6pcfc3o1.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array_flip(range('A', 'Z')));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsih5sez5.php:15\n\
    Stack trace:\n#0 /tmp/tmpsih5sez5.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpsih5sez5.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(str_replace(array('I', 'O', 'U'), array('i', 'o', 'u'),\
    \ $string));\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplttqtayy.php:15\n\
    Stack trace:\n#0 /tmp/tmplttqtayy.php(19): test()\n#1 {main}\n  thrown in /tmp/tmplttqtayy.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/\\B([a-z])/e', 'strtoupper(\"$1\")', $string);\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: preg_replace(): The /e modifier is no longer supported, use\
    \ preg_replace_callback instead in /tmp/tmp_e532npa.php on line 6\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp_e532npa.php:14\nStack trace:\n\
    #0 /tmp/tmp_e532npa.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp_e532npa.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/./u', array('A','a','B','b','C','c','D','d','E','e','F','f','G','g','H','h','I','i','J','j','K','k','L','l','M','m','N','n','O','o','P','p','Q','q','R','r','S','s','T','t','U','u','V','v','W','w','X','x','Y','y','Z','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'),\
    \ $string);\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: preg_replace(): Parameter mismatch, pattern is a string while\
    \ replacement is an array in /tmp/tmpwe9owgxh.php on line 6\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpwe9owgxh.php:14\nStack trace:\n#0 /tmp/tmpwe9owgxh.php(19):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwe9owgxh.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/(\\w)/e', '$0\\U$1', $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: preg_replace(): The /e modifier is no longer supported, use\
    \ preg_replace_callback instead in /tmp/tmpmiuk1bra.php on line 6\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpmiuk1bra.php:14\nStack trace:\n\
    #0 /tmp/tmpmiuk1bra.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpmiuk1bra.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(str_replace(array_map('chr', range(97,122)), '', str_replace(array_map('chr',\
    \ range(65,90)),'',$string)));\n}\n</code>\n<|/ a |>\n<| a tags=php,string,replace\
    \ |>\nTry this \n<code>\n$your_string = 'This is my string';\n$your_string = str_replace(\"\
    my\", \"your\", $your_string);\n$your_string = str_replace(\"string\", \"another\"\
    , $your_string);\necho $your_string;\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThanks\
    \ for that, it was helpful\n<|/ c |>\n<| a tags=php,string,replace |>\n<code>\n\
    $string = \"Hello World\";\n$new = str_replace(array(\"Hello\", \"World\"), array(\"\
    HI\", \"World\"), $string);\n</code>\nOr if you want to replace more than one\
    \ word you can use array()\n<|/ a dscore=4 |>\n<| a dscore=4 |>\nYou can use preg_replace\
    \ to replace multiple words in a string:\n<code>\n<?php\n$oldString = 'Hello World';\n\
    $newString = 'Hello';\n$newString = preg_replace('/World/','',$newString);\n$newString\
    \ = preg_replace('/Hello/','',$newString);\necho $newString; //outputs Hello\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpchoua2lv.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flip = array(\n        'A' => 'a',\n        'B' => 'b',\n        'C'\
    \ => 'c',\n        'D' => 'd',\n        'E' => 'e',\n        'F' => 'f',\n   \
    \     'G' => 'g',\n        'H' => 'h',\n        'I' => 'i',\n        'J' => 'j',\n\
    \        'K' => 'k',\n        'L' => 'l',\n        'M' => 'm',\n        'N' =>\
    \ 'n',\n        'O' => 'o',\n        'P' => 'p',\n        'Q' => 'q',\n      \
    \  'R' => 'r',\n        'S' => 's',\n        'T' => 't',\n        'U' => 'u',\n\
    \        'V' => 'v',\n        'W' => 'w',\n        'X' => 'x',\n        'Y' =>\
    \ 'y',\n        'Z' => 'z',\n        'a' => 'A',\n        'b' => 'B',\n      \
    \  'c' => 'C',\n        'd' => 'D',\n        'e' => 'E',\n        'f' => 'F',\n\
    \        'g' => 'G',\n        'h' => 'H',\n        'i' => 'I',\n        'j' =>\
    \ 'J',\n        'k' => 'K',\n        'l' => 'L',\n        'm' => 'M',\n      \
    \  'n' => 'N',\n        'o' => 'O',\n        'p' => 'P',\n        'q' => 'Q',\n\
    \        'r' => 'R',\n        's' => 'S',\n        't' => 'T',\n        'u' =>\
    \ 'U',\n        'v' => 'V',\n        'w' => 'W',\n        'x' => 'X',\n      \
    \  'y' => 'Y',\n        'z' => 'Z',\n        'A' => 'a',\n        'B' => 'b',\n\
    \        'C' => 'c',\n        'D' => 'd',\n        'E' => 'e',\n        'F' =>\
    \ 'f',\n        'G' => 'g',\n        'H' => 'h',\n        'I' => 'i',\n      \
    \  'J' => 'j',\n        'K' => 'k',\n        'L' => 'l',\n        'M' => 'm',\n\
    \        'N' => 'n',\n        'O' => 'o',\n        'P' => 'p',\n        'Q' =>\
    \ 'q',\n        'R' => 'r',\n        'S' => 's',\n        'T' => 't',\n      \
    \  'U' => 'u',\n        'V' => 'v',\n        'W' => 'w',\n        'X' => 'x',\n\
    \        'Y' => 'y',\n        'Z' => 'z',\n    );\n\n    return strtr($string,\
    \ $flip);\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $result = \"\";\n\n    for ($i = 0, $n = strlen($string); $i < $n; $i++)\
    \ {\n        $result .= (\n            ($string[$i] >= 'A' && $string[$i] <= 'Z')\
    \ ? $string[$i] .\n            ($string[$i] >= 'a' && $string[$i] <= 'z' ? $string[$i]\
    \ .\n            ($string[$i] >= '0' && $string[$i] <= '9' ? $string[$i] : \"\"\
    ) : \"\") : \"\"\n        );\n    }\n    return $result;\n}\n\n/**\n * Converts\
    \ any array value into a string.\n *\n * Array values are recursively converted\
    \ to strings. An array will\n * be fully flattened with duplicates removed.\n\
    \ *\n * Example:\n *\n * [\n *     [\n *         'a' => 'b',\n *         'c' =>\
    \ [\n *             'd' => 'e',\n *             'f' => 'g',\n *             'h'\
    \ => 'i',\n *             'j' => 'k'\n *         ],\n *     ]\n * ]\n *\n * becomes:\n\
    \ *\n *     'a=b&c=d&c=f&c=h&c=j'\n *\n * @param array $data Data array (as described\
    \ above)\n *\n * @return string A flattened and normalized string\n */\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsl71el3.php:52\n\
    Stack trace:\n#0 /tmp/tmpzsl71el3.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzsl71el3.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/[a-z]/', '', lcfirst(strtolower($string)));\n}\n\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgieagdsd.php:15\n\
    Stack trace:\n#0 /tmp/tmpgieagdsd.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpgieagdsd.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtolower($string);\n}\n\nfunction candidate(...$args) {\n  \
    \  return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5g8k9ra.php:15\n\
    Stack trace:\n#0 /tmp/tmpo5g8k9ra.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpo5g8k9ra.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  $newstring = '';\n  for ($i = 0; $i < strlen($string); $i++) {\n    if\
    \ ($string[$i] == 'a')\n      $newstring .= 'A';\n    else if ($string[$i] ==\
    \ 'b')\n      $newstring .= 'B';\n    else if ($string[$i] == 'c')\n      $newstring\
    \ .= 'C';\n    else if ($string[$i] == 'd')\n      $newstring .= 'D';\n    else\
    \ if ($string[$i] == 'e')\n      $newstring .= 'E';\n    else if ($string[$i]\
    \ == 'f')\n      $newstring .= 'F';\n    else if ($string[$i] == 'g')\n      $newstring\
    \ .= 'G';\n    else if ($string[$i] == 'h')\n      $newstring .= 'H';\n    else\
    \ if ($string[$i] == 'i')\n      $newstring .= 'I';\n    else if ($string[$i]\
    \ == 'j')\n      $newstring .= 'J';\n    else if ($string[$i] == 'k')\n      $newstring\
    \ .= 'K';\n    else if ($string[$i] == 'l')\n      $newstring .= 'L';\n    else\
    \ if ($string[$i] == 'm')\n      $newstring .= 'M';\n    else if ($string[$i]\
    \ == 'n')\n      $newstring .= 'N';\n    else if ($string[$i] == 'o')\n      $newstring\
    \ .= 'O';\n    else if ($string[$i] == 'p')\n      $newstring .= 'P';\n    else\
    \ if ($string[$i] == 'q')\n      $newstring .= 'Q';\n    else if ($string[$i]\
    \ == 'r')\n      $newstring .= 'R';\n    else if ($string[$i] == 's')\n      $newstring\
    \ .= 'S';\n    else if ($string[$i] == 't')\n      $newstring .= 'T';\n    else\
    \ if ($string[$i] == 'u')\n      $newstring .= 'U';\n    else if ($string[$i]\
    \ == 'v')\n      $newstring .= 'V';\n    else if ($string[$i] == 'w')\n      $newstring\
    \ .= 'W';\n    else if ($string[$i] == 'x')\n      $newstring .= 'X';\n    else\
    \ if ($string[$i] == 'y')\n      $newstring .= 'Y';\n    else if ($string[$i]\
    \ == 'z')\n      $newstring .= 'Z';\n    else\n      $newstring .= $string[$i];\n\
    \  }\n  return $newstring;\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpksxcw1gh.php:72\n\
    Stack trace:\n#0 /tmp/tmpksxcw1gh.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpksxcw1gh.php\
    \ on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtr($string, array('!' => '!!', '?' => '??'), \"!!!!!\");\n}\n\
    </code>\nHere I used strtr to create a string with an extra !! at the end.\nNext\
    \ we create a function to flip the case of a single character\n<code>\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp83wnzg6m.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return lcfirst(strtolower($string));\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8hfidi.php:14\n\
    Stack trace:\n#0 /tmp/tmpkn8hfidi.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpkn8hfidi.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(mb_convert_case($string, MB_CASE_TITLE, 'UTF-8'));\n\
    }\n</code>\n<|/ a dscore=1 tags=lowercase,uppercase,string,php |>\n<| c |>\nThanks\
    \ for your answer and the code. I'll try it out and will let you know if it works.\n\
    <|/ c |>\n<| c |>\nYou can't use mb_* functions on Windows, use strtolower instead.\n\
    <|/ c |>\n<| a |>\nTry something like this (works for me in PHP >= 5.3 on Windows\
    \ 7):\n<code>\n<?php\necho strtoupper(str_replace(\" \", \"_\", $string));\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4sv2dvxk.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/([a-z])/i', '\\U$1', $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1z_ovyyp.php:15\n\
    Stack trace:\n#0 /tmp/tmp1z_ovyyp.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp1z_ovyyp.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/\\B[a-z]*/i', 'strtoupper(\"$0\")', strtolower($string));\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nHe wants uppercase to become lowercase,\
    \ not lowercase to become uppercase. The string \"HELLO\" becomes \"hELLO\" which\
    \ does not match his example output.\n<|/ c |>\n<| c |>\nYes, that is what he\
    \ wants.\n<|/ c |>\n<| c |>\nThanks all. This is a very cool script and I appreciate\
    \ the example too.\n<|/ c |>\n<| a tags=php |>\nHere is a function which does\
    \ what you want to do:\n<code>\n<?php\n\n$input = \"hello\";\n\n$output = ucfirst(strtolower($input));\n\
    \necho $output; // outputs hELLO\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYou probably\
    \ should also `ucfirst` the result of `strtolower`.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$str = \"HELLO\";\necho ucfirst(strtolower($str));\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI prefer this solution, because it doesn't involve regex.\n<|/\
    \ c |>\n<| c |>\n, this is more correct answer, as it also answers question asked.\
    \ I don't think this is \"more correct\".\n<|/ c |>\n<| c |>\nThis is the better\
    \ answer. The accepted answer does not work as intended for strings that are already\
    \ all lower case\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n$string = \"HELLO\"\
    ;\n$output = strtolower($string);\necho ucfirst(strtolower($output));\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$string = \"HELLO\";\n$output = strtolower($string);\n\
    echo ucfirst(strtolower($output));\n</code>\n<|/ a tags=php |>\n<| a |>\n<code>\n\
    $string = \"HELLO\";\n$output = strtolower($string);\necho ucfirst(strtolower($output));\n\
    </code>\n<|/ a dscore=1 tags=php |>\n<| a |>\n<code>\n$string = \"HELLO\";\n$output\
    \ = strtolower($string);\necho ucfirst(strtolower($output));\n</code>\n<|/ a dscore=1\
    \ tags=php |>\n<| a |>\nAnother simple way is to use \nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5kiv887a.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace_callback('/./us', array($this, '_flip_case_callback'),\
    \ $string);\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmpswagbn_u.php:6\nStack trace:\n#0 /tmp/tmpswagbn_u.php(10): flip_case('')\n\
    #1 /tmp/tmpswagbn_u.php(14): candidate('')\n#2 /tmp/tmpswagbn_u.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmpswagbn_u.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/./u', 'u', $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1xuis3f.php:15\n\
    Stack trace:\n#0 /tmp/tmpp1xuis3f.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpp1xuis3f.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtolower($string) . strtoupper($string);\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttfh8jpd.php:14\n\
    Stack trace:\n#0 /tmp/tmpttfh8jpd.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpttfh8jpd.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  $flipped = \"\";\n  foreach (str_split($string) as $char) {\n    $flipped\
    \ .= $char == strtoupper($char) ? strtolower($char) : strtoupper($char);\n  }\n\
    \  return $flipped;\n}\n$flipCase = flip_case($str);\necho $flipCase;\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_LOWER, MB_CASE_UPPER);\n}\n\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmphqvo9302.php:6\nStack trace:\n#0 /tmp/tmphqvo9302.php(10): flip_case('')\n\
    #1 /tmp/tmphqvo9302.php(14): candidate('')\n#2 /tmp/tmphqvo9302.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmphqvo9302.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  $string = mb_strtolower($string);\n  $string = mb_strtoupper($string);\n\
    \n  return $string;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strtolower()\
    \ in /tmp/tmp4m79jhg1.php:6\nStack trace:\n#0 /tmp/tmp4m79jhg1.php(12): flip_case('')\n\
    #1 /tmp/tmp4m79jhg1.php(16): candidate('')\n#2 /tmp/tmp4m79jhg1.php(21): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4m79jhg1.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtoupper(\n      preg_replace(\n          '/([a-z])/i', '\\U$1',\
    \ $string));\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphq2q084x.php:17\n\
    Stack trace:\n#0 /tmp/tmphq2q084x.php(21): test()\n#1 {main}\n  thrown in /tmp/tmphq2q084x.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $ret = '';\n    for ($i = 0; $i < strlen($string); ++$i) {\n        $ret\
    \ .= $string[$i] . strtolower($string[$i]);\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hmpwvuo.php:19\n\
    Stack trace:\n#0 /tmp/tmp_hmpwvuo.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_hmpwvuo.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case(mb_strtolower($string), MB_CASE_UPPER, \"UTF-8\"\
    );\n}\n</code>\n<|/ a tags=php,laravel,laravel-5 dscore=1 |>\n<| c |>\nWhat is\
    \ the problem with my answer?\n<|/ c |>\n<| a |>\nIt looks like you might be doing\
    \ this on the wrong controller. I would suggest you have a look at the controllers\
    \ section of your app/Providers/AppServiceProvider.php file and add the following.\
    \ It may be the case, you have already registered the service provider and you\
    \ are calling the method from another place where you do not.\n<code>\npublic\
    \ function register()\n{\n    // Register the user model class to the auth service.\n\
    \    $this->app->singleton('App\\Models\\User', function ($app) {\n        //\
    \ return the Eloquent model instance.\n        $repository = $app->make('App\\\
    Repositories\\UserRepository');\n\n        return new User($repository);\n   \
    \ });\n}\n</code>\nYou will also have to modify the constructor to accept your\
    \ repository.\n<code>\npublic function __construct(UserRepository $repository)\n\
    {\n    $this->repository = $repository;\n}\n</code>\nYou will then be able to\
    \ use your repository in your controllers.\n<|/ a dscore=1 tags=php,laravel,laravel-5\
    \ |>\n<| c |>\nMy code already has this in it, but I didn't want to post it all\
    \ here in the question, because it's not relevant to my question.\n<|/ c |>\n\
    <| c |>\nDo you have a second `Repository` class? What is the exact error you\
    \ get?\n<|/ c |>\n<| c |>\nNo repository class at all.  Just plain models (User\
    \ and Session)\n<|/ c |>\n<| c |>\nAh, ok. Do you have two classes that extend\
    \ the `Model` class? If so you will need to register the repository class on those\
    \ classes as well. I'll update my answer.\n<|/ c |>\n<| c |>\nNo, I do not.  Just\
    \ plain models.  I added my code to the question now.\n<|/ c |>\n<| a tags=php,laravel,laravel-5\
    \ |>\nYou are injecting your repository object as a property in your controller.\
    \ Try injecting it as constructor argument:\n<code>\npublic function __construct(UserRepository\
    \ $userRepository) {\n    $this->userRepository = $userRepository;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nMy code already has this in it, but I \nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4vcopw60.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtoupper(preg_replace('/([a-z])/e', 'strtoupper(\"\\\\0\")', $string));\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: preg_replace(): The /e modifier is no longer supported, use\
    \ preg_replace_callback instead in /tmp/tmp5bjvmeq8.php on line 6\n\nWarning:\
    \ preg_replace(): The /e modifier is no longer supported, use preg_replace_callback\
    \ instead in /tmp/tmp5bjvmeq8.php on line 6\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5bjvmeq8.php:15\nStack trace:\n#0 /tmp/tmp5bjvmeq8.php(19):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5bjvmeq8.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/([a-z])/i', '\\U\\0$1', $string);\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6dwhekd.php:14\n\
    Stack trace:\n#0 /tmp/tmpb6dwhekd.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpb6dwhekd.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flipped_string = '';\n    $string_length = strlen($string);\n\n    for\
    \ ($i = 0; $i < $string_length; $i++) {\n        $char = $string[$i];\n\n    \
    \    if ($char >= 'A' && $char <= 'Z') {\n            $flipped_char = $char;\n\
    \        }\n        else if ($char >= 'a' && $char <= 'z') {\n            $flipped_char\
    \ = $char;\n        }\n        else {\n            $flipped_char = strtoupper($char);\n\
    \        }\n\n        $flipped_string .= $flipped_char;\n    }\n\n    return $flipped_string;\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_29u_0h8.php:34\n\
    Stack trace:\n#0 /tmp/tmp_29u_0h8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_29u_0h8.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return $string\n        ? preg_replace_callback('/[a-z]/i', function($matches)\
    \ {\n            return strtoupper($matches[0]);\n        }, $string)\n      \
    \  : $string;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfwqo1ctg.php:18\n\
    Stack trace:\n#0 /tmp/tmpfwqo1ctg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpfwqo1ctg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = preg_replace('/(\\w)(\\w{2})/', '$2$1', $string);\n    return\
    \ strtolower($string);\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tn4tit7.php:16\n\
    Stack trace:\n#0 /tmp/tmp0tn4tit7.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp0tn4tit7.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return str_replace(\n        array_map(function($v) { return strtoupper($v);\
    \ }, str_split($string)),\n        array_map(function($v) { return strtolower($v);\
    \ }, str_split($string)),\n        $string\n    );\n}\n</code>\n<|/ a tags=arrays,php\
    \ dscore=3 |>\n<| a tags=arrays,php |>\nUse array_map function and use array_reverse\
    \ function to reverse the array:\n<code>\n<?php\n$input = [\n  0 => 'one',\n \
    \ 1 => 'two',\n  2 => 'three',\n];\n$output = array_map(function($x) {\n    return\
    \ $x[1];\n}, array_reverse($input));\n\nprint_r($output);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=arrays,php |>\nThis might be a bit late but this may be helpful\
    \ to someone.\n<code>\n$array = [1,2,3];\narray_reverse($array);\n</code>\nThis\
    \ will reverse the order of the array [3,2,1]\n<|/ a dscore=3 |>\n<| c |>\nIt\
    \ doesn't work for me - i still have the same order\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. [1,2,3] is still [3,2,1]\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    $arr = array('one', 'two', 'three');\n$newarr = array_reverse($arr);\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nIt doesn't work for me - i still have the same\
    \ order\n<|/ c |>\n<| a dscore=2 |>\nYou could also use array_map().\n<code>\n\
    $arr = array(\"one\", \"two\", \"three\");\n$arr = array_map(function ($i) {\n\
    \    return strrev($i);\n}, $arr);\nprint_r($arr);\n</code>\nResult:\n<code>\n\
    Array\n(\n    [0] => ehtno\n    [1] => tootw\n    [2] => three\n)\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a tags=arrays,php |>\nI have recently been working\
    \ with something similar. I wanted to reverse an array from largest to smallest,\
    \ while maintaining the array keys intact.\nSo far, I came up with the following\
    \ solution.\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvd9_oypr.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flipped = \"\";\n    $string = strtolower($string);\n    $string = strtoupper($string);\n\
    \    return $string;\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kmzlggv.php:18\n\
    Stack trace:\n#0 /tmp/tmp6kmzlggv.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp6kmzlggv.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n\t$string = strtolower($string);\n\treturn ucfirst(strtolower($string));\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2d1kx1m.php:16\n\
    Stack trace:\n#0 /tmp/tmpd2d1kx1m.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpd2d1kx1m.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_TITLE, 'UTF-8');\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI used this solution in my project and works fine,\
    \ even on PHP > 5.3, thanks!\n<|/ c |>\n<| c |>\nWorked like a charm!\n<|/ c |>\n\
    <| c |>\nthis one worked for me :)\n<|/ c |>\n<| a dscore=5 |>\nAs mentioned in\
    \ other answers, mb_convert_case works fine, with the only difference that it\
    \ is case insensitive.\nIf you really need a case-sensitive version (which is\
    \ not really needed in 99% of situations), you can use:\n<code>\n$string = mb_convert_case($string,\
    \ MB_CASE_TITLE, \"UTF-8\");\n</code>\nNote the last parameter.\n<|/ a tags=php,string\
    \ |>\n<| c |>\nNote that this requires PHP >= 5.3.6\n<|/ c |>\n<| a tags=php,string\
    \ |>\nI believe this is the best option:\n<code>\nstr_replace('  ', ' ', $string)\n\
    </code>\nI did this for myself and it works.\n<|/ a dscore=4 |>\n<| c |>\nI liked\
    \ this approach. Just be sure to trim extra white space around the resulting string\
    \ to avoid undesired effects.\n<|/ c |>\n<| c |>\nstr_replace(array(' ','-','.','\
    \ '), ' ', $string)\n<|/ c |>\n<| a tags=php,string dscore=3 |>\nIt depends on\
    \ what you're looking to do with the string afterwards.  If you just want to remove\
    \ all the spaces, you can just do:\n<code>\n$string = str_replace(' ', '', $string);\n\
    </code>\nIf you really want to go crazy, you can do this:\n<code>\n$string = preg_replace('/\\\
    s/', ' #', $string);\n$string = preg_replace('/#/', ' ', $string);\n$string =\
    \ preg_replace('/\\s\\s/', ' ', $string);\n$string = trim($string, '#');\n</code>\n\
    Which will replace all spaces with some unique string, and then remove that unique\
    \ string.\n<|/ a |>\n<| a tags=php,string |>\n<code>\n$string = 'some text';\n\
    \n$result = preg_replace('/\\s+/', ' ', $string);\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nWhile this code snippet may solve the problem, it doesn't explain why\
    \ or how it answers the question. Please [include an explanation for your code](//meta.stackexchange.com/q\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2kqlkigs.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return implode('', array_map('ucfirst', str_split($string)));\n}\n</code>\n\
    <|/ a dscore=5 tags=string,arrays,php |>\n<| c |>\n`str_split($string)` should\
    \ be `str_split(strtolower($string))` because OP wants to lowercase and uppercase\
    \ at the same time\n<|/ c |>\n<| a dscore=4 |>\nYou can try this:\n<code>\n$text\
    \ = 'This is a Test';\n\n$text = preg_replace_callback('/([a-z])/', function($matches)\
    \ {\n    return strtoupper($matches[0]);\n}, $text);\n</code>\n<|/ a tags=string,arrays,php\
    \ |>\n<| c |>\nThis doesn't work for non-ASCII letters. But it works for a subset\
    \ of all letters. Use `mb_strtoupper` instead.\n<|/ c |>\n<| a tags=string,arrays,php\
    \ dscore=3 |>\nI suggest you try this regex:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsu20s8rt.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    $string = ucfirst($string);\n   \
    \ return strtoupper($string);\n}\n</code>\n<|/ a |>\n<| c |>\nI like the idea\
    \ of converting lowercase to uppercase, although I'd suggest using `strrev` instead\
    \ of `strtr` (which doesn't work properly on UTF-8 input).\n<|/ c |>\n<| a dscore=4\
    \ |>\nThe shortest way is to use strtoupper() or strtolower() for string conversion.\n\
    <code>\n<?php\n$string = 'hello world';\n\necho strtoupper($string); // Hello\
    \ World\necho strtolower($string); // hELLO wORLD\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo3buhfvz.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_UPPER, \"UTF-8\");\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmpsfd5i4hn.php:6\nStack trace:\n#0 /tmp/tmpsfd5i4hn.php(10): flip_case('')\n\
    #1 /tmp/tmpsfd5i4hn.php(14): candidate('')\n#2 /tmp/tmpsfd5i4hn.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsfd5i4hn.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return implode('', array_map(function($char) {\n        if (ctype_lower($char))\
    \ {\n            return strtoupper($char);\n        } else {\n            return\
    \ strtolower($char);\n        }\n    }, $string));\n}\n\n$output = array();\n\
    $error = 0;\nfor ($i = 0; $i < $num_lines; $i++) {\n    $line = trim(fgets(STDIN));\n\
    \    if (strlen($line) == 0) {\n        continue;\n    }\n    if ($line == '.')\
    \ {\n        continue;\n    }\n    if (preg_match('#([a-z]+)#i', $line, $match))\
    \ {\n        $output[] = $match[1].' ';\n    } else {\n        $error += 1;\n\
    \    }\n}\necho \"Input error: \" . $error . \"\\n\";\necho \"Output: \";\necho\
    \ implode('', $output);\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input error: 0\nOutput: \nWarning: array_map(): Expected parameter 2 to\
    \ be an array, string given in /tmp/tmpkhhh0lib.php on line 12\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpkhhh0lib.php on line 12\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpkhhh0lib.php:39\nStack trace:\n\
    #0 /tmp/tmpkhhh0lib.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkhhh0lib.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return implode('', array_map('ucword', str_split($string)));\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| a tags=php dscore=5 |>\nYou can use str_replace.\n<code>\n\
    $new_string = str_replace(\n    array('a', 'A'), \n    array('B', 'C'),\n    $string\n\
    );\n</code>\n<|/ a |>\n<| c |>\nAwesome answer!\n<|/ c |>\n<| a tags=php |>\n\
    Here is a simple way to do it,\n<code>\n$new = str_replace(array('a','b','c'),\
    \ array('b','c','d'), $old);\n</code>\n<|/ a dscore=5 |>\n<| a tags=php |>\n<code>\n\
    $newstring = str_replace( \n   array('a', 'A'), \n   array('B', 'C'),\n   $string\n\
    );\n</code>\n<|/ a dscore=5 |>\n<| a |>\nYou can use the following function as\
    \ well:\n<code>\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkmf3r719.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = str_replace(' ', '', ucwords(str_replace('_', ' ', $string)));\n\
    \    return lcfirst(strtolower($string));\n}\nfunction candidate(...$args) {\n\
    \    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnlfp4ll.php:15\n\
    Stack trace:\n#0 /tmp/tmpwnlfp4ll.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpwnlfp4ll.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    return ucfirst($string);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nYou might also want to add `strtolower()` before the\
    \ `str_replace`s, just to cover all cases.\n<|/ c |>\n<| a tags=php,regex dscore=1\
    \ |>\nTry this:\n<code>\n$string = preg_replace(\"/([a-z])/\", \"strtoupper('$1')\"\
    , $string);\n$string = preg_replace(\"/([A-Z])/\", \"strtolower('$1')\", $string);\n\
    </code>\n<|/ a |>\n<| a |>\nYou can try this also\n<code>\n$str = 'HELLO World';\n\
    echo preg_replace('/([a-zA-Z])/', strtoupper($1), $str);\n</code>\n<|/ a dscore=1\
    \ tags=php,regex |>\n<| a tags=php,regex |>\nA simple example using preg_replace:\n\
    <code>\n$str = 'HELLO World';\n$str = preg_replace('/([A-Z])/', '$1', strtoupper($str));\n\
    $str = preg_replace('/([a-z])/', '$1', strtolower($str));\necho $str;\n</code>\n\
    Output:\n<code>\nhELLO wORLD\n</code>\n<|/ a dscore=1 |>\n<| c |>\n`preg_replace('/([A-Z])/',\
    \ '$1', strtoupper($str));`\n<|/ c |>\n<| c |>\nThanks for the tip. I have updated\
    \ the answer\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\")\
    \ !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\"\
    ) !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpczc_lj82.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/([a-z])/', '$1', $string) . strtoupper($string);\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9d5fupj.php:15\n\
    Stack trace:\n#0 /tmp/tmpg9d5fupj.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpg9d5fupj.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return ucfirst(strtolower($string));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbev0prc.php:15\n\
    Stack trace:\n#0 /tmp/tmphbev0prc.php(19): test()\n#1 {main}\n  thrown in /tmp/tmphbev0prc.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtolower(preg_replace('/([a-z])/', '$U$1', $string));\n}\n</code>\n\
    <|/ a tags=regex,php,string |>\n<| a tags=regex,php,string |>\nThis one will do\
    \ what you want\n<code>\n$s = \"asdasdasd asdasdasd\";\necho preg_replace_callback('/\\\
    s?\\w/', function($matches) {\n    return strtoupper($matches[0]);\n}, $s);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThe question has already been answered,\
    \ but there is an important aspect to consider when it comes to performance.\n\
    In the accepted answer by Pedro Jorge Miguel, using the preg_replace_callback()\
    \ function, there is a significant performance cost when compared with using a\
    \ preg_replace() function in that preg_replace() will create a new subpattern\
    \ for each match. \nTo better understand the performance cost of preg_replace(),\
    \ let's look at the source code for the function:\n<code>\nstring preg_replace\
    \ ( string $pattern , mixed $replacement , string $subject [, int &$count ] )\n\
    {\n    string            pattern;\n    int               replacement;\n    int\
    \               subjectLen;\n    int               matchCount;\n    int      \
    \         subjectIndex;\n    int               i;\n\n    pattern = $pattern;\n\
    \    replacement = $replacement;\n    subject = $subject;\n    subjectLen = strlen\
    \ ( $subject );\n    matchCount = 0;\n    subjectIndex = 0;\n    i = subjectIndex;\n\
    \n    if (PREG_UNMATCHED != preg_match ( $pattern , $subject , &$matchCount ))\
    \ {\n        if (0 > $count) {\n            $count = count ( $subject );\n   \
    \     }\n        while ((preg_match ( $pattern , $subject , &$matchCount )) &&\
    \ (0 < $count--)) {\n            $subjectIndex++;\n            $subject[$subjectIndex]\
    \ = $replacement;\n        }\n    }\n\n    return $subject;\n}\n</code>\nAs you\
    \ can see, the function preg_replace() creates a new subpattern for each match,\
    \ and this takes time when compared to preg_replace_callback() which only creates\
    \ one subpattern. \nI ran a benchmark comparing preg_replace() vs. preg_replace_callback()\
    \ to see if I could find a situation when I would want to use preg_replace_callback()\
    \ but found that in most cases the performance advantage of preg_replace() is\
    \ not worth the extra complexity.\n<|/ a tags=regex,php,string |>\n<| a dscore=0\
    \ |>\n<code>\n$string = \"as\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp53b5c_aj.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/([a-z])/i', '\\U$1', $string);\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdye45zgr.php:14\n\
    Stack trace:\n#0 /tmp/tmpdye45zgr.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpdye45zgr.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1wn9epq.php:15\n\
    Stack trace:\n#0 /tmp/tmpm1wn9epq.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpm1wn9epq.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/(\\w)/e', '$0\\L$1', $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: preg_replace(): The /e modifier is no longer supported, use\
    \ preg_replace_callback instead in /tmp/tmp_9ukfsmj.php on line 6\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp_9ukfsmj.php:14\nStack trace:\n\
    #0 /tmp/tmp_9ukfsmj.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp_9ukfsmj.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/([a-z])/', '$1', $string));\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi29uqsj4.php:15\n\
    Stack trace:\n#0 /tmp/tmpi29uqsj4.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpi29uqsj4.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtolower($string) . strtoupper($string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2aoznry.php:15\n\
    Stack trace:\n#0 /tmp/tmpf2aoznry.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpf2aoznry.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], ['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], $string);\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7myvb92.php:15\n\
    Stack trace:\n#0 /tmp/tmpd7myvb92.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpd7myvb92.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $words = explode(' ', $string);\n    return array_map(function ($word)\
    \ {\n        return ucfirst(preg_replace('/./u', strtoupper($word), $word));\n\
    \    }, $words);\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuggdaj9.php:17\n\
    Stack trace:\n#0 /tmp/tmpeuggdaj9.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpeuggdaj9.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array('!' => '!!', 'a' => 'A', 'b' => 'B', 'c'\
    \ => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I',\
    \ 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p'\
    \ => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V',\
    \ 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', ' ' => ''));\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1uhi1x7.php:14\n\
    Stack trace:\n#0 /tmp/tmpf1uhi1x7.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpf1uhi1x7.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/\\B([a-z])/', '$1', $string));\n}\n\
    </code>\n<|/ a |>\n<| c |>\nWhoops! I've fixed it now. Try again, please.\n<|/\
    \ c |>\n<| c |>\nThanks for fixing the answer :) Could you explain the regular\
    \ expression a bit?\n<|/ c |>\n<| c |>\nI've edited my answer to explain the regular\
    \ expression. I hope it helps.\n<|/ c |>\n<| a dscore=1 |>\nMy version is slightly\
    \ different:\n<code>\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeuvzglb0.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace_callback('/./us', function ($matches) {\n    return\
    \ strtoupper($matches[0]);\n  }, $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1j5zgo7n.php:17\n\
    Stack trace:\n#0 /tmp/tmp1j5zgo7n.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp1j5zgo7n.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    $string = ucfirst(strtoupper($string));\n\
    \    return $string;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. I did this but it only flips the first word and doesn't flip all words\
    \ in the string. I have updated the question with my code. Thanks again for your\
    \ help.\n<|/ c |>\n<| c |>\nI have updated the answer. Try and let me know.\n\
    <|/ c |>\n<| a dscore=0 |>\nI used the above answers. But it only worked for one\
    \ word in the string and didn't flip the other words in the string. So I used\
    \ the below code and worked perfectly\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3t4k784h.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return $string ? strtoupper($string[0]) + substr($string, 1) : '';\n}\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpnapdza6y.php on line\
    \ 6\n\nWarning: A non-numeric value encountered in /tmp/tmpnapdza6y.php on line\
    \ 6\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnapdza6y.php:14\n\
    Stack trace:\n#0 /tmp/tmpnapdza6y.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpnapdza6y.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return mb_strtoupper(mb_strtolower($string));\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strtoupper()\
    \ in /tmp/tmpvk1duwgk.php:6\nStack trace:\n#0 /tmp/tmpvk1duwgk.php(9): flip_case('')\n\
    #1 /tmp/tmpvk1duwgk.php(13): candidate('')\n#2 /tmp/tmpvk1duwgk.php(18): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvk1duwgk.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flipped = \"\";\n    $upper = true;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $letter = $string[$i];\n        $upper = strtolower($letter)\
    \ == $letter;\n        $flipped .= $upper ? strtoupper($letter) : strtolower($letter);\n\
    \    }\n    return $flipped;\n}\n\nfunction candidate(...$args) {\n    return\
    \ flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\")\
    \ !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\"\
    ) !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr(strtolower($string), array_flip(range('A', 'Z')));\n}\n\
    </code>\n<|/ a |>\n<| a tags=php,arrays,string |>\n<code>\n$arr = array(\"Hello\"\
    ,\"How\",\"Are\",\"You\");\n\n$arr2 = array();\nforeach($arr as $key => $value){\n\
    \    $arr2[$value] = str_replace(\" \",\"\",$value);\n}\necho \"<pre>\";\nprint_r($arr2);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis does nothing to answer the question.\
    \ It just converts the keys to lowercase, and the values are all empty strings.\
    \ It also uses unnecessary array creation / rebuilding.\n<|/ c |>\n<| c |>\nMy\
    \ apologies for my mistake. I read \"Convert lowercase letters to uppercase\"\
    \ and \"Convert uppercase letters to lowercase\". Now I understand your solution\
    \ better. Thanks\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n\
    \    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf65vvavw.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    return ucwords($string);\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovo6r5w6.php:16\n\
    Stack trace:\n#0 /tmp/tmpovo6r5w6.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpovo6r5w6.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(str_replace($string, '', $string));\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpejqa_s3r.php:15\n\
    Stack trace:\n#0 /tmp/tmpejqa_s3r.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpejqa_s3r.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtoupper(preg_replace('/(.)([A-Z])/', '$1-$2', $string));\n}\n\
    \nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmnsh4hj.php:15\n\
    Stack trace:\n#0 /tmp/tmpgmnsh4hj.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpgmnsh4hj.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  // Convert to lowercase.\n  $string = mb_strtolower($string);\n  // Change\
    \ all characters to uppercase.\n  $string = mb_strtoupper($string);\n  // Convert\
    \ to uppercase.\n  $string = mb_strtolower($string);\n  return $string;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\nIf anyone is trying to do this in a more efficient\
    \ way for larger strings, here's another method using mb_convert_case and preg_replace.\n\
    <code>\n$text = \"Hello, World!\";\n\necho preg_replace('/(.)/iu', '$1', mb_convert_case($text,\
    \ MB_CASE_UPPER));\n</code>\n<|/ a tags=string,arrays,php |>\n<| c |>\nThis doesn't\
    \ appear to work for me. I've updated the question with some sample code I put\
    \ together.\n<|/ c |>\n<| c |>\nTry adding '/u' after the /iu (lowercase) in the\
    \ regex pattern.  I forgot that preg_replace doesn't use unicode by default. \
    \ Also, you need to put parentheses around the pattern, otherwise it won't do\
    \ anything.\n<|/ c |>\n<| c |>\nThe \"/\" will make preg_replace treat it as a\
    \ \"delimiter\" which won't be a part of the returned string. Hence the brackets\
    \ (grouping) should be used.\n<|/ c |>\n<| a dscore=2 |>\nI had this problem and\
    \ was looking for a more efficient solution.  So I did a bit of benchmarking.\n\
    Based on my benchmark I believe the following is more efficient for large string\
    \ arrays:\n<code>\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsrth94yh.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    $string = strtoupper($string);\n\
    \    return $string;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45m9mzwc.php:16\n\
    Stack trace:\n#0 /tmp/tmp45m9mzwc.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp45m9mzwc.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace_callback('/./u', create_function('$matches', 'return\
    \ strtoupper($matches[0]);'), $string);\n}\n\n$strings = [\n  'Lorem Ipsum has\
    \ been the industry\\'s standard dummy text ever since the 1500s, when an unknown\
    \ printer took a galley of type and scrambled it to make a type specimen book.',\n\
    \  'It has survived not only five centuries, but also the leap into electronic\
    \ typesetting, remaining essentially unchanged.',\n  'It was popularised in the\
    \ 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and\
    \ more recently with desktop publishing software like Aldus PageMaker including\
    \ versions of Lorem Ipsum.',\n  'It is a long established fact that a reader will\
    \ be distracted by the readable content of a page when looking at its layout.',\n\
    \  'Many desktop publishing packages and web page editors now use Lorem Ipsum\
    \ as their default model text, and a search for 'lorem ipsum' will uncover many\
    \ web sites still in their infancy.',\n  'Various versions have evolved over the\
    \ years, sometimes by accident, sometimes on purpose (injected humour and the\
    \ like).',\n  'Contrary to popular belief, Lorem Ipsum is not simply random text.\
    \ It has roots in a piece of classical Latin literature from 45 BC, making it\
    \ over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney\
    \ College in Virginia, looked up one of the more obscure Latin words, consectetur,\
    \ from a Lorem Ipsum passage, and going through the cites of the word in classical\
    \ literature, discovered the undoubtable source. Lorem Ipsum comes from sections\
    \ 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good\
    \ and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory\
    \ of ethics, very popular during the Renaissance. The first line of Lorem Ipsum,\
    \ \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.',\n\
    \  'There are many variations of passages of Lorem Ipsum available, but the majority\
    \ have suffered alteration in some form, by injected humour, or randomised words\
    \ which don\\'t look even slightly \nfunction candidate(...$args) {\n    return\
    \ flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\")\
    \ !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\"\
    ) !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw51n6oej.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/(.)/e', 'strtoupper(\"$1\")', strtolower($string));\n\
    }\n</code>\n<|/ a tags=php,preg-replace |>\n<| c |>\nThanks, this is what I ended\
    \ up doing, although it wasn't an elegant solution.\n<|/ c |>\n<| a tags=php,preg-replace\
    \ |>\nThe solution given by works, but I find it a bit too complicated. Here is\
    \ a simpler version that only replaces words, and doesn't care about case (so\
    \ it doesn't flip lowercase to uppercase and vice-versa):\n<code>\n$str = 'The\
    \ quick brown fox jumped over the lazy dog';\necho preg_replace('/\\b([A-Za-z])/e',\
    \ '$1', $str);\n</code>\nOutput:\n<code>\nthe quick brown fox jumped over the\
    \ lazy dog\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`preg_replace` doesn't care about\
    \ case for me\n<|/ c |>\n<| c |>\n: Yes, it does. `preg_replace` replaces only\
    \ whole words. See http://www.regular-expressions.info/wordboundaries.html\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n$str = \"The quick brown fox jumped over the\
    \ lazy dog\";\n$str = str_replace($str,array_flip(str_word_count($str,2)),$str);\n\
    echo $str;\n</code>\n<|/ a tags=php,preg-replace |>\n<| c |>\nYour example doesn't\
    \ make sense since you're flipping letters and words but not words and letters.\
    \ That's why it isn't working.\n<|/ c |>\n<| c |>\nOk, I changed the example,\
    \ it was a bad example before I fixed it.\n<|/ c |>\n<| c |>\nOk, I changed my\
    \ example to a more sensible one, thanks for the feedback.\n<|/ c |>\n<| a tags=php,preg-replace\
    \ |>\nI agree that preg_replace does not work because it doesn't care about case.\
    \ I came up with this simple solution:\n<code>\nfunction candidate(...$args) {\n\
    \    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpayh0u0kr.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/[a-z]/i', mb_strtoupper($string), mb_strtolower($string));\n\
    }\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strtoupper()\
    \ in /tmp/tmp9m0g95yp.php:6\nStack trace:\n#0 /tmp/tmp9m0g95yp.php(9): flip_case('')\n\
    #1 /tmp/tmp9m0g95yp.php(13): candidate('')\n#2 /tmp/tmp9m0g95yp.php(18): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9m0g95yp.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/[a-z]/', '',\n                     \
    \            strtolower($string)));\n}\n\nfunction candidate(...$args) {\n   \
    \ return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi0yqe8dz.php:16\n\
    Stack trace:\n#0 /tmp/tmpi0yqe8dz.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpi0yqe8dz.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/[a-z]/i', 'strtoupper(\"$0\")', strtolower($string));\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplejn9xex.php:15\n\
    Stack trace:\n#0 /tmp/tmplejn9xex.php(19): test()\n#1 {main}\n  thrown in /tmp/tmplejn9xex.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace_callback('/^./u', function ($match) {\n    return strtoupper($match[0]);\n\
    \  }, $string);\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0d0z4ln2.php:17\n\
    Stack trace:\n#0 /tmp/tmp0d0z4ln2.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp0d0z4ln2.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array_flip(str_split($string)));\n}\n</code>\n\
    And a test to prove that it works:\n<code>\nfunction candidate(...$args) {\n \
    \   return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp13lfex9h.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace_callback('/./u', function($match) {\n    return strtoupper(current($match));\n\
    \  }, $string);\n}\n</code>\nThis is not exactly like PHP's case-insensitive search(),\
    \ as you only get one result, and that result is always the first. For example,\
    \ both 'a' and 'A' would become 'A'. Not sure if that's desired behavior, but\
    \ it doesn't seem like it is. Here's a better solution:\n<code>\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp16qw_eck.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return $string . strtoupper(substr($string, 0, 1)) . strtolower(substr($string,\
    \ 1));\n}\n</code>\nAs a note, I believe my PHP skills are more advanced than\
    \ yours so I am not going to be too worried about correctness. Just want to get\
    \ the idea across.\n<|/ a |>\n<| c |>\nThanks so much, this is exactly what I\
    \ was looking for, however one thing I noticed was when I run it it seems like\
    \ the second character is always being returned as uppercase even if the first\
    \ character is lowercase. Any idea why this is?\n<|/ c |>\n<| c |>\nI believe\
    \ this should work now, try it.\n<|/ c |>\n<| c |>\nYeah, that did it! Thanks\
    \ again!\n<|/ c |>\n<| c |>\nI added a note at the bottom of my post for you,\
    \ just as a FYI for future users. Hope this helps!\n<|/ c |>\n<| a tags=php,string,flip\
    \ dscore=1 |>\ntry with this:\n<code>\n$s = \"HeLlo\";\n$t = $s . strtoupper(substr($s,\
    \ 0, 1)) . strtolower(substr($s, 1));\necho $t;\n</code>\n<|/ a |>\n<| c |>\n\
    Your code does not work as expected, it outputs \"HeLlO\", which is not what OP\
    \ is looking for.\n<|/ c |>\n<| c |>\nyeah, i know it, but the op can put this\
    \ code in his own solution\n<|/ c |>\n<| a tags=php,string,flip |>\nTry this:\n\
    <code>\n<?php\n$string = 'HellO';\n$newstring = $string[0] . ($string[1]+96) .\
    \ chr($string[2]+96) . $string[3];\necho $newstring;\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprgtahfwp.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return str_ireplace(strtolower($string), strtoupper($string), $string);\n\
    }\n\n$output = strip_tags(file_get_contents(\"http://www.ebay.com/sch/i.html?_from=R40&_trksid=p2050601.m570.l1313&_nkw=\"\
    .flip_case($query)));\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(\n        strtr($string, \n            array(\n   \
    \             'a' => 'A',\n                'b' => 'B',\n                'c' =>\
    \ 'C',\n                'd' => 'D',\n                'e' => 'E',\n           \
    \     'f' => 'F',\n                'g' => 'G',\n                'h' => 'H',\n\
    \                'i' => 'I',\n                'j' => 'J',\n                'k'\
    \ => 'K',\n                'l' => 'L',\n                'm' => 'M',\n        \
    \        'n' => 'N',\n                'o' => 'O',\n                'p' => 'P',\n\
    \                'q' => 'Q',\n                'r' => 'R',\n                's'\
    \ => 'S',\n                't' => 'T',\n                'u' => 'U',\n        \
    \        'v' => 'V',\n                'w' => 'W',\n                'x' => 'X',\n\
    \                'y' => 'Y',\n                'z' => 'Z',\n            )\n   \
    \     )\n    );\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6pjtwse.php:45\n\
    Stack trace:\n#0 /tmp/tmpn6pjtwse.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpn6pjtwse.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(mb_strtolower($string));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strtolower()\
    \ in /tmp/tmpmhz6555l.php:6\nStack trace:\n#0 /tmp/tmpmhz6555l.php(10): flip_case('')\n\
    #1 /tmp/tmpmhz6555l.php(14): candidate('')\n#2 /tmp/tmpmhz6555l.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmhz6555l.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_UPPER, \"UTF-8\");\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmpwx0bsxoc.php:6\nStack trace:\n#0 /tmp/tmpwx0bsxoc.php(10): flip_case('')\n\
    #1 /tmp/tmpwx0bsxoc.php(14): candidate('')\n#2 /tmp/tmpwx0bsxoc.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwx0bsxoc.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return ucfirst(strtolower($string));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetg3bluk.php:15\n\
    Stack trace:\n#0 /tmp/tmpetg3bluk.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpetg3bluk.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/[a-z]/i', '', $string));\n}\n</code>\n\
    And now we can use this function in our switch statement:\n<code>\nswitch ($request->input('type'))\
    \ {\n    case 'hello':\n        $result = $hello->run();\n        break;\n   \
    \ case 'world':\n        $result = $world->run();\n        break;\n    case 'flip_case':\n\
    \        $result = $flip_case->run();\n        break;\n}\n</code>\nAnd now we\
    \ have the desired output:\n<code>\nstring(13) \"Hello World\"\nstring(4) \"Hello\
    \ World\"\nstring(8) \"hELLO wORLD\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=php\
    \ |>\nJust because I think there's a neater solution:\n<code>\n<?php\n\n$input\
    \ = 'hello';\n\n$actions = array(\n    'hello'      => function($hello) use ($input)\
    \ {\n        $hello->run();\n    },\n    'world'      => function($world) use\
    \ ($input) {\n        $world->run();\n    },\n    'flip_case'  => function($flip_case)\
    \ use ($input) {\n        $flip_case->run();\n    },\n);\n\n$action = $input;\n\
    $action = array_shift($actions);\n$action($actions[$action]);\n\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php dscore=0 |>\nHere's a way to get your expected\
    \ result by using a function\n<code>\n<?php\n$hello = new Hello;\n$world = new\
    \ World;\n$flip_case = new FlipCase;\n\nclass Hello {\n    public function run()\
    \ {\n        echo 'Hello World';\n    }\n}\n\nclass World {\n    public function\
    \ run() {\n        echo 'Hello World';\n    }\n}\n\nclass FlipCase {\n    public\
    \ function run() {\n        $this->flip_case();\n    }\n    public function flip_case()\
    \ {\n        $str = 'Hello';\n        $str[0] = strtoupper($str[0]);\n       \
    \ $str[1] = strtolower($str[1]);\n        echo $str;\n    }\n}\n\n$request = new\
    \ stdClass;\n$request->input = 'hello';\n\n$result = '';\nswitch ($request->input)\
    \ {\n    case 'hello':\n        $result = $hello->run();\n        break;\n   \
    \ case 'world':\n        $result = $world->run();\n        break;\n    case 'flip_case':\n\
    \        $result = $flip_case->run();\n        break;\n}\n</code>\n<|/ a |>\n\
    <| a |>\nYou only need to do this:\n<code>\n$request->input = strtoupper($request->input);\n\
    </code>\n<|/ a d\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpws7uzq_h.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flipped = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    $flipped .= (ctype_lower($string[$i]) ? $string[$i] : $string[strlen($string)\
    \ - $i - 1]);\n    }\n    return $flipped;\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiht9phly.php:19\n\
    Stack trace:\n#0 /tmp/tmpiht9phly.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpiht9phly.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $lower = strtolower($string);\n    $upper = strtoupper($string);\n\n\
    \    return $lower === $upper ? $lower : $upper;\n}\n</code>\n<|/ a dscore=5 tags=lowercase,php,string\
    \ |>\n<| c |>\nI like this solution.  I'm a little confused about how it would\
    \ work for case-sensitive strings.  It seems like strtoupper() would be called\
    \ for strings that already start with an uppercase letter and lowercase strings\
    \ that start with lowercase letters.\n<|/ c |>\n<| c |>\nYes, that's correct.\
    \  I guess this was the only way I could think of to handle a case-sensitive case,\
    \ but I haven't checked the docs to see if there's a better way.\n<|/ c |>\n<|\
    \ a tags=lowercase,php,string |>\n<code>\nfunction candidate(...$args) {\n   \
    \ return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps4v_2ft6.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return str_ireplace($string, 'aA', 'AAA', $string);\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmpjebph.php:13\n\
    Stack trace:\n#0 /tmp/tmpvmpjebph.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpvmpjebph.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/[a-z]/', 'u$0', $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhorreun.php:15\n\
    Stack trace:\n#0 /tmp/tmpbhorreun.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpbhorreun.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $str = strtolower($string);\n    return strtr($str, $characters);\n}\n\
    \nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strtr(): The second argument is not an array in /tmp/tmpf5j613__.php\
    \ on line 7\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5j613__.php:15\n\
    Stack trace:\n#0 /tmp/tmpf5j613__.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpf5j613__.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = mb_strtolower($string);\n    return mb_strtoupper($string);\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI love the simplicity of this solution,\
    \ but as of PHP 7.3 this isn't working anymore: I'm getting this error: `PHP Deprecated:\
    \  mb_strtolower() is deprecated` when running `echo strtolower('hello');`\n<|/\
    \ c |>\n<| c |>\nYes, you're right. I have edited my answer to reflect the correct\
    \ function.\n<|/ c |>\n<| a |>\nI just wanted to share this little trick that\
    \ I just found.  It works on UTF-8 strings without needing to use mb_strtolower()\
    \ and mb_strtoupper().  It will flip to uppercase if needed and back again without\
    \ changing anything else:\n<code>\n<?php\n    $flipUppercase = preg_replace('/\\\
    W/', '', $string);\n    $flipUppercase = ucwords($flipUppercase);\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp80i48626.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = preg_replace('/([a-z])/i', '\\U$1', $string);\n    $string\
    \ = preg_replace('/([A-Z])/i', '\\L$1', $string);\n    return $string;\n}\n\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl923yxna.php:17\n\
    Stack trace:\n#0 /tmp/tmpl923yxna.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpl923yxna.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n\treturn strtoupper(strtr($string, array('!' => '.', '?' => '!', ':' => '.')));\n\
    }\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70g_a3j7.php:14\n\
    Stack trace:\n#0 /tmp/tmp70g_a3j7.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp70g_a3j7.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_LOWER, \"UTF-8\");\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmpymmigu5v.php:6\nStack trace:\n#0 /tmp/tmpymmigu5v.php(10): flip_case('')\n\
    #1 /tmp/tmpymmigu5v.php(14): candidate('')\n#2 /tmp/tmpymmigu5v.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmpymmigu5v.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    // Remove non-alphanumeric characters and whitespace from the string.\n\
    \    $string = preg_replace('/[^a-zA-Z0-9\\s]/', '', $string);\n    // Uppercase\
    \ the first character of each word in the string.\n    $string = preg_replace('/\\\
    s+/', ' ', $string);\n    // Uppercase all characters in each word in the string.\n\
    \    $string = preg_replace('/\\b[A-Z]\\b/i', ' $0', $string);\n    // Lowercase\
    \ the first character of each word in the string.\n    $string = preg_replace('/\\\
    s+/', ' ', $string);\n    // Lowercase all characters in each word in the string.\n\
    \    $string = preg_replace('/\\b[a-z]\\b/i', ' ', $string);\n    // Return the\
    \ resulting string.\n    return $string;\n}\n\nfunction candidate(...$args) {\n\
    \    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp393p72_d.php:26\n\
    Stack trace:\n#0 /tmp/tmp393p72_d.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp393p72_d.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = (string) $string;\n    $lower = strtolower($string);\n    $upper\
    \ = strtoupper($lower);\n    return $upper;\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ht_ujbk.php:18\n\
    Stack trace:\n#0 /tmp/tmp8ht_ujbk.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8ht_ujbk.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = ucfirst(strtolower($string));\n    $string = ucfirst(strtoupper($string));\n\
    \    return $string;\n}\n</code>\n<|/ a |>\n<| a |>\nPHP provides no inbuilt function\
    \ to do this.\nYou'll need to create your own function or use a prebuilt function\n\
    Here's the prebuilt function I use:\n<code>\nfunction candidate(...$args) {\n\
    \    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxmngstxu.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return str_ireplace(\n    array('abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n\
    \    array('cdefghijklmnopqrstuvwxyzABC', 'BCDEFGHIJKLMNOPQRSTUVWXYZAB'),\n  \
    \  $string);\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyc2303z4.php:18\n\
    Stack trace:\n#0 /tmp/tmpyc2303z4.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpyc2303z4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/(\\w)(\\w*)/', '$2$1', $string);\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjz5tm79h.php:15\n\
    Stack trace:\n#0 /tmp/tmpjz5tm79h.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpjz5tm79h.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    $string = ucfirst($string);\n   \
    \ return $string;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnh5isatz.php:16\n\
    Stack trace:\n#0 /tmp/tmpnh5isatz.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpnh5isatz.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtoupper(mb_strtolower($string));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strtolower()\
    \ in /tmp/tmphz7r_x2w.php:6\nStack trace:\n#0 /tmp/tmphz7r_x2w.php(10): flip_case('')\n\
    #1 /tmp/tmphz7r_x2w.php(14): candidate('')\n#2 /tmp/tmphz7r_x2w.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmphz7r_x2w.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array_flip(\n        array('!', '@', '#', '$',\
    \ '%', '^', '&', '*', '(', ')', '+', '=', '-', '.', '/', ':', ';', '<', '>', '?',\
    \ '[', ']', '{', '}')));\n}\n\n$string = \"Hello\";\necho flip_case($string);\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Hello\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnke6l3vu.php:18\n\
    Stack trace:\n#0 /tmp/tmpnke6l3vu.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpnke6l3vu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/([a-z])/i', '\\U\\1', $string);\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1i802qy1.php:15\n\
    Stack trace:\n#0 /tmp/tmp1i802qy1.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp1i802qy1.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(strtr($string, array('!' => '.', '?' => '/', '\\''\
    \ => '\"', '(' => '-', ')' => '/', '*' => '*', '+' => '+', ',' => '-', ';' =>\
    \ ':', '=' => '', '+' => '+', '\"' => '&quot;', '\\'' => '&#39;')));\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk61h299.php:15\n\
    Stack trace:\n#0 /tmp/tmppk61h299.php(19): test()\n#1 {main}\n  thrown in /tmp/tmppk61h299.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_strtoupper(mb_convert_case($string, MB_CASE_LOWER, 'UTF-8'));\n\
    }\n</code>\n<|/ a tags=php,regex,preg-match,string dscore=4 |>\n<| c |>\nYes,\
    \ that looks great.  One slight thing though since you have the pattern defined\
    \ as a variable, the $ is no longer required:\npreg_match_all('~\\b('.preg_quote($pattern,\
    \ '~').')~u', $string, $matches);\n<|/ c |>\n<| c |>\nThis is definitely the most\
    \ elegant solution - the only thing I don't like about it is that you have to\
    \ specify the pattern twice, once in the preg_quote call and once in the preg_match\
    \ call.  I thought there was a way to use the ~u modifier with the preg_quote\
    \ call and then use that same modifier in the preg_match call, but I didn't see\
    \ anything in PHP documentation for it.  Thanks!\n<|/ c |>\n<| c |>\nIf you don't\
    \ want to bother with escaping, you can use the PCRE_EXTENDED modifier which lets\
    \ you specify modifiers to pass along with the pattern, so you could say preg_match_all('~\\\
    b('.preg_quote($pattern, '~*').')~u', $string, $matches);\n<|/ c |>\n<| c |>\n\
    That's definitely a great idea and something I would have considered.  Thank you\
    \ for the suggestion.  Unfortunately, PCRE_EXTENDED is not an option for me, unfortunately.\n\
    <|/ c |>\n<| a tags=php,regex,preg-match,string |>\nYou can find your answer here\
    \ http://php.net/manual/en/function.preg-match.php \nThere are several examples\
    \ of using preg_match and preg_match_all\n<|/ a dscore=2 |>\n<| c |>\nI have looked\
    \ at the manual and seen a number of examples, but I haven't found anything that\
    \ shows a pattern being used multiple times.  Perhaps I am missing something?\n\
    <|/ c |>\n<| c |>\nOops, sorry I misunderstood your question. Looks like someone\
    \ else has already answered it though: http://stackoverflow.com/questions/5376548/php-using-regex-preg-match-multiple-times\n\
    <|/ c |>\n<| c |>\nYes, that was it.  I was looking for something more like what\
    \ was posted above in the selected answer.  Thanks!\n<|/ c |>\n<| a dscore=2 tags=php,regex,preg-match,string\
    \ |>\nYou can use preg_\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbbbwml4v.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return (strtolower($string))\n        . str_replace(\n            array('l',\
    \ 'O', 'X'),\n            array('L', 'O', 'X'),\n            strtoupper($string)\n\
    \        );\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6edqoyz.php:20\n\
    Stack trace:\n#0 /tmp/tmpj6edqoyz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj6edqoyz.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr(strtolower($string), array(\n        'a' => 'A',\n     \
    \   'b' => 'B',\n        'c' => 'C',\n        'd' => 'D',\n        'e' => 'E',\n\
    \        'f' => 'F',\n        'g' => 'G',\n        'h' => 'H',\n        'i' =>\
    \ 'I',\n        'j' => 'J',\n        'k' => 'K',\n        'l' => 'L',\n      \
    \  'm' => 'M',\n        'n' => 'N',\n        'o' => 'O',\n        'p' => 'P',\n\
    \        'q' => 'Q',\n        'r' => 'R',\n        's' => 'S',\n        't' =>\
    \ 'T',\n        'u' => 'U',\n        'v' => 'V',\n        'w' => 'W',\n      \
    \  'x' => 'X',\n        'y' => 'Y',\n        'z' => 'Z',\n        'A' => 'a',\n\
    \        'B' => 'b',\n        'C' => 'c',\n        'D' => 'd',\n        'E' =>\
    \ 'e',\n        'F' => 'f',\n        'G' => 'g',\n        'H' => 'h',\n      \
    \  'I' => 'i',\n        'J' => 'j',\n        'K' => 'k',\n        'L' => 'l',\n\
    \        'M' => 'm',\n        'N' => 'n',\n        'O' => 'o',\n        'P' =>\
    \ 'p',\n        'Q' => 'q',\n        'R' => 'r',\n        'S' => 's',\n      \
    \  'T' => 't',\n        'U' => 'u',\n        'V' => 'v',\n        'W' => 'w',\n\
    \        'X' => 'x',\n        'Y' => 'y',\n        'Z' => 'z',\n    ));\n}\n\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyrhnmhk.php:68\n\
    Stack trace:\n#0 /tmp/tmppyrhnmhk.php(72): test()\n#1 {main}\n  thrown in /tmp/tmppyrhnmhk.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtoupper($string) . strtolower($string);\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ql55r9z.php:14\n\
    Stack trace:\n#0 /tmp/tmp8ql55r9z.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp8ql55r9z.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    $string = ucwords($string);\n   \
    \ $string = strtolower($string);\n\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_62w8q3x.php:19\n\
    Stack trace:\n#0 /tmp/tmp_62w8q3x.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_62w8q3x.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    return ucfirst($string);\n}\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfgzr0o3.php:15\n\
    Stack trace:\n#0 /tmp/tmpzfgzr0o3.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpzfgzr0o3.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtr(strtolower($string), $upper_to_lower, $lower_to_upper);\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1omesflu.php:15\n\
    Stack trace:\n#0 /tmp/tmp1omesflu.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp1omesflu.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flipped = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    $flipped .= $string[$i] . strtoupper($string[$i]);\n    }\n    return $flipped;\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7erv39ss.php:19\n\
    Stack trace:\n#0 /tmp/tmp7erv39ss.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7erv39ss.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace_callback('/./u', function($match) {\n    return $match[0].strtoupper($match[0]);\n\
    \  }, $string);\n}\n\n/**\n * Format a number of bytes to a human readable format.\n\
    \ *\n * Examples:\n * 1K = 1Ki\n * 4K = 4Ki\n * 7K = 7Ki\n * 11K = 11Ki\n * ...\n\
    \ * If `$format` ends with 'i', then the output contains 'i' before the number.\n\
    \ *\n * If `$format` is empty or null, then the value is returned without any\
    \ formatting.\n *\n * @param int $bytes The byte number to format.\n * @param\
    \ string $format A format to output the byte number in. The special format 'i'\
    \ means 'iB'.\n * @return string The byte number as formatted text.\n * @link\
    \ http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::nice\n\
    \ */\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnrbtgz1.php:35\n\
    Stack trace:\n#0 /tmp/tmptnrbtgz1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptnrbtgz1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return (strtolower($string) . strtoupper($string));\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_frrncq.php:14\n\
    Stack trace:\n#0 /tmp/tmp2_frrncq.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp2_frrncq.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = preg_replace_callback(\n        '/[a-z]/i',\n        function($matches)\
    \ {\n            return strtoupper($matches[0]);\n        },\n        $string\n\
    \    );\n    return preg_replace_callback(\n        '/[A-Z]/i',\n        function($matches)\
    \ {\n            return strtolower($matches[0]);\n        },\n        $string\n\
    \    );\n}\n</code>\nThis uses the preg_replace_callback function to do the string\
    \ transformation you need. After the string transformation, the callback returns\
    \ another string. The original string is returned without modification.\nIn the\
    \ callback function, the $matches array is passed into the function. It contains\
    \ the matched characters. You can then use these matched characters directly inside\
    \ the callback, like strtoupper($matches[0]). Notice that you can call strtoupper()\
    \ on any character directly, like strtoupper($matches[0]).\nYou can do this operation\
    \ on every character of a string with a single preg_replace_callback() call:\n\
    <code>\n<?php\n$string = 'Hello';\n$flipped_string = preg_replace_callback(\n\
    \    '/[a-z]/i',\n    function($matches) {\n        return strtoupper($matches[0]);\n\
    \    },\n    $string\n);\necho $flipped_string;\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm4j98lha.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $newString = strtoupper($string);\n    $newString = ucfirst($newString);\n\
    \    return strtolower($newString);\n}\nfunction candidate(...$args) {\n    return\
    \ flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\")\
    \ !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\"\
    ) !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjjfx9db.php:16\n\
    Stack trace:\n#0 /tmp/tmpvjjfx9db.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpvjjfx9db.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/([a-z])/', '$U$1$1', $string);\n}\n</code>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9f77eeq1.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $output = \"\";\n    for ($i = 0; $i < strlen($string); ++$i) {\n   \
    \     $output .= $string[$i] ^ ($string[$i] >= 'A' ? \"A\" : ($string[$i] >= 'a'\
    \ ? \"a\" : \"\"));\n    }\n    return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk57xk9m0.php:18\n\
    Stack trace:\n#0 /tmp/tmpk57xk9m0.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpk57xk9m0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array('!' => '!!', '?' => '??', '-' => '--', ';'\
    \ => '!;', ':' => '!:', '?' => '!?'));\n}\n\nfunction candidate(...$args) {\n\
    \    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpriyyuf6e.php:15\n\
    Stack trace:\n#0 /tmp/tmpriyyuf6e.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpriyyuf6e.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_UPPER, \"UTF-8\");\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmpsefds71l.php:6\nStack trace:\n#0 /tmp/tmpsefds71l.php(10): flip_case('')\n\
    #1 /tmp/tmpsefds71l.php(14): candidate('')\n#2 /tmp/tmpsefds71l.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsefds71l.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace_callback(\n        '/[a-z]/i',\n        function($matches)\
    \ {\n            $lowercase = $matches[0];\n            $uppercase = strtoupper($lowercase);\n\
    \            return $uppercase;\n        },\n        $string\n    );\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgrtpblfo.php:23\n\
    Stack trace:\n#0 /tmp/tmpgrtpblfo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgrtpblfo.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr(strtolower($string), array(\n        'a' => 'A',\n     \
    \   'b' => 'B',\n        'c' => 'C',\n        'd' => 'D',\n        'e' => 'E',\n\
    \        'f' => 'F',\n        'g' => 'G',\n        'h' => 'H',\n        'i' =>\
    \ 'I',\n        'j' => 'J',\n        'k' => 'K',\n        'l' => 'L',\n      \
    \  'm' => 'M',\n        'n' => 'N',\n        'o' => 'O',\n        'p' => 'P',\n\
    \        'q' => 'Q',\n        'r' => 'R',\n        's' => 'S',\n        't' =>\
    \ 'T',\n        'u' => 'U',\n        'v' => 'V',\n        'w' => 'W',\n      \
    \  'x' => 'X',\n        'y' => 'Y',\n        'z' => 'Z',\n    ));\n}\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2z6gpbdi.php:41\n\
    Stack trace:\n#0 /tmp/tmp2z6gpbdi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2z6gpbdi.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace_callback('/./us', function ($match) {\n        return\
    \ strtoupper($match[0]);\n    }, $string);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ so much for this! This was perfect for me.\n<|/ c |>\n<| a dscore=3 tags=php,regex\
    \ |>\n<code>\n<?php\n\n$string = 'hello, world';\n\necho preg_replace_callback('/./u',\
    \ function($matches) {\n  return strtoupper($matches[0]);\n}, $string);\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyg4_wzcp.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtoupper($string);\n    return ucfirst($string);\n}\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tytih8g.php:15\n\
    Stack trace:\n#0 /tmp/tmp7tytih8g.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp7tytih8g.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return str_ireplace('abcdef', 'ABCDEF', $string);\n}\n</code>\nThe function\
    \ str_ireplace is a case insensitive version of str_replace, and is quite useful\
    \ when you want to convert a string to lowercase and make some changes but keeping\
    \ the casing intact.\nHope this helps :)\n<|/ a dscore=1 tags=uppercase,string,php,lowercase\
    \ |>\n<| c |>\nThanks for your reply. This does work but I was looking for a more\
    \ functional solution which avoids doing this in a loop.\n<|/ c |>\n<| c |>\n\
    I've edited my answer, this should help you out\n<|/ c |>\n<| a tags=uppercase,string,php,lowercase\
    \ dscore=1 |>\nUsing preg_replace_callback and strtoupper:\n<code>\n$string =\
    \ \"I am a string\";\necho preg_replace_callback('/([a-z])/i', function($matches){\n\
    \    return strtoupper($matches[1]);\n}, $string);\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=uppercase,string,php,lowercase |>\n<code>\n$str=\"A String\";\n\n$str=ucfirst(strtolower($str));\n\
    \necho $str;\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe7zxmbml.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtr(strtolower($string), array('!' => '!', '?' => '?', '@' =>\
    \ '@', '&' => '&', '$' => '$', '\xA3' => '\xA3', '\xA7' => '\xA7', '\xA2' => '\xA2\
    ', '\xA1' => '\xA1', '\xAC' => '\xAC', '\xBD' => '\xBD', '\xBC' => '\xBC', '\xBD\
    ' => '\xBD', '\xBE' => '\xBE', '\xB0' => '\xB0', '\xB1' => '\xB1', '\xBE' => '\xBE\
    ', '\xA7' => '\xA7', '\xA9' => '\xA9', '\xAE' => '\xAE', '\xB1' => '\xB1', '\xAD\
    ' => '\xAD', '\xBD' => '\xBD', '\xBC' => '\xBC', '\xBD' => '\xBD', '\xBE' => '\xBE\
    ', '\xB0' => '\xB0', '\xB1' => '\xB1', '\xBE' => '\xBE', '\xA7' => '\xA7', '\xA9\
    ' => '\xA9', '\xAE' => '\xAE', '\xB1' => '\xB1', '\xAD' => '\xAD', '\xBD' => '\xBD\
    ', '\xBC' => '\xBC', '\xBD' => '\xBD', '\xBE' => '\xBE', '\xB0' => '\xB0', '\xB1\
    ' => '\xB1', '\xBE' => '\xBE', '\xA7' => '\xA7', '\xA9' => '\xA9', '\xAE' => '\xAE\
    ', '\xB1' => '\xB1', '\xAD' => '\xAD', '\xBD' => '\xBD', '\xBC' => '\xBC', '\xBD\
    ' => '\xBD', '\xBE' => '\xBE', '\xB0' => '\xB0', '\xB1' => '\xB1', '\xBE' => '\xBE\
    ', '\xA7' => '\xA7', '\xA9' => '\xA9', '\xAE' => '\xAE', '\xB1' => '\xB1', '\xAD\
    ' => '\xAD', '\xBD' => '\xBD', '\xBC' => '\xBC', '\xBD' => '\xBD', '\xBE' => '\xBE\
    ', '\xB0' => '\xB0', '\xB1' => '\xB1', '\xBE' => '\xBE', '\xA7' => '\xA7', '\xA9\
    ' => '\xA9', '\xAE' => '\xAE', '\xB1' => '\xB1', '\xAD' => '\xAD', '\xBD' => '\xBD\
    ', '\xBC' => '\xBC', '\xBD' => '\xBD', '\xBE' => '\xBE', '\xB0' => '\xB0', '\xB1\
    ' => '\xB1', '\xBE' => '\xBE', '\xA7' => '\xA7', '\xA9' => '\xA9', '\xAE' => '\xAE\
    ', '\xB1' => '\xB1', '\xAD' => '\xAD', '\xBD' => '\xBD', '\xBC' => '\xBC', '\xBD\
    ' => '\xBD', '\xBE' => '\xBE', '\xB0' => '\xB0', '\xB1' => '\xB1\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpui7cm7nc.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return str_replace(\n    array('a', 'A', 'b', 'B', 'c', 'C', 'd', 'D',\
    \ 'e', 'E', 'f', 'F', 'g', 'G', 'h', 'H', 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L',\
    \ 'm', 'M', 'n', 'N', 'o', 'O', 'p', 'P', 'q', 'Q', 'r', 'R', 's', 'S', 't', 'T',\
    \ 'u', 'U', 'v', 'V', 'w', 'W', 'x', 'X', 'y', 'Y', 'z', 'Z', '0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9'),\n    array('Aa', 'Bb', 'Cc', 'Dd', 'Ee', 'Ff',\
    \ 'Gg', 'Hh', 'Ii', 'Jj', 'Kk', 'Ll', 'Mm', 'Nn', 'Oo', 'Pp', 'Qq', 'Rr', 'St',\
    \ 'Tu', 'Uu', 'Vv', 'Ww', 'Xx', 'Yy', 'Zz', '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9'),\n    $string\n  );\n}\n\nfunction candidate(...$args) {\n  \
    \  return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq383vfjx.php:19\n\
    Stack trace:\n#0 /tmp/tmpq383vfjx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpq383vfjx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_UPPER, \"UTF-8\");\n}\n\n/**\n\
    \ * Convert characters to UTF-8 and lowercase the string.\n * If the charset is\
    \ invalid (no multibyte support), just return the string unmodified.\n * If the\
    \ charset is UTF-8, convert to UTF-8.\n * Otherwise, return the string after converting\
    \ it to UTF-8.\n *\n * @param string $string The string to convert.\n * @param\
    \ string $charset The charset to convert the string to.\n *\n * @return string\n\
    \ */\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmpa1l2kwhq.php:6\nStack trace:\n#0 /tmp/tmpa1l2kwhq.php(21): flip_case('')\n\
    #1 /tmp/tmpa1l2kwhq.php(25): candidate('')\n#2 /tmp/tmpa1l2kwhq.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpa1l2kwhq.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $result = $string;\n    $lowercase = strtolower($string);\n    $uppercase\
    \ = strtoupper($string);\n    $result = str_replace($lowercase, $uppercase, $result);\n\
    \    $result = str_replace($uppercase, $lowercase, $result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpas7pryew.php:20\n\
    Stack trace:\n#0 /tmp/tmpas7pryew.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpas7pryew.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_LOWER, MB_CASE_UPPER);\n}\n\n\
    /**\n * Get the number of columns for a given width.\n * \n * @param  integer\
    \ $width\n * @param  boolean $percent_padding\n * @return integer\n */\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmpc55dmty_.php:6\nStack trace:\n#0 /tmp/tmpc55dmty_.php(17): flip_case('')\n\
    #1 /tmp/tmpc55dmty_.php(21): candidate('')\n#2 /tmp/tmpc55dmty_.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc55dmty_.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr(strtolower($string), array('!' => '!',\n               \
    \                                '@' => '@',\n                               \
    \                '#' => '#',\n                                               '$'\
    \ => '$',\n                                               '%' => '%',\n      \
    \                                         '^' => '^',\n                      \
    \                         '&' => '&',\n                                      \
    \         '*' => '*',\n                                               '('=>'(',\n\
    \                                               ')'=>')',\n                  \
    \                             '_' => '_',\n                                  \
    \             '=' => '=',\n                                               '+'\
    \ => '+',\n                                               '/' => '/',\n      \
    \                                         ':' => ':',\n                      \
    \                         ';' => ';',\n                                      \
    \         '+' => '+',\n                                               '*' => '*',\n\
    \                                               ',' => ',',\n                \
    \                               '/' => '/',\n                                \
    \               ';' => ';',\n                                               ':'\
    \ => ':',\n                                               '\"' => '\"',\n    \
    \                                           \"'\" => \"'\",\n                \
    \                               '>' => '<',\n                                \
    \               '<' => '>',\n                                               \"\
    '\" => \"'\",\n                                               '>' => '>',\n  \
    \                                             \"'\" => \"'\",\n              \
    \                                 )\n                            );\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc89ppwje.php:45\n\
    Stack trace:\n#0 /tmp/tmpc89ppwje.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpc89ppwje.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $result = $string;\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if (ctype_lower($string[$i])) {\n            $result .= strtoupper($string[$i]);\n\
    \        } else {\n            $result .= strtolower($string[$i]);\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo91ykvln.php:22\n\
    Stack trace:\n#0 /tmp/tmpo91ykvln.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpo91ykvln.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/\\B([a-z])/', '\\u$1', $string);\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bnb99en.php:14\n\
    Stack trace:\n#0 /tmp/tmp2bnb99en.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp2bnb99en.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/./u', 'x', $string));\n}\n</code>\n\
    <|/ a tags=lowercase,uppercase,string,php |>\n<| c |>\nWhile this is a great solution,\
    \ it's better to offer an explanation as to why this works. It's not clear how\
    \ this solves the problem of capitalizing both lowercase and uppercase letters.\n\
    <|/ c |>\n<| c |>\nGood point. I've added an explanation.\n<|/ c |>\n<| c |>\n\
    While this code may answer the question, it would be better to include some _context_,\
    \ explaining _how_ it works and _when_ to use it. Code-only answers are not useful\
    \ in the long run.\n<|/ c |>\n<| c |>\nHow is this any different than the accepted\
    \ answer?\n<|/ c |>\n<| a dscore=2 |>\nI solved this by creating a function that\
    \ I called 'toTitleCase()' which takes the string and changes it to proper title\
    \ case. \n<code>\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsn4sr4s4.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    $string = ucwords($string);\n   \
    \ return $string;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03rec2m_.php:16\n\
    Stack trace:\n#0 /tmp/tmp03rec2m_.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp03rec2m_.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $lowercase = strtolower($string);\n    $uppercase = strtoupper($string);\n\
    \    return $lowercase . $uppercase;\n}\n\nfunction candidate(...$args) {\n  \
    \  return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zwlcbmu.php:17\n\
    Stack trace:\n#0 /tmp/tmp1zwlcbmu.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp1zwlcbmu.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_strtoupper(mb_convert_case($string, MB_CASE_TITLE, \"UTF-8\"\
    ));\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strtoupper()\
    \ in /tmp/tmpe99cqkl9.php:6\nStack trace:\n#0 /tmp/tmpe99cqkl9.php(10): flip_case('')\n\
    #1 /tmp/tmpe99cqkl9.php(14): candidate('')\n#2 /tmp/tmpe99cqkl9.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe99cqkl9.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/([a-z])/i', '\\U\\1', $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa35j2q68.php:15\n\
    Stack trace:\n#0 /tmp/tmpa35j2q68.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpa35j2q68.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(substr($string, 1)) . strtolower(substr($string, strlen($string)\
    \ - 1));\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrpa19_a.php:15\n\
    Stack trace:\n#0 /tmp/tmpcrpa19_a.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpcrpa19_a.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/\\B([A-Z])/', '\\U\\1', $string);\n}\n</code>\n<|/\
    \ a |>\n<| a tags=php,preg-replace,regex,uppercase |>\nSince PHP version 5.5.0\
    \ the u modifier is supported for this purpose.\n<code>\n$string = preg_replace('/\\\
    B([A-Z])/u', '$1', $string);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhat does this\
    \ add that `preg_replace_callback()` does not offer?\n<|/ c |>\n<| c |>\nFor this\
    \ specific case it doesn't add anything other than more lines of code.\n<|/ c\
    \ |>\n<| c |>\nSo it is redundant information in the answer itself?\n<|/ c |>\n\
    <| c |>\nNot really. It adds the ability to easily change it at will without needing\
    \ to change the code in the answer.\n<|/ c |>\n<| c |>\nYes, but that doesn't\
    \ make it redundant. I think I understand where you're coming from.\n<|/ c |>\n\
    <| a |>\nYou can use preg_replace_callback() with a callback that makes the character\
    \ uppercase:\n<code>\n$string = preg_replace_callback('/\\B([A-Z])/', function($m)\
    \ {\n    return mb_strtoupper($m[1], 'UTF-8');\n}, $string);\n</code>\nExample:\n\
    <code>\n$string = '\xC2 Hello World \xC2';\n$string = preg_replace_callback('/\\\
    B([A-Z])/', function($m) {\n    return mb_strtoupper($m[1], 'UTF-8');\n}, $string);\n\
    \nvar_dump($string);\n</code>\nOutput:\n<code>\nstring(23) \"\xC3 Hello World\
    \ \xC3\"\n</code>\n<|/ a tags=php,preg-replace,regex,uppercase dscore=1 |>\n<|\
    \ a |>\nTry with this:\n<code>\n<?php\n$string = '\xC2 Hello World \xC2';\n$string\
    \ = preg_replace('/\\B([A-Z])/', '\\U\\1', $string);\n\necho $string;\n</code>\n\
    <|/ a tags=php,preg-replace,regex,uppercase dscore=0 |>\n<| c |>\nHow is this\
    \ different from the accepted answer from 2 minutes earlier?\n<|/ c |>\n<| c |>\n\
    Apart from that, what does the `\\U\\1` notation do?\n<|/ c |>\n<| c |>\n`\\U`\
    \ is a Unicode escape to convert from ASCII to Unicode (and back) \nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa6u3z4af.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    $string = ucwords($string);\n   \
    \ return ucfirst($string);\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7fmfzj0.php:17\n\
    Stack trace:\n#0 /tmp/tmpq7fmfzj0.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpq7fmfzj0.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbw8iuwf.php:14\n\
    Stack trace:\n#0 /tmp/tmplbw8iuwf.php(18): test()\n#1 {main}\n  thrown in /tmp/tmplbw8iuwf.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtr(strtolower($string), array_flip(str_split('ABCDEFGHIJKLMNOPQRSTUVWXYZ')));\n\
    }\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32x676fa.php:14\n\
    Stack trace:\n#0 /tmp/tmp32x676fa.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp32x676fa.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_UPPER, \"UTF-8\");\n}\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmp5kaoii42.php:6\nStack trace:\n#0 /tmp/tmp5kaoii42.php(9): flip_case('')\n\
    #1 /tmp/tmp5kaoii42.php(13): candidate('')\n#2 /tmp/tmp5kaoii42.php(18): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5kaoii42.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpei7r30c4.php:15\n\
    Stack trace:\n#0 /tmp/tmpei7r30c4.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpei7r30c4.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr(strtolower($string), utf8_split('\xE0\xE1\xE4\xE2\xE3\xE8\
    \xE9\xEB\xEA\xEC\xED\xEF\xEE\xF2\xF3\xF6\xF4\xF5\xF9\xFA\xFC\xFB\xF1\xE7')),\n\
    \               utf8_split('\xC0\xC1\xC2\xC3\xC8\xC9\xCA\xCB\xCC\xCD\xCF\xCE\xD3\
    \xD4\xD5\xD9\xDA\xDC\xD1\xC7'));\n}\n\nfunction candidate(...$args) {\n    return\
    \ flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\")\
    \ !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\"\
    ) !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjmlhxl_7.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case(mb_strtolower($string), MB_CASE_TITLE, \"UTF-8\"\
    );\n}\n$string = <<<EOT\n Hello, World! \xA1Hola, Mundo!\nEOT;\necho $string;\n\
    echo flip_case($string);\necho flip_case('ABC');\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: " Hello, World! \xA1Hola, Mundo!\nFatal error: Uncaught Error: Call to undefined\
    \ function mb_convert_case() in /tmp/tmpfi40ur48.php:6\nStack trace:\n#0 /tmp/tmpfi40ur48.php(12):\
    \ flip_case(' Hello, World! ...')\n#1 {main}\n  thrown in /tmp/tmpfi40ur48.php\
    \ on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/./u', '\u0392', $string));\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe691u6tr.php:15\n\
    Stack trace:\n#0 /tmp/tmpe691u6tr.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpe691u6tr.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    // Lower case all characters in the string.\n    $string = strtolower($string);\n\
    \    // Upper case all characters in the string.\n    $string = ucwords($string);\n\
    \    // Return the string.\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvwsfm2f.php:20\n\
    Stack trace:\n#0 /tmp/tmpjvwsfm2f.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjvwsfm2f.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace_callback('/./', function($letter) {\n        return\
    \ $letter == strtolower($letter) ? 'u' . strtoupper($letter) : strtolower($letter);\n\
    \    }, $string);\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strtolower() expects parameter 1 to be string, array given in\
    \ /tmp/tmp2ljq730b.php on line 7\n\nWarning: strtolower() expects parameter 1\
    \ to be string, array given in /tmp/tmp2ljq730b.php on line 7\n\nWarning: strtolower()\
    \ expects parameter 1 to be string, array given in /tmp/tmp2ljq730b.php on line\
    \ 7\n\nWarning: strtolower() expects parameter 1 to be string, array given in\
    \ /tmp/tmp2ljq730b.php on line 7\n\nWarning: strtolower() expects parameter 1\
    \ to be string, array given in /tmp/tmp2ljq730b.php on line 7\n\nWarning: strtolower()\
    \ expects parameter 1 to be string, array given in /tmp/tmp2ljq730b.php on line\
    \ 7\n\nWarning: strtolower() expects parameter 1 to be string, array given in\
    \ /tmp/tmp2ljq730b.php on line 7\n\nWarning: strtolower() expects parameter 1\
    \ to be string, array given in /tmp/tmp2ljq730b.php on line 7\n\nWarning: strtolower()\
    \ expects parameter 1 to be string, array given in /tmp/tmp2ljq730b.php on line\
    \ 7\n\nWarning: strtolower() expects parameter 1 to be string, array given in\
    \ /tmp/tmp2ljq730b.php on line 7\n\nWarning: strtolower() expects parameter 1\
    \ to be string, array given in /tmp/tmp2ljq730b.php on line 7\n\nWarning: strtolower()\
    \ expects parameter 1 to be string, array given in /tmp/tmp2ljq730b.php on line\
    \ 7\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ljq730b.php:16\n\
    Stack trace:\n#0 /tmp/tmp2ljq730b.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp2ljq730b.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flipped_string = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        $flipped_string .= (substr(strtolower($string[$i]), 0, 1) === substr(strtoupper($string[$i]),\
    \ 0, 1) ? strtoupper($string[$i]) : strtolower($string[$i]));\n    }\n    return\
    \ $flipped_string;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3g1bqbux.php:18\n\
    Stack trace:\n#0 /tmp/tmp3g1bqbux.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp3g1bqbux.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtolower(preg_replace('/(.)([A-Z])/', '$2$1', $string));\n}\n\
    \nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5bpnn8h.php:15\n\
    Stack trace:\n#0 /tmp/tmpn5bpnn8h.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpn5bpnn8h.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  // Only lowercase letters and spaces get flipped.\n  return preg_replace('/[^a-z\\\
    s]/i', '', mb_strtoupper(mb_strtolower($string)));\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strtoupper()\
    \ in /tmp/tmp8to778hu.php:7\nStack trace:\n#0 /tmp/tmp8to778hu.php(10): flip_case('')\n\
    #1 /tmp/tmp8to778hu.php(14): candidate('')\n#2 /tmp/tmp8to778hu.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8to778hu.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/([a-z])/', '$U$1', $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7oqf9469.php:15\n\
    Stack trace:\n#0 /tmp/tmp7oqf9469.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp7oqf9469.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/[a-z]/i', '', $string)) . strtolower(preg_replace('/[A-Z]/i',\
    \ '', $string));\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc4j_62a9.php:15\n\
    Stack trace:\n#0 /tmp/tmpc4j_62a9.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpc4j_62a9.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'\\'',\
    \ '\"' => '\\\"\\\"', ':' => '::', ',' => '..', ';' => '!!!', '@' => '@@'));\n\
    }\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplszuaplt.php:14\n\
    Stack trace:\n#0 /tmp/tmplszuaplt.php(18): test()\n#1 {main}\n  thrown in /tmp/tmplszuaplt.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr(strtolower($string), array('!' => '.', '?' => ',', ';' =>\
    \ '!', ':' => '/', '?' => '?'));\n}\n\nfunction candidate(...$args) {\n    return\
    \ flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\")\
    \ !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\"\
    ) !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3wgz4vx.php:15\n\
    Stack trace:\n#0 /tmp/tmpl3wgz4vx.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpl3wgz4vx.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return str_ireplace(\n        array('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'),\n        array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z'),\n        $string\n    );\n}\n\nfunction candidate(...$args) {\n    return\
    \ flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\")\
    \ !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\"\
    ) !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqz_zez2.php:19\n\
    Stack trace:\n#0 /tmp/tmpaqz_zez2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpaqz_zez2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array('A' => 'a', 'B' => 'b', 'C' => 'c', 'C' =>\
    \ 'C', 'a' => 'A', 'b' => 'B', 'c'=>'C'));\n}\nfunction candidate(...$args) {\n\
    \    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5jen1c_.php:14\n\
    Stack trace:\n#0 /tmp/tmpj5jen1c_.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpj5jen1c_.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtr(\n    $string,\n    array(\n      'a' => 'A',\n      'b' =>\
    \ 'B',\n      'c' => 'C',\n      'd' => 'D',\n      'e' => 'E',\n      'f' =>\
    \ 'F',\n      'g' => 'G',\n      'h' => 'H',\n      'i' => 'I',\n      'j' =>\
    \ 'J',\n      'k' => 'K',\n      'l' => 'L',\n      'm' => 'M',\n      'n' =>\
    \ 'N',\n      'o' => 'O',\n      'p' => 'P',\n      'q' => 'Q',\n      'r' =>\
    \ 'R',\n      's' => 'S',\n      't' => 'T',\n      'u' => 'U',\n      'v' =>\
    \ 'V',\n      'w' => 'W',\n      'x' => 'X',\n      'y' => 'Y',\n      'z' =>\
    \ 'Z',\n      'A' => 'a',\n      'B' => 'b',\n      'C' => 'c',\n      'D' =>\
    \ 'd',\n      'E' => 'e',\n      'F' => 'f',\n      'G' => 'g',\n      'H' =>\
    \ 'h',\n      'I' => 'i',\n      'J' => 'j',\n      'K' => 'k',\n      'L' =>\
    \ 'l',\n      'M' => 'm',\n      'N' => 'n',\n      'O' => 'o',\n      'P' =>\
    \ 'p',\n      'Q' => 'q',\n      'R' => 'r',\n      'S' => 's',\n      'T' =>\
    \ 't',\n      'U' => 'u',\n      'V' => 'v',\n      'W' => 'w',\n      'X' =>\
    \ 'x',\n      'Y' => 'y',\n      'Z' => 'z',\n    )\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(strtr($string, \n            array('A'   => 'a', \n\
    \                  'a'   => 'A',\n                  '\xC4'  => 'Ae',\n       \
    \           '\xE4'  => 'AE',\n                  '\xDF'  => 'ss',\n           \
    \       'ss'  => '\xDF', \n                  '\xDC'  => 'Ue',\n              \
    \    '\xFC'  => 'UE',\n                  '\xD6'  => 'Oe',\n                  '\xF6\
    '  => 'OE',\n                  '\xDF'  => 'ss',\n                  'ss'  => '\xDF\
    ', \n                  '-'   => '-',\n                  '_'   => '_')\n      \
    \      ));\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3h9bx42p.php:30\n\
    Stack trace:\n#0 /tmp/tmp3h9bx42p.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3h9bx42p.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return str_replace(\n        array('a', 'e', 'i', 'o', 'u'),\n      \
    \  array('A', 'E', 'I', 'O', 'U'),\n        $string\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqlfdnih2.php:19\n\
    Stack trace:\n#0 /tmp/tmpqlfdnih2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpqlfdnih2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(\n        strtolower(\n            $string\n      \
    \  )\n    );\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp649htf6j.php:18\n\
    Stack trace:\n#0 /tmp/tmp649htf6j.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp649htf6j.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtr($string, array('A' => 'a', 'a' => 'A', 'I' => 'i', 'i' =>\
    \ 'I', 'O' => 'o', 'o' => 'O'));\n}\n\nfunction candidate(...$args) {\n    return\
    \ flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\")\
    \ !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\"\
    ) !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0jcbxxv.php:15\n\
    Stack trace:\n#0 /tmp/tmpg0jcbxxv.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpg0jcbxxv.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $string = strtolower($string);\n    $string = ucfirst($string);\n   \
    \ $string = strtoupper($string);\n    return $string;\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0pkilwm2.php:17\n\
    Stack trace:\n#0 /tmp/tmp0pkilwm2.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp0pkilwm2.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace('/./u', 'u', $string);\n}\n\n$result = flip_case('Hello');\n\
    var_dump($result);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for the suggestion.\
    \ I actually have something working now, but I am just trying to figure out a\
    \ way to do it without using regex and just use str_replace(). I tried using str_replace\
    \ to replace all instances of \\w with $string + strtoupper($string), but the\
    \ output isn't exactly correct. Sometimes it lowers the entire string and sometimes\
    \ it just adds numbers to the front.\n<|/ c |>\n<| c |>\nThis solution uses str_replace\
    \ which uses regexp so it's more complex and inefficient.  It's also very brittle\
    \ in the sense that it depends very much on the specific string you're using -\
    \ it doesn't scale well and should be used only as a last resort\n<|/ c |>\n<|\
    \ a tags=str-replace,php,string,strtoupper |>\nHere's my solution.\n<code>\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg95p3mw4.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtoupper(str_replace($string, '$1', $string));\n}\n\nfunction\
    \ candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5w0rz2x.php:15\n\
    Stack trace:\n#0 /tmp/tmpr5w0rz2x.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpr5w0rz2x.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtr($string, \n    array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z', '0'=>'0', '1'=>'1',\
    \ '2'=>'2', '3'=>'3', '4'=>'4', '5'=>'5', '6'=>'6', '7'=>'7', '8'=>'8', '9'=>'9'));\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsanw29d.php:16\n\
    Stack trace:\n#0 /tmp/tmphsanw29d.php(20): test()\n#1 {main}\n  thrown in /tmp/tmphsanw29d.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  // Replace all lowercase with uppercase\n  $string = ucwords(strtolower($string));\n\
    \n  // Replace all uppercase with lowercase\n  $string = ucfirst(strtoupper($string));\n\
    \n  return $string;\n}\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgwdfmcb.php:20\n\
    Stack trace:\n#0 /tmp/tmpjgwdfmcb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjgwdfmcb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(strtr($string, array('!' => '!!', \"'\" => '\\'\"',\
    \ \"#\" => '#!', \"$\" => '$$', \"&\" => '&!', \"#\" => '#!', \"%\" => '%%', \"\
    ?\" => '?!', \"*\" => '**', \"-\" => '-!', \"_\" => '__', \"<\" => '<<', \">\"\
    \ => '>>', \"|\" => '|!', \"\\\\\" => '\\\\!', \"|\" => '|!', \"\\\\\" => '\\\\\
    !', \"&\" => '&!', \"@\" => '@@', \"|\" => '|!', \"~\" => '~!', \"?\" => '?!',\
    \ \"'\" => '\\'\"', \"$\" => '$$', \"~\" => '~!', \"-\" => '-!', \"^\" => '^!',\
    \ \">\" => \">!\", \"<\" => '<<', \"|\" => '|!', \"\\\\\" => '\\\\!', \"-\" =>\
    \ '-!', \"_\" => '__', \"!\" => '!!', \"=\" => '==', \"-\" => '-!', \"_\" => '__',\
    \ \"'\" => '\\'\"', \"*\" => '**', \"\\\\\" => '\\\\!', \"@\" => '@@', \"-\" =>\
    \ '-!', \"_\" => '__', \"#\" => '#!', \"-\" => '-!', \"_\" => '__', \"|\" => '|!',\
    \ \"~\" => '~!', \"?\" => '?!', \"'\" => '\\'\"', \"$\" => '$$', \"-\" => '-!',\
    \ \"_\" => '__', \"|\" => '|!', \"\\\\\" => '\\\\!', \"|\" => '|!', \"\\\\\" =>\
    \ '\\\\!', \"&\" => '&!', \"@\" => '@@', \"~\" => '~!', \"?\" => '?!', \"'\" =>\
    \ '\\'\"', \"$\" => '$$', \"~\" => '~!', \"-\" => '-!', \"^\" => '^!', \">\" =>\
    \ \">!\", \"<\" => '<<', \"|\" => '|!', \"\\\\\" => '\\\\!', \"-\" => '-!', \"\
    _\" => '__', \"!\" => '!!', \"=\" => '==', \"-\" => '-!', \"_\" => '__', \"'\"\
    \ => '\\'\"', \"*\" => '**', \"\\\\\" => '\\\\!', \"@\" => '@@', \"-\" => '-!',\
    \ \"_\" => '__', \"#\" => '#!', \"-\" => '-!', \"_\" => '__', \"|\" => '|!', \"\
    ~\" => '~!', \"?\" => '?!', \"'\" => '\\'\"', \"$\" => '$$', \"-\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf50gmnin.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace_callback('/./u', create_function('$matches', 'return\
    \ strtoupper($matches[0]);'), $string);\n}\n\n/**\n * Trims the whitespace from\
    \ either end of a string.\n *\n * @param string $string\n * @param string $char\
    \ (optional, default 'space')\n *   - Character to be trimmed from both ends of\
    \ the string\n *   - `space` => whitespace characters only\n *   - `lf` => lone\
    \ line feed only\n *   - `crlf` => carriage return, line feed only\n *   - `tab`\
    \ => tab characters only\n *   - `cr` => carriage return only\n *   - `lfcr` =>\
    \ lone line feed, carriage return only\n *   - `tabcr` => tab characters, carriage\
    \ return only\n *   - `all` => trims characters from all sides of the string\n\
    \ * @return string\n *   - Empty string if the string is null or empty\n *   -\
    \ String with whitespace trimmed from the ends of the string\n *   - String with\
    \ whitespace trimmed from both ends of the string\n */\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprqzx9ptb.php:34\n\
    Stack trace:\n#0 /tmp/tmprqzx9ptb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprqzx9ptb.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/([a-z])/i', \"$1\", $string));\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis works, but doesn't conform to any coding standard,\
    \ so I'm going to hold off on accepting it for a bit in case someone comes up\
    \ with a better answer, otherwise I'll be accepting it\n<|/ c |>\n<| a dscore=2\
    \ tags=php,lowercase,uppercase,string |>\nA more generalized answer, with support\
    \ for both lower and upper case, and allows using any character class in the replacement\
    \ string:\n<code>\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp02ss1ixn.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case($string, MB_CASE_LOWER, MB_CASE_UPPER, \"UTF-8\"\
    );\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmp01suh6dc.php:6\nStack trace:\n#0 /tmp/tmp01suh6dc.php(10): flip_case('')\n\
    #1 /tmp/tmp01suh6dc.php(14): candidate('')\n#2 /tmp/tmp01suh6dc.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmp01suh6dc.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return preg_replace('/./u', 'u', strtoupper($string));\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp768ayosd.php:14\n\
    Stack trace:\n#0 /tmp/tmp768ayosd.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp768ayosd.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return preg_replace_callback('/./u', function ($matches) {\n        return\
    \ $matches[1] . strtoupper($matches[0]) . strtolower($matches[2]);\n    }, $string);\n\
    }\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrt1fdqa.php:16\n\
    Stack trace:\n#0 /tmp/tmpcrt1fdqa.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpcrt1fdqa.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtolower($string) . strtoupper($string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1h6mnjuv.php:15\n\
    Stack trace:\n#0 /tmp/tmp1h6mnjuv.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp1h6mnjuv.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $uppercase = preg_replace(\"/([a-z])/\", \"\\u$1\", $string); // Convert\
    \ all lower case letters to uppercase.\n    $lowercase = preg_replace(\"/([A-Z])/\"\
    , \"\\u$1\", $string); // Convert all upper case letters to lowercase.\n    return\
    \ $lowercase . $uppercase; // Combine the two to form the original string.\n}\n\
    function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_arhauz.php:16\n\
    Stack trace:\n#0 /tmp/tmp4_arhauz.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp4_arhauz.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  $lowercased = mb_strtolower($string, 'UTF-8');\n  return mb_strtoupper($lowercased,\
    \ 'UTF-8');\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease [don't use `mysql_*`\
    \ functions](http://stackoverflow.com/questions/12859942/why-shouldnt-i-use-mysql-functions-in-php),\
    \ They are no longer maintained and are [officially deprecated](https://wiki.php.net/rfc/mysql_deprecation).\
    \ Learn about [prepared statements](http://en.wikipedia.org/wiki/Prepared_statement)\
    \ instead, and consider using PDO, [it's not as hard as you think](http://jayblanchard.net/demystifying_php_pdo.html).\n\
    <|/ c |>\n<| c |>\nI'm aware of this, but this is just a personal project, so\
    \ I'd rather not change my entire code base. I don't intend to use mysql, I'm\
    \ aware of it's dangers.\n<|/ c |>\n<| c |>\nYou're welcome :) And that's what\
    \ I'd do, too. Personally, I use `PDO` all the time because I like it so much,\
    \ because I think it's also easier than using `mysql_*` functions.\n<|/ c |>\n\
    <| a tags=php,mysql,sql |>\nYou want to fetch the whole result set, process it,\
    \ and then send it back in one shot.\nIn MySQL, you can use select ... for update,\
    \ which will prevent other processes from updating the same row.  (This feature\
    \ is called \"select for update\" because it locks the row while your application\
    \ is in use.  Other processes will have to wait for the row to become available.)\n\
    So, you could try something like this:\n<code>\nselect *\nfrom ( <the query here>\
    \ )\nfor update;\n</code>\nBut, there are a few problems with this approach:\n\
    \nIt locks the whole table, which can be expensive.  And the query may lock the\
    \ same row that other processes are trying to modify.  So, you'll need to make\
    \ sure that these processes don't affect the row you're trying to read.\nIt will\
    \ require that the other queries be written to lock the table as well.\n\nA better\
    \ approach is to use a transaction.  That locks the table only while you're in\
    \ the transaction.  Your application will still need to lock the table while it's\
    \ reading the table for update.  But, the transaction doesn't affect the other\
    \ processes.\nSo, you can do something like this:\n<code>\nstart transaction;\n\
    \nselect *\nfrom ( <the query here> )\nfor update;\n\nif <you found a row to update>:\n\
    \  update <the row you found> ...\nelse\n  insert into \nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsobyvio8.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array('h' => 'H', 'i' => 'I', 'l' => 'L', 'o' =>\
    \ 'O', 'u' => 'U', 'y' => 'Y', 'o' => 'O', 'o' => 'O', 'u' => 'U', 'y' => 'Y'));\n\
    }\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
    ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi60ihwqj.php:15\n\
    Stack trace:\n#0 /tmp/tmpi60ihwqj.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpi60ihwqj.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    $flipped_string = '';\n    $temp_character = '';\n\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        $temp_character = $string[$i];\n    \
    \    if ($temp_character != strtolower($temp_character) && $temp_character !=\
    \ strtoupper($temp_character)) {\n            $flipped_string .= strtoupper($temp_character);\n\
    \        } else {\n            $flipped_string .= strtolower($temp_character);\n\
    \        }\n    }\n\n    return $flipped_string;\n}\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rv3xrh5.php:26\n\
    Stack trace:\n#0 /tmp/tmp6rv3xrh5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6rv3xrh5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return mb_convert_case(mb_strtolower($string), MB_CASE_UPPER, \"UTF-8\"\
    );\n}\n\nfunction candidate(...$args) {\n    return flip_case(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_convert_case()\
    \ in /tmp/tmpaev7qw3d.php:6\nStack trace:\n#0 /tmp/tmpaev7qw3d.php(10): flip_case('')\n\
    #1 /tmp/tmpaev7qw3d.php(14): candidate('')\n#2 /tmp/tmpaev7qw3d.php(19): test()\n\
    #3 {main}\n  thrown in /tmp/tmpaev7qw3d.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtoupper(preg_replace('/(\\w)/i', function($letter) {\n    \
    \    return strtolower($letter);\n    }, $string));\n}\n</code>\nThe regex replaces\
    \ every word (\\w) with a lowercase character converted into a lowercase string\
    \ and converted back into lowercase before returning.\nIf you don't like this,\
    \ you can also do it like this:\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0fkrjj7w.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return strtr($string, array(\n        'a' => 'A',\n        'b' => 'B',\n\
    \        'c' => 'C',\n        'd' => 'D',\n        'e' => 'E',\n        'f' =>\
    \ 'F',\n        'g' => 'G',\n        'h' => 'H',\n        'i' => 'I',\n      \
    \  'j' => 'J',\n        'k' => 'K',\n        'l' => 'L',\n        'm' => 'M',\n\
    \        'n' => 'N',\n        'o' => 'O',\n        'p' => 'P',\n        'q' =>\
    \ 'Q',\n        'r' => 'R',\n        's' => 'S',\n        't' => 'T',\n      \
    \  'u' => 'U',\n        'v' => 'V',\n        'w' => 'W',\n        'x' => 'X',\n\
    \        'y' => 'Y',\n        'z' => 'Z',\n        'A' => 'a',\n        'B' =>\
    \ 'b',\n        'C' => 'c',\n        'D' => 'd',\n        'E' => 'e',\n      \
    \  'F' => 'f',\n        'G' => 'g',\n        'H' => 'h',\n        'I' => 'i',\n\
    \        'J' => 'j',\n        'K' => 'k',\n        'L' => 'l',\n        'M' =>\
    \ 'm',\n        'N' => 'n',\n        'O' => 'o',\n        'P' => 'p',\n      \
    \  'Q' => 'q',\n        'R' => 'r',\n        'S' => 's',\n        'T' => 't',\n\
    \        'U' => 'u',\n        'V' => 'v',\n        'W' => 'w',\n        'X' =>\
    \ 'x',\n        'Y' => 'y',\n        'Z' => 'z',\n    ));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n    return ucwords(strtolower($string));\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=4 |>\nIf you don't want a regex solution, another option is\
    \ to use mb_strtolower and mb_strtoupper:\n<code>\nmb_strtolower($str, 'UTF-8');\n\
    mb_strtoupper($str, 'UTF-8');\n</code>\n<|/ a tags=php,string |>\n<| c |>\nI like\
    \ this because it is more readable than the regex. It also allows you to use other\
    \ languages besides English strings.\n<|/ c |>\n<| a tags=php,string |>\nI like\
    \ the solution using preg_replace (preg_replace_callback) because it is simple\
    \ and fast enough. \nBut there is an issue with this solution: it replaces spaces\
    \ also.\n<code>\nfunction candidate(...$args) {\n    return flip_case(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have\
    \ violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf5zn8ui1.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
    \ {\n  return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n\nfunction candidate(...$args)\
    \ {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqugrvknp.php:15\n\
    Stack trace:\n#0 /tmp/tmpqugrvknp.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpqugrvknp.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
