name: HumanEval_24_largest_divisor
language: ts
prompt: "//For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n\
  \  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n\
  \  assert.deepEqual(candidate(49),7);\n}\n\ntest();"
completions: ["    let divisor = n - 1;\n    while (n % divisor !== 0) {\n       \
    \ divisor--;\n    }\n    return divisor;\n}\n", "    let largest_divisor = 1;\n\
    \    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\n", "    let divisor\
    \ = n - 1;\n    while (n % divisor !== 0) {\n        divisor--;\n    }\n    return\
    \ divisor;\n}\n", "    let largest_divisor = 1;\n    for (let i = 2; i < n; i++)\
    \ {\n        if (n % i === 0) {\n            largest_divisor = i;\n        }\n\
    \    }\n    return largest_divisor;\n}\n", "    let divisor = n - 1;\n    while\
    \ (n % divisor !== 0) {\n        divisor--;\n    }\n    return divisor;\n}\n",
  "    let largest_divisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n\
    \ % i === 0) {\n            largest_divisor = i;\n        }\n    }\n    return\
    \ largest_divisor;\n}\n", "    let largest = 1;\n    for (let i = 2; i < n; i++)\
    \ {\n        if (n % i === 0) {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\n", "    let divisor = n - 1;\n    while (n % divisor\
    \ !== 0) {\n        divisor--;\n    }\n    return divisor;\n}\n", "  let largestDivisor\
    \ = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      largestDivisor\
    \ = i;\n    }\n  }\n  return largestDivisor;\n}\n", "    let largest_divisor =\
    \ 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n        \
    \    largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n",
  "    let largestDivisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n %\
    \ i === 0) {\n            largestDivisor = i;\n        }\n    }\n    return largestDivisor;\n\
    }\n", "    let largestDivisor = 0;\n    for (let i = 1; i < n; i++) {\n      \
    \  if (n % i === 0) {\n            largestDivisor = i;\n        }\n    }\n   \
    \ return largestDivisor;\n}\n", "    let largestDivisor = 0;\n    for (let i =\
    \ n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            largestDivisor\
    \ = i;\n            break;\n        }\n    }\n    return largestDivisor;\n}\n",
  "    let largest_divisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n\
    \ % i === 0) {\n            largest_divisor = i;\n        }\n    }\n    return\
    \ largest_divisor;\n}\n", "  let i = n - 1;\n  while (i > 0) {\n    if (n % i\
    \ === 0) {\n      return i;\n    }\n    i--;\n  }\n  return i;\n}\n", "    let\
    \ divisor = n - 1;\n    while (n % divisor !== 0) {\n        divisor--;\n    }\n\
    \    return divisor;\n}\n", "    let divisor = n - 1;\n    while (n % divisor\
    \ !== 0) {\n        divisor--;\n    }\n    return divisor;\n}\n", "    let largest\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest = i;\n        }\n    }\n    return largest;\n}\n", "    let largest\
    \ = 0;\n    for (let i = 1; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest = i;\n        }\n    }\n    return largest;\n}\n", "    let divisor\
    \ = n - 1;\n    while (n % divisor !== 0) {\n        divisor--;\n    }\n    return\
    \ divisor;\n}\n", "  let largest = 0;\n  for (let i = 1; i < n; i++) {\n    if\
    \ (n % i === 0) {\n      largest = i;\n    }\n  }\n  return largest;\n}\n", " \
    \   let largest = 0;\n    for (let i = 1; i < n; i++) {\n        if (n % i ===\
    \ 0) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n",
  "    let divisor = n - 1;\n    while (n % divisor !== 0) {\n        divisor -= 1;\n\
    \    }\n    return divisor;\n}\n", "    let largest_divisor = 1;\n    for (let\
    \ i = 2; i < n; i++) {\n        if (n % i === 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\n", "    let divisor\
    \ = n - 1;\n    while (n % divisor !== 0) {\n        divisor--;\n    }\n    return\
    \ divisor;\n}\n", "    let largest = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (n % i === 0) {\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}\n", "    let largest = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (n % i === 0) {\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}\n", "    let largest = 0;\n    for (let i = 1; i < n; i++) {\n \
    \       if (n % i === 0) {\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}\n", "    let i = n - 1;\n    while (i > 0) {\n        if (n % i\
    \ === 0) {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ i;\n}\n", "  let largestDivisor = 0;\n  for (let i = 1; i < n; i++) {\n    if\
    \ (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n\
    }\n", "    let largestDivisor = 1;\n    for (let i = 2; i < n; i++) {\n      \
    \  if (n % i === 0) {\n            largestDivisor = i;\n        }\n    }\n   \
    \ return largestDivisor;\n}\n", "    let divisor = n - 1;\n    while (n % divisor\
    \ !== 0) {\n        divisor--;\n    }\n    return divisor;\n}\n", "    for (let\
    \ i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n\
    \        }\n    }\n    return 0;\n}\n", "    let largestDivisor = 1;\n    for\
    \ (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            largestDivisor\
    \ = i;\n        }\n    }\n    return largestDivisor;\n}\n", "    let largest_divisor\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n",
  "    let largest = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i ===\
    \ 0) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n",
  "    let largest_divisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n\
    \ % i === 0) {\n            largest_divisor = i;\n        }\n    }\n    return\
    \ largest_divisor;\n}\n", "  let largest = 0;\n  for (let i = 1; i < n; i++) {\n\
    \    if (n % i === 0) {\n      largest = i;\n    }\n  }\n  return largest;\n}\n",
  "    let largest_divisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n\
    \ % i === 0) {\n            largest_divisor = i;\n        }\n    }\n    return\
    \ largest_divisor;\n}\n", "    for (let i = n - 1; i > 0; i--) {\n        if (n\
    \ % i === 0) {\n            return i;\n        }\n    }\n    return 0;\n}\n",
  "    let largest_divisor = 0;\n    for (let i = 1; i < n; i++) {\n        if (n\
    \ % i === 0) {\n            largest_divisor = i;\n        }\n    }\n    return\
    \ largest_divisor;\n}\n", "    let i = n - 1;\n    while (i > 0) {\n        if\
    \ (n % i === 0) {\n            return i;\n        }\n        i--;\n    }\n   \
    \ return 0;\n}\n", "    let largest = 0;\n    for (let i = 1; i < n; i++) {\n\
    \        if (n % i === 0) {\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}\n", "    for (let i = n - 1; i > 0; i--) {\n        if (n % i ===\
    \ 0) {\n            return i;\n        }\n    }\n    return n;\n}\n", "    let\
    \ largest_divisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i ===\
    \ 0) {\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n\
    }\n", "    let divisor = n - 1;\n    while (n % divisor !== 0) {\n        divisor--;\n\
    \    }\n    return divisor;\n}\n", "    let largest_divisor = 1;\n    for (let\
    \ i = 2; i < n; i++) {\n        if (n % i === 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\n", "    let largest_divisor\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n",
  "    let divisor = n - 1;\n    while (n % divisor !== 0) {\n        divisor--;\n\
    \    }\n    return divisor;\n}\n", "    let divisor = n - 1;\n    while (n % divisor\
    \ !== 0) {\n        divisor--;\n    }\n    return divisor;\n}\n", "    let largest_divisor\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n",
  "    let largest = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i ===\
    \ 0) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n",
  "    let i = n - 1;\n    while (i > 0) {\n        if (n % i === 0) {\n         \
    \   return i;\n        }\n        i--;\n    }\n    return 0;\n}\n", "    let largest_divisor\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n",
  "    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n           \
    \ return i;\n        }\n    }\n    return 1;\n}\n", "    let divisor = n - 1;\n\
    \    while (n % divisor !== 0) {\n        divisor--;\n    }\n    return divisor;\n\
    }\n", "    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n   \
    \         return i;\n        }\n    }\n    return 0;\n}\n", "    let largest_divisor\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n",
  "    let largestDivisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n %\
    \ i === 0) {\n            largestDivisor = i;\n        }\n    }\n    return largestDivisor;\n\
    }\n", "  let divisor = n - 1;\n  while (n % divisor !== 0) {\n    divisor -= 1;\n\
    \  }\n  return divisor;\n}\n", "    let divisor = n - 1;\n    while (n % divisor\
    \ !== 0) {\n        divisor--;\n    }\n    return divisor;\n}\n", "    let i =\
    \ n - 1;\n    while (i > 0) {\n        if (n % i === 0) {\n            return\
    \ i;\n        }\n        i--;\n    }\n    return 0;\n}\n", "    let largest =\
    \ 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\n", "    let largestDivisor\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largestDivisor = i;\n        }\n    }\n    return largestDivisor;\n}\n",
  "    let largest_divisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n\
    \ % i === 0) {\n            largest_divisor = i;\n        }\n    }\n    return\
    \ largest_divisor;\n}\n", "    let largest_divisor = 1;\n    for (let i = 2; i\
    \ < n; i++) {\n        if (n % i === 0) {\n            largest_divisor = i;\n\
    \        }\n    }\n    return largest_divisor;\n}\n", "    let largest_divisor\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n",
  "    let largestDivisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n %\
    \ i === 0) {\n            largestDivisor = i;\n        }\n    }\n    return largestDivisor;\n\
    }\n", "    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n   \
    \         return i;\n        }\n    }\n    return 0;\n}\n", "    let largestDivisor\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largestDivisor = i;\n        }\n    }\n    return largestDivisor;\n}\n",
  "    let largest = 0;\n    for (let i = 1; i < n; i++) {\n        if (n % i ===\
    \ 0) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n",
  "    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n           \
    \ return i;\n        }\n    }\n    return 1;\n}\n", "    let largest_divisor =\
    \ 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n        \
    \    largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n",
  "    let largest_divisor = 1;\n    for (let i = 2; i < n; i++) {\n        if (n\
    \ % i === 0) {\n            largest_divisor = i;\n        }\n    }\n    return\
    \ largest_divisor;\n}\n", "    let divisor = n - 1;\n    while (n % divisor !==\
    \ 0) {\n        divisor--;\n    }\n    return divisor;\n}\n", "    let largest_divisor\
    \ = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
