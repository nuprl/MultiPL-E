language: ts
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            sorted.push(arr[i]);\n        }\n    }\n    sorted.sort();\n\
    \    for (let i = sorted.length - 1; i >= 0; i--) {\n        switch (sorted[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sortedArr\
    \ = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => a - b);\n  const reversedArr\
    \ = sortedArr.reverse();\n  const result = reversedArr.map(num => {\n    switch\
    \ (num) {\n      case 1:\n        return \"One\";\n      case 2:\n        return\
    \ \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n        return\
    \ \"Four\";\n      case 5:\n        return \"Five\";\n      case 6:\n        return\
    \ \"Six\";\n      case 7:\n        return \"Seven\";\n      case 8:\n        return\
    \ \"Eight\";\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqbt1xl1o.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1: result.push(\"One\"); break;\n                case 2: result.push(\"\
    Two\"); break;\n                case 3: result.push(\"Three\"); break;\n     \
    \           case 4: result.push(\"Four\"); break;\n                case 5: result.push(\"\
    Five\"); break;\n                case 6: result.push(\"Six\"); break;\n      \
    \          case 7: result.push(\"Seven\"); break;\n                case 8: result.push(\"\
    Eight\"); break;\n                case 9: result.push(\"Nine\"); break;\n    \
    \        }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i: number = 0; i < sorted.length; i++) {\n     \
    \   if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n\
    \                case 1:\n                    result.push(\"One\");\n        \
    \            break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted: number[] = arr.filter(x => x > 0 && x < 10).sort((a,\
    \ b) => a - b);\n    const reversed: number[] = sorted.reverse();\n    const names:\
    \ string[] = reversed.map(x => {\n        switch (x) {\n            case 1:\n\
    \                return \"One\";\n            case 2:\n                return\
    \ \"Two\";\n            case 3:\n                return \"Three\";\n         \
    \   case 4:\n                return \"Four\";\n            case 5:\n         \
    \       return \"Five\";\n            case 6:\n                return \"Six\"\
    ;\n            case 7:\n                return \"Seven\";\n            case 8:\n\
    \                return \"Eight\";\n            case 9:\n                return\
    \ \"Nine\";\n        }\n    });\n    return names;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] == 1) {\n      \
    \      result.push(\"One\");\n        } else if (reversed[i] == 2) {\n       \
    \     result.push(\"Two\");\n        } else if (reversed[i] == 3) {\n        \
    \    result.push(\"Three\");\n        } else if (reversed[i] == 4) {\n       \
    \     result.push(\"Four\");\n        } else if (reversed[i] == 5) {\n       \
    \     result.push(\"Five\");\n        } else if (reversed[i] == 6) {\n       \
    \     result.push(\"Six\");\n        } else if (reversed[i] == 7) {\n        \
    \    result.push(\"Seven\");\n        } else if (reversed[i] == 8) {\n       \
    \     result.push(\"Eight\");\n        } else if (reversed[i] == 9) {\n      \
    \      result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    let filtered:\
    \ number[] = reversed.filter(num => num >= 1 && num <= 9);\n    for (let num of\
    \ filtered) {\n        switch (num) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(sortedArr[i]);\n\
    \        }\n    }\n    result.reverse();\n    let resultString: string[] = [];\n\
    \    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n\
    \            case 1:\n                resultString.push(\"One\");\n          \
    \      break;\n            case 2:\n                resultString.push(\"Two\"\
    );\n                break;\n            case 3:\n                resultString.push(\"\
    Three\");\n                break;\n            case 4:\n                resultString.push(\"\
    Four\");\n                break;\n            case 5:\n                resultString.push(\"\
    Five\");\n                break;\n            case 6:\n                resultString.push(\"\
    Six\");\n                break;\n            case 7:\n                resultString.push(\"\
    Seven\");\n                break;\n            case 8:\n                resultString.push(\"\
    Eight\");\n                break;\n            case 9:\n                resultString.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return resultString;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprgirgbf6.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmprgirgbf6.ts(25,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmprgirgbf6.ts(28,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmprgirgbf6.ts(31,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmprgirgbf6.ts(34,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmprgirgbf6.ts(37,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmprgirgbf6.ts(40,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmprgirgbf6.ts(43,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmprgirgbf6.ts(46,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmprgirgbf6.ts(49,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738812
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(num_to_string(sorted[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp959sw415.ts(18,25): error TS2304: Cannot find name
    ''num_to_string''.

    '
  timestamp: 1659738812
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const map: { [key: number]:\
    \ string } = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\"\
    ,\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7:\
    \ \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    arr.forEach(element\
    \ => {\n        if (element > 0 && element < 10) {\n            result.push(map[element]);\n\
    \        }\n    });\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmprb9d5rg0.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmprb9d5rg0.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b)\
    \ => a - b);\n    const reversed = sorted.reverse();\n    const result = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let arr1: number[] = [];\n  let arr2: string[] = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n     \
    \ arr1.push(arr[i]);\n    }\n  }\n  arr1.sort();\n  for (let i = 0; i < arr1.length;\
    \ i++) {\n    switch (arr1[i]) {\n      case 1:\n        arr2.push(\"One\");\n\
    \        break;\n      case 2:\n        arr2.push(\"Two\");\n        break;\n\
    \      case 3:\n        arr2.push(\"Three\");\n        break;\n      case 4:\n\
    \        arr2.push(\"Four\");\n        break;\n      case 5:\n        arr2.push(\"\
    Five\");\n        break;\n      case 6:\n        arr2.push(\"Six\");\n       \
    \ break;\n      case 7:\n        arr2.push(\"Seven\");\n        break;\n     \
    \ case 8:\n        arr2.push(\"Eight\");\n        break;\n      case 9:\n    \
    \    arr2.push(\"Nine\");\n        break;\n    }\n  }\n  arr2.reverse();\n  return\
    \ arr2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i].toString());\n\
    \        }\n    }\n    result.sort();\n    result.reverse();\n    for (let i =\
    \ 0; i < result.length; i++) {\n        switch (result[i]) {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversed: number[] = sorted.reverse();\n  for (let i =\
    \ 0; i < reversed.length; i++) {\n    if (reversed[i] === 1) {\n      result.push(\"\
    One\");\n    } else if (reversed[i] === 2) {\n      result.push(\"Two\");\n  \
    \  } else if (reversed[i] === 3) {\n      result.push(\"Three\");\n    } else\
    \ if (reversed[i] === 4) {\n      result.push(\"Four\");\n    } else if (reversed[i]\
    \ === 5) {\n      result.push(\"Five\");\n    } else if (reversed[i] === 6) {\n\
    \      result.push(\"Six\");\n    } else if (reversed[i] === 7) {\n      result.push(\"\
    Seven\");\n    } else if (reversed[i] === 8) {\n      result.push(\"Eight\");\n\
    \    } else if (reversed[i] === 9) {\n      result.push(\"Nine\");\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let arr1: number[] = [];\n    let arr2: string[] = [];\n   \
    \ for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort((a, b)\
    \ => a - b);\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i]\
    \ === 1) {\n            arr2.push(\"One\");\n        } else if (arr1[i] === 2)\
    \ {\n            arr2.push(\"Two\");\n        } else if (arr1[i] === 3) {\n  \
    \          arr2.push(\"Three\");\n        } else if (arr1[i] === 4) {\n      \
    \      arr2.push(\"Four\");\n        } else if (arr1[i] === 5) {\n           \
    \ arr2.push(\"Five\");\n        } else if (arr1[i] === 6) {\n            arr2.push(\"\
    Six\");\n        } else if (arr1[i] === 7) {\n            arr2.push(\"Seven\"\
    );\n        } else if (arr1[i] === 8) {\n            arr2.push(\"Eight\");\n \
    \       } else if (arr1[i] === 9) {\n            arr2.push(\"Nine\");\n      \
    \  }\n    }\n    return arr2.reverse();\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    let\
    \ filteredArr: number[] = reversedArr.filter(num => num >= 1 && num <= 9);\n \
    \   for (let i = 0; i < filteredArr.length; i++) {\n        switch (filteredArr[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const result: string[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  for (let i = 0;\
    \ i < reversedArr.length; i++) {\n    if (reversedArr[i] === 1) {\n      result.push(\"\
    One\");\n    } else if (reversedArr[i] === 2) {\n      result.push(\"Two\");\n\
    \    } else if (reversedArr[i] === 3) {\n      result.push(\"Three\");\n    }\
    \ else if (reversedArr[i] === 4) {\n      result.push(\"Four\");\n    } else if\
    \ (reversedArr[i] === 5) {\n      result.push(\"Five\");\n    } else if (reversedArr[i]\
    \ === 6) {\n      result.push(\"Six\");\n    } else if (reversedArr[i] === 7)\
    \ {\n      result.push(\"Seven\");\n    } else if (reversedArr[i] === 8) {\n \
    \     result.push(\"Eight\");\n    } else if (reversedArr[i] === 9) {\n      result.push(\"\
    Nine\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ < 1 || sorted[i] > 9) {\n            continue;\n        }\n        switch (sorted[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) =>\
    \ a - b);\n    let reversed = sorted.reverse();\n    let names = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  'Eight', 'Five',\n  'Four',  'Three',\n  'Two',   'Two',\n  'One',\
    \   'One'\n]\n[]\n[ 'One' ]\n"
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const nums: number[] = arr.filter(num => num >= 1 && num <= 9);\n\
    \  const sortedNums: number[] = nums.sort((a, b) => a - b);\n  const reversedNums:\
    \ number[] = sortedNums.reverse();\n  const numNames: string[] = reversedNums.map(num\
    \ => {\n    switch (num) {\n      case 1:\n        return \"One\";\n      case\
    \ 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n    \
    \  case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n\
    \      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\"\
    ;\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"\
    Nine\";\n    }\n  });\n  return numNames;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const sortedArr = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            result.push(getName(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuo27qp1a.ts(18,25): error TS2304: Cannot find name
    ''getName''.

    '
  timestamp: 1659738816
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(getNumberName(sorted[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6spkq8j3.ts(18,25): error TS2304: Cannot find name
    ''getNumberName''.

    '
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let arr_str: string[] = [];\n    let arr_sort: number[] = [];\n\
    \    let arr_sort_str: string[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            arr_sort.push(arr[i]);\n\
    \        }\n    }\n    arr_sort.sort();\n    for (let i = 0; i < arr_sort.length;\
    \ i++) {\n        switch (arr_sort[i]) {\n            case 1:\n              \
    \  arr_sort_str.push(\"One\");\n                break;\n            case 2:\n\
    \                arr_sort_str.push(\"Two\");\n                break;\n       \
    \     case 3:\n                arr_sort_str.push(\"Three\");\n               \
    \ break;\n            case 4:\n                arr_sort_str.push(\"Four\");\n\
    \                break;\n            case 5:\n                arr_sort_str.push(\"\
    Five\");\n                break;\n            case 6:\n                arr_sort_str.push(\"\
    Six\");\n                break;\n            case 7:\n                arr_sort_str.push(\"\
    Seven\");\n                break;\n            case 8:\n                arr_sort_str.push(\"\
    Eight\");\n                break;\n            case 9:\n                arr_sort_str.push(\"\
    Nine\");\n                break;\n        }\n    }\n    for (let i = arr_sort_str.length\
    \ - 1; i >= 0; i--) {\n        arr_str.push(arr_sort_str[i]);\n    }\n    return\
    \ arr_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(sorted[i].toString());\n \
    \       }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b).filter(num => num >= 1 && num <= 9);\n    for (let i = sortedArr.length\
    \ - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n\
    \                result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i: number = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n\
    \            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n\
    \            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n\
    \            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n\
    \            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n\
    \            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n\
    \            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n\
    \            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i: number = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n\
    \            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n\
    \            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n\
    \            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n\
    \            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n\
    \            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n\
    \            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n\
    \            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i].toString());\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    let reversed: number[] = result.reverse();\n    let final: string[]\
    \ = [];\n    for (let i = 0; i < reversed.length; i++) {\n        switch (reversed[i])\
    \ {\n            case 1:\n                final.push(\"One\");\n             \
    \   break;\n            case 2:\n                final.push(\"Two\");\n      \
    \          break;\n            case 3:\n                final.push(\"Three\");\n\
    \                break;\n            case 4:\n                final.push(\"Four\"\
    );\n                break;\n            case 5:\n                final.push(\"\
    Five\");\n                break;\n            case 6:\n                final.push(\"\
    Six\");\n                break;\n            case 7:\n                final.push(\"\
    Seven\");\n                break;\n            case 8:\n                final.push(\"\
    Eight\");\n                break;\n            case 9:\n                final.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return final;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpszyhqvj3.ts(18,25): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpszyhqvj3.ts(21,9):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i: number = 0; i < sortedArr.length; i++) {\n  \
    \      if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(numbers[sortedArr[i]]);\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnrtppau5.ts(18,25): error TS2552: Cannot find name
    ''numbers''. Did you mean ''Number''?

    '
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i].toString());\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i]\
    \ > 0 && sortedArr[i] < 10) {\n      switch (sortedArr[i]) {\n        case 1:\n\
    \          result.push(\"One\");\n          break;\n        case 2:\n        \
    \  result.push(\"Two\");\n          break;\n        case 3:\n          result.push(\"\
    Three\");\n          break;\n        case 4:\n          result.push(\"Four\");\n\
    \          break;\n        case 5:\n          result.push(\"Five\");\n       \
    \   break;\n        case 6:\n          result.push(\"Six\");\n          break;\n\
    \        case 7:\n          result.push(\"Seven\");\n          break;\n      \
    \  case 8:\n          result.push(\"Eight\");\n          break;\n        case\
    \ 9:\n          result.push(\"Nine\");\n          break;\n      }\n    }\n  }\n\
    \  return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let res: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            res.push(\"One\");\n        } else if (reversedArr[i] === 2)\
    \ {\n            res.push(\"Two\");\n        } else if (reversedArr[i] === 3)\
    \ {\n            res.push(\"Three\");\n        } else if (reversedArr[i] === 4)\
    \ {\n            res.push(\"Four\");\n        } else if (reversedArr[i] === 5)\
    \ {\n            res.push(\"Five\");\n        } else if (reversedArr[i] === 6)\
    \ {\n            res.push(\"Six\");\n        } else if (reversedArr[i] === 7)\
    \ {\n            res.push(\"Seven\");\n        } else if (reversedArr[i] === 8)\
    \ {\n            res.push(\"Eight\");\n        } else if (reversedArr[i] === 9)\
    \ {\n            res.push(\"Nine\");\n        }\n    }\n    return res;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let numbers: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            numbers.push(arr[i]);\n        }\n    }\n    numbers.sort();\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        switch (numbers[i]) {\n\
    \            case 1:\n                result.push(\"One\");\n                break;\n\
    \            case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversedArr: number[] = sortedArr.reverse();\n  for (let\
    \ i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] === 1) {\n   \
    \   result.push(\"One\");\n    } else if (reversedArr[i] === 2) {\n      result.push(\"\
    Two\");\n    } else if (reversedArr[i] === 3) {\n      result.push(\"Three\");\n\
    \    } else if (reversedArr[i] === 4) {\n      result.push(\"Four\");\n    } else\
    \ if (reversedArr[i] === 5) {\n      result.push(\"Five\");\n    } else if (reversedArr[i]\
    \ === 6) {\n      result.push(\"Six\");\n    } else if (reversedArr[i] === 7)\
    \ {\n      result.push(\"Seven\");\n    } else if (reversedArr[i] === 8) {\n \
    \     result.push(\"Eight\");\n    } else if (reversedArr[i] === 9) {\n      result.push(\"\
    Nine\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i: number = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n\
    \            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n\
    \            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n\
    \            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n\
    \            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n\
    \            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n\
    \            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n\
    \            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b).filter(x => x >= 1 && x <= 9);\n    for (let i = sortedArr.length\
    \ - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n\
    \                result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a,\
    \ b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(num\
    \ => {\n    switch (num) {\n      case 1:\n        return \"One\";\n      case\
    \ 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n    \
    \  case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n\
    \      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\"\
    ;\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"\
    Nine\";\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const result: string[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  for (let i = 0;\
    \ i < reversedArr.length; i++) {\n    if (reversedArr[i] === 1) {\n      result.push(\"\
    One\");\n    } else if (reversedArr[i] === 2) {\n      result.push(\"Two\");\n\
    \    } else if (reversedArr[i] === 3) {\n      result.push(\"Three\");\n    }\
    \ else if (reversedArr[i] === 4) {\n      result.push(\"Four\");\n    } else if\
    \ (reversedArr[i] === 5) {\n      result.push(\"Five\");\n    } else if (reversedArr[i]\
    \ === 6) {\n      result.push(\"Six\");\n    } else if (reversedArr[i] === 7)\
    \ {\n      result.push(\"Seven\");\n    } else if (reversedArr[i] === 8) {\n \
    \     result.push(\"Eight\");\n    } else if (reversedArr[i] === 9) {\n      result.push(\"\
    Nine\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(getNumberName(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp46pd95ai.ts(18,25): error TS2304: Cannot find name
    ''getNumberName''.

    '
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (reversedArr[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) =>\
    \ a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(x\
    \ => {\n    switch (x) {\n      case 1:\n        return \"One\";\n      case 2:\n\
    \        return \"Two\";\n      case 3:\n        return \"Three\";\n      case\
    \ 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n    \
    \  case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n\
    \      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\"\
    ;\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    let filtered:\
    \ number[] = reversed.filter(num => num >= 1 && num <= 9);\n    for (let i = 0;\
    \ i < filtered.length; i++) {\n        switch (filtered[i]) {\n            case\
    \ 1:\n                result.push(\"One\");\n                break;\n        \
    \    case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    let filtered:\
    \ number[] = reversed.filter(num => num >= 1 && num <= 9);\n    for (let i = 0;\
    \ i < filtered.length; i++) {\n        switch (filtered[i]) {\n            case\
    \ 1:\n                result.push(\"One\");\n                break;\n        \
    \    case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    let\
    \ filteredArr: number[] = reversedArr.filter(num => num > 0 && num < 10);\n  \
    \  for (let i = 0; i < filteredArr.length; i++) {\n        switch (filteredArr[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738821
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a,\
    \ b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(num\
    \ => {\n    switch (num) {\n      case 1:\n        return \"One\";\n      case\
    \ 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n    \
    \  case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n\
    \      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\"\
    ;\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"\
    Nine\";\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            sorted.push(arr[i]);\n        }\n    }\n    sorted.sort();\n\
    \    for (let i = sorted.length - 1; i >= 0; i--) {\n        switch (sorted[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        if (temp[i]\
    \ === 1) {\n            result.push(\"One\");\n        } else if (temp[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (temp[i] === 3) {\n\
    \            result.push(\"Three\");\n        } else if (temp[i] === 4) {\n  \
    \          result.push(\"Four\");\n        } else if (temp[i] === 5) {\n     \
    \       result.push(\"Five\");\n        } else if (temp[i] === 6) {\n        \
    \    result.push(\"Six\");\n        } else if (temp[i] === 7) {\n            result.push(\"\
    Seven\");\n        } else if (temp[i] === 8) {\n            result.push(\"Eight\"\
    );\n        } else if (temp[i] === 9) {\n            result.push(\"Nine\");\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738821
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(n => n >= 1 && n <= 9).sort((a, b)\
    \ => a - b);\n    const reversed = sorted.reverse();\n    const result = reversed.map(n\
    \ => {\n        switch (n) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738821
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqbt1xl1o.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const result: string[] = [];\n  const map: { [key: number]: string\
    \ } = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\"\
    ,\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n \
    \   9: \"Nine\",\n  };\n  const filteredArr = arr.filter((num) => num >= 1 &&\
    \ num <= 9);\n  filteredArr.sort((a, b) => a - b);\n  filteredArr.reverse();\n\
    \  filteredArr.forEach((num) => {\n    result.push(map[num]);\n  });\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738821
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    sorted.forEach(num => {\n        if (num > 0 && num < 10)\
    \ {\n            result.push(numToString(num));\n        }\n    });\n    return\
    \ result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpihcc7d0g.ts(18,25): error TS2304: Cannot find name
    ''numToString''.

    '
  timestamp: 1659738821
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversedArr: number[] = sortedArr.reverse();\n  for (let\
    \ i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] === 1) {\n   \
    \   result.push(\"One\");\n    } else if (reversedArr[i] === 2) {\n      result.push(\"\
    Two\");\n    } else if (reversedArr[i] === 3) {\n      result.push(\"Three\");\n\
    \    } else if (reversedArr[i] === 4) {\n      result.push(\"Four\");\n    } else\
    \ if (reversedArr[i] === 5) {\n      result.push(\"Five\");\n    } else if (reversedArr[i]\
    \ === 6) {\n      result.push(\"Six\");\n    } else if (reversedArr[i] === 7)\
    \ {\n      result.push(\"Seven\");\n    } else if (reversedArr[i] === 8) {\n \
    \     result.push(\"Eight\");\n    } else if (reversedArr[i] === 9) {\n      result.push(\"\
    Nine\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    if (arr.length === 0) {\n        return [];\n    }\n    const\
    \ sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a - b);\n    const\
    \ reversed = sorted.reverse();\n    const result = reversed.map(x => {\n     \
    \   switch (x) {\n            case 1:\n                return \"One\";\n     \
    \       case 2:\n                return \"Two\";\n            case 3:\n      \
    \          return \"Three\";\n            case 4:\n                return \"Four\"\
    ;\n            case 5:\n                return \"Five\";\n            case 6:\n\
    \                return \"Six\";\n            case 7:\n                return\
    \ \"Seven\";\n            case 8:\n                return \"Eight\";\n       \
    \     case 9:\n                return \"Nine\";\n        }\n    });\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738821
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (reversedArr[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            sorted.push(arr[i]);\n        }\n    }\n    sorted.sort();\n\
    \    for (let i = sorted.length - 1; i >= 0; i--) {\n        switch (sorted[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqbt1xl1o.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i].toString());\n\
    \        }\n    }\n    result.sort();\n    result.reverse();\n    for (let i =\
    \ 0; i < result.length; i++) {\n        switch (result[i]) {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a,\
    \ b) => a - b);\n    const reversed = sorted.reverse();\n    const result = reversed.map(num\
    \ => {\n        switch (num) {\n            case 1:\n                return \"\
    One\";\n            case 2:\n                return \"Two\";\n            case\
    \ 3:\n                return \"Three\";\n            case 4:\n               \
    \ return \"Four\";\n            case 5:\n                return \"Five\";\n  \
    \          case 6:\n                return \"Six\";\n            case 7:\n   \
    \             return \"Seven\";\n            case 8:\n                return \"\
    Eight\";\n            case 9:\n                return \"Nine\";\n        }\n \
    \   });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const nums = arr.filter(num => num >= 1 && num <= 9).sort((a,\
    \ b) => b - a);\n  const numNames = nums.map(num => {\n    switch (num) {\n  \
    \    case 1:\n        return \"One\";\n      case 2:\n        return \"Two\";\n\
    \      case 3:\n        return \"Three\";\n      case 4:\n        return \"Four\"\
    ;\n      case 5:\n        return \"Five\";\n      case 6:\n        return \"Six\"\
    ;\n      case 7:\n        return \"Seven\";\n      case 8:\n        return \"\
    Eight\";\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return numNames;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738821
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] <\
    \ 10) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort();\n\
    \    temp.reverse();\n    for (let i = 0; i < temp.length; i++) {\n        switch\
    \ (temp[i]) {\n            case 1:\n                result.push(\"One\");\n  \
    \              break;\n            case 2:\n                result.push(\"Two\"\
    );\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const result: string[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i]\
    \ >= 1 && sortedArr[i] <= 9) {\n      result.push(numToString(sortedArr[i]));\n\
    \    }\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpafwvmiji.ts(18,19): error TS2304: Cannot find name
    ''numToString''.

    '
  timestamp: 1659738821
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    if (arr.length === 0) {\n  \
    \      return result;\n    }\n    let sorted: number[] = arr.sort((a, b) => a\
    \ - b).filter(item => item > 0 && item < 10);\n    for (let i = sorted.length\
    \ - 1; i >= 0; i--) {\n        switch (sorted[i]) {\n            case 1:\n   \
    \             result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const result: string[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i]\
    \ > 0 && sortedArr[i] < 10) {\n      result.push(numToString(sortedArr[i]));\n\
    \    }\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptsobkrnc.ts(18,19): error TS2304: Cannot find name
    ''numToString''.

    '
  timestamp: 1659738821
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] >= 1\
    \ && reversedArr[i] <= 9) {\n            switch (reversedArr[i]) {\n         \
    \       case 1:\n                    result.push(\"One\");\n                 \
    \   break;\n                case 2:\n                    result.push(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversedArr: number[] = sortedArr.reverse();\n  let filteredArr:\
    \ number[] = reversedArr.filter(\n    (num) => num > 0 && num < 10\n  );\n  for\
    \ (let i = 0; i < filteredArr.length; i++) {\n    switch (filteredArr[i]) {\n\
    \      case 1:\n        result.push(\"One\");\n        break;\n      case 2:\n\
    \        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"\
    Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n   \
    \     break;\n      case 5:\n        result.push(\"Five\");\n        break;\n\
    \      case 6:\n        result.push(\"Six\");\n        break;\n      case 7:\n\
    \        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"\
    Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n   \
    \     break;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738821
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const sortedArr = arr.sort((a,\
    \ b) => a - b);\n    const reversedArr = sortedArr.reverse();\n    for (let i\
    \ = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] >= 1 && reversedArr[i]\
    \ <= 9) {\n            switch (reversedArr[i]) {\n                case 1:\n  \
    \                  result.push(\"One\");\n                    break;\n       \
    \         case 2:\n                    result.push(\"Two\");\n               \
    \     break;\n                case 3:\n                    result.push(\"Three\"\
    );\n                    break;\n                case 4:\n                    result.push(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.push(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.push(\"Six\");\n                    break;\n\
    \                case 7:\n                    result.push(\"Seven\");\n      \
    \              break;\n                case 8:\n                    result.push(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.push(\"Nine\");\n                    break;\n            }\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n \
    \   }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmwefhr74.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    reversed.forEach(element\
    \ => {\n        if (element >= 1 && element <= 9) {\n            switch (element)\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    });\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            result.push(getName(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjxa8hbvb.ts(18,25): error TS2304: Cannot find name
    ''getName''.

    '
  timestamp: 1659738821
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp572gorcj.js:53:12)\n\
    \    at Object.<anonymous> (/tmp/tmp572gorcj.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n \
    \   }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmwefhr74.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i: number = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i]\
    \ === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i]\
    \ === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i]\
    \ === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n \
    \   }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmwefhr74.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i]\
    \ >= 1 && sortedArr[i] <= 9) {\n      result.push(sortedArr[i]);\n    }\n  }\n\
    \  result.reverse();\n  for (let i = 0; i < result.length; i++) {\n    switch\
    \ (result[i]) {\n      case 1:\n        result[i] = \"One\";\n        break;\n\
    \      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n\
    \        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i]\
    \ = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n\
    \        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n\
    \      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n\
    \        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i]\
    \ = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpng2899ei.ts(18,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(24,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(27,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(30,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(33,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(36,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(39,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(42,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(45,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(48,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a,\
    \ b) => a - b);\n    const reversed = sorted.reverse();\n    const names = reversed.map(num\
    \ => {\n        switch (num) {\n            case 1:\n                return \"\
    One\";\n            case 2:\n                return \"Two\";\n            case\
    \ 3:\n                return \"Three\";\n            case 4:\n               \
    \ return \"Four\";\n            case 5:\n                return \"Five\";\n  \
    \          case 6:\n                return \"Six\";\n            case 7:\n   \
    \             return \"Seven\";\n            case 8:\n                return \"\
    Eight\";\n            case 9:\n                return \"Nine\";\n        }\n \
    \   });\n    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b).filter(item => item >= 1 && item <= 9);\n    for (let i = sortedArr.length\
    \ - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n\
    \                result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738826
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    let reversed: number[] = result.reverse();\n    let finalResult: string[]\
    \ = [];\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i]\
    \ === 1) {\n            finalResult.push(\"One\");\n        } else if (reversed[i]\
    \ === 2) {\n            finalResult.push(\"Two\");\n        } else if (reversed[i]\
    \ === 3) {\n            finalResult.push(\"Three\");\n        } else if (reversed[i]\
    \ === 4) {\n            finalResult.push(\"Four\");\n        } else if (reversed[i]\
    \ === 5) {\n            finalResult.push(\"Five\");\n        } else if (reversed[i]\
    \ === 6) {\n            finalResult.push(\"Six\");\n        } else if (reversed[i]\
    \ === 7) {\n            finalResult.push(\"Seven\");\n        } else if (reversed[i]\
    \ === 8) {\n            finalResult.push(\"Eight\");\n        } else if (reversed[i]\
    \ === 9) {\n            finalResult.push(\"Nine\");\n        }\n    }\n    return\
    \ finalResult;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp7_lh32yg.ts(18,25): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmp7_lh32yg.ts(21,9):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1659738825
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const sortedArr = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(getName(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp36liby4l.ts(18,25): error TS2304: Cannot find name
    ''getName''.

    '
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversedArr: number[] = sortedArr.reverse();\n  let filteredArr:\
    \ number[] = reversedArr.filter(\n    (num) => num >= 1 && num <= 9\n  );\n  for\
    \ (let i = 0; i < filteredArr.length; i++) {\n    switch (filteredArr[i]) {\n\
    \      case 1:\n        result.push(\"One\");\n        break;\n      case 2:\n\
    \        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"\
    Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n   \
    \     break;\n      case 5:\n        result.push(\"Five\");\n        break;\n\
    \      case 6:\n        result.push(\"Six\");\n        break;\n      case 7:\n\
    \        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"\
    Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n   \
    \     break;\n    }\n  }\n  return result;\n}\n\nconsole.log(by_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  'Eight', 'Five',\n  'Four',  'Three',\n  'Two',   'Two',\n  'One',\
    \   'One'\n]\n[]\n[ 'One' ]\n"
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversedArr: number[] = sortedArr.reverse();\n  for (let\
    \ i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] === 1) {\n   \
    \   result.push(\"One\");\n    } else if (reversedArr[i] === 2) {\n      result.push(\"\
    Two\");\n    } else if (reversedArr[i] === 3) {\n      result.push(\"Three\");\n\
    \    } else if (reversedArr[i] === 4) {\n      result.push(\"Four\");\n    } else\
    \ if (reversedArr[i] === 5) {\n      result.push(\"Five\");\n    } else if (reversedArr[i]\
    \ === 6) {\n      result.push(\"Six\");\n    } else if (reversedArr[i] === 7)\
    \ {\n      result.push(\"Seven\");\n    } else if (reversedArr[i] === 8) {\n \
    \     result.push(\"Eight\");\n    } else if (reversedArr[i] === 9) {\n      result.push(\"\
    Nine\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(numToWord(sorted[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo85pcn33.ts(18,25): error TS2304: Cannot find name
    ''numToWord''.

    '
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) =>\
    \ a - b);\n    let reversed = sorted.reverse();\n    let result = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738826
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    result.sort((a, b) => a - b);\n    result.reverse();\n\
    \    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n\
    \            case 1:\n                result[i] = \"One\";\n                break;\n\
    \            case 2:\n                result[i] = \"Two\";\n                break;\n\
    \            case 3:\n                result[i] = \"Three\";\n               \
    \ break;\n            case 4:\n                result[i] = \"Four\";\n       \
    \         break;\n            case 5:\n                result[i] = \"Five\";\n\
    \                break;\n            case 6:\n                result[i] = \"Six\"\
    ;\n                break;\n            case 7:\n                result[i] = \"\
    Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe6fml_6p.ts(17,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(20,27): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpe6fml_6p.ts(20,31): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpe6fml_6p.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let numbers: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i]\
    \ < 10) {\n            numbers.push(arr[i]);\n        }\n    }\n    numbers.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < numbers.length; i++) {\n        switch\
    \ (numbers[i]) {\n            case 1:\n                result.push(\"One\");\n\
    \                break;\n            case 2:\n                result.push(\"Two\"\
    );\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b)\
    \ => a - b);\n    const reversed = sorted.reverse();\n    const result = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (reversedArr[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    let reversed: number[] = result.reverse();\n    let final: string[]\
    \ = [];\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i]\
    \ === 1) {\n            final.push(\"One\");\n        } else if (reversed[i] ===\
    \ 2) {\n            final.push(\"Two\");\n        } else if (reversed[i] === 3)\
    \ {\n            final.push(\"Three\");\n        } else if (reversed[i] === 4)\
    \ {\n            final.push(\"Four\");\n        } else if (reversed[i] === 5)\
    \ {\n            final.push(\"Five\");\n        } else if (reversed[i] === 6)\
    \ {\n            final.push(\"Six\");\n        } else if (reversed[i] === 7) {\n\
    \            final.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            final.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            final.push(\"Nine\");\n        }\n    }\n    return final;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmps7ho7t9w.ts(18,25): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmps7ho7t9w.ts(21,9):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b)\
    \ => a - b);\n    const reversed = sorted.reverse();\n    const result = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    return arr.filter(x => x > 0 && x < 10).sort().reverse().map(x\
    \ => {\n        switch (x) {\n            case 1: return \"One\";\n          \
    \  case 2: return \"Two\";\n            case 3: return \"Three\";\n          \
    \  case 4: return \"Four\";\n            case 5: return \"Five\";\n          \
    \  case 6: return \"Six\";\n            case 7: return \"Seven\";\n          \
    \  case 8: return \"Eight\";\n            case 9: return \"Nine\";\n        }\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738827
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(numToString(sorted[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprasculbw.ts(18,25): error TS2304: Cannot find name
    ''numToString''.

    '
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b).filter(item => item >= 1 && item <= 9);\n    for (let i = sortedArr.length\
    \ - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n\
    \                result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738826
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(get_name(sorted[i]));\n  \
    \      }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg24k5a17.ts(18,25): error TS2304: Cannot find name
    ''get_name''.

    '
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversed: number[] = sorted.reverse();\n  for (let i =\
    \ 0; i < reversed.length; i++) {\n    if (reversed[i] === 1) {\n      result.push(\"\
    One\");\n    } else if (reversed[i] === 2) {\n      result.push(\"Two\");\n  \
    \  } else if (reversed[i] === 3) {\n      result.push(\"Three\");\n    } else\
    \ if (reversed[i] === 4) {\n      result.push(\"Four\");\n    } else if (reversed[i]\
    \ === 5) {\n      result.push(\"Five\");\n    } else if (reversed[i] === 6) {\n\
    \      result.push(\"Six\");\n    } else if (reversed[i] === 7) {\n      result.push(\"\
    Seven\");\n    } else if (reversed[i] === 8) {\n      result.push(\"Eight\");\n\
    \    } else if (reversed[i] === 9) {\n      result.push(\"Nine\");\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n      switch (sorted[i]) {\n        case 1:\n   \
    \       result.push(\"One\");\n          break;\n        case 2:\n          result.push(\"\
    Two\");\n          break;\n        case 3:\n          result.push(\"Three\");\n\
    \          break;\n        case 4:\n          result.push(\"Four\");\n       \
    \   break;\n        case 5:\n          result.push(\"Five\");\n          break;\n\
    \        case 6:\n          result.push(\"Six\");\n          break;\n        case\
    \ 7:\n          result.push(\"Seven\");\n          break;\n        case 8:\n \
    \         result.push(\"Eight\");\n          break;\n        case 9:\n       \
    \   result.push(\"Nine\");\n          break;\n      }\n    }\n  }\n  return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    const reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let sorted: number[] = arr.filter(num => num >= 1 && num <=\
    \ 9).sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n\
    \    let names: string[] = reversed.map(num => {\n        switch (num) {\n   \
    \         case 1:\n                return \"One\";\n            case 2:\n    \
    \            return \"Two\";\n            case 3:\n                return \"Three\"\
    ;\n            case 4:\n                return \"Four\";\n            case 5:\n\
    \                return \"Five\";\n            case 6:\n                return\
    \ \"Six\";\n            case 7:\n                return \"Seven\";\n         \
    \   case 8:\n                return \"Eight\";\n            case 9:\n        \
    \        return \"Nine\";\n        }\n    });\n    return names;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i: number = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i]\
    \ === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i]\
    \ === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i]\
    \ === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    sortedArr.forEach(element => {\n        if (element > 0 &&\
    \ element < 10) {\n            result.push(numToString(element));\n        }\n\
    \    });\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgoi947x6.ts(18,25): error TS2304: Cannot find name
    ''numToString''.

    '
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i].toString());\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] >= 1\
    \ && reversedArr[i] <= 9) {\n            switch (reversedArr[i]) {\n         \
    \       case 1:\n                    result.push(\"One\");\n                 \
    \   break;\n                case 2:\n                    result.push(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(get_name(sorted[i]));\n  \
    \      }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg24k5a17.ts(18,25): error TS2304: Cannot find name
    ''get_name''.

    '
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  let filteredArr: number[] = sortedArr.filter(\n    (num) =>\
    \ num >= 1 && num <= 9\n  );\n  let reversedArr: number[] = filteredArr.reverse();\n\
    \  for (let i = 0; i < reversedArr.length; i++) {\n    switch (reversedArr[i])\
    \ {\n      case 1:\n        result.push(\"One\");\n        break;\n      case\
    \ 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"\
    Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n   \
    \     break;\n      case 5:\n        result.push(\"Five\");\n        break;\n\
    \      case 6:\n        result.push(\"Six\");\n        break;\n      case 7:\n\
    \        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"\
    Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n   \
    \     break;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738827
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(num_to_str(sorted[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxgzdmi2d.ts(18,25): error TS2304: Cannot find name
    ''num_to_str''.

    '
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] <\
    \ 10) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort();\n\
    \    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n   \
    \         case 1:\n                result.push(\"One\");\n                break;\n\
    \            case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738827
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = [];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n\
    \      sorted.push(arr[i]);\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  for\
    \ (let i = 0; i < sorted.length; i++) {\n    switch (sorted[i]) {\n      case\
    \ 1:\n        result.push(\"One\");\n        break;\n      case 2:\n        result.push(\"\
    Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n    \
    \    break;\n      case 4:\n        result.push(\"Four\");\n        break;\n \
    \     case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n\
    \        result.push(\"Six\");\n        break;\n      case 7:\n        result.push(\"\
    Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n  \
    \      break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738827
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    sorted.forEach(element => {\n        if (element > 0 && element\
    \ < 10) {\n            result.push(numToString(element));\n        }\n    });\n\
    \    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp77uf7fm_.ts(18,25): error TS2304: Cannot find name
    ''numToString''.

    '
  timestamp: 1659738826
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const map: Map<number, string>\
    \ = new Map([\n        [1, \"One\"],\n        [2, \"Two\"],\n        [3, \"Three\"\
    ],\n        [4, \"Four\"],\n        [5, \"Five\"],\n        [6, \"Six\"],\n  \
    \      [7, \"Seven\"],\n        [8, \"Eight\"],\n        [9, \"Nine\"],\n    ]);\n\
    \    const sorted: number[] = arr.filter((num: number) => num > 0 && num < 10).sort();\n\
    \    sorted.forEach((num: number) => result.push(map.get(num) as string));\n \
    \   return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsisbe_qs.ts(15,16): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpsisbe_qs.ts(15,42): error TS2552: Cannot find name ''Map''.
    Did you mean ''map''?

    '
  timestamp: 1659738827
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqbt1xl1o.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let sortedArr = arr.filter(num => num >= 1 && num <= 9).sort((a,\
    \ b) => a - b);\n    let reversedArr = sortedArr.reverse();\n    let result =\
    \ reversedArr.map(num => {\n        switch (num) {\n            case 1:\n    \
    \            return \"One\";\n            case 2:\n                return \"Two\"\
    ;\n            case 3:\n                return \"Three\";\n            case 4:\n\
    \                return \"Four\";\n            case 5:\n                return\
    \ \"Five\";\n            case 6:\n                return \"Six\";\n          \
    \  case 7:\n                return \"Seven\";\n            case 8:\n         \
    \       return \"Eight\";\n            case 9:\n                return \"Nine\"\
    ;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738827
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b)\
    \ => a - b);\n    const reversed = sorted.reverse();\n    const names = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i].toString());\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n      result.push(\n        sorted[i] === 1\n    \
    \      ? \"One\"\n          : sorted[i] === 2\n          ? \"Two\"\n         \
    \ : sorted[i] === 3\n          ? \"Three\"\n          : sorted[i] === 4\n    \
    \      ? \"Four\"\n          : sorted[i] === 5\n          ? \"Five\"\n       \
    \   : sorted[i] === 6\n          ? \"Six\"\n          : sorted[i] === 7\n    \
    \      ? \"Seven\"\n          : sorted[i] === 8\n          ? \"Eight\"\n     \
    \     : \"Nine\"\n      );\n    }\n  }\n  return result.reverse();\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const map = {\n        1: \"One\",\n        2: \"Two\",\n  \
    \      3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"\
    Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n  \
    \  };\n    const filtered = arr.filter(x => x >= 1 && x <= 9);\n    const sorted\
    \ = filtered.sort((a, b) => a - b);\n    const reversed = sorted.reverse();\n\
    \    const mapped = reversed.map(x => map[x]);\n    return mapped;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let numbers: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            numbers.push(arr[i]);\n        }\n    }\n    numbers.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < numbers.length; i++) {\n        switch\
    \ (numbers[i]) {\n            case 1:\n                result.push(\"One\");\n\
    \                break;\n            case 2:\n                result.push(\"Two\"\
    );\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = arr.filter(x\
    \ => x >= 1 && x <= 9);\n    temp.sort((a, b) => a - b);\n    temp.reverse();\n\
    \    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n   \
    \         case 1:\n                result.push(\"One\");\n                break;\n\
    \            case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            result.push(getNumberName(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk1vewhed.ts(18,25): error TS2304: Cannot find name
    ''getNumberName''.

    '
  timestamp: 1659738830
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(getName(sorted[i]));\n   \
    \     }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm82scpb1.ts(18,25): error TS2304: Cannot find name
    ''getName''.

    '
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let sorted: number[] = arr.filter(x => x >= 1 && x <= 9).sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    let result:\
    \ string[] = reversed.map(x => {\n        switch (x) {\n            case 1:\n\
    \                return \"One\";\n            case 2:\n                return\
    \ \"Two\";\n            case 3:\n                return \"Three\";\n         \
    \   case 4:\n                return \"Four\";\n            case 5:\n         \
    \       return \"Five\";\n            case 6:\n                return \"Six\"\
    ;\n            case 7:\n                return \"Seven\";\n            case 8:\n\
    \                return \"Eight\";\n            case 9:\n                return\
    \ \"Nine\";\n        }\n    });\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let arr1: number[] = [];\n    let arr2: string[] = [];\n   \
    \ for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort((a, b)\
    \ => a - b);\n    for (let i = 0; i < arr1.length; i++) {\n        switch (arr1[i])\
    \ {\n            case 1:\n                arr2.push(\"One\");\n              \
    \  break;\n            case 2:\n                arr2.push(\"Two\");\n        \
    \        break;\n            case 3:\n                arr2.push(\"Three\");\n\
    \                break;\n            case 4:\n                arr2.push(\"Four\"\
    );\n                break;\n            case 5:\n                arr2.push(\"\
    Five\");\n                break;\n            case 6:\n                arr2.push(\"\
    Six\");\n                break;\n            case 7:\n                arr2.push(\"\
    Seven\");\n                break;\n            case 8:\n                arr2.push(\"\
    Eight\");\n                break;\n            case 9:\n                arr2.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return arr2.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i].toString());\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversedArr: number[] = sortedArr.reverse();\n  let filteredArr:\
    \ number[] = reversedArr.filter(\n    (element) => element >= 1 && element <=\
    \ 9\n  );\n  for (let i = 0; i < filteredArr.length; i++) {\n    switch (filteredArr[i])\
    \ {\n      case 1:\n        result.push(\"One\");\n        break;\n      case\
    \ 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"\
    Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n   \
    \     break;\n      case 5:\n        result.push(\"Five\");\n        break;\n\
    \      case 6:\n        result.push(\"Six\");\n        break;\n      case 7:\n\
    \        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"\
    Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n   \
    \     break;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const result: string[] = [];\n  const sorted = arr.sort((a, b)\
    \ => a - b);\n  sorted.forEach((num) => {\n    if (num >= 1 && num <= 9) {\n \
    \     result.push(numToString(num));\n    }\n  });\n  return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzra_u55w.ts(18,19): error TS2304: Cannot find name
    ''numToString''.

    '
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i: number = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n\
    \            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n\
    \            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n\
    \            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n\
    \            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n\
    \            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n\
    \            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n\
    \            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let arr_sort: number[] = arr.sort((a,\
    \ b) => a - b);\n    let arr_reverse: number[] = arr_sort.reverse();\n    for\
    \ (let i = 0; i < arr_reverse.length; i++) {\n        if (arr_reverse[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (arr_reverse[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (arr_reverse[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (arr_reverse[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (arr_reverse[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (arr_reverse[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (arr_reverse[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (arr_reverse[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (arr_reverse[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(x => x > 0 && x < 10).sort((a, b)\
    \ => a - b);\n    const reversed = sorted.reverse();\n    const names = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let arr1: number[] = [];\n    let arr2: string[] = [];\n   \
    \ for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort();\n \
    \   for (let i = arr1.length - 1; i >= 0; i--) {\n        switch (arr1[i]) {\n\
    \            case 1:\n                arr2.push(\"One\");\n                break;\n\
    \            case 2:\n                arr2.push(\"Two\");\n                break;\n\
    \            case 3:\n                arr2.push(\"Three\");\n                break;\n\
    \            case 4:\n                arr2.push(\"Four\");\n                break;\n\
    \            case 5:\n                arr2.push(\"Five\");\n                break;\n\
    \            case 6:\n                arr2.push(\"Six\");\n                break;\n\
    \            case 7:\n                arr2.push(\"Seven\");\n                break;\n\
    \            case 8:\n                arr2.push(\"Eight\");\n                break;\n\
    \            case 9:\n                arr2.push(\"Nine\");\n                break;\n\
    \        }\n    }\n    return arr2;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const sortedArr = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(convertNumberToString(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe4wk6eum.ts(18,25): error TS2304: Cannot find name
    ''convertNumberToString''.

    '
  timestamp: 1659738831
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(getNumberName(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp46pd95ai.ts(18,25): error TS2304: Cannot find name
    ''getNumberName''.

    '
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n      result.push(number_to_name(sorted[i]));\n  \
    \  }\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprubxu8_w.ts(18,19): error TS2304: Cannot find name
    ''number_to_name''.

    '
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b)\
    \ => a - b);\n    const reversed = sorted.reverse();\n    const names = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i: number = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i]\
    \ === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i]\
    \ === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i]\
    \ === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    arr.sort((a, b) => a - b);\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i]\
    \ < 10) {\n            switch (arr[i]) {\n                case 1:\n          \
    \          result.push(\"One\");\n                    break;\n               \
    \ case 2:\n                    result.push(\"Two\");\n                    break;\n\
    \                case 3:\n                    result.push(\"Three\");\n      \
    \              break;\n                case 4:\n                    result.push(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.push(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.push(\"Six\");\n                    break;\n\
    \                case 7:\n                    result.push(\"Seven\");\n      \
    \              break;\n                case 8:\n                    result.push(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.push(\"Nine\");\n                    break;\n            }\n  \
    \      }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i].toString());\n\
    \        }\n    }\n    result.sort();\n    result.reverse();\n    for (let i =\
    \ 0; i < result.length; i++) {\n        switch (result[i]) {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let sorted = arr.filter(x => x > 0 && x < 10).sort((a, b) =>\
    \ a - b);\n    let reversed = sorted.reverse();\n    let result = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const sorted = arr.filter(n => n >= 1 && n <= 9).sort((a, b) =>\
    \ a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(n\
    \ => {\n    switch (n) {\n      case 1:\n        return \"One\";\n      case 2:\n\
    \        return \"Two\";\n      case 3:\n        return \"Three\";\n      case\
    \ 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n    \
    \  case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n\
    \      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\"\
    ;\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) =>\
    \ a - b);\n    let reversed = sorted.reverse();\n    let result = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i: number = 0; i < sorted.length; i++) {\n     \
    \   if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n\
    \                case 1:\n                    result.push(\"One\");\n        \
    \            break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let arr_str: string[] = [];\n    let arr_num: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i]\
    \ < 10) {\n            arr_num.push(arr[i]);\n        }\n    }\n    arr_num.sort();\n\
    \    for (let i = 0; i < arr_num.length; i++) {\n        switch (arr_num[i]) {\n\
    \            case 1:\n                arr_str.push(\"One\");\n               \
    \ break;\n            case 2:\n                arr_str.push(\"Two\");\n      \
    \          break;\n            case 3:\n                arr_str.push(\"Three\"\
    );\n                break;\n            case 4:\n                arr_str.push(\"\
    Four\");\n                break;\n            case 5:\n                arr_str.push(\"\
    Five\");\n                break;\n            case 6:\n                arr_str.push(\"\
    Six\");\n                break;\n            case 7:\n                arr_str.push(\"\
    Seven\");\n                break;\n            case 8:\n                arr_str.push(\"\
    Eight\");\n                break;\n            case 9:\n                arr_str.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return arr_str.reverse();\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const res: string[] = [];\n    const nums: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort((a,\
    \ b) => a - b);\n    for (let i = nums.length - 1; i >= 0; i--) {\n        switch\
    \ (nums[i]) {\n            case 1:\n                res.push(\"One\");\n     \
    \           break;\n            case 2:\n                res.push(\"Two\");\n\
    \                break;\n            case 3:\n                res.push(\"Three\"\
    );\n                break;\n            case 4:\n                res.push(\"Four\"\
    );\n                break;\n            case 5:\n                res.push(\"Five\"\
    );\n                break;\n            case 6:\n                res.push(\"Six\"\
    );\n                break;\n            case 7:\n                res.push(\"Seven\"\
    );\n                break;\n            case 8:\n                res.push(\"Eight\"\
    );\n                break;\n            case 9:\n                res.push(\"Nine\"\
    );\n                break;\n        }\n    }\n    return res;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const dict: { [key: number]:\
    \ string } = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\"\
    ,\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7:\
    \ \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n  \
    \          result.push(dict[arr[i]]);\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp_wwugfr2.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_wwugfr2.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    temp.reverse();\n    for (let i = 0; i < temp.length; i++)\
    \ {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversed: number[] = sorted.reverse();\n  for (let i =\
    \ 0; i < reversed.length; i++) {\n    if (reversed[i] === 1) {\n      result.push(\"\
    One\");\n    } else if (reversed[i] === 2) {\n      result.push(\"Two\");\n  \
    \  } else if (reversed[i] === 3) {\n      result.push(\"Three\");\n    } else\
    \ if (reversed[i] === 4) {\n      result.push(\"Four\");\n    } else if (reversed[i]\
    \ === 5) {\n      result.push(\"Five\");\n    } else if (reversed[i] === 6) {\n\
    \      result.push(\"Six\");\n    } else if (reversed[i] === 7) {\n      result.push(\"\
    Seven\");\n    } else if (reversed[i] === 8) {\n      result.push(\"Eight\");\n\
    \    } else if (reversed[i] === 9) {\n      result.push(\"Nine\");\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n \
    \   }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmwefhr74.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    sorted.forEach(num => {\n        if (num > 0 && num < 10)\
    \ {\n            switch (num) {\n                case 1:\n                   \
    \ result.push(\"One\");\n                    break;\n                case 2:\n\
    \                    result.push(\"Two\");\n                    break;\n     \
    \           case 3:\n                    result.push(\"Three\");\n           \
    \         break;\n                case 4:\n                    result.push(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.push(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.push(\"Six\");\n                    break;\n\
    \                case 7:\n                    result.push(\"Seven\");\n      \
    \              break;\n                case 8:\n                    result.push(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.push(\"Nine\");\n                    break;\n            }\n  \
    \      }\n    });\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738833
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let res: string[] = [];\n    arr.sort((a, b) => a - b);\n  \
    \  for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] <\
    \ 10) {\n            res.push(num_to_str(arr[i]));\n        }\n    }\n    return\
    \ res.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpndli9v3a.ts(18,22): error TS2304: Cannot find name
    ''num_to_str''.

    '
  timestamp: 1659738833
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    let\
    \ filteredArr: number[] = reversedArr.filter(num => num > 0 && num < 10);\n  \
    \  for (let i = 0; i < filteredArr.length; i++) {\n        switch (filteredArr[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738821
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(getNumberName(sorted[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6spkq8j3.ts(18,25): error TS2304: Cannot find name
    ''getNumberName''.

    '
  timestamp: 1659738816
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp572gorcj.js:53:12)\n\
    \    at Object.<anonymous> (/tmp/tmp572gorcj.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(numberToString(sorted[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0r4nlfqv.ts(18,25): error TS2304: Cannot find name
    ''numberToString''.

    '
  timestamp: 1659738833
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(getNumberName(sorted[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxx4kl1e3.ts(18,25): error TS2304: Cannot find name
    ''getNumberName''.

    '
  timestamp: 1659738833
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortArr: number[] = arr.filter(x\
    \ => x > 0 && x < 10).sort((a, b) => a - b);\n    for (let i = sortArr.length\
    \ - 1; i >= 0; i--) {\n        switch (sortArr[i]) {\n            case 1:\n  \
    \              result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738833
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let res: string[] = [];\n    let temp: number[] = [];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9)\
    \ {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a, b) =>\
    \ a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                res.push(\"One\");\n               \
    \ break;\n            case 2:\n                res.push(\"Two\");\n          \
    \      break;\n            case 3:\n                res.push(\"Three\");\n   \
    \             break;\n            case 4:\n                res.push(\"Four\");\n\
    \                break;\n            case 5:\n                res.push(\"Five\"\
    );\n                break;\n            case 6:\n                res.push(\"Six\"\
    );\n                break;\n            case 7:\n                res.push(\"Seven\"\
    );\n                break;\n            case 8:\n                res.push(\"Eight\"\
    );\n                break;\n            case 9:\n                res.push(\"Nine\"\
    );\n                break;\n        }\n    }\n    return res.reverse();\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738833
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort();\n\
    \    temp.reverse();\n    for (let i = 0; i < temp.length; i++) {\n        switch\
    \ (temp[i]) {\n            case 1:\n                result.push(\"One\");\n  \
    \              break;\n            case 2:\n                result.push(\"Two\"\
    );\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738833
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i].toString());\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
