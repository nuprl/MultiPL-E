name: HumanEval_9_rolling_max
language: ts
prompt: "//From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
  \ 3, 3, 100, 100]);\n}\n\ntest();"
completions: ["    let max = numbers[0];\n    let result = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    let max_so_far = numbers[0];\n    let result = [max_so_far];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n", "    let max: number = numbers[0];\n    let\
    \ result: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n   \
    \     if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    \
    \    result.push(max);\n    }\n    return result;\n}\n", "  return numbers.map((_,\
    \ i) => Math.max(...numbers.slice(0, i + 1)));\n}\n", "    let max = numbers[0];\n\
    \    let result = [max];\n    for (let i = 1; i < numbers.length; i++) {\n   \
    \     if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    \
    \    result.push(max);\n    }\n    return result;\n}\n", "    let max = numbers[0];\n\
    \    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n      \
    \  if (numbers[i] > max) {\n            max = numbers[i];\n        }\n       \
    \ result.push(max);\n    }\n    return result;\n}\n", "    return numbers.map((x,\
    \ i) => Math.max(...numbers.slice(0, i + 1)));\n}\n", "    let result: number[]\
    \ = [];\n    let max = numbers[0];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n", "    const result:\
    \ number[] = [];\n    let max = numbers[0];\n    result.push(max);\n    for (let\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "    let max: number[] = [];\n    let max_so_far: number = numbers[0];\n\
    \    max.push(max_so_far);\n    for (let i = 1; i < numbers.length; i++) {\n \
    \       if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \        }\n        max.push(max_so_far);\n    }\n    return max;\n}\n", "  let\
    \ max = numbers[0];\n  let result = [max];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n", "    let result: number[] = [];\n    let max: number\
    \ = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "    let\
    \ result: number[] = [];\n    let max: number = numbers[0];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n           \
    \ max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    let result: number[] = [];\n    let max = numbers[0];\n    result.push(max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n", "    let max = numbers[0];\n    let result = [max];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n", "    let max: number = numbers[0];\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    let max = numbers[0];\n    let result =\
    \ [max];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    let result: number[] = [];\n    let max:\
    \ number = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "    let\
    \ max_so_far = numbers[0];\n    let result = [max_so_far];\n    for (let i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max_so_far) {\n       \
    \     max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n", "    let result: number[] = [];\n    let max:\
    \ number = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
