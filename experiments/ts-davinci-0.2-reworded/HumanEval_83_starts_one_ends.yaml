name: HumanEval_83_starts_one_ends
language: ts
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n \
  \ assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n\
  }\n\ntest();"
completions: ["  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return\
    \ 10;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "    let count = 0;\n   \
    \ for (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n\
    \    return count;\n}\n", "  if (n <= 0) {\n    return 0;\n  }\n\n  if (n ===\
    \ 1) {\n    return 1;\n  }\n\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 1;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "  if (n\
    \ === 1) {\n    return 2;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "  if\
    \ (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  let\
    \ count = 10;\n  for (let i = 3; i <= n; i++) {\n    count = count * (i - 1) +\
    \ 9;\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if\
    \ (n === 1) {\n    return 10;\n  }\n  let count = 10;\n  let i = 2;\n  while (i\
    \ <= n) {\n    count += 9 * Math.pow(10, i - 1);\n    i++;\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 9;\n\
    \  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "  let count = 0;\n  for (let i\
    \ = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) +\
    \ 9 * Math.pow(10, n - 2);\n}\n", "    let count = 0;\n    for (let i = 1; i <=\
    \ n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count +=\
    \ Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n \
    \   }\n    return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "  let count\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    count += 9 * Math.pow(10, i - 1);\n\
    \  }\n  return count;\n}\n", "  if (n == 1) {\n    return 2;\n  }\n  if (n ==\
    \ 2) {\n    return 3;\n  }\n  let count = 3;\n  for (let i = 3; i <= n; i++) {\n\
    \    count = count * 2;\n  }\n  return count;\n}\n", "  let count = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return\
    \ 4;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \   if (n === 1) {\n        return 2;\n    }\n    return starts_one_ends(n - 1)\
    \ + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if\
    \ (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \   let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "  let count = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    count += Math.pow(9, i - 1);\n  }\n  return count * 2;\n\
    }\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  let count = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  if (n == 1) {\n    return 2;\n  } else {\n    return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n  }\n}\n", "  if (n === 1) {\n    return 1;\n\
    \  }\n  if (n === 2) {\n    return 10;\n  }\n  return 9 * Math.pow(10, n - 2);\n\
    }\n", "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n    \
    \    return 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n -\
    \ 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 4;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \   if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return\
    \ 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n   \
    \ return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return\
    \ 10;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "    if (n === 1) {\n        return 2;\n\
    \    }\n    if (n === 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 5;\n  }\n  if (n === 3) {\n    return 13;\n  }\n\
    \  if (n === 4) {\n    return 34;\n  }\n  if (n === 5) {\n    return 89;\n  }\n\
    \  if (n === 6) {\n    return 233;\n  }\n  if (n === 7) {\n    return 610;\n \
    \ }\n  if (n === 8) {\n    return 1597;\n  }\n  if (n === 9) {\n    return 4181;\n\
    \  }\n  if (n === 10) {\n    return 10946;\n  }\n  if (n === 11) {\n    return\
    \ 28657;\n  }\n  if (n === 12) {\n    return 75025;\n  }\n  if (n === 13) {\n\
    \    return 196418;\n  }\n  if (n === 14) {\n    return 514229;\n  }\n  if (n\
    \ === 15) {\n    return 1346269;\n  }\n  if (n === 16) {\n    return 3524578;\n\
    \  }\n  if (n === 17) {\n    return 9227465;\n  }\n  if (n === 18) {\n    return\
    \ 24157817;\n  }\n  if (n === 19) {\n    return 63245986;\n  }\n  if (n === 20)\
    \ {\n    return 165580141;\n  }\n  if (n === 21) {\n    return 433494437;\n  }\n\
    \  if (n === 22) {\n    return 1134903170;\n  }\n  if (n === 23) {\n    return\
    \ 2971215073;\n  }\n  if (n === 24) {\n    return 7778742049;\n  }\n  if (n ===\
    \ 25) {\n    return 20365011074;\n  }\n  if (n === 26) {\n    return 53316291173;\n\
    \  }\n  if (n === 27) {\n    return 139583862445;\n  }\n  if", "  if (n === 1)\
    \ {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "    let count = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return\
    \ count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "    if (n == 1) {\n  \
    \      return 2;\n    }\n    let count = 0;\n    for (let i = 1; i <= n; i++)\
    \ {\n        count += Math.pow(10, i - 1);\n    }\n    return count * 2;\n}\n",
  "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "  if (n === 1) {\n    return 2;\n\
    \  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2);\n}\n", "    if (n === 1) return 2;\n    if (n === 2)\
    \ return 4;\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n",
  "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
    \ let dp: number[] = [];\n  dp[0] = 1;\n  dp[1] = 10;\n  for (let i = 2; i <=\
    \ n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];\n}\nconsole.log(starts_one_ends(3));",
  "    if (n == 1) return 2;\n    if (n == 2) return 3;\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n ===\
    \ 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  let count\
    \ = 1;\n  let base = 1;\n  for (let i = 1; i < n; i++) {\n    base *= 10;\n  \
    \  count += 9 * base;\n  }\n  return count;\n}\n", "    if (n === 1) {\n     \
    \   return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  let count = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n\nconsole.log(starts_one_ends(2));\nconsole.log(starts_one_ends(3));\n\
    console.log(starts_one_ends(4));\nconsole.log(starts_one_ends(5));\nconsole.log(starts_one_ends(6));\n\
    console.log(starts_one_ends(7));\nconsole.log(starts_one_ends(8));\nconsole.log(starts_one_ends(9));\n\
    console.log(starts_one_ends(10));\nconsole.log(starts_one_ends(11));\nconsole.log(starts_one_ends(12));\n\
    console.log(starts_one_ends(13));\nconsole.log(starts_one_ends(14));\nconsole.log(starts_one_ends(15));\n\
    console.log(starts_one_ends(16));\nconsole.log(starts_one_ends(17));\nconsole.log(starts_one_ends(18));\n\
    console.log(starts_one_ends(19));\nconsole.log(starts_one_ends(20));\nconsole.log(starts_one_ends(21));\n\
    console.log(starts_one_ends(22));\nconsole.log(starts_one_ends(23));\nconsole.log(starts_one_ends(24));\n\
    console.log(starts_one_ends(25));\nconsole.log(starts_one_ends(26));\nconsole.log(starts_one_ends(27));\n\
    console.log(starts_one_ends(28));\nconsole.log(starts_one_ends(29));\nconsole.log(starts_one_ends(30));\n\
    console.log(starts_one_ends(31));\nconsole.log(starts_one_ends(32));\nconsole.log(starts_one_ends(33));\n\
    console.log(starts_one_ends(34));\n", "  if (n <= 0) return 0;\n  if (n == 1)\
    \ return 1;\n  if (n == 2) return 10;\n  let count = 10;\n  let base = 9;\n  for\
    \ (let i = 3; i <= n; i++) {\n    base *= 10 - i + 1;\n    count += base;\n  }\n\
    \  return count;\n}\n", "  if (n === 1) {\n    return 1;\n  }\n  return 10 * starts_one_ends(n\
    \ - 1) - 9;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += 9 * Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n\
    \    return 1;\n  }\n  return (\n    9 *\n    Math.pow(10, n - 1) +\n    Math.pow(10,\
    \ n - 1) -\n    Math.pow(10, n - 2)\n  );\n}\n", "    if (n === 1) {\n       \
    \ return 2;\n    }\n    if (n === 2) {\n        return 4;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  if\
    \ (n === 3) {\n    return 8;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "    if (n < 1) {\n        return 0;\n    }\n    if (n == 1) {\n\
    \        return 1;\n    }\n    return n * 9 + starts_one_ends(n - 1);\n}\n", " \
    \ let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n\nconsole.log(starts_one_ends(2));\nconsole.log(starts_one_ends(3));\n\
    console.log(starts_one_ends(4));\nconsole.log(starts_one_ends(5));\nconsole.log(starts_one_ends(6));\n\
    console.log(starts_one_ends(7));\nconsole.log(starts_one_ends(8));\nconsole.log(starts_one_ends(9));\n\
    console.log(starts_one_ends(10));\nconsole.log(starts_one_ends(11));\nconsole.log(starts_one_ends(12));\n\
    console.log(starts_one_ends(13));\nconsole.log(starts_one_ends(14));\nconsole.log(starts_one_ends(15));\n\
    console.log(starts_one_ends(16));\nconsole.log(starts_one_ends(17));\nconsole.log(starts_one_ends(18));\n\
    console.log(starts_one_ends(19));\nconsole.log(starts_one_ends(20));\nconsole.log(starts_one_ends(21));\n\
    console.log(starts_one_ends(22));\nconsole.log(starts_one_ends(23));\nconsole.log(starts_one_ends(24));\n\
    console.log(starts_one_ends(25));\nconsole.log(starts_one_ends(26));\nconsole.log(starts_one_ends(27));\n\
    console.log(starts_one_ends(28));\nconsole.log(starts_one_ends(29));\nconsole.log(starts_one_ends(30));\n\
    console.log(starts_one_ends(31));\nconsole.log(starts_one_ends(32));\nconsole.log(starts_one_ends(33));\n\
    console.log(starts_one_ends(34));\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count * 2;\n}\n", "  if (n === 1) {\n    return 1;\n\
    \  }\n  if (n === 2) {\n    return 10;\n  }\n  let count = 10;\n  for (let i =\
    \ 3; i <= n; i++) {\n    count += 9 * Math.pow(10, i - 2);\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n\
    \  }\n  let count = 10;\n  let i = 1;\n  while (i < n - 1) {\n    count += 9 *\
    \ Math.pow(10, i);\n    i++;\n  }\n  return count;\n}\n", "    let count = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        count += Math.pow(9, i - 1);\n  \
    \  }\n    return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n\
    \ === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "    if (n === 1) {\n \
    \       return 2;\n    }\n    if (n === 2) {\n        return 4;\n    }\n    let\
    \ count = 4;\n    for (let i = 2; i < n; i++) {\n        count = count * 10 -\
    \ 2;\n    }\n    return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", " \
    \   let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += 9 * Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "  if (n === 1) {\n    return 2;\n\
    \  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if\
    \ (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "    let count = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        count += Math.pow(9, i - 1);\n    }\n    return count\
    \ * 2;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count +=\
    \ Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "    if (n == 1) {\n     \
    \   return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    let count\
    \ = 0;\n    for (let i = 1; i <= 9; i++) {\n        count += starts_one_ends(n\
    \ - 1);\n    }\n    return count;\n}\n", "  let count = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    count += 9 * Math.pow(10, i - 1);\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n\
    \  }\n  let count = 3;\n  for (let i = 3; i <= n; i++) {\n    count = count *\
    \ 2;\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if\
    \ (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  let count = 1;\n  for\
    \ (let i = 1; i < n; i++) {\n    count *= 10;\n  }\n  return count * 2;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
    \ let count = 10;\n  let base = 9;\n  for (let i = 3; i <= n; i++) {\n    count\
    \ += base * i;\n    base *= 10;\n  }\n  return count;\n}\n", "  if (n == 1) {\n\
    \    return 2;\n  }\n  if (n == 2) {\n    return 4;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i\
    \ - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n \
    \ if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n     \
    \   count += Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "  let count\
    \ = 0;\n  let start = 1;\n  let end = 1;\n  for (let i = 1; i < n; i++) {\n  \
    \  start *= 10;\n    end = end * 10 + 1;\n  }\n  count += start;\n  count += end;\n\
    \  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n\
    \    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  let count =\
    \ 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n\
    \  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2)\
    \ {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n -\
    \ 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n \
    \ return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    if (n ===\
    \ 1) {\n        return 2;\n    }\n    return 9 * Math.pow(10, n - 2);\n}\n", " \
    \ if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return\
    \ 4;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "    let count = 0;\n    for (let i = 1;\
    \ i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return count;\n\
    }\n", "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n\
    \  }\n  let count = 10;\n  let base = 9;\n  for (let i = 2; i < n; i++) {\n  \
    \  count += base;\n    base *= 10 - i;\n  }\n  return count;\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  return 9\
    \ * Math.pow(10, n - 1);\n}\n", "    if (n == 1) {\n        return 2;\n    }\n\
    \    if (n == 2) {\n        return 4;\n    }\n    return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if\
    \ (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 9;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "    if (n === 1) {\n    \
    \    return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    if (n === 1) {\n\
    \        return 2;\n    }\n    let result = 0;\n    for (let i = 1; i < n; i++)\
    \ {\n        result += Math.pow(10, i);\n    }\n    return result * 2;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2)\
    \ {\n        return 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ if (n === 1) {\n    return 1;\n  }\n  let count = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", " \
    \ if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n \
    \ return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n\
    \    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "    if (n ===\
    \ 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 4;\n    }\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    if (n\
    \ === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n\
    \    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \   if (n === 1) {\n        return 2;\n    }\n    return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return\
    \ starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 2;\n  }\n  if (n === 2) {\n    return 9;\n  }\n  return 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n   \
    \ return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n\
    }\n", "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n\
    \  }\n  let count = 10;\n  for (let i = 3; i <= n; i++) {\n    count += 9 * Math.pow(10,\
    \ i - 2);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count * 2;\n}\n", "  if (n === 1) {\n    return 2;\n\
    \  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if\
    \ (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += 9 * Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n\
    \    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "    if (n == 1) {\n        return 2;\n\
    \    }\n    if (n == 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ return 0;\n}\n", "    if (n === 1) {\n        return 2;\n    }\n    if (n ===\
    \ 2) {\n        return 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return\
    \ 10;\n  }\n  let count = 10;\n  let i = 2;\n  while (i <= n) {\n    count +=\
    \ 9 * Math.pow(10, i - 1);\n    i++;\n  }\n  return count;\n}\n", "  let count\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n\
    \  }\n  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n ===\
    \ 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 4;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 1;\n  }\n  return Math.pow(10, n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 9;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  let\
    \ count = 3;\n  let i = 3;\n  while (i <= n) {\n    count = count * 2;\n    i++;\n\
    \  }\n  return count;\n}\n", "  if (n == 1) {\n    return 2;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "    if (n == 1) {\n        return 2;\n\
    \    }\n    if (n == 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 3;\n  }\n  let count = 3;\n  for (let i = 3; i <=\
    \ n; i++) {\n    count = count * 2;\n  }\n  return count;\n}\n", "    if (n ==\
    \ 1) {\n        return 2;\n    }\n    let count = 0;\n    for (let i = 1; i <=\
    \ n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return count *\
    \ 2;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 10;\n  }\n  let count = 10;\n  for (let i = 3; i\
    \ <= n; i++) {\n    count += 9 * Math.pow(10, i - 2);\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n\
    \  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n\
    \ === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n\
    }\n", "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n    \
    \    return 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n -\
    \ 2);\n}\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n       \
    \ count += Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 9;\n  }\n  return 9 *\
    \ Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 1;\n  }\n  if (n ===\
    \ 2) {\n    return 10;\n  }\n  let count = 10;\n  for (let i = 2; i <= n; i++)\
    \ {\n    count += 9 * Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "    if\
    \ (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n\
    \    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ if (n === 1) {\n    return 2;\n  }\n  return 10 * starts_one_ends(n - 1) - 9;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) +\
    \ 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if\
    \ (n === 2) {\n    return 4;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(9, i - 1);\n  }\n  return count;\n}\n\nconsole.log(starts_one_ends(1));\n\
    console.log(starts_one_ends(2));\nconsole.log(starts_one_ends(3));\nconsole.log(starts_one_ends(4));\n\
    console.log(starts_one_ends(5));\nconsole.log(starts_one_ends(6));\nconsole.log(starts_one_ends(7));\n\
    console.log(starts_one_ends(8));\nconsole.log(starts_one_ends(9));\nconsole.log(starts_one_ends(10));\n\
    console.log(starts_one_ends(11));\nconsole.log(starts_one_ends(12));\nconsole.log(starts_one_ends(13));\n\
    console.log(starts_one_ends(14));\nconsole.log(starts_one_ends(15));\nconsole.log(starts_one_ends(16));\n\
    console.log(starts_one_ends(17));\nconsole.log(starts_one_ends(18));\nconsole.log(starts_one_ends(19));\n\
    console.log(starts_one_ends(20));\nconsole.log(starts_one_ends(21));\nconsole.log(starts_one_ends(22));\n\
    console.log(starts_one_ends(23));\nconsole.log(starts_one_ends(24));\nconsole.log(starts_one_ends(25));\n\
    console.log(starts_one_ends(26));\nconsole.log(starts_one_ends(27));\nconsole.log(starts_one_ends(28));\n\
    console.log(starts_one_ends(29));\nconsole.log(starts_one_ends(30));\nconsole.log(starts_one_ends(31));\n\
    console.log(starts_one_ends(32));\nconsole.log(starts_one_ends(33));\n", "  let\
    \ count = 0;\n  let start = 1;\n  let end = 1;\n  for (let i = 1; i < n; i++)\
    \ {\n    start *= 10;\n    end = end * 10 + 1;\n  }\n  count += start;\n  count\
    \ += end;\n  return count;\n}\n", "    let count = 0;\n    for (let i = 1; i <=\
    \ n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return count;\n\
    }\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += 9 * Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \   let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "  if (n === 1) {\n    return 2;\n\
    \  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n\
    \  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n\
    \ === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 4;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \   if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return\
    \ 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n",
  "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += 9 * Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 3;\n  }\n  let count = 3;\n  for (let i = 3; i <=\
    \ n; i++) {\n    count = count * 2;\n  }\n  return count;\n}\n", "  if (n ===\
    \ 1) {\n    return 10;\n  }\n  let count = 0;\n  for (let i = 1; i <= 9; i++)\
    \ {\n    count += starts_one_ends(n - 1);\n  }\n  return count;\n}\n", "  if (n\
    \ === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  let count = 10;\n\
    \  let base = 9;\n  for (let i = 3; i <= n; i++) {\n    base *= 10 - i + 1;\n\
    \    count += base;\n  }\n  return count;\n}\n", "    let count = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n \
    \   return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  let count = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n   \
    \ return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 10;\n  }\n\
    \  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += 9 * Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 1;\n  }\n\
    \  if (n === 2) {\n    return 10;\n  }\n  let count = 10;\n  for (let i = 3; i\
    \ <= n; i++) {\n    count += 9 * Math.pow(10, i - 2);\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 10;\n\
    \  }\n  return 9 * Math.pow(10, n - 1);\n}\n", "  if (n === 1) {\n    return 2;\n\
    \  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count * 2;\n}\n", "  let count = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "    // let count = 0;\n    // for (let i = 1; i <= n; i++) {\n    //     count\
    \ += Math.pow(10, i - 1);\n    // }\n    // return count;\n    return Math.pow(10,\
    \ n - 1);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n   \
    \ return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n\
    }\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n\
    \      count++;\n    } else {\n      count += Math.pow(10, i - 1);\n    }\n  }\n\
    \  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 4;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  let count = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
