name: HumanEval_83_starts_one_ends
language: ts
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n \
  \ assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n\
  }\n\ntest();"
completions: ["  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return\
    \ 10;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "    let count = 0;\n   \
    \ for (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n\
    \    return count;\n}\n", "  if (n <= 0) {\n    return 0;\n  }\n\n  if (n ===\
    \ 1) {\n    return 1;\n  }\n\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 1;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "  if (n\
    \ === 1) {\n    return 2;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "  if\
    \ (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  let\
    \ count = 10;\n  for (let i = 3; i <= n; i++) {\n    count = count * (i - 1) +\
    \ 9;\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if\
    \ (n === 1) {\n    return 10;\n  }\n  let count = 10;\n  let i = 2;\n  while (i\
    \ <= n) {\n    count += 9 * Math.pow(10, i - 1);\n    i++;\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 9;\n\
    \  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "  let count = 0;\n  for (let i\
    \ = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) +\
    \ 9 * Math.pow(10, n - 2);\n}\n", "    let count = 0;\n    for (let i = 1; i <=\
    \ n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count +=\
    \ Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n \
    \   }\n    return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n", "  let count\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    count += 9 * Math.pow(10, i - 1);\n\
    \  }\n  return count;\n}\n", "  if (n == 1) {\n    return 2;\n  }\n  if (n ==\
    \ 2) {\n    return 3;\n  }\n  let count = 3;\n  for (let i = 3; i <= n; i++) {\n\
    \    count = count * 2;\n  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
