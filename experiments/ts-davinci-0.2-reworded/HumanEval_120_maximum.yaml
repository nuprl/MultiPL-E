name: HumanEval_120_maximum
language: ts
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["    const result: number[] = [];\n    for (let i = 0; i < k; i++) {\n\
    \        const max = Math.max(...arr);\n        result.push(max);\n        arr.splice(arr.indexOf(max),\
    \ 1);\n    }\n    return result;\n}\n", "  const max = arr.slice(0, k).sort((a,\
    \ b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    for (let j = 0;\
    \ j < k; j++) {\n      if (arr[i] > max[j]) {\n        max[j] = arr[i];\n    \
    \    break;\n      }\n    }\n  }\n  return max;\n}\n", "  const sorted = arr.sort((a,\
    \ b) => b - a);\n  return sorted.slice(0, k);\n}\n", "  if (k === 0) return [];\n\
    \  if (k === arr.length) return arr;\n  const sorted = arr.sort((a, b) => b -\
    \ a);\n  return sorted.slice(0, k);\n}\n", "    let maxHeap = new MaxHeap();\n\
    \    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n\
    \    }\n    let result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n\
    \    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n}\n", "  let result:\
    \ number[] = [];\n  let i = 0;\n  while (i < k) {\n    let max = arr[0];\n   \
    \ let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr.splice(maxIndex, 1);\n    i++;\n  }\n  return result;\n\
    }\n", "  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let\
    \ max = arr[0];\n    let index = 0;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n  \
    \    }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return\
    \ result;\n}\n", "  let result: number[] = [];\n  let sortedArr = arr.sort((a,\
    \ b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n\
    \    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n",
  "  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n\
    \    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max =\
    \ -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ result;\n}\n", "    let result: number[] = [];\n    let max: number = 0;\n \
    \   let maxIndex: number = 0;\n    for (let i = 0; i < k; i++) {\n        max\
    \ = arr[i];\n        maxIndex = i;\n        for (let j = i + 1; j < arr.length;\
    \ j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n   \
    \             maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n\
    \    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max =\
    \ -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n\
    \    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if\
    \ (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n  \
    \  }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n\
    }\n", "  let max: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let maxNum\
    \ = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n\
    \      if (arr[j] > maxNum) {\n        maxNum = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    max.push(maxNum);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ max;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  let i =\
    \ 0;\n  while (i < k) {\n    const max = Math.max(...arr);\n    result.push(max);\n\
    \    arr.splice(arr.indexOf(max), 1);\n    i++;\n  }\n  return result;\n}\n",
  "  let result: number[] = [];\n  let max: number = 0;\n  let maxIndex: number =\
    \ 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n    max\
    \ = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  // TODO:\
    \ Implement\n  return [];\n}\n", "    if (k === 0) {\n        return [];\n   \
    \ }\n    if (k === arr.length) {\n        return arr;\n    }\n    let minHeap\
    \ = new MinHeap(k);\n    for (let i = 0; i < arr.length; i++) {\n        minHeap.insert(arr[i]);\n\
    \    }\n    return minHeap.getHeap();\n}\n", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  let result: number[]\
    \ = [];\n  let max: number = -Infinity;\n  let maxIndex: number = 0;\n  for (let\
    \ i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n  }\n\
    \  return result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  let i =\
    \ 0;\n  while (i < k) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for\
    \ (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max =\
    \ arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n    i++;\n  }\n  return result;\n}\n", "    let result: number[] = [];\n\
    \    let sortedArr: number[] = arr.sort((a, b) => b - a);\n    for (let i = 0;\
    \ i < k; i++) {\n        result.push(sortedArr[i]);\n    }\n    return result;\n\
    }\n", "    let res: number[] = [];\n    for (let i = 0; i < k; i++) {\n      \
    \  let max = arr[0];\n        let maxIndex = 0;\n        for (let j = 0; j < arr.length;\
    \ j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n   \
    \             maxIndex = j;\n            }\n        }\n        res.push(max);\n\
    \        arr.splice(maxIndex, 1);\n    }\n    return res;\n}\n", "  let result:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n   \
    \ let index = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(index, 1);\n  }\n  return result;\n}\n", "  let result: number[]\
    \ = [];\n  let sortedArr = arr.sort((a, b) => a - b);\n  for (let i = sortedArr.length\
    \ - 1; i >= sortedArr.length - k; i--) {\n    result.push(sortedArr[i]);\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result:\
    \ number[] = [];\n  let i = 0;\n  while (i < k) {\n    let max = arr[0];\n   \
    \ let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr.splice(maxIndex, 1);\n    i++;\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] =\
    \ [];\n  let max: number;\n  let maxIndex: number;\n  for (let i = 0; i < k; i++)\
    \ {\n    max = -Infinity;\n    maxIndex = -1;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n", "  const result: number[] = [];\n  let i = 0;\n  while\
    \ (i < k) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n \
    \       maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < k;\
    \ i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j\
    \ < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n   \
    \     maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n\
    \    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  if (k === 0) return [];\n  if (k === arr.length)\
    \ return arr;\n  const result: number[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max =\
    \ arr[0];\n        let index = 0;\n        for (let j = 0; j < arr.length; j++)\
    \ {\n            if (arr[j] > max) {\n                max = arr[j];\n        \
    \        index = j;\n            }\n        }\n        result.push(max);\n   \
    \     arr.splice(index, 1);\n    }\n    return result;\n}\n", "    const result:\
    \ number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n\
    \        let maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n\
    \            if (arr[j] > max) {\n                max = arr[j];\n            \
    \    maxIndex = j;\n            }\n        }\n        result.push(max);\n    \
    \    arr.splice(maxIndex, 1);\n    }\n    return result;\n}\n", "  let result:\
    \ number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n\
    \      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n   \
    \   }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n    max =\
    \ -Infinity;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  let i = 0;\n  while (i < k) {\n\
    \    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  \
    \  i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex:\
    \ number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j <\
    \ arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n    }\n    return result;\n}\n", "  if (k === 0) return [];\n  if (k\
    \ === arr.length) return arr;\n  let min = Math.min(...arr);\n  let max = Math.max(...arr);\n\
    \  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(min);\n\
    \  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n\
    \      result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) =>\
    \ a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));", "  if (k === 0) return [];\n  if (k === arr.length) return\
    \ arr;\n  const max = [];\n  for (let i = 0; i < k; i++) {\n    const maxNum =\
    \ Math.max(...arr);\n    max.push(maxNum);\n    arr.splice(arr.indexOf(maxNum),\
    \ 1);\n  }\n  return max;\n}\n", "  let result: number[] = [];\n  let sortedArr\
    \ = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "    let result: number[] = [];\n    let sortedArr:\
    \ number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < k; i++) {\n \
    \       result.push(sortedArr[sortedArr.length - 1 - i]);\n    }\n    return result;\n\
    }\n", "  const sortedArr = arr.sort((a, b) => b - a);\n  return sortedArr.slice(0,\
    \ k);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4,\
    \ 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n   \
    \ let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\n\
    console.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  let result: number[] = [];\n  for (let i = 0;\
    \ i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n\
    \    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    const max = Math.max(...arr);\n\
    \    result.push(max);\n    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let\
    \ max = arr[0];\n    let index = 0;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n  \
    \    }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n\
    \    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const sorted = arr.sort((a, b) => b - a);\n \
    \ for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n\
    }\n", "    let result: number[] = [];\n    let max: number = -Infinity;\n    let\
    \ maxIndex: number = 0;\n    for (let i = 0; i < k; i++) {\n        for (let j\
    \ = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n             \
    \   max = arr[j];\n                maxIndex = j;\n            }\n        }\n \
    \       result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  const sortedArr\
    \ = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n\
    \    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n",
  "    // return arr.sort((a, b) => b - a).slice(0, k);\n    return arr.sort((a, b)\
    \ => b - a).slice(0, k);\n}\n", "  let max = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let maxNum = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > maxNum) {\n        maxNum = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    max.push(maxNum);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return max;\n}\n", "  return arr.sort((a, b) => b - a).slice(0,\
    \ k);\n}\n", "    const result: number[] = [];\n    for (let i = 0; i < k; i++)\
    \ {\n        result.push(Math.max(...arr));\n        arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n    }\n    return result;\n}\n", "  const maxHeap = new MaxHeap();\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  const\
    \ result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  const sortedArr\
    \ = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  let result: number[] = [];\n  let max: number\
    \ = -Infinity;\n  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let\
    \ max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ result;\n}\n", "  let result: number[] = [];\n  let max: number = 0;\n  let\
    \ maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    max = arr[i];\n\
    \    maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return\
    \ result;\n}\n", "  let result: number[] = [];\n  let max: number = -Infinity;\n\
    \  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j\
    \ = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = -Infinity;\n    max = -Infinity;\n  }\n  return result;\n}\n", "  let result:\
    \ number[] = [];\n  let index: number = 0;\n  let max: number = arr[0];\n  for\
    \ (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n    \
    \  if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n      }\n \
    \   }\n    result.push(max);\n    arr.splice(index, 1);\n    max = arr[0];\n \
    \ }\n  return result;\n}\n", "  const sorted = arr.sort((a, b) => b - a);\n  return\
    \ sorted.slice(0, k);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n}\n", " \
    \   return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "  let result: number[]\
    \ = [];\n  let max: number;\n  let index: number;\n  for (let i = 0; i < k; i++)\
    \ {\n    max = -Infinity;\n    index = -1;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return\
    \ result;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
