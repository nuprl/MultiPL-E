name: HumanEval_142_sum_squares
language: ts
prompt: "//\"\n// This function will take an array of integers. For all entries in\
  \ the array, the function shall square the integer entry if its index is a \n//\
  \ multiple of 3 and will cube the integer entry if its index is a multiple of 4\
  \ and not a multiple of 3. The function will not \n// change the entries in the\
  \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n\
  // []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1, 2,\
  \ 3]),6);\n  assert.deepEqual(candidate([1, 4, 9]),14);\n  assert.deepEqual(candidate([]),0);\n\
  \  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);\n  assert.deepEqual(candidate([-1,\
  \ -1, -1, -1, -1, -1, -1, -1, -1]),-3);\n  assert.deepEqual(candidate([0]),0);\n\
  \  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);\n  assert.deepEqual(candidate([-56,\
  \ -99, 1, 0, -2]),3030);\n  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0,\
  \ -1]),0);\n  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40,\
  \ 20, -4, 12, -26, 35, 37]),-14196);\n  assert.deepEqual(candidate([-1, -3, 17,\
  \ -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);\n\
  }\n\ntest();"
completions: ["    let sum: number = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (i % 3 == 0) {\n            sum += lst[i] ** 2;\n        }\n \
    \       else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] ** 3;\n\
    \        }\n        else {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\
    \ else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i %\
    \ 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n    \
    \    } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i %\
    \ 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n    \
    \    } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++)\
    \ {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n\
    \        else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i]\
    \ * lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n   \
    \     } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i]\
    \ * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "    let sum: number = 0;\n    for (let i: number = 0;\
    \ i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n        else if (i % 4 == 0 && i % 3 != 0) {\n       \
    \     sum += lst[i] * lst[i] * lst[i];\n        }\n        else {\n          \
    \  sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum: number\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n\
    \            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0 &&\
    \ i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n   \
    \     else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i %\
    \ 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n    \
    \    } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    let sum: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n \
    \       else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i]\
    \ * lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n", "    let sum: number = 0;\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n        else if (i % 4 == 0 && i % 3 != 0) {\n       \
    \     sum += lst[i] * lst[i] * lst[i];\n        }\n        else {\n          \
    \  sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n     \
    \       sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0)\
    \ {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n        \
    \    sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n     \
    \       sum += lst[i] ** 2;\n        } else if (i % 4 == 0 && i % 3 != 0) {\n\
    \            sum += lst[i] ** 3;\n        } else {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i]\
    \ * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum +=\
    \ lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i]\
    \ * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum +=\
    \ lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\n", "    let sum: number = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum +=\
    \ lst[i] * lst[i];\n        }\n        else if (i % 4 == 0 && i % 3 != 0) {\n\
    \            sum += lst[i] * lst[i] * lst[i];\n        }\n        else {\n   \
    \         sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n\
    \            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 !=\
    \ 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n\
    \            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 !=\
    \ 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n\
    \            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 !=\
    \ 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n\
    \            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 !=\
    \ 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
