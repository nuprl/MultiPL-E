name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string:\
  \ string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["    let count = 0;\n    let char_set = new Set();\n    for (let char\
    \ of string) {\n        char_set.add(char.toLowerCase());\n    }\n    return char_set.size;\n\
    }\n", "    let distinct_characters: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (distinct_characters.indexOf(string[i].toLowerCase()) ===\
    \ -1) {\n            distinct_characters.push(string[i].toLowerCase());\n    \
    \    }\n    }\n    return distinct_characters.length;\n}\n", "    let result:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (result.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            result.push(string[i].toLowerCase());\n        }\n  \
    \  }\n    return result.length;\n}\n", "    return string.toLowerCase().split('').filter((item,\
    \ index, array) => array.indexOf(item) === index).length;\n}\n", "    let result\
    \ = 0;\n    let char_set = new Set();\n    for (let i = 0; i < string.length;\
    \ i++) {\n        char_set.add(string[i].toLowerCase());\n    }\n    result =\
    \ char_set.size;\n    return result;\n}\n", "    let count = 0;\n    let char_set\
    \ = new Set();\n    for (let i = 0; i < string.length; i++) {\n        if (!char_set.has(string[i].toLowerCase()))\
    \ {\n            char_set.add(string[i].toLowerCase());\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let count: number = 0;\n    let\
    \ char_set: Set<string> = new Set();\n    for (let i = 0; i < string.length; i++)\
    \ {\n        char_set.add(string[i].toLowerCase());\n    }\n    return char_set.size;\n\
    }\n", "    let count: number = 0;\n    let charArray: string[] = string.split(\"\
    \");\n    let uniqueArray: string[] = [];\n    for (let i: number = 0; i < charArray.length;\
    \ i++) {\n        if (uniqueArray.indexOf(charArray[i].toLowerCase()) === -1)\
    \ {\n            uniqueArray.push(charArray[i].toLowerCase());\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let count = 0;\n    let chars\
    \ = string.toLowerCase().split('');\n    let unique = chars.filter(function(item,\
    \ i, ar){ return ar.indexOf(item) === i; });\n    return unique.length;\n}\n",
  "    let unique = new Set(string.toLowerCase());\n    return unique.size;\n}\n",
  "    let chars: string[] = string.split('');\n    let distinct_chars: string[] =\
    \ [];\n    for (let i = 0; i < chars.length; i++) {\n        if (distinct_chars.indexOf(chars[i].toLowerCase())\
    \ === -1) {\n            distinct_chars.push(chars[i].toLowerCase());\n      \
    \  }\n    }\n    return distinct_chars.length;\n}\n", "    let count = 0;\n  \
    \  let char_set = new Set();\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (!char_set.has(string[i].toLowerCase())) {\n            char_set.add(string[i].toLowerCase());\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let chars = string.toLowerCase().split('');\n    let unique = new\
    \ Set(chars);\n    unique.forEach(element => {\n        count++;\n    });\n  \
    \  return count;\n}\n", "    let distinct_characters = new Set();\n    for (let\
    \ i = 0; i < string.length; i++) {\n        distinct_characters.add(string[i].toLowerCase());\n\
    \    }\n    return distinct_characters.size;\n}\n", "    let distinct_characters:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (distinct_characters.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            distinct_characters.push(string[i].toLowerCase());\n\
    \        }\n    }\n    return distinct_characters.length;\n}\n", "    let distinct_characters:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (distinct_characters.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            distinct_characters.push(string[i].toLowerCase());\n\
    \        }\n    }\n    return distinct_characters.length;\n}\n", "    let distinct_characters:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (distinct_characters.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            distinct_characters.push(string[i].toLowerCase());\n\
    \        }\n    }\n    return distinct_characters.length;\n}\n", "    let distinct_characters\
    \ = new Set();\n    for (let i = 0; i < string.length; i++) {\n        distinct_characters.add(string[i].toLowerCase());\n\
    \    }\n    return distinct_characters.size;\n}\n", "    let distinct_characters:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (distinct_characters.indexOf(string[i].toLowerCase())\
    \ == -1) {\n            distinct_characters.push(string[i].toLowerCase());\n \
    \       }\n    }\n    return distinct_characters.length;\n}\n", "    let distinct_characters:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (distinct_characters.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            distinct_characters.push(string[i].toLowerCase());\n\
    \        }\n    }\n    return distinct_characters.length;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
