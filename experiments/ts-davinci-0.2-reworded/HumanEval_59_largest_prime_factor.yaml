name: HumanEval_59_largest_prime_factor
language: ts
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n  \
    \          n /= i;\n        } else {\n            i++;\n        }\n    }\n   \
    \ return largest_prime_factor;\n}\n", "    let i = 2;\n    while (i * i <= n)\
    \ {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return n;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n     \
    \   } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i\
    \ === 0) {\n            largest_prime = i;\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return largest_prime;\n}\n", "  \
    \  let i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n         \
    \   n = n / i;\n        } else {\n            i = i + 1;\n        }\n    }\n \
    \   return n;\n}\n", "    let largest_prime = 1;\n    let factor = 2;\n    while\
    \ (n > 1) {\n        if (n % factor == 0) {\n            largest_prime = factor;\n\
    \            n /= factor;\n            while (n % factor == 0) {\n           \
    \     n /= factor;\n            }\n        }\n        factor += 1;\n    }\n  \
    \  return largest_prime;\n}\n", "    let i = 2;\n    while (i * i <= n) {\n  \
    \      if (n % i == 0) {\n            n = n / i;\n        } else {\n         \
    \   i = i + 1;\n        }\n    }\n    return n;\n}\n", "  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n", "  let i = 2;\n  while (i * i <= n) {\n    if\
    \ (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n", "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n  \
    \          n /= i;\n        } else {\n            i++;\n        }\n    }\n   \
    \ return largest_prime_factor;\n}\n", "    let largest = 1;\n    for (let i =\
    \ 2; i <= n; i++) {\n        if (n % i === 0) {\n            largest = i;\n  \
    \          n /= i;\n            i--;\n        }\n    }\n    return largest;\n\
    }\n", "    let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n    \
    \    if (n % i === 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let factor = 2;\n    while (n > 1) {\n        if (n % factor\
    \ == 0) {\n            n /= factor;\n        } else {\n            factor++;\n\
    \        }\n    }\n    return factor;\n}\n", "    let largest_prime_factor = 1;\n\
    \    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n          \
    \  largest_prime_factor = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", "    let\
    \ largest_prime_factor = 1;\n    let i = 2;\n    while (i <= n) {\n        if\
    \ (n % i === 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n", "    let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n    \
    \    if (n % i === 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\n", "    let factor = 2;\n    let largest = 1;\n    while (n > 1) {\n      \
    \  if (n % factor === 0) {\n            largest = factor;\n            n = n /\
    \ factor;\n            while (n % factor === 0) {\n                n = n / factor;\n\
    \            }\n        }\n        factor += 1;\n    }\n    return largest;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
