name: HumanEval_59_largest_prime_factor
language: ts
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n  \
    \          n /= i;\n        } else {\n            i++;\n        }\n    }\n   \
    \ return largest_prime_factor;\n}\n", "    let i = 2;\n    while (i * i <= n)\
    \ {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return n;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n     \
    \   } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i\
    \ === 0) {\n            largest_prime = i;\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return largest_prime;\n}\n", "  \
    \  let i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n         \
    \   n = n / i;\n        } else {\n            i = i + 1;\n        }\n    }\n \
    \   return n;\n}\n", "    let largest_prime = 1;\n    let factor = 2;\n    while\
    \ (n > 1) {\n        if (n % factor == 0) {\n            largest_prime = factor;\n\
    \            n /= factor;\n            while (n % factor == 0) {\n           \
    \     n /= factor;\n            }\n        }\n        factor += 1;\n    }\n  \
    \  return largest_prime;\n}\n", "    let i = 2;\n    while (i * i <= n) {\n  \
    \      if (n % i == 0) {\n            n = n / i;\n        } else {\n         \
    \   i = i + 1;\n        }\n    }\n    return n;\n}\n", "  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n", "  let i = 2;\n  while (i * i <= n) {\n    if\
    \ (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n", "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n  \
    \          n /= i;\n        } else {\n            i++;\n        }\n    }\n   \
    \ return largest_prime_factor;\n}\n", "    let largest = 1;\n    for (let i =\
    \ 2; i <= n; i++) {\n        if (n % i === 0) {\n            largest = i;\n  \
    \          n /= i;\n            i--;\n        }\n    }\n    return largest;\n\
    }\n", "    let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n    \
    \    if (n % i === 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let factor = 2;\n    while (n > 1) {\n        if (n % factor\
    \ == 0) {\n            n /= factor;\n        } else {\n            factor++;\n\
    \        }\n    }\n    return factor;\n}\n", "    let largest_prime_factor = 1;\n\
    \    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n          \
    \  largest_prime_factor = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", "    let\
    \ largest_prime_factor = 1;\n    let i = 2;\n    while (i <= n) {\n        if\
    \ (n % i === 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n", "    let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n    \
    \    if (n % i === 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\n", "    let factor = 2;\n    let largest = 1;\n    while (n > 1) {\n      \
    \  if (n % factor === 0) {\n            largest = factor;\n            n = n /\
    \ factor;\n            while (n % factor === 0) {\n                n = n / factor;\n\
    \            }\n        }\n        factor += 1;\n    }\n    return largest;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n  \
    \          n /= i;\n        } else {\n            i++;\n        }\n    }\n   \
    \ return largest_prime_factor;\n}\n", "  let factor = 2;\n  while (n > 1) {\n\
    \    if (n % factor === 0) {\n      n /= factor;\n    } else {\n      factor++;\n\
    \    }\n  }\n  return factor;\n}\n", "  let i = 2;\n  while (i <= n) {\n    if\
    \ (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n", "    let largest_prime = 2;\n    while (n > largest_prime) {\n   \
    \     if (n % largest_prime === 0) {\n            n /= largest_prime;\n      \
    \  } else {\n            largest_prime++;\n        }\n    }\n    return largest_prime;\n\
    }\n", "  let largest_prime = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n %\
    \ i === 0) {\n      largest_prime = i;\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return largest_prime;\n}\n", "    let prime_factors: number[] =\
    \ [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n      \
    \      prime_factors.push(i);\n            n /= i;\n            i--;\n       \
    \ }\n    }\n    return prime_factors[prime_factors.length - 1];\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let largest_prime_factor = 0;\n    let i = 2;\n    while (i <= n) {\n    \
    \    if (n % i === 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n", "    let largestPrimeFactor = 1;\n    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            largestPrimeFactor = i;\n           \
    \ n /= i;\n        } else {\n            i++;\n        }\n    }\n    return largestPrimeFactor;\n\
    }\n", "  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", "    let prime_factors:\
    \ number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n %\
    \ i === 0) {\n            prime_factors.push(i);\n            n = n / i;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return prime_factors[prime_factors.length\
    \ - 1];\n}\n", "  let largestPrimeFactor = 1;\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      n /= i;\n  \
    \  } else {\n      i++;\n    }\n  }\n  return largestPrimeFactor;\n}\n", "   \
    \ let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n}\n",
  "    let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n\
    \ % i === 0) {\n            largest_prime = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest_prime;\n}\n",
  "    let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n\
    \ % i === 0) {\n            largest_prime = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest_prime;\n}\n",
  "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "  let factor = 2;\n  while (n > 1) {\n    if (n % factor === 0) {\n   \
    \   n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  return factor;\n\
    }\n", "    let largest_prime = 1;\n    for (let i = 2; i <= n; i++) {\n      \
    \  if (n % i === 0) {\n            largest_prime = i;\n            n /= i;\n \
    \           i = 1;\n        }\n    }\n    return largest_prime;\n}\n", "    if\
    \ (n <= 1) {\n        return 0;\n    }\n    let largest_prime_factor = 1;\n  \
    \  let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}\n", "    let largest_prime = 1;\n \
    \   let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            largest_prime\
    \ = i;\n            n = n / i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return largest_prime;\n}\n", "    let i = 2;\n    while (i < n) {\n\
    \        if (n % i === 0) {\n            n = n / i;\n        } else {\n      \
    \      i++;\n        }\n    }\n    return n;\n}\n", "    let largest_prime = 1;\n\
    \    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n          \
    \  largest_prime = i;\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return i;\n}\n", "  let largest_prime\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime;\n\
    }\n", "  let largest_prime = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n %\
    \ i === 0) {\n      largest_prime = i;\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return largest_prime;\n}\n", "    let largest_prime_factor = 1;\n\
    \    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n          \
    \  largest_prime_factor = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", "    let\
    \ prime_factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
    \        if (n % i === 0) {\n            prime_factors.push(i);\n            n\
    \ = n / i;\n        } else {\n            i++;\n        }\n    }\n    return prime_factors[prime_factors.length\
    \ - 1];\n}\n", "    let factor = 2;\n    while (n > 1) {\n        if (n % factor\
    \ == 0) {\n            n /= factor;\n        } else {\n            factor++;\n\
    \        }\n    }\n    return factor;\n}\n", "    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            n /= i;\n        } else {\n  \
    \          i++;\n        }\n    }\n    return i;\n}\n", "    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", " \
    \   let i = 2;\n    let largest_prime_factor = 1;\n    while (i <= n) {\n    \
    \    if (n % i === 0) {\n            largest_prime_factor = i;\n            n\
    \ = n / i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n", "    let i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n \
    \           n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return n;\n}\n", "    let largest_prime = 1;\n    let i = 2;\n    while (i\
    \ <= n) {\n        if (n % i === 0) {\n            largest_prime = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime;\n}\n", "  let largest_prime_factor = 1;\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      largest_prime_factor = i;\n      n\
    \ /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return i;\n}\n", "    let prime_factors: number[] = [];\n    let i: number\
    \ = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            prime_factors.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return prime_factors[prime_factors.length - 1];\n}\n", "    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n", "    let i = 2;\n\
    \    while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return n;\n}\n", " \
    \   let factor = 2;\n    while (n > 1) {\n        if (n % factor === 0) {\n  \
    \          n /= factor;\n        } else {\n            factor++;\n        }\n\
    \    }\n    return factor;\n}\n", "    let i = 2;\n    while (i * i <= n) {\n\
    \        if (n % i == 0) {\n            n = n / i;\n        } else {\n       \
    \     i = i + 1;\n        }\n    }\n    return n;\n}\n", "    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i\
    \ = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n           \
    \ n /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            largest_prime_factor = i;\n         \
    \   n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\n", "  let largest_prime_factor = 1;\n  let i = 2;\n\
    \  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime_factor = i;\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n", "    let largest_prime = 1;\n    for (let i = 2; i <= n; i++) {\n      \
    \  if (n % i === 0) {\n            largest_prime = i;\n            n /= i;\n \
    \           i = 1;\n        }\n    }\n    return largest_prime;\n}\n", "    let\
    \ i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            n\
    \ = n / i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n\
    }\n", "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            largest_prime_factor = i;\n         \
    \   n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\n", "    let largest_prime_factor = 0;\n    let i =\
    \ 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}\n", "    let largest_prime = 1;\n \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n           \
    \ largest_prime = i;\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\n", "    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", " \
    \ let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    }\
    \ else {\n      i++;\n    }\n  }\n  return i;\n}\n", "    let largest_prime =\
    \ 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return largest_prime;\n}\n", "    let factor =\
    \ 2;\n    while (n > 1) {\n        if (n % factor === 0) {\n            n /= factor;\n\
    \        } else {\n            factor++;\n        }\n    }\n    return factor;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n  \
    \          n /= i;\n        } else {\n            i++;\n        }\n    }\n   \
    \ return largest_prime_factor;\n}\n", "    let factor = 2;\n    while (n > 1)\
    \ {\n        if (n % factor == 0) {\n            n /= factor;\n        } else\
    \ {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n\
    \ % i === 0) {\n            largest_prime = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest_prime;\n}\n",
  "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", "    let i = 2;\n  \
    \  while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "  let largest\
    \ = 0;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest\
    \ = i;\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return largest;\n\
    }\n", "    let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n    \
    \    if (n % i === 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i = 2;\n    while (i * i <= n) {\n        if (n % i == 0)\
    \ {\n            n = n / i;\n        } else {\n            i = i + 1;\n      \
    \  }\n    }\n    return n;\n}\n", "    let i = 2;\n    while (i <= n) {\n    \
    \    if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    let largest_prime = 1;\n    let i\
    \ = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime;\n}\n", "    let i = 2;\n    while (i * i <= n)\
    \ {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return n;\n}\n", "    let largest_prime\
    \ = 1;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i = 1;\n        }\n\
    \    }\n    return largest_prime;\n}\n", "    let largest_prime_factor = 1;\n\
    \    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n          \
    \  largest_prime_factor = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \ for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return largest_prime_factor(n\
    \ / i);\n    }\n  }\n  return n;\n}\n", "    let largest_prime = 1;\n    let i\
    \ = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "  let i = 2;\n  while (i < n)\
    \ {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n\
    \  }\n  return n;\n}\n", "    let largest_prime = 1;\n    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i === 0) {\n            largest_prime = i;\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime;\n}\n", "  let i = 2;\n  while (i <= n) {\n    if (n % i === 0)\
    \ {\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", " \
    \   let max = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            max = i;\n            n /= i;\n            i = 1;\n        }\n\
    \    }\n    return max;\n}\n", "    let i = 2;\n    while (i * i <= n) {\n   \
    \     if (n % i === 0) {\n            n = n / i;\n        } else {\n         \
    \   i++;\n        }\n    }\n    return n;\n}\n", "  let i = 2;\n  while (i < n)\
    \ {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n\
    \  }\n  return n;\n}\n", "    let largest_prime = 1;\n    for (let i = 2; i <=\
    \ n; i++) {\n        if (n % i === 0) {\n            largest_prime = i;\n    \
    \        n /= i;\n            i--;\n        }\n    }\n    return largest_prime;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            largest_prime = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let i = 2;\n    while (i * i <= n) {\n        if (n\
    \ % i == 0) {\n            n = n / i;\n        } else {\n            i++;\n  \
    \      }\n    }\n    return n;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i += 1;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n     \
    \   } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n\
    \ % i === 0) {\n            largest_prime = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest_prime;\n}\n",
  "    let largest_prime = 0;\n    let i = 2;\n    while (i <= n) {\n        if (n\
    \ % i === 0) {\n            largest_prime = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest_prime;\n}\n",
  "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <= n) {\n     \
    \   if (n % i === 0) {\n            largest_prime_factor = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let prime = 2;\n    while (n > prime) {\n        if (n % prime\
    \ == 0) {\n            n = n / prime;\n        } else {\n            prime++;\n\
    \        }\n    }\n    return prime;\n}\n", "    let i = 2;\n    while (i <= n)\
    \ {\n        if (n % i === 0) {\n            n /= i;\n        } else {\n     \
    \       i++;\n        }\n    }\n    return i;\n}\n", "    let largest_prime =\
    \ 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n       \
    \     largest_prime = i;\n            n /= i;\n            i--;\n        }\n \
    \   }\n    return largest_prime;\n}\n", "    let largest_prime_factor = 1;\n \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n           \
    \ largest_prime_factor = i;\n            n /= i;\n        } else {\n         \
    \   i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", "  let i =\
    \ 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n\
    \      i++;\n    }\n  }\n  return i;\n}\n", "    let largest_prime = 1;\n    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            n /= i;\n        } else {\n         \
    \   i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i\
    \ < n) {\n        if (n % i === 0) {\n            n = n / i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return n;\n}\n", "  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n", "    let largest: number = 1;\n    let i: number\
    \ = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largest\
    \ = i;\n            n = n / i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return largest;\n}\n", "    let largestPrimeFactor = 1;\n    let i\
    \ = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largestPrimeFactor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largestPrimeFactor;\n}\n", "    let i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i === 0) {\n            n = n / i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return n;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n     \
    \   } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ max_prime = 1;\n    while (n % 2 === 0) {\n        max_prime = 2;\n        n\
    \ /= 2;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while\
    \ (n % i === 0) {\n            max_prime = i;\n            n /= i;\n        }\n\
    \    }\n    if (n > 2) {\n        max_prime = n;\n    }\n    return max_prime;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i\
    \ == 0) {\n            n /= i;\n        } else {\n            i += 1;\n      \
    \  }\n    }\n    return i;\n}\n", "    let largest_prime = 1;\n    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime =\
    \ i;\n            n /= i;\n        } else {\n            i++;\n        }\n   \
    \ }\n    return largest_prime;\n}\n", "  let largest_prime_factor = 1;\n  for\
    \ (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      largest_prime_factor\
    \ = i;\n      n /= i;\n      i--;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n", "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            largest_prime_factor = i;\n         \
    \   n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\n", "    let largest_prime_factor = 1;\n    let i =\
    \ 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}\n", "    let largestPrimeFactor = 1;\n\
    \    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n          \
    \  largestPrimeFactor = i;\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return largestPrimeFactor;\n}\n", "    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", " \
    \   let i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n        \
    \    n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ n;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let largest_prime_factor = 0;\n    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime_factor;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            n /= i;\n        } else {\n         \
    \   i++;\n        }\n    }\n    return i;\n}\n", "    let largestPrimeFactor =\
    \ 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n     \
    \       largestPrimeFactor = i;\n            n /= i;\n        } else {\n     \
    \       i++;\n        }\n    }\n    return largestPrimeFactor;\n}\n", "    let\
    \ largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i\
    \ === 0) {\n            largest_prime = i;\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return largest_prime;\n}\n", "  \
    \  let largest_prime_factor = 1;\n    let i = 2;\n    while (i <= n) {\n     \
    \   if (n % i === 0) {\n            largest_prime_factor = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n", "    let largestPrimeFactor = 1;\n    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            largestPrimeFactor = i;\n           \
    \ n /= i;\n        } else {\n            i++;\n        }\n    }\n    return largestPrimeFactor;\n\
    }\n", "    let largest_prime = 0;\n    for (let i = 2; i <= n; i++) {\n      \
    \  if (n % i === 0) {\n            n /= i;\n            largest_prime = i;\n \
    \       }\n    }\n    return largest_prime;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n     \
    \   } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \ let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    }\
    \ else {\n      i++;\n    }\n  }\n  return i;\n}\n", "    let i = 2;\n    while\
    \ (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return n;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let factor = 2;\n    while (n > 1) {\n        if (n % factor === 0) {\n  \
    \          n /= factor;\n        } else {\n            factor++;\n        }\n\
    \    }\n    return factor;\n}\n", "    let factor: number = 2;\n    while (n >\
    \ 1) {\n        if (n % factor == 0) {\n            n /= factor;\n        } else\
    \ {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "    let\
    \ largest_prime_factor = 1;\n    let i = 2;\n    while (i * i <= n) {\n      \
    \  if (n % i === 0) {\n            largest_prime_factor = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    if (n > largest_prime_factor)\
    \ {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\n", "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            largest_prime_factor = i;\n         \
    \   n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\n", "    let i = 2;\n    while (i < n) {\n        if\
    \ (n % i === 0) {\n            n = n / i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return n;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            n /= i;\n        } else {\n         \
    \   i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i\
    \ < n) {\n        if (n % i === 0) {\n            n = n / i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return n;\n}\n", "    let factor: number\
    \ = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            n /=\
    \ factor;\n        } else {\n            factor++;\n        }\n    }\n    return\
    \ factor;\n}\n", "    let factor = 2;\n    while (n > 1) {\n        if (n % factor\
    \ == 0) {\n            n /= factor;\n        } else {\n            factor++;\n\
    \        }\n    }\n    return factor;\n}\n", "    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n", "  let largest_prime =\
    \ 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime;\n\
    }\n", "  let largest_prime_factor = 1;\n  let i = 2;\n  while (i <= n) {\n   \
    \ if (n % i === 0) {\n      largest_prime_factor = i;\n      n /= i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return largest_prime_factor;\n}\n", "    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n           \
    \ n /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let prime_factors: number[] = [];\n    let i: number = 2;\n    while\
    \ (n > 1) {\n        if (n % i === 0) {\n            prime_factors.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return prime_factors[prime_factors.length - 1];\n}\n", "  let largest_prime_factor\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime_factor\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n", "    let factor = 2;\n    while (n > 1) {\n        if (n % factor === 0)\
    \ {\n            n /= factor;\n        } else {\n            factor++;\n     \
    \   }\n    }\n    return factor;\n}\n", "    let largest_prime = 1;\n    let i\
    \ = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime;\n}\n", "  let i = 2;\n  while (i <= n) {\n  \
    \  if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n \
    \ return i;\n}\n", "    let largest_prime = 0;\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            largest_prime = i;\n         \
    \   n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime;\n}\n", "  let i = 2;\n  while (i <= n) {\n    if (n % i === 0)\
    \ {\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", " \
    \   let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n\
    \ % i === 0) {\n            largest_prime = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest_prime;\n}\n",
  "  let largest_prime = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0)\
    \ {\n      largest_prime = i;\n      n /= i;\n    } else {\n      i++;\n    }\n\
    \  }\n  return largest_prime;\n}\n", "    let largest_prime = 0;\n    for (let\
    \ i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n            i = 1;\n        }\n    }\n    return\
    \ largest_prime;\n}\n", "    let largest_prime = 1;\n    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i === 0) {\n            largest_prime = i;\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime;\n}\n", "    let factor = 2;\n    let lastFactor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor == 0) {\n            lastFactor = factor;\n\
    \            n = n / factor;\n            while (n % factor == 0) {\n        \
    \        n = n / factor;\n            }\n        }\n        factor++;\n    }\n\
    \    return lastFactor;\n}\n", "    let largest_prime = 0;\n    for (let i = 2;\
    \ i < n; i++) {\n        if (n % i === 0) {\n            if (is_prime(i)) {\n\
    \                largest_prime = i;\n            }\n        }\n    }\n    return\
    \ largest_prime;\n}\n", "  let i = 2;\n  while (i <= n) {\n    if (n % i === 0)\
    \ {\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", " \
    \   let largest_prime_factor = 1;\n    let i = 2;\n    while (i <= n) {\n    \
    \    if (n % i === 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n", "    let largest_prime = 1;\n    let i = 2;\n    while (i <= n) {\n    \
    \    if (n % i === 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\n", "    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n     \
    \       n = n / i;\n        } else {\n            i++;\n        }\n    }\n   \
    \ return n;\n}\n", "    let largest_prime = 1;\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            largest_prime = i;\n         \
    \   n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n %\
    \ i === 0) {\n            n /= i;\n        } else {\n            i++;\n      \
    \  }\n    }\n    return i;\n}\n", "    let largest_prime = 0;\n    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime =\
    \ i;\n            n /= i;\n        } else {\n            i++;\n        }\n   \
    \ }\n    return largest_prime;\n}\n", "  let largest_prime = 0;\n  let i = 2;\n\
    \  while (i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n      largest_prime\
    \ = i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime;\n}\n", " \
    \   let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n       \
    \     n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ n;\n}\n", "  // TODO: implement this function\n  return 0;\n}\n", "    let largestPrimeFactor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largestPrimeFactor = i;\n            n /= i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return largestPrimeFactor;\n}\n", "    let\
    \ largest_prime_factor = 1;\n    let i = 2;\n    while (i * i <= n) {\n      \
    \  if (n % i == 0) {\n            largest_prime_factor = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    if (n > largest_prime_factor)\
    \ {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\n", "  let largest = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i ===\
    \ 0) {\n      largest = i;\n      n /= i;\n    } else {\n      i++;\n    }\n \
    \ }\n  return largest;\n}\n", "    let largest_prime = 0;\n    let i = 2;\n  \
    \  while (i <= n) {\n        if (n % i === 0) {\n            largest_prime = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime;\n}\n", "    let i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    let largest_prime = 1;\n    let i\
    \ = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime;\n}\n", "    let i = 2;\n    while (i < n) {\n\
    \        if (n % i === 0) {\n            n = n / i;\n        } else {\n      \
    \      i++;\n        }\n    }\n    return n;\n}\n", "  let largest_prime_factor\
    \ = 1;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      largest_prime_factor\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if (n > largest_prime_factor)\
    \ {\n    largest_prime_factor = n;\n  }\n  return largest_prime_factor;\n}\n",
  "    let i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n         \
    \   n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ n;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
