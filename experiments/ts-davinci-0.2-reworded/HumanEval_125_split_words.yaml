name: HumanEval_125_split_words
language: ts
prompt: "//Given a string of words, return an array of words split on whitespace,\
  \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
  // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
  Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n//\
  \ 3\nfunction split_words(txt: string): string[]| number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
  \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
  ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
  Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"\
  Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
  aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
  \"),0);\n}\n\ntest();"
completions: ["    if (txt.indexOf(' ') !== -1) {\n        return txt.split(' ');\n\
    \    } else if (txt.indexOf(',') !== -1) {\n        return txt.split(',');\n \
    \   } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 === 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n", "    let words\
    \ = txt.split(/\\s+/);\n    if (words.length > 1) {\n        return words;\n \
    \   }\n    words = txt.split(',');\n    if (words.length > 1) {\n        return\
    \ words;\n    }\n    let count = 0;\n    for (let i = 0; i < txt.length; i++)\
    \ {\n        if (i % 2 === 0 && txt[i] !== txt[i].toUpperCase()) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\n", "    let arr = txt.split(/[\\\
    s,]/);\n    if (arr.length > 1) {\n        return arr;\n    }\n    else {\n  \
    \      let count = 0;\n        for (let i = 0; i < txt.length; i++) {\n      \
    \      if (i % 2 === 0 && txt[i] === txt[i].toLowerCase()) {\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n", "  \
    \  let result: string[] = [];\n    if (txt.indexOf(' ') > -1) {\n        result\
    \ = txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        result =\
    \ txt.split(',');\n    } else {\n        let count = 0;\n        for (let i =\
    \ 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 !== 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n    return result;\n}\n", "    let words = txt.split(\" \");\n    if (words.length\
    \ > 1) {\n        return words;\n    }\n    words = txt.split(\",\");\n    if\
    \ (words.length > 1) {\n        return words;\n    }\n    let count = 0;\n   \
    \ for (let i = 0; i < txt.length; i++) {\n        if (i % 2 === 0) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n", "    let words = txt.split(/\\\
    s+/);\n    if (words.length > 1) {\n        return words;\n    }\n    words =\
    \ txt.split(',');\n    if (words.length > 1) {\n        return words;\n    }\n\
    \    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n        if (txt.charCodeAt(i)\
    \ % 2 === 1) {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "    if (txt.indexOf(' ') > -1) {\n        return txt.split(' ');\n    } else if\
    \ (txt.indexOf(',') > -1) {\n        return txt.split(',');\n    } else {\n  \
    \      let count = 0;\n        for (let i = 0; i < txt.length; i++) {\n      \
    \      if (i % 2 === 0) {\n                count++;\n            }\n        }\n\
    \        return count;\n    }\n}\n", "    let words: string[] = [];\n    let result:\
    \ string[]| number = [];\n    if (txt.indexOf(' ') !== -1) {\n        words =\
    \ txt.split(' ');\n        result = words;\n    } else if (txt.indexOf(',') !==\
    \ -1) {\n        words = txt.split(',');\n        result = words;\n    } else\
    \ {\n        let count: number = 0;\n        for (let i: number = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 !== 0) {\n                count++;\n\
    \            }\n        }\n        result = count;\n    }\n    return result;\n\
    }\n", "    let words = txt.split(/\\s+/);\n    if (words.length > 1) {\n     \
    \   return words;\n    }\n    words = txt.split(',');\n    if (words.length >\
    \ 1) {\n        return words;\n    }\n    let count = 0;\n    for (let i = 0;\
    \ i < txt.length; i++) {\n        if (txt.charCodeAt(i) % 2 === 1) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n", "    let result: string[]\
    \ = [];\n    let result2: number = 0;\n    if (txt.indexOf(' ') !== -1) {\n  \
    \      result = txt.split(' ');\n        return result;\n    } else if (txt.indexOf(',')\
    \ !== -1) {\n        result = txt.split(',');\n        return result;\n    } else\
    \ {\n        for (let i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i)\
    \ % 2 !== 0) {\n                result2++;\n            }\n        }\n       \
    \ return result2;\n    }\n}\n", "    let splited = txt.split(/[\\s,]/);\n    if\
    \ (splited.length > 1) {\n        return splited;\n    }\n    let odd = 0;\n \
    \   for (let i = 0; i < txt.length; i++) {\n        if (i % 2 === 0) {\n     \
    \       odd += 1;\n        }\n    }\n    return odd;\n}\n", "    if (txt.includes(\"\
    \ \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\"\
    )) {\n        return txt.split(\",\");\n    } else {\n        let count = 0;\n\
    \        for (let i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i)\
    \ % 2 === 1) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n}\n", "    let arr = txt.split(/[\\s,]/);\n    if (arr.length\
    \ === 1) {\n        let count = 0;\n        for (let i = 0; i < txt.length; i++)\
    \ {\n            if (txt.charCodeAt(i) % 2 === 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    return arr;\n}\n",
  "    let words = txt.split(/[\\s,]+/);\n    if (words.length > 1) {\n        return\
    \ words;\n    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 === 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n", "    let words\
    \ = txt.split(/[\\s,]+/);\n    if (words.length > 1) {\n        return words;\n\
    \    }\n    let letters = txt.split('');\n    let odd_letters = letters.filter(function\
    \ (letter, index) {\n        return index % 2 === 0;\n    });\n    return odd_letters.length;\n\
    }\n", "    if (txt.indexOf(' ') !== -1) {\n        return txt.split(' ');\n  \
    \  } else if (txt.indexOf(',') !== -1) {\n        return txt.split(',');\n   \
    \ } else {\n        let count = 0;\n        for (let i = 0; i < txt.length; i++)\
    \ {\n            if (i % 2 === 0) {\n                count++;\n            }\n\
    \        }\n        return count;\n    }\n}\n", "    let words = txt.split(/\\\
    s+/);\n    if (words.length > 1) {\n        return words;\n    }\n    words =\
    \ txt.split(',');\n    if (words.length > 1) {\n        return words;\n    }\n\
    \    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n        if (i\
    \ % 2 === 1 && txt[i] === txt[i].toLowerCase()) {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n", "    if (txt.indexOf(' ') > -1) {\n  \
    \      return txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n     \
    \   return txt.split(',');\n    } else {\n        let count = 0;\n        for\
    \ (let i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 ===\
    \ 1) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n", "    let result: string[] = [];\n    let result2: string[] = [];\n\
    \    let result3: string[] = [];\n    let result4: string[] = [];\n    let result5:\
    \ string[] = [];\n    let result6: string[] = [];\n    let result7: string[] =\
    \ [];\n    let result8: string[] = [];\n    let result9: string[] = [];\n    let\
    \ result10: string[] = [];\n    let result11: string[] = [];\n    let result12:\
    \ string[] = [];\n    let result13: string[] = [];\n    let result14: string[]\
    \ = [];\n    let result15: string[] = [];\n    let result16: string[] = [];\n\
    \    let result17: string[] = [];\n    let result18: string[] = [];\n    let result19:\
    \ string[] = [];\n    let result20: string[] = [];\n    let result21: string[]\
    \ = [];\n    let result22: string[] = [];\n    let result23: string[] = [];\n\
    \    let result24: string[] = [];\n    let result25: string[] = [];\n    let result26:\
    \ string[] = [];\n    let result27: string[] = [];\n    let result28: string[]\
    \ = [];\n    let result29: string[] = [];\n    let result30: string[] = [];\n\
    \    let result31: string[] = [];\n    let result32: string[] = [];\n    let result33:\
    \ string[] = [];\n    let result34: string[] = [];\n    let result35: string[]\
    \ = [];\n    let result36: string[] = [];\n    let result37: string[] = [];\n\
    \    let result38: string[] = [];\n    let result39: string[] = [];\n    let result40:\
    \ string[] = [];\n    let result41: string[] = [];\n    let result42: string[]\
    \ = [];\n    let result43: string[] = [];\n    let result44: string[] = [];\n\
    \    let result45: string[] = [];\n    let result46: string[] = [];\n    let result47:\
    \ string[] = [];\n    let result48: string[] = [];\n    let result49: string[]\
    \ = [];\n    let result50: string[] = [];\n    let result51: string[] = [];\n\
    \    let", "    let result: string[] = [];\n    let result2: number;\n    if (txt.indexOf('\
    \ ') !== -1) {\n        result = txt.split(' ');\n        return result;\n   \
    \ } else if (txt.indexOf(',') !== -1) {\n        result = txt.split(',');\n  \
    \      return result;\n    } else {\n        result2 = 0;\n        for (let i\
    \ = 0; i < txt.length; i++) {\n            if (i % 2 === 0) {\n              \
    \  result2 += txt.charCodeAt(i);\n            }\n        }\n        return result2;\n\
    \    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
