language: ts
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const diff = max - min;\n    return numbers.map(n => (n - min) / diff);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = numbers.map(n => (n - min) / (max - min));\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const result = numbers.map(n => (n - min) /\
    \ range);\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let result\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push((numbers[i]\
    \ - min) / (max - min));\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = numbers.map(n => (n - min) / (max - min));\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ diff = max - min;\n  return numbers.map(x => (x - min) / diff);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return\
    \ numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  const result = numbers.map(n => (n - min) / range);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const diff = max - min;\n    return numbers.map(n => (n - min) / diff);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   if (numbers.length < 2) {\n        throw new Error(\"Cannot rescale a list\
    \ with less than two elements\");\n    }\n    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    return\
    \ numbers.map(n => (n - min) / range);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = numbers.map(x => (x - min) / (max - min));\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(x => (x - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const result = numbers.map(n => (n - min) / (max - min));\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(x => (x - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const scale = max - min;\n    return numbers.map(x => (x - min) / scale);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  const result = numbers.map(n => (n - min) / range);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let diff = max - min;\n    return numbers.map(n => (n - min) / diff);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(number => (number - min)\
    \ / range);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738624
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const scale = max - min;\n    return numbers.map(x => (x - min) / scale);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const diff = max - min;\n    return numbers.map(n => (n - min) / diff);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = numbers.map(x => (x - min) / (max - min));\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let diff = max - min;\n    return numbers.map(n => (n - min) / diff);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let range\
    \ = max - min;\n  return numbers.map(number => (number - min) / range);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738624
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738624
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   if (numbers.length < 2) {\n        throw new Error(\"Cannot rescale array\
    \ of length < 2\");\n    }\n    const min = Math.min(...numbers);\n    const max\
    \ = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738624
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let diff = max - min;\n    return numbers.map(n => (n - min) / diff);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let diff = max - min;\n    return numbers.map(n => (n - min) / diff);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(x => (x - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(x => (x - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers)\n    let max = Math.max(...numbers)\n    let\
    \ scale = max - min\n    return numbers.map(n => (n - min) / scale)\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738624
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const scale = max - min;\n    return numbers.map(n => (n - min) / scale);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738624
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = numbers.map(n => (n - min) / (max - min));\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   if (numbers.length < 2) {\n        throw new Error(\"Array must have at least\
    \ two elements\");\n    }\n    let min = numbers[0];\n    let max = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    const range = max - min;\n\
    \    return numbers.map(x => (x - min) / range);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738624
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  const result = numbers.map(n => (n - min) / range);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const diff = max - min;\n    return numbers.map(n => (n - min) / diff);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return\
    \ numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(x => (x - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return\
    \ numbers.map(n => (n - min) / (max - min));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const result = numbers.map(n => (n - min) /\
    \ range);\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738623
