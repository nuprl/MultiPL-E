name: HumanEval_139_special_factorial
language: ts
prompt: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
  // 288\n// The function will receive an integer as input and should return the special\n\
  // factorial of this integer.\nfunction special_factorial(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
  \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
  \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
completions: ["  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\n", "  let factorial = 1;\n  for\
    \ (let i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n",
  "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\n", "    let result = 1;\n    for (let i = n;\
    \ i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\n", "  let result = 1;\n  for\
    \ (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", " \
    \   let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n\
    \    }\n    return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0;\
    \ i--) {\n    result *= i;\n  }\n  return result;\n}\n", "  let result = 1;\n\
    \  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n",
  "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\n", "    let result = 1;\n    for (let i = n;\
    \ i > 0; i--) {\n        result *= i;\n    }\n    return result;\n}\n", "  let\
    \ result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n", "    let result = 1;\n    for (let i = n; i > 0; i--) {\n   \
    \     result *= i;\n    }\n    return result;\n}\n", "  let factorial = 1;\n \
    \ for (let i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\n", "    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\n", "    let result = 1;\n  \
    \  for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let factorial = 1;\n  for (let i = 1; i <= n;\
    \ i++) {\n    factorial *= i;\n  }\n  return factorial;\n}\n", "    let result\
    \ = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "  let result =\
    \ 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\n", "    let result = 1;\n   \
    \ for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\n", "    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\n", "  let factorial = 1;\n  for (let i\
    \ = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n}\n", " \
    \   let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n\
    \    }\n    return result;\n}\n", "    let result = 1;\n    for (let i = n; i\
    \ > 0; i--) {\n        result *= i;\n    }\n    return result;\n}\n", "  let result\
    \ = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\n", "  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n\
    \  }\n  for (let i = 1; i < n; i++) {\n    result *= i;\n  }\n  return result;\n\
    }\n", "    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\n", "  let factorial = 1;\n  for (let i\
    \ = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n", " \
    \ let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "  let result =\
    \ 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\n", "  let factorial = 1;\n  for\
    \ (let i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n",
  "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "    let factorial\
    \ = 1;\n    for (let i = n; i > 0; i--) {\n        factorial *= i;\n    }\n  \
    \  return factorial;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\n", "    let result = 1;\n   \
    \ for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--)\
    \ {\n    result *= factorial(i);\n  }\n  return result;\n}\n", "  let result =\
    \ 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\n", "  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let factorial = 1;\n  for (let i = n; i > 0;\
    \ i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n", "  let result =\
    \ 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\n", "  let result = 1;\n  for\
    \ (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", " \
    \   let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n\
    \    }\n    return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0;\
    \ i--) {\n    result *= i;\n  }\n  return result;\n}\n", "    let result = 1;\n\
    \    for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\n", "  let factorial: number =\
    \ 1;\n  for (let i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\n", "    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\n", "  let result = 1;\n  for (let i = n;\
    \ i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "  let result\
    \ = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\n", "  let result = 1;\n  for\
    \ (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nconsole.log(special_factorial(4));\n",
  "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\n", "  let result = 1;\n  for (let i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "  let result =\
    \ 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\n", "  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
