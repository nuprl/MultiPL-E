name: HumanEval_40_triples_sum_to_zero
language: ts
prompt: "//triples_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are three distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n\
  // false\nfunction triples_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3,\
  \ 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\
  \ntest();"
completions: ["    let result: boolean = false;\n    for (let i = 0; i < l.length;\
    \ i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let\
    \ k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] ===\
    \ 0) {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    let result: boolean = false;\n\
    \    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length;\
    \ j++) {\n            for (let k = j + 1; k < l.length; k++) {\n             \
    \   if (l[i] + l[j] + l[k] === 0) {\n                    result = true;\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let result: boolean = false;\n    for (let i = 0; i < l.length; i++) {\n \
    \       for (let j = i + 1; j < l.length; j++) {\n            for (let k = j +\
    \ 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n \
    \                   result = true;\n                }\n            }\n       \
    \ }\n    }\n    return result;\n}\n", "    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k\
    \ = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;\n}\n", "  for (let i = 0; i < l.length; i++)\
    \ {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k\
    \ < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return\
    \ true;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "  let s = new\
    \ Set<number>();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i +\
    \ 1; j < l.length; j++) {\n      if (s.has(-(l[i] + l[j]))) {\n        return\
    \ true;\n      }\n    }\n    s.add(l[i]);\n  }\n  return false;\n}\n", "    let\
    \ result: boolean = false;\n    for (let i: number = 0; i < l.length; i++) {\n\
    \        for (let j: number = i + 1; j < l.length; j++) {\n            for (let\
    \ k: number = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k]\
    \ === 0) {\n                    result = true;\n                }\n          \
    \  }\n        }\n    }\n    return result;\n}\n", "    // your code here\n   \
    \ return false;\n}\n", "    for (let i = 0; i < l.length; i++) {\n        for\
    \ (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length;\
    \ k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                  \
    \  return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\n", "    // your code here\n    return false;\n}\n", "    for (let\
    \ i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++)\
    \ {\n            for (let k = j + 1; k < l.length; k++) {\n                if\
    \ (l[i] + l[j] + l[k] === 0) {\n                    return true;\n           \
    \     }\n            }\n        }\n    }\n    return false;\n}\n", "    // TODO:\
    \ implement this function\n    return false;\n}\n", "    // TODO: implement this\
    \ function\n    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"\
    Not implemented yet.\");\n}\n", "    for (let i = 0; i < l.length; i++) {\n  \
    \      for (let j = i + 1; j < l.length; j++) {\n            for (let k = j +\
    \ 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n \
    \                   return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\n", "  for (let i = 0; i < l.length; i++) {\n   \
    \ for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length;\
    \ k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n  \
    \      }\n      }\n    }\n  }\n  return false;\n}\n", "    let n = l.length;\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n\
    \            for (let k = j + 1; k < n; k++) {\n                if (l[i] + l[j]\
    \ + l[k] === 0) {\n                    return true;\n                }\n     \
    \       }\n        }\n    }\n    return false;\n}\n", "    // your code here\n\
    \    return false;\n}\n", "    // your code here\n    return false;\n}\n", " \
    \   if (l.length < 3) {\n        return false;\n    }\n    for (let i = 0; i <\
    \ l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n       \
    \     for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j]\
    \ + l[k] === 0) {\n                    return true;\n                }\n     \
    \       }\n        }\n    }\n    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
