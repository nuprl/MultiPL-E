name: HumanEval_17_parse_music
language: ts
prompt: "//Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n// Your task is to parse this string and return array of integers\
  \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
  // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n//\
  \ '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .|\
  \ .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
  \ string): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
  \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
  .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o\
  \ o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o\
  \ o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
completions: ["  const music_array = music_string.split(\" \");\n  const beats_array\
    \ = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i]\
    \ === \"o\") {\n      beats_array.push(4);\n    } else if (music_array[i] ===\
    \ \"o|\") {\n      beats_array.push(2);\n    } else if (music_array[i] === \"\
    .|\") {\n      beats_array.push(1);\n    }\n  }\n  return beats_array;\n}\n",
  "  const beats: number[] = [];\n  const notes = music_string.split(\" \");\n  for\
    \ (let note of notes) {\n    if (note === \"o\") {\n      beats.push(4);\n   \
    \ } else if (note === \"o|\") {\n      beats.push(2);\n    } else if (note ===\
    \ \".|\") {\n      beats.push(1);\n    }\n  }\n  return beats;\n}\n", "    const\
    \ beats: number[] = [];\n    const notes: string[] = music_string.split(' ');\n\
    \    for (let i = 0; i < notes.length; i++) {\n        const note: string = notes[i];\n\
    \        if (note === 'o') {\n            beats.push(4);\n        } else if (note\
    \ === 'o|') {\n            beats.push(2);\n        } else if (note === '.|') {\n\
    \            beats.push(1);\n        }\n    }\n    return beats;\n}\n", "    const\
    \ music_string_array = music_string.split(' ');\n    const beats_array = [];\n\
    \    for (let i = 0; i < music_string_array.length; i++) {\n        if (music_string_array[i]\
    \ === 'o') {\n            beats_array.push(4);\n        } else if (music_string_array[i]\
    \ === 'o|') {\n            beats_array.push(2);\n        } else if (music_string_array[i]\
    \ === '.|') {\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n", "  const notes = music_string.split(' ');\n  const beats\
    \ = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o')\
    \ {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n\
    \    } else if (notes[i] === '.|') {\n      beats.push(1);\n    }\n  }\n  return\
    \ beats;\n}\n", "    let beats = [];\n    let notes = music_string.split(' ');\n\
    \    for (let note of notes) {\n        if (note === 'o') {\n            beats.push(4);\n\
    \        } else if (note === 'o|') {\n            beats.push(2);\n        } else\
    \ if (note === '.|') {\n            beats.push(1);\n        }\n    }\n    return\
    \ beats;\n}\n", "    let beats: number[] = [];\n    let notes: string[] = music_string.split(\"\
    \ \");\n    for (let note of notes) {\n        if (note === \"o\") {\n       \
    \     beats.push(4);\n        } else if (note === \"o|\") {\n            beats.push(2);\n\
    \        } else if (note === \".|\") {\n            beats.push(1);\n        }\n\
    \    }\n    return beats;\n}\n", "  const beats = {\n    'o': 4,\n    'o|': 2,\n\
    \    '.|': 1\n  };\n  return music_string.split(' ').map(note => beats[note]);\n\
    }\n", "    let result: number[] = [];\n    let notes: string[] = music_string.split(\"\
    \ \");\n    for (let note of notes) {\n        if (note === \"o\") {\n       \
    \     result.push(4);\n        } else if (note === \"o|\") {\n            result.push(2);\n\
    \        } else if (note === \".|\") {\n            result.push(1);\n        }\n\
    \    }\n    return result;\n}\n", "    const beats: number[] = [];\n    const\
    \ notes = music_string.split(' ');\n    for (const note of notes) {\n        if\
    \ (note === 'o') {\n            beats.push(4);\n        } else if (note === 'o|')\
    \ {\n            beats.push(2);\n        } else if (note === '.|') {\n       \
    \     beats.push(1);\n        }\n    }\n    return beats;\n}\n", "  const beats:\
    \ number[] = [];\n  const notes = music_string.split(' ');\n  for (const note\
    \ of notes) {\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note\
    \ === 'o|') {\n      beats.push(2);\n    } else if (note === '.|') {\n      beats.push(1);\n\
    \    }\n  }\n  return beats;\n}\n", "    let beats = [];\n    let notes = music_string.split('\
    \ ');\n    for (let note of notes) {\n        if (note === 'o') {\n          \
    \  beats.push(4);\n        } else if (note === 'o|') {\n            beats.push(2);\n\
    \        } else if (note === '.|') {\n            beats.push(1);\n        }\n\
    \    }\n    return beats;\n}\n", "  return music_string.split(\" \").map(note\
    \ => {\n    switch (note) {\n      case \"o\":\n        return 4;\n      case\
    \ \"o|\":\n        return 2;\n      case \".|\":\n        return 1;\n      default:\n\
    \        return 0;\n    }\n  });\n}\n", "    let music_array: string[] = music_string.split('\
    \ ');\n    let result: number[] = [];\n    for (let i = 0; i < music_array.length;\
    \ i++) {\n        if (music_array[i] === 'o') {\n            result.push(4);\n\
    \        } else if (music_array[i] === 'o|') {\n            result.push(2);\n\
    \        } else if (music_array[i] === '.|') {\n            result.push(1);\n\
    \        }\n    }\n    return result;\n}\n", "    let result: number[] = [];\n\
    \    let beats: number = 0;\n    for (let i = 0; i < music_string.length; i++)\
    \ {\n        if (music_string[i] === 'o') {\n            beats = 4;\n        }\
    \ else if (music_string[i] === '|') {\n            beats /= 2;\n        } else\
    \ if (music_string[i] === '.') {\n            beats = 1;\n        } else if (music_string[i]\
    \ === ' ') {\n            result.push(beats);\n        }\n    }\n    return result;\n\
    }\n", "    let beats: number[] = [];\n    let notes = music_string.split(\" \"\
    );\n    for (let note of notes) {\n        if (note === \"o\") {\n           \
    \ beats.push(4);\n        } else if (note === \"o|\") {\n            beats.push(2);\n\
    \        } else if (note === \".|\") {\n            beats.push(1);\n        }\n\
    \    }\n    return beats;\n}\n", "    const notes = music_string.split(\" \");\n\
    \    const beats = [];\n    for (let note of notes) {\n        switch (note) {\n\
    \            case \"o\":\n                beats.push(4);\n                break;\n\
    \            case \"o|\":\n                beats.push(2);\n                break;\n\
    \            case \".|\":\n                beats.push(1);\n                break;\n\
    \        }\n    }\n    return beats;\n}\n", "    let result = [];\n    let beats\
    \ = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    };\n    let\
    \ notes = music_string.split(\" \");\n    for (let note of notes) {\n        result.push(beats[note]);\n\
    \    }\n    return result;\n}\n", "    let beats: number[] = [];\n    let notes\
    \ = music_string.split(' ');\n    for (let note of notes) {\n        if (note\
    \ === 'o') {\n            beats.push(4);\n        } else if (note === 'o|') {\n\
    \            beats.push(2);\n        } else if (note === '.|') {\n           \
    \ beats.push(1);\n        }\n    }\n    return beats;\n}\n", "    let result:\
    \ number[] = [];\n    let notes: string[] = music_string.split(' ');\n    for\
    \ (let i = 0; i < notes.length; i++) {\n        if (notes[i] === 'o') {\n    \
    \        result.push(4);\n        } else if (notes[i] === 'o|') {\n          \
    \  result.push(2);\n        } else if (notes[i] === '.|') {\n            result.push(1);\n\
    \        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
