name: HumanEval_87_get_row
language: ts
prompt: "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the array,\n// and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([],\
  \ 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst:\
  \ number[][], x: number): [number, number][] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
  \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2,\
  \ 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n\
  \  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n\
  \  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "    let res: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                res.push([i, j]);\n            }\n        }\n    }\n\
    \    return res.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return\
    \ b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "    let\
    \ res: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                res.push([i, j]);\n            }\n        }\n    }\n\
    \    return res.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return\
    \ b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "    let\
    \ result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    result.sort((a, b) => {\n        if (a[0] === b[0]) {\n           \
    \ return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return\
    \ result;\n}\n", "    let result: [number, number][] = [];\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n\
    \            if (lst[i][j] === x) {\n                result.push([i, j]);\n  \
    \          }\n        }\n    }\n    return result.sort((a, b) => {\n        if\
    \ (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return\
    \ a[0] - b[0];\n    });\n}\n", "    let res: [number, number][] = [];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                res.push([i, j]);\n\
    \            }\n        }\n    }\n    res.sort((a, b) => {\n        if (a[0] ===\
    \ b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n\
    \    });\n    return res;\n}\n", "  let result: [number, number][] = [];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++)\
    \ {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n   \
    \ }\n  }\n  result.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return b[1]\
    \ - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return result;\n}\n", "  let\
    \ result: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n\
    \        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n\
    \    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] -\
    \ b[0];\n  });\n  return result;\n}\n", "  let result: [number, number][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n\
    \    }\n  }\n  result.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return\
    \ b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return result;\n}\n",
  "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "  let result: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return\
    \ a[0] - b[0];\n  });\n  return result;\n}\n", "    let result: [number, number][]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j\
    \ < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n              \
    \  result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a,\
    \ b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n   \
    \     }\n        return a[0] - b[0];\n    });\n}\n", "  let result: [number, number][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n\
    \    }\n  }\n  result.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return\
    \ b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return result;\n}\n",
  "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "  let result: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return\
    \ a[0] - b[0];\n  });\n  return result;\n}\n", "  let result: [number, number][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n\
    \    }\n  }\n  result.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return\
    \ b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return result;\n}\n",
  "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "  let result: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return\
    \ a[0] - b[0];\n  });\n  return result;\n}\n", "  let result: [number, number][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n\
    \    }\n  }\n  result.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return\
    \ b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return result;\n}\n",
  "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] < b[0]) {\n      \
    \      return -1;\n        } else if (a[0] > b[0]) {\n            return 1;\n\
    \        } else {\n            if (a[1] > b[1]) {\n                return -1;\n\
    \            } else if (a[1] < b[1]) {\n                return 1;\n          \
    \  } else {\n                return 0;\n            }\n        }\n    });\n}\n",
  "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "    let res: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                res.push([i, j]);\n            }\n        }\n    }\n\
    \    return res.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return\
    \ b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "  let\
    \ result: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n\
    \        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n\
    \    if (a[0] < b[0]) {\n      return -1;\n    } else if (a[0] > b[0]) {\n   \
    \   return 1;\n    } else {\n      if (a[1] > b[1]) {\n        return -1;\n  \
    \    } else if (a[1] < b[1]) {\n        return 1;\n      } else {\n        return\
    \ 0;\n      }\n    }\n  });\n  return result;\n}\n", "    let result: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let\
    \ j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n     \
    \           result.push([i, j]);\n            }\n        }\n    }\n    return\
    \ result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1]\
    \ - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "  let result:\
    \ [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    for\
    \ (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n      \
    \  result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if\
    \ (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n\
    \  });\n  return result;\n}\n", "    let result: [number, number][] = [];\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                result.push([i,\
    \ j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n\
    \        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n  \
    \      return a[0] - b[0];\n    });\n}\n", "  const result: [number, number][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n\
    \    }\n  }\n  return result.sort((a, b) => {\n    if (a[0] === b[0]) {\n    \
    \  return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n}\n", "    let\
    \ result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] !== b[0]) {\n    \
    \        return a[0] - b[0];\n        } else {\n            return b[1] - a[1];\n\
    \        }\n    });\n}\n", "    let result: [number, number][] = [];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                result.push([i,\
    \ j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n\
    \        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n  \
    \      return a[0] - b[0];\n    });\n}\n", "  let res: [number, number][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n \
    \   }\n  }\n  res.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return b[1]\
    \ - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return res;\n}\n", "    let\
    \ result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n", "  let res: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  res.sort((a, b) => {\n\
    \    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] -\
    \ b[0];\n  });\n  return res;\n}\n", "    let result: [number, number][] = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                result.push([i,\
    \ j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n\
    \        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n  \
    \      return a[0] - b[0];\n    });\n}\n", "    let res: [number, number][] =\
    \ [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j <\
    \ lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                res.push([i,\
    \ j]);\n            }\n        }\n    }\n    return res.sort((a, b) => {\n   \
    \     if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n     \
    \   return a[0] - b[0];\n    });\n}\n", "    let res: [number, number][] = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                res.push([i, j]);\n\
    \            }\n        }\n    }\n    res.sort((a, b) => {\n        if (a[0] ===\
    \ b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n\
    \    });\n    return res;\n}\n", "    let result: [number, number][] = [];\n \
    \   for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                result.push([i,\
    \ j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n\
    \        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n  \
    \      return a[0] - b[0];\n    });\n}\n", "    return lst.reduce((acc: [number,\
    \ number][], row: number[], row_idx: number) => {\n        const col_idx = row.indexOf(x);\n\
    \        if (col_idx !== -1) {\n            acc.push([row_idx, col_idx]);\n  \
    \      }\n        return acc;\n    }, []).sort((a: [number, number], b: [number,\
    \ number]) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n\
    \        }\n        return a[0] - b[0];\n    });\n}\n", "    let result: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let\
    \ j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n     \
    \           result.push([i, j]);\n            }\n        }\n    }\n    return\
    \ result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1]\
    \ - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "    let result:\
    \ [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                result.push([i, j]);\n            }\n        }\n    }\n \
    \   return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n           \
    \ return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n",
  "  let result: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x)\
    \ {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) =>\
    \ {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0]\
    \ - b[0];\n  });\n  return result;\n}\n", "    let result: [number, number][]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j\
    \ < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n              \
    \  result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a,\
    \ b) => {\n        if (a[0] < b[0]) {\n            return -1;\n        } else\
    \ if (a[0] > b[0]) {\n            return 1;\n        } else {\n            if\
    \ (a[1] > b[1]) {\n                return -1;\n            } else if (a[1] < b[1])\
    \ {\n                return 1;\n            } else {\n                return 0;\n\
    \            }\n        }\n    });\n}\n", "    let result: [number, number][]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j\
    \ < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n              \
    \  result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a,\
    \ b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n   \
    \     }\n        return a[0] - b[0];\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
