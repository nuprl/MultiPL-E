name: HumanEval_94_skjkasdkd
language: ts
prompt: "//You are given an array of integers.\n// You need to find the largest prime\
  \ value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n//\
  \ >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n//\
  \ 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30,\
  \ 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,\
  \ 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0,\
  \ 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2,\
  \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0,\
  \ 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n\
  \  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191,\
  \ 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\
  \ntest();"
completions: ["    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (isPrime(lst[i])) {\n            if (lst[i] > max) {\n  \
    \              max = lst[i];\n            }\n        }\n    }\n    for (let i\
    \ = 0; i < max.toString().length; i++) {\n        sum += parseInt(max.toString()[i]);\n\
    \    }\n    return sum;\n}\n", "    let max = Math.max(...lst);\n    let sum =\
    \ 0;\n    for (let i = 2; i <= max; i++) {\n        let isPrime = true;\n    \
    \    for (let j = 2; j < i; j++) {\n            if (i % j == 0) {\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if (isPrime) {\n            let num = i;\n            while (num > 0) {\n\
    \                sum += num % 10;\n                num = Math.floor(num / 10);\n\
    \            }\n        }\n    }\n    return sum;\n}\n", "    let largestPrime\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])\
    \ && lst[i] > largestPrime) {\n            largestPrime = lst[i];\n        }\n\
    \    }\n    return sumDigits(largestPrime);\n}\n", "    let max = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n       \
    \     if (lst[i] > max) {\n                max = lst[i];\n            }\n    \
    \    }\n    }\n    let sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n\
    \        max = Math.floor(max / 10);\n    }\n    return sum;\n}\n", "    let largestPrime\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])\
    \ && lst[i] > largestPrime) {\n            largestPrime = lst[i];\n        }\n\
    \    }\n    return sumDigits(largestPrime);\n}\n", "    let largestPrime = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i]\
    \ > largestPrime) {\n            largestPrime = lst[i];\n        }\n    }\n  \
    \  return sumDigits(largestPrime);\n}\n", "    let largestPrime = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i] >\
    \ largestPrime) {\n            largestPrime = lst[i];\n        }\n    }\n    return\
    \ sumDigits(largestPrime);\n}\n", "    let largestPrime = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i] > largestPrime)\
    \ {\n            largestPrime = lst[i];\n        }\n    }\n    return sumDigits(largestPrime);\n\
    }\n", "    let largestPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (isPrime(lst[i]) && lst[i] > largestPrime) {\n            largestPrime\
    \ = lst[i];\n        }\n    }\n    let sum = 0;\n    while (largestPrime > 0)\
    \ {\n        sum += largestPrime % 10;\n        largestPrime = Math.floor(largestPrime\
    \ / 10);\n    }\n    return sum;\n}\n", "    let largestPrime = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i] > largestPrime)\
    \ {\n            largestPrime = lst[i];\n        }\n    }\n    return sumDigits(largestPrime);\n\
    }\n", "    let largestPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (isPrime(lst[i]) && lst[i] > largestPrime) {\n            largestPrime\
    \ = lst[i];\n        }\n    }\n    return sumDigits(largestPrime);\n}\n", "  \
    \  let largestPrime: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (isPrime(lst[i]) && lst[i] > largestPrime) {\n            largestPrime\
    \ = lst[i];\n        }\n    }\n    return sumDigits(largestPrime);\n}\n", "  \
    \  let largestPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ if (isPrime(lst[i]) && lst[i] > largestPrime) {\n            largestPrime =\
    \ lst[i];\n        }\n    }\n    return sumDigits(largestPrime);\n}\n", "    let\
    \ largestPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])\
    \ && lst[i] > largestPrime) {\n            largestPrime = lst[i];\n        }\n\
    \    }\n    return sumDigits(largestPrime);\n}\n", "    let max = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n          \
    \  max = lst[i];\n        }\n    }\n    let sum = 0;\n    while (max > 0) {\n\
    \        sum += max % 10;\n        max = Math.floor(max / 10);\n    }\n    return\
    \ sum;\n}\n", "    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (isPrime(lst[i]) && lst[i] > maxPrime) {\n            maxPrime\
    \ = lst[i];\n        }\n    }\n    let sum = 0;\n    while (maxPrime > 0) {\n\
    \        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPrime / 10);\n\
    \    }\n    return sum;\n}\n", "    let largestPrime = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i] > largestPrime)\
    \ {\n            largestPrime = lst[i];\n        }\n    }\n    return sumDigits(largestPrime);\n\
    }\n", "    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    let sum =\
    \ 0;\n    while (max > 0) {\n        sum += max % 10;\n        max = Math.floor(max\
    \ / 10);\n    }\n    return sum;\n}\n", "    let largestPrime = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i] > largestPrime)\
    \ {\n            largestPrime = lst[i];\n        }\n    }\n    return sumDigits(largestPrime);\n\
    }\n", "  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
    \ if (isPrime(lst[i]) && lst[i] > largestPrime) {\n      largestPrime = lst[i];\n\
    \    }\n  }\n  return sumOfDigits(largestPrime);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
