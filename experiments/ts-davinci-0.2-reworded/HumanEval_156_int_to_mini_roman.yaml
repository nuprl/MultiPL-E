name: HumanEval_156_int_to_mini_roman
language: ts
prompt: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number:\
  \ number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
  xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
  ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
  d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
  iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
  xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
  dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
  cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
completions: ["    const roman_numerals = {\n        1: \"i\",\n        5: \"v\",\n\
    \        10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"\
    d\",\n        1000: \"m\",\n    };\n    let result = \"\";\n    let num = number;\n\
    \    while (num > 0) {\n        if (num >= 1000) {\n            result += roman_numerals[1000];\n\
    \            num -= 1000;\n        } else if (num >= 500) {\n            result\
    \ += roman_numerals[500];\n            num -= 500;\n        } else if (num >=\
    \ 100) {\n            result += roman_numerals[100];\n            num -= 100;\n\
    \        } else if (num >= 50) {\n            result += roman_numerals[50];\n\
    \            num -= 50;\n        } else if (num >= 10) {\n            result +=\
    \ roman_numerals[10];\n            num -= 10;\n        } else if (num >= 5) {\n\
    \            result += roman_numerals[5];\n            num -= 5;\n        } else\
    \ if (num >= 1) {\n            result += roman_numerals[1];\n            num -=\
    \ 1;\n        }\n    }\n    return result;\n}\n", "    let result = \"\";\n  \
    \  let num = number;\n    while (num >= 1000) {\n        result += \"m\";\n  \
    \      num -= 1000;\n    }\n    if (num >= 900) {\n        result += \"cm\";\n\
    \        num -= 900;\n    }\n    if (num >= 500) {\n        result += \"d\";\n\
    \        num -= 500;\n    }\n    if (num >= 400) {\n        result += \"cd\";\n\
    \        num -= 400;\n    }\n    while (num >= 100) {\n        result += \"c\"\
    ;\n        num -= 100;\n    }\n    if (num >= 90) {\n        result += \"xc\"\
    ;\n        num -= 90;\n    }\n    if (num >= 50) {\n        result += \"l\";\n\
    \        num -= 50;\n    }\n    if (num >= 40) {\n        result += \"xl\";\n\
    \        num -= 40;\n    }\n    while (num >= 10) {\n        result += \"x\";\n\
    \        num -= 10;\n    }\n    if (num >= 9) {\n        result += \"ix\";\n \
    \       num -= 9;\n    }\n    if (num >= 5) {\n        result += \"v\";\n    \
    \    num -= 5;\n    }\n    if (num >= 4) {\n        result += \"iv\";\n      \
    \  num -= 4;\n    }\n    while (num >= 1) {\n        result += \"i\";\n      \
    \  num -= 1;\n    }\n    return result;\n}\n", "    let result = \"\";\n    const\
    \ roman_numerals = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\"\
    ,\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"\
    l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n       \
    \ 500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n    };\n    const roman_numerals_keys\
    \ = Object.keys(roman_numerals).reverse();\n    for (let i = 0; i < roman_numerals_keys.length;\
    \ i++) {\n        const roman_numeral_key = parseInt(roman_numerals_keys[i]);\n\
    \        const roman_numeral_value = roman_numerals[roman_numeral_key];\n    \
    \    while (number >= roman_numeral_key) {\n            result += roman_numeral_value;\n\
    \            number -= roman_numeral_key;\n        }\n    }\n    return result;\n\
    }\n", "  let result = \"\";\n  let num = number;\n  let roman = {\n    M: 1000,\n\
    \    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n\
    \    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1\n  };\n\
    \  for (let key in roman) {\n    if (num >= roman[key]) {\n      let q = Math.floor(num\
    \ / roman[key]);\n      num -= q * roman[key];\n      result += key.repeat(q);\n\
    \    }\n  }\n  return result;\n}\n", "    if (number < 1 || number > 1000) {\n\
    \        throw new Error(\"Number out of range\");\n    }\n    let result = \"\
    \";\n    let num = number;\n    while (num >= 1000) {\n        result += \"m\"\
    ;\n        num -= 1000;\n    }\n    while (num >= 900) {\n        result += \"\
    cm\";\n        num -= 900;\n    }\n    while (num >= 500) {\n        result +=\
    \ \"d\";\n        num -= 500;\n    }\n    while (num >= 400) {\n        result\
    \ += \"cd\";\n        num -= 400;\n    }\n    while (num >= 100) {\n        result\
    \ += \"c\";\n        num -= 100;\n    }\n    while (num >= 90) {\n        result\
    \ += \"xc\";\n        num -= 90;\n    }\n    while (num >= 50) {\n        result\
    \ += \"l\";\n        num -= 50;\n    }\n    while (num >= 40) {\n        result\
    \ += \"xl\";\n        num -= 40;\n    }\n    while (num >= 10) {\n        result\
    \ += \"x\";\n        num -= 10;\n    }\n    while (num >= 9) {\n        result\
    \ += \"ix\";\n        num -= 9;\n    }\n    while (num >= 5) {\n        result\
    \ += \"v\";\n        num -= 5;\n    }\n    while (num >= 4) {\n        result\
    \ += \"iv\";\n        num -= 4;\n    }\n    while (num >= 1) {\n        result\
    \ += \"i\";\n        num -= 1;\n    }\n    return result;\n}\n", "    // your\
    \ code here\n    let result = \"\";\n    let num = number;\n    let roman = [\n\
    \        [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"],\n        [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\"\
    , \"lxxx\", \"xc\"],\n        [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"\
    dc\", \"dcc\", \"dccc\", \"cm\"],\n        [\"\", \"m\", \"mm\", \"mmm\", \"mv\"\
    , \"v\", \"vm\", \"vmm\", \"vmmm\", \"mx\"],\n    ];\n    let i = 0;\n    while\
    \ (num > 0) {\n        let digit = num % 10;\n        result = roman[i][digit]\
    \ + result;\n        num = Math.floor(num / 10);\n        i++;\n    }\n    return\
    \ result;\n}\n", "  let roman = \"\";\n  let num = number;\n  while (num > 0)\
    \ {\n    if (num >= 1000) {\n      roman += \"m\";\n      num -= 1000;\n    }\
    \ else if (num >= 900) {\n      roman += \"cm\";\n      num -= 900;\n    } else\
    \ if (num >= 500) {\n      roman += \"d\";\n      num -= 500;\n    } else if (num\
    \ >= 400) {\n      roman += \"cd\";\n      num -= 400;\n    } else if (num >=\
    \ 100) {\n      roman += \"c\";\n      num -= 100;\n    } else if (num >= 90)\
    \ {\n      roman += \"xc\";\n      num -= 90;\n    } else if (num >= 50) {\n \
    \     roman += \"l\";\n      num -= 50;\n    } else if (num >= 40) {\n      roman\
    \ += \"xl\";\n      num -= 40;\n    } else if (num >= 10) {\n      roman += \"\
    x\";\n      num -= 10;\n    } else if (num >= 9) {\n      roman += \"ix\";\n \
    \     num -= 9;\n    } else if (num >= 5) {\n      roman += \"v\";\n      num\
    \ -= 5;\n    } else if (num >= 4) {\n      roman += \"iv\";\n      num -= 4;\n\
    \    } else if (num >= 1) {\n      roman += \"i\";\n      num -= 1;\n    }\n \
    \ }\n  return roman;\n}\n", "    let result: string = '';\n    let roman: string[]\
    \ = ['i', 'v', 'x', 'l', 'c', 'd', 'm'];\n    let i: number = 0;\n    while (number\
    \ > 0) {\n        let digit: number = number % 10;\n        if (digit < 4) {\n\
    \            result = roman[i].repeat(digit) + result;\n        } else if (digit\
    \ === 4) {\n            result = roman[i] + roman[i + 1] + result;\n        }\
    \ else if (digit === 5) {\n            result = roman[i + 1] + result;\n     \
    \   } else if (digit < 9) {\n            result = roman[i + 1] + roman[i].repeat(digit\
    \ - 5) + result;\n        } else {\n            result = roman[i] + roman[i +\
    \ 2] + result;\n        }\n        number = Math.floor(number / 10);\n       \
    \ i += 2;\n    }\n    return result;\n}\n", "    let result = '';\n    let roman\
    \ = {\n        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n\
    \        C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X:\
    \ 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n \
    \   for (let key in roman) {\n        if (number >= roman[key]) {\n          \
    \  result += key.toLowerCase().repeat(Math.floor(number / roman[key]));\n    \
    \        number -= roman[key] * Math.floor(number / roman[key]);\n        }\n\
    \    }\n    return result;\n}\n", "    let result: string = '';\n    let roman:\
    \ string[] = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv',\
    \ 'i'];\n    let decimal: number[] = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    for (let i = 0; i < decimal.length; i++) {\n        while\
    \ (number % decimal[i] < number) {\n            result += roman[i];\n        \
    \    number -= decimal[i];\n        }\n    }\n    return result;\n}\n", "    let\
    \ result = \"\";\n    let num = number;\n    let roman = [\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n\
    \    let decimal = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n \
    \   for (let i = 0; i < decimal.length; i++) {\n        while (num % decimal[i]\
    \ < num) {\n            result += roman[i];\n            num -= decimal[i];\n\
    \        }\n    }\n    return result;\n}\n", "    let result = \"\";\n    let\
    \ roman_numerals = {\n        1: \"i\",\n        5: \"v\",\n        10: \"x\"\
    ,\n        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000:\
    \ \"m\"\n    };\n    let numbers = [1000, 500, 100, 50, 10, 5, 1];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        let num = numbers[i];\n        let\
    \ numeral = roman_numerals[num];\n        if (number >= num) {\n            let\
    \ count = Math.floor(number / num);\n            for (let j = 0; j < count; j++)\
    \ {\n                result += numeral;\n            }\n            number = number\
    \ % num;\n        }\n    }\n    return result;\n}\n", "  let result = \"\";\n\
    \  const roman = [\n    [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\",\
    \ \"vii\", \"viii\", \"ix\"],\n    [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\"\
    , \"lx\", \"lxx\", \"lxxx\", \"xc\"],\n    [\"\", \"c\", \"cc\", \"ccc\", \"cd\"\
    , \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"],\n    [\"\", \"m\", \"mm\", \"mmm\"\
    , \"mv\", \"v\", \"vm\", \"vmm\", \"vmmm\", \"mx\"],\n  ];\n  let num = number;\n\
    \  for (let i = 0; i < roman.length; i++) {\n    result = roman[i][num % 10] +\
    \ result;\n    num = Math.floor(num / 10);\n  }\n  return result;\n}\n", "   \
    \ const roman_numerals = {\n        1: \"i\",\n        4: \"iv\",\n        5:\
    \ \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n      \
    \  50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n\
    \        500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n    };\n    let\
    \ result = \"\";\n    let remainder = number;\n    let current_value = 1000;\n\
    \    while (remainder > 0) {\n        while (remainder >= current_value) {\n \
    \           result += roman_numerals[current_value];\n            remainder -=\
    \ current_value;\n        }\n        current_value = Math.floor(current_value\
    \ / 10);\n    }\n    return result;\n}\n", "    let result = \"\";\n    let roman\
    \ = {\n        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n\
    \        C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X:\
    \ 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n \
    \   for (let key in roman) {\n        if (number >= roman[key]) {\n          \
    \  result += key.toLowerCase().repeat(Math.floor(number / roman[key]));\n    \
    \        number -= roman[key] * Math.floor(number / roman[key]);\n        }\n\
    \    }\n    return result;\n}\n", "    let roman = '';\n    const romanNumList\
    \ = {\n        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n\
    \        C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X:\
    \ 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n \
    \   let a;\n    if (number < 1 || number > 1000) {\n        return 'out of range';\n\
    \    }\n    for (let key in romanNumList) {\n        a = Math.floor(number / romanNumList[key]);\n\
    \        if (a >= 0) {\n            for (let i = 0; i < a; i++) {\n          \
    \      roman += key;\n            }\n        }\n        number = number % romanNumList[key];\n\
    \    }\n    return roman;\n}\n", "    let result = \"\";\n    let roman = {\n\
    \        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n     \
    \   C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n\
    \        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n    for\
    \ (let key in roman) {\n        while (number >= roman[key]) {\n            result\
    \ += key;\n            number -= roman[key];\n        }\n    }\n    return result;\n\
    }\n", "    let result = \"\";\n    let roman = {\n        M: 1000,\n        CM:\
    \ 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n\
    \        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n\
    \        IV: 4,\n        I: 1\n    };\n    for (let key in roman) {\n        if\
    \ (number >= roman[key]) {\n            result += key.toLowerCase().repeat(Math.floor(number\
    \ / roman[key]));\n            number -= roman[key] * Math.floor(number / roman[key]);\n\
    \        }\n    }\n    return result;\n}\n", "    let result = \"\";\n    const\
    \ roman_numerals = {\n        1: \"i\",\n        5: \"v\",\n        10: \"x\"\
    ,\n        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000:\
    \ \"m\"\n    };\n    const roman_numerals_keys = Object.keys(roman_numerals).reverse();\n\
    \    for (let i = 0; i < roman_numerals_keys.length; i++) {\n        const key\
    \ = roman_numerals_keys[i];\n        const value = roman_numerals[key];\n    \
    \    const number_of_times = Math.floor(number / parseInt(key));\n        if (number_of_times\
    \ > 0) {\n            result += value.repeat(number_of_times);\n            number\
    \ -= number_of_times * parseInt(key);\n        }\n    }\n    return result;\n\
    }\n", "    let roman = \"\";\n    let romanNumeral = [\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  \
    \  let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i])\
    \ {\n            roman += romanNumeral[i];\n            number -= numbers[i];\n\
    \        }\n    }\n    return roman;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
