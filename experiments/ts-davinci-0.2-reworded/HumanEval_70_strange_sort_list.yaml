name: HumanEval_70_strange_sort_list
language: ts
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
  \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
  \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
  \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    if (lst.length === 0) {\n        return lst;\n    }\n    let sorted_list\
    \ = lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let\
    \ j = sorted_list.length - 1;\n    while (i <= j) {\n        result.push(sorted_list[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted_list[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    const result: number[] = [];\n    const\
    \ sorted: number[] = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let\
    \ j: number = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    const sorted = lst.sort((a, b) => a\
    \ - b);\n    const result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n\
    \    while (i < j) {\n        result.push(sorted[i]);\n        result.push(sorted[j]);\n\
    \        i++;\n        j--;\n    }\n    if (i === j) {\n        result.push(sorted[i]);\n\
    \    }\n    return result;\n}\n", "    if (lst.length === 0) {\n        return\
    \ [];\n    }\n    const sorted = lst.sort((a, b) => a - b);\n    const result\
    \ = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <= j) {\n\
    \        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n      \
    \      result.push(sorted[j]);\n            j--;\n        }\n    }\n    return\
    \ result;\n}\n", "    if (lst.length === 0) {\n        return lst;\n    }\n  \
    \  let result: number[] = [];\n    let min: number = Math.min(...lst);\n    let\
    \ max: number = Math.max(...lst);\n    result.push(min);\n    result.push(max);\n\
    \    lst.splice(lst.indexOf(min), 1);\n    lst.splice(lst.indexOf(max), 1);\n\
    \    while (lst.length > 0) {\n        min = Math.min(...lst);\n        result.push(min);\n\
    \        lst.splice(lst.indexOf(min), 1);\n        if (lst.length > 0) {\n   \
    \         max = Math.max(...lst);\n            result.push(max);\n           \
    \ lst.splice(lst.indexOf(max), 1);\n        }\n    }\n    return result;\n}\n",
  "    if (lst.length === 0) {\n        return [];\n    }\n    const sorted = lst.sort((a,\
    \ b) => a - b);\n    const result = [];\n    let i = 0;\n    let j = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n", "    if (lst.length === 0) {\n  \
    \      return [];\n    }\n    let result: number[] = [];\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let minIndex = lst.indexOf(min);\n    let\
    \ maxIndex = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n\
    \    lst.splice(minIndex, 1);\n    lst.splice(maxIndex - 1, 1);\n    return result.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length === 0) {\n        return lst;\n    }\n    lst.sort((a,\
    \ b) => a - b);\n    let result: number[] = [];\n    let i: number = 0;\n    let\
    \ j: number = lst.length - 1;\n    while (i <= j) {\n        result.push(lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(lst[j]);\n     \
    \       j--;\n        }\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n\n    let result: number[] = [];\n    let\
    \ min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n \
    \   let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_removed: number[] = lst.slice(0, min_index).concat(lst.slice(min_index\
    \ + 1));\n    let max_removed: number[] = min_removed.slice(0, max_index).concat(min_removed.slice(max_index\
    \ + 1));\n\n    result.push(min);\n    result.push(max);\n\n    return result.concat(strange_sort_list(max_removed));\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const minIndex = lst.indexOf(min);\n  const\
    \ maxIndex = lst.indexOf(max);\n  const newLst = [...lst];\n  newLst.splice(minIndex,\
    \ 1);\n  newLst.splice(maxIndex - 1, 1);\n  return [min, max, ...strange_sort_list(newLst)];\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    }\n    let sorted_list\
    \ = lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let\
    \ j = sorted_list.length - 1;\n    while (i <= j) {\n        result.push(sorted_list[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted_list[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n", "    let result:\
    \ number[] = [];\n    let sorted: number[] = lst.sort((a, b) => a - b);\n    let\
    \ i: number = 0;\n    let j: number = sorted.length - 1;\n    while (i <= j) {\n\
    \        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n      \
    \      result.push(sorted[j]);\n            j--;\n        }\n    }\n    return\
    \ result;\n}\n", "    const sorted = lst.sort((a, b) => a - b);\n    const result\
    \ = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <= j) {\n\
    \        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n      \
    \      result.push(sorted[j]);\n            j--;\n        }\n    }\n    return\
    \ result;\n}\n", "    if (lst.length === 0) {\n        return [];\n    }\n   \
    \ const min = Math.min(...lst);\n    const max = Math.max(...lst);\n    const\
    \ minIndex = lst.indexOf(min);\n    const maxIndex = lst.indexOf(max);\n    const\
    \ newLst = [min];\n    let i = 0;\n    while (newLst.length < lst.length) {\n\
    \        if (i % 2 === 0) {\n            newLst.push(max);\n        } else {\n\
    \            newLst.push(min);\n        }\n        i++;\n    }\n    return newLst;\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    }\n    const sorted\
    \ = lst.sort((a, b) => a - b);\n    const result = [];\n    let i = 0;\n    let\
    \ j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n", "    let res: number[]\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_flag: boolean = true;\n    let max_flag: boolean = true;\n    if\
    \ (lst.length === 0) {\n        return [];\n    }\n    for (let i: number = 0;\
    \ i < lst.length; i++) {\n        if (min_flag) {\n            res.push(min);\n\
    \            min_flag = false;\n        } else if (max_flag) {\n            res.push(max);\n\
    \            max_flag = false;\n        }\n        if (min_index === max_index)\
    \ {\n            lst.splice(min_index, 1);\n            min = Math.min(...lst);\n\
    \            max = Math.max(...lst);\n            min_index = lst.indexOf(min);\n\
    \            max_index = lst.indexOf(max);\n            min_flag = true;\n   \
    \         max_flag = true;\n        } else if (min_index < max_index) {\n    \
    \        lst.splice(min_index, 1);\n            min = Math.min(...lst);\n    \
    \        min_index = lst.indexOf(min);\n            max_flag = true;\n       \
    \ } else if (min_index > max_index) {\n            lst.splice(max_index, 1);\n\
    \            max = Math.max(...lst);\n            max_index = lst.indexOf(max);\n\
    \            min_flag = true;\n        }\n    }\n    return res;\n}\n", "    if\
    \ (lst.length === 0) {\n        return [];\n    }\n    let result: number[] =\
    \ [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_lst: number[] = lst.slice(0, min_index);\n    let max_lst: number[]\
    \ = lst.slice(min_index + 1, max_index);\n    let rest_lst: number[] = lst.slice(max_index\
    \ + 1);\n    result.push(min);\n    result.push(max);\n    if (min_lst.length\
    \ > 0) {\n        result = result.concat(strange_sort_list(min_lst));\n    }\n\
    \    if (max_lst.length > 0) {\n        result = result.concat(strange_sort_list(max_lst));\n\
    \    }\n    if (rest_lst.length > 0) {\n        result = result.concat(strange_sort_list(rest_lst));\n\
    \    }\n    return result;\n}\n", "    if (lst.length == 0) {\n        return\
    \ [];\n    }\n    let result: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let minIndex: number = lst.indexOf(min);\n\
    \    let maxIndex: number = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n\
    \    lst.splice(minIndex, 1);\n    lst.splice(maxIndex - 1, 1);\n    while (lst.length\
    \ > 0) {\n        min = Math.min(...lst);\n        max = Math.max(...lst);\n \
    \       minIndex = lst.indexOf(min);\n        maxIndex = lst.indexOf(max);\n \
    \       result.push(min);\n        result.push(max);\n        lst.splice(minIndex,\
    \ 1);\n        lst.splice(maxIndex - 1, 1);\n    }\n    return result;\n}\n",
  "    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let result = [min];\n    let i = 0;\n  \
    \  while (result.length < lst.length) {\n        if (i % 2 === 0) {\n        \
    \    let max_index = lst.indexOf(max);\n            result.push(max);\n      \
    \      lst.splice(max_index, 1);\n            max = Math.max(...lst);\n      \
    \  } else {\n            let min_index = lst.indexOf(min);\n            result.push(min);\n\
    \            lst.splice(min_index, 1);\n            min = Math.min(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    let result: number[]\
    \ = [];\n    let lst_copy: number[] = lst.slice();\n    while (lst_copy.length\
    \ > 0) {\n        result.push(Math.min(...lst_copy));\n        lst_copy.splice(lst_copy.indexOf(Math.min(...lst_copy)),\
    \ 1);\n        if (lst_copy.length > 0) {\n            result.push(Math.max(...lst_copy));\n\
    \            lst_copy.splice(lst_copy.indexOf(Math.max(...lst_copy)), 1);\n  \
    \      }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
