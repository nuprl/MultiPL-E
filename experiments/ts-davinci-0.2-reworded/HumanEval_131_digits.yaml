name: HumanEval_131_digits
language: ts
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
  // 0\n// >>> digits(235)\n// 15\nfunction digits(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["    let product = 1;\n    let num = n;\n    while (num > 0) {\n   \
    \     let digit = num % 10;\n        if (digit % 2 !== 0) {\n            product\
    \ *= digit;\n        }\n        num = Math.floor(num / 10);\n    }\n    return\
    \ product;\n}\n", "  let result = 1;\n  while (n > 0) {\n    const digit = n %\
    \ 10;\n    if (digit % 2 !== 0) {\n      result *= digit;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return result;\n}\n", "  let product = 1;\n  while (n > 0) {\n\
    \    const digit = n % 10;\n    if (digit % 2 === 1) {\n      product *= digit;\n\
    \    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n}\n", "    let product\
    \ = 1;\n    let num = n;\n    while (num > 0) {\n        const digit = num % 10;\n\
    \        if (digit % 2 !== 0) {\n            product *= digit;\n        }\n  \
    \      num = Math.floor(num / 10);\n    }\n    return product;\n}\n", "    let\
    \ product = 1;\n    while (n > 0) {\n        const digit = n % 10;\n        if\
    \ (digit % 2 !== 0) {\n            product *= digit;\n        }\n        n = Math.floor(n\
    \ / 10);\n    }\n    return product;\n}\n", "    let product = 1;\n    let num\
    \ = n;\n    while (num > 0) {\n        let digit = num % 10;\n        if (digit\
    \ % 2 === 1) {\n            product *= digit;\n        }\n        num = Math.floor(num\
    \ / 10);\n    }\n    return product;\n}\n", "    let oddProduct = 1;\n    let\
    \ numString = n.toString();\n    for (let i = 0; i < numString.length; i++) {\n\
    \        let num = parseInt(numString[i]);\n        if (num % 2 !== 0) {\n   \
    \         oddProduct *= num;\n        }\n    }\n    return oddProduct;\n}\n",
  "  let product = 1;\n  let digits = n.toString().split(\"\");\n  for (let i = 0;\
    \ i < digits.length; i++) {\n    if (parseInt(digits[i]) % 2 !== 0) {\n      product\
    \ *= parseInt(digits[i]);\n    }\n  }\n  return product;\n}\n", "  let product\
    \ = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 === 1)\
    \ {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return\
    \ product;\n}\n", "  let product = 1;\n  while (n > 0) {\n    const digit = n\
    \ % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return product;\n}\n", "  let product = 1;\n  while (n > 0) {\n\
    \    const digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n\
    \    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n}\n", "  let product\
    \ = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0)\
    \ {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return\
    \ product;\n}\n", "    let result = 1;\n    while (n > 0) {\n        const digit\
    \ = n % 10;\n        if (digit % 2 !== 0) {\n            result *= digit;\n  \
    \      }\n        n = Math.floor(n / 10);\n    }\n    return result;\n}\n", " \
    \ let product = 1;\n  let num = n;\n  while (num > 0) {\n    const digit = num\
    \ % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return product;\n}\n", "    let product = 1;\n\
    \    let num = n;\n    while (num > 0) {\n        let digit = num % 10;\n    \
    \    if (digit % 2 === 1) {\n            product *= digit;\n        }\n      \
    \  num = Math.floor(num / 10);\n    }\n    return product;\n}\n", "  let product\
    \ = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 === 1)\
    \ {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return\
    \ product;\n}\n", "    let result = 1;\n    let num = n;\n    while (num > 0)\
    \ {\n        let digit = num % 10;\n        if (digit % 2 !== 0) {\n         \
    \   result *= digit;\n        }\n        num = Math.floor(num / 10);\n    }\n\
    \    return result;\n}\n", "    let product = 1;\n    while (n > 0) {\n      \
    \  let digit = n % 10;\n        if (digit % 2 === 1) {\n            product *=\
    \ digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return product;\n\
    }\n", "  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if\
    \ (digit % 2 === 1) {\n      product *= digit;\n    }\n    n = Math.floor(n /\
    \ 10);\n  }\n  return product;\n}\n", "  let product = 1;\n  while (n > 0) {\n\
    \    const digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n\
    \    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
