name: HumanEval_78_hex_key
language: ts
prompt: "//You have been tasked to write a function that receives \n// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n// digits that are primes\
  \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
  \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n// So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is\
  \ always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n\
  // Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n//\
  \ >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n\
  // >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
  \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"\
  ),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
  123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ),12);\n}\n\ntest();"
completions: ["    let result: number = 0;\n    let hex: string[] = ['2', '3', '5',\
    \ '7', 'B', 'D'];\n    for (let i: number = 0; i < num.length; i++) {\n      \
    \  if (hex.indexOf(num[i]) !== -1) {\n            result++;\n        }\n    }\n\
    \    return result;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    const primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let primes = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0;\
    \ i < num.length; i++) {\n        if (primes.includes(parseInt(num[i], 16))) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for (let i = 0; i < num.length; i++) {\n        if (isPrime(hex[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    let hex = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i =\
    \ 0; i < num.length; i++) {\n        if (hex.includes(num[i])) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"\
    ));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));", "    let hexPrimes: string\
    \ = \"2357BD\";\n    let count: number = 0;\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (hexPrimes.indexOf(num[i]) > -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let count = 0;\n    let hex =\
    \ ['A', 'B', 'D', '2', '3', '5', '7'];\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (hex.includes(num[i])) {\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let result: number = 0;\n    let hex:\
    \ string[] = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number\
    \ = 0; i < num.length; i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n   \
    \         result++;\n        }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n       \
    \ '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n\
    \        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n       \
    \ 'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F':\
    \ 15\n    }\n    for (let i = 0; i < num.length; i++) {\n        let digit = hex[num[i]];\n\
    \        if (digit === 2 || digit === 3 || digit === 5 || digit === 7 || digit\
    \ === 11 || digit === 13) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let result: number = 0;\n    let hexPrimes:\
    \ string[] = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number\
    \ = 0; i < num.length; i++) {\n        if (hexPrimes.indexOf(num[i]) !== -1) {\n\
    \            result++;\n        }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n       \
    \ '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n\
    \        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n       \
    \ 'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F':\
    \ 15\n    }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]]\
    \ === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n       \
    \ '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n\
    \        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n       \
    \ 'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F':\
    \ 15\n    }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]]\
    \ === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    let count = 0;\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (primes.includes(parseInt(num[i], 16))) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let count: number = 0;\n    let hex:\
    \ string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    let primes: string[] = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (primes.indexOf(num[i]) !== -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let count = 0;\n    const primes\
    \ = [2, 3, 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n      \
    \  if (primes.includes(parseInt(num[i], 16))) {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let hex = {\n        '0': 0,\n   \
    \     '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5':\
    \ 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n   \
    \     'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n       \
    \ 'E': 14,\n        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i\
    \ < num.length; i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 ||\
    \ hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    console.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    let hex: string[] = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let primes: string[] = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    let count: number = 0;\n    for (let i: number = 0;\
    \ i < num.length; i++) {\n        if (primes.indexOf(num[i]) > -1) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count = 0;\n    let hex: string[] = [\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"];\n    for (let i = 0; i < num.length; i++) {\n        if (hex.includes(num[i]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n       \
    \ '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n\
    \        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n       \
    \ 'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F':\
    \ 15\n    }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]]\
    \ === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
