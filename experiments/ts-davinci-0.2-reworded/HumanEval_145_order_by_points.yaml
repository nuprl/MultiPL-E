name: HumanEval_145_order_by_points
language: ts
prompt: "//Write a function which sorts the given array of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums:\
  \ number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc,\
    \ val) => acc + parseInt(val), 0);\n        const sumB = b.toString().split('').reduce((acc,\
    \ val) => acc + parseInt(val), 0);\n        return sumA - sumB;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n", "    return\
    \ nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a,\
    \ b) => {\n    let a_sum = a.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n    let b_sum = b.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n    if (a_sum === b_sum) {\n      return nums.indexOf(a) - nums.indexOf(b);\n\
    \    }\n    return a_sum - b_sum;\n  });\n}\n", "    return nums.sort((a, b) =>\
    \ {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return sumA - sumB;\n    });\n}\n", "    return nums.sort((a, b)\
    \ => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n", "    return nums.sort((a, b)\
    \ => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    let result: number[] = [];\n    let sum: number = 0;\n    let sumArray: number[]\
    \ = [];\n    let indexArray: number[] = [];\n    for (let i: number = 0; i < nums.length;\
    \ i++) {\n        let num: number = nums[i];\n        while (num > 0) {\n    \
    \        sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n\
    \        sumArray.push(sum);\n        sum = 0;\n    }\n    for (let i: number\
    \ = 0; i < sumArray.length; i++) {\n        let min: number = Math.min(...sumArray);\n\
    \        let index: number = sumArray.indexOf(min);\n        indexArray.push(index);\n\
    \        sumArray[index] = Infinity;\n    }\n    for (let i: number = 0; i < indexArray.length;\
    \ i++) {\n        result.push(nums[indexArray[i]]);\n    }\n    return result;\n\
    }\n", "  return nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n    let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n    return sumA - sumB;\n  });\n}\n", "  return\
    \ nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let sumA = sumDigits(a);\n        let sumB = sumDigits(b);\n        if\
    \ (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n \
    \       }\n        return sumA - sumB;\n    });\n}\n", "  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((a, b) => +a + +b, 0);\n\
    \    let bSum = b.toString().split('').reduce((a, b) => +a + +b, 0);\n    return\
    \ aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n        let sumA\
    \ = a.toString().split('').reduce((sum, num) => sum + parseInt(num), 0);\n   \
    \     let sumB = b.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n        return sumA - sumB;\n    });\n}\n", "    return nums.sort((a, b)\
    \ => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n", "  return nums.sort((a, b)\
    \ => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc + +curr,\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + +curr,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a, b) => {\n\
    \    let sumA = 0;\n    let sumB = 0;\n    let aString = a.toString();\n    let\
    \ bString = b.toString();\n    for (let i = 0; i < aString.length; i++) {\n  \
    \    sumA += parseInt(aString[i]);\n    }\n    for (let i = 0; i < bString.length;\
    \ i++) {\n      sumB += parseInt(bString[i]);\n    }\n    if (sumA === sumB) {\n\
    \      return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      return sumA\
    \ - sumB;\n    }\n  });\n}\n", "    return nums.sort((a, b) => {\n        let\
    \ sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n\
    \        let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return sumA - sumB;\n    });\n}\n", "  return nums.sort((a, b)\
    \ => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc + +curr,\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + +curr,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
