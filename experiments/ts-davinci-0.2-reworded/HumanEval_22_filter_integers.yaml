name: HumanEval_22_filter_integers
language: ts
prompt: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
  a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1,\
  \ 2, 3]\nfunction filter_integers(values: any[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
  \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
completions: ["  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "  return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n}\n", " \
    \   return values.filter(value => typeof value === \"number\" && value % 1 ===\
    \ 0);\n}\n", "    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n", "    return values.filter(function (value) {\n    \
    \    return typeof value === \"number\" && Number.isInteger(value);\n    });\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && !isNaN(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && value % 1 === 0);\n}\n",
  "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n", "    return values.filter(function (value) {\n        return typeof value\
    \ === \"number\" && Number.isInteger(value);\n    });\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && !isNaN(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && value % 1 === 0);\n}\n",
  "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && value % 1 === 0);\n}\n",
  "    return values.filter(value => typeof value === \"number\" && value % 1 ===\
    \ 0);\n}\n", "    return values.filter(value => typeof value === \"number\");\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(is_integer);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\");\n}\n",
  "    return values.filter(value => typeof value === \"number\" && value % 1 ===\
    \ 0);\n}\n", "    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n", "    return values.filter(value => typeof value\
    \ === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && !isNaN(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\");\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(function (value) {\n        return typeof value\
    \ === \"number\" && Number.isInteger(value);\n    });\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(is_integer);\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < values.length;\
    \ i++) {\n        if (typeof values[i] === \"number\") {\n            result.push(values[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    return values.filter(function\
    \ (value) {\n        return typeof value === \"number\" && value % 1 === 0;\n\
    \    });\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(function (value: any): boolean {\n        return\
    \ typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && value % 1 === 0);\n}\n", "    return values.filter(value => typeof value\
    \ === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value =>\
    \ Number.isInteger(value));\n}\n", "    return values.filter(value => typeof value\
    \ === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && value % 1 === 0);\n}\n", "    return values.filter(value => typeof value\
    \ === \"number\" && Number.isInteger(value));\n}\n", "  return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && value % 1 === 0);\n}\n",
  "    return values.filter(value => typeof value === \"number\" && value % 1 ===\
    \ 0);\n}\n", "    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n", "    return values.filter(value => typeof value\
    \ === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(function\
    \ (value) {\n        return typeof value === \"number\" && Number.isInteger(value);\n\
    \    });\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && !isNaN(value));\n}\n", "    return values.filter(value => typeof value ===\
    \ \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && value % 1 === 0);\n}\n", "  return values.filter(value => typeof value ===\
    \ \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n}\n", " \
    \   return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && !isNaN(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\");\n}\n",
  "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(function\
    \ (value) {\n        return typeof value === \"number\" && Number.isInteger(value);\n\
    \    });\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && value % 1 === 0);\n}\n", "    return values.filter(value => typeof value\
    \ === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value =>\
    \ typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(v => typeof v === \"number\" && Math.floor(v)\
    \ === v);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && value % 1 === 0);\n}\n", "    return values.filter(value => typeof value\
    \ === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value =>\
    \ typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\");\n}\n",
  "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && value % 1 === 0);\n}\n", "    return values.filter(value => typeof value\
    \ === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(v => typeof v === \"number\" && v % 1 === 0);\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && !isNaN(value));\n}\n", "    return values.filter(value => typeof value ===\
    \ \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "  return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && !Number.isNaN(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(function (value) {\n        return\
    \ typeof value === \"number\" && Number.isInteger(value);\n    });\n}\n", "  \
    \  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(function (value) {\n        return typeof value\
    \ === \"number\" && Number.isInteger(value);\n    });\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && !isNaN(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(function (value) {\n        return typeof value\
    \ === \"number\" && Number.isInteger(value);\n    });\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "  return\
    \ values.filter(value => typeof value === \"number\" && value % 1 === 0);\n}\n",
  "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(function (value) {\n        return typeof value\
    \ === \"number\" && Number.isInteger(value);\n    });\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && value % 1 === 0);\n}\n",
  "    return values.filter(function (value) {\n        return typeof value === \"\
    number\" && Number.isInteger(value);\n    });\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(function\
    \ (value) {\n        return typeof value === \"number\" && value % 1 === 0;\n\
    \    });\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && value % 1 === 0);\n}\n",
  "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(function (value) {\n        return typeof value\
    \ === \"number\" && Number.isInteger(value);\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
