name: HumanEval_22_filter_integers
language: ts
prompt: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
  a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1,\
  \ 2, 3]\nfunction filter_integers(values: any[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
  \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
completions: ["  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "    return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "    return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && Number.isInteger(value));\n}\n", "  return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n", "    return\
    \ values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n}\n", " \
    \   return values.filter(value => typeof value === \"number\" && value % 1 ===\
    \ 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
