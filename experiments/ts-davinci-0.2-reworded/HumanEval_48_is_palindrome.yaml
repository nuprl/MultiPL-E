name: HumanEval_48_is_palindrome
language: ts
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
  \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n\
  // true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
completions: ["    if (text.length <= 1) {\n        return true;\n    } else if (text[0]\
    \ === text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    } else {\n        return false;\n    }\n}\n", "    let i: number\
    \ = 0;\n    let j: number = text.length - 1;\n    while (i < j) {\n        if\
    \ (text[i] !== text[j]) {\n            return false;\n        }\n        i++;\n\
    \        j--;\n    }\n    return true;\n}\n", "    if (text.length <= 1) {\n \
    \       return true;\n    } else if (text[0] === text[text.length - 1]) {\n  \
    \      return is_palindrome(text.slice(1, text.length - 1));\n    } else {\n \
    \       return false;\n    }\n}\n", "    if (text.length <= 1) {\n        return\
    \ true;\n    }\n    if (text[0] === text[text.length - 1]) {\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n    return false;\n}\n", "    if (text.length ===\
    \ 0) {\n        return true;\n    } else {\n        return text[0] === text[text.length\
    \ - 1] && is_palindrome(text.slice(1, text.length - 1));\n    }\n}\n", "    return\
    \ text.split(\"\").reverse().join(\"\") === text;\n}\n", "    return text ===\
    \ text.split(\"\").reverse().join(\"\");\n}\n", "    if (text.length <= 1) {\n\
    \        return true;\n    }\n    if (text[0] !== text[text.length - 1]) {\n \
    \       return false;\n    }\n    return is_palindrome(text.slice(1, text.length\
    \ - 1));\n}\n", "    return text === text.split(\"\").reverse().join(\"\");\n\
    }\n", "    let left_index = 0;\n    let right_index = text.length - 1;\n    while\
    \ (left_index < right_index) {\n        if (text[left_index] != text[right_index])\
    \ {\n            return false;\n        }\n        left_index += 1;\n        right_index\
    \ -= 1;\n    }\n    return true;\n}\n", "    let i: number = 0;\n    let j: number\
    \ = text.length - 1;\n    while (i < j) {\n        if (text[i] !== text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}\n", "    let len = text.length;\n    if (len <= 1) {\n     \
    \   return true;\n    }\n    if (text[0] != text[len - 1]) {\n        return false;\n\
    \    }\n    return is_palindrome(text.slice(1, len - 1));\n}\n", "    return text\
    \ === text.split(\"\").reverse().join(\"\");\n}\n", "    // TODO: implement this\
    \ function\n    return false;\n}\n", "    let text_length = text.length;\n   \
    \ for (let i = 0; i < text_length / 2; i++) {\n        if (text[i] !== text[text_length\
    \ - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if (text.length <= 1) {\n        return true;\n    } else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    } else {\n        return false;\n    }\n}\n", "    let text_length\
    \ = text.length;\n    for (let i = 0; i < text_length / 2; i++) {\n        if\
    \ (text[i] !== text[text_length - i - 1]) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n", "    return text === text.split(\"\").reverse().join(\"\
    \");\n}\n", "    let text_length = text.length;\n    if (text_length <= 1) {\n\
    \        return true;\n    }\n    else {\n        if (text[0] == text[text_length\
    \ - 1]) {\n            return is_palindrome(text.slice(1, text_length - 1));\n\
    \        }\n        else {\n            return false;\n        }\n    }\n}\n",
  "    return text.split(\"\").reverse().join(\"\") === text;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
