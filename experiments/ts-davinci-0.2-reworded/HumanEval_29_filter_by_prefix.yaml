name: HumanEval_29_filter_by_prefix
language: ts
prompt: "//Filter an input array of strings only for ones that start with a given\
  \ prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings:\
  \ string[], prefix: string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
  test();"
completions: ["    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
