name: HumanEval_47_median
language: ts
prompt: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4,\
  \ 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
  \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1,\
  \ 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["    let sorted = l.sort((a, b) => a - b);\n    let length = sorted.length;\n\
    \    if (length % 2 === 0) {\n        return (sorted[length / 2 - 1] + sorted[length\
    \ / 2]) / 2;\n    } else {\n        return sorted[(length - 1) / 2];\n    }\n\
    }\n", "    let n = l.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 ==\
    \ 0) {\n        return (l[m] + l[m - 1]) / 2;\n    } else {\n        return l[m];\n\
    \    }\n}\n", "    let n = l.length;\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n  \
    \  }\n}\n", "    let sorted = l.sort(function(a, b) {\n        return a - b;\n\
    \    });\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    if (l.length === 0) {\n  \
    \      return 0;\n    }\n    const sorted = l.sort((a, b) => a - b);\n    const\
    \ mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n \
    \       return (sorted[mid - 1] + sorted[mid]) / 2;\n    }\n    return sorted[mid];\n\
    }\n", "    return 0;\n}\n", "    let n = l.length;\n    if (n % 2 == 0) {\n  \
    \      return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n\
    \ - 1) / 2];\n    }\n}\n", "    let sorted = l.sort((a, b) => a - b);\n    let\
    \ mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n \
    \       return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n", "    let sorted = l.sort((a, b) => a - b);\n    let\
    \ mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n  \
    \      return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n", "    let n = l.length;\n    if (n % 2 == 0) {\n \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n\
    \ - 1) / 2];\n    }\n}\n", "    let n = l.length;\n    let m = Math.floor(n /\
    \ 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else\
    \ {\n        return l[m];\n    }\n}\n", "    if (l.length === 0) {\n        return\
    \ 0;\n    }\n    l.sort();\n    if (l.length % 2 === 0) {\n        return (l[l.length\
    \ / 2 - 1] + l[l.length / 2]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n", "    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 === 0) {\n        return (sorted[len / 2 - 1] + sorted[len /\
    \ 2]) / 2;\n    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n",
  "    let sorted = l.sort();\n    let mid = Math.floor(sorted.length / 2);\n    if\
    \ (sorted.length % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid])\
    \ / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let sorted\
    \ = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length / 2);\n \
    \   if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid -\
    \ 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let sorted\
    \ = l.sort();\n    let len = sorted.length;\n    if (len % 2 == 0) {\n       \
    \ return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return\
    \ sorted[(len - 1) / 2];\n    }\n}\n", "    let sorted = l.sort((a, b) => a -\
    \ b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2\
    \ == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n\
    \        return sorted[mid];\n    }\n}\n", "    let sorted = l.sort((a, b) =>\
    \ a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    const sorted = l.sort((a,\
    \ b) => a - b);\n    const middle = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n  \
    \  } else {\n        return sorted[middle];\n    }\n}\n", "    let n = l.length;\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else\
    \ {\n        return l[(n - 1) / 2];\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
