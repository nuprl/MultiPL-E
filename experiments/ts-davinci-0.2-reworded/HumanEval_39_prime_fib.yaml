name: HumanEval_39_prime_fib
language: ts
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n:\
  \ number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
  \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
  \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n \
  \ assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
  \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
  }\n\ntest();"
completions: ["    let fib_list: number[] = [2, 3, 5, 13, 89];\n    if (n <= fib_list.length)\
    \ {\n        return fib_list[n - 1];\n    } else {\n        let i: number = fib_list.length;\n\
    \        let fib_num: number = fib_list[i - 1];\n        while (i < n) {\n   \
    \         fib_num = fib_num + fib_list[i - 2];\n            if (is_prime(fib_num))\
    \ {\n                fib_list.push(fib_num);\n                i++;\n         \
    \   }\n        }\n        return fib_num;\n    }\n}\n", "    let fib = fibonacci(n);\n\
    \    while (!is_prime(fib)) {\n        fib = fibonacci(n);\n        n++;\n   \
    \ }\n    return fib;\n}\n", "    let fib = fibonacci(n);\n    let prime = prime_number(n);\n\
    \    let prime_fib = 0;\n    let i = 0;\n    while (i < n) {\n        if (fib\
    \ === prime) {\n            prime_fib = fib;\n            i++;\n        }\n  \
    \      fib = fibonacci(n);\n        prime = prime_number(n);\n    }\n    return\
    \ prime_fib;\n}\n", "    let i = 1;\n    let fib = 1;\n    let fib_prev = 1;\n\
    \    let fib_prev_prev = 0;\n    while (i < n) {\n        fib_prev_prev = fib_prev;\n\
    \        fib_prev = fib;\n        fib = fib_prev + fib_prev_prev;\n        if\
    \ (is_prime(fib)) {\n            i += 1;\n        }\n    }\n    return fib;\n\
    }\n", "    let fib = fibonacci(n);\n    while (!is_prime(fib)) {\n        fib\
    \ = fibonacci(n);\n        n++;\n    }\n    return fib;\n}\n", "    let fib: number\
    \ = 0;\n    let fib_prev: number = 1;\n    let fib_prev_prev: number = 0;\n  \
    \  let count: number = 0;\n    while (count < n) {\n        fib = fib_prev + fib_prev_prev;\n\
    \        if (is_prime(fib)) {\n            count++;\n        }\n        fib_prev_prev\
    \ = fib_prev;\n        fib_prev = fib;\n    }\n    return fib;\n}\n", "    let\
    \ fib: number[] = [2, 3];\n    let i: number = 2;\n    while (i < n) {\n     \
    \   fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n\
    \ - 1];\n}\n", "    let fib_numbers: number[] = [2, 3];\n    let i: number = 2;\n\
    \    let j: number = 0;\n    let k: number = 0;\n    let is_prime: boolean = true;\n\
    \    while (i < n) {\n        j = fib_numbers[i - 1] + fib_numbers[i - 2];\n \
    \       fib_numbers.push(j);\n        for (k = 2; k < j; k++) {\n            if\
    \ (j % k === 0) {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime) {\n            i++;\n       \
    \ }\n        is_prime = true;\n    }\n    return fib_numbers[n - 1];\n}\n", " \
    \   let fib_arr = [2, 3];\n    let i = 0;\n    while (fib_arr.length < n) {\n\
    \        fib_arr.push(fib_arr[i] + fib_arr[i + 1]);\n        i++;\n    }\n   \
    \ return fib_arr[n - 1];\n}\n", "    let fib_num = fib(n);\n    while (!is_prime(fib_num))\
    \ {\n        fib_num = fib(n);\n        n += 1;\n    }\n    return fib_num;\n\
    }\n", "    let fib_numbers: number[] = [2, 3];\n    let i: number = 2;\n    while\
    \ (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n\
    \        i++;\n    }\n    return fib_numbers[n - 1];\n}\n", "    let fib_num =\
    \ fib(n);\n    let prime_num = prime(n);\n    if (fib_num == prime_num) {\n  \
    \      return fib_num;\n    } else {\n        return prime_fib(n + 1);\n    }\n\
    }\n", "    let fib_nums: number[] = [1, 2];\n    let i: number = 2;\n    while\
    \ (i < n) {\n        fib_nums.push(fib_nums[i - 1] + fib_nums[i - 2]);\n     \
    \   i++;\n    }\n    return fib_nums[n - 1];\n}\n", "    let i = 1;\n    let a\
    \ = 1;\n    let b = 1;\n    let c = 0;\n    while (i < n) {\n        c = a + b;\n\
    \        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n\
    \        }\n    }\n    return c;\n}\n", "    let fib_numbers: number[] = [2, 3];\n\
    \    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i\
    \ - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n -\
    \ 1];\n}\n", "    let fibs: number[] = [2, 3, 5];\n    let i: number = 3;\n  \
    \  let fib: number = 0;\n    while (i < n) {\n        fib = fibs[i - 1] + fibs[i\
    \ - 2];\n        if (is_prime(fib)) {\n            fibs.push(fib);\n         \
    \   i += 1;\n        }\n    }\n    return fibs[n - 1];\n}\n", "    let fib_nums:\
    \ number[] = [2, 3];\n    let i: number = 2;\n    while (i < n) {\n        fib_nums.push(fib_nums[i\
    \ - 1] + fib_nums[i - 2]);\n        i++;\n    }\n    return fib_nums[n - 1];\n\
    }\n", "    let fib_num = fib(n);\n    while (!is_prime(fib_num)) {\n        fib_num\
    \ = fib(++n);\n    }\n    return fib_num;\n}\n", "    let a = 1;\n    let b =\
    \ 1;\n    let c = 1;\n    let i = 0;\n    while (i < n) {\n        c = a + b;\n\
    \        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n\
    \        }\n    }\n    return c;\n}\n", "    let fib_nums: number[] = [2, 3];\n\
    \    let i: number = 2;\n    while (i < n) {\n        fib_nums.push(fib_nums[i\
    \ - 1] + fib_nums[i - 2]);\n        i += 1;\n    }\n    return fib_nums[n - 1];\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
