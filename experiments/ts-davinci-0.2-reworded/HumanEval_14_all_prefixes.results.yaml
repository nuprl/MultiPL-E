language: ts
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string.split(\"\").map((_, i) => string.slice(0,\
    \ i + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738870
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    result.push(string.slice(0, i + 1));\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        result.push(string.substring(0, i));\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const prefixes: string[] = [];\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return\
    \ prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const result: string[] = [];\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    result.push(string.slice(0, i));\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const result: string[] = [];\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    result.push(string.slice(0, i));\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var result: string[] = [];\n    for (var i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        result.push(string.substring(0, i));\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    result.push(string.slice(0, i + 1));\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738871
