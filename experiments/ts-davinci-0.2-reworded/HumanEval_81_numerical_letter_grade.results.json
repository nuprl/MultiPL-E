{
  "language": "ts",
  "name": "HumanEval_81_numerical_letter_grade",
  "results": [
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i: number = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpu4p6umre.js:71:12)\n    at Object.<anonymous> (/tmp/tmpu4p6umre.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpfqsu_jy5.js:71:12)\n    at Object.<anonymous> (/tmp/tmpfqsu_jy5.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let letter_grades: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letter_grades.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      letter_grades.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      letter_grades.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      letter_grades.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      letter_grades.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      letter_grades.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      letter_grades.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      letter_grades.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      letter_grades.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      letter_grades.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      letter_grades.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      letter_grades.push(\"D-\");\n    } else {\n      letter_grades.push(\"E\");\n    }\n  }\n  return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpl5mkw214.js:71:12)\n    at Object.<anonymous> (/tmp/tmpl5mkw214.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpbcda7__a.js:71:12)\n    at Object.<anonymous> (/tmp/tmpbcda7__a.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return \"A+\";\n        } else if (grade >= 3.7) {\n            return \"A\";\n        } else if (grade >= 3.3) {\n            return \"A-\";\n        } else if (grade >= 3.0) {\n            return \"B+\";\n        } else if (grade >= 2.7) {\n            return \"B\";\n        } else if (grade >= 2.3) {\n            return \"B-\";\n        } else if (grade >= 2.0) {\n            return \"C+\";\n        } else if (grade >= 1.7) {\n            return \"C\";\n        } else if (grade >= 1.3) {\n            return \"C-\";\n        } else if (grade >= 1.0) {\n            return \"D+\";\n        } else if (grade >= 0.7) {\n            return \"D\";\n        } else if (grade >= 0.0) {\n            return \"D-\";\n        } else {\n            return \"E\";\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp5342ldcg.js:69:12)\n    at Object.<anonymous> (/tmp/tmp5342ldcg.js:76:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 0,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] === 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] > 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] > 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] > 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] > 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] > 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] > 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] > 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] > 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] > 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] > 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return \"A+\";\n        } else if (grade >= 3.7) {\n            return \"A\";\n        } else if (grade >= 3.3) {\n            return \"A-\";\n        } else if (grade >= 3.0) {\n            return \"B+\";\n        } else if (grade >= 2.7) {\n            return \"B\";\n        } else if (grade >= 2.3) {\n            return \"B-\";\n        } else if (grade >= 2.0) {\n            return \"C+\";\n        } else if (grade >= 1.7) {\n            return \"C\";\n        } else if (grade >= 1.3) {\n            return \"C-\";\n        } else if (grade >= 1.0) {\n            return \"D+\";\n        } else if (grade >= 0.7) {\n            return \"D\";\n        } else if (grade >= 0.0) {\n            return \"D-\";\n        } else {\n            return \"E\";\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp5342ldcg.js:69:12)\n    at Object.<anonymous> (/tmp/tmp5342ldcg.js:76:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpvgqpmove.js:72:12)\n    at Object.<anonymous> (/tmp/tmpvgqpmove.js:79:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let letter_grades: string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letter_grades.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      letter_grades.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      letter_grades.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      letter_grades.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      letter_grades.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      letter_grades.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      letter_grades.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      letter_grades.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      letter_grades.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      letter_grades.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      letter_grades.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      letter_grades.push(\"D-\");\n    } else {\n      letter_grades.push(\"E\");\n    }\n  }\n  return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpl5mkw214.js:71:12)\n    at Object.<anonymous> (/tmp/tmpl5mkw214.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n  let letter_grades: string[] = [];\n  for (let grade of grades) {\n    if (grade >= 4.0) {\n      letter_grades.push(\"A+\");\n    } else if (grade >= 3.7) {\n      letter_grades.push(\"A\");\n    } else if (grade >= 3.3) {\n      letter_grades.push(\"A-\");\n    } else if (grade >= 3.0) {\n      letter_grades.push(\"B+\");\n    } else if (grade >= 2.7) {\n      letter_grades.push(\"B\");\n    } else if (grade >= 2.3) {\n      letter_grades.push(\"B-\");\n    } else if (grade >= 2.0) {\n      letter_grades.push(\"C+\");\n    } else if (grade >= 1.7) {\n      letter_grades.push(\"C\");\n    } else if (grade >= 1.3) {\n      letter_grades.push(\"C-\");\n    } else if (grade >= 1.0) {\n      letter_grades.push(\"D+\");\n    } else if (grade >= 0.7) {\n      letter_grades.push(\"D\");\n    } else if (grade >= 0.0) {\n      letter_grades.push(\"D-\");\n    } else {\n      letter_grades.push(\"E\");\n    }\n  }\n  return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpe05h6oxm.js:71:12)\n    at Object.<anonymous> (/tmp/tmpe05h6oxm.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let grades_letter: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            grades_letter.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            grades_letter.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            grades_letter.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            grades_letter.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            grades_letter.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            grades_letter.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            grades_letter.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            grades_letter.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            grades_letter.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            grades_letter.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            grades_letter.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            grades_letter.push(\"D-\");\n        } else {\n            grades_letter.push(\"E\");\n        }\n    }\n    return grades_letter;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmptjghj3rk.js:72:12)\n    at Object.<anonymous> (/tmp/tmptjghj3rk.js:79:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp7fompy3a.js:71:12)\n    at Object.<anonymous> (/tmp/tmp7fompy3a.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let grades_letter: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            grades_letter.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            grades_letter.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            grades_letter.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            grades_letter.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            grades_letter.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            grades_letter.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            grades_letter.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            grades_letter.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            grades_letter.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            grades_letter.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            grades_letter.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            grades_letter.push(\"D-\");\n        } else {\n            grades_letter.push(\"E\");\n        }\n    }\n    return grades_letter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp09nv8c8i.js:71:12)\n    at Object.<anonymous> (/tmp/tmp09nv8c8i.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 2,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grades_map = {\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n        -1.0: \"E\"\n    };\n    const grades_keys = Object.keys(grades_map).map(Number);\n    return grades.map(grade => {\n        for (let i = 0; i < grades_keys.length; i++) {\n            if (grade >= grades_keys[i]) {\n                return grades_map[grades_keys[i]];\n            }\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppg68rxve.ts(37,9): error TS1136: Property assignment expected.\n../../../../tmp/tmppg68rxve.ts(37,13): error TS1005: ',' expected.\n../../../../tmp/tmppg68rxve.ts(37,15): error TS1134: Variable declaration expected.\n../../../../tmp/tmppg68rxve.ts(47,1): error TS1128: Declaration or statement expected.\n",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpulgv3s_e.js:71:12)\n    at Object.<anonymous> (/tmp/tmpulgv3s_e.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 2,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grades_map = {\n        \"4.0\": \"A+\",\n        \"3.7\": \"A\",\n        \"3.3\": \"A-\",\n        \"3.0\": \"B+\",\n        \"2.7\": \"B\",\n        \"2.3\": \"B-\",\n        \"2.0\": \"C+\",\n        \"1.7\": \"C\",\n        \"1.3\": \"C-\",\n        \"1.0\": \"D+\",\n        \"0.7\": \"D\",\n        \"0.0\": \"D-\",\n        \"-1.0\": \"E\"\n    }\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(grades_map[\"4.0\"]);\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(grades_map[\"3.7\"]);\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(grades_map[\"3.3\"]);\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(grades_map[\"3.0\"]);\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(grades_map[\"2.7\"]);\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(grades_map[\"2.3\"]);\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(grades_map[\"2.0\"]);\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(grades_map[\"1.7\"]);\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(grades_map[\"1.3\"]);\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(grades_map[\"1.0\"]);\n        } else if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp46rxr5ga.ts(62,9): error TS1005: ')' expected.\n../../../../tmp/tmp46rxr5ga.ts(76,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let grades_letter: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            grades_letter.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            grades_letter.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            grades_letter.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            grades_letter.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            grades_letter.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            grades_letter.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            grades_letter.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            grades_letter.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            grades_letter.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            grades_letter.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            grades_letter.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            grades_letter.push(\"D-\");\n        } else {\n            grades_letter.push(\"E\");\n        }\n    }\n    return grades_letter;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmptjghj3rk.js:72:12)\n    at Object.<anonymous> (/tmp/tmptjghj3rk.js:79:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return \"A+\";\n        } else if (grade >= 3.7) {\n            return \"A\";\n        } else if (grade >= 3.3) {\n            return \"A-\";\n        } else if (grade >= 3.0) {\n            return \"B+\";\n        } else if (grade >= 2.7) {\n            return \"B\";\n        } else if (grade >= 2.3) {\n            return \"B-\";\n        } else if (grade >= 2.0) {\n            return \"C+\";\n        } else if (grade >= 1.7) {\n            return \"C\";\n        } else if (grade >= 1.3) {\n            return \"C-\";\n        } else if (grade >= 1.0) {\n            return \"D+\";\n        } else if (grade >= 0.7) {\n            return \"D\";\n        } else if (grade >= 0.0) {\n            return \"D-\";\n        } else {\n            return \"E\";\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp5342ldcg.js:69:12)\n    at Object.<anonymous> (/tmp/tmp5342ldcg.js:76:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    grades.forEach(grade => {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    });\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpjqm30wvb.js:71:12)\n    at Object.<anonymous> (/tmp/tmpjqm30wvb.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpnzbjw39b.js:72:12)\n    at Object.<anonymous> (/tmp/tmpnzbjw39b.js:79:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return \"A+\";\n        } else if (grade >= 3.7) {\n            return \"A\";\n        } else if (grade >= 3.3) {\n            return \"A-\";\n        } else if (grade >= 3.0) {\n            return \"B+\";\n        } else if (grade >= 2.7) {\n            return \"B\";\n        } else if (grade >= 2.3) {\n            return \"B-\";\n        } else if (grade >= 2.0) {\n            return \"C+\";\n        } else if (grade >= 1.7) {\n            return \"C\";\n        } else if (grade >= 1.3) {\n            return \"C-\";\n        } else if (grade >= 1.0) {\n            return \"D+\";\n        } else if (grade >= 0.7) {\n            return \"D\";\n        } else if (grade >= 0.0) {\n            return \"D-\";\n        } else {\n            return \"E\";\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp5342ldcg.js:69:12)\n    at Object.<anonymous> (/tmp/tmp5342ldcg.js:76:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpnzbjw39b.js:72:12)\n    at Object.<anonymous> (/tmp/tmpnzbjw39b.js:79:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grades_map = {\n        \"4.0\": \"A+\",\n        \"3.7\": \"A\",\n        \"3.3\": \"A-\",\n        \"3.0\": \"B+\",\n        \"2.7\": \"B\",\n        \"2.3\": \"B-\",\n        \"2.0\": \"C+\",\n        \"1.7\": \"C\",\n        \"1.3\": \"C-\",\n        \"1.0\": \"D+\",\n        \"0.7\": \"D\",\n        \"0.0\": \"D-\",\n        \"-1.0\": \"E\"\n    }\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return grades_map[\"4.0\"]\n        } else if (grade >= 3.7) {\n            return grades_map[\"3.7\"]\n        } else if (grade >= 3.3) {\n            return grades_map[\"3.3\"]\n        } else if (grade >= 3.0) {\n            return grades_map[\"3.0\"]\n        } else if (grade >= 2.7) {\n            return grades_map[\"2.7\"]\n        } else if (grade >= 2.3) {\n            return grades_map[\"2.3\"]\n        } else if (grade >= 2.0) {\n            return grades_map[\"2.0\"]\n        } else if (grade >= 1.7) {\n            return grades_map[\"1.7\"]\n        } else if (grade >= 1.3) {\n            return grades_map[\"1.3\"]\n        } else if (grade >= 1.0) {\n            return grades_map[\"1.0\"]\n        } else if (grade >= 0.7) {\n            return grades_map[\"0.7\"]\n        } else if (grade >= 0.0) {\n            return grades_map[\"0.0\"]\n        } else {\n            return grades_map[\"-1.0\"]\n        }\n    })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpkdm0l0s0.js:84:12)\n    at Object.<anonymous> (/tmp/tmpkdm0l0s0.js:91:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    return grades.map(grade => {\n        if (grade >= 4.0) {\n            return \"A+\";\n        } else if (grade >= 3.7) {\n            return \"A\";\n        } else if (grade >= 3.3) {\n            return \"A-\";\n        } else if (grade >= 3.0) {\n            return \"B+\";\n        } else if (grade >= 2.7) {\n            return \"B\";\n        } else if (grade >= 2.3) {\n            return \"B-\";\n        } else if (grade >= 2.0) {\n            return \"C+\";\n        } else if (grade >= 1.7) {\n            return \"C\";\n        } else if (grade >= 1.3) {\n            return \"C-\";\n        } else if (grade >= 1.0) {\n            return \"D+\";\n        } else if (grade >= 0.7) {\n            return \"D\";\n        } else if (grade >= 0.0) {\n            return \"D-\";\n        } else {\n            return \"E\";\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp5342ldcg.js:69:12)\n    at Object.<anonymous> (/tmp/tmp5342ldcg.js:76:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            result.push(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push(\"A\");\n        } else if (grade >= 3.3) {\n            result.push(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push(\"B\");\n        } else if (grade >= 2.3) {\n            result.push(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push(\"C\");\n        } else if (grade >= 1.3) {\n            result.push(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push(\"D\");\n        } else if (grade >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp17a42px2.js:71:12)\n    at Object.<anonymous> (/tmp/tmp17a42px2.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let grade of grades) {\n        if (grade >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9jjnshfk.js:71:12)\n    at Object.<anonymous> (/tmp/tmp9jjnshfk.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let letter_grades: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcrufj0d1.js:71:12)\n    at Object.<anonymous> (/tmp/tmpcrufj0d1.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            result.push(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n  'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_4395lap.js:71:12)\n    at Object.<anonymous> (/tmp/tmp_4395lap.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    }
  ]
}