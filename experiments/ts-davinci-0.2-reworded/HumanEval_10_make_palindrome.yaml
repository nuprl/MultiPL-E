name: HumanEval_10_make_palindrome
language: ts
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"\
  xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"\
  jerry\"),\"jerryrrej\");\n}\n\ntest();"
completions: ["    if (string.length === 0) {\n        return string;\n    }\n   \
    \ let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n  \
    \  let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    let reverse_prefix = reverse(prefix);\n    return prefix + reverse_prefix\
    \ + longest_palindrome_suffix;\n}\n", "    if (string.length === 0) {\n      \
    \  return string;\n    }\n    const longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    const prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ if (string.length === 0) {\n        return string;\n    }\n    let i = string.length;\n\
    \    while (i > 0) {\n        if (is_palindrome(string.substring(0, i))) {\n \
    \           return string + reverse(string.substring(i));\n        }\n       \
    \ i--;\n    }\n    return string;\n}\n", "    let longest_palindrome_suffix =\
    \ find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    return prefix + longest_palindrome_suffix\
    \ + reverse(prefix);\n}\n", "    let reverse = string.split(\"\").reverse().join(\"\
    \");\n    let palindrome = string;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i) === reverse.substr(0, string.length - i)) {\n\
    \            palindrome = string + reverse.substr(string.length - i);\n      \
    \      break;\n        }\n    }\n    return palindrome;\n}\n", "    if (string.length\
    \ === 0) {\n        return string;\n    }\n    let longest_palindrome_suffix =\
    \ find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    return prefix + longest_palindrome_suffix\
    \ + prefix.split(\"\").reverse().join(\"\");\n}\n", "    let reversed = string.split(\"\
    \").reverse().join(\"\");\n    let palindrome = string + reversed;\n    let palindrome_length\
    \ = palindrome.length;\n    let string_length = string.length;\n    let prefix_length\
    \ = string_length;\n    let prefix = string;\n    while (prefix_length > 0) {\n\
    \        let suffix = palindrome.substring(palindrome_length - prefix_length,\
    \ palindrome_length);\n        if (prefix === suffix) {\n            return string\
    \ + reversed.substring(0, string_length - prefix_length);\n        }\n       \
    \ prefix_length--;\n        prefix = prefix.substring(0, prefix_length);\n   \
    \ }\n    return palindrome;\n}\n", "    if (string.length === 0) {\n        return\
    \ \"\";\n    }\n    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ if (string.length === 0) {\n        return string;\n    }\n    const suffix\
    \ = find_longest_palindromic_suffix(string);\n    const prefix = string.substring(0,\
    \ string.length - suffix.length);\n    return prefix + suffix + prefix.split(\"\
    \").reverse().join(\"\");\n}\n", "    if (string.length === 0) {\n        return\
    \ \"\";\n    }\n    let suffix = find_longest_palindromic_suffix(string);\n  \
    \  let prefix = string.substring(0, string.length - suffix.length);\n    return\
    \ string + reverse(prefix);\n}\n", "  let longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \  let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \  return string + reverse(prefix);\n}\n", "    const reversed = string.split(\"\
    \").reverse().join(\"\");\n    const longest_palindrome = find_longest_palindrome(string);\n\
    \    const prefix = string.substring(0, string.length - longest_palindrome.length);\n\
    \    return prefix + longest_palindrome + reversed;\n}\n", "    const palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    const prefix = string.substring(0,\
    \ string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n\
    }\n", "    const n = string.length;\n    if (n === 0) {\n        return string;\n\
    \    }\n    const suffix = string.substring(Math.floor(n / 2), n);\n    const\
    \ prefix = string.substring(0, Math.floor(n / 2));\n    const palindrome = suffix\
    \ + prefix.split(\"\").reverse().join(\"\");\n    return palindrome;\n}\n", " \
    \   const reverse = string.split(\"\").reverse().join(\"\");\n    const longest_postfix\
    \ = find_longest_postfix(string, reverse);\n    const prefix = string.substring(0,\
    \ string.length - longest_postfix.length);\n    return string + reverse.substring(prefix.length);\n\
    }\n", "    if (string.length === 0) {\n        return string;\n    }\n    let\
    \ i = 0;\n    let j = string.length - 1;\n    while (i < j) {\n        if (string[i]\
    \ !== string[j]) {\n            break;\n        }\n        i++;\n        j--;\n\
    \    }\n    if (i >= j) {\n        return string;\n    }\n    let prefix = string.substring(0,\
    \ i);\n    let suffix = string.substring(i);\n    return prefix + make_palindrome(suffix)\
    \ + prefix.split(\"\").reverse().join(\"\");\n}\n", "    let result = string;\n\
    \    let longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n \
    \   let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    result += reverse(prefix);\n    return result;\n}\n", "    let result = string;\n\
    \    let suffix = string;\n    let prefix = \"\";\n    while (suffix.length >\
    \ 0) {\n        if (is_palindrome(suffix)) {\n            result += reverse(prefix);\n\
    \            break;\n        }\n        prefix += suffix[0];\n        suffix =\
    \ suffix.slice(1);\n    }\n    return result;\n}\n", "    let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    let prefix_reversed\
    \ = reverse(prefix);\n    return prefix + prefix_reversed + longest_palindrome_suffix;\n\
    }\n", "    if (string.length === 0) {\n        return string;\n    }\n    let\
    \ longest_palindrome = \"\";\n    for (let i = 0; i < string.length; i++) {\n\
    \        let palindrome = string.substring(i);\n        if (is_palindrome(palindrome)\
    \ && palindrome.length > longest_palindrome.length) {\n            longest_palindrome\
    \ = palindrome;\n        }\n    }\n    return string + reverse(string.substring(0,\
    \ string.length - longest_palindrome.length));\n}\n", "  if (string.length ===\
    \ 0) {\n    return \"\";\n  }\n  let suffix = find_palindrome_suffix(string);\n\
    \  let prefix = string.slice(0, string.length - suffix.length);\n  return prefix\
    \ + suffix + prefix.split(\"\").reverse().join(\"\");\n}\n", "    let palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    let prefix = string.substring(0, string.length\
    \ - palindrome_suffix.length);\n    return prefix + palindrome_suffix + prefix.split(\"\
    \").reverse().join(\"\");\n}\n", "    if (string.length === 0) {\n        return\
    \ \"\";\n    }\n    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "  if\
    \ (string.length === 0) {\n    return string;\n  }\n  let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n  let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n  let reverse_prefix = reverse(prefix);\n\
    \  return prefix + longest_palindrome_suffix + reverse_prefix;\n}\n", "    if\
    \ (string.length === 0) {\n        return \"\";\n    }\n    let longest_palindrome\
    \ = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let current_palindrome\
    \ = string.substring(i);\n        if (is_palindrome(current_palindrome) && current_palindrome.length\
    \ > longest_palindrome.length) {\n            longest_palindrome = current_palindrome;\n\
    \        }\n    }\n    return string + reverse(string.substring(0, string.length\
    \ - longest_palindrome.length));\n}\n", "    let reversed_string = string.split(\"\
    \").reverse().join(\"\");\n    let palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - palindrome_suffix.length);\n\
    \    return prefix + palindrome_suffix + reversed_string;\n}\n", "    if (string.length\
    \ === 0) {\n        return string;\n    }\n    let suffix = find_longest_palindromic_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - suffix.length);\n    return\
    \ string + reverse(prefix);\n}\n", "    const len = string.length;\n    let palindrome_suffix\
    \ = \"\";\n    let palindrome_suffix_len = 0;\n    for (let i = len - 1; i >=\
    \ 0; i--) {\n        if (is_palindrome(string.substr(i))) {\n            palindrome_suffix\
    \ = string.substr(i);\n            palindrome_suffix_len = palindrome_suffix.length;\n\
    \            break;\n        }\n    }\n    return string + reverse(string.substr(0,\
    \ len - palindrome_suffix_len));\n}\n", "    if (string.length == 0) {\n     \
    \   return string;\n    }\n    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ if (string.length === 0) {\n        return \"\";\n    }\n    let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    let reverse_prefix =\
    \ reverse(prefix);\n    return prefix + reverse_prefix + longest_palindrome_suffix;\n\
    }\n", "  if (string.length === 0) {\n    return string;\n  }\n  let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n  let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n  return prefix + longest_palindrome_suffix\
    \ + reverse(prefix);\n}\n", "    let result = string;\n    let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    let reversed_prefix\
    \ = prefix.split(\"\").reverse().join(\"\");\n    result += reversed_prefix;\n\
    \    return result;\n}\n", "    if (string.length === 0) {\n        return \"\"\
    ;\n    }\n    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ if (string.length <= 1) {\n        return string;\n    }\n    let palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - palindrome_suffix.length);\n    return prefix + palindrome_suffix\
    \ + reverse(prefix);\n}\n", "    let palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - palindrome_suffix.length);\n\
    \    return prefix + palindrome_suffix + reverse(prefix);\n}\n", "  const palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n  const prefix = string.slice(0,\
    \ string.length - palindrome_suffix.length);\n  return string + reverse(prefix);\n\
    }\n", "    if (string.length === 0) {\n        return string;\n    }\n    let\
    \ longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n    let\
    \ prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    let reversed_prefix = reverse(prefix);\n    return prefix + longest_palindrome_suffix\
    \ + reversed_prefix;\n}\n", "    if (string.length === 0) {\n        return string;\n\
    \    }\n    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    let reverse_prefix = reverse(prefix);\n    return prefix + longest_palindrome_suffix\
    \ + reverse_prefix;\n}\n", "    if (string.length === 0) {\n        return string;\n\
    \    }\n    let palindrome_suffix = find_palindrome_suffix(string);\n    let prefix\
    \ = string.substring(0, string.length - palindrome_suffix.length);\n    return\
    \ string + reverse(prefix);\n}\n", "    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ if (string.length === 0) {\n        return string;\n    }\n    let i = string.length;\n\
    \    while (i > 0) {\n        if (is_palindrome(string.substring(0, i))) {\n \
    \           return string + reverse(string.substring(i));\n        }\n       \
    \ i--;\n    }\n    return string + reverse(string.substring(i));\n}\n", "    let\
    \ palindrome_suffix = find_longest_palindrome_suffix(string);\n    let prefix\
    \ = string.substring(0, string.length - palindrome_suffix.length);\n    return\
    \ prefix + palindrome_suffix + reverse(prefix);\n}\n", "    let palindrome = string;\n\
    \    let prefix = string;\n    let suffix = \"\";\n    while (prefix.length >\
    \ 0) {\n        if (is_palindrome(prefix)) {\n            palindrome += reverse(suffix);\n\
    \            return palindrome;\n        }\n        suffix = prefix[0] + suffix;\n\
    \        prefix = prefix.slice(1);\n    }\n    return palindrome;\n}\n", "   \
    \ if (string.length === 0) {\n        return \"\";\n    }\n    let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    let reverse_prefix =\
    \ reverse(prefix);\n    return prefix + reverse_prefix + longest_palindrome_suffix;\n\
    }\n", "    if (string.length === 0) {\n        return string;\n    }\n    let\
    \ i = string.length - 1;\n    while (i >= 0) {\n        if (is_palindrome(string.substring(0,\
    \ i + 1))) {\n            return string + reverse(string.substring(0, string.length\
    \ - i - 1));\n        }\n        i--;\n    }\n    return string;\n}\n", "    let\
    \ reversed_string = string.split(\"\").reverse().join(\"\");\n    let palindrome_suffix\
    \ = find_palindrome_suffix(string);\n    let prefix = string.substring(0, string.length\
    \ - palindrome_suffix.length);\n    return prefix + palindrome_suffix + reversed_string;\n\
    }\n", "    let result = string;\n    let i = 0;\n    let j = string.length - 1;\n\
    \    while (i < j) {\n        if (string[i] === string[j]) {\n            i++;\n\
    \            j--;\n        } else {\n            result = string.slice(0, j) +\
    \ string.slice(j).split('').reverse().join('');\n            j--;\n        }\n\
    \    }\n    return result;\n}\n", "    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    let reverse_prefix = reverse(prefix);\n    return prefix + reverse_prefix\
    \ + longest_palindrome_suffix;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
