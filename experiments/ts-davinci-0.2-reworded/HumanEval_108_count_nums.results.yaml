language: ts
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            let num = arr[i] * -1;\n            let\
    \ sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n\
    \                num = Math.floor(num / 10);\n            }\n            if (sum\
    \ > 0) {\n                count++;\n            }\n        } else {\n        \
    \    let num = arr[i];\n            let sum = 0;\n            while (num > 0)\
    \ {\n                sum += num % 10;\n                num = Math.floor(num /\
    \ 10);\n            }\n            if (sum > 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpl1gka7vp.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl1gka7vp.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpe8_rijis.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe8_rijis.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            if (arr[i] % 10 < 0) {\n              \
    \  count++;\n            }\n        } else {\n            if (arr[i] % 10 > 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpdrie587k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdrie587k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      sum += num * -1;\n\
    \    } else {\n      sum += num;\n    }\n    while (sum > 0) {\n      sum -= sum\
    \ % 10;\n      sum /= 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpfqr885r5.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfqr885r5.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num > 0) {\n \
    \           sum += num % 10;\n            num = Math.floor(num / 10);\n      \
    \  }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp2d1nx_7b.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2d1nx_7b.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num != 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            if (arr[i] % 10 < 0) {\n              \
    \  count++;\n            }\n        } else {\n            if (arr[i] % 10 > 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpdrie587k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdrie587k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num != 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            if (arr[i] % 10 < 0) {\n              \
    \  count++;\n            }\n        } else {\n            if (arr[i] % 10 > 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpdrie587k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdrie587k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num !== 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.filter(x => x < 0 ? x.toString().split('').map(x =>\
    \ parseInt(x)).reduce((x, y) => x + y) < 0 : x.toString().split('').map(x => parseInt(x)).reduce((x,\
    \ y) => x + y) > 0).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmph4c_yyyi.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph4c_yyyi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.filter(x => x > 0 ? x.toString().split('').reduce((a,\
    \ b) => a + parseInt(b), 0) > 0 : x.toString().split('').reduce((a, b) => a +\
    \ parseInt(b), 0) < 0).length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp61r035bu.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp61r035bu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpe8_rijis.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe8_rijis.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  arr.forEach(element => {\n    if (sum_digits(element)\
    \ > 0) {\n      count++;\n    }\n  });\n  return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8euqmm2b.ts(14,9): error TS2304: Cannot find name
    ''sum_digits''.

    '
  timestamp: 1659738561
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  return arr.filter(x => x < 0 ? x.toString().split('').map(x => parseInt(x)).reduce((a,\
    \ b) => a + b) < 0 : x.toString().split('').map(x => parseInt(x)).reduce((a, b)\
    \ => a + b) > 0).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpx30mgm1b.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx30mgm1b.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num !== 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum - (sum % 10);\n            sum = sum / 10;\n   \
    \     }\n        if (sum < 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpxq_jbqjn.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxq_jbqjn.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (sum_digits(arr[i]) > 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd3jkl9gm.ts(14,13): error TS2304: Cannot find name
    ''sum_digits''.

    '
  timestamp: 1659738561
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num != 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum - (sum % 10);\n            sum = sum / 10;\n   \
    \     }\n        if (sum == 0) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpnmeecd3f.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnmeecd3f.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            let num = arr[i] * -1;\n            if\
    \ (sum_digits(num) > 0) {\n                count++;\n            }\n        }\
    \ else {\n            if (sum_digits(arr[i]) > 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjoiuzdng.ts(16,17): error TS2304: Cannot find name
    ''sum_digits''.

    ../../../../../tmp/tmpjoiuzdng.ts(20,17): error TS2304: Cannot find name ''sum_digits''.

    '
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpe8_rijis.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe8_rijis.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num != 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            let digit = sum % 10;\n            sum = Math.floor(sum /\
    \ 10);\n            count += digit;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpnhg37hf_.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnhg37hf_.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n    \
    \    let sum = 0;\n        let num = arr[i];\n        while (num > 0) {\n    \
    \        sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n\
    \        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr8pep2b0.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr8pep2b0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum % 10;\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.filter(x => x < 0 ? x.toString().split('').reduce((a,\
    \ b) => +a + +b) > 0 : x.toString().split('').reduce((a, b) => +a + +b) > 0).length;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpml2st9qg.ts(12,76): error TS2322: Type ''number''
    is not assignable to type ''string''.

    ../../../../../tmp/tmpml2st9qg.ts(12,131): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    '
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num !== 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum - (sum % 10);\n            sum = sum / 10;\n   \
    \     }\n        if (sum < 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpxq_jbqjn.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxq_jbqjn.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n    \
    \    let sum = 0;\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n\
    \            arr[i] = Math.floor(arr[i] / 10);\n        }\n        if (sum > 0)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptpkxwo9s.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptpkxwo9s.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum % 10;\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        if (num < 0) {\n            num = -num;\n \
    \       }\n        let sum = 0;\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpsaqf2dbh.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsaqf2dbh.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (sum_digits(arr[i]) > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp50rnx63_.ts(14,9): error TS2304: Cannot find name
    ''sum_digits''.

    '
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  return arr.filter(function(num) {\n    return num.toString().split('').reduce(function(acc,\
    \ curr) {\n      return acc + parseInt(curr);\n    }, 0) > 0;\n  }).length;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpd9fl008y.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd9fl008y.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.filter(x => x > 0 ? x.toString().split('').reduce((a,\
    \ b) => +a + +b) > 0 : x.toString().split('').reduce((a, b) => +a + +b) < 0).length;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb0oj8hyl.ts(12,76): error TS2322: Type ''number''
    is not assignable to type ''string''.

    ../../../../../tmp/tmpb0oj8hyl.ts(12,131): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    '
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.filter(x => x < 0 ? x.toString().split('').reduce((a,\
    \ b) => a + parseInt(b), 0) > 0 : x.toString().split('').reduce((a, b) => a +\
    \ parseInt(b), 0) > 0).length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_gbjgx_p.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_gbjgx_p.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.filter(x => x.toString().split('').reduce((a, b) =>\
    \ +a + +b) > 0).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3g9w22ay.ts(12,68): error TS2322: Type ''number''
    is not assignable to type ''string''.

    '
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum - (sum % 10);\n            sum = sum / 10;\n   \
    \     }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp8bpj3hfs.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8bpj3hfs.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  return arr.filter(num => {\n    let sum = 0;\n    let numStr = num.toString();\n\
    \    for (let i = 0; i < numStr.length; i++) {\n      sum += parseInt(numStr[i]);\n\
    \    }\n    return sum > 0;\n  }).length;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz8r11ir1.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8r11ir1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum % 10;\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.filter(x => x > 0 ? sum_digits(x) > 0 : sum_digits(x)\
    \ < 0).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl5_8xb37.ts(12,36): error TS2304: Cannot find name
    ''sum_digits''.

    ../../../../../tmp/tmpl5_8xb37.ts(12,56): error TS2304: Cannot find name ''sum_digits''.

    '
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n\
    \        }\n        let sum = 0;\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp_q7y_9pb.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_q7y_9pb.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpe8_rijis.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe8_rijis.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            if (arr[i] % 10 < 0) {\n              \
    \  count++;\n            }\n        } else {\n            if (arr[i] % 10 > 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpdrie587k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdrie587k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      if (arr[i] % 10 < 0) {\n        count++;\n      }\n  \
    \  } else {\n      if (arr[i] % 10 > 0) {\n        count++;\n      }\n    }\n\
    \  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp6fjgl7u5.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6fjgl7u5.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n\
    \        }\n        let sum = 0;\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp_q7y_9pb.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_q7y_9pb.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n    }\n    let sum\
    \ = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpoo_0cy5q.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoo_0cy5q.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            let num = arr[i].toString();\n        \
    \    let sum = 0;\n            for (let j = 1; j < num.length; j++) {\n      \
    \          sum += parseInt(num[j]);\n            }\n            if (sum > 0) {\n\
    \                count++;\n            }\n        } else {\n            let num\
    \ = arr[i].toString();\n            let sum = 0;\n            for (let j = 0;\
    \ j < num.length; j++) {\n                sum += parseInt(num[j]);\n         \
    \   }\n            if (sum > 0) {\n                count++;\n            }\n \
    \       }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpgq6n46u_.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgq6n46u_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n    \
    \    let sum = 0;\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n\
    \            arr[i] = Math.floor(arr[i] / 10);\n        }\n        if (sum > 0)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptpkxwo9s.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptpkxwo9s.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum % 10;\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            let num = arr[i] * -1;\n            let\
    \ sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n\
    \                num = Math.floor(num / 10);\n            }\n            if (sum\
    \ > 0) {\n                count++;\n            }\n        } else {\n        \
    \    let num = arr[i];\n            let sum = 0;\n            while (num > 0)\
    \ {\n                sum += num % 10;\n                num = Math.floor(num /\
    \ 10);\n            }\n            if (sum > 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpl1gka7vp.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl1gka7vp.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num != 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            if (arr[i] % 10 < 0) {\n              \
    \  count++;\n            }\n        } else {\n            if (arr[i] % 10 > 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpdrie587k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdrie587k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n    \
    \    let sum = 0;\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n\
    \            arr[i] = Math.floor(arr[i] / 10);\n        }\n        if (sum > 0)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptpkxwo9s.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptpkxwo9s.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            if (arr[i] % 10 < 0) {\n              \
    \  count++;\n            }\n        } else {\n            if (arr[i] % 10 > 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpdrie587k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdrie587k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.reduce((acc, curr) => {\n        let sum = 0;\n   \
    \     if (curr < 0) {\n            sum += Math.abs(curr);\n        } else {\n\
    \            sum += curr;\n        }\n        return acc + sum;\n    }, 0);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpmx78gtk6.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmx78gtk6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum - (sum % 10);\n            sum = sum / 10;\n   \
    \     }\n        if (sum < 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpxq_jbqjn.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxq_jbqjn.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = Math.abs(arr[i]);\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbyh4sruj.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbyh4sruj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ num = arr[i];\n    let sum = 0;\n    while (num !== 0) {\n      sum += num %\
    \ 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            if (arr[i] % 10 < 0) {\n              \
    \  count++;\n            }\n        } else {\n            if (arr[i] % 10 > 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpdrie587k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdrie587k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum % 10;\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  return arr.filter(num => {\n    let sum = 0;\n    let digits = Math.abs(num).toString().split('');\n\
    \    digits.forEach(digit => {\n      sum += parseInt(digit);\n    });\n    return\
    \ sum > 0;\n  }).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp2f_nzn4f.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2f_nzn4f.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum = sum + arr[i]\
    \ * -1;\n        } else {\n            sum = sum + arr[i];\n        }\n      \
    \  while (sum > 0) {\n            sum = sum - (sum % 10);\n            sum = sum\
    \ / 10;\n        }\n        if (sum < 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp199imn7s.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp199imn7s.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            if (arr[i] % 10 < 0) {\n              \
    \  count++;\n            }\n        } else {\n            if (arr[i] % 10 > 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpdrie587k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdrie587k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num != 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (sum_digits(arr[i]) > 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd3jkl9gm.ts(14,13): error TS2304: Cannot find name
    ''sum_digits''.

    '
  timestamp: 1659738561
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.filter(x => x > 0 ? x.toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b)) > 0 : x.toString().split('').reduce((a, b)\
    \ => parseInt(a) + parseInt(b)) < 0).length;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdczflbxd.ts(12,76): error TS2322: Type ''number''
    is not assignable to type ''string''.

    ../../../../../tmp/tmpdczflbxd.ts(12,149): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    '
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpv7m7b_4v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7m7b_4v.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum - (sum % 10);\n            sum = sum / 10;\n   \
    \     }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp8bpj3hfs.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8bpj3hfs.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum - (sum % 10);\n            sum = sum / 10;\n   \
    \     }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp8bpj3hfs.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8bpj3hfs.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  return arr.filter(num => num < 0 ? num.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0) > 0 : num.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0) > 0).length;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpsrz6e2tg.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsrz6e2tg.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (sum_digits(arr[i]) > 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd3jkl9gm.ts(14,13): error TS2304: Cannot find name
    ''sum_digits''.

    '
  timestamp: 1659738561
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    return arr.filter(x => x > 0 ? sum_digits(x) > 0 : sum_digits(x\
    \ * -1) > 0).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi5ub3suz.ts(12,36): error TS2304: Cannot find name
    ''sum_digits''.

    ../../../../../tmp/tmpi5ub3suz.ts(12,56): error TS2304: Cannot find name ''sum_digits''.

    '
  timestamp: 1659738564
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num != 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = sum - (sum % 10);\n            sum = sum / 10;\n   \
    \     }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp8bpj3hfs.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8bpj3hfs.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = -num;\n   \
    \ }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmph0gzhwkd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph0gzhwkd.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738564
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            let num = arr[i] * -1;\n            let\
    \ sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n\
    \                num = Math.floor(num / 10);\n            }\n            if (sum\
    \ > 0) {\n                count++;\n            }\n        } else {\n        \
    \    let num = arr[i];\n            let sum = 0;\n            while (num > 0)\
    \ {\n                sum += num % 10;\n                num = Math.floor(num /\
    \ 10);\n            }\n            if (sum > 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpl1gka7vp.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl1gka7vp.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            if (arr[i] % 10 < 0) {\n              \
    \  count++;\n            }\n        } else {\n            if (arr[i] % 10 > 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpdrie587k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdrie587k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n\
    \        } else {\n            sum += arr[i];\n        }\n        while (sum >\
    \ 0) {\n            sum = Math.floor(sum / 10);\n            count++;\n      \
    \  }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp_nzsffl1.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_nzsffl1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738564
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n\
    \        }\n        let sum = 0;\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp_q7y_9pb.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_q7y_9pb.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738563
- exit_code: -1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        while (num != 0) {\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        let sum = 0;\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpe8_rijis.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe8_rijis.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbwofjpsc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbwofjpsc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n    \
    \    let sum = 0;\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n\
    \            arr[i] = Math.floor(arr[i] / 10);\n        }\n        if (sum > 0)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptpkxwo9s.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptpkxwo9s.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
    // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let sum = 0;\n        let num = arr[i];\n        if (num < 0) {\n    \
    \        num = -num;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpz8xzj9j3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8xzj9j3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738562
