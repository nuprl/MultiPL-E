name: HumanEval_111_histogram
language: ts
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ an object\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c\
  \ a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n\
  // >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]:\
  \ number} {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
completions: ["    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(\" \");\n    let max: number = 0;\n    for (let i: number = 0;\
    \ i < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n        if\
    \ (result[letters[i]] > max) {\n            max = result[letters[i]];\n      \
    \  }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n\
    \            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let letter of letters) {\n        if (result[letter] === undefined)\
    \ {\n            result[letter] = 1;\n        } else {\n            result[letter]\
    \ += 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ letter of letters) {\n        if (result[letter] === undefined) {\n        \
    \    result[letter] = 1;\n        } else {\n            result[letter] += 1;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let count: number = 0;\n    let max: number = 0;\n    let\
    \ maxLetters: string[] = [];\n    let letters: string[] = test.split(\" \");\n\
    \    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    for (let key in result) {\n        count = result[key];\n\
    \        if (count > max) {\n            max = count;\n            maxLetters\
    \ = [];\n            maxLetters.push(key);\n        } else if (count === max)\
    \ {\n            maxLetters.push(key);\n        }\n    }\n    for (let i: number\
    \ = 0; i < maxLetters.length; i++) {\n        result[maxLetters[i]] = max;\n \
    \   }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let testArray: string[] = test.split(\" \");\n    for (let i = 0; i < testArray.length;\
    \ i++) {\n        if (result[testArray[i]]) {\n            result[testArray[i]]\
    \ += 1;\n        } else {\n            result[testArray[i]] = 1;\n        }\n\
    \    }\n    return result;\n}\n", "  const result: {[key: string]: number} = {};\n\
    \  const letters = test.split(\" \");\n  for (const letter of letters) {\n   \
    \ if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter]\
    \ = 1;\n    }\n  }\n  return result;\n}\n", "    let result: {[key: string]: number}\
    \ = {};\n    let arr: string[] = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "  let result: {[key: string]: number} = {};\n  let arr = test.split(\"\
    \ \");\n  for (let i = 0; i < arr.length; i++) {\n    if (result[arr[i]]) {\n\
    \      result[arr[i]]++;\n    } else {\n      result[arr[i]] = 1;\n    }\n  }\n\
    \  return result;\n}\n", "    let result: {[key: string]: number} = {};\n    let\
    \ letters = test.split(\" \");\n    for (let i = 0; i < letters.length; i++) {\n\
    \        if (result[letters[i]]) {\n            result[letters[i]]++;\n      \
    \  } else {\n            result[letters[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    test.split(\"\
    \ \").forEach(function(letter) {\n        if (result[letter] === undefined) {\n\
    \            result[letter] = 1;\n        } else {\n            result[letter]++;\n\
    \        }\n    });\n    return result;\n}\n", "    const result: {[key: string]:\
    \ number} = {};\n    const letters = test.split(' ');\n    for (const letter of\
    \ letters) {\n        if (result[letter]) {\n            result[letter]++;\n \
    \       } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let letters\
    \ = test.split(\" \");\n    for (let letter of letters) {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let histogram: {[key:\
    \ string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[]\
    \ = [];\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (histogram[letters[i]]) {\n    \
    \        histogram[letters[i]]++;\n        } else {\n            histogram[letters[i]]\
    \ = 1;\n        }\n        if (histogram[letters[i]] > max) {\n            max\
    \ = histogram[letters[i]];\n            maxLetters = [letters[i]];\n        }\
    \ else if (histogram[letters[i]] === max) {\n            maxLetters.push(letters[i]);\n\
    \        }\n    }\n    let result: {[key: string]: number} = {};\n    for (let\
    \ i: number = 0; i < maxLetters.length; i++) {\n        result[maxLetters[i]]\
    \ = max;\n    }\n    return result;\n}\n", "    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n", "    const result: {[key: string]: number} = {};\n   \
    \ const letters = test.split(\" \");\n    for (const letter of letters) {\n  \
    \      if (result[letter]) {\n            result[letter]++;\n        } else {\n\
    \            result[letter] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr: string[] = test.split(\" \");\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        if (result[arr[i]] === undefined) {\n   \
    \         result[arr[i]] = 1;\n        } else {\n            result[arr[i]]++;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr: string[] = test.split(\" \");\n    let max: number\
    \ = 0;\n    for (let i: number = 0; i < arr.length; i++) {\n        if (result[arr[i]]\
    \ === undefined) {\n            result[arr[i]] = 1;\n        } else {\n      \
    \      result[arr[i]]++;\n        }\n        if (result[arr[i]] > max) {\n   \
    \         max = result[arr[i]];\n        }\n    }\n    for (let key in result)\
    \ {\n        if (result[key] < max) {\n            delete result[key];\n     \
    \   }\n    }\n    return result;\n}\n", "    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    let max = 0;\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n        if (result[arr[i]]\
    \ > max) {\n            max = result[arr[i]];\n        }\n    }\n    let final:\
    \ {[key: string]: number} = {};\n    for (let key in result) {\n        if (result[key]\
    \ === max) {\n            final[key] = result[key];\n        }\n    }\n    return\
    \ final;\n}\n", "    let result: {[key: string]: number} = {};\n    let letters:\
    \ string[] = test.split(\" \");\n    for (let i = 0; i < letters.length; i++)\
    \ {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n  \
    \      } else {\n            result[letters[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
