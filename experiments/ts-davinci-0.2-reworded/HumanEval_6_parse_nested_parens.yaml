name: HumanEval_6_parse_nested_parens
language: ts
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
  (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"()\
  \ (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
  ),[4]);\n}\n\ntest();"
completions: ["  const result: number[] = [];\n  let max_nesting = 0;\n  let nesting\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === \"(\") {\n      nesting++;\n      max_nesting = Math.max(max_nesting, nesting);\n\
    \    } else if (paren_string[i] === \")\") {\n      nesting--;\n    } else if\
    \ (paren_string[i] === \" \") {\n      result.push(max_nesting);\n      max_nesting\
    \ = 0;\n      nesting = 0;\n    }\n  }\n  result.push(max_nesting);\n  return\
    \ result;\n}\n", "  let result: number[] = [];\n  let paren_groups: string[] =\
    \ paren_string.split(\" \");\n  for (let paren_group of paren_groups) {\n    let\
    \ paren_stack: string[] = [];\n    let max_nesting: number = 0;\n    for (let\
    \ i = 0; i < paren_group.length; i++) {\n      if (paren_group[i] === \"(\") {\n\
    \        paren_stack.push(\"(\");\n        max_nesting = Math.max(max_nesting,\
    \ paren_stack.length);\n      } else if (paren_group[i] === \")\") {\n       \
    \ paren_stack.pop();\n      }\n    }\n    result.push(max_nesting);\n  }\n  return\
    \ result;\n}\n", "  let result: number[] = [];\n  let paren_groups: string[] =\
    \ paren_string.split(\" \");\n  for (let i = 0; i < paren_groups.length; i++)\
    \ {\n    let paren_group: string = paren_groups[i];\n    let count: number = 0;\n\
    \    let max: number = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n\
    \      if (paren_group[j] === \"(\") {\n        count++;\n        if (count >\
    \ max) {\n          max = count;\n        }\n      } else if (paren_group[j] ===\
    \ \")\") {\n        count--;\n      }\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n", "    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_depth: number = 0;\n        let current_depth: number = 0;\n\
    \        for (let char of paren_group) {\n            if (char === \"(\") {\n\
    \                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (char === \")\") {\n                current_depth--;\n     \
    \       }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n", "  const paren_groups = paren_string.split(\" \");\n  const paren_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_level\
    \ = 0;\n    let max_level = 0;\n    for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n      if (paren_groups[i][j] === \"(\") {\n        paren_level++;\n\
    \      } else if (paren_groups[i][j] === \")\") {\n        paren_level--;\n  \
    \    }\n      if (paren_level > max_level) {\n        max_level = paren_level;\n\
    \      }\n    }\n    paren_levels.push(max_level);\n  }\n  return paren_levels;\n\
    }\n", "  const parens = paren_string.split(\" \");\n  const result: number[] =\
    \ [];\n  for (let i = 0; i < parens.length; i++) {\n    let open = 0;\n    let\
    \ close = 0;\n    for (let j = 0; j < parens[i].length; j++) {\n      if (parens[i][j]\
    \ === \"(\") {\n        open++;\n      } else {\n        close++;\n      }\n \
    \   }\n    result.push(Math.min(open, close));\n  }\n  return result;\n}\n", " \
    \ const result: number[] = [];\n  const paren_groups = paren_string.split(\" \"\
    );\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ current_depth = 0;\n    for (const paren of paren_group) {\n      if (paren\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n", " \
    \   let paren_arr = paren_string.split(\" \");\n    let result: number[] = [];\n\
    \    for (let i = 0; i < paren_arr.length; i++) {\n        let paren_group = paren_arr[i];\n\
    \        let paren_stack: string[] = [];\n        let max_depth = 0;\n       \
    \ for (let j = 0; j < paren_group.length; j++) {\n            let paren = paren_group[j];\n\
    \            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n", "  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const char of group) {\n      if (char === \"(\") {\n       \
    \ level++;\n      } else if (char === \")\") {\n        level--;\n      }\n  \
    \    max_level = Math.max(max_level, level);\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n", "  const paren_groups = paren_string.split(\" \"\
    );\n  const paren_levels = paren_groups.map(paren_group => {\n    let level =\
    \ 0;\n    let max_level = 0;\n    for (let i = 0; i < paren_group.length; i++)\
    \ {\n      if (paren_group[i] === \"(\") {\n        level++;\n      } else if\
    \ (paren_group[i] === \")\") {\n        level--;\n      }\n      max_level = Math.max(max_level,\
    \ level);\n    }\n    return max_level;\n  });\n  return paren_levels;\n}\n",
  "    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_level: number = 0;\n        let level:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      let paren: string = paren_group[j];\n            if (paren === \"(\") {\n\
    \                level++;\n            } else if (paren === \")\") {\n       \
    \         level--;\n            }\n            if (level > max_level) {\n    \
    \            max_level = level;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n", "  const parens_array = paren_string.split(\"\
    \ \");\n  const result: number[] = [];\n  for (let i = 0; i < parens_array.length;\
    \ i++) {\n    let paren_count = 0;\n    let max_paren_count = 0;\n    for (let\
    \ j = 0; j < parens_array[i].length; j++) {\n      if (parens_array[i][j] ===\
    \ \"(\") {\n        paren_count++;\n      } else if (parens_array[i][j] === \"\
    )\") {\n        paren_count--;\n      }\n      if (paren_count > max_paren_count)\
    \ {\n        max_paren_count = paren_count;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  const paren_groups\
    \ = paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n\
    \    let max_level = 0;\n    let current_level = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_level++;\n        max_level\
    \ = Math.max(max_level, current_level);\n      } else if (paren === \")\") {\n\
    \        current_level--;\n      }\n    }\n    result.push(max_level);\n  }\n\
    \  return result;\n}\n", "  const paren_groups = paren_string.split(\" \");\n\
    \  const paren_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n\
    \    paren_levels.push(get_paren_level(paren_groups[i]));\n  }\n  return paren_levels;\n\
    }\n", "  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n", " \
    \   const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        let max_level = 0;\n\
    \        let current_level = 0;\n        for (const char of group) {\n       \
    \     if (char === \"(\") {\n                current_level++;\n              \
    \  max_level = Math.max(max_level, current_level);\n            } else if (char\
    \ === \")\") {\n                current_level--;\n            }\n        }\n \
    \       result.push(max_level);\n    }\n    return result;\n}\n", "  const paren_groups\
    \ = paren_string.split(\" \");\n  const result: number[] = [];\n  for (const paren_group\
    \ of paren_groups) {\n    let max_level = 0;\n    let level = 0;\n    for (const\
    \ char of paren_group) {\n      if (char === \"(\") {\n        level++;\n    \
    \    max_level = Math.max(max_level, level);\n      } else if (char === \")\"\
    ) {\n        level--;\n      }\n    }\n    result.push(max_level);\n  }\n  return\
    \ result;\n}\n", "    let paren_groups = paren_string.split(\" \");\n    let result:\
    \ number[] = [];\n    for (let paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === \"(\") {\n                current_depth++;\n\
    \            } else if (paren_group[i] === \")\") {\n                current_depth--;\n\
    \            }\n            if (current_depth > max_depth) {\n               \
    \ max_depth = current_depth;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  const paren_groups\
    \ = paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n\
    \    let level = 0;\n    let max_level = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        level++;\n      } else if (paren ===\
    \ \")\") {\n        level--;\n      }\n      if (level > max_level) {\n      \
    \  max_level = level;\n      }\n    }\n    result.push(max_level);\n  }\n  return\
    \ result;\n}\n", "  const parens = paren_string.split(\" \");\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < parens.length; i++) {\n    const paren\
    \ = parens[i];\n    let count = 0;\n    let max = 0;\n    for (let j = 0; j <\
    \ paren.length; j++) {\n      if (paren[j] === \"(\") {\n        count++;\n  \
    \      max = Math.max(max, count);\n      } else {\n        count--;\n      }\n\
    \    }\n    result.push(max);\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
