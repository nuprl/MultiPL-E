name: HumanEval_84_solve
language: ts
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>>\
  \ solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264\
  \ N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N: number):\
  \ string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n\
  \  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"\
  1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"\
  10010\");\n}\n\ntest();"
completions: ["  return N.toString(2);\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    return N.toString(2);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  // convert N to binary\n  let binary = N.toString(2);\n  // convert binary to\
    \ array\n  let binaryArray = binary.split(\"\");\n  // reduce binary array to\
    \ sum of digits\n  let sum = binaryArray.reduce((acc, curr) => {\n    return acc\
    \ + parseInt(curr);\n  }, 0);\n  // return sum\n  return sum.toString();\n}\n\n\
    console.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    return N.toString(2);\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let binary = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n\
    \  return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let bin = N.toString(2);\n  let sum = 0;\n  for\
    \ (let i = 0; i < bin.length; i++) {\n    sum += parseInt(bin[i]);\n  }\n  return\
    \ sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return (N >>> 0).toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    return N.toString(2);\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
