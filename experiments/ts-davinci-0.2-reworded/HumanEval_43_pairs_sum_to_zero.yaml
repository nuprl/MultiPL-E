name: HumanEval_43_pairs_sum_to_zero
language: ts
prompt: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are two distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
  // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9,\
  \ -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\"\
    );\n}\n", "    // Your code here\n    return false;\n}\n", "    // YOUR CODE HERE\n\
    \    throw new Error(\"Not implemented yet.\");\n}\n", "    let result: boolean\
    \ = false;\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i +\
    \ 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n            \
    \    result = true;\n            }\n        }\n    }\n    return result;\n}\n",
  "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n      \
    \  if (seen.includes(-l[i])) {\n            return true;\n        }\n        seen.push(l[i]);\n\
    \    }\n    return false;\n}\n", "    let s: number[] = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (s.includes(-l[i])) {\n            return\
    \ true;\n        }\n        s.push(l[i]);\n    }\n    return false;\n}\n", " \
    \ let s = new Set<number>();\n  for (let i = 0; i < l.length; i++) {\n    if (s.has(l[i]))\
    \ {\n      return true;\n    }\n    s.add(-l[i]);\n  }\n  return false;\n}\n",
  "  // YOUR CODE HERE\n  return false;\n}\n", "    let seen: number[] = [];\n   \
    \ for (let i = 0; i < l.length; i++) {\n        if (seen.includes(-l[i])) {\n\
    \            return true;\n        }\n        seen.push(l[i]);\n    }\n    return\
    \ false;\n}\n", "  // your code here\n  return false;\n}\n", "    // your code\
    \ here\n    return false;\n}\n", "  for (let i = 0; i < l.length; i++) {\n   \
    \ for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n \
    \       return true;\n      }\n    }\n  }\n  return false;\n}\n", "  let i: number\
    \ = 0;\n  let j: number = 0;\n  let k: number = 0;\n  let m: number = 0;\n  let\
    \ n: number = 0;\n  let o: number = 0;\n  let p: number = 0;\n  let q: number\
    \ = 0;\n  let r: number = 0;\n  let s: number = 0;\n  let t: number = 0;\n  let\
    \ u: number = 0;\n  let v: number = 0;\n  let w: number = 0;\n  let x: number\
    \ = 0;\n  let y: number = 0;\n  let z: number = 0;\n  let aa: number = 0;\n  let\
    \ ab: number = 0;\n  let ac: number = 0;\n  let ad: number = 0;\n  let ae: number\
    \ = 0;\n  let af: number = 0;\n  let ag: number = 0;\n  let ah: number = 0;\n\
    \  let ai: number = 0;\n  let aj: number = 0;\n  let ak: number = 0;\n  let al:\
    \ number = 0;\n  let am: number = 0;\n  let an: number = 0;\n  let ao: number\
    \ = 0;\n  let ap: number = 0;\n  let aq: number = 0;\n  let ar: number = 0;\n\
    \  let as: number = 0;\n  let at: number = 0;\n  let au: number = 0;\n  let av:\
    \ number = 0;\n  let aw: number = 0;\n  let ax: number = 0;\n  let ay: number\
    \ = 0;\n  let az: number = 0;\n  let ba: number = 0;\n  let bb: number = 0;\n\
    \  let bc: number = 0;\n  let bd: number = 0;\n  let be: number = 0;\n  let bf:\
    \ number = 0;\n  let bg: number = 0;\n  let bh: number = 0;\n  let bi: number\
    \ = 0;\n  let bj: number = 0;\n  let bk: number = 0;\n  let bl: number = 0;\n\
    \  let b", "    for (let i = 0; i < l.length; i++) {\n        for (let j = i +\
    \ 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n", " \
    \   let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n     \
    \   if (seen.includes(-l[i])) {\n            return true;\n        }\n       \
    \ seen.push(l[i]);\n    }\n    return false;\n}\n", "    let i: number;\n    let\
    \ j: number;\n    let k: number;\n    let l_length: number = l.length;\n    for\
    \ (i = 0; i < l_length; i++) {\n        for (j = i + 1; j < l_length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n", "  // TODO: implement this\
    \ function\n  return false;\n}\n", "    let s: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (s.includes(-l[i])) {\n            return\
    \ true;\n        }\n        s.push(l[i]);\n    }\n    return false;\n}\n", " \
    \   let i = 0;\n    let j = 0;\n    for (i = 0; i < l.length; i++) {\n       \
    \ for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n", "    // your code here\n    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
