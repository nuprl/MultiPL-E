name: HumanEval_62_derivative
language: ts
prompt: "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>>\
  \ derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n\
  // [2, 6]\nfunction derivative(xs: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = derivative;\n  assert.deepEqual(candidate([3, 1, 2,\
  \ 4, 5]),[1, 4, 12, 20]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n\
  \  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"
completions: ["    const result: number[] = [];\n    for (let i = 1; i < xs.length;\
    \ i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", " \
    \ return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "    const result: number[]\
    \ = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i]\
    \ * i);\n    }\n    return result;\n}\n", "    const result: number[] = [];\n\
    \    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n\
    \    }\n    return result;\n}\n", "  return xs.slice(1).map((x, i) => (i + 1)\
    \ * x);\n}\n", "    return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  return\
    \ xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  const result: number[] = [];\n\
    \  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n \
    \ return result;\n}\n", "  const result: number[] = [];\n  for (let i = 1; i <\
    \ xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i]\
    \ * i);\n  }\n  return result;\n}\n", "    return xs.slice(1).map((x, i) => (i\
    \ + 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", " \
    \ return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  if (xs.length === 0)\
    \ {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i < xs.length;\
    \ i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n}\n", "  return\
    \ xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  const result: number[] = [];\n\
    \  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n \
    \ return result;\n}\n", "    let result: number[] = [];\n    for (let i = 1; i\
    \ < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n\
    \    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "    const result:\
    \ number[] = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i]\
    \ * i);\n    }\n    return result;\n}\n", "    const result: number[] = [];\n\
    \    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n\
    \    }\n    return result;\n}\n", "  return xs.slice(1).map((x, i) => (i + 1)\
    \ * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "    return\
    \ xs.slice(1).map((x, i) => x * (i + 1));\n}\n", "  return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n\
    }\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "    return xs.slice(1).map((x, i) => (i + 1) * x);\n\
    }\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i]\
    \ * i);\n  }\n  return result;\n}\n", "  return xs.slice(1).map((x, i) => (i +\
    \ 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", " \
    \ return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n\
    }\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "    const result:\
    \ number[] = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i]\
    \ * i);\n    }\n    return result;\n}\n", "    return xs.slice(1).map((x, i) =>\
    \ (i + 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n",
  "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "    const result: number[] = [];\n    for (let i\
    \ = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return\
    \ result;\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  \
    \  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "    return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n\
    }\n", "    const result: number[] = [];\n    for (let i = 1; i < xs.length; i++)\
    \ {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "  return\
    \ xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "    return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "    return xs.slice(1).map((x, i) => (i + 1) * x);\n\
    }\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "  const result: number[] = [];\n  for (let i = 1;\
    \ i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n\
    }\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "    return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n\
    }\n", "  const result: number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n\
    \    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "  return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n\
    }\n", "    return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "    const result: number[] = [];\n    for (let i\
    \ = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return\
    \ result;\n}\n", "  const result: number[] = [];\n  for (let i = 1; i < xs.length;\
    \ i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i]\
    \ * i);\n  }\n  return result;\n}\n", "  return xs.slice(1).map((x, i) => (i +\
    \ 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", " \
    \   const result: number[] = [];\n    for (let i = 1; i < xs.length; i++) {\n\
    \        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "  let res:\
    \ number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n    res.push(xs[i]\
    \ * i);\n  }\n  return res;\n}\n", "  return xs.slice(1).map((x, i) => (i + 1)\
    \ * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  const\
    \ result: number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i]\
    \ * i);\n  }\n  return result;\n}\n", "  return xs.slice(1).map((x, i) => (i +\
    \ 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", " \
    \ const result: number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i]\
    \ * i);\n  }\n  return result;\n}\n", "  return xs.slice(1).map((x, i) => (i +\
    \ 1) * x);\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
