{
  "name": "HumanEval_100_make_a_pile",
  "language": "rb",
  "prompt": "# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in an array, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile.call(3)\n# [3, 5, 7]\ndef make_a_pile(n)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_a_pile\n    candidate = method(:make_a_pile)\n    assert_equal([3, 5, 7], candidate.call(3))\n    assert_equal([4, 6, 8, 10], candidate.call(4))\n    assert_equal([5, 7, 9, 11, 13], candidate.call(5))\n    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))\n    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))\n  end\nend\n",
  "completions": [
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 2 * n + 1]\n    else:\n        return [n, 2 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1, 8 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1, 8 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n, 2 * n]\n    return [n, 2 * n + 1]",
    "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n, 2 * n]\n    return [n, 2 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 2 * n + 1]\n    else:\n        return [n, 2 * n + 1]",
    "    if n % 2 == 1:\n        return [n, n + 1, n + 2]\n    else:\n        return [n, n, n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1, 8 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n]\n    else:\n        return [n, 2 * n, 4 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n]\n    else:\n        return [n, 2 * n, 4 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 1:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2*n, 4*n]\n    else:\n        return [n, 2*n+1, 4*n+2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 2 * n + 1]\n    else:\n        return [n, 2 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1, 8 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n == 1:\n        return [1]\n    if n % 2 == 1:\n        return [n, n + 1, n + 2]\n    else:\n        return [n, n, n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2]\n    else:\n        return [n, n + 2, n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n == 1:\n        return [1]\n    if n % 2 == 1:\n        return [n, n+1]\n    else:\n        return [n, n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n == 1:\n        return [1]\n    if n % 2 == 1:\n        return [n, n+1]\n    else:\n        return [n, n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 2 * n + 2, 2 * n + 4, 2 * n + 6, 2 * n + 8]\n    else:\n        return [n, 2 * n + 1, 2 * n + 3, 2 * n + 5, 2 * n + 7, 2 * n + 9]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n, n+1]\n    else:\n        return [n, n+2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2*n, 4*n]\n    else:\n        return [n, 2*n, 3*n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n]\n    else:\n        return [n, 2 * n, 3 * n, 4 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n, n + 1]\n    else:\n        return [n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2*n, 4*n, 6*n, 8*n, 10*n, 12*n, 14*n, 16*n, 18*n, 20*n]\n    else:\n        return [n, 2*n, 4*n, 6*n, 8*n, 10*n, 12*n, 14*n, 16*n, 18*n, 20*n, 22*n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n, n+1]\n    else:\n        return [n+1, n+2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n]\n    else:\n        return [n, 2 * n, 3 * n, 4 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n]\n    else:\n        return [n, 2 * n, 3 * n, 4 * n]",
    "    if n % 2 == 0:\n        return [n, 2*n, 4*n, 6*n, 8*n, 10*n, 12*n, 14*n, 16*n, 18*n, 20*n]\n    else:\n        return [n, 2*n, 4*n, 6*n, 8*n, 10*n, 12*n, 14*n, 16*n, 18*n, 20*n, 22*n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n == 1:\n        return [1]\n    if n % 2 == 1:\n        return [n, n+1, n+2]\n    else:\n        return [n, n+2, n+4]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 2 * n + 1]\n    else:\n        return [n, 2 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 2 * n + 1]\n    else:\n        return [n, 2 * n + 1]",
    "    if n % 2 == 1:\n        return [n, 2 * n + 1, 2 * n + 2]\n    else:\n        return [n, 2 * n, 2 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n + 1, 8 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2]\n    else:\n        return [n, n + 2, n + 3]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n]\n    else:\n        return [n, 2 * n, 3 * n, 4 * n]",
    "    if n % 2 == 1:\n        return [n, n + 1, n + 2]\n    else:\n        return [n, n, n + 2]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n + 1, 4 * n + 2]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n, 10 * n + 1]",
    "    if n % 2 == 1:\n        return [n, 2*n+1, 4*n+3]\n    else:\n        return [n, 2*n, 4*n+2]",
    "    if n % 2 == 1:\n        return [n, n + 1, n + 2]\n    else:\n        return [n, n, n + 2]",
    "    if n % 2 == 0:\n        return [n, 2*n, 4*n]\n    else:\n        return [n, 2*n, 3*n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 2 * n + 1]\n    else:\n        return [n, 2 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12, n + 13, n + 14, n + 15, n + 16, n + 17, n + 18, n + 19, n + 20, n + 21, n + 22, n + 23, n + 24, n + 25, n + 26, n + 27, n + 28, n + 29, n + 30, n + 31, n + 32, n + 33, n + 34, n + 35, n + 36, n + 37, n + 38, n + 39, n + 40, n + 41, n + 42, n + 43, n + 44, n + 45, n + 46, n + 47, n + 48, n + 49, n + 50, n + 51, n + 52, n + 53, n + 54, n + 55, n + 56, n + 57, n + 58, n + 59, n + 60, n + 61, n + 62, n + 63, n + 64, n + 65, n + 66, n + 67, n + 68, n + 69, n + 70, n + 71, n + 72, n + 73, n + 74, n + 75, n + 76, n + 77, n + 78, n + 79, n + 80, n + 81, n + 82, n + 83, n + 84, n + 85, n + 86, n + 87, n + 88, n + 89, n + 90, n + 91, n + 92, n + 93, n + 94, n + 95, n + 96, n + 97, n + 98, n + 99, n + 100, n + 101, n + 102, n + 103, n + 104, n + 105, n + 106, n + 107, n + 108, n + 109, n + 110, n + 111, n + 112, n + 113, n + 114, n + 115, n + 116, n + 117, n + 118, n + 119, n + 120, n + 121, n + 122, n + 123, n + 124, n +",
    "    if n % 2 == 0:\n        return [n, 2 * n, 2 * n + 1]\n    else:\n        return [n, 2 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n]\n    else:\n        return [n, 2 * n, 4 * n, 6 * n, 8 * n + 1]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]",
    "    if n % 2 == 0:\n        return [n, 2 * n, 4 * n]\n    else:\n        return [n, 2 * n, 3 * n]"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}