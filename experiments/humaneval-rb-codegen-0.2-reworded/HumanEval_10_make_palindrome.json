{
  "name": "HumanEval_10_make_palindrome",
  "language": "rb",
  "prompt": "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\", candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n",
  "completions": [
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    if len(string) < 2:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaaaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaaaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaaaaaa\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cataaaaaaaaa\")",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    if len(string) == 0:\n        return string\n    \n    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:] + longest_palindrome\n    \n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) < 2:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0] + make_palindrome(string[1:][::-1])",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if string[i] in string[i:]:\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    ",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    return string[::-1] + string[:len(string) - len(string) / 2]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    return string[::-1] + string[::-1][:len(string) - len(string) % 2]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    return string + string[::-1][:len(string) - len(string)//2]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    if len(string) < 2:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenation of the two strings.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catac",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    ",
    "    if len(string) < 2:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatac",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenation of the two strings.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catac",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    return string + string[::-1][:len(string) - len(string)//2]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    return string + string[::-1][:len(string) - len(string) % 2]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest palindrome that starts with the supplied string.\n    # This is the longest substring that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            longest_palindrome = string[:i+1]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatac",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacatac",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # The longest palindrome is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring is the longest prefix of the string that is a palindrome.\n    # The longest prefix is the longest substring that is a palindrome.\n    # The longest substring",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if string[i] in string[i:]:\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    if len(string) < 2:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0] + make_palindrome(string[1:][::-1])",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenation of the two strings.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catac",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenation of the two strings.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catac",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    return string + string[::-1][:len(string) - len(string)//2]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string\n    if len(string) == 2:\n        return string\n    if len(string) == 3:\n        return string\n    if len(string) == 4:\n        return string\n    if len(string) == 5:\n        return string\n    if len(string) == 6:\n        return string\n    if len(string) == 7:\n        return string\n    if len(string) == 8:\n        return string\n    if len(string) == 9:\n        return string\n    if len(string) == 10:\n        return string\n    if len(string) == 11:\n        return string\n    if len(string) == 12:\n        return string\n    if len(string) == 13:\n        return string\n    if len(string) == 14:\n        return string\n    if len(string) == 15:\n        return string\n    if len(string) == 16:\n        return string\n    if len(string) == 17:\n        return string\n    if len(string) == 18:\n        return string\n    if len(string) == 19:\n        return string\n    if len(string) == 20:\n        return string\n    if len(string) == 21:\n        return string\n    if len(string) == 22:\n        return string\n    if len(string) == 23:\n        return string\n    if len(string) == 24:\n        return string\n    if len(string) == 25:\n        return string\n    if len(string) == 26:\n        return string\n    if len(string) == 27:\n        return string\n    if len(string) == 28:\n        return string\n    if len(string) == 29:\n        return string\n    if len(string) == 30:\n        return string\n    if len(string) == 31:\n        return string\n    if len(string) == 32:\n        return string\n    if len(string) == 33:\n        return string\n    if len(string) == 34:\n        return string\n    if len(string) == 35:\n        return string\n    if len(string) == 36",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenation of the two strings.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catac",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    ",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatac",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenation of the two strings.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catac",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    return string + string[::-1][:len(string) - len(string)//2]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if string[i] in string[i:]:\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    if len(string) == 0:\n        return string\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]",
    "    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string\n    if len(string) == 2:\n        return string\n    if len(string) == 3:\n        return string\n    if len(string) == 4:\n        return string\n    if len(string) == 5:\n        return string\n    if len(string) == 6:\n        return string\n    if len(string) == 7:\n        return string\n    if len(string) == 8:\n        return string\n    if len(string) == 9:\n        return string\n    if len(string) == 10:\n        return string\n    if len(string) == 11:\n        return string\n    if len(string) == 12:\n        return string\n    if len(string) == 13:\n        return string\n    if len(string) == 14:\n        return string\n    if len(string) == 15:\n        return string\n    if len(string) == 16:\n        return string\n    if len(string) == 17:\n        return string\n    if len(string) == 18:\n        return string\n    if len(string) == 19:\n        return string\n    if len(string) == 20:\n        return string\n    if len(string) == 21:\n        return string\n    if len(string) == 22:\n        return string\n    if len(string) == 23:\n        return string\n    if len(string) == 24:\n        return string\n    if len(string) == 25:\n        return string\n    if len(string) == 26:\n        return string\n    if len(string) == 27:\n        return string\n    if len(string) == 28:\n        return string\n    if len(string) == 29:\n        return string\n    if len(string) == 30:\n        return string\n    if len(string) == 31:\n        return string\n    if len(string) == 32:\n        return string\n    if len(string) == 33:\n        return string\n    if len(string) == 34:\n        return string\n    if len(string) == 35:\n        return string\n    if len(string) == 36",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    if len(string) == 0:\n        return string\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string\n    if len(string) == 2:\n        if string[0] == string[1]:\n            return string\n        else:\n            return string[::-1]\n    if len(string) == 3:\n        if string[0] == string[1] and string[1] == string[2]:\n            return string\n        else:\n            return string[::-1]\n    if len(string) == 4:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3]:\n            return string\n        else:\n            return string[::-1]\n    if len(string) == 5:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4]:\n            return string\n        else:\n            return string[::-1]\n    if len(string) == 6:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5]:\n            return string\n        else:\n            return string[::-1]\n    if len(string) == 7:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6]:\n            return string\n        else:\n            return string[::-1]\n    if len(string) == 8:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6] and string[6] == string[7]:\n            return string\n        else:\n            return string[::-1]\n    ",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenation of the two strings.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catac",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the resulting string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    return string[::-1] + string[:len(string)//2] + string[-len(string)//2:]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if string[i] in string[i:]:\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacatacatacat\")\n    # \"catacatacatacatacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatac",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if string[i] in string[i:]:\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # - Return the concatenated string.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacat",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if string[i] in string[i:]:\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
    "    # Find the longest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome.call(\"\")\n    # \"\"\n    # >>> make_palindrome.call(\"cat\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"cata\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catac\")\n    # \"catac\"\n    # >>> make_palindrome.call(\"catacat\")\n    # \"catacat\"\n    # >>> make_palindrome.call(\"catacatac\")\n    # \"catacatac\"\n    # >>> make_palindrome.call(\"catacatacat\")\n    # \"catacatacat\"\n    # >>> make_palindrome.call(\"catacatacatac\")\n    # \"catacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacat\")\n    # \"catacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatac\")\n    # \"catacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacat\")\n    # \"catacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatac\")\n    # \"catacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacat\")\n    # \"catacatacatacatacatacat\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatac\")\n    # \"catacatacatacatacatacatac\"\n    # >>> make_palindrome.call(\"catacatacatacatacatacatacat\")\n    # \"",
    "    if len(string) == 0:\n        return string\n    else:\n        return make_palindrome(string[1:]) + string[0]",
    "    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}