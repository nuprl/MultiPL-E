{
  "name": "HumanEval_9_rolling_max",
  "language": "rb",
  "prompt": "# From a given array of integers, generate an array of rolling maximum element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n",
  "completions": [
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(numbers[i])\n        for j in range(i, len(numbers)):\n            if numbers[j] > max_list[-1]:\n                max_list[-1] = numbers[j]\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_so_far < numbers[i]:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far, max_so_far_index]",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        max_ending_here = max(max_ending_here, numbers[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(numbers[i])\n        if i < len(numbers) - 1:\n            max_list.append(max(numbers[i + 1:i + len(numbers) - 1]))\n    return max_list",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_so_far < numbers[i]:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n    return [max_so_far] + [max_ending_here] + numbers[i+1:]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index+1:]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n    return [max_so_far, max_ending_here]",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        yield max_so_far",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:]",
    "    max_so_far = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_so_far < numbers[i]:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        yield max_so_far",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        yield max_so_far",
    "    max_value = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_value < numbers[i]:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index+1:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index+1:]",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        max_ending_here = max(max_ending_here, numbers[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_value = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_value < numbers[i]:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        yield max_so_far",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(numbers[i])\n        for j in range(i+1, len(numbers)):\n            if numbers[j] > max_list[-1]:\n                max_list[-1] = numbers[j]\n    return max_list",
    "    max_value = numbers[0]\n    result = [max_value]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far, max_so_far_index]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(numbers[i])\n        for j in range(i, len(numbers)):\n            if numbers[j] > max_list[-1]:\n                max_list[-1] = numbers[j]\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)], key=numbers.__getitem__))\n    return max_list",
    "    max_so_far = numbers[0]\n    result = []\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        max_ending_here = max(max_ending_here, numbers[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_so_far < numbers[i]:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(numbers[i])\n        for j in range(i, len(numbers)):\n            if numbers[j] > max_list[i]:\n                max_list[i] = numbers[j]\n    return max_list",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        yield max_so_far",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far, max_so_far_index]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n    return [max_so_far, max_ending_here]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n    return [max_so_far, max_ending_here]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        max_ending_here = numbers[i]\n    return max_so_far",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_so_far < numbers[i]:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_value = numbers[0]\n    max_index = 0\n    for i in range(len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n            max_index = i\n    return [max_value] + numbers[max_index+1:len(numbers)]",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        yield max_so_far",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far, max_so_far_index]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_value = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_value < numbers[i]:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n    return [max_so_far, max_ending_here]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_numbers.append(numbers[i])\n        else:\n            if numbers[i] > max_numbers[i-1]:\n                max_numbers.append(numbers[i])\n            else:\n                max_numbers.append(max_numbers[i-1])\n    return max_numbers",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_so_far < numbers[i]:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(numbers[i])\n        for j in range(i, len(numbers)):\n            if numbers[j] > max_list[i]:\n                max_list[i] = numbers[j]\n    return max_list",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(numbers[i])\n        for j in range(i+1, len(numbers)):\n            if numbers[j] > max_list[-1]:\n                max_list[-1] = numbers[j]\n    return max_list",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n    return max_so_far",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        max_ending_here = max(max_ending_here, numbers[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_value = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_value < numbers[i]:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:len(numbers)]",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n    return [max_so_far, max_ending_here]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far, max_so_far_index]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index:]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n    return [max_so_far, max_ending_here]",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        yield max_so_far",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)], key=numbers.__getitem__))\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        if len(max_list) == 0:\n            max_list.append(numbers[i])\n        else:\n            if numbers[i] > max_list[-1]:\n                max_list.append(numbers[i])\n            else:\n                max_list.append(max_list[-1])\n    return max_list",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        yield max_so_far",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n    return [max_so_far] + [max_ending_here]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        yield max_so_far",
    "    max_value = numbers[0]\n    result = []\n    for i in range(len(numbers)):\n        if max_value < numbers[i]:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(numbers[i])\n        if i < len(numbers) - 1:\n            max_list.append(max(numbers[i], numbers[i + 1]))\n    return max_list",
    "    max_list = []\n    for i in range(len(numbers)):\n        if len(max_list) == 0:\n            max_list.append(numbers[i])\n        else:\n            if numbers[i] > max_list[-1]:\n                max_list.append(numbers[i])\n            else:\n                max_list.append(max_list[-1])\n    return max_list",
    "    max_value = numbers[0]\n    max_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n            max_index = i\n    return [max_value] + numbers[max_index:len(numbers)]",
    "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+len(numbers)]))\n    return max_list",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "    max_value = numbers[0]\n    result = [max_value]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result",
    "    max_so_far = numbers[0]\n    max_so_far_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n    return [max_so_far] + numbers[max_so_far_index: len(numbers)]",
    "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result",
    "    max_list = []\n    for i in range(len(numbers)):\n        if len(max_list) == 0:\n            max_list.append(numbers[i])\n        else:\n            if numbers[i] > max_list[-1]:\n                max_list.append(numbers[i])\n            else:\n                max_list.append(max_list[-1])\n    return max_list",
    "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[i:i+len(numbers)]))\n    return max_numbers",
    "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here:\n            max_ending_here = numbers[i]\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n    return [max_so_far, max_ending_here]"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}