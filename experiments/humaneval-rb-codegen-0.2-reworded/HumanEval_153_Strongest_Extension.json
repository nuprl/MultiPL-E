{
  "name": "HumanEval_153_Strongest_Extension",
  "language": "rb",
  "prompt": "# You will be given the name of a class (a string) and an array of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the array.\n# For example, if you are given \"Slices\" as the class and an array of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension.call(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\ndef Strongest_Extension(class_name, extensions)\n",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n",
  "completions": [
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    cap = 0\n    sm = 0\n    for e in extensions:\n        cap += sum(1 for c in e if c.isupper())\n        sm += sum(1 for c in e if c.islower())\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"",
    "    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))\n",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))\n",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('A'))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension function here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    if cap - sm > 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[1]",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"",
    "    # Your Strongest_Extension function here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(c.isupper() for c in ext)\n        sm += sum(c.islower() for c in ext)\n    if cap - sm == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0] + \".\" + str(cap - sm)",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext[0])\n        sm += len(ext[0])\n    strength = cap - sm\n    for ext in extensions:\n        if strength == ext[1]:\n            return class_name + \".\" + ext[0]\n    return class_name + \".\" + extensions[0][0]",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += ext.count('A')\n        sm += ext.count('a')\n    strength = cap - sm\n    if strength == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        for i in range(len(extensions)):\n            if strength == extensions[i].count('a') - extensions[i].count('A'):\n                return class_name + \".\" + extensions[i]\n            elif strength < extensions[i].count('a') - extensions[i].count('A'):\n                return class_name + \".\" + extensions[i]",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension function here\n    pass",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += ext.isupper()\n        sm += ext.islower()\n    strength = float(cap - sm)\n    if strength == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        for i in range(len(extensions)):\n            if strength == extensions[i].islower():\n                return class_name + \".\" + extensions[i]\n            elif strength < extensions[i].islower():\n                return class_name + \".\" + extensions[i]",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))\n",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))\n",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += ext.count('A')\n        sm += ext.count('a')\n    strength = cap - sm\n    if strength == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        for i in range(len(extensions)):\n            if strength == extensions[i].count('a') - extensions[i].count('A'):\n                return class_name + \".\" + extensions[i]\n            elif strength < extensions[i].count('a') - extensions[i].count('A'):\n                return class_name + \".\" + extensions[i]",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # YOUR CODE HERE\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))\n",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    if cap - sm > 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0]",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension function here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))\n",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += ext.isupper()\n        sm += ext.islower()\n    strength = cap - sm\n    if strength == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0] + \".\" + str(strength)",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    if cap - sm == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0] + \".\" + str(cap - sm)",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # Your Strongest_Extension function here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    strength = cap - sm\n    if strength == 0:\n        return class_name\n    else:\n        return class_name + \".\" + extensions[0]",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += ext.count('A')\n        sm += ext.count('a')\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))\n",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))",
    "    # Your Strongest_Extension function here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension function here\n    pass",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))\n",
    "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A'))",
    "    # Your Strongest_Extension code here\n    pass",
    "    # Write your code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"A\") - x.count(\"a\"))\n"
  ],
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ]
}