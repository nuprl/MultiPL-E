{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    public static long toggleMiddleBits(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(toggleMiddleBits((9l)) == (15l));\n    assert(toggleMiddleBits((10l)) == (12l));\n    assert(toggleMiddleBits((11l)) == (13l));\n    assert(toggleMiddleBits((65l)) == (127l));\n    assert(toggleMiddleBits((77l)) == (115l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0);\n        return n ^ mask;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << 63) | (1L << 62);\n        return n ^ mask;",
    "        return (n & 0x2) | ((n & 0xffffffffffffffcL) ^ 0xffffffffffffffcL);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n & mask) | (~n & ~mask);",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n & mask) | (~n & ~mask);",
    "        long mask = (1L << 63) | (1L << 0);\n        return n ^ (~mask);",
    "        long mask = 0b11;\n        long res = 0;\n        for (int i = 0; i < 64; i++) {\n            long bit = (n >> i) & 1;\n            if (i == 0 || i == 63) {\n                res |= (bit << i);\n            } else {\n                res |= ((bit ^ 1) << i);\n            }\n        }\n        return res;",
    "        long mask = 0b11;\n        long result = 0;\n        while (n != 0) {\n            long first = n & mask;\n            n >>= 2;\n            long middle = n & mask;\n            n >>= 2;\n            long last = n & mask;\n            n >>= 2;\n            result <<= 2;\n            result |= first;\n            result <<= 2;\n            result |= (middle ^ mask);\n            result <<= 2;\n            result |= last;\n        }\n        return result;",
    "        return (n & 0x2) | ((n & 0xfffffffffffffffcL) ^ 0xfffffffffffffffcL);",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = 0b11;\n        long res = 0;\n        while (n != 0) {\n            long last = n & mask;\n            n >>= 1;\n            long middle = n & mask;\n            n >>= 1;\n            long first = n & mask;\n            n >>= 1;\n            res = (res << 1) | first;\n            res = (res << 2) | middle;\n            res = (res << 1) | last;\n        }\n        return res;",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE; i++) {\n            long bit = (n >> i) & 1;\n            if (i == 0 || i == Long.SIZE - 1) {\n                result |= bit << i;\n            } else {\n                result |= (1 - bit) << i;\n            }\n        }\n        return result;",
    "        return (n ^ (n >> 1)) & ~((1L << 63) | 1);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask) | (1L << 63);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = 0b1111111111111111111111111111111111111111111111111111111111111111;\n        long first = n & 0b1;\n        long last = n & (0b1 << 63);\n        long middle = n & mask;\n        middle = ~middle;\n        middle = middle & mask;\n        return first | middle | last;",
    "        long mask = (1L << 63) - 1;\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask) | (1L << 63);",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE; i++) {\n            if (i == 0 || i == Long.SIZE - 1) {\n                result |= (n & mask) << i;\n            } else {\n                result |= ((n & mask) == 0 ? 1 : 0) << i;\n            }\n            n >>= 1;\n        }\n        return result;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        return (n ^ (n >> 1) ^ (n << 1)) & ~(1L << 63) & ~1L;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62);\n        return n ^ mask;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0);\n        return n ^ mask;",
    "        // Write your code here\n        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return (n ^ mask) | (1 << (Long.SIZE - 1));",
    "        long mask = (1L << 63) | (1L << 62);\n        for (int i = 61; i >= 0; i--) {\n            mask |= (1L << i);\n        }\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0);\n        return n ^ mask;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        int firstBit = (int)(n & 1);\n        int lastBit = (int)(n & (1L << 63));\n        long mask = (1L << 63) - 1;\n        mask = mask ^ ((1L << 63) - 1);\n        mask = mask ^ 1;\n        return (n ^ mask) | (firstBit << 63) | lastBit;",
    "        long firstBit = n & 1;\n        long lastBit = n & (1 << 63);\n        long mask = (1 << 63) - 1;\n        mask -= 1;\n        mask -= (1 << 63);\n        mask ^= lastBit;\n        mask ^= firstBit;\n        return n ^ mask;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << 63) - 1;\n        mask = mask ^ (1L << 62);\n        mask = mask ^ (1L << 1);\n        return n ^ mask;",
    "        return (n ^ ((1L << (Long.SIZE - 2)) - 1)) | (1L << (Long.SIZE - 2));",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        return (n & 0x2) | (n & 0x4) | (n & 0x8) | (n & 0x10) | (n & 0x20) | (n & 0x40) | (n & 0x80) | (n & 0x100) | (n & 0x200) | (n & 0x400) | (n & 0x800) | (n & 0x1000) | (n & 0x2000) | (n & 0x4000) | (n & 0x8000) | (n & 0x10000) | (n & 0x20000) | (n & 0x40000) | (n & 0x80000) | (n & 0x100000) | (n & 0x200000) | (n & 0x400000) | (n & 0x800000) | (n & 0x1000000) | (n & 0x2000000) | (n & 0x4000000) | (n & 0x8000000) | (n & 0x10000000) | (n & 0x20000000) | (n & 0x40000000);",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE - 2; i++) {\n            long bit = (n & mask) >> i;\n            result |= bit << i;\n            mask <<= 1;\n        }\n        return result;",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE; i++) {\n            if (i == 0 || i == Long.SIZE - 1) {\n                result |= (n & (1 << i));\n            } else {\n                result |= (n & (1 << i)) ^ (1 << i);\n            }\n        }\n        return result;",
    "        long mask = (1L << 63) | 1L;\n        return n ^ (mask << 1);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        return ((n & 0xFFFFFFFFFFFFFFFCL) >> 2) | ((n & 0xFFFFFFFFFFFFFFFCL) << 2);",
    "        return (n & 0xFFFFFFFFFFFFFFFCL) | ((n & 0x0000000000000003L) << 1) | ((n & 0x0000000000000004L) >> 1);",
    "        long mask = (1L << 63) | (1L << 0);\n        return n ^ (~mask);",
    "        long mask = (1L << 63) | (1L << 62);\n        return n ^ mask;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        return (n & 0x2) | (n & 0x4) | (n & 0x8) | (n & 0x10) | (n & 0x20) | (n & 0x40) | (n & 0x80) | (n & 0x100) | (n & 0x200) | (n & 0x400) | (n & 0x800) | (n & 0x1000) | (n & 0x2000) | (n & 0x4000) | (n & 0x8000) | (n & 0x10000) | (n & 0x20000) | (n & 0x40000) | (n & 0x80000) | (n & 0x100000) | (n & 0x200000) | (n & 0x400000) | (n & 0x800000) | (n & 0x1000000) | (n & 0x2000000) | (n & 0x4000000) | (n & 0x8000000) | (n & 0x10000000) | (n & 0x20000000) | (n & 0x40000000) | (n & 0x80000000) | (n & 0x100000000) | (n & 0x200000000) | (n & 0x400000000) | (n & 0x800000000) | (n & 0x1000000000) | (n & 0x2000000000) | (n & 0x4000000000) | (n & 0x8000000000) | (n & 0x10000000000) | (n & 0x20000000000) | (n & 0x40000000000) | (n & 0x80000000000) | (n & 0x100000000000) | (n & 0x200000000000) | (n & 0x400000000000) | (n & 0x800000000000) | (n & 0x1000000000000) | (n & 0x2000000000000) | (n & 0x4000000000000) | (n & 0x8000000000000) | (n & 0x10000000000000) | (n & 0x20000000000000) | (n & 0x40000000000000) | (n & 0x80000000000000) | (n & 0x100000000000000) | (n &",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = 0b11;\n        long left = n & mask;\n        long right = n & (mask << (Long.SIZE - 2));\n        long middle = n & ~(mask << 1);\n        return left | (middle ^ (mask << 1)) | right;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        return (n & 0x2) | (n & 0x4) | (n & 0x8) | (n & 0x10) | (n & 0x20) | (n & 0x40) | (n & 0x80) | (n & 0x100) | (n & 0x200) | (n & 0x400) | (n & 0x800) | (n & 0x1000) | (n & 0x2000) | (n & 0x4000) | (n & 0x8000) | (n & 0x10000) | (n & 0x20000) | (n & 0x40000) | (n & 0x80000) | (n & 0x100000) | (n & 0x200000) | (n & 0x400000) | (n & 0x800000) | (n & 0x1000000) | (n & 0x2000000) | (n & 0x4000000) | (n & 0x8000000) | (n & 0x10000000) | (n & 0x20000000) | (n & 0x40000000);",
    "        long mask = (1L << 63) - 1;\n        return n ^ (mask >> 1);",
    "        return ((n & 0x2) << 1) | ((n & 0x4) >> 1) | ((n & 0x8) << 1) | ((n & 0x10) >> 1) | ((n & 0x20) << 1) | ((n & 0x40) >> 1) | ((n & 0x80) << 1) | ((n & 0x100) >> 1) | ((n & 0x200) << 1) | ((n & 0x400) >> 1) | ((n & 0x800) << 1) | ((n & 0x1000) >> 1) | ((n & 0x2000) << 1) | ((n & 0x4000) >> 1) | ((n & 0x8000) << 1) | ((n & 0x10000) >> 1) | ((n & 0x20000) << 1) | ((n & 0x40000) >> 1) | ((n & 0x80000) << 1) | ((n & 0x100000) >> 1) | ((n & 0x200000) << 1) | ((n & 0x400000) >> 1) | ((n & 0x800000) << 1) | ((n & 0x1000000) >> 1) | ((n & 0x2000000) << 1) | ((n & 0x4000000) >> 1) | ((n & 0x8000000) << 1) | ((n & 0x10000000) >> 1) | ((n & 0x20000000) << 1) | ((n & 0x40000000) >> 1) | ((n & 0x80000000) << 1) | ((n & 0x100000000) >> 1) | ((n & 0x200000000) << 1) | ((n & 0x400000000) >> 1) | ((n & 0x800000000) << 1) | ((n & 0x1000000000) >> 1) | ((n & 0x2000000000) << 1) | ((n & 0x4000000000) >> 1) | ((n & 0x8000000000) << 1) | ((n & 0x10000000000) >> 1) | ((n & 0x20000000000) << 1) | ((n & 0x40000000000) >> 1) | ((n & 0x80000000000) << 1) | ((n & 0",
    "        long mask = 0b1111111111111111111111111111111111111111111111111111111111111111;\n        long firstBit = n & 0b1;\n        long lastBit = n & (0b1 << 63);\n        long middleBits = n & (mask ^ (firstBit | lastBit));\n        return (firstBit | (middleBits ^ mask) | lastBit);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return (n & ~mask) | (~n & mask);",
    "        return (n & 0xFFFFFFFFFFFFFFFCL) | ((n & 0x2L) << 1) | ((n & 0x4L) >> 1);",
    "        return (n ^ ((1L << (Long.SIZE - 2)) - 1)) | (1L << (Long.SIZE - 2));",
    "        return (n & 0x2) | ((n & 0xfffffffffffffffcL) ^ 0xfffffffffffffffcL);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return (n ^ mask) | (1L << (Long.SIZE - 2));",
    "        long mask = (1L << 63) - 1;\n        return (n ^ mask) | (1L << 63);",
    "        long mask = (1L << 63) | (1L << 0);\n        return n ^ (~mask);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n & mask) | (~n & ~mask);",
    "        long mask = (1L << 63) | 1;\n        return n ^ (mask << 1);",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        return (n ^ (n >> 2)) << 2 | (n & 3);",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE; i++) {\n            long bit = n & (1L << i);\n            if (i == 0 || i == Long.SIZE - 1) {\n                result |= bit;\n            } else {\n                result |= bit ^ mask;\n            }\n        }\n        return result;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << 63) | (1L << 62);\n        for (int i = 61; i >= 0; i--) {\n            mask |= (1L << i);\n        }\n        return n ^ mask;",
    "        return (n & 0x2) | (n & 0x4) | (n & 0x8) | (n & 0x10) | (n & 0x20) | (n & 0x40) | (n & 0x80) | (n & 0x100) | (n & 0x200) | (n & 0x400) | (n & 0x800) | (n & 0x1000) | (n & 0x2000) | (n & 0x4000) | (n & 0x8000) | (n & 0x10000) | (n & 0x20000) | (n & 0x40000) | (n & 0x80000) | (n & 0x100000) | (n & 0x200000) | (n & 0x400000) | (n & 0x800000) | (n & 0x1000000) | (n & 0x2000000) | (n & 0x4000000) | (n & 0x8000000) | (n & 0x10000000) | (n & 0x20000000) | (n & 0x40000000) | (n & 0x80000000) | (n & 0x100000000) | (n & 0x200000000) | (n & 0x400000000) | (n & 0x800000000) | (n & 0x1000000000) | (n & 0x2000000000) | (n & 0x4000000000) | (n & 0x8000000000) | (n & 0x10000000000) | (n & 0x20000000000) | (n & 0x40000000000) | (n & 0x80000000000) | (n & 0x100000000000) | (n & 0x200000000000) | (n & 0x400000000000) | (n & 0x800000000000) | (n & 0x1000000000000) | (n & 0x2000000000000) | (n & 0x4000000000000) | (n & 0x8000000000000) | (n & 0x10000000000000) | (n & 0x20000000000000) | (n & 0x40000000000000) | (n & 0x80000000000000) | (n & 0x100000000000000) | (n &",
    "        return n ^ (n & ~(1L << 63) & ~(1L << 0));",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n & mask) | (~n & ~mask);",
    "        return ((n & 0x2) << 1) | ((n & 0x4) >> 1) | ((n & 0x8) << 1) | ((n & 0x10) >> 1) | ((n & 0x20) << 1) | ((n & 0x40) >> 1) | ((n & 0x80) << 1) | ((n & 0x100) >> 1) | ((n & 0x200) << 1) | ((n & 0x400) >> 1) | ((n & 0x800) << 1) | ((n & 0x1000) >> 1) | ((n & 0x2000) << 1) | ((n & 0x4000) >> 1) | ((n & 0x8000) << 1) | ((n & 0x10000) >> 1) | ((n & 0x20000) << 1) | ((n & 0x40000) >> 1) | ((n & 0x80000) << 1) | ((n & 0x100000) >> 1) | ((n & 0x200000) << 1) | ((n & 0x400000) >> 1) | ((n & 0x800000) << 1) | ((n & 0x1000000) >> 1) | ((n & 0x2000000) << 1) | ((n & 0x4000000) >> 1) | ((n & 0x8000000) << 1) | ((n & 0x10000000) >> 1) | ((n & 0x20000000) << 1) | ((n & 0x40000000) >> 1) | ((n & 0x80000000) << 1) | ((n & 0x100000000) >> 1) | ((n & 0x200000000) << 1) | ((n & 0x400000000) >> 1) | ((n & 0x800000000) << 1) | ((n & 0x1000000000) >> 1) | ((n & 0x2000000000) << 1) | ((n & 0x4000000000) >> 1) | ((n & 0x8000000000) << 1) | ((n & 0x10000000000) >> 1) | ((n & 0x20000000000) << 1) | ((n & 0x40000000000) >> 1) | ((n & 0x80000000000) << 1) | ((n & 0",
    "        return ((n & 0xFFFFFFFFFFFFFFFCL) ^ 0xAAAAAAAAAAAAAAAAL);",
    "        return (n & 0x2) | ((n & 0xfffffffffffffffcL) ^ 0xfffffffffffffffcL);",
    "        long mask = 0b11;\n        long first = n & mask;\n        long last = n & (mask << (Long.SIZE - 2));\n        n = n & ~mask;\n        n = n & ~(mask << (Long.SIZE - 2));\n        n = n ^ (~n & 0b1111111111111111111111111111111111111111111111111111111111111100);\n        n = n | first;\n        n = n | last;\n        return n;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << 63) - 1;\n        mask = mask ^ (1L << 62);\n        mask = mask ^ (1L << 1);\n        return n ^ mask;",
    "        long mask = 0b11;\n        long mask2 = 0b1111111111111111111111111111111111111111111111111111111111111100;\n        long first = n & mask;\n        long last = (n >> 62) & mask;\n        long middle = n & mask2;\n        long middleToggled = ~middle;\n        return first | middleToggled | (last << 62);",
    "        return (n & 0x2) | ((n & 0xfffffffffffffffcL) ^ 0xfffffffffffffffcL);",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE; i++) {\n            long bit = (n >> i) & 1;\n            if (i == 0 || i == Long.SIZE - 1) {\n                result |= bit << i;\n            } else {\n                result |= (bit ^ 1) << i;\n            }\n        }\n        return result;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        return (n ^ ((1L << (Long.SIZE - 2)) - 1)) | (1L << (Long.SIZE - 2));",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE; i++) {\n            long bit = (n >> i) & 1;\n            if (i == 0 || i == Long.SIZE - 1) {\n                result |= bit << i;\n            } else {\n                result |= (bit ^ 1) << i;\n            }\n        }\n        return result;",
    "        long mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0);\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n & mask) | (~n & ~mask);",
    "        return (n ^ (n >> 1)) & ~(1L << 63 | 1L);",
    "        long mask = (1L << 63) | (1L << 0);\n        return n ^ (~mask);",
    "        return (n & 0x2) | ((n & 0xfffffffffffffffcL) ^ 0xfffffffffffffffcL);",
    "        return (n & 0x2) | ((n & 0xffffffffffffffc) ^ 0xffffffffffffffc);",
    "        long mask = 0b11;\n        long result = n;\n        for (int i = 1; i < Long.SIZE - 1; i++) {\n            long bit = (n >> i) & 1;\n            result ^= (mask << i);\n        }\n        return result;",
    "        long mask = (1L << 63) - 1;\n        return (n ^ mask) | (1L << 63);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        return n ^ (n & ~(1L << 63) & ~1L);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask) | (1L << 63);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long firstBit = n & 1;\n        long lastBit = n & (1 << 63);\n        long mask = (1 << 63) - 1;\n        mask = mask ^ ((1 << 63) - 1);\n        mask = mask ^ 1;\n        return (n ^ mask) | firstBit | lastBit;",
    "        return (n ^ (n >> 1) ^ (n << 1)) & ~(1L << 63) & ~1L;",
    "        long mask = 0;\n        for (int i = 1; i < 63; i++) {\n            mask |= (1L << i);\n        }\n        return n ^ mask;",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE - 2; i++) {\n            long bit = (n & (mask << i)) >> i;\n            result |= (bit ^ 1) << i;\n        }\n        return result;",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return (n & ~mask) | (~n & mask);",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return (n & ~mask) | (~n & mask);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        return (n & 0x8000000000000000L) | (n & 0x0000000000000001L) | ((n & 0x7FFFFFFFFFFFFFFEL) ^ 0x7FFFFFFFFFFFFFFEL);",
    "        long mask = 0b11;\n        long left = n & mask;\n        long right = n & (mask << (Long.SIZE - 2));\n        long middle = n & ~(mask << 1);\n        middle = ~middle;\n        middle = middle & ~mask;\n        return left | middle | right;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return (n & ~mask) | (~n & mask);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n & mask) | (~n & ~mask);",
    "        long mask = 0b11;\n        long res = 0;\n        for (int i = 1; i < 64; i++) {\n            long bit = (n >> i) & 1;\n            if (bit == 1) {\n                res |= (1 << i);\n            }\n        }\n        return res;",
    "        return (n & 0x2) | ((n & 0xfffffffffffffffcL) ^ 0xfffffffffffffffcL);",
    "        long mask = (1 << 63) | 1;\n        return n ^ (mask << 1);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = 0b11;\n        long result = 0;\n        long temp = n;\n        while (temp != 0) {\n            long last = temp & mask;\n            result = result << 2;\n            result = result | last;\n            temp = temp >> 2;\n        }\n        return result;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long mask = (1L << 63) | 1;\n        return n ^ (mask << 1);",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE; i++) {\n            long bit = (n >> i) & 1;\n            if (i == 0 || i == Long.SIZE - 1) {\n                result |= bit << i;\n            } else {\n                result |= (bit ^ 1) << i;\n            }\n        }\n        return result;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << 63) | (1L << 0);\n        return n ^ (~mask);",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return (n & ~mask) | (~n & mask);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << 63) | (1L << 62);\n        return n ^ mask;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        return (n & 0x2) | (n & 0x4) | (n & 0x8) | (n & 0x10) | (n & 0x20) | (n & 0x40) | (n & 0x80) | (n & 0x100) | (n & 0x200) | (n & 0x400) | (n & 0x800) | (n & 0x1000) | (n & 0x2000) | (n & 0x4000) | (n & 0x8000) | (n & 0x10000) | (n & 0x20000) | (n & 0x40000) | (n & 0x80000) | (n & 0x100000) | (n & 0x200000) | (n & 0x400000) | (n & 0x800000) | (n & 0x1000000) | (n & 0x2000000) | (n & 0x4000000) | (n & 0x8000000) | (n & 0x10000000) | (n & 0x20000000) | (n & 0x40000000) | (n & 0x80000000) | (n & 0x100000000) | (n & 0x200000000) | (n & 0x400000000) | (n & 0x800000000) | (n & 0x1000000000) | (n & 0x2000000000) | (n & 0x4000000000) | (n & 0x8000000000) | (n & 0x10000000000) | (n & 0x20000000000) | (n & 0x40000000000) | (n & 0x80000000000) | (n & 0x100000000000) | (n & 0x200000000000) | (n & 0x400000000000) | (n & 0x800000000000) | (n & 0x1000000000000) | (n & 0x2000000000000) | (n & 0x4000000000000) | (n & 0x8000000000000) | (n & 0x10000000000000) | (n & 0x20000000000000) | (n & 0x40000000000000) | (n & 0x80000000000000) | (n & 0x100000000000000) | (n &",
    "        long mask = (1L << 63) | 1;\n        return n ^ (mask | (mask - 1));",
    "        return (n & 0x8000000000000000L) | (n & 0x0000000000000001L) | ((n & 0x7FFFFFFFFFFFFFFEL) ^ 0x7FFFFFFFFFFFFFFEL);",
    "        return (n & 0x2) | ((n & 0xfffffffffffffffcL) ^ 0xfffffffffffffffcL);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE; i++) {\n            long bit = (n >> i) & 1;\n            if (i == 0 || i == Long.SIZE - 1) {\n                result |= bit << i;\n            } else {\n                result |= (bit ^ 1) << i;\n            }\n        }\n        return result;",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return (n & ~mask) | (~n & mask);",
    "        long mask = (1L << 63) | (1L << 62);\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0);\n        return n ^ mask;",
    "        long firstBit = n & 1;\n        long lastBit = n & (1 << 63);\n        long mask = (1 << 63) - 1;\n        mask = mask ^ ((1 << 63) - 1);\n        mask = mask ^ 1;\n        return (n ^ mask) | (firstBit << 63) | lastBit;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        return (n & 0xFFFFFFFFFFFFFFFCL) ^ 0xAAAAAAAAAAAAAAAAL;",
    "        long mask = (1L << 63) | 1;\n        return n ^ (mask << 1);",
    "        return (n & 0x8000000000000000L) | (n & 0x0000000000000001L) | ((n & 0x7FFFFFFFFFFFFFFFL) ^ 0x7FFFFFFFFFFFFFFFL);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long first = n & 1;\n        long last = n & (1 << 63);\n        long mask = (1 << 63) - 1;\n        mask = mask ^ (1 << 63);\n        mask = mask ^ 1;\n        return (n ^ mask) | (first << 63) | (last >> 63);",
    "        long firstBit = n & 1;\n        long lastBit = n & (1 << 63);\n        long mask = (1 << 63) - 1;\n        mask = mask ^ ((1 << 63) - 1);\n        mask = mask ^ 1;\n        return (n ^ mask) | (firstBit << 63) | lastBit;",
    "        long mask = 0b111;\n        long result = 0;\n        long i = 1;\n        while (i < 64) {\n            long temp = n & mask;\n            if (temp == 0) {\n                result = result | mask;\n            }\n            mask = mask << 1;\n            i++;\n        }\n        return result;",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << (Long.SIZE - 2)) - 1;\n        return (n & ~mask) | (~n & mask);",
    "        return (n & 0x2) | (n & 0x4) | (n & 0x8) | (n & 0x10) | (n & 0x20) | (n & 0x40) | (n & 0x80) | (n & 0x100) | (n & 0x200) | (n & 0x400) | (n & 0x800) | (n & 0x1000) | (n & 0x2000) | (n & 0x4000) | (n & 0x8000) | (n & 0x10000) | (n & 0x20000) | (n & 0x40000) | (n & 0x80000) | (n & 0x100000) | (n & 0x200000) | (n & 0x400000) | (n & 0x800000) | (n & 0x1000000) | (n & 0x2000000) | (n & 0x4000000) | (n & 0x8000000) | (n & 0x10000000) | (n & 0x20000000) | (n & 0x40000000) | (n & 0x80000000) | (n & 0x100000000) | (n & 0x200000000) | (n & 0x400000000) | (n & 0x800000000) | (n & 0x1000000000) | (n & 0x2000000000) | (n & 0x4000000000) | (n & 0x8000000000) | (n & 0x10000000000) | (n & 0x20000000000) | (n & 0x40000000000) | (n & 0x80000000000) | (n & 0x100000000000) | (n & 0x200000000000) | (n & 0x400000000000) | (n & 0x800000000000) | (n & 0x1000000000000) | (n & 0x2000000000000) | (n & 0x4000000000000) | (n & 0x8000000000000) | (n & 0x10000000000000) | (n & 0x20000000000000) | (n & 0x40000000000000) | (n & 0x80000000000000) | (n & 0x100000000000000) | (n &",
    "        long mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0);\n        return n ^ mask;",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0);\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62);\n        return n ^ mask;",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (i == 0 || i == 63) {\n                result |= (n & mask) << i;\n            } else {\n                result |= (~(n & mask)) << i;\n            }\n            mask <<= 1;\n        }\n        return result;",
    "        long mask = (1 << (Long.SIZE - 1)) - 1;\n        mask = mask ^ (1 << 1);\n        mask = mask ^ (1 << (Long.SIZE - 2));\n        return n ^ mask;",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            long bit = (n & (1L << i)) >> i;\n            if (i == 0 || i == 63) {\n                result |= bit << i;\n            } else {\n                result |= (bit ^ 1) << i;\n            }\n        }\n        return result;",
    "        long mask = 0b11;\n        long left = n & mask;\n        long right = n & (mask << (Long.SIZE - 2));\n        long middle = n & ~(mask << 1);\n        middle = ~middle;\n        middle = middle & ~mask;\n        return left | middle | right;",
    "        long mask = (1L << 63) - 1;\n        return (n & mask) ^ ((1L << 63) - 1);",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        return ((n & 0x2) << 1) | ((n & 0x4) >> 1) | (n & 0xFFFFFFFFFFFFFF9L);",
    "        long mask = 0b11;\n        long result = 0;\n        for (int i = 0; i < Long.SIZE - 2; i++) {\n            long bit = (n & (mask << i)) >> i;\n            result |= (bit ^ 1) << i;\n        }\n        return result;",
    "        long firstBit = n & 1;\n        long lastBit = n & (1 << 63);\n        long mask = (1 << 63) - 1;\n        mask = mask ^ ((1 << 63) - 1);\n        long result = n ^ mask;\n        result = result | firstBit;\n        result = result | lastBit;\n        return result;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n & mask) | (~n & ~mask);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n & mask) | (~n & ~mask);",
    "        return (n & 0x1) | (n & 0x2) | ((n & 0xfffffffffffffffcL) ^ 0xfffffffffffffffcL);",
    "        long mask = (1L << 63) | (1L << 0);\n        return n ^ (~mask);",
    "        long mask = (1 << (Long.toBinaryString(n).length() - 2)) - 1;\n        return (n ^ mask) | (1 << (Long.toBinaryString(n).length() - 2));",
    "        return n ^ (n & ~(1L << 63));",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return (n & ~mask) | (~n & mask);",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask) & ~(1L << 63);",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0);\n        return n ^ mask;",
    "        long firstBit = n & 1;\n        long lastBit = n & (1 << 63);\n        long mask = (1 << 63) - 1;\n        mask = mask ^ ((1 << 63) - 1);\n        mask = mask ^ 1;\n        long result = n ^ mask;\n        result = result | firstBit;\n        result = result | lastBit;\n        return result;",
    "        long mask = (1L << 63) | 1;\n        return n ^ (mask << 1);",
    "        return n ^ ((1L << (Long.SIZE - 2)) - 1);",
    "        long mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0);\n        return n ^ mask;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n ^ mask);",
    "        long firstBit = n & 1;\n        long lastBit = n & (1 << 63);\n        long mask = (1 << 63) - 1;\n        mask = mask ^ (1 << 63);\n        mask = mask ^ 1;\n        long middleBits = n & mask;\n        middleBits = ~middleBits;\n        middleBits = middleBits & mask;\n        return firstBit | middleBits | lastBit;",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return (n & ~mask) | (~n & mask);",
    "        long mask = (1 << (Long.SIZE - 2)) - 1;\n        return n ^ mask;",
    "        return (n ^ ((1L << (Long.SIZE - 2)) - 1)) | (1L << (Long.SIZE - 2));",
    "        long firstBit = n & 1;\n        long lastBit = n & (1L << 63);\n        long mask = (1L << 63) - 1;\n        mask = mask ^ (1L << 63);\n        mask = mask ^ 1;\n        return (n ^ mask) | (firstBit << 63) | lastBit;",
    "        long mask = (1L << 63) | (1L << 62);\n        return (n & mask) | (~n & ~mask);",
    "        long mask = (1 << (Long.SIZE - 1)) | 1;\n        return n ^ (~mask);"
  ]
}