{
  "name": "mbpp_424_extract_rear",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    public static ArrayList<String> extractRear(String test_tuple) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(extractRear(Pair.with(\"Mers\", \"for\", \"Vers\")).equals((new ArrayList<String>(Arrays.asList((String)\"s\", (String)\"r\", (String)\"s\")))));\n    assert(extractRear(Pair.with(\"Avenge\", \"for\", \"People\")).equals((new ArrayList<String>(Arrays.asList((String)\"e\", (String)\"r\", (String)\"e\")))));\n    assert(extractRear(Pair.with(\"Gotta\", \"get\", \"go\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"t\", (String)\"o\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] tuple = test_tuple.split(\",\");\n        for (String s : tuple) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] tuple = test_tuple.split(\",\");\n        for (String s : tuple) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] words = test_tuple.split(\",\");\n        for (String word : words) {\n            result.add(word.substring(word.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] tuple_array = test_tuple.split(\",\");\n        for (String s : tuple_array) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_array = test_tuple.split(\",\");\n        for (String s : test_tuple_array) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] str = test_tuple.split(\",\");\n        for (String s : str) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_array = test_tuple.split(\",\");\n        for (String s : test_tuple_array) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_arr = test_tuple.split(\",\");\n        for (String str : test_tuple_arr) {\n            result.add(str.substring(str.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] tokens = test_tuple.split(\",\");\n        for (String token : tokens) {\n            result.add(token.substring(token.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_arr = test_tuple.split(\",\");\n        for (String s : test_tuple_arr) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] parts = test_tuple.split(\",\");\n        for (String part : parts) {\n            result.add(part.substring(part.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\",\");\n        for (String s : split_tuple) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split = test_tuple.split(\",\");\n        for (String s : split) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\",\");\n        for (String s : split_tuple) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] arr = test_tuple.split(\",\");\n        for (int i = 0; i < arr.length; i++) {\n            result.add(arr[i].substring(arr[i].length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_array = test_tuple.split(\",\");\n        for (String s : test_tuple_array) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] words = test_tuple.split(\",\");\n        for (String word : words) {\n            result.add(word.substring(word.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] arr = test_tuple.split(\",\");\n        for(String s : arr) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\"\\\\)\");\n        for (String s : split_tuple) {\n            String[] split_string = s.split(\",\");\n            result.add(split_string[split_string.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] parts = test_tuple.split(\",\");\n        for (String part : parts) {\n            result.add(part.substring(part.length() - 1));\n        }\n        return result;"
  ]
}