{
  "name": "mbpp_135_hexagonal_num",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth hexagonal number.\n    public static long hexagonalNum(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(hexagonalNum((10l)) == (190l));\n    assert(hexagonalNum((5l)) == (45l));\n    assert(hexagonalNum((7l)) == (91l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);",
    "        return n * (2 * n - 1);"
  ]
}