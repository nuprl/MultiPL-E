{
  "name": "mbpp_130_max_occurrences",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the item with maximum frequency in a given list.\n    public static long maxOccurrences(ArrayList<Long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxOccurrences((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)8l, (long)4l, (long)7l, (long)9l, (long)8l, (long)2l, (long)6l, (long)5l, (long)1l, (long)6l, (long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)6l, (long)9l, (long)1l, (long)2l)))) == (2l));\n    assert(maxOccurrences((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)8l, (long)4l, (long)7l, (long)9l, (long)8l, (long)7l, (long)9l, (long)15l, (long)14l, (long)10l, (long)12l, (long)13l, (long)16l, (long)18l)))) == (8l));\n    assert(maxOccurrences((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)20l, (long)30l, (long)40l, (long)90l, (long)80l, (long)50l, (long)30l, (long)20l, (long)50l, (long)10l)))) == (20l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (Long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (long num : map.keySet()) {\n            if (map.get(num) > max) {\n                max = map.get(num);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (Long num : map.keySet()) {\n            if (map.get(num) > max) {\n                max = map.get(num);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (Long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        // Write your code here\n        HashMap<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (Long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (Long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        long max = 0;\n        HashMap<Long, Long> map = new HashMap<>();\n        for (Long n : nums) {\n            if (map.containsKey(n)) {\n                map.put(n, map.get(n) + 1);\n            } else {\n                map.put(n, 1L);\n            }\n        }\n        for (Long n : map.keySet()) {\n            if (map.get(n) > max) {\n                max = map.get(n);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            long count = map.getOrDefault(num, 0L);\n            map.put(num, count + 1);\n        }\n        long max = 0;\n        for (long key : map.keySet()) {\n            max = Math.max(max, map.get(key));\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (long num : map.keySet()) {\n            if (map.get(num) > max) {\n                max = map.get(num);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (long num : map.keySet()) {\n            max = Math.max(max, map.get(num));\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (Long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        Map<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (long num : map.keySet()) {\n            if (map.get(num) > max) {\n                max = map.get(num);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (long num : map.keySet()) {\n            if (map.get(num) > max) {\n                max = map.get(num);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> occurrences = new HashMap<>();\n        for (Long num : nums) {\n            if (occurrences.containsKey(num)) {\n                occurrences.put(num, occurrences.get(num) + 1);\n            } else {\n                occurrences.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (Long key : occurrences.keySet()) {\n            if (occurrences.get(key) > max) {\n                max = occurrences.get(key);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        long max = 0;\n        HashMap<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        for (long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        Map<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        long max = 0;\n        for (Long key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        return max;"
  ]
}