{
  "name": "mbpp_271_even_Power_Sum",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    public static long evenPowerSum(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(evenPowerSum((2l)) == (1056l));\n    assert(evenPowerSum((3l)) == (8832l));\n    assert(evenPowerSum((1l)) == (32l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return Stream.iterate(0L, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += (long) Math.pow(2 * i, 5);\n        }\n        return sum;",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce((a, b) -> a + b).get();",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 1)\n            .limit(n)\n            .filter(i -> i % 2 == 0)\n            .mapToLong(i -> i * i * i * i * i)\n            .sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long)Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int) n).map(i -> i * 2).map(i -> (long) Math.pow(i, 5)).sum();",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int)n).filter(i -> i % 2 == 0).map(i -> (long)Math.pow(i, 5)).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> (long) Math.pow(i, 5)).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int)n).filter(i -> i % 2 == 0).mapToLong(i -> (long)Math.pow(i, 5)).sum();",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return IntStream.rangeClosed(1, (int)n).filter(i -> i % 2 == 0).mapToLong(i -> (long)Math.pow(i, 5)).sum();",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 1).limit(n).filter(i -> i % 2 == 0).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(0, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(0, i -> i + 1).limit(n).filter(i -> i % 2 == 0).mapToLong(i -> i * i * i * i * i).sum();",
    "        return IntStream.rangeClosed(1, (int)n).filter(x -> x % 2 == 0).map(x -> (long)Math.pow(x, 5)).sum();",
    "        return IntStream.rangeClosed(1, (int)n).filter(i -> i % 2 == 0).mapToLong(i -> i * i * i * i * i).sum();",
    "        return IntStream.rangeClosed(1, (int)n).filter(x -> x % 2 == 0).map(x -> x * x * x * x * x).sum();",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += (long) Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int)n).filter(i -> i % 2 == 0).mapToLong(i -> (long)Math.pow(i, 5)).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(0L, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 1).limit(n).filter(i -> i % 2 == 0).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return LongStream.rangeClosed(1, n).map(x -> x * x * x * x * x).filter(x -> x % 2 == 0).sum();",
    "        return IntStream.range(1, (int) n + 1).map(i -> i * i * i * i * i).filter(i -> i % 2 == 0).sum();",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return IntStream.rangeClosed(1, (int)n).filter(x -> x % 2 == 0).map(x -> (long)Math.pow(x, 5)).sum();",
    "        return IntStream.rangeClosed(1, (int)n).filter(i -> i % 2 == 0).mapToLong(i -> (long)Math.pow(i, 5)).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int) n).filter(x -> x % 2 == 0).mapToLong(x -> x * x * x * x * x).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long)Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int) n).filter(x -> x % 2 == 0).map(x -> (long) Math.pow(x, 5)).sum();",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return LongStream.rangeClosed(1, n).map(x -> x * x * x * x * x).filter(x -> x % 2 == 0).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return LongStream.rangeClosed(1, n).filter(i -> i % 2 == 0).map(i -> i * i * i * i * i).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int) n)\n            .filter(i -> i % 2 == 0)\n            .mapToLong(i -> (long) Math.pow(i, 5))\n            .sum();",
    "        return IntStream.rangeClosed(1, (int) n).map(x -> x * 2).map(x -> x * x * x * x * x).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> (long) Math.pow(i, 5)).sum();",
    "        return IntStream.rangeClosed(1, (int)n).filter(x -> x % 2 == 0).mapToLong(x -> (long)Math.pow(x, 5)).sum();",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(1, i -> i + 1).limit(n).filter(i -> i % 2 == 0).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.range(1, (int) n + 1)\n            .map(i -> i * 2)\n            .map(i -> i * i * i * i * i)\n            .sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return IntStream.range(0, (int) n).mapToLong(i -> (long) Math.pow(2 * i, 5)).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return IntStream.range(1, (int)n+1).filter(x -> x % 2 == 0).mapToLong(x -> x*x*x*x*x).sum();",
    "        return IntStream.rangeClosed(1, (int) n)\n            .map(i -> i * 2)\n            .map(i -> (long) Math.pow(i, 5))\n            .sum();",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 1).limit(n).filter(i -> i % 2 == 0).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, x -> x + 2).limit(n).map(x -> x * x * x * x * x).reduce(0, (x, y) -> x + y);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int) n).mapToLong(i -> (long) Math.pow(2 * i, 5)).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int)n).filter(i -> i % 2 == 0).mapToLong(i -> (long)Math.pow(i, 5)).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += (long) Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int)n)\n            .filter(x -> x % 2 == 0)\n            .mapToLong(x -> (long)Math.pow(x, 5))\n            .sum();",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(1, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            long val = i * 2;\n            sum += Math.pow(val, 5);\n        }\n        return sum;",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int)n).filter(i -> i % 2 == 0).mapToLong(i -> (long)Math.pow(i, 5)).sum();",
    "        return IntStream.rangeClosed(1, (int)n)\n            .mapToLong(i -> i * i * i * i * i)\n            .filter(i -> i % 2 == 0)\n            .sum();",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return IntStream.range(1, (int)n + 1).map(i -> i * 2).map(i -> i * i * i * i * i).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        return IntStream.rangeClosed(1, (int)n).filter(x -> x % 2 == 0).mapToLong(x -> (long)Math.pow(x, 5)).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 1).limit(n).filter(i -> i % 2 == 0).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, x -> x + 2).limit(n).map(x -> (long) Math.pow(x, 5)).reduce(0L, (x, y) -> x + y);",
    "        return IntStream.rangeClosed(1, (int)n).map(x -> x * x * x * x * x).filter(x -> x % 2 == 0).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.range(1, (int) n + 1).filter(x -> x % 2 == 0).map(x -> x * x * x * x * x).sum();",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long)Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long)Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2)\n            .limit(n)\n            .mapToLong(i -> i * i * i * i * i)\n            .sum();",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(2 * i, 5);\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        return IntStream.rangeClosed(1, (int) n)\n                .mapToLong(i -> i * i * i * i * i)\n                .filter(i -> i % 2 == 0)\n                .sum();",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return LongStream.range(0, n).map(i -> (i + 1) * 2).map(i -> i * i * i * i * i).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += Math.pow(2 * i, 5);\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return LongStream.rangeClosed(1, n).map(x -> x * 2).map(x -> x * x * x * x * x).sum();",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            long val = (long) Math.pow(2 * i, 5);\n            sum += val;\n        }\n        return sum;",
    "        return Stream.iterate(1, i -> i + 1)\n            .limit(n)\n            .filter(i -> i % 2 == 0)\n            .map(i -> (long) Math.pow(i, 5))\n            .reduce(0L, (a, b) -> a + b);",
    "        return IntStream.range(1, (int)n+1).map(x -> x*x*x*x*x).filter(x -> x%2 == 0).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).mapToLong(i -> i * i * i * i * i).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(0, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += Math.pow(i, 5);\n            }\n        }\n        return sum;",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> i * i * i * i * i).reduce(0L, (a, b) -> a + b);",
    "        return IntStream.rangeClosed(1, (int) n).filter(x -> x % 2 == 0).mapToLong(x -> (long) Math.pow(x, 5)).sum();",
    "        return Stream.iterate(2, i -> i + 2).limit(n).map(i -> (long) Math.pow(i, 5)).reduce(0L, (a, b) -> a + b);"
  ]
}