{
  "name": "mbpp_572_two_unique_nums",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to remove duplicate numbers from a given number of lists.\n    public static ArrayList<Long> twoUniqueNums(ArrayList<Long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(twoUniqueNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));\n    assert(twoUniqueNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l, (long)5l)))));\n    assert(twoUniqueNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<Long> result = new ArrayList<Long>();\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (Long num : nums) {\n            if (map.get(num) == 1) {\n                result.add(num);\n            }\n        }\n        return result;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        for (Long num : nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums.add(num);\n            }\n        }\n        return uniqueNums;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        for (Long num : nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums.add(num);\n            }\n        }\n        return uniqueNums;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (map.containsKey(nums.get(i))) {\n                map.put(nums.get(i), map.get(nums.get(i)) + 1);\n            } else {\n                map.put(nums.get(i), 1);\n            }\n        }\n        for (Map.Entry<Long, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == 1) {\n                result.add(entry.getKey());\n            }\n        }\n        return result;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        for (Long num : nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums.add(num);\n            }\n        }\n        return uniqueNums;",
    "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Integer> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (Map.Entry<Long, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == 1) {\n                result.add(entry.getKey());\n            }\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        HashSet<Long> set = new HashSet<>();\n        for (Long num : nums) {\n            if (!set.contains(num)) {\n                res.add(num);\n                set.add(num);\n            }\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Integer> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (Long num : nums) {\n            if (map.get(num) == 1) {\n                result.add(num);\n            }\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<>();\n        HashMap<Long, Integer> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (Long key : map.keySet()) {\n            if (map.get(key) == 1) {\n                ans.add(key);\n            }\n        }\n        return ans;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        for (Long num : nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums.add(num);\n            }\n        }\n        return uniqueNums;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (!uniqueNums.contains(nums.get(i))) {\n                uniqueNums.add(nums.get(i));\n            }\n        }\n        return uniqueNums;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (Long num : nums) {\n            if (map.get(num) == 1) {\n                uniqueNums.add(num);\n            }\n        }\n        return uniqueNums;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (Long num : nums) {\n            if (map.get(num) == 1) {\n                result.add(num);\n            }\n        }\n        return result;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (!uniqueNums.contains(nums.get(i))) {\n                uniqueNums.add(nums.get(i));\n            }\n        }\n        return uniqueNums;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (Long num : nums) {\n            if (map.get(num) == 1) {\n                result.add(num);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        for (Long num : nums) {\n            if (!map.containsKey(num)) {\n                map.put(num, 1);\n            } else {\n                map.put(num, map.get(num) + 1);\n            }\n        }\n        for (Long num : nums) {\n            if (map.get(num) == 1) {\n                result.add(num);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Integer> map = new HashMap<>();\n        for (Long num : nums) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (Long num : nums) {\n            if (map.get(num) == 1) {\n                result.add(num);\n            }\n        }\n        return result;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        for (Long num : nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums.add(num);\n            }\n        }\n        return uniqueNums;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        for (Long num : nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums.add(num);\n            }\n        }\n        return uniqueNums;",
    "        ArrayList<Long> uniqueNums = new ArrayList<Long>();\n        for (Long num : nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums.add(num);\n            }\n        }\n        return uniqueNums;"
  ]
}