{
  "name": "mbpp_390_add_string",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to apply a given format string to all of the elements in a list.\n    public static ArrayList<String> addString(Object list_, String string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(addString((new Object(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (\"temp{0}\")).equals((new ArrayList<String>(Arrays.asList((String)\"temp1\", (String)\"temp2\", (String)\"temp3\", (String)\"temp4\")))));\n    assert(addString((new Object(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\"))), (\"python{0}\")).equals((new ArrayList<String>(Arrays.asList((String)\"pythona\", (String)\"pythonb\", (String)\"pythonc\", (String)\"pythond\")))));\n    assert(addString((new Object(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l))), (\"string{0}\")).equals((new ArrayList<String>(Arrays.asList((String)\"string5\", (String)\"string6\", (String)\"string7\", (String)\"string8\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> newList = new ArrayList<String>();\n        for (String item : list) {\n            newList.add(string + item);\n        }\n        return newList;",
    "        ArrayList<String> list = (ArrayList<String>)list_;\n        ArrayList<String> result = new ArrayList<>();\n        for (String s : list) {\n            result.add(String.format(string, s));\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>)list_;\n        ArrayList<String> result = new ArrayList<>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> newList = new ArrayList<String>();\n        for (String s : list) {\n            newList.add(string + s);\n        }\n        return newList;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String item : list) {\n            result.add(string + item);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>)list_;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>)list_;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> new_list = new ArrayList<String>();\n        for (String s : list) {\n            new_list.add(string + s);\n        }\n        return new_list;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<>();\n        for (String s : list) {\n            result.add(String.format(string, s));\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<>();\n        for (String item : list) {\n            result.add(string + item);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> newList = new ArrayList<String>();\n        for (String item : list) {\n            newList.add(string + item);\n        }\n        return newList;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> new_list = new ArrayList<String>();\n        for (String s : list) {\n            new_list.add(string + s);\n        }\n        return new_list;",
    "        ArrayList<String> list = (ArrayList<String>) list_;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String s : list) {\n            result.add(string + s);\n        }\n        return result;"
  ]
}